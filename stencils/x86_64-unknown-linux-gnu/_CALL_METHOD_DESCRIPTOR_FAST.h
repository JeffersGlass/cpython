// $ /home/jglass/.pyenv/versions/3.12.1/bin/python Tools/jit/build_two_reuse.py x86_64-unknown-linux-gnu --all_ops

typedef enum {
    HoleKind_ARM64_RELOC_GOT_LOAD_PAGE21,
    HoleKind_ARM64_RELOC_GOT_LOAD_PAGEOFF12,
    HoleKind_ARM64_RELOC_UNSIGNED,
    HoleKind_IMAGE_REL_AMD64_ADDR64,
    HoleKind_IMAGE_REL_I386_DIR32,
    HoleKind_R_AARCH64_ABS64,
    HoleKind_R_AARCH64_CALL26,
    HoleKind_R_AARCH64_JUMP26,
    HoleKind_R_AARCH64_MOVW_UABS_G0_NC,
    HoleKind_R_AARCH64_MOVW_UABS_G1_NC,
    HoleKind_R_AARCH64_MOVW_UABS_G2_NC,
    HoleKind_R_AARCH64_MOVW_UABS_G3,
    HoleKind_R_X86_64_64,
    HoleKind_X86_64_RELOC_UNSIGNED,
} HoleKind;

typedef enum {
    HoleValue_CODE,
    HoleValue_CONTINUE,
    HoleValue_DATA,
    HoleValue_EXECUTOR,
    HoleValue_GOT,
    HoleValue_OPARG,
    HoleValue_OPERAND,
    HoleValue_TARGET,
    HoleValue_TOP,
    HoleValue_ZERO,
} HoleValue;

typedef struct {
    const uint64_t offset;
    const HoleKind kind;
    const HoleValue value;
    const void *symbol;
    const uint64_t addend;
} Hole;

typedef struct {
    const size_t body_size;
    const unsigned char * const body;
    const size_t holes_size;
    const Hole * const holes;
} Stencil;

typedef struct {
    const Stencil code;
    const Stencil data;
} StencilGroup;

// _CALL_METHOD_DESCRIPTOR_FASTplus_BEFORE_ASYNC_WITH
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_BEFORE_ASYNC_WITH.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d7                   movq    (%r15,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 df                   movq    (%r15,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4b 8d 1c cf                   leaq    (%r15,%r9,8), %rbx
// 79: 48 8b 3b                      movq    (%rbx), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 4d 29 c7                      subq    %r8, %r15
// 8a: 49 83 c7 b8                   addq    $-0x48, %r15
// 8e: 49 c1 ef 03                   shrq    $0x3, %r15
// 92: 45 89 78 40                   movl    %r15d, 0x40(%r8)
// 96: 49 8b 00                      movq    (%r8), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 5c 24 08                movq    %r11, 0x8(%rsp)
// c3: 4c 89 54 24 18                movq    %r10, 0x18(%rsp)
// c8: 48 89 14 24                   movq    %rdx, (%rsp)
// cc: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// d1: 48 85 c0                      testq   %rax, %rax
// d4: 40 0f 94 c5                   sete    %bpl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 73 08                   leaq    0x8(%rbx), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 a4 01 00 00             je      0x2a8 <_JIT_ENTRY+0x2a8>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 48 8b 1c 24                   movq    (%rsp), %rbx
// 135: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 13a: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 13f: 78 21                         js      0x162 <_JIT_ENTRY+0x162>
// 141: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000143:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 14b: ff d0                         callq   *%rax
// 14d: 49 ff 0c 24                   decq    (%r12)
// 151: 75 0f                         jne     0x162 <_JIT_ENTRY+0x162>
// 153: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000155:  R_X86_64_64  _Py_Dealloc
// 15d: 4c 89 e7                      movq    %r12, %rdi
// 160: ff d0                         callq   *%rax
// 162: 4b 8d 04 f7                   leaq    (%r15,%r14,8), %rax
// 166: 4d 85 ed                      testq   %r13, %r13
// 169: 4c 8b 74 24 20                movq    0x20(%rsp), %r14
// 16e: 0f 84 b5 01 00 00             je      0x329 <_JIT_ENTRY+0x329>
// 174: 48 8b 4c 24 18                movq    0x18(%rsp), %rcx
// 179: 4d 8d 24 cf                   leaq    (%r15,%rcx,8), %r12
// 17d: 4c 89 28                      movq    %r13, (%rax)
// 180: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 184: 48 8b 00                      movq    (%rax), %rax
// 187: 84 c0                         testb   %al, %al
// 189: 74 17                         je      0x1a2 <_JIT_ENTRY+0x1a2>
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_HandlePending
// 195: 48 89 df                      movq    %rbx, %rdi
// 198: ff d0                         callq   *%rax
// 19a: 85 c0                         testl   %eax, %eax
// 19c: 0f 85 8a 01 00 00             jne     0x32c <_JIT_ENTRY+0x32c>
// 1a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a4:  R_X86_64_64  _JIT_OPARG
// 1ac: f7 d0                         notl    %eax
// 1ae: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1b3: 48 98                         cltq
// 1b5: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 1ba: 49 8b 6c c7 f8                movq    -0x8(%r15,%rax,8), %rbp
// 1bf: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000001c1:  R_X86_64_64  _PyObject_LookupSpecial
// 1c9: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000001cb:  R_X86_64_64  _PyRuntime
// 1d3: 49 8d b5 68 a6 00 00          leaq    0xa668(%r13), %rsi
// 1da: 48 89 ef                      movq    %rbp, %rdi
// 1dd: ff d3                         callq   *%rbx
// 1df: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 1e4: 48 85 c0                      testq   %rax, %rax
// 1e7: 0f 84 55 01 00 00             je      0x342 <_JIT_ENTRY+0x342>
// 1ed: 49 81 c5 a0 a6 00 00          addq    $0xa6a0, %r13           # imm = 0xA6A0
// 1f4: 48 89 ef                      movq    %rbp, %rdi
// 1f7: 4c 89 ee                      movq    %r13, %rsi
// 1fa: ff d3                         callq   *%rbx
// 1fc: 48 85 c0                      testq   %rax, %rax
// 1ff: 0f 84 39 02 00 00             je      0x43e <_JIT_ENTRY+0x43e>
// 205: 49 89 c5                      movq    %rax, %r13
// 208: 48 8b 45 00                   movq    (%rbp), %rax
// 20c: 48 85 c0                      testq   %rax, %rax
// 20f: 7f 22                         jg      0x233 <_JIT_ENTRY+0x233>
// 211: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000213:  R_X86_64_64  .rodata.str1.1
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_NegativeRefcount
// 225: be 14 09 00 00                movl    $0x914, %esi            # imm = 0x914
// 22a: 48 89 ea                      movq    %rbp, %rdx
// 22d: ff d0                         callq   *%rax
// 22f: 48 8b 45 00                   movq    (%rbp), %rax
// 233: 85 c0                         testl   %eax, %eax
// 235: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 23a: 78 21                         js      0x25d <_JIT_ENTRY+0x25d>
// 23c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 246: ff d0                         callq   *%rax
// 248: 48 ff 4d 00                   decq    (%rbp)
// 24c: 75 0f                         jne     0x25d <_JIT_ENTRY+0x25d>
// 24e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000250:  R_X86_64_64  _Py_Dealloc
// 258: 48 89 ef                      movq    %rbp, %rdi
// 25b: ff d0                         callq   *%rax
// 25d: 48 8b 43 08                   movq    0x8(%rbx), %rax
// 261: f6 80 a9 00 00 00 08          testb   $0x8, 0xa9(%rax)
// 268: 0f 84 1c 01 00 00             je      0x38a <_JIT_ENTRY+0x38a>
// 26e: 48 8b 40 38                   movq    0x38(%rax), %rax
// 272: 48 8b 04 03                   movq    (%rbx,%rax), %rax
// 276: 48 85 c0                      testq   %rax, %rax
// 279: 0f 84 0b 01 00 00             je      0x38a <_JIT_ENTRY+0x38a>
// 27f: 48 89 df                      movq    %rbx, %rdi
// 282: 31 f6                         xorl    %esi, %esi
// 284: 31 d2                         xorl    %edx, %edx
// 286: 31 c9                         xorl    %ecx, %ecx
// 288: ff d0                         callq   *%rax
// 28a: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000028c:  R_X86_64_64  _Py_CheckFunctionResult
// 294: 48 8b 3c 24                   movq    (%rsp), %rdi
// 298: 48 89 de                      movq    %rbx, %rsi
// 29b: 48 89 c2                      movq    %rax, %rdx
// 29e: 31 c9                         xorl    %ecx, %ecx
// 2a0: 41 ff d0                      callq   *%r8
// 2a3: e9 fc 00 00 00                jmp     0x3a4 <_JIT_ENTRY+0x3a4>
// 2a8: 41 83 fd 02                   cmpl    $0x2, %r13d
// 2ac: 41 be 01 00 00 00             movl    $0x1, %r14d
// 2b2: 45 0f 43 f5                   cmovael %r13d, %r14d
// 2b6: 31 ed                         xorl    %ebp, %ebp
// 2b8: eb 12                         jmp     0x2cc <_JIT_ENTRY+0x2cc>
// 2ba: 66 0f 1f 44 00 00             nopw    (%rax,%rax)
// 2c0: 48 ff c5                      incq    %rbp
// 2c3: 49 39 ee                      cmpq    %rbp, %r14
// 2c6: 0f 84 38 fe ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 2cc: 4c 8b 2c eb                   movq    (%rbx,%rbp,8), %r13
// 2d0: 49 8b 45 00                   movq    (%r13), %rax
// 2d4: 48 85 c0                      testq   %rax, %rax
// 2d7: 7e 07                         jle     0x2e0 <_JIT_ENTRY+0x2e0>
// 2d9: 85 c0                         testl   %eax, %eax
// 2db: 78 e3                         js      0x2c0 <_JIT_ENTRY+0x2c0>
// 2dd: eb 27                         jmp     0x306 <_JIT_ENTRY+0x306>
// 2df: 90                            nop
// 2e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002e2:  R_X86_64_64  .rodata.str1.1
// 2ea: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 2ef: 4c 89 ea                      movq    %r13, %rdx
// 2f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f4:  R_X86_64_64  _Py_NegativeRefcount
// 2fc: ff d0                         callq   *%rax
// 2fe: 49 8b 45 00                   movq    (%r13), %rax
// 302: 85 c0                         testl   %eax, %eax
// 304: 78 ba                         js      0x2c0 <_JIT_ENTRY+0x2c0>
// 306: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000308:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 310: ff d0                         callq   *%rax
// 312: 49 ff 4d 00                   decq    (%r13)
// 316: 75 a8                         jne     0x2c0 <_JIT_ENTRY+0x2c0>
// 318: 4c 89 ef                      movq    %r13, %rdi
// 31b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031d:  R_X86_64_64  _Py_Dealloc
// 325: ff d0                         callq   *%rax
// 327: eb 97                         jmp     0x2c0 <_JIT_ENTRY+0x2c0>
// 329: 49 89 c4                      movq    %rax, %r12
// 32c: 4d 29 f4                      subq    %r14, %r12
// 32f: 49 83 c4 b8                   addq    $-0x48, %r12
// 333: 49 c1 ec 03                   shrq    $0x3, %r12
// 337: 45 89 66 40                   movl    %r12d, 0x40(%r14)
// 33b: 31 c0                         xorl    %eax, %eax
// 33d: e9 6d fd ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 342: 48 8b 04 24                   movq    (%rsp), %rax
// 346: 48 8b 40 68                   movq    0x68(%rax), %rax
// 34a: 48 85 c0                      testq   %rax, %rax
// 34d: 74 07                         je      0x356 <_JIT_ENTRY+0x356>
// 34f: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 354: 75 d6                         jne     0x32c <_JIT_ENTRY+0x32c>
// 356: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000358:  R_X86_64_64  PyExc_TypeError
// 360: 48 8b 30                      movq    (%rax), %rsi
// 363: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 367: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 36b: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000036d:  R_X86_64_64  .rodata.str1.1+0x39
// 375: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000377:  R_X86_64_64  _PyErr_Format
// 37f: 48 8b 3c 24                   movq    (%rsp), %rdi
// 383: 31 c0                         xorl    %eax, %eax
// 385: 41 ff d0                      callq   *%r8
// 388: eb a2                         jmp     0x32c <_JIT_ENTRY+0x32c>
// 38a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000038c:  R_X86_64_64  _PyObject_MakeTpCall
// 394: 48 8b 3c 24                   movq    (%rsp), %rdi
// 398: 48 89 de                      movq    %rbx, %rsi
// 39b: 31 d2                         xorl    %edx, %edx
// 39d: 31 c9                         xorl    %ecx, %ecx
// 39f: 45 31 c0                      xorl    %r8d, %r8d
// 3a2: ff d0                         callq   *%rax
// 3a4: 48 89 c5                      movq    %rax, %rbp
// 3a7: 48 8b 03                      movq    (%rbx), %rax
// 3aa: 48 85 c0                      testq   %rax, %rax
// 3ad: 7f 21                         jg      0x3d0 <_JIT_ENTRY+0x3d0>
// 3af: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003b1:  R_X86_64_64  .rodata.str1.1
// 3b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003bb:  R_X86_64_64  _Py_NegativeRefcount
// 3c3: be 16 09 00 00                movl    $0x916, %esi            # imm = 0x916
// 3c8: 48 89 da                      movq    %rbx, %rdx
// 3cb: ff d0                         callq   *%rax
// 3cd: 48 8b 03                      movq    (%rbx), %rax
// 3d0: 85 c0                         testl   %eax, %eax
// 3d2: 78 20                         js      0x3f4 <_JIT_ENTRY+0x3f4>
// 3d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003d6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3de: ff d0                         callq   *%rax
// 3e0: 48 ff 0b                      decq    (%rbx)
// 3e3: 75 0f                         jne     0x3f4 <_JIT_ENTRY+0x3f4>
// 3e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003e7:  R_X86_64_64  _Py_Dealloc
// 3ef: 48 89 df                      movq    %rbx, %rdi
// 3f2: ff d0                         callq   *%rax
// 3f4: 48 85 ed                      testq   %rbp, %rbp
// 3f7: 74 7f                         je      0x478 <_JIT_ENTRY+0x478>
// 3f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003fb:  R_X86_64_64  _JIT_OPARG
// 403: f7 d0                         notl    %eax
// 405: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 40a: 48 98                         cltq
// 40c: 4d 89 6c c7 f8                movq    %r13, -0x8(%r15,%rax,8)
// 411: 49 89 2c c7                   movq    %rbp, (%r15,%rax,8)
// 415: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 419: 48 83 c6 08                   addq    $0x8, %rsi
// 41d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000041f:  R_X86_64_64  _JIT_CONTINUE
// 427: 4c 89 f7                      movq    %r14, %rdi
// 42a: 48 8b 14 24                   movq    (%rsp), %rdx
// 42e: 48 83 c4 28                   addq    $0x28, %rsp
// 432: 5b                            popq    %rbx
// 433: 41 5c                         popq    %r12
// 435: 41 5d                         popq    %r13
// 437: 41 5e                         popq    %r14
// 439: 41 5f                         popq    %r15
// 43b: 5d                            popq    %rbp
// 43c: ff e0                         jmpq    *%rax
// 43e: 48 8b 04 24                   movq    (%rsp), %rax
// 442: 48 8b 40 68                   movq    0x68(%rax), %rax
// 446: 48 85 c0                      testq   %rax, %rax
// 449: 0f 84 91 00 00 00             je      0x4e0 <_JIT_ENTRY+0x4e0>
// 44f: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 454: 0f 84 86 00 00 00             je      0x4e0 <_JIT_ENTRY+0x4e0>
// 45a: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 45f: 48 8b 03                      movq    (%rbx), %rax
// 462: 48 85 c0                      testq   %rax, %rax
// 465: 0f 8e b8 00 00 00             jle     0x523 <_JIT_ENTRY+0x523>
// 46b: 85 c0                         testl   %eax, %eax
// 46d: 0f 88 b9 fe ff ff             js      0x32c <_JIT_ENTRY+0x32c>
// 473: e9 d4 00 00 00                jmp     0x54c <_JIT_ENTRY+0x54c>
// 478: 49 8b 45 00                   movq    (%r13), %rax
// 47c: 48 85 c0                      testq   %rax, %rax
// 47f: 7f 22                         jg      0x4a3 <_JIT_ENTRY+0x4a3>
// 481: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000483:  R_X86_64_64  .rodata.str1.1
// 48b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000048d:  R_X86_64_64  _Py_NegativeRefcount
// 495: be 18 09 00 00                movl    $0x918, %esi            # imm = 0x918
// 49a: 4c 89 ea                      movq    %r13, %rdx
// 49d: ff d0                         callq   *%rax
// 49f: 49 8b 45 00                   movq    (%r13), %rax
// 4a3: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 4a8: 4d 8d 24 cf                   leaq    (%r15,%rcx,8), %r12
// 4ac: 49 83 c4 f8                   addq    $-0x8, %r12
// 4b0: 85 c0                         testl   %eax, %eax
// 4b2: 0f 88 74 fe ff ff             js      0x32c <_JIT_ENTRY+0x32c>
// 4b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000004ba:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 4c2: ff d0                         callq   *%rax
// 4c4: 49 ff 4d 00                   decq    (%r13)
// 4c8: 0f 85 5e fe ff ff             jne     0x32c <_JIT_ENTRY+0x32c>
// 4ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000004d0:  R_X86_64_64  _Py_Dealloc
// 4d8: 4c 89 ef                      movq    %r13, %rdi
// 4db: e9 8e 00 00 00                jmp     0x56e <_JIT_ENTRY+0x56e>
// 4e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000004e2:  R_X86_64_64  PyExc_TypeError
// 4ea: 48 8b 30                      movq    (%rax), %rsi
// 4ed: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 4f1: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 4f5: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000004f7:  R_X86_64_64  .rodata.str1.1+0x84
// 4ff: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000501:  R_X86_64_64  _PyErr_Format
// 509: 48 8b 3c 24                   movq    (%rsp), %rdi
// 50d: 31 c0                         xorl    %eax, %eax
// 50f: 41 ff d0                      callq   *%r8
// 512: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 517: 48 8b 03                      movq    (%rbx), %rax
// 51a: 48 85 c0                      testq   %rax, %rax
// 51d: 0f 8f 48 ff ff ff             jg      0x46b <_JIT_ENTRY+0x46b>
// 523: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000525:  R_X86_64_64  .rodata.str1.1
// 52d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000052f:  R_X86_64_64  _Py_NegativeRefcount
// 537: be 11 09 00 00                movl    $0x911, %esi            # imm = 0x911
// 53c: 48 89 da                      movq    %rbx, %rdx
// 53f: ff d0                         callq   *%rax
// 541: 48 8b 03                      movq    (%rbx), %rax
// 544: 85 c0                         testl   %eax, %eax
// 546: 0f 88 e0 fd ff ff             js      0x32c <_JIT_ENTRY+0x32c>
// 54c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000054e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 556: ff d0                         callq   *%rax
// 558: 48 ff 0b                      decq    (%rbx)
// 55b: 0f 85 cb fd ff ff             jne     0x32c <_JIT_ENTRY+0x32c>
// 561: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000563:  R_X86_64_64  _Py_Dealloc
// 56b: 48 89 df                      movq    %rbx, %rdi
// 56e: ff d0                         callq   *%rax
// 570: e9 b7 fd ff ff                jmp     0x32c <_JIT_ENTRY+0x32c>
// 575: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_BEFORE_ASYNC_WITH_code_body[1398] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd7, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xdf, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4b, 0x8d, 0x1c, 0xcf, 0x48, 0x8b, 0x3b, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x78, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x08, 0x4c, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x14, 0x24, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x73, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xa4, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xf7, 0x4d, 0x85, 0xed, 0x4c, 0x8b, 0x74, 0x24, 0x20, 0x0f, 0x84, 0xb5, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x18, 0x4d, 0x8d, 0x24, 0xcf, 0x4c, 0x89, 0x28, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x8a, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x6c, 0xc7, 0xf8, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8d, 0xb5, 0x68, 0xa6, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd3, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x55, 0x01, 0x00, 0x00, 0x49, 0x81, 0xc5, 0xa0, 0xa6, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0xff, 0xd3, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x39, 0x02, 0x00, 0x00, 0x49, 0x89, 0xc5, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x14, 0x09, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x43, 0x08, 0xf6, 0x80, 0xa9, 0x00, 0x00, 0x00, 0x08, 0x0f, 0x84, 0x1c, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x40, 0x38, 0x48, 0x8b, 0x04, 0x03, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x0b, 0x01, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x31, 0xf6, 0x31, 0xd2, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x89, 0xde, 0x48, 0x89, 0xc2, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0xe9, 0xfc, 0x00, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xed, 0xeb, 0x12, 0x66, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xee, 0x0f, 0x84, 0x38, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x2c, 0xeb, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x27, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x49, 0x89, 0xc4, 0x4d, 0x29, 0xf4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x45, 0x89, 0x66, 0x40, 0x31, 0xc0, 0xe9, 0x6d, 0xfd, 0xff, 0xff, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x40, 0x68, 0x48, 0x85, 0xc0, 0x74, 0x07, 0x48, 0x83, 0x78, 0x08, 0x00, 0x75, 0xd6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0xeb, 0xa2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x89, 0xde, 0x31, 0xd2, 0x31, 0xc9, 0x45, 0x31, 0xc0, 0xff, 0xd0, 0x48, 0x89, 0xc5, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x16, 0x09, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x74, 0x7f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x6c, 0xc7, 0xf8, 0x49, 0x89, 0x2c, 0xc7, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x40, 0x68, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x91, 0x00, 0x00, 0x00, 0x48, 0x83, 0x78, 0x08, 0x00, 0x0f, 0x84, 0x86, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xb8, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x88, 0xb9, 0xfe, 0xff, 0xff, 0xe9, 0xd4, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x18, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x4d, 0x8d, 0x24, 0xcf, 0x49, 0x83, 0xc4, 0xf8, 0x85, 0xc0, 0x0f, 0x88, 0x74, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x85, 0x5e, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xe9, 0x8e, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x48, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x11, 0x09, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x0f, 0x88, 0xe0, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x0f, 0x85, 0xcb, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0xe9, 0xb7, 0xfd, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_BEFORE_ASYNC_WITH_code_holes[43] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x143, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x155, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1a4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_LookupSpecial, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x28c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckFunctionResult, 0x0},
    {0x2e2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x308, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x31d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x358, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x36d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x377, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x38c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_MakeTpCall, 0x0},
    {0x3b1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3d6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3e7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3fb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x41f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x483, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x48d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x4ba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x4d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x4e2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x4f7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x84},
    {0x501, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x525, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x54e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x563, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'%.200s' object does not support the asynchronous context manager protocol\x00'%.200s' object does not support the asynchronous context manager protocol (missed __aexit__ method)\x00"
// e9: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_BEFORE_ASYNC_WITH_data_body[241] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x20, 0x28, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x20, 0x5f, 0x5f, 0x61, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x5f, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_BEFORE_ASYNC_WITH_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_BEFORE_WITH
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_BEFORE_WITH.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d7                   movq    (%r15,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 df                   movq    (%r15,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4b 8d 1c cf                   leaq    (%r15,%r9,8), %rbx
// 79: 48 8b 3b                      movq    (%rbx), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 4d 29 c7                      subq    %r8, %r15
// 8a: 49 83 c7 b8                   addq    $-0x48, %r15
// 8e: 49 c1 ef 03                   shrq    $0x3, %r15
// 92: 45 89 78 40                   movl    %r15d, 0x40(%r8)
// 96: 49 8b 00                      movq    (%r8), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 5c 24 08                movq    %r11, 0x8(%rsp)
// c3: 4c 89 54 24 18                movq    %r10, 0x18(%rsp)
// c8: 48 89 14 24                   movq    %rdx, (%rsp)
// cc: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// d1: 48 85 c0                      testq   %rax, %rax
// d4: 40 0f 94 c5                   sete    %bpl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 73 08                   leaq    0x8(%rbx), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 a4 01 00 00             je      0x2a8 <_JIT_ENTRY+0x2a8>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 48 8b 1c 24                   movq    (%rsp), %rbx
// 135: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 13a: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 13f: 78 21                         js      0x162 <_JIT_ENTRY+0x162>
// 141: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000143:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 14b: ff d0                         callq   *%rax
// 14d: 49 ff 0c 24                   decq    (%r12)
// 151: 75 0f                         jne     0x162 <_JIT_ENTRY+0x162>
// 153: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000155:  R_X86_64_64  _Py_Dealloc
// 15d: 4c 89 e7                      movq    %r12, %rdi
// 160: ff d0                         callq   *%rax
// 162: 4b 8d 04 f7                   leaq    (%r15,%r14,8), %rax
// 166: 4d 85 ed                      testq   %r13, %r13
// 169: 4c 8b 74 24 20                movq    0x20(%rsp), %r14
// 16e: 0f 84 b5 01 00 00             je      0x329 <_JIT_ENTRY+0x329>
// 174: 48 8b 4c 24 18                movq    0x18(%rsp), %rcx
// 179: 4d 8d 24 cf                   leaq    (%r15,%rcx,8), %r12
// 17d: 4c 89 28                      movq    %r13, (%rax)
// 180: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 184: 48 8b 00                      movq    (%rax), %rax
// 187: 84 c0                         testb   %al, %al
// 189: 74 17                         je      0x1a2 <_JIT_ENTRY+0x1a2>
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_HandlePending
// 195: 48 89 df                      movq    %rbx, %rdi
// 198: ff d0                         callq   *%rax
// 19a: 85 c0                         testl   %eax, %eax
// 19c: 0f 85 8a 01 00 00             jne     0x32c <_JIT_ENTRY+0x32c>
// 1a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a4:  R_X86_64_64  _JIT_OPARG
// 1ac: f7 d0                         notl    %eax
// 1ae: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1b3: 48 98                         cltq
// 1b5: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 1ba: 49 8b 6c c7 f8                movq    -0x8(%r15,%rax,8), %rbp
// 1bf: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000001c1:  R_X86_64_64  _PyObject_LookupSpecial
// 1c9: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000001cb:  R_X86_64_64  _PyRuntime
// 1d3: 49 8d b5 50 ae 00 00          leaq    0xae50(%r13), %rsi
// 1da: 48 89 ef                      movq    %rbp, %rdi
// 1dd: ff d3                         callq   *%rbx
// 1df: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 1e4: 48 85 c0                      testq   %rax, %rax
// 1e7: 0f 84 55 01 00 00             je      0x342 <_JIT_ENTRY+0x342>
// 1ed: 49 81 c5 b8 ae 00 00          addq    $0xaeb8, %r13           # imm = 0xAEB8
// 1f4: 48 89 ef                      movq    %rbp, %rdi
// 1f7: 4c 89 ee                      movq    %r13, %rsi
// 1fa: ff d3                         callq   *%rbx
// 1fc: 48 85 c0                      testq   %rax, %rax
// 1ff: 0f 84 39 02 00 00             je      0x43e <_JIT_ENTRY+0x43e>
// 205: 49 89 c5                      movq    %rax, %r13
// 208: 48 8b 45 00                   movq    (%rbp), %rax
// 20c: 48 85 c0                      testq   %rax, %rax
// 20f: 7f 22                         jg      0x233 <_JIT_ENTRY+0x233>
// 211: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000213:  R_X86_64_64  .rodata.str1.1
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_NegativeRefcount
// 225: be 3f 09 00 00                movl    $0x93f, %esi            # imm = 0x93F
// 22a: 48 89 ea                      movq    %rbp, %rdx
// 22d: ff d0                         callq   *%rax
// 22f: 48 8b 45 00                   movq    (%rbp), %rax
// 233: 85 c0                         testl   %eax, %eax
// 235: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 23a: 78 21                         js      0x25d <_JIT_ENTRY+0x25d>
// 23c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 246: ff d0                         callq   *%rax
// 248: 48 ff 4d 00                   decq    (%rbp)
// 24c: 75 0f                         jne     0x25d <_JIT_ENTRY+0x25d>
// 24e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000250:  R_X86_64_64  _Py_Dealloc
// 258: 48 89 ef                      movq    %rbp, %rdi
// 25b: ff d0                         callq   *%rax
// 25d: 48 8b 43 08                   movq    0x8(%rbx), %rax
// 261: f6 80 a9 00 00 00 08          testb   $0x8, 0xa9(%rax)
// 268: 0f 84 1c 01 00 00             je      0x38a <_JIT_ENTRY+0x38a>
// 26e: 48 8b 40 38                   movq    0x38(%rax), %rax
// 272: 48 8b 04 03                   movq    (%rbx,%rax), %rax
// 276: 48 85 c0                      testq   %rax, %rax
// 279: 0f 84 0b 01 00 00             je      0x38a <_JIT_ENTRY+0x38a>
// 27f: 48 89 df                      movq    %rbx, %rdi
// 282: 31 f6                         xorl    %esi, %esi
// 284: 31 d2                         xorl    %edx, %edx
// 286: 31 c9                         xorl    %ecx, %ecx
// 288: ff d0                         callq   *%rax
// 28a: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000028c:  R_X86_64_64  _Py_CheckFunctionResult
// 294: 48 8b 3c 24                   movq    (%rsp), %rdi
// 298: 48 89 de                      movq    %rbx, %rsi
// 29b: 48 89 c2                      movq    %rax, %rdx
// 29e: 31 c9                         xorl    %ecx, %ecx
// 2a0: 41 ff d0                      callq   *%r8
// 2a3: e9 fc 00 00 00                jmp     0x3a4 <_JIT_ENTRY+0x3a4>
// 2a8: 41 83 fd 02                   cmpl    $0x2, %r13d
// 2ac: 41 be 01 00 00 00             movl    $0x1, %r14d
// 2b2: 45 0f 43 f5                   cmovael %r13d, %r14d
// 2b6: 31 ed                         xorl    %ebp, %ebp
// 2b8: eb 12                         jmp     0x2cc <_JIT_ENTRY+0x2cc>
// 2ba: 66 0f 1f 44 00 00             nopw    (%rax,%rax)
// 2c0: 48 ff c5                      incq    %rbp
// 2c3: 49 39 ee                      cmpq    %rbp, %r14
// 2c6: 0f 84 38 fe ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 2cc: 4c 8b 2c eb                   movq    (%rbx,%rbp,8), %r13
// 2d0: 49 8b 45 00                   movq    (%r13), %rax
// 2d4: 48 85 c0                      testq   %rax, %rax
// 2d7: 7e 07                         jle     0x2e0 <_JIT_ENTRY+0x2e0>
// 2d9: 85 c0                         testl   %eax, %eax
// 2db: 78 e3                         js      0x2c0 <_JIT_ENTRY+0x2c0>
// 2dd: eb 27                         jmp     0x306 <_JIT_ENTRY+0x306>
// 2df: 90                            nop
// 2e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002e2:  R_X86_64_64  .rodata.str1.1
// 2ea: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 2ef: 4c 89 ea                      movq    %r13, %rdx
// 2f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f4:  R_X86_64_64  _Py_NegativeRefcount
// 2fc: ff d0                         callq   *%rax
// 2fe: 49 8b 45 00                   movq    (%r13), %rax
// 302: 85 c0                         testl   %eax, %eax
// 304: 78 ba                         js      0x2c0 <_JIT_ENTRY+0x2c0>
// 306: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000308:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 310: ff d0                         callq   *%rax
// 312: 49 ff 4d 00                   decq    (%r13)
// 316: 75 a8                         jne     0x2c0 <_JIT_ENTRY+0x2c0>
// 318: 4c 89 ef                      movq    %r13, %rdi
// 31b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031d:  R_X86_64_64  _Py_Dealloc
// 325: ff d0                         callq   *%rax
// 327: eb 97                         jmp     0x2c0 <_JIT_ENTRY+0x2c0>
// 329: 49 89 c4                      movq    %rax, %r12
// 32c: 4d 29 f4                      subq    %r14, %r12
// 32f: 49 83 c4 b8                   addq    $-0x48, %r12
// 333: 49 c1 ec 03                   shrq    $0x3, %r12
// 337: 45 89 66 40                   movl    %r12d, 0x40(%r14)
// 33b: 31 c0                         xorl    %eax, %eax
// 33d: e9 6d fd ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 342: 48 8b 04 24                   movq    (%rsp), %rax
// 346: 48 8b 40 68                   movq    0x68(%rax), %rax
// 34a: 48 85 c0                      testq   %rax, %rax
// 34d: 74 07                         je      0x356 <_JIT_ENTRY+0x356>
// 34f: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 354: 75 d6                         jne     0x32c <_JIT_ENTRY+0x32c>
// 356: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000358:  R_X86_64_64  PyExc_TypeError
// 360: 48 8b 30                      movq    (%rax), %rsi
// 363: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 367: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 36b: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000036d:  R_X86_64_64  .rodata.str1.1+0x39
// 375: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000377:  R_X86_64_64  _PyErr_Format
// 37f: 48 8b 3c 24                   movq    (%rsp), %rdi
// 383: 31 c0                         xorl    %eax, %eax
// 385: 41 ff d0                      callq   *%r8
// 388: eb a2                         jmp     0x32c <_JIT_ENTRY+0x32c>
// 38a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000038c:  R_X86_64_64  _PyObject_MakeTpCall
// 394: 48 8b 3c 24                   movq    (%rsp), %rdi
// 398: 48 89 de                      movq    %rbx, %rsi
// 39b: 31 d2                         xorl    %edx, %edx
// 39d: 31 c9                         xorl    %ecx, %ecx
// 39f: 45 31 c0                      xorl    %r8d, %r8d
// 3a2: ff d0                         callq   *%rax
// 3a4: 48 89 c5                      movq    %rax, %rbp
// 3a7: 48 8b 03                      movq    (%rbx), %rax
// 3aa: 48 85 c0                      testq   %rax, %rax
// 3ad: 7f 21                         jg      0x3d0 <_JIT_ENTRY+0x3d0>
// 3af: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003b1:  R_X86_64_64  .rodata.str1.1
// 3b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003bb:  R_X86_64_64  _Py_NegativeRefcount
// 3c3: be 41 09 00 00                movl    $0x941, %esi            # imm = 0x941
// 3c8: 48 89 da                      movq    %rbx, %rdx
// 3cb: ff d0                         callq   *%rax
// 3cd: 48 8b 03                      movq    (%rbx), %rax
// 3d0: 85 c0                         testl   %eax, %eax
// 3d2: 78 20                         js      0x3f4 <_JIT_ENTRY+0x3f4>
// 3d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003d6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3de: ff d0                         callq   *%rax
// 3e0: 48 ff 0b                      decq    (%rbx)
// 3e3: 75 0f                         jne     0x3f4 <_JIT_ENTRY+0x3f4>
// 3e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003e7:  R_X86_64_64  _Py_Dealloc
// 3ef: 48 89 df                      movq    %rbx, %rdi
// 3f2: ff d0                         callq   *%rax
// 3f4: 48 85 ed                      testq   %rbp, %rbp
// 3f7: 74 7f                         je      0x478 <_JIT_ENTRY+0x478>
// 3f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003fb:  R_X86_64_64  _JIT_OPARG
// 403: f7 d0                         notl    %eax
// 405: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 40a: 48 98                         cltq
// 40c: 4d 89 6c c7 f8                movq    %r13, -0x8(%r15,%rax,8)
// 411: 49 89 2c c7                   movq    %rbp, (%r15,%rax,8)
// 415: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 419: 48 83 c6 08                   addq    $0x8, %rsi
// 41d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000041f:  R_X86_64_64  _JIT_CONTINUE
// 427: 4c 89 f7                      movq    %r14, %rdi
// 42a: 48 8b 14 24                   movq    (%rsp), %rdx
// 42e: 48 83 c4 28                   addq    $0x28, %rsp
// 432: 5b                            popq    %rbx
// 433: 41 5c                         popq    %r12
// 435: 41 5d                         popq    %r13
// 437: 41 5e                         popq    %r14
// 439: 41 5f                         popq    %r15
// 43b: 5d                            popq    %rbp
// 43c: ff e0                         jmpq    *%rax
// 43e: 48 8b 04 24                   movq    (%rsp), %rax
// 442: 48 8b 40 68                   movq    0x68(%rax), %rax
// 446: 48 85 c0                      testq   %rax, %rax
// 449: 0f 84 91 00 00 00             je      0x4e0 <_JIT_ENTRY+0x4e0>
// 44f: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 454: 0f 84 86 00 00 00             je      0x4e0 <_JIT_ENTRY+0x4e0>
// 45a: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 45f: 48 8b 03                      movq    (%rbx), %rax
// 462: 48 85 c0                      testq   %rax, %rax
// 465: 0f 8e b8 00 00 00             jle     0x523 <_JIT_ENTRY+0x523>
// 46b: 85 c0                         testl   %eax, %eax
// 46d: 0f 88 b9 fe ff ff             js      0x32c <_JIT_ENTRY+0x32c>
// 473: e9 d4 00 00 00                jmp     0x54c <_JIT_ENTRY+0x54c>
// 478: 49 8b 45 00                   movq    (%r13), %rax
// 47c: 48 85 c0                      testq   %rax, %rax
// 47f: 7f 22                         jg      0x4a3 <_JIT_ENTRY+0x4a3>
// 481: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000483:  R_X86_64_64  .rodata.str1.1
// 48b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000048d:  R_X86_64_64  _Py_NegativeRefcount
// 495: be 43 09 00 00                movl    $0x943, %esi            # imm = 0x943
// 49a: 4c 89 ea                      movq    %r13, %rdx
// 49d: ff d0                         callq   *%rax
// 49f: 49 8b 45 00                   movq    (%r13), %rax
// 4a3: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 4a8: 4d 8d 24 cf                   leaq    (%r15,%rcx,8), %r12
// 4ac: 49 83 c4 f8                   addq    $-0x8, %r12
// 4b0: 85 c0                         testl   %eax, %eax
// 4b2: 0f 88 74 fe ff ff             js      0x32c <_JIT_ENTRY+0x32c>
// 4b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000004ba:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 4c2: ff d0                         callq   *%rax
// 4c4: 49 ff 4d 00                   decq    (%r13)
// 4c8: 0f 85 5e fe ff ff             jne     0x32c <_JIT_ENTRY+0x32c>
// 4ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000004d0:  R_X86_64_64  _Py_Dealloc
// 4d8: 4c 89 ef                      movq    %r13, %rdi
// 4db: e9 8e 00 00 00                jmp     0x56e <_JIT_ENTRY+0x56e>
// 4e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000004e2:  R_X86_64_64  PyExc_TypeError
// 4ea: 48 8b 30                      movq    (%rax), %rsi
// 4ed: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 4f1: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 4f5: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000004f7:  R_X86_64_64  .rodata.str1.1+0x77
// 4ff: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000501:  R_X86_64_64  _PyErr_Format
// 509: 48 8b 3c 24                   movq    (%rsp), %rdi
// 50d: 31 c0                         xorl    %eax, %eax
// 50f: 41 ff d0                      callq   *%r8
// 512: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 517: 48 8b 03                      movq    (%rbx), %rax
// 51a: 48 85 c0                      testq   %rax, %rax
// 51d: 0f 8f 48 ff ff ff             jg      0x46b <_JIT_ENTRY+0x46b>
// 523: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000525:  R_X86_64_64  .rodata.str1.1
// 52d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000052f:  R_X86_64_64  _Py_NegativeRefcount
// 537: be 3c 09 00 00                movl    $0x93c, %esi            # imm = 0x93C
// 53c: 48 89 da                      movq    %rbx, %rdx
// 53f: ff d0                         callq   *%rax
// 541: 48 8b 03                      movq    (%rbx), %rax
// 544: 85 c0                         testl   %eax, %eax
// 546: 0f 88 e0 fd ff ff             js      0x32c <_JIT_ENTRY+0x32c>
// 54c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000054e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 556: ff d0                         callq   *%rax
// 558: 48 ff 0b                      decq    (%rbx)
// 55b: 0f 85 cb fd ff ff             jne     0x32c <_JIT_ENTRY+0x32c>
// 561: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000563:  R_X86_64_64  _Py_Dealloc
// 56b: 48 89 df                      movq    %rbx, %rdi
// 56e: ff d0                         callq   *%rax
// 570: e9 b7 fd ff ff                jmp     0x32c <_JIT_ENTRY+0x32c>
// 575: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_BEFORE_WITH_code_body[1398] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd7, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xdf, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4b, 0x8d, 0x1c, 0xcf, 0x48, 0x8b, 0x3b, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x78, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x08, 0x4c, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x14, 0x24, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x73, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xa4, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xf7, 0x4d, 0x85, 0xed, 0x4c, 0x8b, 0x74, 0x24, 0x20, 0x0f, 0x84, 0xb5, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x18, 0x4d, 0x8d, 0x24, 0xcf, 0x4c, 0x89, 0x28, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x8a, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x6c, 0xc7, 0xf8, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8d, 0xb5, 0x50, 0xae, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd3, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x55, 0x01, 0x00, 0x00, 0x49, 0x81, 0xc5, 0xb8, 0xae, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0xff, 0xd3, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x39, 0x02, 0x00, 0x00, 0x49, 0x89, 0xc5, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3f, 0x09, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x43, 0x08, 0xf6, 0x80, 0xa9, 0x00, 0x00, 0x00, 0x08, 0x0f, 0x84, 0x1c, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x40, 0x38, 0x48, 0x8b, 0x04, 0x03, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x0b, 0x01, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x31, 0xf6, 0x31, 0xd2, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x89, 0xde, 0x48, 0x89, 0xc2, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0xe9, 0xfc, 0x00, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xed, 0xeb, 0x12, 0x66, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xee, 0x0f, 0x84, 0x38, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x2c, 0xeb, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x27, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x49, 0x89, 0xc4, 0x4d, 0x29, 0xf4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x45, 0x89, 0x66, 0x40, 0x31, 0xc0, 0xe9, 0x6d, 0xfd, 0xff, 0xff, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x40, 0x68, 0x48, 0x85, 0xc0, 0x74, 0x07, 0x48, 0x83, 0x78, 0x08, 0x00, 0x75, 0xd6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0xeb, 0xa2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x89, 0xde, 0x31, 0xd2, 0x31, 0xc9, 0x45, 0x31, 0xc0, 0xff, 0xd0, 0x48, 0x89, 0xc5, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x41, 0x09, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x74, 0x7f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x6c, 0xc7, 0xf8, 0x49, 0x89, 0x2c, 0xc7, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x40, 0x68, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x91, 0x00, 0x00, 0x00, 0x48, 0x83, 0x78, 0x08, 0x00, 0x0f, 0x84, 0x86, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xb8, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x88, 0xb9, 0xfe, 0xff, 0xff, 0xe9, 0xd4, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x43, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x4d, 0x8d, 0x24, 0xcf, 0x49, 0x83, 0xc4, 0xf8, 0x85, 0xc0, 0x0f, 0x88, 0x74, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x85, 0x5e, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xe9, 0x8e, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x48, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3c, 0x09, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x0f, 0x88, 0xe0, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x0f, 0x85, 0xcb, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0xe9, 0xb7, 0xfd, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_BEFORE_WITH_code_holes[43] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x143, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x155, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1a4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_LookupSpecial, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x28c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckFunctionResult, 0x0},
    {0x2e2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x308, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x31d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x358, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x36d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x377, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x38c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_MakeTpCall, 0x0},
    {0x3b1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3d6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3e7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3fb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x41f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x483, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x48d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x4ba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x4d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x4e2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x4f7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x77},
    {0x501, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x525, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x54e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x563, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'%.200s' object does not support the context manager protocol\x00'%.200s' object does not support the context manager protocol (missed __exit__ method)\x00"
// ce: 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_BEFORE_WITH_data_body[209] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x20, 0x28, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x20, 0x5f, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x5f, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x29, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_BEFORE_WITH_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_OP
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_OP.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d6                   movq    (%r14,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 de                   movq    (%r14,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c ce                   leaq    (%r14,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 c6                      subq    %r8, %r14
// 8b: 49 83 c6 b8                   addq    $-0x48, %r14
// 8f: 49 c1 ee 03                   shrq    $0x3, %r14
// 93: 45 89 70 40                   movl    %r14d, 0x40(%r8)
// 97: 49 8b 00                      movq    (%r8), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 5c 24 18                movq    %r11, 0x18(%rsp)
// c4: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// c9: 48 89 14 24                   movq    %rdx, (%rsp)
// cd: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 a7 00 00 00             je      0x1aa <_JIT_ENTRY+0x1aa>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 135: 4c 8b 3c 24                   movq    (%rsp), %r15
// 139: 78 21                         js      0x15c <_JIT_ENTRY+0x15c>
// 13b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 145: ff d0                         callq   *%rax
// 147: 49 ff 0c 24                   decq    (%r12)
// 14b: 75 0f                         jne     0x15c <_JIT_ENTRY+0x15c>
// 14d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014f:  R_X86_64_64  _Py_Dealloc
// 157: 4c 89 e7                      movq    %r12, %rdi
// 15a: ff d0                         callq   *%rax
// 15c: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 161: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 165: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 16a: 48 85 c9                      testq   %rcx, %rcx
// 16d: 0f 84 c6 01 00 00             je      0x339 <_JIT_ENTRY+0x339>
// 173: 48 89 08                      movq    %rcx, (%rax)
// 176: 49 8b 47 10                   movq    0x10(%r15), %rax
// 17a: 48 8b 00                      movq    (%rax), %rax
// 17d: 84 c0                         testb   %al, %al
// 17f: 0f 84 a4 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 185: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000187:  R_X86_64_64  _Py_HandlePending
// 18f: 4c 89 ff                      movq    %r15, %rdi
// 192: ff d0                         callq   *%rax
// 194: 85 c0                         testl   %eax, %eax
// 196: 0f 84 8d 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 19c: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1a1: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 1a5: e9 8f 01 00 00                jmp     0x339 <_JIT_ENTRY+0x339>
// 1aa: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1ae: bb 01 00 00 00                movl    $0x1, %ebx
// 1b3: 41 0f 43 dd                   cmovael %r13d, %ebx
// 1b7: 45 31 ff                      xorl    %r15d, %r15d
// 1ba: eb 10                         jmp     0x1cc <_JIT_ENTRY+0x1cc>
// 1bc: 0f 1f 40 00                   nopl    (%rax)
// 1c0: 49 ff c7                      incq    %r15
// 1c3: 4c 39 fb                      cmpq    %r15, %rbx
// 1c6: 0f 84 37 ff ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 1cc: 4e 8b 6c fd 00                movq    (%rbp,%r15,8), %r13
// 1d1: 49 8b 45 00                   movq    (%r13), %rax
// 1d5: 48 85 c0                      testq   %rax, %rax
// 1d8: 7e 06                         jle     0x1e0 <_JIT_ENTRY+0x1e0>
// 1da: 85 c0                         testl   %eax, %eax
// 1dc: 78 e2                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 1de: eb 26                         jmp     0x206 <_JIT_ENTRY+0x206>
// 1e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e2:  R_X86_64_64  .rodata.str1.1
// 1ea: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ef: 4c 89 ea                      movq    %r13, %rdx
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _Py_NegativeRefcount
// 1fc: ff d0                         callq   *%rax
// 1fe: 49 8b 45 00                   movq    (%r13), %rax
// 202: 85 c0                         testl   %eax, %eax
// 204: 78 ba                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 210: ff d0                         callq   *%rax
// 212: 49 ff 4d 00                   decq    (%r13)
// 216: 75 a8                         jne     0x1c0 <_JIT_ENTRY+0x1c0>
// 218: 4c 89 ef                      movq    %r13, %rdi
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_Dealloc
// 225: ff d0                         callq   *%rax
// 227: eb 97                         jmp     0x1c0 <_JIT_ENTRY+0x1c0>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _JIT_OPARG
// 233: 0f b7 c8                      movzwl  %ax, %ecx
// 236: f7 d0                         notl    %eax
// 238: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 23d: 4c 63 f8                      movslq  %eax, %r15
// 240: 4b 8b 6c fe f0                movq    -0x10(%r14,%r15,8), %rbp
// 245: 4f 8b 6c fe f8                movq    -0x8(%r14,%r15,8), %r13
// 24a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024c:  R_X86_64_64  _PyEval_BinaryOps
// 254: 48 89 ef                      movq    %rbp, %rdi
// 257: 4c 89 ee                      movq    %r13, %rsi
// 25a: ff 14 c8                      callq   *(%rax,%rcx,8)
// 25d: 49 89 c4                      movq    %rax, %r12
// 260: 48 8b 45 00                   movq    (%rbp), %rax
// 264: 48 85 c0                      testq   %rax, %rax
// 267: 7f 22                         jg      0x28b <_JIT_ENTRY+0x28b>
// 269: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000026b:  R_X86_64_64  .rodata.str1.1
// 273: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000275:  R_X86_64_64  _Py_NegativeRefcount
// 27d: be d4 0c 00 00                movl    $0xcd4, %esi            # imm = 0xCD4
// 282: 48 89 ea                      movq    %rbp, %rdx
// 285: ff d0                         callq   *%rax
// 287: 48 8b 45 00                   movq    (%rbp), %rax
// 28b: 85 c0                         testl   %eax, %eax
// 28d: 78 21                         js      0x2b0 <_JIT_ENTRY+0x2b0>
// 28f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000291:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 299: ff d0                         callq   *%rax
// 29b: 48 ff 4d 00                   decq    (%rbp)
// 29f: 75 0f                         jne     0x2b0 <_JIT_ENTRY+0x2b0>
// 2a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a3:  R_X86_64_64  _Py_Dealloc
// 2ab: 48 89 ef                      movq    %rbp, %rdi
// 2ae: ff d0                         callq   *%rax
// 2b0: 49 8b 45 00                   movq    (%r13), %rax
// 2b4: 48 85 c0                      testq   %rax, %rax
// 2b7: 7f 22                         jg      0x2db <_JIT_ENTRY+0x2db>
// 2b9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002bb:  R_X86_64_64  .rodata.str1.1
// 2c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c5:  R_X86_64_64  _Py_NegativeRefcount
// 2cd: be d5 0c 00 00                movl    $0xcd5, %esi            # imm = 0xCD5
// 2d2: 4c 89 ea                      movq    %r13, %rdx
// 2d5: ff d0                         callq   *%rax
// 2d7: 49 8b 45 00                   movq    (%r13), %rax
// 2db: 85 c0                         testl   %eax, %eax
// 2dd: 78 21                         js      0x300 <_JIT_ENTRY+0x300>
// 2df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2e9: ff d0                         callq   *%rax
// 2eb: 49 ff 4d 00                   decq    (%r13)
// 2ef: 75 0f                         jne     0x300 <_JIT_ENTRY+0x300>
// 2f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f3:  R_X86_64_64  _Py_Dealloc
// 2fb: 4c 89 ef                      movq    %r13, %rdi
// 2fe: ff d0                         callq   *%rax
// 300: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 304: 48 83 c0 f0                   addq    $-0x10, %rax
// 308: 4d 85 e4                      testq   %r12, %r12
// 30b: 74 2c                         je      0x339 <_JIT_ENTRY+0x339>
// 30d: 4b 8d 34 fe                   leaq    (%r14,%r15,8), %rsi
// 311: 48 83 c6 f8                   addq    $-0x8, %rsi
// 315: 4c 89 20                      movq    %r12, (%rax)
// 318: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031a:  R_X86_64_64  _JIT_CONTINUE
// 322: 48 89 df                      movq    %rbx, %rdi
// 325: 48 8b 14 24                   movq    (%rsp), %rdx
// 329: 48 83 c4 28                   addq    $0x28, %rsp
// 32d: 5b                            popq    %rbx
// 32e: 41 5c                         popq    %r12
// 330: 41 5d                         popq    %r13
// 332: 41 5e                         popq    %r14
// 334: 41 5f                         popq    %r15
// 336: 5d                            popq    %rbp
// 337: ff e0                         jmpq    *%rax
// 339: 48 29 d8                      subq    %rbx, %rax
// 33c: 48 83 c0 b8                   addq    $-0x48, %rax
// 340: 48 c1 e8 03                   shrq    $0x3, %rax
// 344: 89 43 40                      movl    %eax, 0x40(%rbx)
// 347: 31 c0                         xorl    %eax, %eax
// 349: e9 62 fd ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 34e: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_OP_code_body[847] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd6, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xde, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xce, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc6, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x70, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x18, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x14, 0x24, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xa7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x3c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xc6, 0x01, 0x00, 0x00, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xa4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x8d, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc6, 0xe9, 0x8f, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xdd, 0x45, 0x31, 0xff, 0xeb, 0x10, 0x0f, 0x1f, 0x40, 0x00, 0x49, 0xff, 0xc7, 0x4c, 0x39, 0xfb, 0x0f, 0x84, 0x37, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xfd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xf8, 0x4b, 0x8b, 0x6c, 0xfe, 0xf0, 0x4f, 0x8b, 0x6c, 0xfe, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0xff, 0x14, 0xc8, 0x49, 0x89, 0xc4, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd4, 0x0c, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd5, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x83, 0xc0, 0xf0, 0x4d, 0x85, 0xe4, 0x74, 0x2c, 0x4b, 0x8d, 0x34, 0xfe, 0x48, 0x83, 0xc6, 0xf8, 0x4c, 0x89, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x62, 0xfd, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_OP_code_holes[25] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x187, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x24c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_BinaryOps, 0x0},
    {0x26b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x275, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x291, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2bb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2c5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2e1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2f3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x31a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_OP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_OP_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_OP_ADD_FLOAT
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_OP_ADD_FLOAT.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d6                   movq    (%r14,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 de                   movq    (%r14,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4b 8d 1c ce                   leaq    (%r14,%r9,8), %rbx
// 79: 48 8b 3b                      movq    (%rbx), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 4d 29 c6                      subq    %r8, %r14
// 8a: 49 83 c6 b8                   addq    $-0x48, %r14
// 8e: 49 c1 ee 03                   shrq    $0x3, %r14
// 92: 45 89 70 40                   movl    %r14d, 0x40(%r8)
// 96: 49 8b 00                      movq    (%r8), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 5c 24 18                movq    %r11, 0x18(%rsp)
// c3: 4c 89 54 24 20                movq    %r10, 0x20(%rsp)
// c8: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// cd: 4c 89 04 24                   movq    %r8, (%rsp)
// d1: 48 85 c0                      testq   %rax, %rax
// d4: 40 0f 94 c5                   sete    %bpl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 73 08                   leaq    0x8(%rbx), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 0b 01 00 00             je      0x20f <_JIT_ENTRY+0x20f>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 136: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// 13b: 78 21                         js      0x15e <_JIT_ENTRY+0x15e>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 147: ff d0                         callq   *%rax
// 149: 49 ff 0c 24                   decq    (%r12)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_Dealloc
// 159: 4c 89 e7                      movq    %r12, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 163: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 167: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 16c: 48 85 c9                      testq   %rcx, %rcx
// 16f: 0f 84 24 01 00 00             je      0x299 <_JIT_ENTRY+0x299>
// 175: 4b 8d 2c fe                   leaq    (%r14,%r15,8), %rbp
// 179: 48 89 08                      movq    %rcx, (%rax)
// 17c: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 180: 48 8b 00                      movq    (%rax), %rax
// 183: 84 c0                         testb   %al, %al
// 185: 74 17                         je      0x19e <_JIT_ENTRY+0x19e>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _Py_HandlePending
// 191: 48 89 df                      movq    %rbx, %rdi
// 194: ff d0                         callq   *%rax
// 196: 85 c0                         testl   %eax, %eax
// 198: 0f 85 fe 00 00 00             jne     0x29c <_JIT_ENTRY+0x29c>
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  _JIT_OPARG
// 1a8: f7 d0                         notl    %eax
// 1aa: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1af: 4c 63 f8                      movslq  %eax, %r15
// 1b2: 4b 8b 5c fe f0                movq    -0x10(%r14,%r15,8), %rbx
// 1b7: 4f 8b 64 fe f8                movq    -0x8(%r14,%r15,8), %r12
// 1bc: f2 0f 10 43 10                movsd   0x10(%rbx), %xmm0       # xmm0 = mem[0],zero
// 1c1: f2 41 0f 58 44 24 10          addsd   0x10(%r12), %xmm0
// 1c8: 48 83 3b 01                   cmpq    $0x1, (%rbx)
// 1cc: 0f 85 e3 00 00 00             jne     0x2b5 <_JIT_ENTRY+0x2b5>
// 1d2: f2 0f 11 43 10                movsd   %xmm0, 0x10(%rbx)
// 1d7: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 1dd: 75 28                         jne     0x207 <_JIT_ENTRY+0x207>
// 1df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e1:  R_X86_64_64  PyInterpreterState_Get
// 1e9: ff d0                         callq   *%rax
// 1eb: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1f2: 49 ff 0c 24                   decq    (%r12)
// 1f6: 75 0f                         jne     0x207 <_JIT_ENTRY+0x207>
// 1f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fa:  R_X86_64_64  _PyFloat_ExactDealloc
// 202: 4c 89 e7                      movq    %r12, %rdi
// 205: ff d0                         callq   *%rax
// 207: 49 89 dc                      movq    %rbx, %r12
// 20a: e9 6d 01 00 00                jmp     0x37c <_JIT_ENTRY+0x37c>
// 20f: 41 83 fd 02                   cmpl    $0x2, %r13d
// 213: bd 01 00 00 00                movl    $0x1, %ebp
// 218: 41 0f 43 ed                   cmovael %r13d, %ebp
// 21c: 45 31 ff                      xorl    %r15d, %r15d
// 21f: eb 1b                         jmp     0x23c <_JIT_ENTRY+0x23c>
// 221: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// 230: 49 ff c7                      incq    %r15
// 233: 4c 39 fd                      cmpq    %r15, %rbp
// 236: 0f 84 c8 fe ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 23c: 4e 8b 2c fb                   movq    (%rbx,%r15,8), %r13
// 240: 49 8b 45 00                   movq    (%r13), %rax
// 244: 48 85 c0                      testq   %rax, %rax
// 247: 7e 07                         jle     0x250 <_JIT_ENTRY+0x250>
// 249: 85 c0                         testl   %eax, %eax
// 24b: 78 e3                         js      0x230 <_JIT_ENTRY+0x230>
// 24d: eb 27                         jmp     0x276 <_JIT_ENTRY+0x276>
// 24f: 90                            nop
// 250: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000252:  R_X86_64_64  .rodata.str1.1
// 25a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 25f: 4c 89 ea                      movq    %r13, %rdx
// 262: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000264:  R_X86_64_64  _Py_NegativeRefcount
// 26c: ff d0                         callq   *%rax
// 26e: 49 8b 45 00                   movq    (%r13), %rax
// 272: 85 c0                         testl   %eax, %eax
// 274: 78 ba                         js      0x230 <_JIT_ENTRY+0x230>
// 276: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000278:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 280: ff d0                         callq   *%rax
// 282: 49 ff 4d 00                   decq    (%r13)
// 286: 75 a8                         jne     0x230 <_JIT_ENTRY+0x230>
// 288: 4c 89 ef                      movq    %r13, %rdi
// 28b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028d:  R_X86_64_64  _Py_Dealloc
// 295: ff d0                         callq   *%rax
// 297: eb 97                         jmp     0x230 <_JIT_ENTRY+0x230>
// 299: 48 89 c5                      movq    %rax, %rbp
// 29c: 48 8b 04 24                   movq    (%rsp), %rax
// 2a0: 48 29 c5                      subq    %rax, %rbp
// 2a3: 48 83 c5 b8                   addq    $-0x48, %rbp
// 2a7: 48 c1 ed 03                   shrq    $0x3, %rbp
// 2ab: 89 68 40                      movl    %ebp, 0x40(%rax)
// 2ae: 31 c0                         xorl    %eax, %eax
// 2b0: e9 fa fd ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 2b5: 49 83 3c 24 01                cmpq    $0x1, (%r12)
// 2ba: 75 30                         jne     0x2ec <_JIT_ENTRY+0x2ec>
// 2bc: f2 41 0f 11 44 24 10          movsd   %xmm0, 0x10(%r12)
// 2c3: f6 43 03 80                   testb   $-0x80, 0x3(%rbx)
// 2c7: 0f 85 af 00 00 00             jne     0x37c <_JIT_ENTRY+0x37c>
// 2cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cf:  R_X86_64_64  PyInterpreterState_Get
// 2d7: ff d0                         callq   *%rax
// 2d9: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 2e0: 48 8b 03                      movq    (%rbx), %rax
// 2e3: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 2e7: 48 89 0b                      movq    %rcx, (%rbx)
// 2ea: eb 67                         jmp     0x353 <_JIT_ENTRY+0x353>
// 2ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ee:  R_X86_64_64  PyFloat_FromDouble
// 2f6: ff d0                         callq   *%rax
// 2f8: 48 85 c0                      testq   %rax, %rax
// 2fb: 74 9f                         je      0x29c <_JIT_ENTRY+0x29c>
// 2fd: 49 89 c5                      movq    %rax, %r13
// 300: f6 43 03 80                   testb   $-0x80, 0x3(%rbx)
// 304: 75 23                         jne     0x329 <_JIT_ENTRY+0x329>
// 306: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000308:  R_X86_64_64  PyInterpreterState_Get
// 310: ff d0                         callq   *%rax
// 312: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 319: 48 8b 03                      movq    (%rbx), %rax
// 31c: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 320: 48 89 0b                      movq    %rcx, (%rbx)
// 323: 48 83 f8 01                   cmpq    $0x1, %rax
// 327: 7e 30                         jle     0x359 <_JIT_ENTRY+0x359>
// 329: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 32f: 75 48                         jne     0x379 <_JIT_ENTRY+0x379>
// 331: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000333:  R_X86_64_64  PyInterpreterState_Get
// 33b: ff d0                         callq   *%rax
// 33d: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 344: 49 8b 04 24                   movq    (%r12), %rax
// 348: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 34c: 49 89 0c 24                   movq    %rcx, (%r12)
// 350: 4d 89 ec                      movq    %r13, %r12
// 353: 48 83 f8 01                   cmpq    $0x1, %rax
// 357: 7f 23                         jg      0x37c <_JIT_ENTRY+0x37c>
// 359: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000035b:  R_X86_64_64  .rodata.str1.1+0x39
// 363: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000365:  R_X86_64_64  .rodata.str1.1+0x4f
// 36d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000036f:  R_X86_64_64  _Py_FatalRefcountErrorFunc
// 377: ff d0                         callq   *%rax
// 379: 4d 89 ec                      movq    %r13, %r12
// 37c: 4b 8d 34 fe                   leaq    (%r14,%r15,8), %rsi
// 380: 48 83 c6 f8                   addq    $-0x8, %rsi
// 384: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000386:  R_X86_64_64  _JIT_OPARG
// 38e: f7 d0                         notl    %eax
// 390: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 395: 48 98                         cltq
// 397: 4d 89 64 c6 f0                movq    %r12, -0x10(%r14,%rax,8)
// 39c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000039e:  R_X86_64_64  _JIT_CONTINUE
// 3a6: 48 8b 3c 24                   movq    (%rsp), %rdi
// 3aa: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 3af: 48 83 c4 28                   addq    $0x28, %rsp
// 3b3: 5b                            popq    %rbx
// 3b4: 41 5c                         popq    %r12
// 3b6: 41 5d                         popq    %r13
// 3b8: 41 5e                         popq    %r14
// 3ba: 41 5f                         popq    %r15
// 3bc: 5d                            popq    %rbp
// 3bd: ff e0                         jmpq    *%rax
// 3bf: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_OP_ADD_FLOAT_code_body[960] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd6, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xde, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4b, 0x8d, 0x1c, 0xce, 0x48, 0x8b, 0x3b, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc6, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x70, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x18, 0x4c, 0x89, 0x54, 0x24, 0x20, 0x48, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x73, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0x0b, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x24, 0x01, 0x00, 0x00, 0x4b, 0x8d, 0x2c, 0xfe, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xfe, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xf8, 0x4b, 0x8b, 0x5c, 0xfe, 0xf0, 0x4f, 0x8b, 0x64, 0xfe, 0xf8, 0xf2, 0x0f, 0x10, 0x43, 0x10, 0xf2, 0x41, 0x0f, 0x58, 0x44, 0x24, 0x10, 0x48, 0x83, 0x3b, 0x01, 0x0f, 0x85, 0xe3, 0x00, 0x00, 0x00, 0xf2, 0x0f, 0x11, 0x43, 0x10, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0xdc, 0xe9, 0x6d, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xed, 0x45, 0x31, 0xff, 0xeb, 0x1b, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc7, 0x4c, 0x39, 0xfd, 0x0f, 0x84, 0xc8, 0xfe, 0xff, 0xff, 0x4e, 0x8b, 0x2c, 0xfb, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x27, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0x89, 0xc5, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x29, 0xc5, 0x48, 0x83, 0xc5, 0xb8, 0x48, 0xc1, 0xed, 0x03, 0x89, 0x68, 0x40, 0x31, 0xc0, 0xe9, 0xfa, 0xfd, 0xff, 0xff, 0x49, 0x83, 0x3c, 0x24, 0x01, 0x75, 0x30, 0xf2, 0x41, 0x0f, 0x11, 0x44, 0x24, 0x10, 0xf6, 0x43, 0x03, 0x80, 0x0f, 0x85, 0xaf, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0x8b, 0x03, 0x48, 0x8d, 0x48, 0xff, 0x48, 0x89, 0x0b, 0xeb, 0x67, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x9f, 0x49, 0x89, 0xc5, 0xf6, 0x43, 0x03, 0x80, 0x75, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0x8b, 0x03, 0x48, 0x8d, 0x48, 0xff, 0x48, 0x89, 0x0b, 0x48, 0x83, 0xf8, 0x01, 0x7e, 0x30, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x48, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x0c, 0x24, 0x4d, 0x89, 0xec, 0x48, 0x83, 0xf8, 0x01, 0x7f, 0x23, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0xec, 0x4b, 0x8d, 0x34, 0xfe, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x64, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_OP_ADD_FLOAT_code_holes[26] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1fa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x278, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x28d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2cf, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_FromDouble, 0x0},
    {0x308, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x333, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x35b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x365, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x4f},
    {0x36f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FatalRefcountErrorFunc, 0x0},
    {0x386, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x39e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_DECREF_NO_DEALLOC\x00Expected a positive remaining refcount\x00'
// 76: 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_OP_ADD_FLOAT_data_body[121] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x46, 0x5f, 0x4e, 0x4f, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x00, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x61, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x20, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x66, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_OP_ADD_FLOAT_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_OP_ADD_INT
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_OP_ADD_INT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d6                   movq    (%r14,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 de                   movq    (%r14,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c ce                   leaq    (%r14,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 c6                      subq    %r8, %r14
// 8b: 49 83 c6 b8                   addq    $-0x48, %r14
// 8f: 49 c1 ee 03                   shrq    $0x3, %r14
// 93: 45 89 70 40                   movl    %r14d, 0x40(%r8)
// 97: 49 8b 00                      movq    (%r8), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 5c 24 20                movq    %r11, 0x20(%rsp)
// c4: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c9: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// ce: 4c 89 04 24                   movq    %r8, (%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 a7 00 00 00             je      0x1aa <_JIT_ENTRY+0x1aa>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 1c 24                   movq    (%rsp), %rbx
// 134: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 139: 78 21                         js      0x15c <_JIT_ENTRY+0x15c>
// 13b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 145: ff d0                         callq   *%rax
// 147: 49 ff 0c 24                   decq    (%r12)
// 14b: 75 0f                         jne     0x15c <_JIT_ENTRY+0x15c>
// 14d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014f:  R_X86_64_64  _Py_Dealloc
// 157: 4c 89 e7                      movq    %r12, %rdi
// 15a: ff d0                         callq   *%rax
// 15c: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 161: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 165: 48 8b 4c 24 18                movq    0x18(%rsp), %rcx
// 16a: 48 85 c9                      testq   %rcx, %rcx
// 16d: 0f 84 7b 01 00 00             je      0x2ee <_JIT_ENTRY+0x2ee>
// 173: 48 89 08                      movq    %rcx, (%rax)
// 176: 49 8b 47 10                   movq    0x10(%r15), %rax
// 17a: 48 8b 00                      movq    (%rax), %rax
// 17d: 84 c0                         testb   %al, %al
// 17f: 0f 84 a4 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 185: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000187:  R_X86_64_64  _Py_HandlePending
// 18f: 4c 89 ff                      movq    %r15, %rdi
// 192: ff d0                         callq   *%rax
// 194: 85 c0                         testl   %eax, %eax
// 196: 0f 84 8d 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 19c: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1a1: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 1a5: e9 44 01 00 00                jmp     0x2ee <_JIT_ENTRY+0x2ee>
// 1aa: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1ae: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1b4: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1b8: 31 db                         xorl    %ebx, %ebx
// 1ba: eb 10                         jmp     0x1cc <_JIT_ENTRY+0x1cc>
// 1bc: 0f 1f 40 00                   nopl    (%rax)
// 1c0: 48 ff c3                      incq    %rbx
// 1c3: 49 39 df                      cmpq    %rbx, %r15
// 1c6: 0f 84 37 ff ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 1cc: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1d1: 49 8b 45 00                   movq    (%r13), %rax
// 1d5: 48 85 c0                      testq   %rax, %rax
// 1d8: 7e 06                         jle     0x1e0 <_JIT_ENTRY+0x1e0>
// 1da: 85 c0                         testl   %eax, %eax
// 1dc: 78 e2                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 1de: eb 26                         jmp     0x206 <_JIT_ENTRY+0x206>
// 1e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e2:  R_X86_64_64  .rodata.str1.1
// 1ea: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ef: 4c 89 ea                      movq    %r13, %rdx
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _Py_NegativeRefcount
// 1fc: ff d0                         callq   *%rax
// 1fe: 49 8b 45 00                   movq    (%r13), %rax
// 202: 85 c0                         testl   %eax, %eax
// 204: 78 ba                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 210: ff d0                         callq   *%rax
// 212: 49 ff 4d 00                   decq    (%r13)
// 216: 75 a8                         jne     0x1c0 <_JIT_ENTRY+0x1c0>
// 218: 4c 89 ef                      movq    %r13, %rdi
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_Dealloc
// 225: ff d0                         callq   *%rax
// 227: eb 97                         jmp     0x1c0 <_JIT_ENTRY+0x1c0>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _JIT_OPARG
// 233: f7 d0                         notl    %eax
// 235: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 23a: 4c 63 f8                      movslq  %eax, %r15
// 23d: 4f 8b 6c fe f0                movq    -0x10(%r14,%r15,8), %r13
// 242: 4b 8b 6c fe f8                movq    -0x8(%r14,%r15,8), %rbp
// 247: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000249:  R_X86_64_64  _PyLong_Add
// 251: 4c 89 ef                      movq    %r13, %rdi
// 254: 48 89 ee                      movq    %rbp, %rsi
// 257: ff d0                         callq   *%rax
// 259: 49 89 c4                      movq    %rax, %r12
// 25c: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 260: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000262:  R_X86_64_64  PyInterpreterState_Get
// 26a: 75 1e                         jne     0x28a <_JIT_ENTRY+0x28a>
// 26c: ff d3                         callq   *%rbx
// 26e: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 275: 48 ff 4d 00                   decq    (%rbp)
// 279: 75 0f                         jne     0x28a <_JIT_ENTRY+0x28a>
// 27b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027d:  R_X86_64_64  PyObject_Free
// 285: 48 89 ef                      movq    %rbp, %rdi
// 288: ff d0                         callq   *%rax
// 28a: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 28f: 75 1e                         jne     0x2af <_JIT_ENTRY+0x2af>
// 291: ff d3                         callq   *%rbx
// 293: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 29a: 49 ff 4d 00                   decq    (%r13)
// 29e: 75 0f                         jne     0x2af <_JIT_ENTRY+0x2af>
// 2a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a2:  R_X86_64_64  PyObject_Free
// 2aa: 4c 89 ef                      movq    %r13, %rdi
// 2ad: ff d0                         callq   *%rax
// 2af: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 2b3: 48 83 c0 f0                   addq    $-0x10, %rax
// 2b7: 4d 85 e4                      testq   %r12, %r12
// 2ba: 74 2e                         je      0x2ea <_JIT_ENTRY+0x2ea>
// 2bc: 4b 8d 34 fe                   leaq    (%r14,%r15,8), %rsi
// 2c0: 48 83 c6 f8                   addq    $-0x8, %rsi
// 2c4: 4c 89 20                      movq    %r12, (%rax)
// 2c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c9:  R_X86_64_64  _JIT_CONTINUE
// 2d1: 48 8b 3c 24                   movq    (%rsp), %rdi
// 2d5: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2da: 48 83 c4 28                   addq    $0x28, %rsp
// 2de: 5b                            popq    %rbx
// 2df: 41 5c                         popq    %r12
// 2e1: 41 5d                         popq    %r13
// 2e3: 41 5e                         popq    %r14
// 2e5: 41 5f                         popq    %r15
// 2e7: 5d                            popq    %rbp
// 2e8: ff e0                         jmpq    *%rax
// 2ea: 48 8b 1c 24                   movq    (%rsp), %rbx
// 2ee: 48 29 d8                      subq    %rbx, %rax
// 2f1: 48 83 c0 b8                   addq    $-0x48, %rax
// 2f5: 48 c1 e8 03                   shrq    $0x3, %rax
// 2f9: 89 43 40                      movl    %eax, 0x40(%rbx)
// 2fc: 31 c0                         xorl    %eax, %eax
// 2fe: e9 ad fd ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 303: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_OP_ADD_INT_code_body[772] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd6, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xde, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xce, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc6, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x70, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x20, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xa7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x4c, 0x24, 0x18, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x7b, 0x01, 0x00, 0x00, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xa4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x8d, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0xe9, 0x44, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xdb, 0xeb, 0x10, 0x0f, 0x1f, 0x40, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0x37, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xf8, 0x4f, 0x8b, 0x6c, 0xfe, 0xf0, 0x4b, 0x8b, 0x6c, 0xfe, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0xf6, 0x45, 0x03, 0x80, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x1e, 0xff, 0xd3, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x1e, 0xff, 0xd3, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x83, 0xc0, 0xf0, 0x4d, 0x85, 0xe4, 0x74, 0x2e, 0x4b, 0x8d, 0x34, 0xfe, 0x48, 0x83, 0xc6, 0xf8, 0x4c, 0x89, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x1c, 0x24, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xad, 0xfd, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_OP_ADD_INT_code_holes[20] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x187, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x249, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyLong_Add, 0x0},
    {0x262, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x27d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x2a2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x2c9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_OP_ADD_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_OP_ADD_INT_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_OP_ADD_UNICODE
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_OP_ADD_UNICODE.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d6                   movq    (%r14,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 de                   movq    (%r14,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c ce                   leaq    (%r14,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 c6                      subq    %r8, %r14
// 8b: 49 83 c6 b8                   addq    $-0x48, %r14
// 8f: 49 c1 ee 03                   shrq    $0x3, %r14
// 93: 45 89 70 40                   movl    %r14d, 0x40(%r8)
// 97: 49 8b 00                      movq    (%r8), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 5c 24 20                movq    %r11, 0x20(%rsp)
// c4: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c9: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// ce: 4c 89 04 24                   movq    %r8, (%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 a7 00 00 00             je      0x1aa <_JIT_ENTRY+0x1aa>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 1c 24                   movq    (%rsp), %rbx
// 134: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 139: 78 21                         js      0x15c <_JIT_ENTRY+0x15c>
// 13b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 145: ff d0                         callq   *%rax
// 147: 49 ff 0c 24                   decq    (%r12)
// 14b: 75 0f                         jne     0x15c <_JIT_ENTRY+0x15c>
// 14d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014f:  R_X86_64_64  _Py_Dealloc
// 157: 4c 89 e7                      movq    %r12, %rdi
// 15a: ff d0                         callq   *%rax
// 15c: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 161: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 165: 48 8b 4c 24 18                movq    0x18(%rsp), %rcx
// 16a: 48 85 c9                      testq   %rcx, %rcx
// 16d: 0f 84 7b 01 00 00             je      0x2ee <_JIT_ENTRY+0x2ee>
// 173: 48 89 08                      movq    %rcx, (%rax)
// 176: 49 8b 47 10                   movq    0x10(%r15), %rax
// 17a: 48 8b 00                      movq    (%rax), %rax
// 17d: 84 c0                         testb   %al, %al
// 17f: 0f 84 a4 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 185: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000187:  R_X86_64_64  _Py_HandlePending
// 18f: 4c 89 ff                      movq    %r15, %rdi
// 192: ff d0                         callq   *%rax
// 194: 85 c0                         testl   %eax, %eax
// 196: 0f 84 8d 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 19c: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1a1: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 1a5: e9 44 01 00 00                jmp     0x2ee <_JIT_ENTRY+0x2ee>
// 1aa: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1ae: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1b4: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1b8: 31 db                         xorl    %ebx, %ebx
// 1ba: eb 10                         jmp     0x1cc <_JIT_ENTRY+0x1cc>
// 1bc: 0f 1f 40 00                   nopl    (%rax)
// 1c0: 48 ff c3                      incq    %rbx
// 1c3: 49 39 df                      cmpq    %rbx, %r15
// 1c6: 0f 84 37 ff ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 1cc: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1d1: 49 8b 45 00                   movq    (%r13), %rax
// 1d5: 48 85 c0                      testq   %rax, %rax
// 1d8: 7e 06                         jle     0x1e0 <_JIT_ENTRY+0x1e0>
// 1da: 85 c0                         testl   %eax, %eax
// 1dc: 78 e2                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 1de: eb 26                         jmp     0x206 <_JIT_ENTRY+0x206>
// 1e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e2:  R_X86_64_64  .rodata.str1.1
// 1ea: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ef: 4c 89 ea                      movq    %r13, %rdx
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _Py_NegativeRefcount
// 1fc: ff d0                         callq   *%rax
// 1fe: 49 8b 45 00                   movq    (%r13), %rax
// 202: 85 c0                         testl   %eax, %eax
// 204: 78 ba                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 210: ff d0                         callq   *%rax
// 212: 49 ff 4d 00                   decq    (%r13)
// 216: 75 a8                         jne     0x1c0 <_JIT_ENTRY+0x1c0>
// 218: 4c 89 ef                      movq    %r13, %rdi
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_Dealloc
// 225: ff d0                         callq   *%rax
// 227: eb 97                         jmp     0x1c0 <_JIT_ENTRY+0x1c0>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _JIT_OPARG
// 233: f7 d0                         notl    %eax
// 235: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 23a: 4c 63 f8                      movslq  %eax, %r15
// 23d: 4b 8b 6c fe f0                movq    -0x10(%r14,%r15,8), %rbp
// 242: 4f 8b 6c fe f8                movq    -0x8(%r14,%r15,8), %r13
// 247: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000249:  R_X86_64_64  PyUnicode_Concat
// 251: 48 89 ef                      movq    %rbp, %rdi
// 254: 4c 89 ee                      movq    %r13, %rsi
// 257: ff d0                         callq   *%rax
// 259: 49 89 c4                      movq    %rax, %r12
// 25c: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 260: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000262:  R_X86_64_64  PyInterpreterState_Get
// 26a: 75 1e                         jne     0x28a <_JIT_ENTRY+0x28a>
// 26c: ff d3                         callq   *%rbx
// 26e: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 275: 48 ff 4d 00                   decq    (%rbp)
// 279: 75 0f                         jne     0x28a <_JIT_ENTRY+0x28a>
// 27b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027d:  R_X86_64_64  _PyUnicode_ExactDealloc
// 285: 48 89 ef                      movq    %rbp, %rdi
// 288: ff d0                         callq   *%rax
// 28a: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 28f: 75 1e                         jne     0x2af <_JIT_ENTRY+0x2af>
// 291: ff d3                         callq   *%rbx
// 293: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 29a: 49 ff 4d 00                   decq    (%r13)
// 29e: 75 0f                         jne     0x2af <_JIT_ENTRY+0x2af>
// 2a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a2:  R_X86_64_64  _PyUnicode_ExactDealloc
// 2aa: 4c 89 ef                      movq    %r13, %rdi
// 2ad: ff d0                         callq   *%rax
// 2af: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 2b3: 48 83 c0 f0                   addq    $-0x10, %rax
// 2b7: 4d 85 e4                      testq   %r12, %r12
// 2ba: 74 2e                         je      0x2ea <_JIT_ENTRY+0x2ea>
// 2bc: 4b 8d 34 fe                   leaq    (%r14,%r15,8), %rsi
// 2c0: 48 83 c6 f8                   addq    $-0x8, %rsi
// 2c4: 4c 89 20                      movq    %r12, (%rax)
// 2c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c9:  R_X86_64_64  _JIT_CONTINUE
// 2d1: 48 8b 3c 24                   movq    (%rsp), %rdi
// 2d5: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2da: 48 83 c4 28                   addq    $0x28, %rsp
// 2de: 5b                            popq    %rbx
// 2df: 41 5c                         popq    %r12
// 2e1: 41 5d                         popq    %r13
// 2e3: 41 5e                         popq    %r14
// 2e5: 41 5f                         popq    %r15
// 2e7: 5d                            popq    %rbp
// 2e8: ff e0                         jmpq    *%rax
// 2ea: 48 8b 1c 24                   movq    (%rsp), %rbx
// 2ee: 48 29 d8                      subq    %rbx, %rax
// 2f1: 48 83 c0 b8                   addq    $-0x48, %rax
// 2f5: 48 c1 e8 03                   shrq    $0x3, %rax
// 2f9: 89 43 40                      movl    %eax, 0x40(%rbx)
// 2fc: 31 c0                         xorl    %eax, %eax
// 2fe: e9 ad fd ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 303: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_OP_ADD_UNICODE_code_body[772] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd6, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xde, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xce, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc6, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x70, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x20, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xa7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x4c, 0x24, 0x18, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x7b, 0x01, 0x00, 0x00, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xa4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x8d, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0xe9, 0x44, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xdb, 0xeb, 0x10, 0x0f, 0x1f, 0x40, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0x37, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xf8, 0x4b, 0x8b, 0x6c, 0xfe, 0xf0, 0x4f, 0x8b, 0x6c, 0xfe, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0xf6, 0x45, 0x03, 0x80, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x1e, 0xff, 0xd3, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x1e, 0xff, 0xd3, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x83, 0xc0, 0xf0, 0x4d, 0x85, 0xe4, 0x74, 0x2e, 0x4b, 0x8d, 0x34, 0xfe, 0x48, 0x83, 0xc6, 0xf8, 0x4c, 0x89, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x1c, 0x24, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xad, 0xfd, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_OP_ADD_UNICODE_code_holes[20] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x187, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x249, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Concat, 0x0},
    {0x262, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x27d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_ExactDealloc, 0x0},
    {0x2a2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_ExactDealloc, 0x0},
    {0x2c9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_OP_ADD_UNICODE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_OP_ADD_UNICODE_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_OP_MULTIPLY_FLOAT
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_OP_MULTIPLY_FLOAT.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d6                   movq    (%r14,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 de                   movq    (%r14,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4b 8d 1c ce                   leaq    (%r14,%r9,8), %rbx
// 79: 48 8b 3b                      movq    (%rbx), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 4d 29 c6                      subq    %r8, %r14
// 8a: 49 83 c6 b8                   addq    $-0x48, %r14
// 8e: 49 c1 ee 03                   shrq    $0x3, %r14
// 92: 45 89 70 40                   movl    %r14d, 0x40(%r8)
// 96: 49 8b 00                      movq    (%r8), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 5c 24 18                movq    %r11, 0x18(%rsp)
// c3: 4c 89 54 24 20                movq    %r10, 0x20(%rsp)
// c8: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// cd: 4c 89 04 24                   movq    %r8, (%rsp)
// d1: 48 85 c0                      testq   %rax, %rax
// d4: 40 0f 94 c5                   sete    %bpl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 73 08                   leaq    0x8(%rbx), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 0b 01 00 00             je      0x20f <_JIT_ENTRY+0x20f>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 136: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// 13b: 78 21                         js      0x15e <_JIT_ENTRY+0x15e>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 147: ff d0                         callq   *%rax
// 149: 49 ff 0c 24                   decq    (%r12)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_Dealloc
// 159: 4c 89 e7                      movq    %r12, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 163: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 167: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 16c: 48 85 c9                      testq   %rcx, %rcx
// 16f: 0f 84 24 01 00 00             je      0x299 <_JIT_ENTRY+0x299>
// 175: 4b 8d 2c fe                   leaq    (%r14,%r15,8), %rbp
// 179: 48 89 08                      movq    %rcx, (%rax)
// 17c: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 180: 48 8b 00                      movq    (%rax), %rax
// 183: 84 c0                         testb   %al, %al
// 185: 74 17                         je      0x19e <_JIT_ENTRY+0x19e>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _Py_HandlePending
// 191: 48 89 df                      movq    %rbx, %rdi
// 194: ff d0                         callq   *%rax
// 196: 85 c0                         testl   %eax, %eax
// 198: 0f 85 fe 00 00 00             jne     0x29c <_JIT_ENTRY+0x29c>
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  _JIT_OPARG
// 1a8: f7 d0                         notl    %eax
// 1aa: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1af: 4c 63 f8                      movslq  %eax, %r15
// 1b2: 4b 8b 5c fe f0                movq    -0x10(%r14,%r15,8), %rbx
// 1b7: 4f 8b 64 fe f8                movq    -0x8(%r14,%r15,8), %r12
// 1bc: f2 0f 10 43 10                movsd   0x10(%rbx), %xmm0       # xmm0 = mem[0],zero
// 1c1: f2 41 0f 59 44 24 10          mulsd   0x10(%r12), %xmm0
// 1c8: 48 83 3b 01                   cmpq    $0x1, (%rbx)
// 1cc: 0f 85 e3 00 00 00             jne     0x2b5 <_JIT_ENTRY+0x2b5>
// 1d2: f2 0f 11 43 10                movsd   %xmm0, 0x10(%rbx)
// 1d7: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 1dd: 75 28                         jne     0x207 <_JIT_ENTRY+0x207>
// 1df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e1:  R_X86_64_64  PyInterpreterState_Get
// 1e9: ff d0                         callq   *%rax
// 1eb: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1f2: 49 ff 0c 24                   decq    (%r12)
// 1f6: 75 0f                         jne     0x207 <_JIT_ENTRY+0x207>
// 1f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fa:  R_X86_64_64  _PyFloat_ExactDealloc
// 202: 4c 89 e7                      movq    %r12, %rdi
// 205: ff d0                         callq   *%rax
// 207: 49 89 dc                      movq    %rbx, %r12
// 20a: e9 6d 01 00 00                jmp     0x37c <_JIT_ENTRY+0x37c>
// 20f: 41 83 fd 02                   cmpl    $0x2, %r13d
// 213: bd 01 00 00 00                movl    $0x1, %ebp
// 218: 41 0f 43 ed                   cmovael %r13d, %ebp
// 21c: 45 31 ff                      xorl    %r15d, %r15d
// 21f: eb 1b                         jmp     0x23c <_JIT_ENTRY+0x23c>
// 221: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// 230: 49 ff c7                      incq    %r15
// 233: 4c 39 fd                      cmpq    %r15, %rbp
// 236: 0f 84 c8 fe ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 23c: 4e 8b 2c fb                   movq    (%rbx,%r15,8), %r13
// 240: 49 8b 45 00                   movq    (%r13), %rax
// 244: 48 85 c0                      testq   %rax, %rax
// 247: 7e 07                         jle     0x250 <_JIT_ENTRY+0x250>
// 249: 85 c0                         testl   %eax, %eax
// 24b: 78 e3                         js      0x230 <_JIT_ENTRY+0x230>
// 24d: eb 27                         jmp     0x276 <_JIT_ENTRY+0x276>
// 24f: 90                            nop
// 250: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000252:  R_X86_64_64  .rodata.str1.1
// 25a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 25f: 4c 89 ea                      movq    %r13, %rdx
// 262: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000264:  R_X86_64_64  _Py_NegativeRefcount
// 26c: ff d0                         callq   *%rax
// 26e: 49 8b 45 00                   movq    (%r13), %rax
// 272: 85 c0                         testl   %eax, %eax
// 274: 78 ba                         js      0x230 <_JIT_ENTRY+0x230>
// 276: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000278:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 280: ff d0                         callq   *%rax
// 282: 49 ff 4d 00                   decq    (%r13)
// 286: 75 a8                         jne     0x230 <_JIT_ENTRY+0x230>
// 288: 4c 89 ef                      movq    %r13, %rdi
// 28b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028d:  R_X86_64_64  _Py_Dealloc
// 295: ff d0                         callq   *%rax
// 297: eb 97                         jmp     0x230 <_JIT_ENTRY+0x230>
// 299: 48 89 c5                      movq    %rax, %rbp
// 29c: 48 8b 04 24                   movq    (%rsp), %rax
// 2a0: 48 29 c5                      subq    %rax, %rbp
// 2a3: 48 83 c5 b8                   addq    $-0x48, %rbp
// 2a7: 48 c1 ed 03                   shrq    $0x3, %rbp
// 2ab: 89 68 40                      movl    %ebp, 0x40(%rax)
// 2ae: 31 c0                         xorl    %eax, %eax
// 2b0: e9 fa fd ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 2b5: 49 83 3c 24 01                cmpq    $0x1, (%r12)
// 2ba: 75 30                         jne     0x2ec <_JIT_ENTRY+0x2ec>
// 2bc: f2 41 0f 11 44 24 10          movsd   %xmm0, 0x10(%r12)
// 2c3: f6 43 03 80                   testb   $-0x80, 0x3(%rbx)
// 2c7: 0f 85 af 00 00 00             jne     0x37c <_JIT_ENTRY+0x37c>
// 2cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cf:  R_X86_64_64  PyInterpreterState_Get
// 2d7: ff d0                         callq   *%rax
// 2d9: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 2e0: 48 8b 03                      movq    (%rbx), %rax
// 2e3: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 2e7: 48 89 0b                      movq    %rcx, (%rbx)
// 2ea: eb 67                         jmp     0x353 <_JIT_ENTRY+0x353>
// 2ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ee:  R_X86_64_64  PyFloat_FromDouble
// 2f6: ff d0                         callq   *%rax
// 2f8: 48 85 c0                      testq   %rax, %rax
// 2fb: 74 9f                         je      0x29c <_JIT_ENTRY+0x29c>
// 2fd: 49 89 c5                      movq    %rax, %r13
// 300: f6 43 03 80                   testb   $-0x80, 0x3(%rbx)
// 304: 75 23                         jne     0x329 <_JIT_ENTRY+0x329>
// 306: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000308:  R_X86_64_64  PyInterpreterState_Get
// 310: ff d0                         callq   *%rax
// 312: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 319: 48 8b 03                      movq    (%rbx), %rax
// 31c: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 320: 48 89 0b                      movq    %rcx, (%rbx)
// 323: 48 83 f8 01                   cmpq    $0x1, %rax
// 327: 7e 30                         jle     0x359 <_JIT_ENTRY+0x359>
// 329: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 32f: 75 48                         jne     0x379 <_JIT_ENTRY+0x379>
// 331: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000333:  R_X86_64_64  PyInterpreterState_Get
// 33b: ff d0                         callq   *%rax
// 33d: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 344: 49 8b 04 24                   movq    (%r12), %rax
// 348: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 34c: 49 89 0c 24                   movq    %rcx, (%r12)
// 350: 4d 89 ec                      movq    %r13, %r12
// 353: 48 83 f8 01                   cmpq    $0x1, %rax
// 357: 7f 23                         jg      0x37c <_JIT_ENTRY+0x37c>
// 359: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000035b:  R_X86_64_64  .rodata.str1.1+0x39
// 363: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000365:  R_X86_64_64  .rodata.str1.1+0x4f
// 36d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000036f:  R_X86_64_64  _Py_FatalRefcountErrorFunc
// 377: ff d0                         callq   *%rax
// 379: 4d 89 ec                      movq    %r13, %r12
// 37c: 4b 8d 34 fe                   leaq    (%r14,%r15,8), %rsi
// 380: 48 83 c6 f8                   addq    $-0x8, %rsi
// 384: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000386:  R_X86_64_64  _JIT_OPARG
// 38e: f7 d0                         notl    %eax
// 390: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 395: 48 98                         cltq
// 397: 4d 89 64 c6 f0                movq    %r12, -0x10(%r14,%rax,8)
// 39c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000039e:  R_X86_64_64  _JIT_CONTINUE
// 3a6: 48 8b 3c 24                   movq    (%rsp), %rdi
// 3aa: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 3af: 48 83 c4 28                   addq    $0x28, %rsp
// 3b3: 5b                            popq    %rbx
// 3b4: 41 5c                         popq    %r12
// 3b6: 41 5d                         popq    %r13
// 3b8: 41 5e                         popq    %r14
// 3ba: 41 5f                         popq    %r15
// 3bc: 5d                            popq    %rbp
// 3bd: ff e0                         jmpq    *%rax
// 3bf: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_OP_MULTIPLY_FLOAT_code_body[960] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd6, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xde, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4b, 0x8d, 0x1c, 0xce, 0x48, 0x8b, 0x3b, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc6, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x70, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x18, 0x4c, 0x89, 0x54, 0x24, 0x20, 0x48, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x73, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0x0b, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x24, 0x01, 0x00, 0x00, 0x4b, 0x8d, 0x2c, 0xfe, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xfe, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xf8, 0x4b, 0x8b, 0x5c, 0xfe, 0xf0, 0x4f, 0x8b, 0x64, 0xfe, 0xf8, 0xf2, 0x0f, 0x10, 0x43, 0x10, 0xf2, 0x41, 0x0f, 0x59, 0x44, 0x24, 0x10, 0x48, 0x83, 0x3b, 0x01, 0x0f, 0x85, 0xe3, 0x00, 0x00, 0x00, 0xf2, 0x0f, 0x11, 0x43, 0x10, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0xdc, 0xe9, 0x6d, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xed, 0x45, 0x31, 0xff, 0xeb, 0x1b, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc7, 0x4c, 0x39, 0xfd, 0x0f, 0x84, 0xc8, 0xfe, 0xff, 0xff, 0x4e, 0x8b, 0x2c, 0xfb, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x27, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0x89, 0xc5, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x29, 0xc5, 0x48, 0x83, 0xc5, 0xb8, 0x48, 0xc1, 0xed, 0x03, 0x89, 0x68, 0x40, 0x31, 0xc0, 0xe9, 0xfa, 0xfd, 0xff, 0xff, 0x49, 0x83, 0x3c, 0x24, 0x01, 0x75, 0x30, 0xf2, 0x41, 0x0f, 0x11, 0x44, 0x24, 0x10, 0xf6, 0x43, 0x03, 0x80, 0x0f, 0x85, 0xaf, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0x8b, 0x03, 0x48, 0x8d, 0x48, 0xff, 0x48, 0x89, 0x0b, 0xeb, 0x67, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x9f, 0x49, 0x89, 0xc5, 0xf6, 0x43, 0x03, 0x80, 0x75, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0x8b, 0x03, 0x48, 0x8d, 0x48, 0xff, 0x48, 0x89, 0x0b, 0x48, 0x83, 0xf8, 0x01, 0x7e, 0x30, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x48, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x0c, 0x24, 0x4d, 0x89, 0xec, 0x48, 0x83, 0xf8, 0x01, 0x7f, 0x23, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0xec, 0x4b, 0x8d, 0x34, 0xfe, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x64, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_OP_MULTIPLY_FLOAT_code_holes[26] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1fa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x278, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x28d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2cf, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_FromDouble, 0x0},
    {0x308, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x333, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x35b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x365, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x4f},
    {0x36f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FatalRefcountErrorFunc, 0x0},
    {0x386, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x39e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_DECREF_NO_DEALLOC\x00Expected a positive remaining refcount\x00'
// 76: 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_OP_MULTIPLY_FLOAT_data_body[121] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x46, 0x5f, 0x4e, 0x4f, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x00, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x61, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x20, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x66, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_OP_MULTIPLY_FLOAT_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_OP_MULTIPLY_INT
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_OP_MULTIPLY_INT.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d6                   movq    (%r14,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 de                   movq    (%r14,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c ce                   leaq    (%r14,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 c6                      subq    %r8, %r14
// 8b: 49 83 c6 b8                   addq    $-0x48, %r14
// 8f: 49 c1 ee 03                   shrq    $0x3, %r14
// 93: 45 89 70 40                   movl    %r14d, 0x40(%r8)
// 97: 49 8b 00                      movq    (%r8), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 5c 24 20                movq    %r11, 0x20(%rsp)
// c4: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c9: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// ce: 4c 89 04 24                   movq    %r8, (%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 a7 00 00 00             je      0x1aa <_JIT_ENTRY+0x1aa>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 1c 24                   movq    (%rsp), %rbx
// 134: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 139: 78 21                         js      0x15c <_JIT_ENTRY+0x15c>
// 13b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 145: ff d0                         callq   *%rax
// 147: 49 ff 0c 24                   decq    (%r12)
// 14b: 75 0f                         jne     0x15c <_JIT_ENTRY+0x15c>
// 14d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014f:  R_X86_64_64  _Py_Dealloc
// 157: 4c 89 e7                      movq    %r12, %rdi
// 15a: ff d0                         callq   *%rax
// 15c: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 161: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 165: 48 8b 4c 24 18                movq    0x18(%rsp), %rcx
// 16a: 48 85 c9                      testq   %rcx, %rcx
// 16d: 0f 84 7b 01 00 00             je      0x2ee <_JIT_ENTRY+0x2ee>
// 173: 48 89 08                      movq    %rcx, (%rax)
// 176: 49 8b 47 10                   movq    0x10(%r15), %rax
// 17a: 48 8b 00                      movq    (%rax), %rax
// 17d: 84 c0                         testb   %al, %al
// 17f: 0f 84 a4 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 185: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000187:  R_X86_64_64  _Py_HandlePending
// 18f: 4c 89 ff                      movq    %r15, %rdi
// 192: ff d0                         callq   *%rax
// 194: 85 c0                         testl   %eax, %eax
// 196: 0f 84 8d 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 19c: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1a1: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 1a5: e9 44 01 00 00                jmp     0x2ee <_JIT_ENTRY+0x2ee>
// 1aa: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1ae: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1b4: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1b8: 31 db                         xorl    %ebx, %ebx
// 1ba: eb 10                         jmp     0x1cc <_JIT_ENTRY+0x1cc>
// 1bc: 0f 1f 40 00                   nopl    (%rax)
// 1c0: 48 ff c3                      incq    %rbx
// 1c3: 49 39 df                      cmpq    %rbx, %r15
// 1c6: 0f 84 37 ff ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 1cc: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1d1: 49 8b 45 00                   movq    (%r13), %rax
// 1d5: 48 85 c0                      testq   %rax, %rax
// 1d8: 7e 06                         jle     0x1e0 <_JIT_ENTRY+0x1e0>
// 1da: 85 c0                         testl   %eax, %eax
// 1dc: 78 e2                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 1de: eb 26                         jmp     0x206 <_JIT_ENTRY+0x206>
// 1e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e2:  R_X86_64_64  .rodata.str1.1
// 1ea: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ef: 4c 89 ea                      movq    %r13, %rdx
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _Py_NegativeRefcount
// 1fc: ff d0                         callq   *%rax
// 1fe: 49 8b 45 00                   movq    (%r13), %rax
// 202: 85 c0                         testl   %eax, %eax
// 204: 78 ba                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 210: ff d0                         callq   *%rax
// 212: 49 ff 4d 00                   decq    (%r13)
// 216: 75 a8                         jne     0x1c0 <_JIT_ENTRY+0x1c0>
// 218: 4c 89 ef                      movq    %r13, %rdi
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_Dealloc
// 225: ff d0                         callq   *%rax
// 227: eb 97                         jmp     0x1c0 <_JIT_ENTRY+0x1c0>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _JIT_OPARG
// 233: f7 d0                         notl    %eax
// 235: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 23a: 4c 63 f8                      movslq  %eax, %r15
// 23d: 4f 8b 6c fe f0                movq    -0x10(%r14,%r15,8), %r13
// 242: 4b 8b 6c fe f8                movq    -0x8(%r14,%r15,8), %rbp
// 247: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000249:  R_X86_64_64  _PyLong_Multiply
// 251: 4c 89 ef                      movq    %r13, %rdi
// 254: 48 89 ee                      movq    %rbp, %rsi
// 257: ff d0                         callq   *%rax
// 259: 49 89 c4                      movq    %rax, %r12
// 25c: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 260: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000262:  R_X86_64_64  PyInterpreterState_Get
// 26a: 75 1e                         jne     0x28a <_JIT_ENTRY+0x28a>
// 26c: ff d3                         callq   *%rbx
// 26e: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 275: 48 ff 4d 00                   decq    (%rbp)
// 279: 75 0f                         jne     0x28a <_JIT_ENTRY+0x28a>
// 27b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027d:  R_X86_64_64  PyObject_Free
// 285: 48 89 ef                      movq    %rbp, %rdi
// 288: ff d0                         callq   *%rax
// 28a: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 28f: 75 1e                         jne     0x2af <_JIT_ENTRY+0x2af>
// 291: ff d3                         callq   *%rbx
// 293: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 29a: 49 ff 4d 00                   decq    (%r13)
// 29e: 75 0f                         jne     0x2af <_JIT_ENTRY+0x2af>
// 2a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a2:  R_X86_64_64  PyObject_Free
// 2aa: 4c 89 ef                      movq    %r13, %rdi
// 2ad: ff d0                         callq   *%rax
// 2af: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 2b3: 48 83 c0 f0                   addq    $-0x10, %rax
// 2b7: 4d 85 e4                      testq   %r12, %r12
// 2ba: 74 2e                         je      0x2ea <_JIT_ENTRY+0x2ea>
// 2bc: 4b 8d 34 fe                   leaq    (%r14,%r15,8), %rsi
// 2c0: 48 83 c6 f8                   addq    $-0x8, %rsi
// 2c4: 4c 89 20                      movq    %r12, (%rax)
// 2c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c9:  R_X86_64_64  _JIT_CONTINUE
// 2d1: 48 8b 3c 24                   movq    (%rsp), %rdi
// 2d5: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2da: 48 83 c4 28                   addq    $0x28, %rsp
// 2de: 5b                            popq    %rbx
// 2df: 41 5c                         popq    %r12
// 2e1: 41 5d                         popq    %r13
// 2e3: 41 5e                         popq    %r14
// 2e5: 41 5f                         popq    %r15
// 2e7: 5d                            popq    %rbp
// 2e8: ff e0                         jmpq    *%rax
// 2ea: 48 8b 1c 24                   movq    (%rsp), %rbx
// 2ee: 48 29 d8                      subq    %rbx, %rax
// 2f1: 48 83 c0 b8                   addq    $-0x48, %rax
// 2f5: 48 c1 e8 03                   shrq    $0x3, %rax
// 2f9: 89 43 40                      movl    %eax, 0x40(%rbx)
// 2fc: 31 c0                         xorl    %eax, %eax
// 2fe: e9 ad fd ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 303: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_OP_MULTIPLY_INT_code_body[772] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd6, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xde, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xce, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc6, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x70, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x20, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xa7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x4c, 0x24, 0x18, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x7b, 0x01, 0x00, 0x00, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xa4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x8d, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0xe9, 0x44, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xdb, 0xeb, 0x10, 0x0f, 0x1f, 0x40, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0x37, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xf8, 0x4f, 0x8b, 0x6c, 0xfe, 0xf0, 0x4b, 0x8b, 0x6c, 0xfe, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0xf6, 0x45, 0x03, 0x80, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x1e, 0xff, 0xd3, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x1e, 0xff, 0xd3, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x83, 0xc0, 0xf0, 0x4d, 0x85, 0xe4, 0x74, 0x2e, 0x4b, 0x8d, 0x34, 0xfe, 0x48, 0x83, 0xc6, 0xf8, 0x4c, 0x89, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x1c, 0x24, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xad, 0xfd, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_OP_MULTIPLY_INT_code_holes[20] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x187, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x249, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyLong_Multiply, 0x0},
    {0x262, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x27d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x2a2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x2c9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_OP_MULTIPLY_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_OP_MULTIPLY_INT_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_OP_SUBTRACT_FLOAT
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_OP_SUBTRACT_FLOAT.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d6                   movq    (%r14,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 de                   movq    (%r14,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4b 8d 1c ce                   leaq    (%r14,%r9,8), %rbx
// 79: 48 8b 3b                      movq    (%rbx), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 4d 29 c6                      subq    %r8, %r14
// 8a: 49 83 c6 b8                   addq    $-0x48, %r14
// 8e: 49 c1 ee 03                   shrq    $0x3, %r14
// 92: 45 89 70 40                   movl    %r14d, 0x40(%r8)
// 96: 49 8b 00                      movq    (%r8), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 5c 24 18                movq    %r11, 0x18(%rsp)
// c3: 4c 89 54 24 20                movq    %r10, 0x20(%rsp)
// c8: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// cd: 4c 89 04 24                   movq    %r8, (%rsp)
// d1: 48 85 c0                      testq   %rax, %rax
// d4: 40 0f 94 c5                   sete    %bpl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 73 08                   leaq    0x8(%rbx), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 0b 01 00 00             je      0x20f <_JIT_ENTRY+0x20f>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 136: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// 13b: 78 21                         js      0x15e <_JIT_ENTRY+0x15e>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 147: ff d0                         callq   *%rax
// 149: 49 ff 0c 24                   decq    (%r12)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_Dealloc
// 159: 4c 89 e7                      movq    %r12, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 163: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 167: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 16c: 48 85 c9                      testq   %rcx, %rcx
// 16f: 0f 84 24 01 00 00             je      0x299 <_JIT_ENTRY+0x299>
// 175: 4b 8d 2c fe                   leaq    (%r14,%r15,8), %rbp
// 179: 48 89 08                      movq    %rcx, (%rax)
// 17c: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 180: 48 8b 00                      movq    (%rax), %rax
// 183: 84 c0                         testb   %al, %al
// 185: 74 17                         je      0x19e <_JIT_ENTRY+0x19e>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _Py_HandlePending
// 191: 48 89 df                      movq    %rbx, %rdi
// 194: ff d0                         callq   *%rax
// 196: 85 c0                         testl   %eax, %eax
// 198: 0f 85 fe 00 00 00             jne     0x29c <_JIT_ENTRY+0x29c>
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  _JIT_OPARG
// 1a8: f7 d0                         notl    %eax
// 1aa: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1af: 4c 63 f8                      movslq  %eax, %r15
// 1b2: 4b 8b 5c fe f0                movq    -0x10(%r14,%r15,8), %rbx
// 1b7: 4f 8b 64 fe f8                movq    -0x8(%r14,%r15,8), %r12
// 1bc: f2 0f 10 43 10                movsd   0x10(%rbx), %xmm0       # xmm0 = mem[0],zero
// 1c1: f2 41 0f 5c 44 24 10          subsd   0x10(%r12), %xmm0
// 1c8: 48 83 3b 01                   cmpq    $0x1, (%rbx)
// 1cc: 0f 85 e3 00 00 00             jne     0x2b5 <_JIT_ENTRY+0x2b5>
// 1d2: f2 0f 11 43 10                movsd   %xmm0, 0x10(%rbx)
// 1d7: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 1dd: 75 28                         jne     0x207 <_JIT_ENTRY+0x207>
// 1df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e1:  R_X86_64_64  PyInterpreterState_Get
// 1e9: ff d0                         callq   *%rax
// 1eb: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1f2: 49 ff 0c 24                   decq    (%r12)
// 1f6: 75 0f                         jne     0x207 <_JIT_ENTRY+0x207>
// 1f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fa:  R_X86_64_64  _PyFloat_ExactDealloc
// 202: 4c 89 e7                      movq    %r12, %rdi
// 205: ff d0                         callq   *%rax
// 207: 49 89 dc                      movq    %rbx, %r12
// 20a: e9 6d 01 00 00                jmp     0x37c <_JIT_ENTRY+0x37c>
// 20f: 41 83 fd 02                   cmpl    $0x2, %r13d
// 213: bd 01 00 00 00                movl    $0x1, %ebp
// 218: 41 0f 43 ed                   cmovael %r13d, %ebp
// 21c: 45 31 ff                      xorl    %r15d, %r15d
// 21f: eb 1b                         jmp     0x23c <_JIT_ENTRY+0x23c>
// 221: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// 230: 49 ff c7                      incq    %r15
// 233: 4c 39 fd                      cmpq    %r15, %rbp
// 236: 0f 84 c8 fe ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 23c: 4e 8b 2c fb                   movq    (%rbx,%r15,8), %r13
// 240: 49 8b 45 00                   movq    (%r13), %rax
// 244: 48 85 c0                      testq   %rax, %rax
// 247: 7e 07                         jle     0x250 <_JIT_ENTRY+0x250>
// 249: 85 c0                         testl   %eax, %eax
// 24b: 78 e3                         js      0x230 <_JIT_ENTRY+0x230>
// 24d: eb 27                         jmp     0x276 <_JIT_ENTRY+0x276>
// 24f: 90                            nop
// 250: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000252:  R_X86_64_64  .rodata.str1.1
// 25a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 25f: 4c 89 ea                      movq    %r13, %rdx
// 262: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000264:  R_X86_64_64  _Py_NegativeRefcount
// 26c: ff d0                         callq   *%rax
// 26e: 49 8b 45 00                   movq    (%r13), %rax
// 272: 85 c0                         testl   %eax, %eax
// 274: 78 ba                         js      0x230 <_JIT_ENTRY+0x230>
// 276: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000278:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 280: ff d0                         callq   *%rax
// 282: 49 ff 4d 00                   decq    (%r13)
// 286: 75 a8                         jne     0x230 <_JIT_ENTRY+0x230>
// 288: 4c 89 ef                      movq    %r13, %rdi
// 28b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028d:  R_X86_64_64  _Py_Dealloc
// 295: ff d0                         callq   *%rax
// 297: eb 97                         jmp     0x230 <_JIT_ENTRY+0x230>
// 299: 48 89 c5                      movq    %rax, %rbp
// 29c: 48 8b 04 24                   movq    (%rsp), %rax
// 2a0: 48 29 c5                      subq    %rax, %rbp
// 2a3: 48 83 c5 b8                   addq    $-0x48, %rbp
// 2a7: 48 c1 ed 03                   shrq    $0x3, %rbp
// 2ab: 89 68 40                      movl    %ebp, 0x40(%rax)
// 2ae: 31 c0                         xorl    %eax, %eax
// 2b0: e9 fa fd ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 2b5: 49 83 3c 24 01                cmpq    $0x1, (%r12)
// 2ba: 75 30                         jne     0x2ec <_JIT_ENTRY+0x2ec>
// 2bc: f2 41 0f 11 44 24 10          movsd   %xmm0, 0x10(%r12)
// 2c3: f6 43 03 80                   testb   $-0x80, 0x3(%rbx)
// 2c7: 0f 85 af 00 00 00             jne     0x37c <_JIT_ENTRY+0x37c>
// 2cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cf:  R_X86_64_64  PyInterpreterState_Get
// 2d7: ff d0                         callq   *%rax
// 2d9: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 2e0: 48 8b 03                      movq    (%rbx), %rax
// 2e3: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 2e7: 48 89 0b                      movq    %rcx, (%rbx)
// 2ea: eb 67                         jmp     0x353 <_JIT_ENTRY+0x353>
// 2ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ee:  R_X86_64_64  PyFloat_FromDouble
// 2f6: ff d0                         callq   *%rax
// 2f8: 48 85 c0                      testq   %rax, %rax
// 2fb: 74 9f                         je      0x29c <_JIT_ENTRY+0x29c>
// 2fd: 49 89 c5                      movq    %rax, %r13
// 300: f6 43 03 80                   testb   $-0x80, 0x3(%rbx)
// 304: 75 23                         jne     0x329 <_JIT_ENTRY+0x329>
// 306: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000308:  R_X86_64_64  PyInterpreterState_Get
// 310: ff d0                         callq   *%rax
// 312: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 319: 48 8b 03                      movq    (%rbx), %rax
// 31c: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 320: 48 89 0b                      movq    %rcx, (%rbx)
// 323: 48 83 f8 01                   cmpq    $0x1, %rax
// 327: 7e 30                         jle     0x359 <_JIT_ENTRY+0x359>
// 329: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 32f: 75 48                         jne     0x379 <_JIT_ENTRY+0x379>
// 331: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000333:  R_X86_64_64  PyInterpreterState_Get
// 33b: ff d0                         callq   *%rax
// 33d: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 344: 49 8b 04 24                   movq    (%r12), %rax
// 348: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 34c: 49 89 0c 24                   movq    %rcx, (%r12)
// 350: 4d 89 ec                      movq    %r13, %r12
// 353: 48 83 f8 01                   cmpq    $0x1, %rax
// 357: 7f 23                         jg      0x37c <_JIT_ENTRY+0x37c>
// 359: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000035b:  R_X86_64_64  .rodata.str1.1+0x39
// 363: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000365:  R_X86_64_64  .rodata.str1.1+0x4f
// 36d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000036f:  R_X86_64_64  _Py_FatalRefcountErrorFunc
// 377: ff d0                         callq   *%rax
// 379: 4d 89 ec                      movq    %r13, %r12
// 37c: 4b 8d 34 fe                   leaq    (%r14,%r15,8), %rsi
// 380: 48 83 c6 f8                   addq    $-0x8, %rsi
// 384: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000386:  R_X86_64_64  _JIT_OPARG
// 38e: f7 d0                         notl    %eax
// 390: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 395: 48 98                         cltq
// 397: 4d 89 64 c6 f0                movq    %r12, -0x10(%r14,%rax,8)
// 39c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000039e:  R_X86_64_64  _JIT_CONTINUE
// 3a6: 48 8b 3c 24                   movq    (%rsp), %rdi
// 3aa: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 3af: 48 83 c4 28                   addq    $0x28, %rsp
// 3b3: 5b                            popq    %rbx
// 3b4: 41 5c                         popq    %r12
// 3b6: 41 5d                         popq    %r13
// 3b8: 41 5e                         popq    %r14
// 3ba: 41 5f                         popq    %r15
// 3bc: 5d                            popq    %rbp
// 3bd: ff e0                         jmpq    *%rax
// 3bf: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_OP_SUBTRACT_FLOAT_code_body[960] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd6, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xde, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4b, 0x8d, 0x1c, 0xce, 0x48, 0x8b, 0x3b, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc6, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x70, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x18, 0x4c, 0x89, 0x54, 0x24, 0x20, 0x48, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x73, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0x0b, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x24, 0x01, 0x00, 0x00, 0x4b, 0x8d, 0x2c, 0xfe, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xfe, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xf8, 0x4b, 0x8b, 0x5c, 0xfe, 0xf0, 0x4f, 0x8b, 0x64, 0xfe, 0xf8, 0xf2, 0x0f, 0x10, 0x43, 0x10, 0xf2, 0x41, 0x0f, 0x5c, 0x44, 0x24, 0x10, 0x48, 0x83, 0x3b, 0x01, 0x0f, 0x85, 0xe3, 0x00, 0x00, 0x00, 0xf2, 0x0f, 0x11, 0x43, 0x10, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0xdc, 0xe9, 0x6d, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xed, 0x45, 0x31, 0xff, 0xeb, 0x1b, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc7, 0x4c, 0x39, 0xfd, 0x0f, 0x84, 0xc8, 0xfe, 0xff, 0xff, 0x4e, 0x8b, 0x2c, 0xfb, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x27, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0x89, 0xc5, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x29, 0xc5, 0x48, 0x83, 0xc5, 0xb8, 0x48, 0xc1, 0xed, 0x03, 0x89, 0x68, 0x40, 0x31, 0xc0, 0xe9, 0xfa, 0xfd, 0xff, 0xff, 0x49, 0x83, 0x3c, 0x24, 0x01, 0x75, 0x30, 0xf2, 0x41, 0x0f, 0x11, 0x44, 0x24, 0x10, 0xf6, 0x43, 0x03, 0x80, 0x0f, 0x85, 0xaf, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0x8b, 0x03, 0x48, 0x8d, 0x48, 0xff, 0x48, 0x89, 0x0b, 0xeb, 0x67, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x9f, 0x49, 0x89, 0xc5, 0xf6, 0x43, 0x03, 0x80, 0x75, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0x8b, 0x03, 0x48, 0x8d, 0x48, 0xff, 0x48, 0x89, 0x0b, 0x48, 0x83, 0xf8, 0x01, 0x7e, 0x30, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x48, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x0c, 0x24, 0x4d, 0x89, 0xec, 0x48, 0x83, 0xf8, 0x01, 0x7f, 0x23, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0xec, 0x4b, 0x8d, 0x34, 0xfe, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x64, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_OP_SUBTRACT_FLOAT_code_holes[26] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1fa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x278, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x28d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2cf, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_FromDouble, 0x0},
    {0x308, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x333, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x35b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x365, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x4f},
    {0x36f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FatalRefcountErrorFunc, 0x0},
    {0x386, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x39e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_DECREF_NO_DEALLOC\x00Expected a positive remaining refcount\x00'
// 76: 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_OP_SUBTRACT_FLOAT_data_body[121] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x46, 0x5f, 0x4e, 0x4f, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x00, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x61, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x20, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x66, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_OP_SUBTRACT_FLOAT_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_OP_SUBTRACT_INT
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_OP_SUBTRACT_INT.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d6                   movq    (%r14,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 de                   movq    (%r14,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c ce                   leaq    (%r14,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 c6                      subq    %r8, %r14
// 8b: 49 83 c6 b8                   addq    $-0x48, %r14
// 8f: 49 c1 ee 03                   shrq    $0x3, %r14
// 93: 45 89 70 40                   movl    %r14d, 0x40(%r8)
// 97: 49 8b 00                      movq    (%r8), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 5c 24 20                movq    %r11, 0x20(%rsp)
// c4: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c9: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// ce: 4c 89 04 24                   movq    %r8, (%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 a7 00 00 00             je      0x1aa <_JIT_ENTRY+0x1aa>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 1c 24                   movq    (%rsp), %rbx
// 134: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 139: 78 21                         js      0x15c <_JIT_ENTRY+0x15c>
// 13b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 145: ff d0                         callq   *%rax
// 147: 49 ff 0c 24                   decq    (%r12)
// 14b: 75 0f                         jne     0x15c <_JIT_ENTRY+0x15c>
// 14d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014f:  R_X86_64_64  _Py_Dealloc
// 157: 4c 89 e7                      movq    %r12, %rdi
// 15a: ff d0                         callq   *%rax
// 15c: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 161: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 165: 48 8b 4c 24 18                movq    0x18(%rsp), %rcx
// 16a: 48 85 c9                      testq   %rcx, %rcx
// 16d: 0f 84 7b 01 00 00             je      0x2ee <_JIT_ENTRY+0x2ee>
// 173: 48 89 08                      movq    %rcx, (%rax)
// 176: 49 8b 47 10                   movq    0x10(%r15), %rax
// 17a: 48 8b 00                      movq    (%rax), %rax
// 17d: 84 c0                         testb   %al, %al
// 17f: 0f 84 a4 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 185: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000187:  R_X86_64_64  _Py_HandlePending
// 18f: 4c 89 ff                      movq    %r15, %rdi
// 192: ff d0                         callq   *%rax
// 194: 85 c0                         testl   %eax, %eax
// 196: 0f 84 8d 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 19c: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1a1: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 1a5: e9 44 01 00 00                jmp     0x2ee <_JIT_ENTRY+0x2ee>
// 1aa: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1ae: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1b4: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1b8: 31 db                         xorl    %ebx, %ebx
// 1ba: eb 10                         jmp     0x1cc <_JIT_ENTRY+0x1cc>
// 1bc: 0f 1f 40 00                   nopl    (%rax)
// 1c0: 48 ff c3                      incq    %rbx
// 1c3: 49 39 df                      cmpq    %rbx, %r15
// 1c6: 0f 84 37 ff ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 1cc: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1d1: 49 8b 45 00                   movq    (%r13), %rax
// 1d5: 48 85 c0                      testq   %rax, %rax
// 1d8: 7e 06                         jle     0x1e0 <_JIT_ENTRY+0x1e0>
// 1da: 85 c0                         testl   %eax, %eax
// 1dc: 78 e2                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 1de: eb 26                         jmp     0x206 <_JIT_ENTRY+0x206>
// 1e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e2:  R_X86_64_64  .rodata.str1.1
// 1ea: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ef: 4c 89 ea                      movq    %r13, %rdx
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _Py_NegativeRefcount
// 1fc: ff d0                         callq   *%rax
// 1fe: 49 8b 45 00                   movq    (%r13), %rax
// 202: 85 c0                         testl   %eax, %eax
// 204: 78 ba                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 210: ff d0                         callq   *%rax
// 212: 49 ff 4d 00                   decq    (%r13)
// 216: 75 a8                         jne     0x1c0 <_JIT_ENTRY+0x1c0>
// 218: 4c 89 ef                      movq    %r13, %rdi
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_Dealloc
// 225: ff d0                         callq   *%rax
// 227: eb 97                         jmp     0x1c0 <_JIT_ENTRY+0x1c0>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _JIT_OPARG
// 233: f7 d0                         notl    %eax
// 235: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 23a: 4c 63 f8                      movslq  %eax, %r15
// 23d: 4f 8b 6c fe f0                movq    -0x10(%r14,%r15,8), %r13
// 242: 4b 8b 6c fe f8                movq    -0x8(%r14,%r15,8), %rbp
// 247: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000249:  R_X86_64_64  _PyLong_Subtract
// 251: 4c 89 ef                      movq    %r13, %rdi
// 254: 48 89 ee                      movq    %rbp, %rsi
// 257: ff d0                         callq   *%rax
// 259: 49 89 c4                      movq    %rax, %r12
// 25c: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 260: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000262:  R_X86_64_64  PyInterpreterState_Get
// 26a: 75 1e                         jne     0x28a <_JIT_ENTRY+0x28a>
// 26c: ff d3                         callq   *%rbx
// 26e: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 275: 48 ff 4d 00                   decq    (%rbp)
// 279: 75 0f                         jne     0x28a <_JIT_ENTRY+0x28a>
// 27b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027d:  R_X86_64_64  PyObject_Free
// 285: 48 89 ef                      movq    %rbp, %rdi
// 288: ff d0                         callq   *%rax
// 28a: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 28f: 75 1e                         jne     0x2af <_JIT_ENTRY+0x2af>
// 291: ff d3                         callq   *%rbx
// 293: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 29a: 49 ff 4d 00                   decq    (%r13)
// 29e: 75 0f                         jne     0x2af <_JIT_ENTRY+0x2af>
// 2a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a2:  R_X86_64_64  PyObject_Free
// 2aa: 4c 89 ef                      movq    %r13, %rdi
// 2ad: ff d0                         callq   *%rax
// 2af: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 2b3: 48 83 c0 f0                   addq    $-0x10, %rax
// 2b7: 4d 85 e4                      testq   %r12, %r12
// 2ba: 74 2e                         je      0x2ea <_JIT_ENTRY+0x2ea>
// 2bc: 4b 8d 34 fe                   leaq    (%r14,%r15,8), %rsi
// 2c0: 48 83 c6 f8                   addq    $-0x8, %rsi
// 2c4: 4c 89 20                      movq    %r12, (%rax)
// 2c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c9:  R_X86_64_64  _JIT_CONTINUE
// 2d1: 48 8b 3c 24                   movq    (%rsp), %rdi
// 2d5: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2da: 48 83 c4 28                   addq    $0x28, %rsp
// 2de: 5b                            popq    %rbx
// 2df: 41 5c                         popq    %r12
// 2e1: 41 5d                         popq    %r13
// 2e3: 41 5e                         popq    %r14
// 2e5: 41 5f                         popq    %r15
// 2e7: 5d                            popq    %rbp
// 2e8: ff e0                         jmpq    *%rax
// 2ea: 48 8b 1c 24                   movq    (%rsp), %rbx
// 2ee: 48 29 d8                      subq    %rbx, %rax
// 2f1: 48 83 c0 b8                   addq    $-0x48, %rax
// 2f5: 48 c1 e8 03                   shrq    $0x3, %rax
// 2f9: 89 43 40                      movl    %eax, 0x40(%rbx)
// 2fc: 31 c0                         xorl    %eax, %eax
// 2fe: e9 ad fd ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 303: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_OP_SUBTRACT_INT_code_body[772] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd6, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xde, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xce, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc6, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x70, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x20, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xa7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x4c, 0x24, 0x18, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x7b, 0x01, 0x00, 0x00, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xa4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x8d, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0xe9, 0x44, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xdb, 0xeb, 0x10, 0x0f, 0x1f, 0x40, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0x37, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xf8, 0x4f, 0x8b, 0x6c, 0xfe, 0xf0, 0x4b, 0x8b, 0x6c, 0xfe, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0xf6, 0x45, 0x03, 0x80, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x1e, 0xff, 0xd3, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x1e, 0xff, 0xd3, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x83, 0xc0, 0xf0, 0x4d, 0x85, 0xe4, 0x74, 0x2e, 0x4b, 0x8d, 0x34, 0xfe, 0x48, 0x83, 0xc6, 0xf8, 0x4c, 0x89, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x1c, 0x24, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xad, 0xfd, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_OP_SUBTRACT_INT_code_holes[20] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x187, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x249, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyLong_Subtract, 0x0},
    {0x262, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x27d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x2a2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x2c9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_OP_SUBTRACT_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_OP_SUBTRACT_INT_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_SLICE
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_SLICE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d6                   movq    (%r14,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 de                   movq    (%r14,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c ce                   leaq    (%r14,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 c6                      subq    %r8, %r14
// 8b: 49 83 c6 b8                   addq    $-0x48, %r14
// 8f: 49 c1 ee 03                   shrq    $0x3, %r14
// 93: 45 89 70 40                   movl    %r14d, 0x40(%r8)
// 97: 49 8b 00                      movq    (%r8), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 5c 24 18                movq    %r11, 0x18(%rsp)
// c4: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// c9: 48 89 14 24                   movq    %rdx, (%rsp)
// cd: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 a7 00 00 00             je      0x1aa <_JIT_ENTRY+0x1aa>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 135: 4c 8b 3c 24                   movq    (%rsp), %r15
// 139: 78 21                         js      0x15c <_JIT_ENTRY+0x15c>
// 13b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 145: ff d0                         callq   *%rax
// 147: 49 ff 0c 24                   decq    (%r12)
// 14b: 75 0f                         jne     0x15c <_JIT_ENTRY+0x15c>
// 14d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014f:  R_X86_64_64  _Py_Dealloc
// 157: 4c 89 e7                      movq    %r12, %rdi
// 15a: ff d0                         callq   *%rax
// 15c: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 161: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 165: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 16a: 48 85 c9                      testq   %rcx, %rcx
// 16d: 0f 84 e0 01 00 00             je      0x353 <_JIT_ENTRY+0x353>
// 173: 48 89 08                      movq    %rcx, (%rax)
// 176: 49 8b 47 10                   movq    0x10(%r15), %rax
// 17a: 48 8b 00                      movq    (%rax), %rax
// 17d: 84 c0                         testb   %al, %al
// 17f: 0f 84 a4 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 185: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000187:  R_X86_64_64  _Py_HandlePending
// 18f: 4c 89 ff                      movq    %r15, %rdi
// 192: ff d0                         callq   *%rax
// 194: 85 c0                         testl   %eax, %eax
// 196: 0f 84 8d 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 19c: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1a1: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 1a5: e9 a9 01 00 00                jmp     0x353 <_JIT_ENTRY+0x353>
// 1aa: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1ae: bb 01 00 00 00                movl    $0x1, %ebx
// 1b3: 41 0f 43 dd                   cmovael %r13d, %ebx
// 1b7: 45 31 ff                      xorl    %r15d, %r15d
// 1ba: eb 10                         jmp     0x1cc <_JIT_ENTRY+0x1cc>
// 1bc: 0f 1f 40 00                   nopl    (%rax)
// 1c0: 49 ff c7                      incq    %r15
// 1c3: 4c 39 fb                      cmpq    %r15, %rbx
// 1c6: 0f 84 37 ff ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 1cc: 4e 8b 6c fd 00                movq    (%rbp,%r15,8), %r13
// 1d1: 49 8b 45 00                   movq    (%r13), %rax
// 1d5: 48 85 c0                      testq   %rax, %rax
// 1d8: 7e 06                         jle     0x1e0 <_JIT_ENTRY+0x1e0>
// 1da: 85 c0                         testl   %eax, %eax
// 1dc: 78 e2                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 1de: eb 26                         jmp     0x206 <_JIT_ENTRY+0x206>
// 1e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e2:  R_X86_64_64  .rodata.str1.1
// 1ea: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ef: 4c 89 ea                      movq    %r13, %rdx
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _Py_NegativeRefcount
// 1fc: ff d0                         callq   *%rax
// 1fe: 49 8b 45 00                   movq    (%r13), %rax
// 202: 85 c0                         testl   %eax, %eax
// 204: 78 ba                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 210: ff d0                         callq   *%rax
// 212: 49 ff 4d 00                   decq    (%r13)
// 216: 75 a8                         jne     0x1c0 <_JIT_ENTRY+0x1c0>
// 218: 4c 89 ef                      movq    %r13, %rdi
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_Dealloc
// 225: ff d0                         callq   *%rax
// 227: eb 97                         jmp     0x1c0 <_JIT_ENTRY+0x1c0>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _JIT_OPARG
// 233: f7 d0                         notl    %eax
// 235: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 23a: 4c 63 f8                      movslq  %eax, %r15
// 23d: 4b 8b 74 fe f8                movq    -0x8(%r14,%r15,8), %rsi
// 242: 4f 8b 64 fe e8                movq    -0x18(%r14,%r15,8), %r12
// 247: 4b 8b 7c fe f0                movq    -0x10(%r14,%r15,8), %rdi
// 24c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024e:  R_X86_64_64  _PyBuildSlice_ConsumeRefs
// 256: ff d0                         callq   *%rax
// 258: 48 85 c0                      testq   %rax, %rax
// 25b: 74 6a                         je      0x2c7 <_JIT_ENTRY+0x2c7>
// 25d: 48 89 c5                      movq    %rax, %rbp
// 260: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000262:  R_X86_64_64  PyObject_GetItem
// 26a: 4c 89 e7                      movq    %r12, %rdi
// 26d: 48 89 ee                      movq    %rbp, %rsi
// 270: ff d0                         callq   *%rax
// 272: 49 89 c5                      movq    %rax, %r13
// 275: 48 8b 45 00                   movq    (%rbp), %rax
// 279: 48 85 c0                      testq   %rax, %rax
// 27c: 7f 22                         jg      0x2a0 <_JIT_ENTRY+0x2a0>
// 27e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000280:  R_X86_64_64  .rodata.str1.1
// 288: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028a:  R_X86_64_64  _Py_NegativeRefcount
// 292: be 99 01 00 00                movl    $0x199, %esi            # imm = 0x199
// 297: 48 89 ea                      movq    %rbp, %rdx
// 29a: ff d0                         callq   *%rax
// 29c: 48 8b 45 00                   movq    (%rbp), %rax
// 2a0: 85 c0                         testl   %eax, %eax
// 2a2: 78 26                         js      0x2ca <_JIT_ENTRY+0x2ca>
// 2a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2ae: ff d0                         callq   *%rax
// 2b0: 48 ff 4d 00                   decq    (%rbp)
// 2b4: 75 14                         jne     0x2ca <_JIT_ENTRY+0x2ca>
// 2b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b8:  R_X86_64_64  _Py_Dealloc
// 2c0: 48 89 ef                      movq    %rbp, %rdi
// 2c3: ff d0                         callq   *%rax
// 2c5: eb 03                         jmp     0x2ca <_JIT_ENTRY+0x2ca>
// 2c7: 45 31 ed                      xorl    %r13d, %r13d
// 2ca: 49 8b 04 24                   movq    (%r12), %rax
// 2ce: 48 85 c0                      testq   %rax, %rax
// 2d1: 7f 22                         jg      0x2f5 <_JIT_ENTRY+0x2f5>
// 2d3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002d5:  R_X86_64_64  .rodata.str1.1
// 2dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002df:  R_X86_64_64  _Py_NegativeRefcount
// 2e7: be 9b 01 00 00                movl    $0x19b, %esi            # imm = 0x19B
// 2ec: 4c 89 e2                      movq    %r12, %rdx
// 2ef: ff d0                         callq   *%rax
// 2f1: 49 8b 04 24                   movq    (%r12), %rax
// 2f5: 85 c0                         testl   %eax, %eax
// 2f7: 78 21                         js      0x31a <_JIT_ENTRY+0x31a>
// 2f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 303: ff d0                         callq   *%rax
// 305: 49 ff 0c 24                   decq    (%r12)
// 309: 75 0f                         jne     0x31a <_JIT_ENTRY+0x31a>
// 30b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030d:  R_X86_64_64  _Py_Dealloc
// 315: 4c 89 e7                      movq    %r12, %rdi
// 318: ff d0                         callq   *%rax
// 31a: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 31e: 48 83 c0 e8                   addq    $-0x18, %rax
// 322: 4d 85 ed                      testq   %r13, %r13
// 325: 74 2c                         je      0x353 <_JIT_ENTRY+0x353>
// 327: 4b 8d 34 fe                   leaq    (%r14,%r15,8), %rsi
// 32b: 48 83 c6 f0                   addq    $-0x10, %rsi
// 32f: 4c 89 28                      movq    %r13, (%rax)
// 332: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000334:  R_X86_64_64  _JIT_CONTINUE
// 33c: 48 89 df                      movq    %rbx, %rdi
// 33f: 48 8b 14 24                   movq    (%rsp), %rdx
// 343: 48 83 c4 28                   addq    $0x28, %rsp
// 347: 5b                            popq    %rbx
// 348: 41 5c                         popq    %r12
// 34a: 41 5d                         popq    %r13
// 34c: 41 5e                         popq    %r14
// 34e: 41 5f                         popq    %r15
// 350: 5d                            popq    %rbp
// 351: ff e0                         jmpq    *%rax
// 353: 48 29 d8                      subq    %rbx, %rax
// 356: 48 83 c0 b8                   addq    $-0x48, %rax
// 35a: 48 c1 e8 03                   shrq    $0x3, %rax
// 35e: 89 43 40                      movl    %eax, 0x40(%rbx)
// 361: 31 c0                         xorl    %eax, %eax
// 363: e9 48 fd ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 368: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_SLICE_code_body[873] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd6, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xde, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xce, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc6, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x70, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x18, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x14, 0x24, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xa7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x3c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xe0, 0x01, 0x00, 0x00, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xa4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x8d, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc6, 0xe9, 0xa9, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xdd, 0x45, 0x31, 0xff, 0xeb, 0x10, 0x0f, 0x1f, 0x40, 0x00, 0x49, 0xff, 0xc7, 0x4c, 0x39, 0xfb, 0x0f, 0x84, 0x37, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xfd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xf8, 0x4b, 0x8b, 0x74, 0xfe, 0xf8, 0x4f, 0x8b, 0x64, 0xfe, 0xe8, 0x4b, 0x8b, 0x7c, 0xfe, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x6a, 0x48, 0x89, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x99, 0x01, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x26, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0xeb, 0x03, 0x45, 0x31, 0xed, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x9b, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x83, 0xc0, 0xe8, 0x4d, 0x85, 0xed, 0x74, 0x2c, 0x4b, 0x8d, 0x34, 0xfe, 0x48, 0x83, 0xc6, 0xf0, 0x4c, 0x89, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x48, 0xfd, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_SLICE_code_holes[26] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x187, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x24e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyBuildSlice_ConsumeRefs, 0x0},
    {0x262, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetItem, 0x0},
    {0x280, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x28a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2a6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2d5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2df, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x30d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x334, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_SLICE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_SLICE_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_SUBSCR
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_SUBSCR.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d6                   movq    (%r14,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 de                   movq    (%r14,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c ce                   leaq    (%r14,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 c6                      subq    %r8, %r14
// 8b: 49 83 c6 b8                   addq    $-0x48, %r14
// 8f: 49 c1 ee 03                   shrq    $0x3, %r14
// 93: 45 89 70 40                   movl    %r14d, 0x40(%r8)
// 97: 49 8b 00                      movq    (%r8), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 5c 24 18                movq    %r11, 0x18(%rsp)
// c4: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// c9: 48 89 14 24                   movq    %rdx, (%rsp)
// cd: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 a7 00 00 00             je      0x1aa <_JIT_ENTRY+0x1aa>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 135: 4c 8b 3c 24                   movq    (%rsp), %r15
// 139: 78 21                         js      0x15c <_JIT_ENTRY+0x15c>
// 13b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 145: ff d0                         callq   *%rax
// 147: 49 ff 0c 24                   decq    (%r12)
// 14b: 75 0f                         jne     0x15c <_JIT_ENTRY+0x15c>
// 14d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014f:  R_X86_64_64  _Py_Dealloc
// 157: 4c 89 e7                      movq    %r12, %rdi
// 15a: ff d0                         callq   *%rax
// 15c: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 161: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 165: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 16a: 48 85 c9                      testq   %rcx, %rcx
// 16d: 0f 84 c2 01 00 00             je      0x335 <_JIT_ENTRY+0x335>
// 173: 48 89 08                      movq    %rcx, (%rax)
// 176: 49 8b 47 10                   movq    0x10(%r15), %rax
// 17a: 48 8b 00                      movq    (%rax), %rax
// 17d: 84 c0                         testb   %al, %al
// 17f: 0f 84 a4 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 185: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000187:  R_X86_64_64  _Py_HandlePending
// 18f: 4c 89 ff                      movq    %r15, %rdi
// 192: ff d0                         callq   *%rax
// 194: 85 c0                         testl   %eax, %eax
// 196: 0f 84 8d 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 19c: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1a1: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 1a5: e9 8b 01 00 00                jmp     0x335 <_JIT_ENTRY+0x335>
// 1aa: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1ae: bb 01 00 00 00                movl    $0x1, %ebx
// 1b3: 41 0f 43 dd                   cmovael %r13d, %ebx
// 1b7: 45 31 ff                      xorl    %r15d, %r15d
// 1ba: eb 10                         jmp     0x1cc <_JIT_ENTRY+0x1cc>
// 1bc: 0f 1f 40 00                   nopl    (%rax)
// 1c0: 49 ff c7                      incq    %r15
// 1c3: 4c 39 fb                      cmpq    %r15, %rbx
// 1c6: 0f 84 37 ff ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 1cc: 4e 8b 6c fd 00                movq    (%rbp,%r15,8), %r13
// 1d1: 49 8b 45 00                   movq    (%r13), %rax
// 1d5: 48 85 c0                      testq   %rax, %rax
// 1d8: 7e 06                         jle     0x1e0 <_JIT_ENTRY+0x1e0>
// 1da: 85 c0                         testl   %eax, %eax
// 1dc: 78 e2                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 1de: eb 26                         jmp     0x206 <_JIT_ENTRY+0x206>
// 1e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e2:  R_X86_64_64  .rodata.str1.1
// 1ea: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ef: 4c 89 ea                      movq    %r13, %rdx
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _Py_NegativeRefcount
// 1fc: ff d0                         callq   *%rax
// 1fe: 49 8b 45 00                   movq    (%r13), %rax
// 202: 85 c0                         testl   %eax, %eax
// 204: 78 ba                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 210: ff d0                         callq   *%rax
// 212: 49 ff 4d 00                   decq    (%r13)
// 216: 75 a8                         jne     0x1c0 <_JIT_ENTRY+0x1c0>
// 218: 4c 89 ef                      movq    %r13, %rdi
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_Dealloc
// 225: ff d0                         callq   *%rax
// 227: eb 97                         jmp     0x1c0 <_JIT_ENTRY+0x1c0>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _JIT_OPARG
// 233: f7 d0                         notl    %eax
// 235: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 23a: 4c 63 f8                      movslq  %eax, %r15
// 23d: 4b 8b 6c fe f0                movq    -0x10(%r14,%r15,8), %rbp
// 242: 4f 8b 6c fe f8                movq    -0x8(%r14,%r15,8), %r13
// 247: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000249:  R_X86_64_64  PyObject_GetItem
// 251: 48 89 ef                      movq    %rbp, %rdi
// 254: 4c 89 ee                      movq    %r13, %rsi
// 257: ff d0                         callq   *%rax
// 259: 49 89 c4                      movq    %rax, %r12
// 25c: 48 8b 45 00                   movq    (%rbp), %rax
// 260: 48 85 c0                      testq   %rax, %rax
// 263: 7f 22                         jg      0x287 <_JIT_ENTRY+0x287>
// 265: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000267:  R_X86_64_64  .rodata.str1.1
// 26f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000271:  R_X86_64_64  _Py_NegativeRefcount
// 279: be 81 01 00 00                movl    $0x181, %esi            # imm = 0x181
// 27e: 48 89 ea                      movq    %rbp, %rdx
// 281: ff d0                         callq   *%rax
// 283: 48 8b 45 00                   movq    (%rbp), %rax
// 287: 85 c0                         testl   %eax, %eax
// 289: 78 21                         js      0x2ac <_JIT_ENTRY+0x2ac>
// 28b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 295: ff d0                         callq   *%rax
// 297: 48 ff 4d 00                   decq    (%rbp)
// 29b: 75 0f                         jne     0x2ac <_JIT_ENTRY+0x2ac>
// 29d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029f:  R_X86_64_64  _Py_Dealloc
// 2a7: 48 89 ef                      movq    %rbp, %rdi
// 2aa: ff d0                         callq   *%rax
// 2ac: 49 8b 45 00                   movq    (%r13), %rax
// 2b0: 48 85 c0                      testq   %rax, %rax
// 2b3: 7f 22                         jg      0x2d7 <_JIT_ENTRY+0x2d7>
// 2b5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002b7:  R_X86_64_64  .rodata.str1.1
// 2bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c1:  R_X86_64_64  _Py_NegativeRefcount
// 2c9: be 82 01 00 00                movl    $0x182, %esi            # imm = 0x182
// 2ce: 4c 89 ea                      movq    %r13, %rdx
// 2d1: ff d0                         callq   *%rax
// 2d3: 49 8b 45 00                   movq    (%r13), %rax
// 2d7: 85 c0                         testl   %eax, %eax
// 2d9: 78 21                         js      0x2fc <_JIT_ENTRY+0x2fc>
// 2db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002dd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2e5: ff d0                         callq   *%rax
// 2e7: 49 ff 4d 00                   decq    (%r13)
// 2eb: 75 0f                         jne     0x2fc <_JIT_ENTRY+0x2fc>
// 2ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ef:  R_X86_64_64  _Py_Dealloc
// 2f7: 4c 89 ef                      movq    %r13, %rdi
// 2fa: ff d0                         callq   *%rax
// 2fc: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 300: 48 83 c0 f0                   addq    $-0x10, %rax
// 304: 4d 85 e4                      testq   %r12, %r12
// 307: 74 2c                         je      0x335 <_JIT_ENTRY+0x335>
// 309: 4b 8d 34 fe                   leaq    (%r14,%r15,8), %rsi
// 30d: 48 83 c6 f8                   addq    $-0x8, %rsi
// 311: 4c 89 20                      movq    %r12, (%rax)
// 314: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000316:  R_X86_64_64  _JIT_CONTINUE
// 31e: 48 89 df                      movq    %rbx, %rdi
// 321: 48 8b 14 24                   movq    (%rsp), %rdx
// 325: 48 83 c4 28                   addq    $0x28, %rsp
// 329: 5b                            popq    %rbx
// 32a: 41 5c                         popq    %r12
// 32c: 41 5d                         popq    %r13
// 32e: 41 5e                         popq    %r14
// 330: 41 5f                         popq    %r15
// 332: 5d                            popq    %rbp
// 333: ff e0                         jmpq    *%rax
// 335: 48 29 d8                      subq    %rbx, %rax
// 338: 48 83 c0 b8                   addq    $-0x48, %rax
// 33c: 48 c1 e8 03                   shrq    $0x3, %rax
// 340: 89 43 40                      movl    %eax, 0x40(%rbx)
// 343: 31 c0                         xorl    %eax, %eax
// 345: e9 66 fd ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 34a: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_SUBSCR_code_body[843] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd6, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xde, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xce, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc6, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x70, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x18, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x14, 0x24, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xa7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x3c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xc2, 0x01, 0x00, 0x00, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xa4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x8d, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc6, 0xe9, 0x8b, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xdd, 0x45, 0x31, 0xff, 0xeb, 0x10, 0x0f, 0x1f, 0x40, 0x00, 0x49, 0xff, 0xc7, 0x4c, 0x39, 0xfb, 0x0f, 0x84, 0x37, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xfd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xf8, 0x4b, 0x8b, 0x6c, 0xfe, 0xf0, 0x4f, 0x8b, 0x6c, 0xfe, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x81, 0x01, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x82, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x83, 0xc0, 0xf0, 0x4d, 0x85, 0xe4, 0x74, 0x2c, 0x4b, 0x8d, 0x34, 0xfe, 0x48, 0x83, 0xc6, 0xf8, 0x4c, 0x89, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x66, 0xfd, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_SUBSCR_code_holes[25] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x187, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x249, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetItem, 0x0},
    {0x267, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x271, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x28d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x29f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2b7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x316, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_SUBSCR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_SUBSCR_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_SUBSCR_DICT
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_SUBSCR_DICT.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 38                   subq    $0x38, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fd                      movq    %rdi, %rbp
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 cf                   movq    (%r15,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d7                   movq    (%r15,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4b 8d 1c c7                   leaq    (%r15,%r8,8), %rbx
// 79: 48 8b 3b                      movq    (%rbx), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 3a                         je      0xc1 <_JIT_ENTRY+0xc1>
// 87: 4c 89 fb                      movq    %r15, %rbx
// 8a: 48 29 eb                      subq    %rbp, %rbx
// 8d: 48 83 c3 b8                   addq    $-0x48, %rbx
// 91: 48 c1 eb 03                   shrq    $0x3, %rbx
// 95: 89 5d 40                      movl    %ebx, 0x40(%rbp)
// 98: 48 8b 45 00                   movq    (%rbp), %rax
// 9c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009e:  R_X86_64_64  _JIT_TARGET
// a6: 89 c9                         movl    %ecx, %ecx
// a8: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// ac: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b2: 48 83 c4 38                   addq    $0x38, %rsp
// b6: 5b                            popq    %rbx
// b7: 41 5c                         popq    %r12
// b9: 41 5d                         popq    %r13
// bb: 41 5e                         popq    %r14
// bd: 41 5f                         popq    %r15
// bf: 5d                            popq    %rbp
// c0: c3                            retq
// c1: 4c 89 54 24 28                movq    %r10, 0x28(%rsp)
// c6: 4c 89 4c 24 18                movq    %r9, 0x18(%rsp)
// cb: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// d0: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// d5: 48 85 c0                      testq   %rax, %rax
// d8: 40 0f 94 c5                   sete    %bpl
// dc: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// e0: 48 8d 73 08                   leaq    0x8(%rbx), %rsi
// e4: 48 63 d0                      movslq  %eax, %rdx
// e7: ff 51 08                      callq   *0x8(%rcx)
// ea: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _JIT_OPARG
// f9: 66 85 c0                      testw   %ax, %ax
// fc: 0f 94 c0                      sete    %al
// ff: 40 84 c5                      testb   %al, %bpl
// 102: 0f 84 b7 00 00 00             je      0x1bf <_JIT_ENTRY+0x1bf>
// 108: 49 8b 04 24                   movq    (%r12), %rax
// 10c: 48 85 c0                      testq   %rax, %rax
// 10f: 7f 22                         jg      0x133 <_JIT_ENTRY+0x133>
// 111: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000113:  R_X86_64_64  .rodata.str1.1
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  _Py_NegativeRefcount
// 125: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 12a: 4c 89 e2                      movq    %r12, %rdx
// 12d: ff d0                         callq   *%rax
// 12f: 49 8b 04 24                   movq    (%r12), %rax
// 133: 85 c0                         testl   %eax, %eax
// 135: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 13a: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 13f: 78 21                         js      0x162 <_JIT_ENTRY+0x162>
// 141: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000143:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 14b: ff d0                         callq   *%rax
// 14d: 49 ff 0c 24                   decq    (%r12)
// 151: 75 0f                         jne     0x162 <_JIT_ENTRY+0x162>
// 153: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000155:  R_X86_64_64  _Py_Dealloc
// 15d: 4c 89 e7                      movq    %r12, %rdi
// 160: ff d0                         callq   *%rax
// 162: 48 8b 44 24 28                movq    0x28(%rsp), %rax
// 167: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 16b: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// 170: 48 85 d2                      testq   %rdx, %rdx
// 173: 74 35                         je      0x1aa <_JIT_ENTRY+0x1aa>
// 175: 48 8b 4c 24 18                movq    0x18(%rsp), %rcx
// 17a: 49 8d 1c cf                   leaq    (%r15,%rcx,8), %rbx
// 17e: 48 89 10                      movq    %rdx, (%rax)
// 181: 49 8b 46 10                   movq    0x10(%r14), %rax
// 185: 48 8b 00                      movq    (%rax), %rax
// 188: 84 c0                         testb   %al, %al
// 18a: 0f 84 b9 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_HandlePending
// 19a: 4c 89 f7                      movq    %r14, %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 85 c0                         testl   %eax, %eax
// 1a1: 0f 84 a2 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 1a7: 48 89 d8                      movq    %rbx, %rax
// 1aa: 48 29 e8                      subq    %rbp, %rax
// 1ad: 48 83 c0 b8                   addq    $-0x48, %rax
// 1b1: 48 c1 e8 03                   shrq    $0x3, %rax
// 1b5: 89 45 40                      movl    %eax, 0x40(%rbp)
// 1b8: 31 c0                         xorl    %eax, %eax
// 1ba: e9 f3 fe ff ff                jmp     0xb2 <_JIT_ENTRY+0xb2>
// 1bf: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1c3: bd 01 00 00 00                movl    $0x1, %ebp
// 1c8: 41 0f 43 ed                   cmovael %r13d, %ebp
// 1cc: 45 31 f6                      xorl    %r14d, %r14d
// 1cf: eb 1b                         jmp     0x1ec <_JIT_ENTRY+0x1ec>
// 1d1: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// 1e0: 49 ff c6                      incq    %r14
// 1e3: 4c 39 f5                      cmpq    %r14, %rbp
// 1e6: 0f 84 1c ff ff ff             je      0x108 <_JIT_ENTRY+0x108>
// 1ec: 4e 8b 2c f3                   movq    (%rbx,%r14,8), %r13
// 1f0: 49 8b 45 00                   movq    (%r13), %rax
// 1f4: 48 85 c0                      testq   %rax, %rax
// 1f7: 7e 07                         jle     0x200 <_JIT_ENTRY+0x200>
// 1f9: 85 c0                         testl   %eax, %eax
// 1fb: 78 e3                         js      0x1e0 <_JIT_ENTRY+0x1e0>
// 1fd: eb 27                         jmp     0x226 <_JIT_ENTRY+0x226>
// 1ff: 90                            nop
// 200: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1
// 20a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 20f: 4c 89 ea                      movq    %r13, %rdx
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: ff d0                         callq   *%rax
// 21e: 49 8b 45 00                   movq    (%r13), %rax
// 222: 85 c0                         testl   %eax, %eax
// 224: 78 ba                         js      0x1e0 <_JIT_ENTRY+0x1e0>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 230: ff d0                         callq   *%rax
// 232: 49 ff 4d 00                   decq    (%r13)
// 236: 75 a8                         jne     0x1e0 <_JIT_ENTRY+0x1e0>
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: ff d0                         callq   *%rax
// 247: eb 97                         jmp     0x1e0 <_JIT_ENTRY+0x1e0>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _JIT_OPARG
// 253: f7 d0                         notl    %eax
// 255: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 25a: 4c 63 f0                      movslq  %eax, %r14
// 25d: 4f 8b 6c f7 f0                movq    -0x10(%r15,%r14,8), %r13
// 262: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000264:  R_X86_64_64  PyDict_Type
// 26c: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 270: 0f 85 14 fe ff ff             jne     0x8a <_JIT_ENTRY+0x8a>
// 276: 4f 8b 64 f7 f8                movq    -0x8(%r15,%r14,8), %r12
// 27b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027d:  R_X86_64_64  PyDict_GetItemRef
// 285: 48 8d 54 24 30                leaq    0x30(%rsp), %rdx
// 28a: 4c 89 ef                      movq    %r13, %rdi
// 28d: 4c 89 e6                      movq    %r12, %rsi
// 290: ff d0                         callq   *%rax
// 292: 89 c5                         movl    %eax, %ebp
// 294: 85 c0                         testl   %eax, %eax
// 296: 74 0f                         je      0x2a7 <_JIT_ENTRY+0x2a7>
// 298: 49 8b 45 00                   movq    (%r13), %rax
// 29c: 48 85 c0                      testq   %rax, %rax
// 29f: 7e 1e                         jle     0x2bf <_JIT_ENTRY+0x2bf>
// 2a1: 85 c0                         testl   %eax, %eax
// 2a3: 79 40                         jns     0x2e5 <_JIT_ENTRY+0x2e5>
// 2a5: eb 5f                         jmp     0x306 <_JIT_ENTRY+0x306>
// 2a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a9:  R_X86_64_64  _PyErr_SetKeyError
// 2b1: 4c 89 e7                      movq    %r12, %rdi
// 2b4: ff d0                         callq   *%rax
// 2b6: 49 8b 45 00                   movq    (%r13), %rax
// 2ba: 48 85 c0                      testq   %rax, %rax
// 2bd: 7f e2                         jg      0x2a1 <_JIT_ENTRY+0x2a1>
// 2bf: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002c1:  R_X86_64_64  .rodata.str1.1
// 2c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cb:  R_X86_64_64  _Py_NegativeRefcount
// 2d3: be 0c 02 00 00                movl    $0x20c, %esi            # imm = 0x20C
// 2d8: 4c 89 ea                      movq    %r13, %rdx
// 2db: ff d0                         callq   *%rax
// 2dd: 49 8b 45 00                   movq    (%r13), %rax
// 2e1: 85 c0                         testl   %eax, %eax
// 2e3: 78 21                         js      0x306 <_JIT_ENTRY+0x306>
// 2e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2ef: ff d0                         callq   *%rax
// 2f1: 49 ff 4d 00                   decq    (%r13)
// 2f5: 75 0f                         jne     0x306 <_JIT_ENTRY+0x306>
// 2f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f9:  R_X86_64_64  _Py_Dealloc
// 301: 4c 89 ef                      movq    %r13, %rdi
// 304: ff d0                         callq   *%rax
// 306: 49 8b 04 24                   movq    (%r12), %rax
// 30a: 48 85 c0                      testq   %rax, %rax
// 30d: 7f 22                         jg      0x331 <_JIT_ENTRY+0x331>
// 30f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000311:  R_X86_64_64  .rodata.str1.1
// 319: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031b:  R_X86_64_64  _Py_NegativeRefcount
// 323: be 0d 02 00 00                movl    $0x20d, %esi            # imm = 0x20D
// 328: 4c 89 e2                      movq    %r12, %rdx
// 32b: ff d0                         callq   *%rax
// 32d: 49 8b 04 24                   movq    (%r12), %rax
// 331: 85 c0                         testl   %eax, %eax
// 333: 78 21                         js      0x356 <_JIT_ENTRY+0x356>
// 335: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000337:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 33f: ff d0                         callq   *%rax
// 341: 49 ff 0c 24                   decq    (%r12)
// 345: 75 0f                         jne     0x356 <_JIT_ENTRY+0x356>
// 347: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000349:  R_X86_64_64  _Py_Dealloc
// 351: 4c 89 e7                      movq    %r12, %rdi
// 354: ff d0                         callq   *%rax
// 356: 4b 8d 04 f7                   leaq    (%r15,%r14,8), %rax
// 35a: 48 83 c0 f0                   addq    $-0x10, %rax
// 35e: 85 ed                         testl   %ebp, %ebp
// 360: 7e 34                         jle     0x396 <_JIT_ENTRY+0x396>
// 362: 4b 8d 34 f7                   leaq    (%r15,%r14,8), %rsi
// 366: 48 83 c6 f8                   addq    $-0x8, %rsi
// 36a: 48 8b 4c 24 30                movq    0x30(%rsp), %rcx
// 36f: 48 89 08                      movq    %rcx, (%rax)
// 372: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000374:  R_X86_64_64  _JIT_CONTINUE
// 37c: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 381: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 386: 48 83 c4 38                   addq    $0x38, %rsp
// 38a: 5b                            popq    %rbx
// 38b: 41 5c                         popq    %r12
// 38d: 41 5d                         popq    %r13
// 38f: 41 5e                         popq    %r14
// 391: 41 5f                         popq    %r15
// 393: 5d                            popq    %rbp
// 394: ff e0                         jmpq    *%rax
// 396: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 39b: e9 0a fe ff ff                jmp     0x1aa <_JIT_ENTRY+0x1aa>
// 3a0: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_SUBSCR_DICT_code_body[929] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x38, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfd, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xcf, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4b, 0x8d, 0x1c, 0xc7, 0x48, 0x8b, 0x3b, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x3a, 0x4c, 0x89, 0xfb, 0x48, 0x29, 0xeb, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x89, 0x5d, 0x40, 0x48, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x28, 0x4c, 0x89, 0x4c, 0x24, 0x18, 0x48, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x73, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xb7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x28, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x74, 0x35, 0x48, 0x8b, 0x4c, 0x24, 0x18, 0x49, 0x8d, 0x1c, 0xcf, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xb9, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xa2, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd8, 0x48, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x45, 0x40, 0x31, 0xc0, 0xe9, 0xf3, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xed, 0x45, 0x31, 0xf6, 0xeb, 0x1b, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc6, 0x4c, 0x39, 0xf5, 0x0f, 0x84, 0x1c, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x2c, 0xf3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x27, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xf0, 0x4f, 0x8b, 0x6c, 0xf7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x14, 0xfe, 0xff, 0xff, 0x4f, 0x8b, 0x64, 0xf7, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x30, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x85, 0xc0, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x5f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x0c, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x0d, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xf7, 0x48, 0x83, 0xc0, 0xf0, 0x85, 0xed, 0x7e, 0x34, 0x4b, 0x8d, 0x34, 0xf7, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0x8b, 0x4c, 0x24, 0x30, 0x48, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0xe9, 0x0a, 0xfe, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_SUBSCR_DICT_code_holes[27] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9e, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x113, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x143, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x155, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x27d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_GetItemRef, 0x0},
    {0x2a9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetKeyError, 0x0},
    {0x2c1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2e7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2f9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x311, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x31b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x337, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x349, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x374, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_SUBSCR_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_SUBSCR_DICT_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_SUBSCR_LIST_INT
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_SUBSCR_LIST_INT.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fd                      movq    %rdi, %rbp
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 cf                   movq    (%r15,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d7                   movq    (%r15,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4b 8d 1c c7                   leaq    (%r15,%r8,8), %rbx
// 79: 48 8b 3b                      movq    (%rbx), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 3a                         je      0xc1 <_JIT_ENTRY+0xc1>
// 87: 4c 89 fb                      movq    %r15, %rbx
// 8a: 48 29 eb                      subq    %rbp, %rbx
// 8d: 48 83 c3 b8                   addq    $-0x48, %rbx
// 91: 48 c1 eb 03                   shrq    $0x3, %rbx
// 95: 89 5d 40                      movl    %ebx, 0x40(%rbp)
// 98: 48 8b 45 00                   movq    (%rbp), %rax
// 9c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009e:  R_X86_64_64  _JIT_TARGET
// a6: 89 c9                         movl    %ecx, %ecx
// a8: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// ac: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b2: 48 83 c4 28                   addq    $0x28, %rsp
// b6: 5b                            popq    %rbx
// b7: 41 5c                         popq    %r12
// b9: 41 5d                         popq    %r13
// bb: 41 5e                         popq    %r14
// bd: 41 5f                         popq    %r15
// bf: 5d                            popq    %rbp
// c0: c3                            retq
// c1: 4c 89 54 24 18                movq    %r10, 0x18(%rsp)
// c6: 4c 89 4c 24 08                movq    %r9, 0x8(%rsp)
// cb: 48 89 14 24                   movq    %rdx, (%rsp)
// cf: 48 89 6c 24 20                movq    %rbp, 0x20(%rsp)
// d4: 48 85 c0                      testq   %rax, %rax
// d7: 40 0f 94 c5                   sete    %bpl
// db: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// df: 48 8d 73 08                   leaq    0x8(%rbx), %rsi
// e3: 48 63 d0                      movslq  %eax, %rdx
// e6: ff 51 08                      callq   *0x8(%rcx)
// e9: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _JIT_OPARG
// f8: 66 85 c0                      testw   %ax, %ax
// fb: 0f 94 c0                      sete    %al
// fe: 40 84 c5                      testb   %al, %bpl
// 101: 0f 84 b6 00 00 00             je      0x1bd <_JIT_ENTRY+0x1bd>
// 107: 49 8b 04 24                   movq    (%r12), %rax
// 10b: 48 85 c0                      testq   %rax, %rax
// 10e: 7f 22                         jg      0x132 <_JIT_ENTRY+0x132>
// 110: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000112:  R_X86_64_64  .rodata.str1.1
// 11a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011c:  R_X86_64_64  _Py_NegativeRefcount
// 124: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 129: 4c 89 e2                      movq    %r12, %rdx
// 12c: ff d0                         callq   *%rax
// 12e: 49 8b 04 24                   movq    (%r12), %rax
// 132: 85 c0                         testl   %eax, %eax
// 134: 48 8b 6c 24 20                movq    0x20(%rsp), %rbp
// 139: 4c 8b 34 24                   movq    (%rsp), %r14
// 13d: 78 21                         js      0x160 <_JIT_ENTRY+0x160>
// 13f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000141:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 149: ff d0                         callq   *%rax
// 14b: 49 ff 0c 24                   decq    (%r12)
// 14f: 75 0f                         jne     0x160 <_JIT_ENTRY+0x160>
// 151: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000153:  R_X86_64_64  _Py_Dealloc
// 15b: 4c 89 e7                      movq    %r12, %rdi
// 15e: ff d0                         callq   *%rax
// 160: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 165: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 169: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 16e: 48 85 d2                      testq   %rdx, %rdx
// 171: 74 35                         je      0x1a8 <_JIT_ENTRY+0x1a8>
// 173: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 178: 49 8d 1c cf                   leaq    (%r15,%rcx,8), %rbx
// 17c: 48 89 10                      movq    %rdx, (%rax)
// 17f: 49 8b 46 10                   movq    0x10(%r14), %rax
// 183: 48 8b 00                      movq    (%rax), %rax
// 186: 84 c0                         testb   %al, %al
// 188: 0f 84 ab 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_HandlePending
// 198: 4c 89 f7                      movq    %r14, %rdi
// 19b: ff d0                         callq   *%rax
// 19d: 85 c0                         testl   %eax, %eax
// 19f: 0f 84 94 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 1a5: 48 89 d8                      movq    %rbx, %rax
// 1a8: 48 29 e8                      subq    %rbp, %rax
// 1ab: 48 83 c0 b8                   addq    $-0x48, %rax
// 1af: 48 c1 e8 03                   shrq    $0x3, %rax
// 1b3: 89 45 40                      movl    %eax, 0x40(%rbp)
// 1b6: 31 c0                         xorl    %eax, %eax
// 1b8: e9 f5 fe ff ff                jmp     0xb2 <_JIT_ENTRY+0xb2>
// 1bd: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1c1: bd 01 00 00 00                movl    $0x1, %ebp
// 1c6: 41 0f 43 ed                   cmovael %r13d, %ebp
// 1ca: 45 31 f6                      xorl    %r14d, %r14d
// 1cd: eb 0d                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1cf: 90                            nop
// 1d0: 49 ff c6                      incq    %r14
// 1d3: 4c 39 f5                      cmpq    %r14, %rbp
// 1d6: 0f 84 2b ff ff ff             je      0x107 <_JIT_ENTRY+0x107>
// 1dc: 4e 8b 2c f3                   movq    (%rbx,%r14,8), %r13
// 1e0: 49 8b 45 00                   movq    (%r13), %rax
// 1e4: 48 85 c0                      testq   %rax, %rax
// 1e7: 7e 07                         jle     0x1f0 <_JIT_ENTRY+0x1f0>
// 1e9: 85 c0                         testl   %eax, %eax
// 1eb: 78 e3                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1ed: eb 27                         jmp     0x216 <_JIT_ENTRY+0x216>
// 1ef: 90                            nop
// 1f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f2:  R_X86_64_64  .rodata.str1.1
// 1fa: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ff: 4c 89 ea                      movq    %r13, %rdx
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_NegativeRefcount
// 20c: ff d0                         callq   *%rax
// 20e: 49 8b 45 00                   movq    (%r13), %rax
// 212: 85 c0                         testl   %eax, %eax
// 214: 78 ba                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 220: ff d0                         callq   *%rax
// 222: 49 ff 4d 00                   decq    (%r13)
// 226: 75 a8                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 228: 4c 89 ef                      movq    %r13, %rdi
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_Dealloc
// 235: ff d0                         callq   *%rax
// 237: eb 97                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _JIT_OPARG
// 243: f7 d0                         notl    %eax
// 245: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 24a: 4c 63 f0                      movslq  %eax, %r14
// 24d: 4f 8b 6c f7 f8                movq    -0x8(%r15,%r14,8), %r13
// 252: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000254:  R_X86_64_64  PyLong_Type
// 25c: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 260: 0f 85 24 fe ff ff             jne     0x8a <_JIT_ENTRY+0x8a>
// 266: 4f 8b 64 f7 f0                movq    -0x10(%r15,%r14,8), %r12
// 26b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026d:  R_X86_64_64  PyList_Type
// 275: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 27a: 0f 85 0a fe ff ff             jne     0x8a <_JIT_ENTRY+0x8a>
// 280: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 285: 0f 87 ff fd ff ff             ja      0x8a <_JIT_ENTRY+0x8a>
// 28b: 41 8b 45 18                   movl    0x18(%r13), %eax
// 28f: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 294: 0f 8e f0 fd ff ff             jle     0x8a <_JIT_ENTRY+0x8a>
// 29a: 49 8b 4c 24 18                movq    0x18(%r12), %rcx
// 29f: 48 8b 1c c1                   movq    (%rcx,%rax,8), %rbx
// 2a3: 8b 03                         movl    (%rbx), %eax
// 2a5: ff c0                         incl    %eax
// 2a7: 74 0e                         je      0x2b7 <_JIT_ENTRY+0x2b7>
// 2a9: 89 03                         movl    %eax, (%rbx)
// 2ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ad:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 2b5: ff d0                         callq   *%rax
// 2b7: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 2bc: 75 28                         jne     0x2e6 <_JIT_ENTRY+0x2e6>
// 2be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c0:  R_X86_64_64  PyInterpreterState_Get
// 2c8: ff d0                         callq   *%rax
// 2ca: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 2d1: 49 ff 4d 00                   decq    (%r13)
// 2d5: 75 0f                         jne     0x2e6 <_JIT_ENTRY+0x2e6>
// 2d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d9:  R_X86_64_64  PyObject_Free
// 2e1: 4c 89 ef                      movq    %r13, %rdi
// 2e4: ff d0                         callq   *%rax
// 2e6: 49 8b 04 24                   movq    (%r12), %rax
// 2ea: 48 85 c0                      testq   %rax, %rax
// 2ed: 7f 22                         jg      0x311 <_JIT_ENTRY+0x311>
// 2ef: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002f1:  R_X86_64_64  .rodata.str1.1
// 2f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fb:  R_X86_64_64  _Py_NegativeRefcount
// 303: be cc 01 00 00                movl    $0x1cc, %esi            # imm = 0x1CC
// 308: 4c 89 e2                      movq    %r12, %rdx
// 30b: ff d0                         callq   *%rax
// 30d: 49 8b 04 24                   movq    (%r12), %rax
// 311: 4f 8d 2c f7                   leaq    (%r15,%r14,8), %r13
// 315: 49 83 c5 f8                   addq    $-0x8, %r13
// 319: 85 c0                         testl   %eax, %eax
// 31b: 78 21                         js      0x33e <_JIT_ENTRY+0x33e>
// 31d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 327: ff d0                         callq   *%rax
// 329: 49 ff 0c 24                   decq    (%r12)
// 32d: 75 0f                         jne     0x33e <_JIT_ENTRY+0x33e>
// 32f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000331:  R_X86_64_64  _Py_Dealloc
// 339: 4c 89 e7                      movq    %r12, %rdi
// 33c: ff d0                         callq   *%rax
// 33e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000340:  R_X86_64_64  _JIT_OPARG
// 348: f7 d0                         notl    %eax
// 34a: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 34f: 48 98                         cltq
// 351: 49 89 5c c7 f0                movq    %rbx, -0x10(%r15,%rax,8)
// 356: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000358:  R_X86_64_64  _JIT_CONTINUE
// 360: 48 89 ef                      movq    %rbp, %rdi
// 363: 4c 89 ee                      movq    %r13, %rsi
// 366: 48 8b 14 24                   movq    (%rsp), %rdx
// 36a: 48 83 c4 28                   addq    $0x28, %rsp
// 36e: 5b                            popq    %rbx
// 36f: 41 5c                         popq    %r12
// 371: 41 5d                         popq    %r13
// 373: 41 5e                         popq    %r14
// 375: 41 5f                         popq    %r15
// 377: 5d                            popq    %rbp
// 378: ff e0                         jmpq    *%rax
// 37a: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_SUBSCR_LIST_INT_code_body[891] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfd, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xcf, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4b, 0x8d, 0x1c, 0xc7, 0x48, 0x8b, 0x3b, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x3a, 0x4c, 0x89, 0xfb, 0x48, 0x29, 0xeb, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x89, 0x5d, 0x40, 0x48, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x4c, 0x24, 0x08, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0x6c, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x73, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xb6, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x20, 0x4c, 0x8b, 0x34, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x85, 0xd2, 0x74, 0x35, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x49, 0x8d, 0x1c, 0xcf, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xab, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x94, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd8, 0x48, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x45, 0x40, 0x31, 0xc0, 0xe9, 0xf5, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xed, 0x45, 0x31, 0xf6, 0xeb, 0x0d, 0x90, 0x49, 0xff, 0xc6, 0x4c, 0x39, 0xf5, 0x0f, 0x84, 0x2b, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x2c, 0xf3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x27, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xf0, 0x4f, 0x8b, 0x6c, 0xf7, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x24, 0xfe, 0xff, 0xff, 0x4f, 0x8b, 0x64, 0xf7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x0a, 0xfe, 0xff, 0xff, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xff, 0xfd, 0xff, 0xff, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0xf0, 0xfd, 0xff, 0xff, 0x49, 0x8b, 0x4c, 0x24, 0x18, 0x48, 0x8b, 0x1c, 0xc1, 0x8b, 0x03, 0xff, 0xc0, 0x74, 0x0e, 0x89, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xcc, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4f, 0x8d, 0x2c, 0xf7, 0x49, 0x83, 0xc5, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x5c, 0xc7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_SUBSCR_LIST_INT_code_holes[26] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9e, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x11c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x254, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x26d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyList_Type, 0x0},
    {0x2ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x2c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x2f1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x31f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x331, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x340, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x358, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_SUBSCR_LIST_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_SUBSCR_LIST_INT_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_SUBSCR_STR_INT
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_SUBSCR_STR_INT.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 30: 44 29 cf                      subl    %r9d, %edi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 48: 48 63 ef                      movslq  %edi, %rbp
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4c 8b 24 ee                   movq    (%rsi,%rbp,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4a 8d 1c c6                   leaq    (%rsi,%r8,8), %rbx
// 79: 48 8b 3b                      movq    (%rbx), %rdi
// 7c: 4c 8b 47 08                   movq    0x8(%rdi), %r8
// 80: 4d 3b 44 24 10                cmpq    0x10(%r12), %r8
// 85: 74 3a                         je      0xc1 <_JIT_ENTRY+0xc1>
// 87: 49 89 f5                      movq    %rsi, %r13
// 8a: 4d 29 f5                      subq    %r14, %r13
// 8d: 49 83 c5 b8                   addq    $-0x48, %r13
// 91: 49 c1 ed 03                   shrq    $0x3, %r13
// 95: 45 89 6e 40                   movl    %r13d, 0x40(%r14)
// 99: 49 8b 06                      movq    (%r14), %rax
// 9c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009e:  R_X86_64_64  _JIT_TARGET
// a6: 89 c9                         movl    %ecx, %ecx
// a8: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// ac: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b2: 48 83 c4 28                   addq    $0x28, %rsp
// b6: 5b                            popq    %rbx
// b7: 41 5c                         popq    %r12
// b9: 41 5d                         popq    %r13
// bb: 41 5e                         popq    %r14
// bd: 41 5f                         popq    %r15
// bf: 5d                            popq    %rbp
// c0: c3                            retq
// c1: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// c6: 48 89 34 24                   movq    %rsi, (%rsp)
// ca: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cf: 4c 89 74 24 20                movq    %r14, 0x20(%rsp)
// d4: 48 85 c0                      testq   %rax, %rax
// d7: 41 0f 94 c6                   sete    %r14b
// db: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// df: 48 8d 73 08                   leaq    0x8(%rbx), %rsi
// e3: 48 63 d0                      movslq  %eax, %rdx
// e6: ff 51 08                      callq   *0x8(%rcx)
// e9: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _JIT_OPARG
// f8: 66 85 c0                      testw   %ax, %ax
// fb: 0f 94 c0                      sete    %al
// fe: 41 84 c6                      testb   %al, %r14b
// 101: 0f 84 c7 00 00 00             je      0x1ce <_JIT_ENTRY+0x1ce>
// 107: 49 8b 04 24                   movq    (%r12), %rax
// 10b: 48 85 c0                      testq   %rax, %rax
// 10e: 4c 8b 04 24                   movq    (%rsp), %r8
// 112: 7f 26                         jg      0x13a <_JIT_ENTRY+0x13a>
// 114: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000116:  R_X86_64_64  .rodata.str1.1
// 11e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000120:  R_X86_64_64  _Py_NegativeRefcount
// 128: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 12d: 4c 89 e2                      movq    %r12, %rdx
// 130: ff d0                         callq   *%rax
// 132: 4c 8b 04 24                   movq    (%rsp), %r8
// 136: 49 8b 04 24                   movq    (%r12), %rax
// 13a: 85 c0                         testl   %eax, %eax
// 13c: 4c 8b 74 24 20                movq    0x20(%rsp), %r14
// 141: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 146: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 14b: 78 29                         js      0x176 <_JIT_ENTRY+0x176>
// 14d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 157: ff d0                         callq   *%rax
// 159: 4c 8b 04 24                   movq    (%rsp), %r8
// 15d: 49 ff 0c 24                   decq    (%r12)
// 161: 75 13                         jne     0x176 <_JIT_ENTRY+0x176>
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_Dealloc
// 16d: 4c 89 e7                      movq    %r12, %rdi
// 170: ff d0                         callq   *%rax
// 172: 4c 8b 04 24                   movq    (%rsp), %r8
// 176: 49 8d 04 e8                   leaq    (%r8,%rbp,8), %rax
// 17a: 48 85 db                      testq   %rbx, %rbx
// 17d: 74 39                         je      0x1b8 <_JIT_ENTRY+0x1b8>
// 17f: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 184: 4d 8d 2c c8                   leaq    (%r8,%rcx,8), %r13
// 188: 48 89 18                      movq    %rbx, (%rax)
// 18b: 49 8b 47 10                   movq    0x10(%r15), %rax
// 18f: 48 8b 00                      movq    (%rax), %rax
// 192: 84 c0                         testb   %al, %al
// 194: 0f 84 bf 00 00 00             je      0x259 <_JIT_ENTRY+0x259>
// 19a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019c:  R_X86_64_64  _Py_HandlePending
// 1a4: 4c 89 ff                      movq    %r15, %rdi
// 1a7: ff d0                         callq   *%rax
// 1a9: 4c 8b 04 24                   movq    (%rsp), %r8
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 0f 84 a4 00 00 00             je      0x259 <_JIT_ENTRY+0x259>
// 1b5: 4c 89 e8                      movq    %r13, %rax
// 1b8: 4c 29 f0                      subq    %r14, %rax
// 1bb: 48 83 c0 b8                   addq    $-0x48, %rax
// 1bf: 48 c1 e8 03                   shrq    $0x3, %rax
// 1c3: 41 89 46 40                   movl    %eax, 0x40(%r14)
// 1c7: 31 c0                         xorl    %eax, %eax
// 1c9: e9 e4 fe ff ff                jmp     0xb2 <_JIT_ENTRY+0xb2>
// 1ce: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1d2: 41 be 01 00 00 00             movl    $0x1, %r14d
// 1d8: 45 0f 43 f5                   cmovael %r13d, %r14d
// 1dc: 45 31 ff                      xorl    %r15d, %r15d
// 1df: eb 1b                         jmp     0x1fc <_JIT_ENTRY+0x1fc>
// 1e1: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// 1f0: 49 ff c7                      incq    %r15
// 1f3: 4d 39 fe                      cmpq    %r15, %r14
// 1f6: 0f 84 0b ff ff ff             je      0x107 <_JIT_ENTRY+0x107>
// 1fc: 4e 8b 2c fb                   movq    (%rbx,%r15,8), %r13
// 200: 49 8b 45 00                   movq    (%r13), %rax
// 204: 48 85 c0                      testq   %rax, %rax
// 207: 7e 07                         jle     0x210 <_JIT_ENTRY+0x210>
// 209: 85 c0                         testl   %eax, %eax
// 20b: 78 e3                         js      0x1f0 <_JIT_ENTRY+0x1f0>
// 20d: eb 27                         jmp     0x236 <_JIT_ENTRY+0x236>
// 20f: 90                            nop
// 210: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000212:  R_X86_64_64  .rodata.str1.1
// 21a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 21f: 4c 89 ea                      movq    %r13, %rdx
// 222: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000224:  R_X86_64_64  _Py_NegativeRefcount
// 22c: ff d0                         callq   *%rax
// 22e: 49 8b 45 00                   movq    (%r13), %rax
// 232: 85 c0                         testl   %eax, %eax
// 234: 78 ba                         js      0x1f0 <_JIT_ENTRY+0x1f0>
// 236: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000238:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 240: ff d0                         callq   *%rax
// 242: 49 ff 4d 00                   decq    (%r13)
// 246: 75 a8                         jne     0x1f0 <_JIT_ENTRY+0x1f0>
// 248: 4c 89 ef                      movq    %r13, %rdi
// 24b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024d:  R_X86_64_64  _Py_Dealloc
// 255: ff d0                         callq   *%rax
// 257: eb 97                         jmp     0x1f0 <_JIT_ENTRY+0x1f0>
// 259: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025b:  R_X86_64_64  _JIT_OPARG
// 263: f7 d0                         notl    %eax
// 265: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 26a: 48 98                         cltq
// 26c: 49 8b 7c c0 f8                movq    -0x8(%r8,%rax,8), %rdi
// 271: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000273:  R_X86_64_64  PyLong_Type
// 27b: 48 39 4f 08                   cmpq    %rcx, 0x8(%rdi)
// 27f: 0f 85 05 fe ff ff             jne     0x8a <_JIT_ENTRY+0x8a>
// 285: 4d 8b 64 c0 f0                movq    -0x10(%r8,%rax,8), %r12
// 28a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000028c:  R_X86_64_64  PyUnicode_Type
// 294: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 299: 0f 85 eb fd ff ff             jne     0x8a <_JIT_ENTRY+0x8a>
// 29f: 48 83 7f 10 08                cmpq    $0x8, 0x10(%rdi)
// 2a4: 0f 87 e0 fd ff ff             ja      0x8a <_JIT_ENTRY+0x8a>
// 2aa: 8b 4f 18                      movl    0x18(%rdi), %ecx
// 2ad: 49 39 4c 24 10                cmpq    %rcx, 0x10(%r12)
// 2b2: 0f 8e d2 fd ff ff             jle     0x8a <_JIT_ENTRY+0x8a>
// 2b8: 41 8b 54 24 20                movl    0x20(%r12), %edx
// 2bd: 89 d6                         movl    %edx, %esi
// 2bf: c1 ee 02                      shrl    $0x2, %esi
// 2c2: 83 e6 07                      andl    $0x7, %esi
// 2c5: 83 fe 02                      cmpl    $0x2, %esi
// 2c8: 74 15                         je      0x2df <_JIT_ENTRY+0x2df>
// 2ca: 83 fe 01                      cmpl    $0x1, %esi
// 2cd: 75 20                         jne     0x2ef <_JIT_ENTRY+0x2ef>
// 2cf: f6 c2 20                      testb   $0x20, %dl
// 2d2: 75 27                         jne     0x2fb <_JIT_ENTRY+0x2fb>
// 2d4: 49 8b 54 24 38                movq    0x38(%r12), %rdx
// 2d9: 0f b6 0c 0a                   movzbl  (%rdx,%rcx), %ecx
// 2dd: eb 6a                         jmp     0x349 <_JIT_ENTRY+0x349>
// 2df: f6 c2 20                      testb   $0x20, %dl
// 2e2: 75 32                         jne     0x316 <_JIT_ENTRY+0x316>
// 2e4: 49 8b 54 24 38                movq    0x38(%r12), %rdx
// 2e9: 0f b7 0c 4a                   movzwl  (%rdx,%rcx,2), %ecx
// 2ed: eb 5a                         jmp     0x349 <_JIT_ENTRY+0x349>
// 2ef: f6 c2 20                      testb   $0x20, %dl
// 2f2: 75 3d                         jne     0x331 <_JIT_ENTRY+0x331>
// 2f4: 49 8b 54 24 38                movq    0x38(%r12), %rdx
// 2f9: eb 4b                         jmp     0x346 <_JIT_ENTRY+0x346>
// 2fb: 31 f6                         xorl    %esi, %esi
// 2fd: f6 c2 40                      testb   $0x40, %dl
// 300: 40 0f 94 c6                   sete    %sil
// 304: 48 c1 e6 04                   shlq    $0x4, %rsi
// 308: 4a 8d 14 26                   leaq    (%rsi,%r12), %rdx
// 30c: 48 83 c2 28                   addq    $0x28, %rdx
// 310: 0f b6 0c 0a                   movzbl  (%rdx,%rcx), %ecx
// 314: eb 33                         jmp     0x349 <_JIT_ENTRY+0x349>
// 316: 31 f6                         xorl    %esi, %esi
// 318: f6 c2 40                      testb   $0x40, %dl
// 31b: 40 0f 94 c6                   sete    %sil
// 31f: 48 c1 e6 04                   shlq    $0x4, %rsi
// 323: 4a 8d 14 26                   leaq    (%rsi,%r12), %rdx
// 327: 48 83 c2 28                   addq    $0x28, %rdx
// 32b: 0f b7 0c 4a                   movzwl  (%rdx,%rcx,2), %ecx
// 32f: eb 18                         jmp     0x349 <_JIT_ENTRY+0x349>
// 331: 31 f6                         xorl    %esi, %esi
// 333: f6 c2 40                      testb   $0x40, %dl
// 336: 40 0f 94 c6                   sete    %sil
// 33a: 48 c1 e6 04                   shlq    $0x4, %rsi
// 33e: 4a 8d 14 26                   leaq    (%rsi,%r12), %rdx
// 342: 48 83 c2 28                   addq    $0x28, %rdx
// 346: 8b 0c 8a                      movl    (%rdx,%rcx,4), %ecx
// 349: 83 f9 7f                      cmpl    $0x7f, %ecx
// 34c: 0f 87 38 fd ff ff             ja      0x8a <_JIT_ENTRY+0x8a>
// 352: 4d 8d 2c c0                   leaq    (%r8,%rax,8), %r13
// 356: 49 83 c5 f8                   addq    $-0x8, %r13
// 35a: 89 c8                         movl    %ecx, %eax
// 35c: 48 8d 04 40                   leaq    (%rax,%rax,2), %rax
// 360: 48 c1 e0 04                   shlq    $0x4, %rax
// 364: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000366:  R_X86_64_64  _PyRuntime
// 36e: 48 8d 1c 01                   leaq    (%rcx,%rax), %rbx
// 372: 48 81 c3 a0 32 01 00          addq    $0x132a0, %rbx          # imm = 0x132A0
// 379: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000037b:  R_X86_64_64  .text+0x440
// 383: 4c 89 c5                      movq    %r8, %rbp
// 386: ff d0                         callq   *%rax
// 388: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000038a:  R_X86_64_64  .text+0x3e0
// 392: bf e3 01 00 00                movl    $0x1e3, %edi            # imm = 0x1E3
// 397: 4c 89 e6                      movq    %r12, %rsi
// 39a: ff d0                         callq   *%rax
// 39c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000039e:  R_X86_64_64  _JIT_OPARG
// 3a6: f7 d0                         notl    %eax
// 3a8: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 3ad: 48 98                         cltq
// 3af: 48 89 5c c5 f0                movq    %rbx, -0x10(%rbp,%rax,8)
// 3b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003b6:  R_X86_64_64  _JIT_CONTINUE
// 3be: 4c 89 f7                      movq    %r14, %rdi
// 3c1: 4c 89 ee                      movq    %r13, %rsi
// 3c4: 4c 89 fa                      movq    %r15, %rdx
// 3c7: 48 83 c4 28                   addq    $0x28, %rsp
// 3cb: 5b                            popq    %rbx
// 3cc: 41 5c                         popq    %r12
// 3ce: 41 5d                         popq    %r13
// 3d0: 41 5e                         popq    %r14
// 3d2: 41 5f                         popq    %r15
// 3d4: 5d                            popq    %rbp
// 3d5: ff e0                         jmpq    *%rax
// 3d7: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 
// 00000000000003e0 <Py_DECREF>:
// 3e0: 53                            pushq   %rbx
// 3e1: 48 89 f3                      movq    %rsi, %rbx
// 3e4: 48 8b 06                      movq    (%rsi), %rax
// 3e7: 48 85 c0                      testq   %rax, %rax
// 3ea: 7e 06                         jle     0x3f2 <Py_DECREF+0x12>
// 3ec: 85 c0                         testl   %eax, %eax
// 3ee: 79 24                         jns     0x414 <Py_DECREF+0x34>
// 3f0: eb 33                         jmp     0x425 <Py_DECREF+0x45>
// 3f2: 89 fe                         movl    %edi, %esi
// 3f4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003f6:  R_X86_64_64  .rodata.str1.1
// 3fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000400:  R_X86_64_64  _Py_NegativeRefcount
// 408: 48 89 da                      movq    %rbx, %rdx
// 40b: ff d0                         callq   *%rax
// 40d: 48 8b 03                      movq    (%rbx), %rax
// 410: 85 c0                         testl   %eax, %eax
// 412: 78 11                         js      0x425 <Py_DECREF+0x45>
// 414: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000416:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 41e: ff d0                         callq   *%rax
// 420: 48 ff 0b                      decq    (%rbx)
// 423: 74 02                         je      0x427 <Py_DECREF+0x47>
// 425: 5b                            popq    %rbx
// 426: c3                            retq
// 427: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000429:  R_X86_64_64  _Py_Dealloc
// 431: 48 89 df                      movq    %rbx, %rdi
// 434: 5b                            popq    %rbx
// 435: ff e0                         jmpq    *%rax
// 437: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 
// 0000000000000440 <_Py_DECREF_SPECIALIZED>:
// 440: 53                            pushq   %rbx
// 441: f6 47 03 80                   testb   $-0x80, 0x3(%rdi)
// 445: 75 1b                         jne     0x462 <_Py_DECREF_SPECIALIZED+0x22>
// 447: 48 89 fb                      movq    %rdi, %rbx
// 44a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000044c:  R_X86_64_64  PyInterpreterState_Get
// 454: ff d0                         callq   *%rax
// 456: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 45d: 48 ff 0b                      decq    (%rbx)
// 460: 74 02                         je      0x464 <_Py_DECREF_SPECIALIZED+0x24>
// 462: 5b                            popq    %rbx
// 463: c3                            retq
// 464: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000466:  R_X86_64_64  PyObject_Free
// 46e: 48 89 df                      movq    %rbx, %rdi
// 471: 5b                            popq    %rbx
// 472: ff e0                         jmpq    *%rax
// 474: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_SUBSCR_STR_INT_code_body[1141] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xfe, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xcf, 0x45, 0x8d, 0x69, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x48, 0x63, 0xef, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4c, 0x8b, 0x24, 0xee, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4a, 0x8d, 0x1c, 0xc6, 0x48, 0x8b, 0x3b, 0x4c, 0x8b, 0x47, 0x08, 0x4d, 0x3b, 0x44, 0x24, 0x10, 0x74, 0x3a, 0x49, 0x89, 0xf5, 0x4d, 0x29, 0xf5, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x45, 0x89, 0x6e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x34, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x74, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc6, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x73, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc6, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x4c, 0x8b, 0x04, 0x24, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x20, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xe8, 0x48, 0x85, 0xdb, 0x74, 0x39, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x4d, 0x8d, 0x2c, 0xc8, 0x48, 0x89, 0x18, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xbf, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x84, 0xa4, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe8, 0x4c, 0x29, 0xf0, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x46, 0x40, 0x31, 0xc0, 0xe9, 0xe4, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x45, 0x31, 0xff, 0xeb, 0x1b, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc7, 0x4d, 0x39, 0xfe, 0x0f, 0x84, 0x0b, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x2c, 0xfb, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x27, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x7c, 0xc0, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x4f, 0x08, 0x0f, 0x85, 0x05, 0xfe, 0xff, 0xff, 0x4d, 0x8b, 0x64, 0xc0, 0xf0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x0f, 0x85, 0xeb, 0xfd, 0xff, 0xff, 0x48, 0x83, 0x7f, 0x10, 0x08, 0x0f, 0x87, 0xe0, 0xfd, 0xff, 0xff, 0x8b, 0x4f, 0x18, 0x49, 0x39, 0x4c, 0x24, 0x10, 0x0f, 0x8e, 0xd2, 0xfd, 0xff, 0xff, 0x41, 0x8b, 0x54, 0x24, 0x20, 0x89, 0xd6, 0xc1, 0xee, 0x02, 0x83, 0xe6, 0x07, 0x83, 0xfe, 0x02, 0x74, 0x15, 0x83, 0xfe, 0x01, 0x75, 0x20, 0xf6, 0xc2, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x54, 0x24, 0x38, 0x0f, 0xb6, 0x0c, 0x0a, 0xeb, 0x6a, 0xf6, 0xc2, 0x20, 0x75, 0x32, 0x49, 0x8b, 0x54, 0x24, 0x38, 0x0f, 0xb7, 0x0c, 0x4a, 0xeb, 0x5a, 0xf6, 0xc2, 0x20, 0x75, 0x3d, 0x49, 0x8b, 0x54, 0x24, 0x38, 0xeb, 0x4b, 0x31, 0xf6, 0xf6, 0xc2, 0x40, 0x40, 0x0f, 0x94, 0xc6, 0x48, 0xc1, 0xe6, 0x04, 0x4a, 0x8d, 0x14, 0x26, 0x48, 0x83, 0xc2, 0x28, 0x0f, 0xb6, 0x0c, 0x0a, 0xeb, 0x33, 0x31, 0xf6, 0xf6, 0xc2, 0x40, 0x40, 0x0f, 0x94, 0xc6, 0x48, 0xc1, 0xe6, 0x04, 0x4a, 0x8d, 0x14, 0x26, 0x48, 0x83, 0xc2, 0x28, 0x0f, 0xb7, 0x0c, 0x4a, 0xeb, 0x18, 0x31, 0xf6, 0xf6, 0xc2, 0x40, 0x40, 0x0f, 0x94, 0xc6, 0x48, 0xc1, 0xe6, 0x04, 0x4a, 0x8d, 0x14, 0x26, 0x48, 0x83, 0xc2, 0x28, 0x8b, 0x0c, 0x8a, 0x83, 0xf9, 0x7f, 0x0f, 0x87, 0x38, 0xfd, 0xff, 0xff, 0x4d, 0x8d, 0x2c, 0xc0, 0x49, 0x83, 0xc5, 0xf8, 0x89, 0xc8, 0x48, 0x8d, 0x04, 0x40, 0x48, 0xc1, 0xe0, 0x04, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x1c, 0x01, 0x48, 0x81, 0xc3, 0xa0, 0x32, 0x01, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xc5, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x89, 0x5c, 0xc5, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x48, 0x89, 0xf3, 0x48, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x24, 0xeb, 0x33, 0x89, 0xfe, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x74, 0x02, 0x5b, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x5b, 0xff, 0xe0, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0xf6, 0x47, 0x03, 0x80, 0x75, 0x1b, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xff, 0x0b, 0x74, 0x02, 0x5b, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x5b, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_SUBSCR_STR_INT_code_holes[28] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9e, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x116, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x120, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x224, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x238, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x24d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x25b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x273, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x28c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x366, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x37b, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x440},
    {0x38a, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x3e0},
    {0x39e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3b6, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x3f6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x400, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x416, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x429, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x44c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x466, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_SUBSCR_STR_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_SUBSCR_STR_INT_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_SUBSCR_TUPLE_INT
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_SUBSCR_TUPLE_INT.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fd                      movq    %rdi, %rbp
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 cf                   movq    (%r15,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d7                   movq    (%r15,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4b 8d 1c c7                   leaq    (%r15,%r8,8), %rbx
// 79: 48 8b 3b                      movq    (%rbx), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 3a                         je      0xc1 <_JIT_ENTRY+0xc1>
// 87: 4c 89 fb                      movq    %r15, %rbx
// 8a: 48 29 eb                      subq    %rbp, %rbx
// 8d: 48 83 c3 b8                   addq    $-0x48, %rbx
// 91: 48 c1 eb 03                   shrq    $0x3, %rbx
// 95: 89 5d 40                      movl    %ebx, 0x40(%rbp)
// 98: 48 8b 45 00                   movq    (%rbp), %rax
// 9c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009e:  R_X86_64_64  _JIT_TARGET
// a6: 89 c9                         movl    %ecx, %ecx
// a8: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// ac: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b2: 48 83 c4 28                   addq    $0x28, %rsp
// b6: 5b                            popq    %rbx
// b7: 41 5c                         popq    %r12
// b9: 41 5d                         popq    %r13
// bb: 41 5e                         popq    %r14
// bd: 41 5f                         popq    %r15
// bf: 5d                            popq    %rbp
// c0: c3                            retq
// c1: 4c 89 54 24 18                movq    %r10, 0x18(%rsp)
// c6: 4c 89 4c 24 08                movq    %r9, 0x8(%rsp)
// cb: 48 89 14 24                   movq    %rdx, (%rsp)
// cf: 48 89 6c 24 20                movq    %rbp, 0x20(%rsp)
// d4: 48 85 c0                      testq   %rax, %rax
// d7: 40 0f 94 c5                   sete    %bpl
// db: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// df: 48 8d 73 08                   leaq    0x8(%rbx), %rsi
// e3: 48 63 d0                      movslq  %eax, %rdx
// e6: ff 51 08                      callq   *0x8(%rcx)
// e9: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _JIT_OPARG
// f8: 66 85 c0                      testw   %ax, %ax
// fb: 0f 94 c0                      sete    %al
// fe: 40 84 c5                      testb   %al, %bpl
// 101: 0f 84 b6 00 00 00             je      0x1bd <_JIT_ENTRY+0x1bd>
// 107: 49 8b 04 24                   movq    (%r12), %rax
// 10b: 48 85 c0                      testq   %rax, %rax
// 10e: 7f 22                         jg      0x132 <_JIT_ENTRY+0x132>
// 110: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000112:  R_X86_64_64  .rodata.str1.1
// 11a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011c:  R_X86_64_64  _Py_NegativeRefcount
// 124: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 129: 4c 89 e2                      movq    %r12, %rdx
// 12c: ff d0                         callq   *%rax
// 12e: 49 8b 04 24                   movq    (%r12), %rax
// 132: 85 c0                         testl   %eax, %eax
// 134: 48 8b 6c 24 20                movq    0x20(%rsp), %rbp
// 139: 4c 8b 34 24                   movq    (%rsp), %r14
// 13d: 78 21                         js      0x160 <_JIT_ENTRY+0x160>
// 13f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000141:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 149: ff d0                         callq   *%rax
// 14b: 49 ff 0c 24                   decq    (%r12)
// 14f: 75 0f                         jne     0x160 <_JIT_ENTRY+0x160>
// 151: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000153:  R_X86_64_64  _Py_Dealloc
// 15b: 4c 89 e7                      movq    %r12, %rdi
// 15e: ff d0                         callq   *%rax
// 160: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 165: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 169: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 16e: 48 85 d2                      testq   %rdx, %rdx
// 171: 74 35                         je      0x1a8 <_JIT_ENTRY+0x1a8>
// 173: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 178: 49 8d 1c cf                   leaq    (%r15,%rcx,8), %rbx
// 17c: 48 89 10                      movq    %rdx, (%rax)
// 17f: 49 8b 46 10                   movq    0x10(%r14), %rax
// 183: 48 8b 00                      movq    (%rax), %rax
// 186: 84 c0                         testb   %al, %al
// 188: 0f 84 ab 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_HandlePending
// 198: 4c 89 f7                      movq    %r14, %rdi
// 19b: ff d0                         callq   *%rax
// 19d: 85 c0                         testl   %eax, %eax
// 19f: 0f 84 94 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 1a5: 48 89 d8                      movq    %rbx, %rax
// 1a8: 48 29 e8                      subq    %rbp, %rax
// 1ab: 48 83 c0 b8                   addq    $-0x48, %rax
// 1af: 48 c1 e8 03                   shrq    $0x3, %rax
// 1b3: 89 45 40                      movl    %eax, 0x40(%rbp)
// 1b6: 31 c0                         xorl    %eax, %eax
// 1b8: e9 f5 fe ff ff                jmp     0xb2 <_JIT_ENTRY+0xb2>
// 1bd: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1c1: bd 01 00 00 00                movl    $0x1, %ebp
// 1c6: 41 0f 43 ed                   cmovael %r13d, %ebp
// 1ca: 45 31 f6                      xorl    %r14d, %r14d
// 1cd: eb 0d                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1cf: 90                            nop
// 1d0: 49 ff c6                      incq    %r14
// 1d3: 4c 39 f5                      cmpq    %r14, %rbp
// 1d6: 0f 84 2b ff ff ff             je      0x107 <_JIT_ENTRY+0x107>
// 1dc: 4e 8b 2c f3                   movq    (%rbx,%r14,8), %r13
// 1e0: 49 8b 45 00                   movq    (%r13), %rax
// 1e4: 48 85 c0                      testq   %rax, %rax
// 1e7: 7e 07                         jle     0x1f0 <_JIT_ENTRY+0x1f0>
// 1e9: 85 c0                         testl   %eax, %eax
// 1eb: 78 e3                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1ed: eb 27                         jmp     0x216 <_JIT_ENTRY+0x216>
// 1ef: 90                            nop
// 1f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f2:  R_X86_64_64  .rodata.str1.1
// 1fa: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ff: 4c 89 ea                      movq    %r13, %rdx
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_NegativeRefcount
// 20c: ff d0                         callq   *%rax
// 20e: 49 8b 45 00                   movq    (%r13), %rax
// 212: 85 c0                         testl   %eax, %eax
// 214: 78 ba                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 220: ff d0                         callq   *%rax
// 222: 49 ff 4d 00                   decq    (%r13)
// 226: 75 a8                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 228: 4c 89 ef                      movq    %r13, %rdi
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_Dealloc
// 235: ff d0                         callq   *%rax
// 237: eb 97                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _JIT_OPARG
// 243: f7 d0                         notl    %eax
// 245: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 24a: 4c 63 f0                      movslq  %eax, %r14
// 24d: 4f 8b 6c f7 f8                movq    -0x8(%r15,%r14,8), %r13
// 252: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000254:  R_X86_64_64  PyLong_Type
// 25c: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 260: 0f 85 24 fe ff ff             jne     0x8a <_JIT_ENTRY+0x8a>
// 266: 4f 8b 64 f7 f0                movq    -0x10(%r15,%r14,8), %r12
// 26b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026d:  R_X86_64_64  PyTuple_Type
// 275: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 27a: 0f 85 0a fe ff ff             jne     0x8a <_JIT_ENTRY+0x8a>
// 280: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 285: 0f 87 ff fd ff ff             ja      0x8a <_JIT_ENTRY+0x8a>
// 28b: 41 8b 45 18                   movl    0x18(%r13), %eax
// 28f: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 294: 0f 8e f0 fd ff ff             jle     0x8a <_JIT_ENTRY+0x8a>
// 29a: 49 8b 5c c4 18                movq    0x18(%r12,%rax,8), %rbx
// 29f: 8b 03                         movl    (%rbx), %eax
// 2a1: ff c0                         incl    %eax
// 2a3: 74 0e                         je      0x2b3 <_JIT_ENTRY+0x2b3>
// 2a5: 89 03                         movl    %eax, (%rbx)
// 2a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a9:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 2b1: ff d0                         callq   *%rax
// 2b3: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 2b8: 75 28                         jne     0x2e2 <_JIT_ENTRY+0x2e2>
// 2ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bc:  R_X86_64_64  PyInterpreterState_Get
// 2c4: ff d0                         callq   *%rax
// 2c6: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 2cd: 49 ff 4d 00                   decq    (%r13)
// 2d1: 75 0f                         jne     0x2e2 <_JIT_ENTRY+0x2e2>
// 2d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d5:  R_X86_64_64  PyObject_Free
// 2dd: 4c 89 ef                      movq    %r13, %rdi
// 2e0: ff d0                         callq   *%rax
// 2e2: 49 8b 04 24                   movq    (%r12), %rax
// 2e6: 48 85 c0                      testq   %rax, %rax
// 2e9: 7f 22                         jg      0x30d <_JIT_ENTRY+0x30d>
// 2eb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002ed:  R_X86_64_64  .rodata.str1.1
// 2f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f7:  R_X86_64_64  _Py_NegativeRefcount
// 2ff: be fa 01 00 00                movl    $0x1fa, %esi            # imm = 0x1FA
// 304: 4c 89 e2                      movq    %r12, %rdx
// 307: ff d0                         callq   *%rax
// 309: 49 8b 04 24                   movq    (%r12), %rax
// 30d: 4f 8d 2c f7                   leaq    (%r15,%r14,8), %r13
// 311: 49 83 c5 f8                   addq    $-0x8, %r13
// 315: 85 c0                         testl   %eax, %eax
// 317: 78 21                         js      0x33a <_JIT_ENTRY+0x33a>
// 319: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 323: ff d0                         callq   *%rax
// 325: 49 ff 0c 24                   decq    (%r12)
// 329: 75 0f                         jne     0x33a <_JIT_ENTRY+0x33a>
// 32b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032d:  R_X86_64_64  _Py_Dealloc
// 335: 4c 89 e7                      movq    %r12, %rdi
// 338: ff d0                         callq   *%rax
// 33a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033c:  R_X86_64_64  _JIT_OPARG
// 344: f7 d0                         notl    %eax
// 346: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 34b: 48 98                         cltq
// 34d: 49 89 5c c7 f0                movq    %rbx, -0x10(%r15,%rax,8)
// 352: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000354:  R_X86_64_64  _JIT_CONTINUE
// 35c: 48 89 ef                      movq    %rbp, %rdi
// 35f: 4c 89 ee                      movq    %r13, %rsi
// 362: 48 8b 14 24                   movq    (%rsp), %rdx
// 366: 48 83 c4 28                   addq    $0x28, %rsp
// 36a: 5b                            popq    %rbx
// 36b: 41 5c                         popq    %r12
// 36d: 41 5d                         popq    %r13
// 36f: 41 5e                         popq    %r14
// 371: 41 5f                         popq    %r15
// 373: 5d                            popq    %rbp
// 374: ff e0                         jmpq    *%rax
// 376: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_SUBSCR_TUPLE_INT_code_body[887] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfd, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xcf, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4b, 0x8d, 0x1c, 0xc7, 0x48, 0x8b, 0x3b, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x3a, 0x4c, 0x89, 0xfb, 0x48, 0x29, 0xeb, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x89, 0x5d, 0x40, 0x48, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x4c, 0x24, 0x08, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0x6c, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x73, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xb6, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x20, 0x4c, 0x8b, 0x34, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x85, 0xd2, 0x74, 0x35, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x49, 0x8d, 0x1c, 0xcf, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xab, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x94, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd8, 0x48, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x45, 0x40, 0x31, 0xc0, 0xe9, 0xf5, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xed, 0x45, 0x31, 0xf6, 0xeb, 0x0d, 0x90, 0x49, 0xff, 0xc6, 0x4c, 0x39, 0xf5, 0x0f, 0x84, 0x2b, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x2c, 0xf3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x27, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xf0, 0x4f, 0x8b, 0x6c, 0xf7, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x24, 0xfe, 0xff, 0xff, 0x4f, 0x8b, 0x64, 0xf7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x0a, 0xfe, 0xff, 0xff, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xff, 0xfd, 0xff, 0xff, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0xf0, 0xfd, 0xff, 0xff, 0x49, 0x8b, 0x5c, 0xc4, 0x18, 0x8b, 0x03, 0xff, 0xc0, 0x74, 0x0e, 0x89, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfa, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4f, 0x8d, 0x2c, 0xf7, 0x49, 0x83, 0xc5, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x5c, 0xc7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_SUBSCR_TUPLE_INT_code_holes[26] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9e, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x11c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x254, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x26d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x2a9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x2bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2d5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x2ed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2f7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x31b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x32d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x33c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x354, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_SUBSCR_TUPLE_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_SUBSCR_TUPLE_INT_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_BUILD_CONST_KEY_MAP
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_BUILD_CONST_KEY_MAP.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d7                   movq    (%r15,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 df                   movq    (%r15,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4b 8d 1c cf                   leaq    (%r15,%r9,8), %rbx
// 79: 48 8b 3b                      movq    (%rbx), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 4d 29 c7                      subq    %r8, %r15
// 8a: 49 83 c7 b8                   addq    $-0x48, %r15
// 8e: 49 c1 ef 03                   shrq    $0x3, %r15
// 92: 45 89 78 40                   movl    %r15d, 0x40(%r8)
// 96: 49 8b 00                      movq    (%r8), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 1c 24                   movq    %r11, (%rsp)
// c2: 4c 89 54 24 18                movq    %r10, 0x18(%rsp)
// c7: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// cc: 4c 89 44 24 10                movq    %r8, 0x10(%rsp)
// d1: 48 85 c0                      testq   %rax, %rax
// d4: 40 0f 94 c5                   sete    %bpl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 73 08                   leaq    0x8(%rbx), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 9c 01 00 00             je      0x2a0 <_JIT_ENTRY+0x2a0>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 136: 4c 8b 6c 24 20                movq    0x20(%rsp), %r13
// 13b: 78 21                         js      0x15e <_JIT_ENTRY+0x15e>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 147: ff d0                         callq   *%rax
// 149: 49 ff 0c 24                   decq    (%r12)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_Dealloc
// 159: 4c 89 e7                      movq    %r12, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 04 24                   movq    (%rsp), %rax
// 162: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 166: 4d 85 ed                      testq   %r13, %r13
// 169: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 16e: 0f 84 b5 01 00 00             je      0x329 <_JIT_ENTRY+0x329>
// 174: 48 8b 4c 24 18                movq    0x18(%rsp), %rcx
// 179: 4d 8d 24 cf                   leaq    (%r15,%rcx,8), %r12
// 17d: 4c 89 28                      movq    %r13, (%rax)
// 180: 49 8b 46 10                   movq    0x10(%r14), %rax
// 184: 48 8b 00                      movq    (%rax), %rax
// 187: 84 c0                         testb   %al, %al
// 189: 74 17                         je      0x1a2 <_JIT_ENTRY+0x1a2>
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_HandlePending
// 195: 4c 89 f7                      movq    %r14, %rdi
// 198: ff d0                         callq   *%rax
// 19a: 85 c0                         testl   %eax, %eax
// 19c: 0f 85 b2 01 00 00             jne     0x354 <_JIT_ENTRY+0x354>
// 1a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a4:  R_X86_64_64  _JIT_OPARG
// 1ac: f7 d0                         notl    %eax
// 1ae: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1b3: 48 98                         cltq
// 1b5: 4d 8b 6c c7 f8                movq    -0x8(%r15,%rax,8), %r13
// 1ba: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001bc:  R_X86_64_64  PyTuple_Type
// 1c4: 49 39 4d 08                   cmpq    %rcx, 0x8(%r13)
// 1c8: 0f 85 60 01 00 00             jne     0x32e <_JIT_ENTRY+0x32e>
// 1ce: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d0:  R_X86_64_64  _JIT_OPARG
// 1d8: 0f b7 c9                      movzwl  %cx, %ecx
// 1db: 49 39 4d 10                   cmpq    %rcx, 0x10(%r13)
// 1df: 0f 85 49 01 00 00             jne     0x32e <_JIT_ENTRY+0x32e>
// 1e5: 48 01 c0                      addq    %rax, %rax
// 1e8: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 1ec: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 1f0: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000001f2:  R_X86_64_64  _JIT_OPARG
// 1fa: 44 0f b7 c3                   movzwl  %bx, %r8d
// 1fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000200:  R_X86_64_64  _PyDict_FromItems
// 208: be 01 00 00 00                movl    $0x1, %esi
// 20d: b9 01 00 00 00                movl    $0x1, %ecx
// 212: 4c 89 e2                      movq    %r12, %rdx
// 215: ff d0                         callq   *%rax
// 217: 48 89 04 24                   movq    %rax, (%rsp)
// 21b: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 221: 0f 8e 43 01 00 00             jle     0x36a <_JIT_ENTRY+0x36a>
// 227: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000229:  R_X86_64_64  _JIT_OPARG
// 231: 0f b7 d8                      movzwl  %ax, %ebx
// 234: 48 ff c3                      incq    %rbx
// 237: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000239:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 241: eb 0d                         jmp     0x250 <_JIT_ENTRY+0x250>
// 243: 48 ff cb                      decq    %rbx
// 246: 48 83 fb 01                   cmpq    $0x1, %rbx
// 24a: 0f 8e 1a 01 00 00             jle     0x36a <_JIT_ENTRY+0x36a>
// 250: 8d 43 fe                      leal    -0x2(%rbx), %eax
// 253: 49 8b 2c c4                   movq    (%r12,%rax,8), %rbp
// 257: 48 8b 45 00                   movq    (%rbp), %rax
// 25b: 48 85 c0                      testq   %rax, %rax
// 25e: 7f 22                         jg      0x282 <_JIT_ENTRY+0x282>
// 260: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000262:  R_X86_64_64  .rodata.str1.1
// 26a: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// 26f: 48 89 ea                      movq    %rbp, %rdx
// 272: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000274:  R_X86_64_64  _Py_NegativeRefcount
// 27c: ff d0                         callq   *%rax
// 27e: 48 8b 45 00                   movq    (%rbp), %rax
// 282: 85 c0                         testl   %eax, %eax
// 284: 78 bd                         js      0x243 <_JIT_ENTRY+0x243>
// 286: 41 ff d6                      callq   *%r14
// 289: 48 ff 4d 00                   decq    (%rbp)
// 28d: 75 b4                         jne     0x243 <_JIT_ENTRY+0x243>
// 28f: 48 89 ef                      movq    %rbp, %rdi
// 292: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000294:  R_X86_64_64  _Py_Dealloc
// 29c: ff d0                         callq   *%rax
// 29e: eb a3                         jmp     0x243 <_JIT_ENTRY+0x243>
// 2a0: 41 83 fd 02                   cmpl    $0x2, %r13d
// 2a4: 41 be 01 00 00 00             movl    $0x1, %r14d
// 2aa: 45 0f 43 f5                   cmovael %r13d, %r14d
// 2ae: 31 ed                         xorl    %ebp, %ebp
// 2b0: eb 1a                         jmp     0x2cc <_JIT_ENTRY+0x2cc>
// 2b2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// 2c0: 48 ff c5                      incq    %rbp
// 2c3: 49 39 ee                      cmpq    %rbp, %r14
// 2c6: 0f 84 38 fe ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 2cc: 4c 8b 2c eb                   movq    (%rbx,%rbp,8), %r13
// 2d0: 49 8b 45 00                   movq    (%r13), %rax
// 2d4: 48 85 c0                      testq   %rax, %rax
// 2d7: 7e 07                         jle     0x2e0 <_JIT_ENTRY+0x2e0>
// 2d9: 85 c0                         testl   %eax, %eax
// 2db: 78 e3                         js      0x2c0 <_JIT_ENTRY+0x2c0>
// 2dd: eb 27                         jmp     0x306 <_JIT_ENTRY+0x306>
// 2df: 90                            nop
// 2e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002e2:  R_X86_64_64  .rodata.str1.1
// 2ea: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 2ef: 4c 89 ea                      movq    %r13, %rdx
// 2f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f4:  R_X86_64_64  _Py_NegativeRefcount
// 2fc: ff d0                         callq   *%rax
// 2fe: 49 8b 45 00                   movq    (%r13), %rax
// 302: 85 c0                         testl   %eax, %eax
// 304: 78 ba                         js      0x2c0 <_JIT_ENTRY+0x2c0>
// 306: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000308:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 310: ff d0                         callq   *%rax
// 312: 49 ff 4d 00                   decq    (%r13)
// 316: 75 a8                         jne     0x2c0 <_JIT_ENTRY+0x2c0>
// 318: 4c 89 ef                      movq    %r13, %rdi
// 31b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031d:  R_X86_64_64  _Py_Dealloc
// 325: ff d0                         callq   *%rax
// 327: eb 97                         jmp     0x2c0 <_JIT_ENTRY+0x2c0>
// 329: 49 89 c4                      movq    %rax, %r12
// 32c: eb 26                         jmp     0x354 <_JIT_ENTRY+0x354>
// 32e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000330:  R_X86_64_64  PyExc_SystemError
// 338: 48 8b 30                      movq    (%rax), %rsi
// 33b: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000033d:  R_X86_64_64  .rodata.str1.1+0x39
// 345: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000347:  R_X86_64_64  _PyErr_SetString
// 34f: 4c 89 f7                      movq    %r14, %rdi
// 352: ff d0                         callq   *%rax
// 354: 49 29 dc                      subq    %rbx, %r12
// 357: 49 83 c4 b8                   addq    $-0x48, %r12
// 35b: 49 c1 ec 03                   shrq    $0x3, %r12
// 35f: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 363: 31 c0                         xorl    %eax, %eax
// 365: e9 45 fd ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 36a: 49 8b 45 00                   movq    (%r13), %rax
// 36e: 48 85 c0                      testq   %rax, %rax
// 371: 7f 22                         jg      0x395 <_JIT_ENTRY+0x395>
// 373: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000375:  R_X86_64_64  .rodata.str1.1
// 37d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000037f:  R_X86_64_64  _Py_NegativeRefcount
// 387: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 38c: 4c 89 ea                      movq    %r13, %rdx
// 38f: ff d0                         callq   *%rax
// 391: 49 8b 45 00                   movq    (%r13), %rax
// 395: 85 c0                         testl   %eax, %eax
// 397: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 39c: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 3a1: 78 21                         js      0x3c4 <_JIT_ENTRY+0x3c4>
// 3a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3ad: ff d0                         callq   *%rax
// 3af: 49 ff 4d 00                   decq    (%r13)
// 3b3: 75 0f                         jne     0x3c4 <_JIT_ENTRY+0x3c4>
// 3b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003b7:  R_X86_64_64  _Py_Dealloc
// 3bf: 4c 89 ef                      movq    %r13, %rdi
// 3c2: ff d0                         callq   *%rax
// 3c4: 48 8b 34 24                   movq    (%rsp), %rsi
// 3c8: 48 85 f6                      testq   %rsi, %rsi
// 3cb: 74 87                         je      0x354 <_JIT_ENTRY+0x354>
// 3cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003cf:  R_X86_64_64  _JIT_OPARG
// 3d7: 0f b7 c8                      movzwl  %ax, %ecx
// 3da: f7 d0                         notl    %eax
// 3dc: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 3e1: 48 98                         cltq
// 3e3: 48 8d 14 00                   leaq    (%rax,%rax), %rdx
// 3e7: 49 89 34 d7                   movq    %rsi, (%r15,%rdx,8)
// 3eb: 48 29 c8                      subq    %rcx, %rax
// 3ee: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 3f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003f4:  R_X86_64_64  _JIT_CONTINUE
// 3fc: 48 89 df                      movq    %rbx, %rdi
// 3ff: 4c 89 f2                      movq    %r14, %rdx
// 402: 48 83 c4 28                   addq    $0x28, %rsp
// 406: 5b                            popq    %rbx
// 407: 41 5c                         popq    %r12
// 409: 41 5d                         popq    %r13
// 40b: 41 5e                         popq    %r14
// 40d: 41 5f                         popq    %r15
// 40f: 5d                            popq    %rbp
// 410: ff e0                         jmpq    *%rax
// 412: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_BUILD_CONST_KEY_MAP_code_body[1043] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd7, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xdf, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4b, 0x8d, 0x1c, 0xcf, 0x48, 0x8b, 0x3b, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x78, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x1c, 0x24, 0x4c, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x44, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x73, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0x9c, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x8b, 0x6c, 0x24, 0x20, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xc7, 0x4d, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x0f, 0x84, 0xb5, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x18, 0x4d, 0x8d, 0x24, 0xcf, 0x4c, 0x89, 0x28, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xb2, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x6c, 0xc7, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4d, 0x08, 0x0f, 0x85, 0x60, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x49, 0x39, 0x4d, 0x10, 0x0f, 0x85, 0x49, 0x01, 0x00, 0x00, 0x48, 0x01, 0xc0, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x8d, 0x7d, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x43, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0d, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x0f, 0x8e, 0x1a, 0x01, 0x00, 0x00, 0x8d, 0x43, 0xfe, 0x49, 0x8b, 0x2c, 0xc4, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xbd, 0x41, 0xff, 0xd6, 0x48, 0xff, 0x4d, 0x00, 0x75, 0xb4, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xa3, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xed, 0xeb, 0x1a, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xee, 0x0f, 0x84, 0x38, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x2c, 0xeb, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x27, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x49, 0x89, 0xc4, 0xeb, 0x26, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x45, 0xfd, 0xff, 0xff, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x34, 0x24, 0x48, 0x85, 0xf6, 0x74, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x8d, 0x14, 0x00, 0x49, 0x89, 0x34, 0xd7, 0x48, 0x29, 0xc8, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_BUILD_CONST_KEY_MAP_code_holes[33] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1a4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x1d0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x200, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0x229, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x239, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x262, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x274, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x294, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2e2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x308, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x31d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x330, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x33d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x347, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x375, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x37f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3b7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3cf, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3f4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_BUILD_CONST_KEY_MAP_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_BUILD_CONST_KEY_MAP_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_BUILD_LIST
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_BUILD_LIST.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d6                   movq    (%r14,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 de                   movq    (%r14,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c ce                   leaq    (%r14,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 c6                      subq    %r8, %r14
// 8b: 49 83 c6 b8                   addq    $-0x48, %r14
// 8f: 49 c1 ee 03                   shrq    $0x3, %r14
// 93: 45 89 70 40                   movl    %r14d, 0x40(%r8)
// 97: 49 8b 00                      movq    (%r8), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 5c 24 10                movq    %r11, 0x10(%rsp)
// c4: 4c 89 14 24                   movq    %r10, (%rsp)
// c8: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cd: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 a8 00 00 00             je      0x1ab <_JIT_ENTRY+0x1ab>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 135: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 13a: 78 21                         js      0x15d <_JIT_ENTRY+0x15d>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 146: ff d0                         callq   *%rax
// 148: 49 ff 0c 24                   decq    (%r12)
// 14c: 75 0f                         jne     0x15d <_JIT_ENTRY+0x15d>
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _Py_Dealloc
// 158: 4c 89 e7                      movq    %r12, %rdi
// 15b: ff d0                         callq   *%rax
// 15d: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 162: 4d 8d 24 c6                   leaq    (%r14,%rax,8), %r12
// 166: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 16b: 48 85 c0                      testq   %rax, %rax
// 16e: 0f 84 33 01 00 00             je      0x2a7 <_JIT_ENTRY+0x2a7>
// 174: 49 89 04 24                   movq    %rax, (%r12)
// 178: 49 8b 47 10                   movq    0x10(%r15), %rax
// 17c: 48 8b 00                      movq    (%rax), %rax
// 17f: 84 c0                         testb   %al, %al
// 181: 0f 84 a2 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _Py_HandlePending
// 191: 4c 89 ff                      movq    %r15, %rdi
// 194: ff d0                         callq   *%rax
// 196: 85 c0                         testl   %eax, %eax
// 198: 0f 84 8b 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 19e: 48 8b 04 24                   movq    (%rsp), %rax
// 1a2: 4d 8d 24 c6                   leaq    (%r14,%rax,8), %r12
// 1a6: e9 fc 00 00 00                jmp     0x2a7 <_JIT_ENTRY+0x2a7>
// 1ab: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1af: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1b5: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1b9: 31 db                         xorl    %ebx, %ebx
// 1bb: eb 0f                         jmp     0x1cc <_JIT_ENTRY+0x1cc>
// 1bd: 0f 1f 00                      nopl    (%rax)
// 1c0: 48 ff c3                      incq    %rbx
// 1c3: 49 39 df                      cmpq    %rbx, %r15
// 1c6: 0f 84 37 ff ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 1cc: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1d1: 49 8b 45 00                   movq    (%r13), %rax
// 1d5: 48 85 c0                      testq   %rax, %rax
// 1d8: 7e 06                         jle     0x1e0 <_JIT_ENTRY+0x1e0>
// 1da: 85 c0                         testl   %eax, %eax
// 1dc: 78 e2                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 1de: eb 26                         jmp     0x206 <_JIT_ENTRY+0x206>
// 1e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e2:  R_X86_64_64  .rodata.str1.1
// 1ea: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ef: 4c 89 ea                      movq    %r13, %rdx
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _Py_NegativeRefcount
// 1fc: ff d0                         callq   *%rax
// 1fe: 49 8b 45 00                   movq    (%r13), %rax
// 202: 85 c0                         testl   %eax, %eax
// 204: 78 ba                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 210: ff d0                         callq   *%rax
// 212: 49 ff 4d 00                   decq    (%r13)
// 216: 75 a8                         jne     0x1c0 <_JIT_ENTRY+0x1c0>
// 218: 4c 89 ef                      movq    %r13, %rdi
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_Dealloc
// 225: ff d0                         callq   *%rax
// 227: eb 97                         jmp     0x1c0 <_JIT_ENTRY+0x1c0>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _JIT_OPARG
// 233: 0f b7 f0                      movzwl  %ax, %esi
// 236: f7 d0                         notl    %eax
// 238: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 23d: 48 98                         cltq
// 23f: 48 29 f0                      subq    %rsi, %rax
// 242: 4d 8d 24 c6                   leaq    (%r14,%rax,8), %r12
// 246: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000248:  R_X86_64_64  _PyList_FromArraySteal
// 250: 4c 89 e7                      movq    %r12, %rdi
// 253: ff d0                         callq   *%rax
// 255: 48 85 c0                      testq   %rax, %rax
// 258: 74 4d                         je      0x2a7 <_JIT_ENTRY+0x2a7>
// 25a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000025c:  R_X86_64_64  _JIT_OPARG
// 264: 0f b7 d1                      movzwl  %cx, %edx
// 267: 0f b7 c9                      movzwl  %cx, %ecx
// 26a: be 01 00 00 00                movl    $0x1, %esi
// 26f: 29 ce                         subl    %ecx, %esi
// 271: f7 d1                         notl    %ecx
// 273: 48 63 c9                      movslq  %ecx, %rcx
// 276: 48 63 f6                      movslq  %esi, %rsi
// 279: 48 01 ce                      addq    %rcx, %rsi
// 27c: 48 29 d1                      subq    %rdx, %rcx
// 27f: 49 89 04 ce                   movq    %rax, (%r14,%rcx,8)
// 283: 49 8d 34 f6                   leaq    (%r14,%rsi,8), %rsi
// 287: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000289:  R_X86_64_64  _JIT_CONTINUE
// 291: 48 89 df                      movq    %rbx, %rdi
// 294: 4c 89 fa                      movq    %r15, %rdx
// 297: 48 83 c4 28                   addq    $0x28, %rsp
// 29b: 5b                            popq    %rbx
// 29c: 41 5c                         popq    %r12
// 29e: 41 5d                         popq    %r13
// 2a0: 41 5e                         popq    %r14
// 2a2: 41 5f                         popq    %r15
// 2a4: 5d                            popq    %rbp
// 2a5: ff e0                         jmpq    *%rax
// 2a7: 49 29 dc                      subq    %rbx, %r12
// 2aa: 49 83 c4 b8                   addq    $-0x48, %r12
// 2ae: 49 c1 ec 03                   shrq    $0x3, %r12
// 2b2: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 2b6: 31 c0                         xorl    %eax, %eax
// 2b8: e9 f3 fd ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 2bd: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_BUILD_LIST_code_body[702] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd6, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xde, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xce, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc6, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x70, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xa8, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x4d, 0x8d, 0x24, 0xc6, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x33, 0x01, 0x00, 0x00, 0x49, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xa2, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x8b, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x24, 0xc6, 0xe9, 0xfc, 0x00, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xdb, 0xeb, 0x0f, 0x0f, 0x1f, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0x37, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x29, 0xf0, 0x4d, 0x8d, 0x24, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x4d, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x0f, 0xb7, 0xc9, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x29, 0xce, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x48, 0x63, 0xf6, 0x48, 0x01, 0xce, 0x48, 0x29, 0xd1, 0x49, 0x89, 0x04, 0xce, 0x49, 0x8d, 0x34, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0xf3, 0xfd, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_BUILD_LIST_code_holes[18] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x248, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyList_FromArraySteal, 0x0},
    {0x25c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x289, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_BUILD_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_BUILD_LIST_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_BUILD_MAP
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_BUILD_MAP.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d6                   movq    (%r14,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 de                   movq    (%r14,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c ce                   leaq    (%r14,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 c6                      subq    %r8, %r14
// 8b: 49 83 c6 b8                   addq    $-0x48, %r14
// 8f: 49 c1 ee 03                   shrq    $0x3, %r14
// 93: 45 89 70 40                   movl    %r14d, 0x40(%r8)
// 97: 49 8b 00                      movq    (%r8), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 1c 24                   movq    %r11, (%rsp)
// c3: 4c 89 54 24 18                movq    %r10, 0x18(%rsp)
// c8: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// cd: 4c 89 44 24 10                movq    %r8, 0x10(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 a8 00 00 00             je      0x1ab <_JIT_ENTRY+0x1ab>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 135: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 13a: 78 21                         js      0x15d <_JIT_ENTRY+0x15d>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 146: ff d0                         callq   *%rax
// 148: 49 ff 0c 24                   decq    (%r12)
// 14c: 75 0f                         jne     0x15d <_JIT_ENTRY+0x15d>
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _Py_Dealloc
// 158: 4c 89 e7                      movq    %r12, %rdi
// 15b: ff d0                         callq   *%rax
// 15d: 48 8b 04 24                   movq    (%rsp), %rax
// 161: 4d 8d 24 c6                   leaq    (%r14,%rax,8), %r12
// 165: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 16a: 48 85 c0                      testq   %rax, %rax
// 16d: 0f 84 fc 01 00 00             je      0x36f <_JIT_ENTRY+0x36f>
// 173: 49 89 04 24                   movq    %rax, (%r12)
// 177: 49 8b 47 10                   movq    0x10(%r15), %rax
// 17b: 48 8b 00                      movq    (%rax), %rax
// 17e: 84 c0                         testb   %al, %al
// 180: 0f 84 a3 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 186: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000188:  R_X86_64_64  _Py_HandlePending
// 190: 4c 89 ff                      movq    %r15, %rdi
// 193: ff d0                         callq   *%rax
// 195: 85 c0                         testl   %eax, %eax
// 197: 0f 84 8c 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 19d: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 1a2: 4d 8d 24 c6                   leaq    (%r14,%rax,8), %r12
// 1a6: e9 c4 01 00 00                jmp     0x36f <_JIT_ENTRY+0x36f>
// 1ab: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1af: bb 01 00 00 00                movl    $0x1, %ebx
// 1b4: 41 0f 43 dd                   cmovael %r13d, %ebx
// 1b8: 45 31 ff                      xorl    %r15d, %r15d
// 1bb: eb 0f                         jmp     0x1cc <_JIT_ENTRY+0x1cc>
// 1bd: 0f 1f 00                      nopl    (%rax)
// 1c0: 49 ff c7                      incq    %r15
// 1c3: 4c 39 fb                      cmpq    %r15, %rbx
// 1c6: 0f 84 37 ff ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 1cc: 4e 8b 6c fd 00                movq    (%rbp,%r15,8), %r13
// 1d1: 49 8b 45 00                   movq    (%r13), %rax
// 1d5: 48 85 c0                      testq   %rax, %rax
// 1d8: 7e 06                         jle     0x1e0 <_JIT_ENTRY+0x1e0>
// 1da: 85 c0                         testl   %eax, %eax
// 1dc: 78 e2                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 1de: eb 26                         jmp     0x206 <_JIT_ENTRY+0x206>
// 1e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e2:  R_X86_64_64  .rodata.str1.1
// 1ea: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ef: 4c 89 ea                      movq    %r13, %rdx
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _Py_NegativeRefcount
// 1fc: ff d0                         callq   *%rax
// 1fe: 49 8b 45 00                   movq    (%r13), %rax
// 202: 85 c0                         testl   %eax, %eax
// 204: 78 ba                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 210: ff d0                         callq   *%rax
// 212: 49 ff 4d 00                   decq    (%r13)
// 216: 75 a8                         jne     0x1c0 <_JIT_ENTRY+0x1c0>
// 218: 4c 89 ef                      movq    %r13, %rdi
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_Dealloc
// 225: ff d0                         callq   *%rax
// 227: eb 97                         jmp     0x1c0 <_JIT_ENTRY+0x1c0>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _JIT_OPARG
// 233: 0f b7 d8                      movzwl  %ax, %ebx
// 236: 89 d9                         movl    %ebx, %ecx
// 238: f7 d1                         notl    %ecx
// 23a: 48 63 c9                      movslq  %ecx, %rcx
// 23d: 89 da                         movl    %ebx, %edx
// 23f: f7 da                         negl    %edx
// 241: 01 d2                         addl    %edx, %edx
// 243: 48 63 d2                      movslq  %edx, %rdx
// 246: 48 01 ca                      addq    %rcx, %rdx
// 249: 4d 8d 24 d6                   leaq    (%r14,%rdx,8), %r12
// 24d: 49 8d 14 d6                   leaq    (%r14,%rdx,8), %rdx
// 251: 48 83 c2 08                   addq    $0x8, %rdx
// 255: 44 0f b7 c0                   movzwl  %ax, %r8d
// 259: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025b:  R_X86_64_64  _PyDict_FromItems
// 263: be 02 00 00 00                movl    $0x2, %esi
// 268: b9 02 00 00 00                movl    $0x2, %ecx
// 26d: 4c 89 e7                      movq    %r12, %rdi
// 270: ff d0                         callq   *%rax
// 272: 48 89 04 24                   movq    %rax, (%rsp)
// 276: 01 db                         addl    %ebx, %ebx
// 278: 85 db                         testl   %ebx, %ebx
// 27a: 0f 8e 88 00 00 00             jle     0x308 <_JIT_ENTRY+0x308>
// 280: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000282:  R_X86_64_64  _JIT_OPARG
// 28a: 0f b7 c0                      movzwl  %ax, %eax
// 28d: 48 8d 1c 00                   leaq    (%rax,%rax), %rbx
// 291: 48 ff c3                      incq    %rbx
// 294: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000296:  R_X86_64_64  .rodata.str1.1
// 29e: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 00000000000002a0:  R_X86_64_64  _Py_NegativeRefcount
// 2a8: eb 0f                         jmp     0x2b9 <_JIT_ENTRY+0x2b9>
// 2aa: 66 0f 1f 44 00 00             nopw    (%rax,%rax)
// 2b0: 48 ff cb                      decq    %rbx
// 2b3: 48 83 fb 01                   cmpq    $0x1, %rbx
// 2b7: 7e 4f                         jle     0x308 <_JIT_ENTRY+0x308>
// 2b9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// 2bc: 4d 8b 2c c4                   movq    (%r12,%rax,8), %r13
// 2c0: 49 8b 45 00                   movq    (%r13), %rax
// 2c4: 48 85 c0                      testq   %rax, %rax
// 2c7: 7e 06                         jle     0x2cf <_JIT_ENTRY+0x2cf>
// 2c9: 85 c0                         testl   %eax, %eax
// 2cb: 78 e3                         js      0x2b0 <_JIT_ENTRY+0x2b0>
// 2cd: eb 16                         jmp     0x2e5 <_JIT_ENTRY+0x2e5>
// 2cf: 48 89 ef                      movq    %rbp, %rdi
// 2d2: be 7b 05 00 00                movl    $0x57b, %esi            # imm = 0x57B
// 2d7: 4c 89 ea                      movq    %r13, %rdx
// 2da: 41 ff d7                      callq   *%r15
// 2dd: 49 8b 45 00                   movq    (%r13), %rax
// 2e1: 85 c0                         testl   %eax, %eax
// 2e3: 78 cb                         js      0x2b0 <_JIT_ENTRY+0x2b0>
// 2e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2ef: ff d0                         callq   *%rax
// 2f1: 49 ff 4d 00                   decq    (%r13)
// 2f5: 75 b9                         jne     0x2b0 <_JIT_ENTRY+0x2b0>
// 2f7: 4c 89 ef                      movq    %r13, %rdi
// 2fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fc:  R_X86_64_64  _Py_Dealloc
// 304: ff d0                         callq   *%rax
// 306: eb a8                         jmp     0x2b0 <_JIT_ENTRY+0x2b0>
// 308: 48 8b 34 24                   movq    (%rsp), %rsi
// 30c: 48 85 f6                      testq   %rsi, %rsi
// 30f: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 314: 74 59                         je      0x36f <_JIT_ENTRY+0x36f>
// 316: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000318:  R_X86_64_64  _JIT_OPARG
// 320: 0f b7 c0                      movzwl  %ax, %eax
// 323: 89 c1                         movl    %eax, %ecx
// 325: f7 d1                         notl    %ecx
// 327: 48 63 c9                      movslq  %ecx, %rcx
// 32a: 89 c2                         movl    %eax, %edx
// 32c: f7 da                         negl    %edx
// 32e: 01 d2                         addl    %edx, %edx
// 330: 48 63 d2                      movslq  %edx, %rdx
// 333: 48 01 ca                      addq    %rcx, %rdx
// 336: 49 89 34 d6                   movq    %rsi, (%r14,%rdx,8)
// 33a: 01 c0                         addl    %eax, %eax
// 33c: ba 01 00 00 00                movl    $0x1, %edx
// 341: 29 c2                         subl    %eax, %edx
// 343: 48 63 c2                      movslq  %edx, %rax
// 346: 48 01 c8                      addq    %rcx, %rax
// 349: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 34d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000034f:  R_X86_64_64  _JIT_CONTINUE
// 357: 48 89 df                      movq    %rbx, %rdi
// 35a: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 35f: 48 83 c4 28                   addq    $0x28, %rsp
// 363: 5b                            popq    %rbx
// 364: 41 5c                         popq    %r12
// 366: 41 5d                         popq    %r13
// 368: 41 5e                         popq    %r14
// 36a: 41 5f                         popq    %r15
// 36c: 5d                            popq    %rbp
// 36d: ff e0                         jmpq    *%rax
// 36f: 49 29 dc                      subq    %rbx, %r12
// 372: 49 83 c4 b8                   addq    $-0x48, %r12
// 376: 49 c1 ec 03                   shrq    $0x3, %r12
// 37a: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 37e: 31 c0                         xorl    %eax, %eax
// 380: e9 2b fd ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 385: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_BUILD_MAP_code_body[902] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd6, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xde, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xce, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc6, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x70, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x1c, 0x24, 0x4c, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x44, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xa8, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x24, 0xc6, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xfc, 0x01, 0x00, 0x00, 0x49, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xa3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x8c, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x4d, 0x8d, 0x24, 0xc6, 0xe9, 0xc4, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xdd, 0x45, 0x31, 0xff, 0xeb, 0x0f, 0x0f, 0x1f, 0x00, 0x49, 0xff, 0xc7, 0x4c, 0x39, 0xfb, 0x0f, 0x84, 0x37, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xfd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x89, 0xd9, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x89, 0xda, 0xf7, 0xda, 0x01, 0xd2, 0x48, 0x63, 0xd2, 0x48, 0x01, 0xca, 0x4d, 0x8d, 0x24, 0xd6, 0x49, 0x8d, 0x14, 0xd6, 0x48, 0x83, 0xc2, 0x08, 0x44, 0x0f, 0xb7, 0xc0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x00, 0x00, 0x00, 0xb9, 0x02, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x01, 0xdb, 0x85, 0xdb, 0x0f, 0x8e, 0x88, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8d, 0x1c, 0x00, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0f, 0x66, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x4f, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x2c, 0xc4, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x16, 0x48, 0x89, 0xef, 0xbe, 0x7b, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xcb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xb9, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xa8, 0x48, 0x8b, 0x34, 0x24, 0x48, 0x85, 0xf6, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x74, 0x59, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x89, 0xc1, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x89, 0xc2, 0xf7, 0xda, 0x01, 0xd2, 0x48, 0x63, 0xd2, 0x48, 0x01, 0xca, 0x49, 0x89, 0x34, 0xd6, 0x01, 0xc0, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc2, 0x48, 0x63, 0xc2, 0x48, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x2b, 0xfd, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_BUILD_MAP_code_holes[23] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x25b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0x282, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x296, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2e7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2fc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x318, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x34f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_BUILD_MAP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_BUILD_MAP_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_BUILD_SET
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_BUILD_SET.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d6                   movq    (%r14,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 de                   movq    (%r14,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4b 8d 1c ce                   leaq    (%r14,%r9,8), %rbx
// 79: 48 8b 3b                      movq    (%rbx), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 4d 29 c6                      subq    %r8, %r14
// 8a: 49 83 c6 b8                   addq    $-0x48, %r14
// 8e: 49 c1 ee 03                   shrq    $0x3, %r14
// 92: 45 89 70 40                   movl    %r14d, 0x40(%r8)
// 96: 49 8b 00                      movq    (%r8), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 1c 24                   movq    %r11, (%rsp)
// c2: 4c 89 54 24 18                movq    %r10, 0x18(%rsp)
// c7: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// cc: 4c 89 44 24 10                movq    %r8, 0x10(%rsp)
// d1: 48 85 c0                      testq   %rax, %rax
// d4: 40 0f 94 c5                   sete    %bpl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 73 08                   leaq    0x8(%rbx), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 99 01 00 00             je      0x29d <_JIT_ENTRY+0x29d>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 136: 4c 8b 6c 24 20                movq    0x20(%rsp), %r13
// 13b: 78 21                         js      0x15e <_JIT_ENTRY+0x15e>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 147: ff d0                         callq   *%rax
// 149: 49 ff 0c 24                   decq    (%r12)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_Dealloc
// 159: 4c 89 e7                      movq    %r12, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 04 24                   movq    (%rsp), %rax
// 162: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 166: 4d 85 ed                      testq   %r13, %r13
// 169: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 16e: 0f 84 a5 01 00 00             je      0x319 <_JIT_ENTRY+0x319>
// 174: 48 8b 4c 24 18                movq    0x18(%rsp), %rcx
// 179: 4d 8d 24 ce                   leaq    (%r14,%rcx,8), %r12
// 17d: 4c 89 28                      movq    %r13, (%rax)
// 180: 49 8b 47 10                   movq    0x10(%r15), %rax
// 184: 48 8b 00                      movq    (%rax), %rax
// 187: 84 c0                         testb   %al, %al
// 189: 74 17                         je      0x1a2 <_JIT_ENTRY+0x1a2>
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_HandlePending
// 195: 4c 89 ff                      movq    %r15, %rdi
// 198: ff d0                         callq   *%rax
// 19a: 85 c0                         testl   %eax, %eax
// 19c: 0f 85 7a 01 00 00             jne     0x31c <_JIT_ENTRY+0x31c>
// 1a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a4:  R_X86_64_64  PySet_New
// 1ac: 31 ff                         xorl    %edi, %edi
// 1ae: ff d0                         callq   *%rax
// 1b0: 48 85 c0                      testq   %rax, %rax
// 1b3: 0f 84 63 01 00 00             je      0x31c <_JIT_ENTRY+0x31c>
// 1b9: 49 89 c5                      movq    %rax, %r13
// 1bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001be:  R_X86_64_64  _JIT_OPARG
// 1c6: 66 85 c0                      testw   %ax, %ax
// 1c9: 0f 84 c7 01 00 00             je      0x396 <_JIT_ENTRY+0x396>
// 1cf: 4c 89 2c 24                   movq    %r13, (%rsp)
// 1d3: 0f b7 c8                      movzwl  %ax, %ecx
// 1d6: f7 d0                         notl    %eax
// 1d8: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1dd: 48 98                         cltq
// 1df: 48 29 c8                      subq    %rcx, %rax
// 1e2: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e4:  R_X86_64_64  _JIT_OPARG
// 1ec: 0f b7 c9                      movzwl  %cx, %ecx
// 1ef: 83 f9 02                      cmpl    $0x2, %ecx
// 1f2: bb 01 00 00 00                movl    $0x1, %ebx
// 1f7: 0f 43 d9                      cmovael %ecx, %ebx
// 1fa: 4d 8d 24 c6                   leaq    (%r14,%rax,8), %r12
// 1fe: 45 31 ff                      xorl    %r15d, %r15d
// 201: 31 ed                         xorl    %ebp, %ebp
// 203: eb 17                         jmp     0x21c <_JIT_ENTRY+0x21c>
// 205: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// 210: 49 ff c7                      incq    %r15
// 213: 4c 39 fb                      cmpq    %r15, %rbx
// 216: 0f 84 16 01 00 00             je      0x332 <_JIT_ENTRY+0x332>
// 21c: 4f 8b 2c fc                   movq    (%r12,%r15,8), %r13
// 220: 85 ed                         testl   %ebp, %ebp
// 222: 74 0f                         je      0x233 <_JIT_ENTRY+0x233>
// 224: 49 8b 45 00                   movq    (%r13), %rax
// 228: 48 85 c0                      testq   %rax, %rax
// 22b: 7e 24                         jle     0x251 <_JIT_ENTRY+0x251>
// 22d: 85 c0                         testl   %eax, %eax
// 22f: 78 df                         js      0x210 <_JIT_ENTRY+0x210>
// 231: eb 44                         jmp     0x277 <_JIT_ENTRY+0x277>
// 233: 48 8b 3c 24                   movq    (%rsp), %rdi
// 237: 4c 89 ee                      movq    %r13, %rsi
// 23a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023c:  R_X86_64_64  PySet_Add
// 244: ff d0                         callq   *%rax
// 246: 89 c5                         movl    %eax, %ebp
// 248: 49 8b 45 00                   movq    (%r13), %rax
// 24c: 48 85 c0                      testq   %rax, %rax
// 24f: 7f dc                         jg      0x22d <_JIT_ENTRY+0x22d>
// 251: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000253:  R_X86_64_64  .rodata.str1.1
// 25b: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// 260: 4c 89 ea                      movq    %r13, %rdx
// 263: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000265:  R_X86_64_64  _Py_NegativeRefcount
// 26d: ff d0                         callq   *%rax
// 26f: 49 8b 45 00                   movq    (%r13), %rax
// 273: 85 c0                         testl   %eax, %eax
// 275: 78 99                         js      0x210 <_JIT_ENTRY+0x210>
// 277: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000279:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 281: ff d0                         callq   *%rax
// 283: 49 ff 4d 00                   decq    (%r13)
// 287: 75 87                         jne     0x210 <_JIT_ENTRY+0x210>
// 289: 4c 89 ef                      movq    %r13, %rdi
// 28c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028e:  R_X86_64_64  _Py_Dealloc
// 296: ff d0                         callq   *%rax
// 298: e9 73 ff ff ff                jmp     0x210 <_JIT_ENTRY+0x210>
// 29d: 41 83 fd 02                   cmpl    $0x2, %r13d
// 2a1: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 2a7: 45 0f 43 fd                   cmovael %r13d, %r15d
// 2ab: 31 ed                         xorl    %ebp, %ebp
// 2ad: eb 0d                         jmp     0x2bc <_JIT_ENTRY+0x2bc>
// 2af: 90                            nop
// 2b0: 48 ff c5                      incq    %rbp
// 2b3: 49 39 ef                      cmpq    %rbp, %r15
// 2b6: 0f 84 48 fe ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 2bc: 4c 8b 2c eb                   movq    (%rbx,%rbp,8), %r13
// 2c0: 49 8b 45 00                   movq    (%r13), %rax
// 2c4: 48 85 c0                      testq   %rax, %rax
// 2c7: 7e 07                         jle     0x2d0 <_JIT_ENTRY+0x2d0>
// 2c9: 85 c0                         testl   %eax, %eax
// 2cb: 78 e3                         js      0x2b0 <_JIT_ENTRY+0x2b0>
// 2cd: eb 27                         jmp     0x2f6 <_JIT_ENTRY+0x2f6>
// 2cf: 90                            nop
// 2d0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002d2:  R_X86_64_64  .rodata.str1.1
// 2da: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 2df: 4c 89 ea                      movq    %r13, %rdx
// 2e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e4:  R_X86_64_64  _Py_NegativeRefcount
// 2ec: ff d0                         callq   *%rax
// 2ee: 49 8b 45 00                   movq    (%r13), %rax
// 2f2: 85 c0                         testl   %eax, %eax
// 2f4: 78 ba                         js      0x2b0 <_JIT_ENTRY+0x2b0>
// 2f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 300: ff d0                         callq   *%rax
// 302: 49 ff 4d 00                   decq    (%r13)
// 306: 75 a8                         jne     0x2b0 <_JIT_ENTRY+0x2b0>
// 308: 4c 89 ef                      movq    %r13, %rdi
// 30b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030d:  R_X86_64_64  _Py_Dealloc
// 315: ff d0                         callq   *%rax
// 317: eb 97                         jmp     0x2b0 <_JIT_ENTRY+0x2b0>
// 319: 49 89 c4                      movq    %rax, %r12
// 31c: 49 29 dc                      subq    %rbx, %r12
// 31f: 49 83 c4 b8                   addq    $-0x48, %r12
// 323: 49 c1 ec 03                   shrq    $0x3, %r12
// 327: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 32b: 31 c0                         xorl    %eax, %eax
// 32d: e9 7d fd ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 332: 85 ed                         testl   %ebp, %ebp
// 334: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 339: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 33e: 4c 8b 2c 24                   movq    (%rsp), %r13
// 342: 74 52                         je      0x396 <_JIT_ENTRY+0x396>
// 344: 49 8b 45 00                   movq    (%r13), %rax
// 348: 48 85 c0                      testq   %rax, %rax
// 34b: 7f 22                         jg      0x36f <_JIT_ENTRY+0x36f>
// 34d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000034f:  R_X86_64_64  .rodata.str1.1
// 357: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 35c: 4c 89 ea                      movq    %r13, %rdx
// 35f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000361:  R_X86_64_64  _Py_NegativeRefcount
// 369: ff d0                         callq   *%rax
// 36b: 49 8b 45 00                   movq    (%r13), %rax
// 36f: 85 c0                         testl   %eax, %eax
// 371: 78 a9                         js      0x31c <_JIT_ENTRY+0x31c>
// 373: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000375:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 37d: ff d0                         callq   *%rax
// 37f: 49 ff 4d 00                   decq    (%r13)
// 383: 75 97                         jne     0x31c <_JIT_ENTRY+0x31c>
// 385: 4c 89 ef                      movq    %r13, %rdi
// 388: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000038a:  R_X86_64_64  _Py_Dealloc
// 392: ff d0                         callq   *%rax
// 394: eb 86                         jmp     0x31c <_JIT_ENTRY+0x31c>
// 396: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000398:  R_X86_64_64  _JIT_OPARG
// 3a0: 0f b7 c8                      movzwl  %ax, %ecx
// 3a3: 0f b7 c0                      movzwl  %ax, %eax
// 3a6: ba 01 00 00 00                movl    $0x1, %edx
// 3ab: 29 c2                         subl    %eax, %edx
// 3ad: f7 d0                         notl    %eax
// 3af: 48 98                         cltq
// 3b1: 48 63 d2                      movslq  %edx, %rdx
// 3b4: 48 01 c2                      addq    %rax, %rdx
// 3b7: 48 29 c8                      subq    %rcx, %rax
// 3ba: 4d 89 2c c6                   movq    %r13, (%r14,%rax,8)
// 3be: 49 8d 34 d6                   leaq    (%r14,%rdx,8), %rsi
// 3c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003c4:  R_X86_64_64  _JIT_CONTINUE
// 3cc: 48 89 df                      movq    %rbx, %rdi
// 3cf: 4c 89 fa                      movq    %r15, %rdx
// 3d2: 48 83 c4 28                   addq    $0x28, %rsp
// 3d6: 5b                            popq    %rbx
// 3d7: 41 5c                         popq    %r12
// 3d9: 41 5d                         popq    %r13
// 3db: 41 5e                         popq    %r14
// 3dd: 41 5f                         popq    %r15
// 3df: 5d                            popq    %rbp
// 3e0: ff e0                         jmpq    *%rax
// 3e2: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_BUILD_SET_code_body[995] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd6, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xde, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4b, 0x8d, 0x1c, 0xce, 0x48, 0x8b, 0x3b, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc6, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x70, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x1c, 0x24, 0x4c, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x44, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x73, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0x99, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x8b, 0x6c, 0x24, 0x20, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xc6, 0x4d, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x0f, 0x84, 0xa5, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x18, 0x4d, 0x8d, 0x24, 0xce, 0x4c, 0x89, 0x28, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x7a, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x63, 0x01, 0x00, 0x00, 0x49, 0x89, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0xc7, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x2c, 0x24, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x29, 0xc8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x83, 0xf9, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x43, 0xd9, 0x4d, 0x8d, 0x24, 0xc6, 0x45, 0x31, 0xff, 0x31, 0xed, 0xeb, 0x17, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc7, 0x4c, 0x39, 0xfb, 0x0f, 0x84, 0x16, 0x01, 0x00, 0x00, 0x4f, 0x8b, 0x2c, 0xfc, 0x85, 0xed, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x24, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x44, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xdc, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x99, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x87, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x73, 0xff, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xef, 0x0f, 0x84, 0x48, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x2c, 0xeb, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x27, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x49, 0x89, 0xc4, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x7d, 0xfd, 0xff, 0xff, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x8b, 0x2c, 0x24, 0x74, 0x52, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xa9, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x97, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc2, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x63, 0xd2, 0x48, 0x01, 0xc2, 0x48, 0x29, 0xc8, 0x4d, 0x89, 0x2c, 0xc6, 0x49, 0x8d, 0x34, 0xd6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_BUILD_SET_code_holes[28] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1a4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x23c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x265, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x279, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x28e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2d2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2f8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x30d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x34f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x361, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x375, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x38a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x398, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3c4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_BUILD_SET_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_BUILD_SET_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_BUILD_SLICE
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_BUILD_SLICE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d6                   movq    (%r14,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 de                   movq    (%r14,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4b 8d 1c ce                   leaq    (%r14,%r9,8), %rbx
// 79: 48 8b 3b                      movq    (%rbx), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 4d 29 c6                      subq    %r8, %r14
// 8a: 49 83 c6 b8                   addq    $-0x48, %r14
// 8e: 49 c1 ee 03                   shrq    $0x3, %r14
// 92: 45 89 70 40                   movl    %r14d, 0x40(%r8)
// 96: 49 8b 00                      movq    (%r8), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 1c 24                   movq    %r11, (%rsp)
// c2: 4c 89 54 24 18                movq    %r10, 0x18(%rsp)
// c7: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// cc: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// d1: 48 85 c0                      testq   %rax, %rax
// d4: 40 0f 94 c5                   sete    %bpl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 73 08                   leaq    0x8(%rbx), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 a7 00 00 00             je      0x1ab <_JIT_ENTRY+0x1ab>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 136: 78 21                         js      0x159 <_JIT_ENTRY+0x159>
// 138: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 142: ff d0                         callq   *%rax
// 144: 49 ff 0c 24                   decq    (%r12)
// 148: 75 0f                         jne     0x159 <_JIT_ENTRY+0x159>
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_Dealloc
// 154: 4c 89 e7                      movq    %r12, %rdi
// 157: ff d0                         callq   *%rax
// 159: 48 8b 04 24                   movq    (%rsp), %rax
// 15d: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 161: 48 8b 4c 24 20                movq    0x20(%rsp), %rcx
// 166: 48 85 c9                      testq   %rcx, %rcx
// 169: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 16e: 0f 84 61 02 00 00             je      0x3d5 <_JIT_ENTRY+0x3d5>
// 174: 48 89 08                      movq    %rcx, (%rax)
// 177: 49 8b 47 10                   movq    0x10(%r15), %rax
// 17b: 48 8b 00                      movq    (%rax), %rax
// 17e: 84 c0                         testb   %al, %al
// 180: 0f 84 a3 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 186: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000188:  R_X86_64_64  _Py_HandlePending
// 190: 4c 89 ff                      movq    %r15, %rdi
// 193: ff d0                         callq   *%rax
// 195: 85 c0                         testl   %eax, %eax
// 197: 0f 84 8c 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 19d: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 1a2: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 1a6: e9 2a 02 00 00                jmp     0x3d5 <_JIT_ENTRY+0x3d5>
// 1ab: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1af: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1b5: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1b9: 31 ed                         xorl    %ebp, %ebp
// 1bb: eb 0f                         jmp     0x1cc <_JIT_ENTRY+0x1cc>
// 1bd: 0f 1f 00                      nopl    (%rax)
// 1c0: 48 ff c5                      incq    %rbp
// 1c3: 49 39 ef                      cmpq    %rbp, %r15
// 1c6: 0f 84 38 ff ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 1cc: 4c 8b 2c eb                   movq    (%rbx,%rbp,8), %r13
// 1d0: 49 8b 45 00                   movq    (%r13), %rax
// 1d4: 48 85 c0                      testq   %rax, %rax
// 1d7: 7e 07                         jle     0x1e0 <_JIT_ENTRY+0x1e0>
// 1d9: 85 c0                         testl   %eax, %eax
// 1db: 78 e3                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 1dd: eb 27                         jmp     0x206 <_JIT_ENTRY+0x206>
// 1df: 90                            nop
// 1e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e2:  R_X86_64_64  .rodata.str1.1
// 1ea: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ef: 4c 89 ea                      movq    %r13, %rdx
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _Py_NegativeRefcount
// 1fc: ff d0                         callq   *%rax
// 1fe: 49 8b 45 00                   movq    (%r13), %rax
// 202: 85 c0                         testl   %eax, %eax
// 204: 78 ba                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 210: ff d0                         callq   *%rax
// 212: 49 ff 4d 00                   decq    (%r13)
// 216: 75 a8                         jne     0x1c0 <_JIT_ENTRY+0x1c0>
// 218: 4c 89 ef                      movq    %r13, %rdi
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_Dealloc
// 225: ff d0                         callq   *%rax
// 227: eb 97                         jmp     0x1c0 <_JIT_ENTRY+0x1c0>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _JIT_OPARG
// 233: 66 83 f8 03                   cmpw    $0x3, %ax
// 237: 75 1f                         jne     0x258 <_JIT_ENTRY+0x258>
// 239: 89 c1                         movl    %eax, %ecx
// 23b: f7 d1                         notl    %ecx
// 23d: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 243: 48 63 c9                      movslq  %ecx, %rcx
// 246: 31 d2                         xorl    %edx, %edx
// 248: 66 83 f8 03                   cmpw    $0x3, %ax
// 24c: 0f 94 c2                      sete    %dl
// 24f: 48 29 d1                      subq    %rdx, %rcx
// 252: 49 8b 1c ce                   movq    (%r14,%rcx,8), %rbx
// 256: eb 02                         jmp     0x25a <_JIT_ENTRY+0x25a>
// 258: 31 db                         xorl    %ebx, %ebx
// 25a: 89 c1                         movl    %eax, %ecx
// 25c: f7 d1                         notl    %ecx
// 25e: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 264: 48 63 c9                      movslq  %ecx, %rcx
// 267: 31 d2                         xorl    %edx, %edx
// 269: 66 83 f8 03                   cmpw    $0x3, %ax
// 26d: 0f 94 c2                      sete    %dl
// 270: b8 fe ff ff ff                movl    $0xfffffffe, %eax       # imm = 0xFFFFFFFE
// 275: 29 d0                         subl    %edx, %eax
// 277: f7 d2                         notl    %edx
// 279: 4c 63 fa                      movslq  %edx, %r15
// 27c: 49 01 cf                      addq    %rcx, %r15
// 27f: 4b 8b 2c fe                   movq    (%r14,%r15,8), %rbp
// 283: 4c 63 e0                      movslq  %eax, %r12
// 286: 49 01 cc                      addq    %rcx, %r12
// 289: 4f 8b 2c e6                   movq    (%r14,%r12,8), %r13
// 28d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028f:  R_X86_64_64  PySlice_New
// 297: 4c 89 ef                      movq    %r13, %rdi
// 29a: 48 89 ee                      movq    %rbp, %rsi
// 29d: 48 89 da                      movq    %rbx, %rdx
// 2a0: ff d0                         callq   *%rax
// 2a2: 48 89 04 24                   movq    %rax, (%rsp)
// 2a6: 49 8b 45 00                   movq    (%r13), %rax
// 2aa: 48 85 c0                      testq   %rax, %rax
// 2ad: 7f 22                         jg      0x2d1 <_JIT_ENTRY+0x2d1>
// 2af: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002b1:  R_X86_64_64  .rodata.str1.1
// 2b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bb:  R_X86_64_64  _Py_NegativeRefcount
// 2c3: be 86 0c 00 00                movl    $0xc86, %esi            # imm = 0xC86
// 2c8: 4c 89 ea                      movq    %r13, %rdx
// 2cb: ff d0                         callq   *%rax
// 2cd: 49 8b 45 00                   movq    (%r13), %rax
// 2d1: 85 c0                         testl   %eax, %eax
// 2d3: 78 21                         js      0x2f6 <_JIT_ENTRY+0x2f6>
// 2d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2df: ff d0                         callq   *%rax
// 2e1: 49 ff 4d 00                   decq    (%r13)
// 2e5: 75 0f                         jne     0x2f6 <_JIT_ENTRY+0x2f6>
// 2e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e9:  R_X86_64_64  _Py_Dealloc
// 2f1: 4c 89 ef                      movq    %r13, %rdi
// 2f4: ff d0                         callq   *%rax
// 2f6: 48 8b 45 00                   movq    (%rbp), %rax
// 2fa: 48 85 c0                      testq   %rax, %rax
// 2fd: 7f 22                         jg      0x321 <_JIT_ENTRY+0x321>
// 2ff: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000301:  R_X86_64_64  .rodata.str1.1
// 309: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030b:  R_X86_64_64  _Py_NegativeRefcount
// 313: be 87 0c 00 00                movl    $0xc87, %esi            # imm = 0xC87
// 318: 48 89 ea                      movq    %rbp, %rdx
// 31b: ff d0                         callq   *%rax
// 31d: 48 8b 45 00                   movq    (%rbp), %rax
// 321: 85 c0                         testl   %eax, %eax
// 323: 78 21                         js      0x346 <_JIT_ENTRY+0x346>
// 325: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000327:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 32f: ff d0                         callq   *%rax
// 331: 48 ff 4d 00                   decq    (%rbp)
// 335: 75 0f                         jne     0x346 <_JIT_ENTRY+0x346>
// 337: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000339:  R_X86_64_64  _Py_Dealloc
// 341: 48 89 ef                      movq    %rbp, %rdi
// 344: ff d0                         callq   *%rax
// 346: 48 85 db                      testq   %rbx, %rbx
// 349: 74 4d                         je      0x398 <_JIT_ENTRY+0x398>
// 34b: 48 8b 03                      movq    (%rbx), %rax
// 34e: 48 85 c0                      testq   %rax, %rax
// 351: 7f 21                         jg      0x374 <_JIT_ENTRY+0x374>
// 353: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000355:  R_X86_64_64  .rodata.str1.1+0x39
// 35d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000035f:  R_X86_64_64  _Py_NegativeRefcount
// 367: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 36c: 48 89 da                      movq    %rbx, %rdx
// 36f: ff d0                         callq   *%rax
// 371: 48 8b 03                      movq    (%rbx), %rax
// 374: 85 c0                         testl   %eax, %eax
// 376: 78 20                         js      0x398 <_JIT_ENTRY+0x398>
// 378: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000037a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 382: ff d0                         callq   *%rax
// 384: 48 ff 0b                      decq    (%rbx)
// 387: 75 0f                         jne     0x398 <_JIT_ENTRY+0x398>
// 389: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000038b:  R_X86_64_64  _Py_Dealloc
// 393: 48 89 df                      movq    %rbx, %rdi
// 396: ff d0                         callq   *%rax
// 398: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 39c: 48 8b 0c 24                   movq    (%rsp), %rcx
// 3a0: 48 85 c9                      testq   %rcx, %rcx
// 3a3: 74 2b                         je      0x3d0 <_JIT_ENTRY+0x3d0>
// 3a5: 4b 8d 34 fe                   leaq    (%r14,%r15,8), %rsi
// 3a9: 48 89 08                      movq    %rcx, (%rax)
// 3ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003ae:  R_X86_64_64  _JIT_CONTINUE
// 3b6: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 3bb: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 3c0: 48 83 c4 28                   addq    $0x28, %rsp
// 3c4: 5b                            popq    %rbx
// 3c5: 41 5c                         popq    %r12
// 3c7: 41 5d                         popq    %r13
// 3c9: 41 5e                         popq    %r14
// 3cb: 41 5f                         popq    %r15
// 3cd: 5d                            popq    %rbp
// 3ce: ff e0                         jmpq    *%rax
// 3d0: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 3d5: 48 29 d8                      subq    %rbx, %rax
// 3d8: 48 83 c0 b8                   addq    $-0x48, %rax
// 3dc: 48 c1 e8 03                   shrq    $0x3, %rax
// 3e0: 89 43 40                      movl    %eax, 0x40(%rbx)
// 3e3: 31 c0                         xorl    %eax, %eax
// 3e5: e9 c5 fc ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 3ea: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_BUILD_SLICE_code_body[1003] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd6, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xde, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4b, 0x8d, 0x1c, 0xce, 0x48, 0x8b, 0x3b, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc6, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x70, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x1c, 0x24, 0x4c, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x73, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xa7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x4c, 0x24, 0x20, 0x48, 0x85, 0xc9, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x0f, 0x84, 0x61, 0x02, 0x00, 0x00, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xa3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x8c, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x04, 0xc6, 0xe9, 0x2a, 0x02, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xed, 0xeb, 0x0f, 0x0f, 0x1f, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xef, 0x0f, 0x84, 0x38, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x2c, 0xeb, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x27, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x83, 0xf8, 0x03, 0x75, 0x1f, 0x89, 0xc1, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x31, 0xd2, 0x66, 0x83, 0xf8, 0x03, 0x0f, 0x94, 0xc2, 0x48, 0x29, 0xd1, 0x49, 0x8b, 0x1c, 0xce, 0xeb, 0x02, 0x31, 0xdb, 0x89, 0xc1, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x31, 0xd2, 0x66, 0x83, 0xf8, 0x03, 0x0f, 0x94, 0xc2, 0xb8, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xd0, 0xf7, 0xd2, 0x4c, 0x63, 0xfa, 0x49, 0x01, 0xcf, 0x4b, 0x8b, 0x2c, 0xfe, 0x4c, 0x63, 0xe0, 0x49, 0x01, 0xcc, 0x4f, 0x8b, 0x2c, 0xe6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xee, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x86, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x87, 0x0c, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xdb, 0x74, 0x4d, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x2b, 0x4b, 0x8d, 0x34, 0xfe, 0x48, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xc5, 0xfc, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_BUILD_SLICE_code_holes[29] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x28f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySlice_New, 0x0},
    {0x2b1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2d7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2e9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x301, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x30b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x327, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x339, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x355, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x35f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x37a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x38b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3ae, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_BUILD_SLICE_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_BUILD_SLICE_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_BUILD_STRING
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_BUILD_STRING.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d6                   movq    (%r14,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 de                   movq    (%r14,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c ce                   leaq    (%r14,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 c6                      subq    %r8, %r14
// 8b: 49 83 c6 b8                   addq    $-0x48, %r14
// 8f: 49 c1 ee 03                   shrq    $0x3, %r14
// 93: 45 89 70 40                   movl    %r14d, 0x40(%r8)
// 97: 49 8b 00                      movq    (%r8), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 1c 24                   movq    %r11, (%rsp)
// c3: 4c 89 54 24 18                movq    %r10, 0x18(%rsp)
// c8: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// cd: 4c 89 44 24 10                movq    %r8, 0x10(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 a8 00 00 00             je      0x1ab <_JIT_ENTRY+0x1ab>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 135: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 13a: 78 21                         js      0x15d <_JIT_ENTRY+0x15d>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 146: ff d0                         callq   *%rax
// 148: 49 ff 0c 24                   decq    (%r12)
// 14c: 75 0f                         jne     0x15d <_JIT_ENTRY+0x15d>
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _Py_Dealloc
// 158: 4c 89 e7                      movq    %r12, %rdi
// 15b: ff d0                         callq   *%rax
// 15d: 48 8b 04 24                   movq    (%rsp), %rax
// 161: 4d 8d 24 c6                   leaq    (%r14,%rax,8), %r12
// 165: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 16a: 48 85 c0                      testq   %rax, %rax
// 16d: 0f 84 e1 01 00 00             je      0x354 <_JIT_ENTRY+0x354>
// 173: 49 89 04 24                   movq    %rax, (%r12)
// 177: 49 8b 47 10                   movq    0x10(%r15), %rax
// 17b: 48 8b 00                      movq    (%rax), %rax
// 17e: 84 c0                         testb   %al, %al
// 180: 0f 84 a3 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 186: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000188:  R_X86_64_64  _Py_HandlePending
// 190: 4c 89 ff                      movq    %r15, %rdi
// 193: ff d0                         callq   *%rax
// 195: 85 c0                         testl   %eax, %eax
// 197: 0f 84 8c 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 19d: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 1a2: 4d 8d 24 c6                   leaq    (%r14,%rax,8), %r12
// 1a6: e9 a9 01 00 00                jmp     0x354 <_JIT_ENTRY+0x354>
// 1ab: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1af: bb 01 00 00 00                movl    $0x1, %ebx
// 1b4: 41 0f 43 dd                   cmovael %r13d, %ebx
// 1b8: 45 31 ff                      xorl    %r15d, %r15d
// 1bb: eb 0f                         jmp     0x1cc <_JIT_ENTRY+0x1cc>
// 1bd: 0f 1f 00                      nopl    (%rax)
// 1c0: 49 ff c7                      incq    %r15
// 1c3: 4c 39 fb                      cmpq    %r15, %rbx
// 1c6: 0f 84 37 ff ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 1cc: 4e 8b 6c fd 00                movq    (%rbp,%r15,8), %r13
// 1d1: 49 8b 45 00                   movq    (%r13), %rax
// 1d5: 48 85 c0                      testq   %rax, %rax
// 1d8: 7e 06                         jle     0x1e0 <_JIT_ENTRY+0x1e0>
// 1da: 85 c0                         testl   %eax, %eax
// 1dc: 78 e2                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 1de: eb 26                         jmp     0x206 <_JIT_ENTRY+0x206>
// 1e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e2:  R_X86_64_64  .rodata.str1.1
// 1ea: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ef: 4c 89 ea                      movq    %r13, %rdx
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _Py_NegativeRefcount
// 1fc: ff d0                         callq   *%rax
// 1fe: 49 8b 45 00                   movq    (%r13), %rax
// 202: 85 c0                         testl   %eax, %eax
// 204: 78 ba                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 210: ff d0                         callq   *%rax
// 212: 49 ff 4d 00                   decq    (%r13)
// 216: 75 a8                         jne     0x1c0 <_JIT_ENTRY+0x1c0>
// 218: 4c 89 ef                      movq    %r13, %rdi
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_Dealloc
// 225: ff d0                         callq   *%rax
// 227: eb 97                         jmp     0x1c0 <_JIT_ENTRY+0x1c0>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _JIT_OPARG
// 233: 0f b7 d8                      movzwl  %ax, %ebx
// 236: 89 d9                         movl    %ebx, %ecx
// 238: f7 d1                         notl    %ecx
// 23a: 48 63 c9                      movslq  %ecx, %rcx
// 23d: 0f b7 d0                      movzwl  %ax, %edx
// 240: 48 29 d1                      subq    %rdx, %rcx
// 243: 4d 8d 24 ce                   leaq    (%r14,%rcx,8), %r12
// 247: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000249:  R_X86_64_64  _PyUnicode_JoinArray
// 251: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000253:  R_X86_64_64  _PyRuntime
// 25b: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 262: 4c 89 e6                      movq    %r12, %rsi
// 265: ff d0                         callq   *%rax
// 267: 48 89 04 24                   movq    %rax, (%rsp)
// 26b: 85 db                         testl   %ebx, %ebx
// 26d: 0f 8e 85 00 00 00             jle     0x2f8 <_JIT_ENTRY+0x2f8>
// 273: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000275:  R_X86_64_64  _JIT_OPARG
// 27d: 44 0f b7 f8                   movzwl  %ax, %r15d
// 281: 49 ff c7                      incq    %r15
// 284: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000286:  R_X86_64_64  .rodata.str1.1
// 28e: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000290:  R_X86_64_64  _Py_NegativeRefcount
// 298: eb 0f                         jmp     0x2a9 <_JIT_ENTRY+0x2a9>
// 29a: 66 0f 1f 44 00 00             nopw    (%rax,%rax)
// 2a0: 49 ff cf                      decq    %r15
// 2a3: 49 83 ff 01                   cmpq    $0x1, %r15
// 2a7: 7e 4f                         jle     0x2f8 <_JIT_ENTRY+0x2f8>
// 2a9: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// 2ad: 4d 8b 2c c4                   movq    (%r12,%rax,8), %r13
// 2b1: 49 8b 45 00                   movq    (%r13), %rax
// 2b5: 48 85 c0                      testq   %rax, %rax
// 2b8: 7e 06                         jle     0x2c0 <_JIT_ENTRY+0x2c0>
// 2ba: 85 c0                         testl   %eax, %eax
// 2bc: 78 e2                         js      0x2a0 <_JIT_ENTRY+0x2a0>
// 2be: eb 15                         jmp     0x2d5 <_JIT_ENTRY+0x2d5>
// 2c0: 48 89 ef                      movq    %rbp, %rdi
// 2c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// 2c8: 4c 89 ea                      movq    %r13, %rdx
// 2cb: ff d3                         callq   *%rbx
// 2cd: 49 8b 45 00                   movq    (%r13), %rax
// 2d1: 85 c0                         testl   %eax, %eax
// 2d3: 78 cb                         js      0x2a0 <_JIT_ENTRY+0x2a0>
// 2d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2df: ff d0                         callq   *%rax
// 2e1: 49 ff 4d 00                   decq    (%r13)
// 2e5: 75 b9                         jne     0x2a0 <_JIT_ENTRY+0x2a0>
// 2e7: 4c 89 ef                      movq    %r13, %rdi
// 2ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ec:  R_X86_64_64  _Py_Dealloc
// 2f4: ff d0                         callq   *%rax
// 2f6: eb a8                         jmp     0x2a0 <_JIT_ENTRY+0x2a0>
// 2f8: 48 8b 34 24                   movq    (%rsp), %rsi
// 2fc: 48 85 f6                      testq   %rsi, %rsi
// 2ff: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 304: 74 4e                         je      0x354 <_JIT_ENTRY+0x354>
// 306: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000308:  R_X86_64_64  _JIT_OPARG
// 310: 0f b7 c8                      movzwl  %ax, %ecx
// 313: 0f b7 c0                      movzwl  %ax, %eax
// 316: ba 01 00 00 00                movl    $0x1, %edx
// 31b: 29 c2                         subl    %eax, %edx
// 31d: f7 d0                         notl    %eax
// 31f: 48 98                         cltq
// 321: 48 63 d2                      movslq  %edx, %rdx
// 324: 48 01 c2                      addq    %rax, %rdx
// 327: 48 29 c8                      subq    %rcx, %rax
// 32a: 49 89 34 c6                   movq    %rsi, (%r14,%rax,8)
// 32e: 49 8d 34 d6                   leaq    (%r14,%rdx,8), %rsi
// 332: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000334:  R_X86_64_64  _JIT_CONTINUE
// 33c: 48 89 df                      movq    %rbx, %rdi
// 33f: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 344: 48 83 c4 28                   addq    $0x28, %rsp
// 348: 5b                            popq    %rbx
// 349: 41 5c                         popq    %r12
// 34b: 41 5d                         popq    %r13
// 34d: 41 5e                         popq    %r14
// 34f: 41 5f                         popq    %r15
// 351: 5d                            popq    %rbp
// 352: ff e0                         jmpq    *%rax
// 354: 49 29 dc                      subq    %rbx, %r12
// 357: 49 83 c4 b8                   addq    $-0x48, %r12
// 35b: 49 c1 ec 03                   shrq    $0x3, %r12
// 35f: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 363: 31 c0                         xorl    %eax, %eax
// 365: e9 46 fd ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 36a: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_BUILD_STRING_code_body[875] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd6, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xde, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xce, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc6, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x70, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x1c, 0x24, 0x4c, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x44, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xa8, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x24, 0xc6, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xe1, 0x01, 0x00, 0x00, 0x49, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xa3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x8c, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x4d, 0x8d, 0x24, 0xc6, 0xe9, 0xa9, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xdd, 0x45, 0x31, 0xff, 0xeb, 0x0f, 0x0f, 0x1f, 0x00, 0x49, 0xff, 0xc7, 0x4c, 0x39, 0xfb, 0x0f, 0x84, 0x37, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xfd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x89, 0xd9, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x0f, 0xb7, 0xd0, 0x48, 0x29, 0xd1, 0x4d, 0x8d, 0x24, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x85, 0xdb, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0f, 0x66, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x7e, 0x4f, 0x41, 0x8d, 0x47, 0xfe, 0x4d, 0x8b, 0x2c, 0xc4, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x15, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd3, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xcb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xb9, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xa8, 0x48, 0x8b, 0x34, 0x24, 0x48, 0x85, 0xf6, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x74, 0x4e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc2, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x63, 0xd2, 0x48, 0x01, 0xc2, 0x48, 0x29, 0xc8, 0x49, 0x89, 0x34, 0xc6, 0x49, 0x8d, 0x34, 0xd6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x46, 0xfd, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_BUILD_STRING_code_holes[24] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x249, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x275, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x286, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x290, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2d7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ec, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x308, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x334, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_BUILD_STRING_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_BUILD_STRING_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_BUILD_TUPLE
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_BUILD_TUPLE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d6                   movq    (%r14,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 de                   movq    (%r14,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c ce                   leaq    (%r14,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 c6                      subq    %r8, %r14
// 8b: 49 83 c6 b8                   addq    $-0x48, %r14
// 8f: 49 c1 ee 03                   shrq    $0x3, %r14
// 93: 45 89 70 40                   movl    %r14d, 0x40(%r8)
// 97: 49 8b 00                      movq    (%r8), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 5c 24 10                movq    %r11, 0x10(%rsp)
// c4: 4c 89 14 24                   movq    %r10, (%rsp)
// c8: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cd: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 a8 00 00 00             je      0x1ab <_JIT_ENTRY+0x1ab>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 135: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 13a: 78 21                         js      0x15d <_JIT_ENTRY+0x15d>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 146: ff d0                         callq   *%rax
// 148: 49 ff 0c 24                   decq    (%r12)
// 14c: 75 0f                         jne     0x15d <_JIT_ENTRY+0x15d>
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _Py_Dealloc
// 158: 4c 89 e7                      movq    %r12, %rdi
// 15b: ff d0                         callq   *%rax
// 15d: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 162: 4d 8d 24 c6                   leaq    (%r14,%rax,8), %r12
// 166: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 16b: 48 85 c0                      testq   %rax, %rax
// 16e: 0f 84 33 01 00 00             je      0x2a7 <_JIT_ENTRY+0x2a7>
// 174: 49 89 04 24                   movq    %rax, (%r12)
// 178: 49 8b 47 10                   movq    0x10(%r15), %rax
// 17c: 48 8b 00                      movq    (%rax), %rax
// 17f: 84 c0                         testb   %al, %al
// 181: 0f 84 a2 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _Py_HandlePending
// 191: 4c 89 ff                      movq    %r15, %rdi
// 194: ff d0                         callq   *%rax
// 196: 85 c0                         testl   %eax, %eax
// 198: 0f 84 8b 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 19e: 48 8b 04 24                   movq    (%rsp), %rax
// 1a2: 4d 8d 24 c6                   leaq    (%r14,%rax,8), %r12
// 1a6: e9 fc 00 00 00                jmp     0x2a7 <_JIT_ENTRY+0x2a7>
// 1ab: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1af: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1b5: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1b9: 31 db                         xorl    %ebx, %ebx
// 1bb: eb 0f                         jmp     0x1cc <_JIT_ENTRY+0x1cc>
// 1bd: 0f 1f 00                      nopl    (%rax)
// 1c0: 48 ff c3                      incq    %rbx
// 1c3: 49 39 df                      cmpq    %rbx, %r15
// 1c6: 0f 84 37 ff ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 1cc: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1d1: 49 8b 45 00                   movq    (%r13), %rax
// 1d5: 48 85 c0                      testq   %rax, %rax
// 1d8: 7e 06                         jle     0x1e0 <_JIT_ENTRY+0x1e0>
// 1da: 85 c0                         testl   %eax, %eax
// 1dc: 78 e2                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 1de: eb 26                         jmp     0x206 <_JIT_ENTRY+0x206>
// 1e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e2:  R_X86_64_64  .rodata.str1.1
// 1ea: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ef: 4c 89 ea                      movq    %r13, %rdx
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _Py_NegativeRefcount
// 1fc: ff d0                         callq   *%rax
// 1fe: 49 8b 45 00                   movq    (%r13), %rax
// 202: 85 c0                         testl   %eax, %eax
// 204: 78 ba                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 210: ff d0                         callq   *%rax
// 212: 49 ff 4d 00                   decq    (%r13)
// 216: 75 a8                         jne     0x1c0 <_JIT_ENTRY+0x1c0>
// 218: 4c 89 ef                      movq    %r13, %rdi
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_Dealloc
// 225: ff d0                         callq   *%rax
// 227: eb 97                         jmp     0x1c0 <_JIT_ENTRY+0x1c0>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _JIT_OPARG
// 233: 0f b7 f0                      movzwl  %ax, %esi
// 236: f7 d0                         notl    %eax
// 238: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 23d: 48 98                         cltq
// 23f: 48 29 f0                      subq    %rsi, %rax
// 242: 4d 8d 24 c6                   leaq    (%r14,%rax,8), %r12
// 246: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000248:  R_X86_64_64  _PyTuple_FromArraySteal
// 250: 4c 89 e7                      movq    %r12, %rdi
// 253: ff d0                         callq   *%rax
// 255: 48 85 c0                      testq   %rax, %rax
// 258: 74 4d                         je      0x2a7 <_JIT_ENTRY+0x2a7>
// 25a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000025c:  R_X86_64_64  _JIT_OPARG
// 264: 0f b7 d1                      movzwl  %cx, %edx
// 267: 0f b7 c9                      movzwl  %cx, %ecx
// 26a: be 01 00 00 00                movl    $0x1, %esi
// 26f: 29 ce                         subl    %ecx, %esi
// 271: f7 d1                         notl    %ecx
// 273: 48 63 c9                      movslq  %ecx, %rcx
// 276: 48 63 f6                      movslq  %esi, %rsi
// 279: 48 01 ce                      addq    %rcx, %rsi
// 27c: 48 29 d1                      subq    %rdx, %rcx
// 27f: 49 89 04 ce                   movq    %rax, (%r14,%rcx,8)
// 283: 49 8d 34 f6                   leaq    (%r14,%rsi,8), %rsi
// 287: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000289:  R_X86_64_64  _JIT_CONTINUE
// 291: 48 89 df                      movq    %rbx, %rdi
// 294: 4c 89 fa                      movq    %r15, %rdx
// 297: 48 83 c4 28                   addq    $0x28, %rsp
// 29b: 5b                            popq    %rbx
// 29c: 41 5c                         popq    %r12
// 29e: 41 5d                         popq    %r13
// 2a0: 41 5e                         popq    %r14
// 2a2: 41 5f                         popq    %r15
// 2a4: 5d                            popq    %rbp
// 2a5: ff e0                         jmpq    *%rax
// 2a7: 49 29 dc                      subq    %rbx, %r12
// 2aa: 49 83 c4 b8                   addq    $-0x48, %r12
// 2ae: 49 c1 ec 03                   shrq    $0x3, %r12
// 2b2: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 2b6: 31 c0                         xorl    %eax, %eax
// 2b8: e9 f3 fd ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 2bd: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_BUILD_TUPLE_code_body[702] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd6, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xde, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xce, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc6, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x70, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xa8, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x4d, 0x8d, 0x24, 0xc6, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x33, 0x01, 0x00, 0x00, 0x49, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xa2, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x8b, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x24, 0xc6, 0xe9, 0xfc, 0x00, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xdb, 0xeb, 0x0f, 0x0f, 0x1f, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0x37, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x29, 0xf0, 0x4d, 0x8d, 0x24, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x4d, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x0f, 0xb7, 0xc9, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x29, 0xce, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x48, 0x63, 0xf6, 0x48, 0x01, 0xce, 0x48, 0x29, 0xd1, 0x49, 0x89, 0x04, 0xce, 0x49, 0x8d, 0x34, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0xf3, 0xfd, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_BUILD_TUPLE_code_holes[18] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x248, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyTuple_FromArraySteal, 0x0},
    {0x25c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x289, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_BUILD_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_BUILD_TUPLE_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_BUILTIN_CLASS
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_CALL_BUILTIN_CLASS.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fd                      movq    %rdi, %rbp
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 cf                   movq    (%r15,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d7                   movq    (%r15,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4b 8d 1c c7                   leaq    (%r15,%r8,8), %rbx
// 79: 48 8b 3b                      movq    (%rbx), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 38                         je      0xbf <_JIT_ENTRY+0xbf>
// 87: 49 29 ef                      subq    %rbp, %r15
// 8a: 49 83 c7 b8                   addq    $-0x48, %r15
// 8e: 49 c1 ef 03                   shrq    $0x3, %r15
// 92: 44 89 7d 40                   movl    %r15d, 0x40(%rbp)
// 96: 48 8b 45 00                   movq    (%rbp), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c4: 4c 89 0c 24                   movq    %r9, (%rsp)
// c8: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cd: 48 89 6c 24 20                movq    %rbp, 0x20(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 40 0f 94 c5                   sete    %bpl
// d9: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dd: 48 8d 73 08                   leaq    0x8(%rbx), %rsi
// e1: 48 63 d0                      movslq  %eax, %rdx
// e4: ff 51 08                      callq   *0x8(%rcx)
// e7: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ee:  R_X86_64_64  _JIT_OPARG
// f6: 66 85 c0                      testw   %ax, %ax
// f9: 0f 94 c0                      sete    %al
// fc: 40 84 c5                      testb   %al, %bpl
// ff: 0f 84 b6 00 00 00             je      0x1bb <_JIT_ENTRY+0x1bb>
// 105: 49 8b 04 24                   movq    (%r12), %rax
// 109: 48 85 c0                      testq   %rax, %rax
// 10c: 7f 22                         jg      0x130 <_JIT_ENTRY+0x130>
// 10e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000110:  R_X86_64_64  .rodata.str1.1
// 118: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011a:  R_X86_64_64  _Py_NegativeRefcount
// 122: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 127: 4c 89 e2                      movq    %r12, %rdx
// 12a: ff d0                         callq   *%rax
// 12c: 49 8b 04 24                   movq    (%r12), %rax
// 130: 85 c0                         testl   %eax, %eax
// 132: 48 8b 6c 24 20                movq    0x20(%rsp), %rbp
// 137: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// 13c: 78 21                         js      0x15f <_JIT_ENTRY+0x15f>
// 13e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000140:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 148: ff d0                         callq   *%rax
// 14a: 49 ff 0c 24                   decq    (%r12)
// 14e: 75 0f                         jne     0x15f <_JIT_ENTRY+0x15f>
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _Py_Dealloc
// 15a: 4c 89 e7                      movq    %r12, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 164: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 168: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 16d: 48 85 d2                      testq   %rdx, %rdx
// 170: 74 34                         je      0x1a6 <_JIT_ENTRY+0x1a6>
// 172: 48 8b 0c 24                   movq    (%rsp), %rcx
// 176: 49 8d 1c cf                   leaq    (%r15,%rcx,8), %rbx
// 17a: 48 89 10                      movq    %rdx, (%rax)
// 17d: 49 8b 46 10                   movq    0x10(%r14), %rax
// 181: 48 8b 00                      movq    (%rax), %rax
// 184: 84 c0                         testb   %al, %al
// 186: 0f 84 ad 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _Py_HandlePending
// 196: 4c 89 f7                      movq    %r14, %rdi
// 199: ff d0                         callq   *%rax
// 19b: 85 c0                         testl   %eax, %eax
// 19d: 0f 84 96 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 1a3: 48 89 d8                      movq    %rbx, %rax
// 1a6: 48 29 e8                      subq    %rbp, %rax
// 1a9: 48 83 c0 b8                   addq    $-0x48, %rax
// 1ad: 48 c1 e8 03                   shrq    $0x3, %rax
// 1b1: 89 45 40                      movl    %eax, 0x40(%rbp)
// 1b4: 31 c0                         xorl    %eax, %eax
// 1b6: e9 f5 fe ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 1bb: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1bf: 41 be 01 00 00 00             movl    $0x1, %r14d
// 1c5: 45 0f 43 f5                   cmovael %r13d, %r14d
// 1c9: 31 ed                         xorl    %ebp, %ebp
// 1cb: eb 0f                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1cd: 0f 1f 00                      nopl    (%rax)
// 1d0: 48 ff c5                      incq    %rbp
// 1d3: 49 39 ee                      cmpq    %rbp, %r14
// 1d6: 0f 84 29 ff ff ff             je      0x105 <_JIT_ENTRY+0x105>
// 1dc: 4c 8b 2c eb                   movq    (%rbx,%rbp,8), %r13
// 1e0: 49 8b 45 00                   movq    (%r13), %rax
// 1e4: 48 85 c0                      testq   %rax, %rax
// 1e7: 7e 07                         jle     0x1f0 <_JIT_ENTRY+0x1f0>
// 1e9: 85 c0                         testl   %eax, %eax
// 1eb: 78 e3                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1ed: eb 27                         jmp     0x216 <_JIT_ENTRY+0x216>
// 1ef: 90                            nop
// 1f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f2:  R_X86_64_64  .rodata.str1.1
// 1fa: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ff: 4c 89 ea                      movq    %r13, %rdx
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_NegativeRefcount
// 20c: ff d0                         callq   *%rax
// 20e: 49 8b 45 00                   movq    (%r13), %rax
// 212: 85 c0                         testl   %eax, %eax
// 214: 78 ba                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 220: ff d0                         callq   *%rax
// 222: 49 ff 4d 00                   decq    (%r13)
// 226: 75 a8                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 228: 4c 89 ef                      movq    %r13, %rdi
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_Dealloc
// 235: ff d0                         callq   *%rax
// 237: eb 97                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 239: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000023b:  R_X86_64_64  _JIT_OPARG
// 243: 0f b7 d1                      movzwl  %cx, %edx
// 246: 89 d0                         movl    %edx, %eax
// 248: f7 d0                         notl    %eax
// 24a: 48 63 f0                      movslq  %eax, %rsi
// 24d: 4c 8d 0c 36                   leaq    (%rsi,%rsi), %r9
// 251: 4b 8b 04 cf                   movq    (%r15,%r9,8), %rax
// 255: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 25a: 29 d7                         subl    %edx, %edi
// 25c: 4c 63 f7                      movslq  %edi, %r14
// 25f: 49 01 f6                      addq    %rsi, %r14
// 262: 0f b7 c9                      movzwl  %cx, %ecx
// 265: 48 89 ce                      movq    %rcx, %rsi
// 268: 48 f7 de                      negq    %rsi
// 26b: 44 8d 62 01                   leal    0x1(%rdx), %r12d
// 26f: 48 85 c0                      testq   %rax, %rax
// 272: 48 f7 d1                      notq    %rcx
// 275: 48 0f 44 ce                   cmoveq  %rsi, %rcx
// 279: 44 0f 44 e2                   cmovel  %edx, %r12d
// 27d: 4b 8b 3c f7                   movq    (%r15,%r14,8), %rdi
// 281: 48 8b 57 08                   movq    0x8(%rdi), %rdx
// 285: f6 82 ab 00 00 00 80          testb   $-0x80, 0xab(%rdx)
// 28c: 0f 84 f5 00 00 00             je      0x387 <_JIT_ENTRY+0x387>
// 292: 4c 8b 87 90 01 00 00          movq    0x190(%rdi), %r8
// 299: 4d 85 c0                      testq   %r8, %r8
// 29c: 0f 84 e5 00 00 00             je      0x387 <_JIT_ENTRY+0x387>
// 2a2: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 2a7: 48 8d 2c cb                   leaq    (%rbx,%rcx,8), %rbp
// 2ab: 48 85 c0                      testq   %rax, %rax
// 2ae: 0f 94 c3                      sete    %bl
// 2b1: 44 89 e2                      movl    %r12d, %edx
// 2b4: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 2b9: 48 89 ee                      movq    %rbp, %rsi
// 2bc: 31 c9                         xorl    %ecx, %ecx
// 2be: 41 ff d0                      callq   *%r8
// 2c1: 48 89 04 24                   movq    %rax, (%rsp)
// 2c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c7:  R_X86_64_64  _JIT_OPARG
// 2cf: 66 85 c0                      testw   %ax, %ax
// 2d2: 0f 94 c0                      sete    %al
// 2d5: 84 c3                         testb   %al, %bl
// 2d7: 0f 84 b2 00 00 00             je      0x38f <_JIT_ENTRY+0x38f>
// 2dd: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 2e2: 49 8b 04 24                   movq    (%r12), %rax
// 2e6: 48 85 c0                      testq   %rax, %rax
// 2e9: 7f 22                         jg      0x30d <_JIT_ENTRY+0x30d>
// 2eb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002ed:  R_X86_64_64  .rodata.str1.1
// 2f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f7:  R_X86_64_64  _Py_NegativeRefcount
// 2ff: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// 304: 4c 89 e2                      movq    %r12, %rdx
// 307: ff d0                         callq   *%rax
// 309: 49 8b 04 24                   movq    (%r12), %rax
// 30d: 85 c0                         testl   %eax, %eax
// 30f: 48 8b 6c 24 20                movq    0x20(%rsp), %rbp
// 314: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 319: 78 21                         js      0x33c <_JIT_ENTRY+0x33c>
// 31b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 325: ff d0                         callq   *%rax
// 327: 49 ff 0c 24                   decq    (%r12)
// 32b: 75 0f                         jne     0x33c <_JIT_ENTRY+0x33c>
// 32d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032f:  R_X86_64_64  _Py_Dealloc
// 337: 4c 89 e7                      movq    %r12, %rdi
// 33a: ff d0                         callq   *%rax
// 33c: 4b 8d 04 f7                   leaq    (%r15,%r14,8), %rax
// 340: 48 8b 0c 24                   movq    (%rsp), %rcx
// 344: 48 85 c9                      testq   %rcx, %rcx
// 347: 0f 84 59 fe ff ff             je      0x1a6 <_JIT_ENTRY+0x1a6>
// 34d: 4d 8d 3c df                   leaq    (%r15,%rbx,8), %r15
// 351: 48 89 08                      movq    %rcx, (%rax)
// 354: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// 359: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 35d: 48 8b 00                      movq    (%rax), %rax
// 360: 84 c0                         testb   %al, %al
// 362: 0f 84 9c 00 00 00             je      0x404 <_JIT_ENTRY+0x404>
// 368: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000036a:  R_X86_64_64  _Py_HandlePending
// 372: 48 89 df                      movq    %rbx, %rdi
// 375: ff d0                         callq   *%rax
// 377: 85 c0                         testl   %eax, %eax
// 379: 0f 84 85 00 00 00             je      0x404 <_JIT_ENTRY+0x404>
// 37f: 4c 89 f8                      movq    %r15, %rax
// 382: e9 1f fe ff ff                jmp     0x1a6 <_JIT_ENTRY+0x1a6>
// 387: 49 89 df                      movq    %rbx, %r15
// 38a: e9 f8 fc ff ff                jmp     0x87 <_JIT_ENTRY+0x87>
// 38f: 41 83 fc 02                   cmpl    $0x2, %r12d
// 393: bb 01 00 00 00                movl    $0x1, %ebx
// 398: 41 0f 43 dc                   cmovael %r12d, %ebx
// 39c: 45 31 e4                      xorl    %r12d, %r12d
// 39f: eb 0c                         jmp     0x3ad <_JIT_ENTRY+0x3ad>
// 3a1: 49 ff c4                      incq    %r12
// 3a4: 4c 39 e3                      cmpq    %r12, %rbx
// 3a7: 0f 84 30 ff ff ff             je      0x2dd <_JIT_ENTRY+0x2dd>
// 3ad: 4e 8b 6c e5 00                movq    (%rbp,%r12,8), %r13
// 3b2: 49 8b 45 00                   movq    (%r13), %rax
// 3b6: 48 85 c0                      testq   %rax, %rax
// 3b9: 7f 22                         jg      0x3dd <_JIT_ENTRY+0x3dd>
// 3bb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003bd:  R_X86_64_64  .rodata.str1.1
// 3c5: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 3ca: 4c 89 ea                      movq    %r13, %rdx
// 3cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003cf:  R_X86_64_64  _Py_NegativeRefcount
// 3d7: ff d0                         callq   *%rax
// 3d9: 49 8b 45 00                   movq    (%r13), %rax
// 3dd: 85 c0                         testl   %eax, %eax
// 3df: 78 c0                         js      0x3a1 <_JIT_ENTRY+0x3a1>
// 3e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003e3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3eb: ff d0                         callq   *%rax
// 3ed: 49 ff 4d 00                   decq    (%r13)
// 3f1: 75 ae                         jne     0x3a1 <_JIT_ENTRY+0x3a1>
// 3f3: 4c 89 ef                      movq    %r13, %rdi
// 3f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003f8:  R_X86_64_64  _Py_Dealloc
// 400: ff d0                         callq   *%rax
// 402: eb 9d                         jmp     0x3a1 <_JIT_ENTRY+0x3a1>
// 404: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000406:  R_X86_64_64  _JIT_CONTINUE
// 40e: 48 89 ef                      movq    %rbp, %rdi
// 411: 4c 89 fe                      movq    %r15, %rsi
// 414: 48 89 da                      movq    %rbx, %rdx
// 417: 48 83 c4 28                   addq    $0x28, %rsp
// 41b: 5b                            popq    %rbx
// 41c: 41 5c                         popq    %r12
// 41e: 41 5d                         popq    %r13
// 420: 41 5e                         popq    %r14
// 422: 41 5f                         popq    %r15
// 424: 5d                            popq    %rbp
// 425: ff e0                         jmpq    *%rax
// 427: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_BUILTIN_CLASS_code_body[1064] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfd, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xcf, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4b, 0x8d, 0x1c, 0xc7, 0x48, 0x8b, 0x3b, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x38, 0x49, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7d, 0x40, 0x48, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x6c, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x73, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xb6, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x20, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x74, 0x34, 0x48, 0x8b, 0x0c, 0x24, 0x49, 0x8d, 0x1c, 0xcf, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xad, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd8, 0x48, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x45, 0x40, 0x31, 0xc0, 0xe9, 0xf5, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xed, 0xeb, 0x0f, 0x0f, 0x1f, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xee, 0x0f, 0x84, 0x29, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x2c, 0xeb, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x27, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x89, 0xd0, 0xf7, 0xd0, 0x48, 0x63, 0xf0, 0x4c, 0x8d, 0x0c, 0x36, 0x4b, 0x8b, 0x04, 0xcf, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xd7, 0x4c, 0x63, 0xf7, 0x49, 0x01, 0xf6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xce, 0x48, 0xf7, 0xde, 0x44, 0x8d, 0x62, 0x01, 0x48, 0x85, 0xc0, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xce, 0x44, 0x0f, 0x44, 0xe2, 0x4b, 0x8b, 0x3c, 0xf7, 0x48, 0x8b, 0x57, 0x08, 0xf6, 0x82, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xf5, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x87, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xe5, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x8d, 0x2c, 0xcb, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xe2, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xb2, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x20, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xf7, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x59, 0xfe, 0xff, 0xff, 0x4d, 0x8d, 0x3c, 0xdf, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0x9c, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x85, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf8, 0xe9, 0x1f, 0xfe, 0xff, 0xff, 0x49, 0x89, 0xdf, 0xe9, 0xf8, 0xfc, 0xff, 0xff, 0x41, 0x83, 0xfc, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xdc, 0x45, 0x31, 0xe4, 0xeb, 0x0c, 0x49, 0xff, 0xc4, 0x4c, 0x39, 0xe3, 0x0f, 0x84, 0x30, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xe5, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xc0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xae, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x9d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_BUILTIN_CLASS_code_holes[26] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xee, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x11a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x140, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2c7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2ed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2f7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x31d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x32f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x36a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x3bd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3cf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3e3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3f8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x406, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_BUILTIN_CLASS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_BUILTIN_CLASS_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_BUILTIN_FAST
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_CALL_BUILTIN_FAST.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fd                      movq    %rdi, %rbp
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 cf                   movq    (%r15,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d7                   movq    (%r15,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4b 8d 1c c7                   leaq    (%r15,%r8,8), %rbx
// 79: 48 8b 3b                      movq    (%rbx), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 38                         je      0xbf <_JIT_ENTRY+0xbf>
// 87: 49 29 ef                      subq    %rbp, %r15
// 8a: 49 83 c7 b8                   addq    $-0x48, %r15
// 8e: 49 c1 ef 03                   shrq    $0x3, %r15
// 92: 44 89 7d 40                   movl    %r15d, 0x40(%rbp)
// 96: 48 8b 45 00                   movq    (%rbp), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c4: 4c 89 0c 24                   movq    %r9, (%rsp)
// c8: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cd: 48 89 6c 24 20                movq    %rbp, 0x20(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 40 0f 94 c5                   sete    %bpl
// d9: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dd: 48 8d 73 08                   leaq    0x8(%rbx), %rsi
// e1: 48 63 d0                      movslq  %eax, %rdx
// e4: ff 51 08                      callq   *0x8(%rcx)
// e7: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ee:  R_X86_64_64  _JIT_OPARG
// f6: 66 85 c0                      testw   %ax, %ax
// f9: 0f 94 c0                      sete    %al
// fc: 40 84 c5                      testb   %al, %bpl
// ff: 0f 84 b6 00 00 00             je      0x1bb <_JIT_ENTRY+0x1bb>
// 105: 49 8b 04 24                   movq    (%r12), %rax
// 109: 48 85 c0                      testq   %rax, %rax
// 10c: 7f 22                         jg      0x130 <_JIT_ENTRY+0x130>
// 10e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000110:  R_X86_64_64  .rodata.str1.1
// 118: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011a:  R_X86_64_64  _Py_NegativeRefcount
// 122: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 127: 4c 89 e2                      movq    %r12, %rdx
// 12a: ff d0                         callq   *%rax
// 12c: 49 8b 04 24                   movq    (%r12), %rax
// 130: 85 c0                         testl   %eax, %eax
// 132: 48 8b 6c 24 20                movq    0x20(%rsp), %rbp
// 137: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// 13c: 78 21                         js      0x15f <_JIT_ENTRY+0x15f>
// 13e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000140:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 148: ff d0                         callq   *%rax
// 14a: 49 ff 0c 24                   decq    (%r12)
// 14e: 75 0f                         jne     0x15f <_JIT_ENTRY+0x15f>
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _Py_Dealloc
// 15a: 4c 89 e7                      movq    %r12, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 164: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 168: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 16d: 48 85 d2                      testq   %rdx, %rdx
// 170: 74 34                         je      0x1a6 <_JIT_ENTRY+0x1a6>
// 172: 48 8b 0c 24                   movq    (%rsp), %rcx
// 176: 49 8d 1c cf                   leaq    (%r15,%rcx,8), %rbx
// 17a: 48 89 10                      movq    %rdx, (%rax)
// 17d: 49 8b 46 10                   movq    0x10(%r14), %rax
// 181: 48 8b 00                      movq    (%rax), %rax
// 184: 84 c0                         testb   %al, %al
// 186: 0f 84 ad 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _Py_HandlePending
// 196: 4c 89 f7                      movq    %r14, %rdi
// 199: ff d0                         callq   *%rax
// 19b: 85 c0                         testl   %eax, %eax
// 19d: 0f 84 96 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 1a3: 48 89 d8                      movq    %rbx, %rax
// 1a6: 48 29 e8                      subq    %rbp, %rax
// 1a9: 48 83 c0 b8                   addq    $-0x48, %rax
// 1ad: 48 c1 e8 03                   shrq    $0x3, %rax
// 1b1: 89 45 40                      movl    %eax, 0x40(%rbp)
// 1b4: 31 c0                         xorl    %eax, %eax
// 1b6: e9 f5 fe ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 1bb: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1bf: 41 be 01 00 00 00             movl    $0x1, %r14d
// 1c5: 45 0f 43 f5                   cmovael %r13d, %r14d
// 1c9: 31 ed                         xorl    %ebp, %ebp
// 1cb: eb 0f                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1cd: 0f 1f 00                      nopl    (%rax)
// 1d0: 48 ff c5                      incq    %rbp
// 1d3: 49 39 ee                      cmpq    %rbp, %r14
// 1d6: 0f 84 29 ff ff ff             je      0x105 <_JIT_ENTRY+0x105>
// 1dc: 4c 8b 2c eb                   movq    (%rbx,%rbp,8), %r13
// 1e0: 49 8b 45 00                   movq    (%r13), %rax
// 1e4: 48 85 c0                      testq   %rax, %rax
// 1e7: 7e 07                         jle     0x1f0 <_JIT_ENTRY+0x1f0>
// 1e9: 85 c0                         testl   %eax, %eax
// 1eb: 78 e3                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1ed: eb 27                         jmp     0x216 <_JIT_ENTRY+0x216>
// 1ef: 90                            nop
// 1f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f2:  R_X86_64_64  .rodata.str1.1
// 1fa: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ff: 4c 89 ea                      movq    %r13, %rdx
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_NegativeRefcount
// 20c: ff d0                         callq   *%rax
// 20e: 49 8b 45 00                   movq    (%r13), %rax
// 212: 85 c0                         testl   %eax, %eax
// 214: 78 ba                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 220: ff d0                         callq   *%rax
// 222: 49 ff 4d 00                   decq    (%r13)
// 226: 75 a8                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 228: 4c 89 ef                      movq    %r13, %rdi
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_Dealloc
// 235: ff d0                         callq   *%rax
// 237: eb 97                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 239: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000023b:  R_X86_64_64  _JIT_OPARG
// 243: 0f b7 d1                      movzwl  %cx, %edx
// 246: 89 d0                         movl    %edx, %eax
// 248: f7 d0                         notl    %eax
// 24a: 48 63 f0                      movslq  %eax, %rsi
// 24d: 4c 8d 0c 36                   leaq    (%rsi,%rsi), %r9
// 251: 4b 8b 04 cf                   movq    (%r15,%r9,8), %rax
// 255: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 25a: 29 d7                         subl    %edx, %edi
// 25c: 4c 63 f7                      movslq  %edi, %r14
// 25f: 49 01 f6                      addq    %rsi, %r14
// 262: 0f b7 c9                      movzwl  %cx, %ecx
// 265: 48 89 ce                      movq    %rcx, %rsi
// 268: 48 f7 de                      negq    %rsi
// 26b: 44 8d 62 01                   leal    0x1(%rdx), %r12d
// 26f: 48 85 c0                      testq   %rax, %rax
// 272: 48 f7 d1                      notq    %rcx
// 275: 48 0f 44 ce                   cmoveq  %rsi, %rcx
// 279: 44 0f 44 e2                   cmovel  %edx, %r12d
// 27d: 4b 8b 34 f7                   movq    (%r15,%r14,8), %rsi
// 281: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000283:  R_X86_64_64  PyCFunction_Type
// 28b: 48 39 56 08                   cmpq    %rdx, 0x8(%rsi)
// 28f: 0f 85 fa 00 00 00             jne     0x38f <_JIT_ENTRY+0x38f>
// 295: 4c 8b 46 10                   movq    0x10(%rsi), %r8
// 299: 41 81 78 10 80 00 00 00       cmpl    $0x80, 0x10(%r8)
// 2a1: 0f 85 e8 00 00 00             jne     0x38f <_JIT_ENTRY+0x38f>
// 2a7: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 2ac: 48 8d 2c cb                   leaq    (%rbx,%rcx,8), %rbp
// 2b0: 48 85 c0                      testq   %rax, %rax
// 2b3: 0f 94 c3                      sete    %bl
// 2b6: 48 89 74 24 08                movq    %rsi, 0x8(%rsp)
// 2bb: 48 8b 7e 18                   movq    0x18(%rsi), %rdi
// 2bf: 44 89 e2                      movl    %r12d, %edx
// 2c2: 48 89 ee                      movq    %rbp, %rsi
// 2c5: 41 ff 50 08                   callq   *0x8(%r8)
// 2c9: 48 89 04 24                   movq    %rax, (%rsp)
// 2cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cf:  R_X86_64_64  _JIT_OPARG
// 2d7: 66 85 c0                      testw   %ax, %ax
// 2da: 0f 94 c0                      sete    %al
// 2dd: 84 c3                         testb   %al, %bl
// 2df: 0f 84 b2 00 00 00             je      0x397 <_JIT_ENTRY+0x397>
// 2e5: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 2ea: 49 8b 04 24                   movq    (%r12), %rax
// 2ee: 48 85 c0                      testq   %rax, %rax
// 2f1: 7f 22                         jg      0x315 <_JIT_ENTRY+0x315>
// 2f3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002f5:  R_X86_64_64  .rodata.str1.1
// 2fd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ff:  R_X86_64_64  _Py_NegativeRefcount
// 307: be 28 0b 00 00                movl    $0xb28, %esi            # imm = 0xB28
// 30c: 4c 89 e2                      movq    %r12, %rdx
// 30f: ff d0                         callq   *%rax
// 311: 49 8b 04 24                   movq    (%r12), %rax
// 315: 85 c0                         testl   %eax, %eax
// 317: 48 8b 6c 24 20                movq    0x20(%rsp), %rbp
// 31c: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 321: 78 21                         js      0x344 <_JIT_ENTRY+0x344>
// 323: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000325:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 32d: ff d0                         callq   *%rax
// 32f: 49 ff 0c 24                   decq    (%r12)
// 333: 75 0f                         jne     0x344 <_JIT_ENTRY+0x344>
// 335: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000337:  R_X86_64_64  _Py_Dealloc
// 33f: 4c 89 e7                      movq    %r12, %rdi
// 342: ff d0                         callq   *%rax
// 344: 4b 8d 04 f7                   leaq    (%r15,%r14,8), %rax
// 348: 48 8b 0c 24                   movq    (%rsp), %rcx
// 34c: 48 85 c9                      testq   %rcx, %rcx
// 34f: 0f 84 51 fe ff ff             je      0x1a6 <_JIT_ENTRY+0x1a6>
// 355: 4d 8d 3c df                   leaq    (%r15,%rbx,8), %r15
// 359: 48 89 08                      movq    %rcx, (%rax)
// 35c: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// 361: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 365: 48 8b 00                      movq    (%rax), %rax
// 368: 84 c0                         testb   %al, %al
// 36a: 0f 84 9c 00 00 00             je      0x40c <_JIT_ENTRY+0x40c>
// 370: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000372:  R_X86_64_64  _Py_HandlePending
// 37a: 48 89 df                      movq    %rbx, %rdi
// 37d: ff d0                         callq   *%rax
// 37f: 85 c0                         testl   %eax, %eax
// 381: 0f 84 85 00 00 00             je      0x40c <_JIT_ENTRY+0x40c>
// 387: 4c 89 f8                      movq    %r15, %rax
// 38a: e9 17 fe ff ff                jmp     0x1a6 <_JIT_ENTRY+0x1a6>
// 38f: 49 89 df                      movq    %rbx, %r15
// 392: e9 f0 fc ff ff                jmp     0x87 <_JIT_ENTRY+0x87>
// 397: 41 83 fc 02                   cmpl    $0x2, %r12d
// 39b: bb 01 00 00 00                movl    $0x1, %ebx
// 3a0: 41 0f 43 dc                   cmovael %r12d, %ebx
// 3a4: 45 31 e4                      xorl    %r12d, %r12d
// 3a7: eb 0c                         jmp     0x3b5 <_JIT_ENTRY+0x3b5>
// 3a9: 49 ff c4                      incq    %r12
// 3ac: 4c 39 e3                      cmpq    %r12, %rbx
// 3af: 0f 84 30 ff ff ff             je      0x2e5 <_JIT_ENTRY+0x2e5>
// 3b5: 4e 8b 6c e5 00                movq    (%rbp,%r12,8), %r13
// 3ba: 49 8b 45 00                   movq    (%r13), %rax
// 3be: 48 85 c0                      testq   %rax, %rax
// 3c1: 7f 22                         jg      0x3e5 <_JIT_ENTRY+0x3e5>
// 3c3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003c5:  R_X86_64_64  .rodata.str1.1
// 3cd: be 26 0b 00 00                movl    $0xb26, %esi            # imm = 0xB26
// 3d2: 4c 89 ea                      movq    %r13, %rdx
// 3d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003d7:  R_X86_64_64  _Py_NegativeRefcount
// 3df: ff d0                         callq   *%rax
// 3e1: 49 8b 45 00                   movq    (%r13), %rax
// 3e5: 85 c0                         testl   %eax, %eax
// 3e7: 78 c0                         js      0x3a9 <_JIT_ENTRY+0x3a9>
// 3e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003eb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3f3: ff d0                         callq   *%rax
// 3f5: 49 ff 4d 00                   decq    (%r13)
// 3f9: 75 ae                         jne     0x3a9 <_JIT_ENTRY+0x3a9>
// 3fb: 4c 89 ef                      movq    %r13, %rdi
// 3fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000400:  R_X86_64_64  _Py_Dealloc
// 408: ff d0                         callq   *%rax
// 40a: eb 9d                         jmp     0x3a9 <_JIT_ENTRY+0x3a9>
// 40c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000040e:  R_X86_64_64  _JIT_CONTINUE
// 416: 48 89 ef                      movq    %rbp, %rdi
// 419: 4c 89 fe                      movq    %r15, %rsi
// 41c: 48 89 da                      movq    %rbx, %rdx
// 41f: 48 83 c4 28                   addq    $0x28, %rsp
// 423: 5b                            popq    %rbx
// 424: 41 5c                         popq    %r12
// 426: 41 5d                         popq    %r13
// 428: 41 5e                         popq    %r14
// 42a: 41 5f                         popq    %r15
// 42c: 5d                            popq    %rbp
// 42d: ff e0                         jmpq    *%rax
// 42f: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_BUILTIN_FAST_code_body[1072] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfd, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xcf, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4b, 0x8d, 0x1c, 0xc7, 0x48, 0x8b, 0x3b, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x38, 0x49, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7d, 0x40, 0x48, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x6c, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x73, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xb6, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x20, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x74, 0x34, 0x48, 0x8b, 0x0c, 0x24, 0x49, 0x8d, 0x1c, 0xcf, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xad, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd8, 0x48, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x45, 0x40, 0x31, 0xc0, 0xe9, 0xf5, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xed, 0xeb, 0x0f, 0x0f, 0x1f, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xee, 0x0f, 0x84, 0x29, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x2c, 0xeb, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x27, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x89, 0xd0, 0xf7, 0xd0, 0x48, 0x63, 0xf0, 0x4c, 0x8d, 0x0c, 0x36, 0x4b, 0x8b, 0x04, 0xcf, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xd7, 0x4c, 0x63, 0xf7, 0x49, 0x01, 0xf6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xce, 0x48, 0xf7, 0xde, 0x44, 0x8d, 0x62, 0x01, 0x48, 0x85, 0xc0, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xce, 0x44, 0x0f, 0x44, 0xe2, 0x4b, 0x8b, 0x34, 0xf7, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x56, 0x08, 0x0f, 0x85, 0xfa, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x46, 0x10, 0x41, 0x81, 0x78, 0x10, 0x80, 0x00, 0x00, 0x00, 0x0f, 0x85, 0xe8, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x8d, 0x2c, 0xcb, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x48, 0x89, 0x74, 0x24, 0x08, 0x48, 0x8b, 0x7e, 0x18, 0x44, 0x89, 0xe2, 0x48, 0x89, 0xee, 0x41, 0xff, 0x50, 0x08, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xb2, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x28, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x20, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xf7, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x51, 0xfe, 0xff, 0xff, 0x4d, 0x8d, 0x3c, 0xdf, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0x9c, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x85, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf8, 0xe9, 0x17, 0xfe, 0xff, 0xff, 0x49, 0x89, 0xdf, 0xe9, 0xf0, 0xfc, 0xff, 0xff, 0x41, 0x83, 0xfc, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xdc, 0x45, 0x31, 0xe4, 0xeb, 0x0c, 0x49, 0xff, 0xc4, 0x4c, 0x39, 0xe3, 0x0f, 0x84, 0x30, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xe5, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x26, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xc0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xae, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x9d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_BUILTIN_FAST_code_holes[27] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xee, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x11a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x140, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x283, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0x2cf, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2f5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2ff, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x325, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x337, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x372, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x3c5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3d7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3eb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x400, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x40e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_BUILTIN_FAST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_BUILTIN_FAST_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_BUILTIN_FAST_WITH_KEYWORDS
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_CALL_BUILTIN_FAST_WITH_KEYWORDS.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fd                      movq    %rdi, %rbp
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 cf                   movq    (%r15,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d7                   movq    (%r15,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4b 8d 1c c7                   leaq    (%r15,%r8,8), %rbx
// 79: 48 8b 3b                      movq    (%rbx), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 38                         je      0xbf <_JIT_ENTRY+0xbf>
// 87: 49 29 ef                      subq    %rbp, %r15
// 8a: 49 83 c7 b8                   addq    $-0x48, %r15
// 8e: 49 c1 ef 03                   shrq    $0x3, %r15
// 92: 44 89 7d 40                   movl    %r15d, 0x40(%rbp)
// 96: 48 8b 45 00                   movq    (%rbp), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c4: 4c 89 0c 24                   movq    %r9, (%rsp)
// c8: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cd: 48 89 6c 24 20                movq    %rbp, 0x20(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 40 0f 94 c5                   sete    %bpl
// d9: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dd: 48 8d 73 08                   leaq    0x8(%rbx), %rsi
// e1: 48 63 d0                      movslq  %eax, %rdx
// e4: ff 51 08                      callq   *0x8(%rcx)
// e7: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ee:  R_X86_64_64  _JIT_OPARG
// f6: 66 85 c0                      testw   %ax, %ax
// f9: 0f 94 c0                      sete    %al
// fc: 40 84 c5                      testb   %al, %bpl
// ff: 0f 84 b6 00 00 00             je      0x1bb <_JIT_ENTRY+0x1bb>
// 105: 49 8b 04 24                   movq    (%r12), %rax
// 109: 48 85 c0                      testq   %rax, %rax
// 10c: 7f 22                         jg      0x130 <_JIT_ENTRY+0x130>
// 10e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000110:  R_X86_64_64  .rodata.str1.1
// 118: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011a:  R_X86_64_64  _Py_NegativeRefcount
// 122: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 127: 4c 89 e2                      movq    %r12, %rdx
// 12a: ff d0                         callq   *%rax
// 12c: 49 8b 04 24                   movq    (%r12), %rax
// 130: 85 c0                         testl   %eax, %eax
// 132: 48 8b 6c 24 20                movq    0x20(%rsp), %rbp
// 137: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// 13c: 78 21                         js      0x15f <_JIT_ENTRY+0x15f>
// 13e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000140:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 148: ff d0                         callq   *%rax
// 14a: 49 ff 0c 24                   decq    (%r12)
// 14e: 75 0f                         jne     0x15f <_JIT_ENTRY+0x15f>
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _Py_Dealloc
// 15a: 4c 89 e7                      movq    %r12, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 164: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 168: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 16d: 48 85 d2                      testq   %rdx, %rdx
// 170: 74 34                         je      0x1a6 <_JIT_ENTRY+0x1a6>
// 172: 48 8b 0c 24                   movq    (%rsp), %rcx
// 176: 49 8d 1c cf                   leaq    (%r15,%rcx,8), %rbx
// 17a: 48 89 10                      movq    %rdx, (%rax)
// 17d: 49 8b 46 10                   movq    0x10(%r14), %rax
// 181: 48 8b 00                      movq    (%rax), %rax
// 184: 84 c0                         testb   %al, %al
// 186: 0f 84 ad 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _Py_HandlePending
// 196: 4c 89 f7                      movq    %r14, %rdi
// 199: ff d0                         callq   *%rax
// 19b: 85 c0                         testl   %eax, %eax
// 19d: 0f 84 96 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 1a3: 48 89 d8                      movq    %rbx, %rax
// 1a6: 48 29 e8                      subq    %rbp, %rax
// 1a9: 48 83 c0 b8                   addq    $-0x48, %rax
// 1ad: 48 c1 e8 03                   shrq    $0x3, %rax
// 1b1: 89 45 40                      movl    %eax, 0x40(%rbp)
// 1b4: 31 c0                         xorl    %eax, %eax
// 1b6: e9 f5 fe ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 1bb: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1bf: 41 be 01 00 00 00             movl    $0x1, %r14d
// 1c5: 45 0f 43 f5                   cmovael %r13d, %r14d
// 1c9: 31 ed                         xorl    %ebp, %ebp
// 1cb: eb 0f                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1cd: 0f 1f 00                      nopl    (%rax)
// 1d0: 48 ff c5                      incq    %rbp
// 1d3: 49 39 ee                      cmpq    %rbp, %r14
// 1d6: 0f 84 29 ff ff ff             je      0x105 <_JIT_ENTRY+0x105>
// 1dc: 4c 8b 2c eb                   movq    (%rbx,%rbp,8), %r13
// 1e0: 49 8b 45 00                   movq    (%r13), %rax
// 1e4: 48 85 c0                      testq   %rax, %rax
// 1e7: 7e 07                         jle     0x1f0 <_JIT_ENTRY+0x1f0>
// 1e9: 85 c0                         testl   %eax, %eax
// 1eb: 78 e3                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1ed: eb 27                         jmp     0x216 <_JIT_ENTRY+0x216>
// 1ef: 90                            nop
// 1f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f2:  R_X86_64_64  .rodata.str1.1
// 1fa: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ff: 4c 89 ea                      movq    %r13, %rdx
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_NegativeRefcount
// 20c: ff d0                         callq   *%rax
// 20e: 49 8b 45 00                   movq    (%r13), %rax
// 212: 85 c0                         testl   %eax, %eax
// 214: 78 ba                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 220: ff d0                         callq   *%rax
// 222: 49 ff 4d 00                   decq    (%r13)
// 226: 75 a8                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 228: 4c 89 ef                      movq    %r13, %rdi
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_Dealloc
// 235: ff d0                         callq   *%rax
// 237: eb 97                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 239: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000023b:  R_X86_64_64  _JIT_OPARG
// 243: 0f b7 d1                      movzwl  %cx, %edx
// 246: 89 d0                         movl    %edx, %eax
// 248: f7 d0                         notl    %eax
// 24a: 48 63 f0                      movslq  %eax, %rsi
// 24d: 4c 8d 0c 36                   leaq    (%rsi,%rsi), %r9
// 251: 4b 8b 04 cf                   movq    (%r15,%r9,8), %rax
// 255: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 25a: 29 d7                         subl    %edx, %edi
// 25c: 4c 63 f7                      movslq  %edi, %r14
// 25f: 49 01 f6                      addq    %rsi, %r14
// 262: 0f b7 c9                      movzwl  %cx, %ecx
// 265: 48 89 ce                      movq    %rcx, %rsi
// 268: 48 f7 de                      negq    %rsi
// 26b: 44 8d 62 01                   leal    0x1(%rdx), %r12d
// 26f: 48 85 c0                      testq   %rax, %rax
// 272: 48 f7 d1                      notq    %rcx
// 275: 48 0f 44 ce                   cmoveq  %rsi, %rcx
// 279: 44 0f 44 e2                   cmovel  %edx, %r12d
// 27d: 4b 8b 34 f7                   movq    (%r15,%r14,8), %rsi
// 281: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000283:  R_X86_64_64  PyCFunction_Type
// 28b: 48 39 56 08                   cmpq    %rdx, 0x8(%rsi)
// 28f: 0f 85 fc 00 00 00             jne     0x391 <_JIT_ENTRY+0x391>
// 295: 4c 8b 46 10                   movq    0x10(%rsi), %r8
// 299: 41 81 78 10 82 00 00 00       cmpl    $0x82, 0x10(%r8)
// 2a1: 0f 85 ea 00 00 00             jne     0x391 <_JIT_ENTRY+0x391>
// 2a7: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 2ac: 48 8d 2c cb                   leaq    (%rbx,%rcx,8), %rbp
// 2b0: 48 85 c0                      testq   %rax, %rax
// 2b3: 0f 94 c3                      sete    %bl
// 2b6: 48 89 74 24 08                movq    %rsi, 0x8(%rsp)
// 2bb: 48 8b 7e 18                   movq    0x18(%rsi), %rdi
// 2bf: 44 89 e2                      movl    %r12d, %edx
// 2c2: 48 89 ee                      movq    %rbp, %rsi
// 2c5: 31 c9                         xorl    %ecx, %ecx
// 2c7: 41 ff 50 08                   callq   *0x8(%r8)
// 2cb: 48 89 04 24                   movq    %rax, (%rsp)
// 2cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d1:  R_X86_64_64  _JIT_OPARG
// 2d9: 66 85 c0                      testw   %ax, %ax
// 2dc: 0f 94 c0                      sete    %al
// 2df: 84 c3                         testb   %al, %bl
// 2e1: 0f 84 b2 00 00 00             je      0x399 <_JIT_ENTRY+0x399>
// 2e7: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 2ec: 49 8b 04 24                   movq    (%r12), %rax
// 2f0: 48 85 c0                      testq   %rax, %rax
// 2f3: 7f 22                         jg      0x317 <_JIT_ENTRY+0x317>
// 2f5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002f7:  R_X86_64_64  .rodata.str1.1
// 2ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000301:  R_X86_64_64  _Py_NegativeRefcount
// 309: be 51 0b 00 00                movl    $0xb51, %esi            # imm = 0xB51
// 30e: 4c 89 e2                      movq    %r12, %rdx
// 311: ff d0                         callq   *%rax
// 313: 49 8b 04 24                   movq    (%r12), %rax
// 317: 85 c0                         testl   %eax, %eax
// 319: 48 8b 6c 24 20                movq    0x20(%rsp), %rbp
// 31e: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 323: 78 21                         js      0x346 <_JIT_ENTRY+0x346>
// 325: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000327:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 32f: ff d0                         callq   *%rax
// 331: 49 ff 0c 24                   decq    (%r12)
// 335: 75 0f                         jne     0x346 <_JIT_ENTRY+0x346>
// 337: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000339:  R_X86_64_64  _Py_Dealloc
// 341: 4c 89 e7                      movq    %r12, %rdi
// 344: ff d0                         callq   *%rax
// 346: 4b 8d 04 f7                   leaq    (%r15,%r14,8), %rax
// 34a: 48 8b 0c 24                   movq    (%rsp), %rcx
// 34e: 48 85 c9                      testq   %rcx, %rcx
// 351: 0f 84 4f fe ff ff             je      0x1a6 <_JIT_ENTRY+0x1a6>
// 357: 4d 8d 3c df                   leaq    (%r15,%rbx,8), %r15
// 35b: 48 89 08                      movq    %rcx, (%rax)
// 35e: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// 363: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 367: 48 8b 00                      movq    (%rax), %rax
// 36a: 84 c0                         testb   %al, %al
// 36c: 0f 84 9c 00 00 00             je      0x40e <_JIT_ENTRY+0x40e>
// 372: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000374:  R_X86_64_64  _Py_HandlePending
// 37c: 48 89 df                      movq    %rbx, %rdi
// 37f: ff d0                         callq   *%rax
// 381: 85 c0                         testl   %eax, %eax
// 383: 0f 84 85 00 00 00             je      0x40e <_JIT_ENTRY+0x40e>
// 389: 4c 89 f8                      movq    %r15, %rax
// 38c: e9 15 fe ff ff                jmp     0x1a6 <_JIT_ENTRY+0x1a6>
// 391: 49 89 df                      movq    %rbx, %r15
// 394: e9 ee fc ff ff                jmp     0x87 <_JIT_ENTRY+0x87>
// 399: 41 83 fc 02                   cmpl    $0x2, %r12d
// 39d: bb 01 00 00 00                movl    $0x1, %ebx
// 3a2: 41 0f 43 dc                   cmovael %r12d, %ebx
// 3a6: 45 31 e4                      xorl    %r12d, %r12d
// 3a9: eb 0c                         jmp     0x3b7 <_JIT_ENTRY+0x3b7>
// 3ab: 49 ff c4                      incq    %r12
// 3ae: 4c 39 e3                      cmpq    %r12, %rbx
// 3b1: 0f 84 30 ff ff ff             je      0x2e7 <_JIT_ENTRY+0x2e7>
// 3b7: 4e 8b 6c e5 00                movq    (%rbp,%r12,8), %r13
// 3bc: 49 8b 45 00                   movq    (%r13), %rax
// 3c0: 48 85 c0                      testq   %rax, %rax
// 3c3: 7f 22                         jg      0x3e7 <_JIT_ENTRY+0x3e7>
// 3c5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003c7:  R_X86_64_64  .rodata.str1.1
// 3cf: be 4f 0b 00 00                movl    $0xb4f, %esi            # imm = 0xB4F
// 3d4: 4c 89 ea                      movq    %r13, %rdx
// 3d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003d9:  R_X86_64_64  _Py_NegativeRefcount
// 3e1: ff d0                         callq   *%rax
// 3e3: 49 8b 45 00                   movq    (%r13), %rax
// 3e7: 85 c0                         testl   %eax, %eax
// 3e9: 78 c0                         js      0x3ab <_JIT_ENTRY+0x3ab>
// 3eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003ed:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3f5: ff d0                         callq   *%rax
// 3f7: 49 ff 4d 00                   decq    (%r13)
// 3fb: 75 ae                         jne     0x3ab <_JIT_ENTRY+0x3ab>
// 3fd: 4c 89 ef                      movq    %r13, %rdi
// 400: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000402:  R_X86_64_64  _Py_Dealloc
// 40a: ff d0                         callq   *%rax
// 40c: eb 9d                         jmp     0x3ab <_JIT_ENTRY+0x3ab>
// 40e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000410:  R_X86_64_64  _JIT_CONTINUE
// 418: 48 89 ef                      movq    %rbp, %rdi
// 41b: 4c 89 fe                      movq    %r15, %rsi
// 41e: 48 89 da                      movq    %rbx, %rdx
// 421: 48 83 c4 28                   addq    $0x28, %rsp
// 425: 5b                            popq    %rbx
// 426: 41 5c                         popq    %r12
// 428: 41 5d                         popq    %r13
// 42a: 41 5e                         popq    %r14
// 42c: 41 5f                         popq    %r15
// 42e: 5d                            popq    %rbp
// 42f: ff e0                         jmpq    *%rax
// 431: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_BUILTIN_FAST_WITH_KEYWORDS_code_body[1074] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfd, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xcf, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4b, 0x8d, 0x1c, 0xc7, 0x48, 0x8b, 0x3b, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x38, 0x49, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7d, 0x40, 0x48, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x6c, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x73, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xb6, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x20, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x74, 0x34, 0x48, 0x8b, 0x0c, 0x24, 0x49, 0x8d, 0x1c, 0xcf, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xad, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd8, 0x48, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x45, 0x40, 0x31, 0xc0, 0xe9, 0xf5, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xed, 0xeb, 0x0f, 0x0f, 0x1f, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xee, 0x0f, 0x84, 0x29, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x2c, 0xeb, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x27, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x89, 0xd0, 0xf7, 0xd0, 0x48, 0x63, 0xf0, 0x4c, 0x8d, 0x0c, 0x36, 0x4b, 0x8b, 0x04, 0xcf, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xd7, 0x4c, 0x63, 0xf7, 0x49, 0x01, 0xf6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xce, 0x48, 0xf7, 0xde, 0x44, 0x8d, 0x62, 0x01, 0x48, 0x85, 0xc0, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xce, 0x44, 0x0f, 0x44, 0xe2, 0x4b, 0x8b, 0x34, 0xf7, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x56, 0x08, 0x0f, 0x85, 0xfc, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x46, 0x10, 0x41, 0x81, 0x78, 0x10, 0x82, 0x00, 0x00, 0x00, 0x0f, 0x85, 0xea, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x8d, 0x2c, 0xcb, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x48, 0x89, 0x74, 0x24, 0x08, 0x48, 0x8b, 0x7e, 0x18, 0x44, 0x89, 0xe2, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0x50, 0x08, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xb2, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x51, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x20, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xf7, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x4f, 0xfe, 0xff, 0xff, 0x4d, 0x8d, 0x3c, 0xdf, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0x9c, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x85, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf8, 0xe9, 0x15, 0xfe, 0xff, 0xff, 0x49, 0x89, 0xdf, 0xe9, 0xee, 0xfc, 0xff, 0xff, 0x41, 0x83, 0xfc, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xdc, 0x45, 0x31, 0xe4, 0xeb, 0x0c, 0x49, 0xff, 0xc4, 0x4c, 0x39, 0xe3, 0x0f, 0x84, 0x30, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xe5, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4f, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xc0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xae, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x9d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_BUILTIN_FAST_WITH_KEYWORDS_code_holes[27] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xee, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x11a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x140, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x283, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0x2d1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2f7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x301, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x327, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x339, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x374, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x3c7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x402, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x410, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_BUILTIN_FAST_WITH_KEYWORDS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_BUILTIN_FAST_WITH_KEYWORDS_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_BUILTIN_O
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_CALL_BUILTIN_O.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fd                      movq    %rdi, %rbp
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4b 8d 1c c6                   leaq    (%r14,%r8,8), %rbx
// 79: 48 8b 3b                      movq    (%rbx), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 38                         je      0xbf <_JIT_ENTRY+0xbf>
// 87: 49 29 ee                      subq    %rbp, %r14
// 8a: 49 83 c6 b8                   addq    $-0x48, %r14
// 8e: 49 c1 ee 03                   shrq    $0x3, %r14
// 92: 44 89 75 40                   movl    %r14d, 0x40(%rbp)
// 96: 48 8b 45 00                   movq    (%rbp), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// c4: 4c 89 4c 24 18                movq    %r9, 0x18(%rsp)
// c9: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// ce: 48 89 2c 24                   movq    %rbp, (%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 40 0f 94 c5                   sete    %bpl
// d9: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dd: 48 8d 73 08                   leaq    0x8(%rbx), %rsi
// e1: 48 63 d0                      movslq  %eax, %rdx
// e4: ff 51 08                      callq   *0x8(%rcx)
// e7: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ee:  R_X86_64_64  _JIT_OPARG
// f6: 66 85 c0                      testw   %ax, %ax
// f9: 0f 94 c0                      sete    %al
// fc: 40 84 c5                      testb   %al, %bpl
// ff: 0f 84 b6 00 00 00             je      0x1bb <_JIT_ENTRY+0x1bb>
// 105: 49 8b 04 24                   movq    (%r12), %rax
// 109: 48 85 c0                      testq   %rax, %rax
// 10c: 7f 22                         jg      0x130 <_JIT_ENTRY+0x130>
// 10e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000110:  R_X86_64_64  .rodata.str1.1
// 118: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011a:  R_X86_64_64  _Py_NegativeRefcount
// 122: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 127: 4c 89 e2                      movq    %r12, %rdx
// 12a: ff d0                         callq   *%rax
// 12c: 49 8b 04 24                   movq    (%r12), %rax
// 130: 85 c0                         testl   %eax, %eax
// 132: 48 8b 2c 24                   movq    (%rsp), %rbp
// 136: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 13b: 78 21                         js      0x15e <_JIT_ENTRY+0x15e>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 147: ff d0                         callq   *%rax
// 149: 49 ff 0c 24                   decq    (%r12)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_Dealloc
// 159: 4c 89 e7                      movq    %r12, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 163: 49 8d 1c c6                   leaq    (%r14,%rax,8), %rbx
// 167: 48 8b 4c 24 20                movq    0x20(%rsp), %rcx
// 16c: 48 85 c9                      testq   %rcx, %rcx
// 16f: 74 35                         je      0x1a6 <_JIT_ENTRY+0x1a6>
// 171: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 176: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 17a: 48 89 0b                      movq    %rcx, (%rbx)
// 17d: 49 8b 47 10                   movq    0x10(%r15), %rax
// 181: 48 8b 00                      movq    (%rax), %rax
// 184: 84 c0                         testb   %al, %al
// 186: 0f 84 ad 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _Py_HandlePending
// 196: 4c 89 ff                      movq    %r15, %rdi
// 199: ff d0                         callq   *%rax
// 19b: 85 c0                         testl   %eax, %eax
// 19d: 0f 84 96 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 1a3: 4c 89 eb                      movq    %r13, %rbx
// 1a6: 48 29 eb                      subq    %rbp, %rbx
// 1a9: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1ad: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1b1: 89 5d 40                      movl    %ebx, 0x40(%rbp)
// 1b4: 31 c0                         xorl    %eax, %eax
// 1b6: e9 f5 fe ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 1bb: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1bf: bd 01 00 00 00                movl    $0x1, %ebp
// 1c4: 41 0f 43 ed                   cmovael %r13d, %ebp
// 1c8: 45 31 ff                      xorl    %r15d, %r15d
// 1cb: eb 0f                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1cd: 0f 1f 00                      nopl    (%rax)
// 1d0: 49 ff c7                      incq    %r15
// 1d3: 4c 39 fd                      cmpq    %r15, %rbp
// 1d6: 0f 84 29 ff ff ff             je      0x105 <_JIT_ENTRY+0x105>
// 1dc: 4e 8b 2c fb                   movq    (%rbx,%r15,8), %r13
// 1e0: 49 8b 45 00                   movq    (%r13), %rax
// 1e4: 48 85 c0                      testq   %rax, %rax
// 1e7: 7e 07                         jle     0x1f0 <_JIT_ENTRY+0x1f0>
// 1e9: 85 c0                         testl   %eax, %eax
// 1eb: 78 e3                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1ed: eb 27                         jmp     0x216 <_JIT_ENTRY+0x216>
// 1ef: 90                            nop
// 1f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f2:  R_X86_64_64  .rodata.str1.1
// 1fa: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ff: 4c 89 ea                      movq    %r13, %rdx
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_NegativeRefcount
// 20c: ff d0                         callq   *%rax
// 20e: 49 8b 45 00                   movq    (%r13), %rax
// 212: 85 c0                         testl   %eax, %eax
// 214: 78 ba                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 220: ff d0                         callq   *%rax
// 222: 49 ff 4d 00                   decq    (%r13)
// 226: 75 a8                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 228: 4c 89 ef                      movq    %r13, %rdi
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_Dealloc
// 235: ff d0                         callq   *%rax
// 237: eb 97                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 239: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000023b:  R_X86_64_64  _JIT_OPARG
// 243: 0f b7 c2                      movzwl  %dx, %eax
// 246: 89 c1                         movl    %eax, %ecx
// 248: f7 d1                         notl    %ecx
// 24a: 48 63 c9                      movslq  %ecx, %rcx
// 24d: 4c 8d 3c 09                   leaq    (%rcx,%rcx), %r15
// 251: 0f b7 da                      movzwl  %dx, %ebx
// 254: 48 89 da                      movq    %rbx, %rdx
// 257: 48 f7 da                      negq    %rdx
// 25a: 31 f6                         xorl    %esi, %esi
// 25c: 66 85 db                      testw   %bx, %bx
// 25f: 40 0f 94 c6                   sete    %sil
// 263: 31 ff                         xorl    %edi, %edi
// 265: 66 83 fb 01                   cmpw    $0x1, %bx
// 269: 40 0f 94 c7                   sete    %dil
// 26d: 4b 83 3c fe 00                cmpq    $0x0, (%r14,%r15,8)
// 272: 48 f7 d3                      notq    %rbx
// 275: 48 0f 44 da                   cmoveq  %rdx, %rbx
// 279: 0f 44 f7                      cmovel  %edi, %esi
// 27c: 40 80 fe 01                   cmpb    $0x1, %sil
// 280: 75 55                         jne     0x2d7 <_JIT_ENTRY+0x2d7>
// 282: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 287: 29 c2                         subl    %eax, %edx
// 289: 48 63 ea                      movslq  %edx, %rbp
// 28c: 48 01 cd                      addq    %rcx, %rbp
// 28f: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 293: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000295:  R_X86_64_64  PyCFunction_Type
// 29d: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a2: 75 3b                         jne     0x2df <_JIT_ENTRY+0x2df>
// 2a4: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 2a9: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 2ad: 75 30                         jne     0x2df <_JIT_ENTRY+0x2df>
// 2af: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 2b3: 48 8b 74 24 10                movq    0x10(%rsp), %rsi
// 2b8: 8b 4e 2c                      movl    0x2c(%rsi), %ecx
// 2bb: 8d 51 ff                      leal    -0x1(%rcx), %edx
// 2be: 89 56 2c                      movl    %edx, 0x2c(%rsi)
// 2c1: 85 c9                         testl   %ecx, %ecx
// 2c3: 7e 26                         jle     0x2eb <_JIT_ENTRY+0x2eb>
// 2c5: 4d 8b 6c dd 00                movq    (%r13,%rbx,8), %r13
// 2ca: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 2ce: 75 5c                         jne     0x32c <_JIT_ENTRY+0x32c>
// 2d0: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// 2d5: eb 57                         jmp     0x32e <_JIT_ENTRY+0x32e>
// 2d7: 4d 89 ee                      movq    %r13, %r14
// 2da: e9 a8 fd ff ff                jmp     0x87 <_JIT_ENTRY+0x87>
// 2df: 4d 89 ee                      movq    %r13, %r14
// 2e2: 48 8b 2c 24                   movq    (%rsp), %rbp
// 2e6: e9 9c fd ff ff                jmp     0x87 <_JIT_ENTRY+0x87>
// 2eb: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// 2f0: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002f2:  R_X86_64_64  .rodata.str1.1+0x39
// 2fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fc:  R_X86_64_64  _Py_CheckRecursiveCall
// 304: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 309: ff d0                         callq   *%rax
// 30b: 85 c0                         testl   %eax, %eax
// 30d: 74 08                         je      0x317 <_JIT_ENTRY+0x317>
// 30f: 4c 89 eb                      movq    %r13, %rbx
// 312: e9 88 00 00 00                jmp     0x39f <_JIT_ENTRY+0x39f>
// 317: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 31c: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 321: 4d 8b 6c dd 00                movq    (%r13,%rbx,8), %r13
// 326: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 32a: 74 a4                         je      0x2d0 <_JIT_ENTRY+0x2d0>
// 32c: 31 ff                         xorl    %edi, %edi
// 32e: 49 8d 1c ee                   leaq    (%r14,%rbp,8), %rbx
// 332: 4c 89 ee                      movq    %r13, %rsi
// 335: 41 ff d0                      callq   *%r8
// 338: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 33d: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 342: ff 45 2c                      incl    0x2c(%rbp)
// 345: bf 02 0b 00 00                movl    $0xb02, %edi            # imm = 0xB02
// 34a: 4c 89 ee                      movq    %r13, %rsi
// 34d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000034f:  R_X86_64_64  .text+0x3d0
// 357: ff d0                         callq   *%rax
// 359: bf 03 0b 00 00                movl    $0xb03, %edi            # imm = 0xB03
// 35e: 4c 89 e6                      movq    %r12, %rsi
// 361: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000363:  R_X86_64_64  .text+0x3d0
// 36b: ff d0                         callq   *%rax
// 36d: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 372: 48 85 c0                      testq   %rax, %rax
// 375: 74 28                         je      0x39f <_JIT_ENTRY+0x39f>
// 377: 4f 8d 34 fe                   leaq    (%r14,%r15,8), %r14
// 37b: 48 89 03                      movq    %rax, (%rbx)
// 37e: 48 8b 45 10                   movq    0x10(%rbp), %rax
// 382: 48 8b 00                      movq    (%rax), %rax
// 385: 84 c0                         testb   %al, %al
// 387: 74 1f                         je      0x3a8 <_JIT_ENTRY+0x3a8>
// 389: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000038b:  R_X86_64_64  _Py_HandlePending
// 393: 48 89 ef                      movq    %rbp, %rdi
// 396: ff d0                         callq   *%rax
// 398: 85 c0                         testl   %eax, %eax
// 39a: 74 0c                         je      0x3a8 <_JIT_ENTRY+0x3a8>
// 39c: 4c 89 f3                      movq    %r14, %rbx
// 39f: 48 8b 2c 24                   movq    (%rsp), %rbp
// 3a3: e9 fe fd ff ff                jmp     0x1a6 <_JIT_ENTRY+0x1a6>
// 3a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003aa:  R_X86_64_64  _JIT_CONTINUE
// 3b2: 48 8b 3c 24                   movq    (%rsp), %rdi
// 3b6: 4c 89 f6                      movq    %r14, %rsi
// 3b9: 48 89 ea                      movq    %rbp, %rdx
// 3bc: 48 83 c4 28                   addq    $0x28, %rsp
// 3c0: 5b                            popq    %rbx
// 3c1: 41 5c                         popq    %r12
// 3c3: 41 5d                         popq    %r13
// 3c5: 41 5e                         popq    %r14
// 3c7: 41 5f                         popq    %r15
// 3c9: 5d                            popq    %rbp
// 3ca: ff e0                         jmpq    *%rax
// 3cc: 0f 1f 40 00                   nopl    (%rax)
// 
// 00000000000003d0 <Py_DECREF>:
// 3d0: 53                            pushq   %rbx
// 3d1: 48 89 f3                      movq    %rsi, %rbx
// 3d4: 48 8b 06                      movq    (%rsi), %rax
// 3d7: 48 85 c0                      testq   %rax, %rax
// 3da: 7e 06                         jle     0x3e2 <Py_DECREF+0x12>
// 3dc: 85 c0                         testl   %eax, %eax
// 3de: 79 24                         jns     0x404 <Py_DECREF+0x34>
// 3e0: eb 33                         jmp     0x415 <Py_DECREF+0x45>
// 3e2: 89 fe                         movl    %edi, %esi
// 3e4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003e6:  R_X86_64_64  .rodata.str1.1
// 3ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003f0:  R_X86_64_64  _Py_NegativeRefcount
// 3f8: 48 89 da                      movq    %rbx, %rdx
// 3fb: ff d0                         callq   *%rax
// 3fd: 48 8b 03                      movq    (%rbx), %rax
// 400: 85 c0                         testl   %eax, %eax
// 402: 78 11                         js      0x415 <Py_DECREF+0x45>
// 404: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000406:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 40e: ff d0                         callq   *%rax
// 410: 48 ff 0b                      decq    (%rbx)
// 413: 74 02                         je      0x417 <Py_DECREF+0x47>
// 415: 5b                            popq    %rbx
// 416: c3                            retq
// 417: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000419:  R_X86_64_64  _Py_Dealloc
// 421: 48 89 df                      movq    %rbx, %rdi
// 424: 5b                            popq    %rbx
// 425: ff e0                         jmpq    *%rax
// 427: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_BUILTIN_O_code_body[1064] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfd, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xce, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4b, 0x8d, 0x1c, 0xc6, 0x48, 0x8b, 0x3b, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x38, 0x49, 0x29, 0xee, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x75, 0x40, 0x48, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x4c, 0x24, 0x18, 0x48, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x2c, 0x24, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x73, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xb6, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x2c, 0x24, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x1c, 0xc6, 0x48, 0x8b, 0x4c, 0x24, 0x20, 0x48, 0x85, 0xc9, 0x74, 0x35, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x4d, 0x8d, 0x2c, 0xc6, 0x48, 0x89, 0x0b, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xad, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xeb, 0x48, 0x29, 0xeb, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x89, 0x5d, 0x40, 0x31, 0xc0, 0xe9, 0xf5, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xed, 0x45, 0x31, 0xff, 0xeb, 0x0f, 0x0f, 0x1f, 0x00, 0x49, 0xff, 0xc7, 0x4c, 0x39, 0xfd, 0x0f, 0x84, 0x29, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x2c, 0xfb, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x27, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc2, 0x89, 0xc1, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x4c, 0x8d, 0x3c, 0x09, 0x0f, 0xb7, 0xda, 0x48, 0x89, 0xda, 0x48, 0xf7, 0xda, 0x31, 0xf6, 0x66, 0x85, 0xdb, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xfb, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x4b, 0x83, 0x3c, 0xfe, 0x00, 0x48, 0xf7, 0xd3, 0x48, 0x0f, 0x44, 0xda, 0x0f, 0x44, 0xf7, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x55, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x48, 0x63, 0xea, 0x48, 0x01, 0xcd, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x3b, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x30, 0x4c, 0x8b, 0x40, 0x08, 0x48, 0x8b, 0x74, 0x24, 0x10, 0x8b, 0x4e, 0x2c, 0x8d, 0x51, 0xff, 0x89, 0x56, 0x2c, 0x85, 0xc9, 0x7e, 0x26, 0x4d, 0x8b, 0x6c, 0xdd, 0x00, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x5c, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x57, 0x4d, 0x89, 0xee, 0xe9, 0xa8, 0xfd, 0xff, 0xff, 0x4d, 0x89, 0xee, 0x48, 0x8b, 0x2c, 0x24, 0xe9, 0x9c, 0xfd, 0xff, 0xff, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x08, 0x4c, 0x89, 0xeb, 0xe9, 0x88, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4d, 0x8b, 0x6c, 0xdd, 0x00, 0xf6, 0x40, 0x10, 0x20, 0x74, 0xa4, 0x31, 0xff, 0x49, 0x8d, 0x1c, 0xee, 0x4c, 0x89, 0xee, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0xff, 0x45, 0x2c, 0xbf, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xbf, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x74, 0x28, 0x4f, 0x8d, 0x34, 0xfe, 0x48, 0x89, 0x03, 0x48, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x1f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x0c, 0x4c, 0x89, 0xf3, 0x48, 0x8b, 0x2c, 0x24, 0xe9, 0xfe, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x0f, 0x1f, 0x40, 0x00, 0x53, 0x48, 0x89, 0xf3, 0x48, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x24, 0xeb, 0x33, 0x89, 0xfe, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x74, 0x02, 0x5b, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x5b, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_BUILTIN_O_code_holes[26] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xee, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x11a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x295, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0x2f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2fc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x34f, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x3d0},
    {0x363, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x3d0},
    {0x38b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x3aa, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x3e6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3f0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x406, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x419, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_BUILTIN_O_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_BUILTIN_O_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_INTRINSIC_1
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_CALL_INTRINSIC_1.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d7                   movq    (%r15,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 df                   movq    (%r15,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c cf                   leaq    (%r15,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 c7                      subq    %r8, %r15
// 8b: 49 83 c7 b8                   addq    $-0x48, %r15
// 8f: 49 c1 ef 03                   shrq    $0x3, %r15
// 93: 45 89 78 40                   movl    %r15d, 0x40(%r8)
// 97: 49 8b 00                      movq    (%r8), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 5c 24 18                movq    %r11, 0x18(%rsp)
// c4: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// c9: 48 89 14 24                   movq    %rdx, (%rsp)
// cd: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 aa 00 00 00             je      0x1ad <_JIT_ENTRY+0x1ad>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 1c 24                   movq    (%rsp), %rbx
// 134: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 139: 78 21                         js      0x15c <_JIT_ENTRY+0x15c>
// 13b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 145: ff d0                         callq   *%rax
// 147: 49 ff 0c 24                   decq    (%r12)
// 14b: 75 0f                         jne     0x15c <_JIT_ENTRY+0x15c>
// 14d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014f:  R_X86_64_64  _Py_Dealloc
// 157: 4c 89 e7                      movq    %r12, %rdi
// 15a: ff d0                         callq   *%rax
// 15c: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 161: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 165: 4d 85 ed                      testq   %r13, %r13
// 168: 4c 8b 74 24 20                movq    0x20(%rsp), %r14
// 16d: 0f 84 70 01 00 00             je      0x2e3 <_JIT_ENTRY+0x2e3>
// 173: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 178: 4d 8d 24 cf                   leaq    (%r15,%rcx,8), %r12
// 17c: 4c 89 28                      movq    %r13, (%rax)
// 17f: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 183: 48 8b 00                      movq    (%rax), %rax
// 186: 84 c0                         testb   %al, %al
// 188: 0f 84 9b 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_HandlePending
// 198: 48 89 df                      movq    %rbx, %rdi
// 19b: ff d0                         callq   *%rax
// 19d: 85 c0                         testl   %eax, %eax
// 19f: 0f 84 84 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 1a5: 4c 89 e0                      movq    %r12, %rax
// 1a8: e9 36 01 00 00                jmp     0x2e3 <_JIT_ENTRY+0x2e3>
// 1ad: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1b1: 41 be 01 00 00 00             movl    $0x1, %r14d
// 1b7: 45 0f 43 f5                   cmovael %r13d, %r14d
// 1bb: 31 db                         xorl    %ebx, %ebx
// 1bd: eb 0d                         jmp     0x1cc <_JIT_ENTRY+0x1cc>
// 1bf: 90                            nop
// 1c0: 48 ff c3                      incq    %rbx
// 1c3: 49 39 de                      cmpq    %rbx, %r14
// 1c6: 0f 84 37 ff ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 1cc: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1d1: 49 8b 45 00                   movq    (%r13), %rax
// 1d5: 48 85 c0                      testq   %rax, %rax
// 1d8: 7e 06                         jle     0x1e0 <_JIT_ENTRY+0x1e0>
// 1da: 85 c0                         testl   %eax, %eax
// 1dc: 78 e2                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 1de: eb 26                         jmp     0x206 <_JIT_ENTRY+0x206>
// 1e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e2:  R_X86_64_64  .rodata.str1.1
// 1ea: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ef: 4c 89 ea                      movq    %r13, %rdx
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _Py_NegativeRefcount
// 1fc: ff d0                         callq   *%rax
// 1fe: 49 8b 45 00                   movq    (%r13), %rax
// 202: 85 c0                         testl   %eax, %eax
// 204: 78 ba                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 210: ff d0                         callq   *%rax
// 212: 49 ff 4d 00                   decq    (%r13)
// 216: 75 a8                         jne     0x1c0 <_JIT_ENTRY+0x1c0>
// 218: 4c 89 ef                      movq    %r13, %rdi
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_Dealloc
// 225: ff d0                         callq   *%rax
// 227: eb 97                         jmp     0x1c0 <_JIT_ENTRY+0x1c0>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _JIT_OPARG
// 233: 0f b7 c8                      movzwl  %ax, %ecx
// 236: f7 d0                         notl    %eax
// 238: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 23d: 48 89 df                      movq    %rbx, %rdi
// 240: 48 63 d8                      movslq  %eax, %rbx
// 243: 49 8b 6c df f8                movq    -0x8(%r15,%rbx,8), %rbp
// 248: 48 c1 e1 04                   shlq    $0x4, %rcx
// 24c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024e:  R_X86_64_64  _PyIntrinsics_UnaryFunctions
// 256: 48 89 ee                      movq    %rbp, %rsi
// 259: ff 14 01                      callq   *(%rcx,%rax)
// 25c: 49 89 c5                      movq    %rax, %r13
// 25f: 48 8b 45 00                   movq    (%rbp), %rax
// 263: 48 85 c0                      testq   %rax, %rax
// 266: 7f 22                         jg      0x28a <_JIT_ENTRY+0x28a>
// 268: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000026a:  R_X86_64_64  .rodata.str1.1
// 272: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000274:  R_X86_64_64  _Py_NegativeRefcount
// 27c: be 7e 02 00 00                movl    $0x27e, %esi            # imm = 0x27E
// 281: 48 89 ea                      movq    %rbp, %rdx
// 284: ff d0                         callq   *%rax
// 286: 48 8b 45 00                   movq    (%rbp), %rax
// 28a: 85 c0                         testl   %eax, %eax
// 28c: 78 21                         js      0x2af <_JIT_ENTRY+0x2af>
// 28e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000290:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 298: ff d0                         callq   *%rax
// 29a: 48 ff 4d 00                   decq    (%rbp)
// 29e: 75 0f                         jne     0x2af <_JIT_ENTRY+0x2af>
// 2a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a2:  R_X86_64_64  _Py_Dealloc
// 2aa: 48 89 ef                      movq    %rbp, %rdi
// 2ad: ff d0                         callq   *%rax
// 2af: 49 8d 04 df                   leaq    (%r15,%rbx,8), %rax
// 2b3: 48 83 c0 f8                   addq    $-0x8, %rax
// 2b7: 4d 85 ed                      testq   %r13, %r13
// 2ba: 74 27                         je      0x2e3 <_JIT_ENTRY+0x2e3>
// 2bc: 4c 89 28                      movq    %r13, (%rax)
// 2bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c1:  R_X86_64_64  _JIT_CONTINUE
// 2c9: 4c 89 f7                      movq    %r14, %rdi
// 2cc: 4c 89 e6                      movq    %r12, %rsi
// 2cf: 48 8b 14 24                   movq    (%rsp), %rdx
// 2d3: 48 83 c4 28                   addq    $0x28, %rsp
// 2d7: 5b                            popq    %rbx
// 2d8: 41 5c                         popq    %r12
// 2da: 41 5d                         popq    %r13
// 2dc: 41 5e                         popq    %r14
// 2de: 41 5f                         popq    %r15
// 2e0: 5d                            popq    %rbp
// 2e1: ff e0                         jmpq    *%rax
// 2e3: 4c 29 f0                      subq    %r14, %rax
// 2e6: 48 83 c0 b8                   addq    $-0x48, %rax
// 2ea: 48 c1 e8 03                   shrq    $0x3, %rax
// 2ee: 41 89 46 40                   movl    %eax, 0x40(%r14)
// 2f2: 31 c0                         xorl    %eax, %eax
// 2f4: e9 b7 fd ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 2f9: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_INTRINSIC_1_code_body[762] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd7, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xdf, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xcf, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x78, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x18, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x14, 0x24, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xaa, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x04, 0xc7, 0x4d, 0x85, 0xed, 0x4c, 0x8b, 0x74, 0x24, 0x20, 0x0f, 0x84, 0x70, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x4d, 0x8d, 0x24, 0xcf, 0x4c, 0x89, 0x28, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0x9b, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x84, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0xe9, 0x36, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xdb, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x37, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x89, 0xdf, 0x48, 0x63, 0xd8, 0x49, 0x8b, 0x6c, 0xdf, 0xf8, 0x48, 0xc1, 0xe1, 0x04, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xee, 0xff, 0x14, 0x01, 0x49, 0x89, 0xc5, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x7e, 0x02, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xdf, 0x48, 0x83, 0xc0, 0xf8, 0x4d, 0x85, 0xed, 0x74, 0x27, 0x4c, 0x89, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x29, 0xf0, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x46, 0x40, 0x31, 0xc0, 0xe9, 0xb7, 0xfd, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_INTRINSIC_1_code_holes[21] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x24e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyIntrinsics_UnaryFunctions, 0x0},
    {0x26a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x274, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x290, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2a2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2c1, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_INTRINSIC_1_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_INTRINSIC_1_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_INTRINSIC_2
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_CALL_INTRINSIC_2.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d6                   movq    (%r14,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 de                   movq    (%r14,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c ce                   leaq    (%r14,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 c6                      subq    %r8, %r14
// 8b: 49 83 c6 b8                   addq    $-0x48, %r14
// 8f: 49 c1 ee 03                   shrq    $0x3, %r14
// 93: 45 89 70 40                   movl    %r14d, 0x40(%r8)
// 97: 49 8b 00                      movq    (%r8), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 5c 24 18                movq    %r11, 0x18(%rsp)
// c4: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// c9: 48 89 14 24                   movq    %rdx, (%rsp)
// cd: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 a7 00 00 00             je      0x1aa <_JIT_ENTRY+0x1aa>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 135: 4c 8b 3c 24                   movq    (%rsp), %r15
// 139: 78 21                         js      0x15c <_JIT_ENTRY+0x15c>
// 13b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 145: ff d0                         callq   *%rax
// 147: 49 ff 0c 24                   decq    (%r12)
// 14b: 75 0f                         jne     0x15c <_JIT_ENTRY+0x15c>
// 14d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014f:  R_X86_64_64  _Py_Dealloc
// 157: 4c 89 e7                      movq    %r12, %rdi
// 15a: ff d0                         callq   *%rax
// 15c: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 161: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 165: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 16a: 48 85 c9                      testq   %rcx, %rcx
// 16d: 0f 84 cd 01 00 00             je      0x340 <_JIT_ENTRY+0x340>
// 173: 48 89 08                      movq    %rcx, (%rax)
// 176: 49 8b 47 10                   movq    0x10(%r15), %rax
// 17a: 48 8b 00                      movq    (%rax), %rax
// 17d: 84 c0                         testb   %al, %al
// 17f: 0f 84 a4 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 185: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000187:  R_X86_64_64  _Py_HandlePending
// 18f: 4c 89 ff                      movq    %r15, %rdi
// 192: ff d0                         callq   *%rax
// 194: 85 c0                         testl   %eax, %eax
// 196: 0f 84 8d 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 19c: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1a1: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 1a5: e9 96 01 00 00                jmp     0x340 <_JIT_ENTRY+0x340>
// 1aa: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1ae: bb 01 00 00 00                movl    $0x1, %ebx
// 1b3: 41 0f 43 dd                   cmovael %r13d, %ebx
// 1b7: 45 31 ff                      xorl    %r15d, %r15d
// 1ba: eb 10                         jmp     0x1cc <_JIT_ENTRY+0x1cc>
// 1bc: 0f 1f 40 00                   nopl    (%rax)
// 1c0: 49 ff c7                      incq    %r15
// 1c3: 4c 39 fb                      cmpq    %r15, %rbx
// 1c6: 0f 84 37 ff ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 1cc: 4e 8b 6c fd 00                movq    (%rbp,%r15,8), %r13
// 1d1: 49 8b 45 00                   movq    (%r13), %rax
// 1d5: 48 85 c0                      testq   %rax, %rax
// 1d8: 7e 06                         jle     0x1e0 <_JIT_ENTRY+0x1e0>
// 1da: 85 c0                         testl   %eax, %eax
// 1dc: 78 e2                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 1de: eb 26                         jmp     0x206 <_JIT_ENTRY+0x206>
// 1e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e2:  R_X86_64_64  .rodata.str1.1
// 1ea: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ef: 4c 89 ea                      movq    %r13, %rdx
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _Py_NegativeRefcount
// 1fc: ff d0                         callq   *%rax
// 1fe: 49 8b 45 00                   movq    (%r13), %rax
// 202: 85 c0                         testl   %eax, %eax
// 204: 78 ba                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 210: ff d0                         callq   *%rax
// 212: 49 ff 4d 00                   decq    (%r13)
// 216: 75 a8                         jne     0x1c0 <_JIT_ENTRY+0x1c0>
// 218: 4c 89 ef                      movq    %r13, %rdi
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_Dealloc
// 225: ff d0                         callq   *%rax
// 227: eb 97                         jmp     0x1c0 <_JIT_ENTRY+0x1c0>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _JIT_OPARG
// 233: 0f b7 c8                      movzwl  %ax, %ecx
// 236: f7 d0                         notl    %eax
// 238: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 23d: 4c 89 ff                      movq    %r15, %rdi
// 240: 4c 63 f8                      movslq  %eax, %r15
// 243: 4b 8b 6c fe f0                movq    -0x10(%r14,%r15,8), %rbp
// 248: 4f 8b 6c fe f8                movq    -0x8(%r14,%r15,8), %r13
// 24d: 48 c1 e1 04                   shlq    $0x4, %rcx
// 251: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000253:  R_X86_64_64  _PyIntrinsics_BinaryFunctions
// 25b: 48 89 ee                      movq    %rbp, %rsi
// 25e: 4c 89 ea                      movq    %r13, %rdx
// 261: ff 14 01                      callq   *(%rcx,%rax)
// 264: 49 89 c4                      movq    %rax, %r12
// 267: 48 8b 45 00                   movq    (%rbp), %rax
// 26b: 48 85 c0                      testq   %rax, %rax
// 26e: 7f 22                         jg      0x292 <_JIT_ENTRY+0x292>
// 270: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000272:  R_X86_64_64  .rodata.str1.1
// 27a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027c:  R_X86_64_64  _Py_NegativeRefcount
// 284: be 8d 02 00 00                movl    $0x28d, %esi            # imm = 0x28D
// 289: 48 89 ea                      movq    %rbp, %rdx
// 28c: ff d0                         callq   *%rax
// 28e: 48 8b 45 00                   movq    (%rbp), %rax
// 292: 85 c0                         testl   %eax, %eax
// 294: 78 21                         js      0x2b7 <_JIT_ENTRY+0x2b7>
// 296: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000298:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a0: ff d0                         callq   *%rax
// 2a2: 48 ff 4d 00                   decq    (%rbp)
// 2a6: 75 0f                         jne     0x2b7 <_JIT_ENTRY+0x2b7>
// 2a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002aa:  R_X86_64_64  _Py_Dealloc
// 2b2: 48 89 ef                      movq    %rbp, %rdi
// 2b5: ff d0                         callq   *%rax
// 2b7: 49 8b 45 00                   movq    (%r13), %rax
// 2bb: 48 85 c0                      testq   %rax, %rax
// 2be: 7f 22                         jg      0x2e2 <_JIT_ENTRY+0x2e2>
// 2c0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002c2:  R_X86_64_64  .rodata.str1.1
// 2ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cc:  R_X86_64_64  _Py_NegativeRefcount
// 2d4: be 8e 02 00 00                movl    $0x28e, %esi            # imm = 0x28E
// 2d9: 4c 89 ea                      movq    %r13, %rdx
// 2dc: ff d0                         callq   *%rax
// 2de: 49 8b 45 00                   movq    (%r13), %rax
// 2e2: 85 c0                         testl   %eax, %eax
// 2e4: 78 21                         js      0x307 <_JIT_ENTRY+0x307>
// 2e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2f0: ff d0                         callq   *%rax
// 2f2: 49 ff 4d 00                   decq    (%r13)
// 2f6: 75 0f                         jne     0x307 <_JIT_ENTRY+0x307>
// 2f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fa:  R_X86_64_64  _Py_Dealloc
// 302: 4c 89 ef                      movq    %r13, %rdi
// 305: ff d0                         callq   *%rax
// 307: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 30b: 48 83 c0 f0                   addq    $-0x10, %rax
// 30f: 4d 85 e4                      testq   %r12, %r12
// 312: 74 2c                         je      0x340 <_JIT_ENTRY+0x340>
// 314: 4b 8d 34 fe                   leaq    (%r14,%r15,8), %rsi
// 318: 48 83 c6 f8                   addq    $-0x8, %rsi
// 31c: 4c 89 20                      movq    %r12, (%rax)
// 31f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000321:  R_X86_64_64  _JIT_CONTINUE
// 329: 48 89 df                      movq    %rbx, %rdi
// 32c: 48 8b 14 24                   movq    (%rsp), %rdx
// 330: 48 83 c4 28                   addq    $0x28, %rsp
// 334: 5b                            popq    %rbx
// 335: 41 5c                         popq    %r12
// 337: 41 5d                         popq    %r13
// 339: 41 5e                         popq    %r14
// 33b: 41 5f                         popq    %r15
// 33d: 5d                            popq    %rbp
// 33e: ff e0                         jmpq    *%rax
// 340: 48 29 d8                      subq    %rbx, %rax
// 343: 48 83 c0 b8                   addq    $-0x48, %rax
// 347: 48 c1 e8 03                   shrq    $0x3, %rax
// 34b: 89 43 40                      movl    %eax, 0x40(%rbx)
// 34e: 31 c0                         xorl    %eax, %eax
// 350: e9 5b fd ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 355: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_INTRINSIC_2_code_body[854] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd6, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xde, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xce, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc6, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x70, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x18, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x14, 0x24, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xa7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x3c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xcd, 0x01, 0x00, 0x00, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xa4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x8d, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc6, 0xe9, 0x96, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xdd, 0x45, 0x31, 0xff, 0xeb, 0x10, 0x0f, 0x1f, 0x40, 0x00, 0x49, 0xff, 0xc7, 0x4c, 0x39, 0xfb, 0x0f, 0x84, 0x37, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xfd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x89, 0xff, 0x4c, 0x63, 0xf8, 0x4b, 0x8b, 0x6c, 0xfe, 0xf0, 0x4f, 0x8b, 0x6c, 0xfe, 0xf8, 0x48, 0xc1, 0xe1, 0x04, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xee, 0x4c, 0x89, 0xea, 0xff, 0x14, 0x01, 0x49, 0x89, 0xc4, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x8d, 0x02, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x8e, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x83, 0xc0, 0xf0, 0x4d, 0x85, 0xe4, 0x74, 0x2c, 0x4b, 0x8d, 0x34, 0xfe, 0x48, 0x83, 0xc6, 0xf8, 0x4c, 0x89, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x5b, 0xfd, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_INTRINSIC_2_code_holes[25] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x187, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyIntrinsics_BinaryFunctions, 0x0},
    {0x272, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x27c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x298, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2aa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2cc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2fa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x321, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_INTRINSIC_2_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_INTRINSIC_2_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_ISINSTANCE
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_CALL_ISINSTANCE.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d6                   movq    (%r14,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 de                   movq    (%r14,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4b 8d 1c ce                   leaq    (%r14,%r9,8), %rbx
// 79: 48 8b 3b                      movq    (%rbx), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 4d 29 c6                      subq    %r8, %r14
// 8a: 49 83 c6 b8                   addq    $-0x48, %r14
// 8e: 49 c1 ee 03                   shrq    $0x3, %r14
// 92: 45 89 70 40                   movl    %r14d, 0x40(%r8)
// 96: 49 8b 00                      movq    (%r8), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 5c 24 08                movq    %r11, 0x8(%rsp)
// c3: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c8: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cd: 4c 89 04 24                   movq    %r8, (%rsp)
// d1: 48 85 c0                      testq   %rax, %rax
// d4: 40 0f 94 c5                   sete    %bpl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 73 08                   leaq    0x8(%rbx), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 14 01 00 00             je      0x218 <_JIT_ENTRY+0x218>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// 136: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 13b: 4c 8b 6c 24 20                movq    0x20(%rsp), %r13
// 140: 78 21                         js      0x163 <_JIT_ENTRY+0x163>
// 142: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000144:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 14c: ff d0                         callq   *%rax
// 14e: 49 ff 0c 24                   decq    (%r12)
// 152: 75 0f                         jne     0x163 <_JIT_ENTRY+0x163>
// 154: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000156:  R_X86_64_64  _Py_Dealloc
// 15e: 4c 89 e7                      movq    %r12, %rdi
// 161: ff d0                         callq   *%rax
// 163: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 168: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 16c: 4d 85 ed                      testq   %r13, %r13
// 16f: 0f 84 24 01 00 00             je      0x299 <_JIT_ENTRY+0x299>
// 175: 4f 8d 24 fe                   leaq    (%r14,%r15,8), %r12
// 179: 4c 89 28                      movq    %r13, (%rax)
// 17c: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 180: 48 8b 00                      movq    (%rax), %rax
// 183: 84 c0                         testb   %al, %al
// 185: 74 17                         je      0x19e <_JIT_ENTRY+0x19e>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _Py_HandlePending
// 191: 48 89 df                      movq    %rbx, %rdi
// 194: ff d0                         callq   *%rax
// 196: 85 c0                         testl   %eax, %eax
// 198: 0f 85 fe 00 00 00             jne     0x29c <_JIT_ENTRY+0x29c>
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  _JIT_OPARG
// 1a8: 0f b7 c8                      movzwl  %ax, %ecx
// 1ab: 89 ca                         movl    %ecx, %edx
// 1ad: f7 d2                         notl    %edx
// 1af: 48 63 d2                      movslq  %edx, %rdx
// 1b2: 48 8d 2c 12                   leaq    (%rdx,%rdx), %rbp
// 1b6: 0f b7 c0                      movzwl  %ax, %eax
// 1b9: 48 89 c6                      movq    %rax, %rsi
// 1bc: 48 f7 de                      negq    %rsi
// 1bf: 31 ff                         xorl    %edi, %edi
// 1c1: 66 83 f8 01                   cmpw    $0x1, %ax
// 1c5: 40 0f 94 c7                   sete    %dil
// 1c9: 45 31 c0                      xorl    %r8d, %r8d
// 1cc: 66 83 f8 02                   cmpw    $0x2, %ax
// 1d0: 41 0f 94 c0                   sete    %r8b
// 1d4: 49 83 3c ee 00                cmpq    $0x0, (%r14,%rbp,8)
// 1d9: 48 f7 d0                      notq    %rax
// 1dc: 48 0f 44 c6                   cmoveq  %rsi, %rax
// 1e0: 41 0f 44 f8                   cmovel  %r8d, %edi
// 1e4: 40 80 ff 01                   cmpb    $0x1, %dil
// 1e8: 75 22                         jne     0x20c <_JIT_ENTRY+0x20c>
// 1ea: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 1ef: 29 ce                         subl    %ecx, %esi
// 1f1: 4c 63 fe                      movslq  %esi, %r15
// 1f4: 49 01 d7                      addq    %rdx, %r15
// 1f7: 4b 8b 14 fe                   movq    (%r14,%r15,8), %rdx
// 1fb: 48 8b 4b 10                   movq    0x10(%rbx), %rcx
// 1ff: 48 3b 91 b8 54 06 00          cmpq    0x654b8(%rcx), %rdx
// 206: 0f 84 aa 00 00 00             je      0x2b6 <_JIT_ENTRY+0x2b6>
// 20c: 4d 89 e6                      movq    %r12, %r14
// 20f: 4c 8b 04 24                   movq    (%rsp), %r8
// 213: e9 6f fe ff ff                jmp     0x87 <_JIT_ENTRY+0x87>
// 218: 41 83 fd 02                   cmpl    $0x2, %r13d
// 21c: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 222: 45 0f 43 fd                   cmovael %r13d, %r15d
// 226: 31 ed                         xorl    %ebp, %ebp
// 228: eb 12                         jmp     0x23c <_JIT_ENTRY+0x23c>
// 22a: 66 0f 1f 44 00 00             nopw    (%rax,%rax)
// 230: 48 ff c5                      incq    %rbp
// 233: 49 39 ef                      cmpq    %rbp, %r15
// 236: 0f 84 c8 fe ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 23c: 4c 8b 2c eb                   movq    (%rbx,%rbp,8), %r13
// 240: 49 8b 45 00                   movq    (%r13), %rax
// 244: 48 85 c0                      testq   %rax, %rax
// 247: 7e 07                         jle     0x250 <_JIT_ENTRY+0x250>
// 249: 85 c0                         testl   %eax, %eax
// 24b: 78 e3                         js      0x230 <_JIT_ENTRY+0x230>
// 24d: eb 27                         jmp     0x276 <_JIT_ENTRY+0x276>
// 24f: 90                            nop
// 250: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000252:  R_X86_64_64  .rodata.str1.1
// 25a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 25f: 4c 89 ea                      movq    %r13, %rdx
// 262: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000264:  R_X86_64_64  _Py_NegativeRefcount
// 26c: ff d0                         callq   *%rax
// 26e: 49 8b 45 00                   movq    (%r13), %rax
// 272: 85 c0                         testl   %eax, %eax
// 274: 78 ba                         js      0x230 <_JIT_ENTRY+0x230>
// 276: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000278:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 280: ff d0                         callq   *%rax
// 282: 49 ff 4d 00                   decq    (%r13)
// 286: 75 a8                         jne     0x230 <_JIT_ENTRY+0x230>
// 288: 4c 89 ef                      movq    %r13, %rdi
// 28b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028d:  R_X86_64_64  _Py_Dealloc
// 295: ff d0                         callq   *%rax
// 297: eb 97                         jmp     0x230 <_JIT_ENTRY+0x230>
// 299: 49 89 c4                      movq    %rax, %r12
// 29c: 48 8b 04 24                   movq    (%rsp), %rax
// 2a0: 49 29 c4                      subq    %rax, %r12
// 2a3: 49 83 c4 b8                   addq    $-0x48, %r12
// 2a7: 49 c1 ec 03                   shrq    $0x3, %r12
// 2ab: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 2af: 31 c0                         xorl    %eax, %eax
// 2b1: e9 f9 fd ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 2b6: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 2bb: 4d 8b 2c c4                   movq    (%r12,%rax,8), %r13
// 2bf: 49 8b 74 c4 08                movq    0x8(%r12,%rax,8), %rsi
// 2c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c6:  R_X86_64_64  PyObject_IsInstance
// 2ce: 4c 89 ef                      movq    %r13, %rdi
// 2d1: 48 89 f3                      movq    %rsi, %rbx
// 2d4: ff d0                         callq   *%rax
// 2d6: 85 c0                         testl   %eax, %eax
// 2d8: 78 c2                         js      0x29c <_JIT_ENTRY+0x29c>
// 2da: 89 c7                         movl    %eax, %edi
// 2dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002de:  R_X86_64_64  PyBool_FromLong
// 2e6: ff d0                         callq   *%rax
// 2e8: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 2ed: 49 8b 45 00                   movq    (%r13), %rax
// 2f1: 48 85 c0                      testq   %rax, %rax
// 2f4: 7f 22                         jg      0x318 <_JIT_ENTRY+0x318>
// 2f6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002f8:  R_X86_64_64  .rodata.str1.1
// 300: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000302:  R_X86_64_64  _Py_NegativeRefcount
// 30a: be 96 0b 00 00                movl    $0xb96, %esi            # imm = 0xB96
// 30f: 4c 89 ea                      movq    %r13, %rdx
// 312: ff d0                         callq   *%rax
// 314: 49 8b 45 00                   movq    (%r13), %rax
// 318: 85 c0                         testl   %eax, %eax
// 31a: 49 89 dc                      movq    %rbx, %r12
// 31d: 78 21                         js      0x340 <_JIT_ENTRY+0x340>
// 31f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000321:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 329: ff d0                         callq   *%rax
// 32b: 49 ff 4d 00                   decq    (%r13)
// 32f: 75 0f                         jne     0x340 <_JIT_ENTRY+0x340>
// 331: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000333:  R_X86_64_64  _Py_Dealloc
// 33b: 4c 89 ef                      movq    %r13, %rdi
// 33e: ff d0                         callq   *%rax
// 340: 49 8b 04 24                   movq    (%r12), %rax
// 344: 48 85 c0                      testq   %rax, %rax
// 347: 7f 22                         jg      0x36b <_JIT_ENTRY+0x36b>
// 349: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000034b:  R_X86_64_64  .rodata.str1.1
// 353: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000355:  R_X86_64_64  _Py_NegativeRefcount
// 35d: be 97 0b 00 00                movl    $0xb97, %esi            # imm = 0xB97
// 362: 4c 89 e2                      movq    %r12, %rdx
// 365: ff d0                         callq   *%rax
// 367: 49 8b 04 24                   movq    (%r12), %rax
// 36b: 85 c0                         testl   %eax, %eax
// 36d: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 372: 78 21                         js      0x395 <_JIT_ENTRY+0x395>
// 374: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000376:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 37e: ff d0                         callq   *%rax
// 380: 49 ff 0c 24                   decq    (%r12)
// 384: 75 0f                         jne     0x395 <_JIT_ENTRY+0x395>
// 386: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000388:  R_X86_64_64  _Py_Dealloc
// 390: 4c 89 e7                      movq    %r12, %rdi
// 393: ff d0                         callq   *%rax
// 395: 48 8b 03                      movq    (%rbx), %rax
// 398: 48 85 c0                      testq   %rax, %rax
// 39b: 7f 21                         jg      0x3be <_JIT_ENTRY+0x3be>
// 39d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000039f:  R_X86_64_64  .rodata.str1.1
// 3a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a9:  R_X86_64_64  _Py_NegativeRefcount
// 3b1: be 98 0b 00 00                movl    $0xb98, %esi            # imm = 0xB98
// 3b6: 48 89 da                      movq    %rbx, %rdx
// 3b9: ff d0                         callq   *%rax
// 3bb: 48 8b 03                      movq    (%rbx), %rax
// 3be: 85 c0                         testl   %eax, %eax
// 3c0: 78 20                         js      0x3e2 <_JIT_ENTRY+0x3e2>
// 3c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003c4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3cc: ff d0                         callq   *%rax
// 3ce: 48 ff 0b                      decq    (%rbx)
// 3d1: 75 0f                         jne     0x3e2 <_JIT_ENTRY+0x3e2>
// 3d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003d5:  R_X86_64_64  _Py_Dealloc
// 3dd: 48 89 df                      movq    %rbx, %rdi
// 3e0: ff d0                         callq   *%rax
// 3e2: 4f 8d 24 fe                   leaq    (%r14,%r15,8), %r12
// 3e6: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 3eb: 48 85 c0                      testq   %rax, %rax
// 3ee: 0f 84 a8 fe ff ff             je      0x29c <_JIT_ENTRY+0x29c>
// 3f4: 49 8d 34 ee                   leaq    (%r14,%rbp,8), %rsi
// 3f8: 49 89 04 24                   movq    %rax, (%r12)
// 3fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003fe:  R_X86_64_64  _JIT_CONTINUE
// 406: 48 8b 3c 24                   movq    (%rsp), %rdi
// 40a: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 40f: 48 83 c4 28                   addq    $0x28, %rsp
// 413: 5b                            popq    %rbx
// 414: 41 5c                         popq    %r12
// 416: 41 5d                         popq    %r13
// 418: 41 5e                         popq    %r14
// 41a: 41 5f                         popq    %r15
// 41c: 5d                            popq    %rbp
// 41d: ff e0                         jmpq    *%rax
// 41f: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_ISINSTANCE_code_body[1056] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd6, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xde, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4b, 0x8d, 0x1c, 0xce, 0x48, 0x8b, 0x3b, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc6, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x70, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x08, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x73, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0x14, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x4c, 0x8b, 0x6c, 0x24, 0x20, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc6, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x24, 0x01, 0x00, 0x00, 0x4f, 0x8d, 0x24, 0xfe, 0x4c, 0x89, 0x28, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xfe, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x89, 0xca, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x48, 0x8d, 0x2c, 0x12, 0x0f, 0xb7, 0xc0, 0x48, 0x89, 0xc6, 0x48, 0xf7, 0xde, 0x31, 0xff, 0x66, 0x83, 0xf8, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x45, 0x31, 0xc0, 0x66, 0x83, 0xf8, 0x02, 0x41, 0x0f, 0x94, 0xc0, 0x49, 0x83, 0x3c, 0xee, 0x00, 0x48, 0xf7, 0xd0, 0x48, 0x0f, 0x44, 0xc6, 0x41, 0x0f, 0x44, 0xf8, 0x40, 0x80, 0xff, 0x01, 0x75, 0x22, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xce, 0x4c, 0x63, 0xfe, 0x49, 0x01, 0xd7, 0x4b, 0x8b, 0x14, 0xfe, 0x48, 0x8b, 0x4b, 0x10, 0x48, 0x3b, 0x91, 0xb8, 0x54, 0x06, 0x00, 0x0f, 0x84, 0xaa, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xe6, 0x4c, 0x8b, 0x04, 0x24, 0xe9, 0x6f, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xed, 0xeb, 0x12, 0x66, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xef, 0x0f, 0x84, 0xc8, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x2c, 0xeb, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x27, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x49, 0x89, 0xc4, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0xe9, 0xf9, 0xfd, 0xff, 0xff, 0x48, 0x89, 0x54, 0x24, 0x10, 0x4d, 0x8b, 0x2c, 0xc4, 0x49, 0x8b, 0x74, 0xc4, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xf3, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0xc2, 0x89, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x96, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x49, 0x89, 0xdc, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x97, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x98, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x4f, 0x8d, 0x24, 0xfe, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xa8, 0xfe, 0xff, 0xff, 0x49, 0x8d, 0x34, 0xee, 0x49, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_ISINSTANCE_code_holes[30] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x278, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x28d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2c6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_IsInstance, 0x0},
    {0x2de, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyBool_FromLong, 0x0},
    {0x2f8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x302, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x321, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x333, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x34b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x355, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x376, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x388, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x39f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3a9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3c4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3d5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3fe, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_ISINSTANCE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_ISINSTANCE_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_LEN
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_CALL_LEN.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d6                   movq    (%r14,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 de                   movq    (%r14,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4b 8d 1c ce                   leaq    (%r14,%r9,8), %rbx
// 79: 48 8b 3b                      movq    (%rbx), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 4d 29 c6                      subq    %r8, %r14
// 8a: 49 83 c6 b8                   addq    $-0x48, %r14
// 8e: 49 c1 ee 03                   shrq    $0x3, %r14
// 92: 45 89 70 40                   movl    %r14d, 0x40(%r8)
// 96: 49 8b 00                      movq    (%r8), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 5c 24 20                movq    %r11, 0x20(%rsp)
// c3: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// c8: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// cd: 4c 89 04 24                   movq    %r8, (%rsp)
// d1: 48 85 c0                      testq   %rax, %rax
// d4: 40 0f 94 c5                   sete    %bpl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 73 08                   leaq    0x8(%rbx), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 13 01 00 00             je      0x217 <_JIT_ENTRY+0x217>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 110: 7f 22                         jg      0x134 <_JIT_ENTRY+0x134>
// 112: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000114:  R_X86_64_64  .rodata.str1.1
// 11c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011e:  R_X86_64_64  _Py_NegativeRefcount
// 126: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 12b: 4c 89 e2                      movq    %r12, %rdx
// 12e: ff d0                         callq   *%rax
// 130: 49 8b 04 24                   movq    (%r12), %rax
// 134: 85 c0                         testl   %eax, %eax
// 136: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 13b: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// 140: 78 21                         js      0x163 <_JIT_ENTRY+0x163>
// 142: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000144:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 14c: ff d0                         callq   *%rax
// 14e: 49 ff 0c 24                   decq    (%r12)
// 152: 75 0f                         jne     0x163 <_JIT_ENTRY+0x163>
// 154: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000156:  R_X86_64_64  _Py_Dealloc
// 15e: 4c 89 e7                      movq    %r12, %rdi
// 161: ff d0                         callq   *%rax
// 163: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 168: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 16c: 4d 85 ed                      testq   %r13, %r13
// 16f: 0f 84 24 01 00 00             je      0x299 <_JIT_ENTRY+0x299>
// 175: 4f 8d 24 fe                   leaq    (%r14,%r15,8), %r12
// 179: 4c 89 28                      movq    %r13, (%rax)
// 17c: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 180: 48 8b 00                      movq    (%rax), %rax
// 183: 84 c0                         testb   %al, %al
// 185: 74 17                         je      0x19e <_JIT_ENTRY+0x19e>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _Py_HandlePending
// 191: 48 89 df                      movq    %rbx, %rdi
// 194: ff d0                         callq   *%rax
// 196: 85 c0                         testl   %eax, %eax
// 198: 0f 85 fe 00 00 00             jne     0x29c <_JIT_ENTRY+0x29c>
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  _JIT_OPARG
// 1a8: 0f b7 c8                      movzwl  %ax, %ecx
// 1ab: 89 ca                         movl    %ecx, %edx
// 1ad: f7 d2                         notl    %edx
// 1af: 48 63 d2                      movslq  %edx, %rdx
// 1b2: 4c 8d 3c 12                   leaq    (%rdx,%rdx), %r15
// 1b6: 0f b7 c0                      movzwl  %ax, %eax
// 1b9: 48 89 c6                      movq    %rax, %rsi
// 1bc: 48 f7 de                      negq    %rsi
// 1bf: 31 ff                         xorl    %edi, %edi
// 1c1: 66 85 c0                      testw   %ax, %ax
// 1c4: 40 0f 94 c7                   sete    %dil
// 1c8: 45 31 c0                      xorl    %r8d, %r8d
// 1cb: 66 83 f8 01                   cmpw    $0x1, %ax
// 1cf: 41 0f 94 c0                   sete    %r8b
// 1d3: 4b 83 3c fe 00                cmpq    $0x0, (%r14,%r15,8)
// 1d8: 48 f7 d0                      notq    %rax
// 1db: 48 0f 44 c6                   cmoveq  %rsi, %rax
// 1df: 41 0f 44 f8                   cmovel  %r8d, %edi
// 1e3: 40 80 ff 01                   cmpb    $0x1, %dil
// 1e7: 75 22                         jne     0x20b <_JIT_ENTRY+0x20b>
// 1e9: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 1ee: 29 ce                         subl    %ecx, %esi
// 1f0: 4c 63 ee                      movslq  %esi, %r13
// 1f3: 49 01 d5                      addq    %rdx, %r13
// 1f6: 4b 8b 2c ee                   movq    (%r14,%r13,8), %rbp
// 1fa: 48 8b 4b 10                   movq    0x10(%rbx), %rcx
// 1fe: 48 3b a9 c0 54 06 00          cmpq    0x654c0(%rcx), %rbp
// 205: 0f 84 ab 00 00 00             je      0x2b6 <_JIT_ENTRY+0x2b6>
// 20b: 4d 89 e6                      movq    %r12, %r14
// 20e: 4c 8b 04 24                   movq    (%rsp), %r8
// 212: e9 70 fe ff ff                jmp     0x87 <_JIT_ENTRY+0x87>
// 217: 41 83 fd 02                   cmpl    $0x2, %r13d
// 21b: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 221: 45 0f 43 fd                   cmovael %r13d, %r15d
// 225: 31 ed                         xorl    %ebp, %ebp
// 227: eb 13                         jmp     0x23c <_JIT_ENTRY+0x23c>
// 229: 0f 1f 80 00 00 00 00          nopl    (%rax)
// 230: 48 ff c5                      incq    %rbp
// 233: 49 39 ef                      cmpq    %rbp, %r15
// 236: 0f 84 c8 fe ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 23c: 4c 8b 2c eb                   movq    (%rbx,%rbp,8), %r13
// 240: 49 8b 45 00                   movq    (%r13), %rax
// 244: 48 85 c0                      testq   %rax, %rax
// 247: 7e 07                         jle     0x250 <_JIT_ENTRY+0x250>
// 249: 85 c0                         testl   %eax, %eax
// 24b: 78 e3                         js      0x230 <_JIT_ENTRY+0x230>
// 24d: eb 27                         jmp     0x276 <_JIT_ENTRY+0x276>
// 24f: 90                            nop
// 250: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000252:  R_X86_64_64  .rodata.str1.1
// 25a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 25f: 4c 89 ea                      movq    %r13, %rdx
// 262: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000264:  R_X86_64_64  _Py_NegativeRefcount
// 26c: ff d0                         callq   *%rax
// 26e: 49 8b 45 00                   movq    (%r13), %rax
// 272: 85 c0                         testl   %eax, %eax
// 274: 78 ba                         js      0x230 <_JIT_ENTRY+0x230>
// 276: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000278:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 280: ff d0                         callq   *%rax
// 282: 49 ff 4d 00                   decq    (%r13)
// 286: 75 a8                         jne     0x230 <_JIT_ENTRY+0x230>
// 288: 4c 89 ef                      movq    %r13, %rdi
// 28b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028d:  R_X86_64_64  _Py_Dealloc
// 295: ff d0                         callq   *%rax
// 297: eb 97                         jmp     0x230 <_JIT_ENTRY+0x230>
// 299: 49 89 c4                      movq    %rax, %r12
// 29c: 48 8b 04 24                   movq    (%rsp), %rax
// 2a0: 49 29 c4                      subq    %rax, %r12
// 2a3: 49 83 c4 b8                   addq    $-0x48, %r12
// 2a7: 49 c1 ec 03                   shrq    $0x3, %r12
// 2ab: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 2af: 31 c0                         xorl    %eax, %eax
// 2b1: e9 f9 fd ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 2b6: 49 8b 1c c4                   movq    (%r12,%rax,8), %rbx
// 2ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bc:  R_X86_64_64  PyObject_Size
// 2c4: 48 89 df                      movq    %rbx, %rdi
// 2c7: ff d0                         callq   *%rax
// 2c9: 48 85 c0                      testq   %rax, %rax
// 2cc: 78 ce                         js      0x29c <_JIT_ENTRY+0x29c>
// 2ce: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002d0:  R_X86_64_64  PyLong_FromSsize_t
// 2d8: 48 89 c7                      movq    %rax, %rdi
// 2db: ff d1                         callq   *%rcx
// 2dd: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 2e2: 48 8b 45 00                   movq    (%rbp), %rax
// 2e6: 48 85 c0                      testq   %rax, %rax
// 2e9: 7f 22                         jg      0x30d <_JIT_ENTRY+0x30d>
// 2eb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002ed:  R_X86_64_64  .rodata.str1.1
// 2f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f7:  R_X86_64_64  _Py_NegativeRefcount
// 2ff: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 304: 48 89 ea                      movq    %rbp, %rdx
// 307: ff d0                         callq   *%rax
// 309: 48 8b 45 00                   movq    (%rbp), %rax
// 30d: 85 c0                         testl   %eax, %eax
// 30f: 78 21                         js      0x332 <_JIT_ENTRY+0x332>
// 311: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000313:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 31b: ff d0                         callq   *%rax
// 31d: 48 ff 4d 00                   decq    (%rbp)
// 321: 75 0f                         jne     0x332 <_JIT_ENTRY+0x332>
// 323: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000325:  R_X86_64_64  _Py_Dealloc
// 32d: 48 89 ef                      movq    %rbp, %rdi
// 330: ff d0                         callq   *%rax
// 332: 48 8b 03                      movq    (%rbx), %rax
// 335: 48 85 c0                      testq   %rax, %rax
// 338: 7f 21                         jg      0x35b <_JIT_ENTRY+0x35b>
// 33a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000033c:  R_X86_64_64  .rodata.str1.1
// 344: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000346:  R_X86_64_64  _Py_NegativeRefcount
// 34e: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 353: 48 89 da                      movq    %rbx, %rdx
// 356: ff d0                         callq   *%rax
// 358: 48 8b 03                      movq    (%rbx), %rax
// 35b: 49 89 dc                      movq    %rbx, %r12
// 35e: 85 c0                         testl   %eax, %eax
// 360: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 365: 78 21                         js      0x388 <_JIT_ENTRY+0x388>
// 367: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000369:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 371: ff d0                         callq   *%rax
// 373: 49 ff 0c 24                   decq    (%r12)
// 377: 75 0f                         jne     0x388 <_JIT_ENTRY+0x388>
// 379: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000037b:  R_X86_64_64  _Py_Dealloc
// 383: 4c 89 e7                      movq    %r12, %rdi
// 386: ff d0                         callq   *%rax
// 388: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 38c: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 391: 48 85 c0                      testq   %rax, %rax
// 394: 0f 84 02 ff ff ff             je      0x29c <_JIT_ENTRY+0x29c>
// 39a: 4b 8d 34 fe                   leaq    (%r14,%r15,8), %rsi
// 39e: 49 89 04 24                   movq    %rax, (%r12)
// 3a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a4:  R_X86_64_64  _JIT_CONTINUE
// 3ac: 48 8b 3c 24                   movq    (%rsp), %rdi
// 3b0: 48 89 da                      movq    %rbx, %rdx
// 3b3: 48 83 c4 28                   addq    $0x28, %rsp
// 3b7: 5b                            popq    %rbx
// 3b8: 41 5c                         popq    %r12
// 3ba: 41 5d                         popq    %r13
// 3bc: 41 5e                         popq    %r14
// 3be: 41 5f                         popq    %r15
// 3c0: 5d                            popq    %rbp
// 3c1: ff e0                         jmpq    *%rax
// 3c3: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_LEN_code_body[964] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd6, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xde, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4b, 0x8d, 0x1c, 0xce, 0x48, 0x8b, 0x3b, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc6, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x70, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x20, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x73, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0x13, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x04, 0xc6, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x24, 0x01, 0x00, 0x00, 0x4f, 0x8d, 0x24, 0xfe, 0x4c, 0x89, 0x28, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xfe, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x89, 0xca, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x4c, 0x8d, 0x3c, 0x12, 0x0f, 0xb7, 0xc0, 0x48, 0x89, 0xc6, 0x48, 0xf7, 0xde, 0x31, 0xff, 0x66, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc7, 0x45, 0x31, 0xc0, 0x66, 0x83, 0xf8, 0x01, 0x41, 0x0f, 0x94, 0xc0, 0x4b, 0x83, 0x3c, 0xfe, 0x00, 0x48, 0xf7, 0xd0, 0x48, 0x0f, 0x44, 0xc6, 0x41, 0x0f, 0x44, 0xf8, 0x40, 0x80, 0xff, 0x01, 0x75, 0x22, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xce, 0x4c, 0x63, 0xee, 0x49, 0x01, 0xd5, 0x4b, 0x8b, 0x2c, 0xee, 0x48, 0x8b, 0x4b, 0x10, 0x48, 0x3b, 0xa9, 0xc0, 0x54, 0x06, 0x00, 0x0f, 0x84, 0xab, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xe6, 0x4c, 0x8b, 0x04, 0x24, 0xe9, 0x70, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xed, 0xeb, 0x13, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xef, 0x0f, 0x84, 0xc8, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x2c, 0xeb, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x27, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x49, 0x89, 0xc4, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0xe9, 0xf9, 0xfd, 0xff, 0xff, 0x49, 0x8b, 0x1c, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x78, 0xce, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x49, 0x89, 0xdc, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4f, 0x8d, 0x24, 0xee, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x02, 0xff, 0xff, 0xff, 0x4b, 0x8d, 0x34, 0xfe, 0x49, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_LEN_code_holes[26] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x11e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x278, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x28d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0x2d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0x2ed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2f7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x313, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x325, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x33c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x346, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x369, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x37b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3a4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_LEN_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_LEN_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_METHOD_DESCRIPTOR_FAST
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_CALL_METHOD_DESCRIPTOR_FAST.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f8                      movq    %rdi, %r8
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 d1                   movzwl  %cx, %r10d
// 1f: 44 89 d0                      movl    %r10d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d8                      movslq  %eax, %r11
// 27: 4a 8b 04 de                   movq    (%rsi,%r11,8), %rax
// 2b: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 30: 44 29 d7                      subl    %r10d, %edi
// 33: 45 8d 6a 01                   leal    0x1(%r10), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 45 0f 44 ea                   cmovel  %r10d, %r13d
// 48: 4c 63 f7                      movslq  %edi, %r14
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4e 8b 24 f6                   movq    (%rsi,%r14,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4a 8d 1c ce                   leaq    (%rsi,%r9,8), %rbx
// 79: 48 8b 3b                      movq    (%rbx), %rdi
// 7c: 4c 8b 4f 08                   movq    0x8(%rdi), %r9
// 80: 4d 3b 4c 24 10                cmpq    0x10(%r12), %r9
// 85: 74 3a                         je      0xc1 <_JIT_ENTRY+0xc1>
// 87: 49 89 f5                      movq    %rsi, %r13
// 8a: 4d 29 c5                      subq    %r8, %r13
// 8d: 49 83 c5 b8                   addq    $-0x48, %r13
// 91: 49 c1 ed 03                   shrq    $0x3, %r13
// 95: 45 89 68 40                   movl    %r13d, 0x40(%r8)
// 99: 49 8b 00                      movq    (%r8), %rax
// 9c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009e:  R_X86_64_64  _JIT_TARGET
// a6: 89 c9                         movl    %ecx, %ecx
// a8: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// ac: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b2: 48 83 c4 28                   addq    $0x28, %rsp
// b6: 5b                            popq    %rbx
// b7: 41 5c                         popq    %r12
// b9: 41 5d                         popq    %r13
// bb: 41 5e                         popq    %r14
// bd: 41 5f                         popq    %r15
// bf: 5d                            popq    %rbp
// c0: c3                            retq
// c1: 4c 89 5c 24 08                movq    %r11, 0x8(%rsp)
// c6: 48 89 74 24 20                movq    %rsi, 0x20(%rsp)
// cb: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// d0: 4c 89 04 24                   movq    %r8, (%rsp)
// d4: 48 85 c0                      testq   %rax, %rax
// d7: 40 0f 94 c5                   sete    %bpl
// db: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// df: 48 8d 73 08                   leaq    0x8(%rbx), %rsi
// e3: 48 63 d0                      movslq  %eax, %rdx
// e6: ff 51 08                      callq   *0x8(%rcx)
// e9: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _JIT_OPARG
// f8: 66 85 c0                      testw   %ax, %ax
// fb: 0f 94 c0                      sete    %al
// fe: 40 84 c5                      testb   %al, %bpl
// 101: 0f 84 c7 00 00 00             je      0x1ce <_JIT_ENTRY+0x1ce>
// 107: 49 8b 04 24                   movq    (%r12), %rax
// 10b: 48 85 c0                      testq   %rax, %rax
// 10e: 4c 8b 04 24                   movq    (%rsp), %r8
// 112: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// 117: 7f 26                         jg      0x13f <_JIT_ENTRY+0x13f>
// 119: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011b:  R_X86_64_64  .rodata.str1.1
// 123: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000125:  R_X86_64_64  _Py_NegativeRefcount
// 12d: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 132: 4c 89 e2                      movq    %r12, %rdx
// 135: ff d0                         callq   *%rax
// 137: 4c 8b 04 24                   movq    (%rsp), %r8
// 13b: 49 8b 04 24                   movq    (%r12), %rax
// 13f: 85 c0                         testl   %eax, %eax
// 141: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// 146: 78 29                         js      0x171 <_JIT_ENTRY+0x171>
// 148: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 152: ff d0                         callq   *%rax
// 154: 4c 8b 04 24                   movq    (%rsp), %r8
// 158: 49 ff 0c 24                   decq    (%r12)
// 15c: 75 13                         jne     0x171 <_JIT_ENTRY+0x171>
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_Dealloc
// 168: 4c 89 e7                      movq    %r12, %rdi
// 16b: ff d0                         callq   *%rax
// 16d: 4c 8b 04 24                   movq    (%rsp), %r8
// 171: 4b 8d 04 f7                   leaq    (%r15,%r14,8), %rax
// 175: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 17a: 48 85 d2                      testq   %rdx, %rdx
// 17d: 74 39                         je      0x1b8 <_JIT_ENTRY+0x1b8>
// 17f: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 184: 4d 8d 2c cf                   leaq    (%r15,%rcx,8), %r13
// 188: 48 89 10                      movq    %rdx, (%rax)
// 18b: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 18f: 48 8b 00                      movq    (%rax), %rax
// 192: 84 c0                         testb   %al, %al
// 194: 0f 84 af 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 19a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019c:  R_X86_64_64  _Py_HandlePending
// 1a4: 48 89 df                      movq    %rbx, %rdi
// 1a7: ff d0                         callq   *%rax
// 1a9: 4c 8b 04 24                   movq    (%rsp), %r8
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 0f 84 94 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 1b5: 4c 89 e8                      movq    %r13, %rax
// 1b8: 4c 29 c0                      subq    %r8, %rax
// 1bb: 48 83 c0 b8                   addq    $-0x48, %rax
// 1bf: 48 c1 e8 03                   shrq    $0x3, %rax
// 1c3: 41 89 40 40                   movl    %eax, 0x40(%r8)
// 1c7: 31 c0                         xorl    %eax, %eax
// 1c9: e9 e4 fe ff ff                jmp     0xb2 <_JIT_ENTRY+0xb2>
// 1ce: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1d2: bd 01 00 00 00                movl    $0x1, %ebp
// 1d7: 41 0f 43 ed                   cmovael %r13d, %ebp
// 1db: 45 31 ff                      xorl    %r15d, %r15d
// 1de: eb 0c                         jmp     0x1ec <_JIT_ENTRY+0x1ec>
// 1e0: 49 ff c7                      incq    %r15
// 1e3: 4c 39 fd                      cmpq    %r15, %rbp
// 1e6: 0f 84 1b ff ff ff             je      0x107 <_JIT_ENTRY+0x107>
// 1ec: 4e 8b 2c fb                   movq    (%rbx,%r15,8), %r13
// 1f0: 49 8b 45 00                   movq    (%r13), %rax
// 1f4: 48 85 c0                      testq   %rax, %rax
// 1f7: 7e 07                         jle     0x200 <_JIT_ENTRY+0x200>
// 1f9: 85 c0                         testl   %eax, %eax
// 1fb: 78 e3                         js      0x1e0 <_JIT_ENTRY+0x1e0>
// 1fd: eb 27                         jmp     0x226 <_JIT_ENTRY+0x226>
// 1ff: 90                            nop
// 200: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1
// 20a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 20f: 4c 89 ea                      movq    %r13, %rdx
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: ff d0                         callq   *%rax
// 21e: 49 8b 45 00                   movq    (%r13), %rax
// 222: 85 c0                         testl   %eax, %eax
// 224: 78 ba                         js      0x1e0 <_JIT_ENTRY+0x1e0>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 230: ff d0                         callq   *%rax
// 232: 49 ff 4d 00                   decq    (%r13)
// 236: 75 a8                         jne     0x1e0 <_JIT_ENTRY+0x1e0>
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: ff d0                         callq   *%rax
// 247: eb 97                         jmp     0x1e0 <_JIT_ENTRY+0x1e0>
// 249: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000024b:  R_X86_64_64  _JIT_OPARG
// 253: 0f b7 f1                      movzwl  %cx, %esi
// 256: 89 f0                         movl    %esi, %eax
// 258: f7 d0                         notl    %eax
// 25a: 48 63 d0                      movslq  %eax, %rdx
// 25d: 4c 8d 0c 12                   leaq    (%rdx,%rdx), %r9
// 261: 4b 8b 04 cf                   movq    (%r15,%r9,8), %rax
// 265: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 26a: 29 f7                         subl    %esi, %edi
// 26c: 48 63 ef                      movslq  %edi, %rbp
// 26f: 48 01 d5                      addq    %rdx, %rbp
// 272: 4d 8b 24 ef                   movq    (%r15,%rbp,8), %r12
// 276: 0f b7 d1                      movzwl  %cx, %edx
// 279: 48 89 d1                      movq    %rdx, %rcx
// 27c: 48 f7 d9                      negq    %rcx
// 27f: 44 8d 7e 01                   leal    0x1(%rsi), %r15d
// 283: 48 85 c0                      testq   %rax, %rax
// 286: 48 f7 d2                      notq    %rdx
// 289: 48 0f 44 d1                   cmoveq  %rcx, %rdx
// 28d: 44 0f 44 fe                   cmovel  %esi, %r15d
// 291: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000293:  R_X86_64_64  PyMethodDescr_Type
// 29b: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 2a0: 0f 85 e4 fd ff ff             jne     0x8a <_JIT_ENTRY+0x8a>
// 2a6: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 2ab: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 2b2: 0f 85 d2 fd ff ff             jne     0x8a <_JIT_ENTRY+0x8a>
// 2b8: 4c 8d 34 d5 00 00 00 00       leaq    (,%rdx,8), %r14
// 2c0: 4d 01 ee                      addq    %r13, %r14
// 2c3: 49 8b 3e                      movq    (%r14), %rdi
// 2c6: 48 8b 57 08                   movq    0x8(%rdi), %rdx
// 2ca: 49 3b 54 24 10                cmpq    0x10(%r12), %rdx
// 2cf: 0f 85 b5 fd ff ff             jne     0x8a <_JIT_ENTRY+0x8a>
// 2d5: 4c 89 4c 24 08                movq    %r9, 0x8(%rsp)
// 2da: 48 85 c0                      testq   %rax, %rax
// 2dd: 0f 94 c3                      sete    %bl
// 2e0: 41 8d 47 ff                   leal    -0x1(%r15), %eax
// 2e4: 49 8d 76 08                   leaq    0x8(%r14), %rsi
// 2e8: 48 63 d0                      movslq  %eax, %rdx
// 2eb: ff 51 08                      callq   *0x8(%rcx)
// 2ee: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 2f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f5:  R_X86_64_64  _JIT_OPARG
// 2fd: 66 85 c0                      testw   %ax, %ax
// 300: 0f 94 c0                      sete    %al
// 303: 84 c3                         testb   %al, %bl
// 305: 0f 84 b6 00 00 00             je      0x3c1 <_JIT_ENTRY+0x3c1>
// 30b: 49 8b 04 24                   movq    (%r12), %rax
// 30f: 48 85 c0                      testq   %rax, %rax
// 312: 4c 8b 04 24                   movq    (%rsp), %r8
// 316: 7f 26                         jg      0x33e <_JIT_ENTRY+0x33e>
// 318: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000031a:  R_X86_64_64  .rodata.str1.1
// 322: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000324:  R_X86_64_64  _Py_NegativeRefcount
// 32c: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 331: 4c 89 e2                      movq    %r12, %rdx
// 334: ff d0                         callq   *%rax
// 336: 4c 8b 04 24                   movq    (%rsp), %r8
// 33a: 49 8b 04 24                   movq    (%r12), %rax
// 33e: 85 c0                         testl   %eax, %eax
// 340: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 345: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 34a: 78 29                         js      0x375 <_JIT_ENTRY+0x375>
// 34c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000034e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 356: ff d0                         callq   *%rax
// 358: 4c 8b 04 24                   movq    (%rsp), %r8
// 35c: 49 ff 0c 24                   decq    (%r12)
// 360: 75 13                         jne     0x375 <_JIT_ENTRY+0x375>
// 362: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000364:  R_X86_64_64  _Py_Dealloc
// 36c: 4c 89 e7                      movq    %r12, %rdi
// 36f: ff d0                         callq   *%rax
// 371: 4c 8b 04 24                   movq    (%rsp), %r8
// 375: 48 8d 04 eb                   leaq    (%rbx,%rbp,8), %rax
// 379: 4d 85 f6                      testq   %r14, %r14
// 37c: 0f 84 36 fe ff ff             je      0x1b8 <_JIT_ENTRY+0x1b8>
// 382: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 387: 4c 8d 3c cb                   leaq    (%rbx,%rcx,8), %r15
// 38b: 4c 89 30                      movq    %r14, (%rax)
// 38e: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// 393: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 397: 48 8b 00                      movq    (%rax), %rax
// 39a: 84 c0                         testb   %al, %al
// 39c: 0f 84 93 00 00 00             je      0x435 <_JIT_ENTRY+0x435>
// 3a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a4:  R_X86_64_64  _Py_HandlePending
// 3ac: 48 89 df                      movq    %rbx, %rdi
// 3af: ff d0                         callq   *%rax
// 3b1: 4c 8b 04 24                   movq    (%rsp), %r8
// 3b5: 85 c0                         testl   %eax, %eax
// 3b7: 74 7c                         je      0x435 <_JIT_ENTRY+0x435>
// 3b9: 4c 89 f8                      movq    %r15, %rax
// 3bc: e9 f7 fd ff ff                jmp     0x1b8 <_JIT_ENTRY+0x1b8>
// 3c1: 41 83 ff 02                   cmpl    $0x2, %r15d
// 3c5: bb 01 00 00 00                movl    $0x1, %ebx
// 3ca: 41 0f 43 df                   cmovael %r15d, %ebx
// 3ce: 45 31 ff                      xorl    %r15d, %r15d
// 3d1: eb 0c                         jmp     0x3df <_JIT_ENTRY+0x3df>
// 3d3: 49 ff c7                      incq    %r15
// 3d6: 4c 39 fb                      cmpq    %r15, %rbx
// 3d9: 0f 84 2c ff ff ff             je      0x30b <_JIT_ENTRY+0x30b>
// 3df: 4f 8b 2c fe                   movq    (%r14,%r15,8), %r13
// 3e3: 49 8b 45 00                   movq    (%r13), %rax
// 3e7: 48 85 c0                      testq   %rax, %rax
// 3ea: 7f 22                         jg      0x40e <_JIT_ENTRY+0x40e>
// 3ec: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003ee:  R_X86_64_64  .rodata.str1.1
// 3f6: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 3fb: 4c 89 ea                      movq    %r13, %rdx
// 3fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000400:  R_X86_64_64  _Py_NegativeRefcount
// 408: ff d0                         callq   *%rax
// 40a: 49 8b 45 00                   movq    (%r13), %rax
// 40e: 85 c0                         testl   %eax, %eax
// 410: 78 c1                         js      0x3d3 <_JIT_ENTRY+0x3d3>
// 412: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000414:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 41c: ff d0                         callq   *%rax
// 41e: 49 ff 4d 00                   decq    (%r13)
// 422: 75 af                         jne     0x3d3 <_JIT_ENTRY+0x3d3>
// 424: 4c 89 ef                      movq    %r13, %rdi
// 427: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000429:  R_X86_64_64  _Py_Dealloc
// 431: ff d0                         callq   *%rax
// 433: eb 9e                         jmp     0x3d3 <_JIT_ENTRY+0x3d3>
// 435: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000437:  R_X86_64_64  _JIT_CONTINUE
// 43f: 4c 89 c7                      movq    %r8, %rdi
// 442: 4c 89 fe                      movq    %r15, %rsi
// 445: 48 89 da                      movq    %rbx, %rdx
// 448: 48 83 c4 28                   addq    $0x28, %rsp
// 44c: 5b                            popq    %rbx
// 44d: 41 5c                         popq    %r12
// 44f: 41 5d                         popq    %r13
// 451: 41 5e                         popq    %r14
// 453: 41 5f                         popq    %r15
// 455: 5d                            popq    %rbp
// 456: ff e0                         jmpq    *%rax
// 458: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_METHOD_DESCRIPTOR_FAST_code_body[1113] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xd1, 0x44, 0x89, 0xd0, 0xf7, 0xd0, 0x4c, 0x63, 0xd8, 0x4a, 0x8b, 0x04, 0xde, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xd7, 0x45, 0x8d, 0x6a, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xea, 0x4c, 0x63, 0xf7, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4e, 0x8b, 0x24, 0xf6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4a, 0x8d, 0x1c, 0xce, 0x48, 0x8b, 0x3b, 0x4c, 0x8b, 0x4f, 0x08, 0x4d, 0x3b, 0x4c, 0x24, 0x10, 0x74, 0x3a, 0x49, 0x89, 0xf5, 0x4d, 0x29, 0xc5, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x45, 0x89, 0x68, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x08, 0x48, 0x89, 0x74, 0x24, 0x20, 0x48, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x73, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x4c, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x4b, 0x8d, 0x04, 0xf7, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x85, 0xd2, 0x74, 0x39, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x4d, 0x8d, 0x2c, 0xcf, 0x48, 0x89, 0x10, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xaf, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x84, 0x94, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe8, 0x4c, 0x29, 0xc0, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x40, 0x40, 0x31, 0xc0, 0xe9, 0xe4, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xed, 0x45, 0x31, 0xff, 0xeb, 0x0c, 0x49, 0xff, 0xc7, 0x4c, 0x39, 0xfd, 0x0f, 0x84, 0x1b, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x2c, 0xfb, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x27, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x48, 0x63, 0xd0, 0x4c, 0x8d, 0x0c, 0x12, 0x4b, 0x8b, 0x04, 0xcf, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x48, 0x63, 0xef, 0x48, 0x01, 0xd5, 0x4d, 0x8b, 0x24, 0xef, 0x0f, 0xb7, 0xd1, 0x48, 0x89, 0xd1, 0x48, 0xf7, 0xd9, 0x44, 0x8d, 0x7e, 0x01, 0x48, 0x85, 0xc0, 0x48, 0xf7, 0xd2, 0x48, 0x0f, 0x44, 0xd1, 0x44, 0x0f, 0x44, 0xfe, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x0f, 0x85, 0xe4, 0xfd, 0xff, 0xff, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x0f, 0x85, 0xd2, 0xfd, 0xff, 0xff, 0x4c, 0x8d, 0x34, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x01, 0xee, 0x49, 0x8b, 0x3e, 0x48, 0x8b, 0x57, 0x08, 0x49, 0x3b, 0x54, 0x24, 0x10, 0x0f, 0x85, 0xb5, 0xfd, 0xff, 0xff, 0x4c, 0x89, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x47, 0xff, 0x49, 0x8d, 0x76, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xb6, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x4c, 0x8b, 0x04, 0x24, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x48, 0x8d, 0x04, 0xeb, 0x4d, 0x85, 0xf6, 0x0f, 0x84, 0x36, 0xfe, 0xff, 0xff, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x4c, 0x8d, 0x3c, 0xcb, 0x4c, 0x89, 0x30, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x74, 0x7c, 0x4c, 0x89, 0xf8, 0xe9, 0xf7, 0xfd, 0xff, 0xff, 0x41, 0x83, 0xff, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xdf, 0x45, 0x31, 0xff, 0xeb, 0x0c, 0x49, 0xff, 0xc7, 0x4c, 0x39, 0xfb, 0x0f, 0x84, 0x2c, 0xff, 0xff, 0xff, 0x4f, 0x8b, 0x2c, 0xfe, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xc1, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xaf, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x9e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xc7, 0x4c, 0x89, 0xfe, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_METHOD_DESCRIPTOR_FAST_code_holes[27] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9e, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x11b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x125, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x293, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x2f5, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x31a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x324, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x34e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x364, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3a4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x3ee, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x400, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x414, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x429, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x437, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_METHOD_DESCRIPTOR_FAST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_METHOD_DESCRIPTOR_FAST_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f9                      movq    %rdi, %r9
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 d1                   movzwl  %cx, %r10d
// 1f: 44 89 d0                      movl    %r10d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d8                      movslq  %eax, %r11
// 27: 4a 8b 04 de                   movq    (%rsi,%r11,8), %rax
// 2b: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 30: 44 29 d7                      subl    %r10d, %edi
// 33: 45 8d 6a 01                   leal    0x1(%r10), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 45 0f 44 ea                   cmovel  %r10d, %r13d
// 48: 4c 63 f7                      movslq  %edi, %r14
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4e 8b 24 f6                   movq    (%rsi,%r14,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4a 8d 1c c6                   leaq    (%rsi,%r8,8), %rbx
// 79: 48 8b 3b                      movq    (%rbx), %rdi
// 7c: 4c 8b 47 08                   movq    0x8(%rdi), %r8
// 80: 4d 3b 44 24 10                cmpq    0x10(%r12), %r8
// 85: 74 3a                         je      0xc1 <_JIT_ENTRY+0xc1>
// 87: 49 89 f5                      movq    %rsi, %r13
// 8a: 4d 29 cd                      subq    %r9, %r13
// 8d: 49 83 c5 b8                   addq    $-0x48, %r13
// 91: 49 c1 ed 03                   shrq    $0x3, %r13
// 95: 45 89 69 40                   movl    %r13d, 0x40(%r9)
// 99: 49 8b 01                      movq    (%r9), %rax
// 9c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009e:  R_X86_64_64  _JIT_TARGET
// a6: 89 c9                         movl    %ecx, %ecx
// a8: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// ac: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b2: 48 83 c4 28                   addq    $0x28, %rsp
// b6: 5b                            popq    %rbx
// b7: 41 5c                         popq    %r12
// b9: 41 5d                         popq    %r13
// bb: 41 5e                         popq    %r14
// bd: 41 5f                         popq    %r15
// bf: 5d                            popq    %rbp
// c0: c3                            retq
// c1: 4c 89 5c 24 08                movq    %r11, 0x8(%rsp)
// c6: 48 89 74 24 20                movq    %rsi, 0x20(%rsp)
// cb: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// d0: 4c 89 0c 24                   movq    %r9, (%rsp)
// d4: 48 85 c0                      testq   %rax, %rax
// d7: 40 0f 94 c5                   sete    %bpl
// db: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// df: 48 8d 73 08                   leaq    0x8(%rbx), %rsi
// e3: 48 63 d0                      movslq  %eax, %rdx
// e6: ff 51 08                      callq   *0x8(%rcx)
// e9: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _JIT_OPARG
// f8: 66 85 c0                      testw   %ax, %ax
// fb: 0f 94 c0                      sete    %al
// fe: 40 84 c5                      testb   %al, %bpl
// 101: 0f 84 c7 00 00 00             je      0x1ce <_JIT_ENTRY+0x1ce>
// 107: 49 8b 04 24                   movq    (%r12), %rax
// 10b: 48 85 c0                      testq   %rax, %rax
// 10e: 4c 8b 0c 24                   movq    (%rsp), %r9
// 112: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// 117: 7f 26                         jg      0x13f <_JIT_ENTRY+0x13f>
// 119: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011b:  R_X86_64_64  .rodata.str1.1
// 123: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000125:  R_X86_64_64  _Py_NegativeRefcount
// 12d: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 132: 4c 89 e2                      movq    %r12, %rdx
// 135: ff d0                         callq   *%rax
// 137: 4c 8b 0c 24                   movq    (%rsp), %r9
// 13b: 49 8b 04 24                   movq    (%r12), %rax
// 13f: 85 c0                         testl   %eax, %eax
// 141: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// 146: 78 29                         js      0x171 <_JIT_ENTRY+0x171>
// 148: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 152: ff d0                         callq   *%rax
// 154: 4c 8b 0c 24                   movq    (%rsp), %r9
// 158: 49 ff 0c 24                   decq    (%r12)
// 15c: 75 13                         jne     0x171 <_JIT_ENTRY+0x171>
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_Dealloc
// 168: 4c 89 e7                      movq    %r12, %rdi
// 16b: ff d0                         callq   *%rax
// 16d: 4c 8b 0c 24                   movq    (%rsp), %r9
// 171: 4b 8d 04 f7                   leaq    (%r15,%r14,8), %rax
// 175: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 17a: 48 85 d2                      testq   %rdx, %rdx
// 17d: 74 39                         je      0x1b8 <_JIT_ENTRY+0x1b8>
// 17f: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 184: 4d 8d 2c cf                   leaq    (%r15,%rcx,8), %r13
// 188: 48 89 10                      movq    %rdx, (%rax)
// 18b: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 18f: 48 8b 00                      movq    (%rax), %rax
// 192: 84 c0                         testb   %al, %al
// 194: 0f 84 af 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 19a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019c:  R_X86_64_64  _Py_HandlePending
// 1a4: 48 89 df                      movq    %rbx, %rdi
// 1a7: ff d0                         callq   *%rax
// 1a9: 4c 8b 0c 24                   movq    (%rsp), %r9
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 0f 84 94 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 1b5: 4c 89 e8                      movq    %r13, %rax
// 1b8: 4c 29 c8                      subq    %r9, %rax
// 1bb: 48 83 c0 b8                   addq    $-0x48, %rax
// 1bf: 48 c1 e8 03                   shrq    $0x3, %rax
// 1c3: 41 89 41 40                   movl    %eax, 0x40(%r9)
// 1c7: 31 c0                         xorl    %eax, %eax
// 1c9: e9 e4 fe ff ff                jmp     0xb2 <_JIT_ENTRY+0xb2>
// 1ce: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1d2: bd 01 00 00 00                movl    $0x1, %ebp
// 1d7: 41 0f 43 ed                   cmovael %r13d, %ebp
// 1db: 45 31 ff                      xorl    %r15d, %r15d
// 1de: eb 0c                         jmp     0x1ec <_JIT_ENTRY+0x1ec>
// 1e0: 49 ff c7                      incq    %r15
// 1e3: 4c 39 fd                      cmpq    %r15, %rbp
// 1e6: 0f 84 1b ff ff ff             je      0x107 <_JIT_ENTRY+0x107>
// 1ec: 4e 8b 2c fb                   movq    (%rbx,%r15,8), %r13
// 1f0: 49 8b 45 00                   movq    (%r13), %rax
// 1f4: 48 85 c0                      testq   %rax, %rax
// 1f7: 7e 07                         jle     0x200 <_JIT_ENTRY+0x200>
// 1f9: 85 c0                         testl   %eax, %eax
// 1fb: 78 e3                         js      0x1e0 <_JIT_ENTRY+0x1e0>
// 1fd: eb 27                         jmp     0x226 <_JIT_ENTRY+0x226>
// 1ff: 90                            nop
// 200: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1
// 20a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 20f: 4c 89 ea                      movq    %r13, %rdx
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: ff d0                         callq   *%rax
// 21e: 49 8b 45 00                   movq    (%r13), %rax
// 222: 85 c0                         testl   %eax, %eax
// 224: 78 ba                         js      0x1e0 <_JIT_ENTRY+0x1e0>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 230: ff d0                         callq   *%rax
// 232: 49 ff 4d 00                   decq    (%r13)
// 236: 75 a8                         jne     0x1e0 <_JIT_ENTRY+0x1e0>
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: ff d0                         callq   *%rax
// 247: eb 97                         jmp     0x1e0 <_JIT_ENTRY+0x1e0>
// 249: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000024b:  R_X86_64_64  _JIT_OPARG
// 253: 0f b7 d1                      movzwl  %cx, %edx
// 256: 89 d0                         movl    %edx, %eax
// 258: f7 d0                         notl    %eax
// 25a: 48 63 f0                      movslq  %eax, %rsi
// 25d: 4c 8d 14 36                   leaq    (%rsi,%rsi), %r10
// 261: 4b 8b 04 d7                   movq    (%r15,%r10,8), %rax
// 265: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 26a: 29 d7                         subl    %edx, %edi
// 26c: 48 63 ef                      movslq  %edi, %rbp
// 26f: 48 01 f5                      addq    %rsi, %rbp
// 272: 4d 8b 24 ef                   movq    (%r15,%rbp,8), %r12
// 276: 0f b7 c9                      movzwl  %cx, %ecx
// 279: 48 89 ce                      movq    %rcx, %rsi
// 27c: 48 f7 de                      negq    %rsi
// 27f: 44 8d 7a 01                   leal    0x1(%rdx), %r15d
// 283: 48 85 c0                      testq   %rax, %rax
// 286: 48 f7 d1                      notq    %rcx
// 289: 48 0f 44 ce                   cmoveq  %rsi, %rcx
// 28d: 44 0f 44 fa                   cmovel  %edx, %r15d
// 291: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000293:  R_X86_64_64  PyMethodDescr_Type
// 29b: 49 39 54 24 08                cmpq    %rdx, 0x8(%r12)
// 2a0: 0f 85 e4 fd ff ff             jne     0x8a <_JIT_ENTRY+0x8a>
// 2a6: 4d 8b 44 24 28                movq    0x28(%r12), %r8
// 2ab: 41 81 78 10 82 00 00 00       cmpl    $0x82, 0x10(%r8)
// 2b3: 0f 85 d1 fd ff ff             jne     0x8a <_JIT_ENTRY+0x8a>
// 2b9: 4c 8d 34 cd 00 00 00 00       leaq    (,%rcx,8), %r14
// 2c1: 4d 01 ee                      addq    %r13, %r14
// 2c4: 49 8b 3e                      movq    (%r14), %rdi
// 2c7: 48 8b 4f 08                   movq    0x8(%rdi), %rcx
// 2cb: 49 3b 4c 24 10                cmpq    0x10(%r12), %rcx
// 2d0: 0f 85 b4 fd ff ff             jne     0x8a <_JIT_ENTRY+0x8a>
// 2d6: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// 2db: 48 85 c0                      testq   %rax, %rax
// 2de: 0f 94 c3                      sete    %bl
// 2e1: 41 8d 47 ff                   leal    -0x1(%r15), %eax
// 2e5: 49 8d 76 08                   leaq    0x8(%r14), %rsi
// 2e9: 48 63 d0                      movslq  %eax, %rdx
// 2ec: 31 c9                         xorl    %ecx, %ecx
// 2ee: 41 ff 50 08                   callq   *0x8(%r8)
// 2f2: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 2f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f9:  R_X86_64_64  _JIT_OPARG
// 301: 66 85 c0                      testw   %ax, %ax
// 304: 0f 94 c0                      sete    %al
// 307: 84 c3                         testb   %al, %bl
// 309: 0f 84 b6 00 00 00             je      0x3c5 <_JIT_ENTRY+0x3c5>
// 30f: 49 8b 04 24                   movq    (%r12), %rax
// 313: 48 85 c0                      testq   %rax, %rax
// 316: 4c 8b 0c 24                   movq    (%rsp), %r9
// 31a: 7f 26                         jg      0x342 <_JIT_ENTRY+0x342>
// 31c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000031e:  R_X86_64_64  .rodata.str1.1
// 326: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000328:  R_X86_64_64  _Py_NegativeRefcount
// 330: be e8 0b 00 00                movl    $0xbe8, %esi            # imm = 0xBE8
// 335: 4c 89 e2                      movq    %r12, %rdx
// 338: ff d0                         callq   *%rax
// 33a: 4c 8b 0c 24                   movq    (%rsp), %r9
// 33e: 49 8b 04 24                   movq    (%r12), %rax
// 342: 85 c0                         testl   %eax, %eax
// 344: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 349: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 34e: 78 29                         js      0x379 <_JIT_ENTRY+0x379>
// 350: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000352:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 35a: ff d0                         callq   *%rax
// 35c: 4c 8b 0c 24                   movq    (%rsp), %r9
// 360: 49 ff 0c 24                   decq    (%r12)
// 364: 75 13                         jne     0x379 <_JIT_ENTRY+0x379>
// 366: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000368:  R_X86_64_64  _Py_Dealloc
// 370: 4c 89 e7                      movq    %r12, %rdi
// 373: ff d0                         callq   *%rax
// 375: 4c 8b 0c 24                   movq    (%rsp), %r9
// 379: 48 8d 04 eb                   leaq    (%rbx,%rbp,8), %rax
// 37d: 4d 85 f6                      testq   %r14, %r14
// 380: 0f 84 32 fe ff ff             je      0x1b8 <_JIT_ENTRY+0x1b8>
// 386: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 38b: 4c 8d 3c cb                   leaq    (%rbx,%rcx,8), %r15
// 38f: 4c 89 30                      movq    %r14, (%rax)
// 392: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// 397: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 39b: 48 8b 00                      movq    (%rax), %rax
// 39e: 84 c0                         testb   %al, %al
// 3a0: 0f 84 93 00 00 00             je      0x439 <_JIT_ENTRY+0x439>
// 3a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a8:  R_X86_64_64  _Py_HandlePending
// 3b0: 48 89 df                      movq    %rbx, %rdi
// 3b3: ff d0                         callq   *%rax
// 3b5: 4c 8b 0c 24                   movq    (%rsp), %r9
// 3b9: 85 c0                         testl   %eax, %eax
// 3bb: 74 7c                         je      0x439 <_JIT_ENTRY+0x439>
// 3bd: 4c 89 f8                      movq    %r15, %rax
// 3c0: e9 f3 fd ff ff                jmp     0x1b8 <_JIT_ENTRY+0x1b8>
// 3c5: 41 83 ff 02                   cmpl    $0x2, %r15d
// 3c9: bb 01 00 00 00                movl    $0x1, %ebx
// 3ce: 41 0f 43 df                   cmovael %r15d, %ebx
// 3d2: 45 31 ff                      xorl    %r15d, %r15d
// 3d5: eb 0c                         jmp     0x3e3 <_JIT_ENTRY+0x3e3>
// 3d7: 49 ff c7                      incq    %r15
// 3da: 4c 39 fb                      cmpq    %r15, %rbx
// 3dd: 0f 84 2c ff ff ff             je      0x30f <_JIT_ENTRY+0x30f>
// 3e3: 4f 8b 2c fe                   movq    (%r14,%r15,8), %r13
// 3e7: 49 8b 45 00                   movq    (%r13), %rax
// 3eb: 48 85 c0                      testq   %rax, %rax
// 3ee: 7f 22                         jg      0x412 <_JIT_ENTRY+0x412>
// 3f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003f2:  R_X86_64_64  .rodata.str1.1
// 3fa: be e6 0b 00 00                movl    $0xbe6, %esi            # imm = 0xBE6
// 3ff: 4c 89 ea                      movq    %r13, %rdx
// 402: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000404:  R_X86_64_64  _Py_NegativeRefcount
// 40c: ff d0                         callq   *%rax
// 40e: 49 8b 45 00                   movq    (%r13), %rax
// 412: 85 c0                         testl   %eax, %eax
// 414: 78 c1                         js      0x3d7 <_JIT_ENTRY+0x3d7>
// 416: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000418:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 420: ff d0                         callq   *%rax
// 422: 49 ff 4d 00                   decq    (%r13)
// 426: 75 af                         jne     0x3d7 <_JIT_ENTRY+0x3d7>
// 428: 4c 89 ef                      movq    %r13, %rdi
// 42b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000042d:  R_X86_64_64  _Py_Dealloc
// 435: ff d0                         callq   *%rax
// 437: eb 9e                         jmp     0x3d7 <_JIT_ENTRY+0x3d7>
// 439: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000043b:  R_X86_64_64  _JIT_CONTINUE
// 443: 4c 89 cf                      movq    %r9, %rdi
// 446: 4c 89 fe                      movq    %r15, %rsi
// 449: 48 89 da                      movq    %rbx, %rdx
// 44c: 48 83 c4 28                   addq    $0x28, %rsp
// 450: 5b                            popq    %rbx
// 451: 41 5c                         popq    %r12
// 453: 41 5d                         popq    %r13
// 455: 41 5e                         popq    %r14
// 457: 41 5f                         popq    %r15
// 459: 5d                            popq    %rbp
// 45a: ff e0                         jmpq    *%rax
// 45c: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS_code_body[1117] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf9, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xd1, 0x44, 0x89, 0xd0, 0xf7, 0xd0, 0x4c, 0x63, 0xd8, 0x4a, 0x8b, 0x04, 0xde, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xd7, 0x45, 0x8d, 0x6a, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xea, 0x4c, 0x63, 0xf7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4e, 0x8b, 0x24, 0xf6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4a, 0x8d, 0x1c, 0xc6, 0x48, 0x8b, 0x3b, 0x4c, 0x8b, 0x47, 0x08, 0x4d, 0x3b, 0x44, 0x24, 0x10, 0x74, 0x3a, 0x49, 0x89, 0xf5, 0x4d, 0x29, 0xcd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x45, 0x89, 0x69, 0x40, 0x49, 0x8b, 0x01, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x08, 0x48, 0x89, 0x74, 0x24, 0x20, 0x48, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x73, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x4c, 0x8b, 0x0c, 0x24, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x4c, 0x8b, 0x0c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x0c, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x0c, 0x24, 0x4b, 0x8d, 0x04, 0xf7, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x85, 0xd2, 0x74, 0x39, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x4d, 0x8d, 0x2c, 0xcf, 0x48, 0x89, 0x10, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xaf, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x4c, 0x8b, 0x0c, 0x24, 0x85, 0xc0, 0x0f, 0x84, 0x94, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe8, 0x4c, 0x29, 0xc8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x41, 0x40, 0x31, 0xc0, 0xe9, 0xe4, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xed, 0x45, 0x31, 0xff, 0xeb, 0x0c, 0x49, 0xff, 0xc7, 0x4c, 0x39, 0xfd, 0x0f, 0x84, 0x1b, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x2c, 0xfb, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x27, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x89, 0xd0, 0xf7, 0xd0, 0x48, 0x63, 0xf0, 0x4c, 0x8d, 0x14, 0x36, 0x4b, 0x8b, 0x04, 0xd7, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xd7, 0x48, 0x63, 0xef, 0x48, 0x01, 0xf5, 0x4d, 0x8b, 0x24, 0xef, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xce, 0x48, 0xf7, 0xde, 0x44, 0x8d, 0x7a, 0x01, 0x48, 0x85, 0xc0, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xce, 0x44, 0x0f, 0x44, 0xfa, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x54, 0x24, 0x08, 0x0f, 0x85, 0xe4, 0xfd, 0xff, 0xff, 0x4d, 0x8b, 0x44, 0x24, 0x28, 0x41, 0x81, 0x78, 0x10, 0x82, 0x00, 0x00, 0x00, 0x0f, 0x85, 0xd1, 0xfd, 0xff, 0xff, 0x4c, 0x8d, 0x34, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x01, 0xee, 0x49, 0x8b, 0x3e, 0x48, 0x8b, 0x4f, 0x08, 0x49, 0x3b, 0x4c, 0x24, 0x10, 0x0f, 0x85, 0xb4, 0xfd, 0xff, 0xff, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x47, 0xff, 0x49, 0x8d, 0x76, 0x08, 0x48, 0x63, 0xd0, 0x31, 0xc9, 0x41, 0xff, 0x50, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xb6, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x4c, 0x8b, 0x0c, 0x24, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe8, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x4c, 0x8b, 0x0c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x0c, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x0c, 0x24, 0x48, 0x8d, 0x04, 0xeb, 0x4d, 0x85, 0xf6, 0x0f, 0x84, 0x32, 0xfe, 0xff, 0xff, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x4c, 0x8d, 0x3c, 0xcb, 0x4c, 0x89, 0x30, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x4c, 0x8b, 0x0c, 0x24, 0x85, 0xc0, 0x74, 0x7c, 0x4c, 0x89, 0xf8, 0xe9, 0xf3, 0xfd, 0xff, 0xff, 0x41, 0x83, 0xff, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xdf, 0x45, 0x31, 0xff, 0xeb, 0x0c, 0x49, 0xff, 0xc7, 0x4c, 0x39, 0xfb, 0x0f, 0x84, 0x2c, 0xff, 0xff, 0xff, 0x4f, 0x8b, 0x2c, 0xfe, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe6, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xc1, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xaf, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x9e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xcf, 0x4c, 0x89, 0xfe, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS_code_holes[27] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9e, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x11b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x125, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x293, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x2f9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x31e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x328, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x352, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x368, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3a8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x3f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x404, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x418, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x42d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x43b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_METHOD_DESCRIPTOR_NOARGS
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_CALL_METHOD_DESCRIPTOR_NOARGS.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d6                   movq    (%r14,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 de                   movq    (%r14,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4b 8d 1c ce                   leaq    (%r14,%r9,8), %rbx
// 79: 48 8b 3b                      movq    (%rbx), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 4d 29 c6                      subq    %r8, %r14
// 8a: 49 83 c6 b8                   addq    $-0x48, %r14
// 8e: 49 c1 ee 03                   shrq    $0x3, %r14
// 92: 45 89 70 40                   movl    %r14d, 0x40(%r8)
// 96: 49 8b 00                      movq    (%r8), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 5c 24 20                movq    %r11, 0x20(%rsp)
// c3: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c8: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// cd: 4c 89 04 24                   movq    %r8, (%rsp)
// d1: 48 85 c0                      testq   %rax, %rax
// d4: 40 0f 94 c5                   sete    %bpl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 73 08                   leaq    0x8(%rbx), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 c7 01 00 00             je      0x2cb <_JIT_ENTRY+0x2cb>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 110: 7f 22                         jg      0x134 <_JIT_ENTRY+0x134>
// 112: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000114:  R_X86_64_64  .rodata.str1.1
// 11c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011e:  R_X86_64_64  _Py_NegativeRefcount
// 126: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 12b: 4c 89 e2                      movq    %r12, %rdx
// 12e: ff d0                         callq   *%rax
// 130: 49 8b 04 24                   movq    (%r12), %rax
// 134: 85 c0                         testl   %eax, %eax
// 136: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 13b: 78 21                         js      0x15e <_JIT_ENTRY+0x15e>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 147: ff d0                         callq   *%rax
// 149: 49 ff 0c 24                   decq    (%r12)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_Dealloc
// 159: 4c 89 e7                      movq    %r12, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 163: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 167: 48 8b 4c 24 18                movq    0x18(%rsp), %rcx
// 16c: 48 85 c9                      testq   %rcx, %rcx
// 16f: 0f 84 d4 01 00 00             je      0x349 <_JIT_ENTRY+0x349>
// 175: 4f 8d 3c fe                   leaq    (%r14,%r15,8), %r15
// 179: 48 89 08                      movq    %rcx, (%rax)
// 17c: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 180: 48 8b 00                      movq    (%rax), %rax
// 183: 84 c0                         testb   %al, %al
// 185: 74 17                         je      0x19e <_JIT_ENTRY+0x19e>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _Py_HandlePending
// 191: 48 89 df                      movq    %rbx, %rdi
// 194: ff d0                         callq   *%rax
// 196: 85 c0                         testl   %eax, %eax
// 198: 0f 85 ae 01 00 00             jne     0x34c <_JIT_ENTRY+0x34c>
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  _JIT_OPARG
// 1a8: 0f b7 c8                      movzwl  %ax, %ecx
// 1ab: 89 ca                         movl    %ecx, %edx
// 1ad: f7 d2                         notl    %edx
// 1af: 48 63 d2                      movslq  %edx, %rdx
// 1b2: 48 8d 2c 12                   leaq    (%rdx,%rdx), %rbp
// 1b6: 0f b7 c0                      movzwl  %ax, %eax
// 1b9: 48 89 c6                      movq    %rax, %rsi
// 1bc: 48 f7 de                      negq    %rsi
// 1bf: 31 ff                         xorl    %edi, %edi
// 1c1: 66 85 c0                      testw   %ax, %ax
// 1c4: 40 0f 94 c7                   sete    %dil
// 1c8: 45 31 c0                      xorl    %r8d, %r8d
// 1cb: 66 83 f8 01                   cmpw    $0x1, %ax
// 1cf: 41 0f 94 c0                   sete    %r8b
// 1d3: 49 83 3c ee 00                cmpq    $0x0, (%r14,%rbp,8)
// 1d8: 48 f7 d0                      notq    %rax
// 1db: 48 0f 44 c6                   cmoveq  %rsi, %rax
// 1df: 41 0f 44 f8                   cmovel  %r8d, %edi
// 1e3: 40 80 ff 01                   cmpb    $0x1, %dil
// 1e7: 0f 85 79 01 00 00             jne     0x366 <_JIT_ENTRY+0x366>
// 1ed: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 1f2: 29 ce                         subl    %ecx, %esi
// 1f4: 48 63 de                      movslq  %esi, %rbx
// 1f7: 48 01 d3                      addq    %rdx, %rbx
// 1fa: 4d 8b 24 de                   movq    (%r14,%rbx,8), %r12
// 1fe: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000200:  R_X86_64_64  PyMethodDescr_Type
// 208: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 20d: 0f 85 53 01 00 00             jne     0x366 <_JIT_ENTRY+0x366>
// 213: 4d 8b 2c c7                   movq    (%r15,%rax,8), %r13
// 217: 49 8b 45 08                   movq    0x8(%r13), %rax
// 21b: 49 3b 44 24 10                cmpq    0x10(%r12), %rax
// 220: 0f 85 40 01 00 00             jne     0x366 <_JIT_ENTRY+0x366>
// 226: 49 8b 44 24 28                movq    0x28(%r12), %rax
// 22b: 83 78 10 04                   cmpl    $0x4, 0x10(%rax)
// 22f: 0f 85 31 01 00 00             jne     0x366 <_JIT_ENTRY+0x366>
// 235: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 239: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 23e: 8b 42 2c                      movl    0x2c(%rdx), %eax
// 241: 8d 48 ff                      leal    -0x1(%rax), %ecx
// 244: 89 4a 2c                      movl    %ecx, 0x2c(%rdx)
// 247: 85 c0                         testl   %eax, %eax
// 249: 0f 8e 23 01 00 00             jle     0x372 <_JIT_ENTRY+0x372>
// 24f: 4d 8d 3c de                   leaq    (%r14,%rbx,8), %r15
// 253: 4c 89 ef                      movq    %r13, %rdi
// 256: 31 f6                         xorl    %esi, %esi
// 258: 41 ff d0                      callq   *%r8
// 25b: 48 89 c3                      movq    %rax, %rbx
// 25e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 263: ff 40 2c                      incl    0x2c(%rax)
// 266: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000268:  R_X86_64_64  .text+0x3d0
// 270: bf 10 0c 00 00                movl    $0xc10, %edi            # imm = 0xC10
// 275: 4c 89 ee                      movq    %r13, %rsi
// 278: 49 89 c5                      movq    %rax, %r13
// 27b: ff d0                         callq   *%rax
// 27d: bf 11 0c 00 00                movl    $0xc11, %edi            # imm = 0xC11
// 282: 4c 89 e6                      movq    %r12, %rsi
// 285: 41 ff d5                      callq   *%r13
// 288: 48 85 db                      testq   %rbx, %rbx
// 28b: 0f 84 bb 00 00 00             je      0x34c <_JIT_ENTRY+0x34c>
// 291: 4d 8d 34 ee                   leaq    (%r14,%rbp,8), %r14
// 295: 49 89 1f                      movq    %rbx, (%r15)
// 298: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 29d: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 2a1: 48 8b 00                      movq    (%rax), %rax
// 2a4: 84 c0                         testb   %al, %al
// 2a6: 0f 84 f4 00 00 00             je      0x3a0 <_JIT_ENTRY+0x3a0>
// 2ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ae:  R_X86_64_64  _Py_HandlePending
// 2b6: 48 89 df                      movq    %rbx, %rdi
// 2b9: ff d0                         callq   *%rax
// 2bb: 85 c0                         testl   %eax, %eax
// 2bd: 0f 84 dd 00 00 00             je      0x3a0 <_JIT_ENTRY+0x3a0>
// 2c3: 4d 89 f7                      movq    %r14, %r15
// 2c6: e9 81 00 00 00                jmp     0x34c <_JIT_ENTRY+0x34c>
// 2cb: 41 83 fd 02                   cmpl    $0x2, %r13d
// 2cf: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 2d5: 45 0f 43 fd                   cmovael %r13d, %r15d
// 2d9: 31 ed                         xorl    %ebp, %ebp
// 2db: eb 0f                         jmp     0x2ec <_JIT_ENTRY+0x2ec>
// 2dd: 0f 1f 00                      nopl    (%rax)
// 2e0: 48 ff c5                      incq    %rbp
// 2e3: 49 39 ef                      cmpq    %rbp, %r15
// 2e6: 0f 84 18 fe ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 2ec: 4c 8b 2c eb                   movq    (%rbx,%rbp,8), %r13
// 2f0: 49 8b 45 00                   movq    (%r13), %rax
// 2f4: 48 85 c0                      testq   %rax, %rax
// 2f7: 7e 07                         jle     0x300 <_JIT_ENTRY+0x300>
// 2f9: 85 c0                         testl   %eax, %eax
// 2fb: 78 e3                         js      0x2e0 <_JIT_ENTRY+0x2e0>
// 2fd: eb 27                         jmp     0x326 <_JIT_ENTRY+0x326>
// 2ff: 90                            nop
// 300: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000302:  R_X86_64_64  .rodata.str1.1
// 30a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 30f: 4c 89 ea                      movq    %r13, %rdx
// 312: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000314:  R_X86_64_64  _Py_NegativeRefcount
// 31c: ff d0                         callq   *%rax
// 31e: 49 8b 45 00                   movq    (%r13), %rax
// 322: 85 c0                         testl   %eax, %eax
// 324: 78 ba                         js      0x2e0 <_JIT_ENTRY+0x2e0>
// 326: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000328:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 330: ff d0                         callq   *%rax
// 332: 49 ff 4d 00                   decq    (%r13)
// 336: 75 a8                         jne     0x2e0 <_JIT_ENTRY+0x2e0>
// 338: 4c 89 ef                      movq    %r13, %rdi
// 33b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033d:  R_X86_64_64  _Py_Dealloc
// 345: ff d0                         callq   *%rax
// 347: eb 97                         jmp     0x2e0 <_JIT_ENTRY+0x2e0>
// 349: 49 89 c7                      movq    %rax, %r15
// 34c: 48 8b 04 24                   movq    (%rsp), %rax
// 350: 49 29 c7                      subq    %rax, %r15
// 353: 49 83 c7 b8                   addq    $-0x48, %r15
// 357: 49 c1 ef 03                   shrq    $0x3, %r15
// 35b: 44 89 78 40                   movl    %r15d, 0x40(%rax)
// 35f: 31 c0                         xorl    %eax, %eax
// 361: e9 49 fd ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 366: 4d 89 fe                      movq    %r15, %r14
// 369: 4c 8b 04 24                   movq    (%rsp), %r8
// 36d: e9 15 fd ff ff                jmp     0x87 <_JIT_ENTRY+0x87>
// 372: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000374:  R_X86_64_64  .rodata.str1.1+0x39
// 37c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000037e:  R_X86_64_64  _Py_CheckRecursiveCall
// 386: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 38b: 4c 89 44 24 10                movq    %r8, 0x10(%rsp)
// 390: ff d0                         callq   *%rax
// 392: 4c 8b 44 24 10                movq    0x10(%rsp), %r8
// 397: 85 c0                         testl   %eax, %eax
// 399: 75 b1                         jne     0x34c <_JIT_ENTRY+0x34c>
// 39b: e9 af fe ff ff                jmp     0x24f <_JIT_ENTRY+0x24f>
// 3a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a2:  R_X86_64_64  _JIT_CONTINUE
// 3aa: 48 8b 3c 24                   movq    (%rsp), %rdi
// 3ae: 4c 89 f6                      movq    %r14, %rsi
// 3b1: 48 89 da                      movq    %rbx, %rdx
// 3b4: 48 83 c4 28                   addq    $0x28, %rsp
// 3b8: 5b                            popq    %rbx
// 3b9: 41 5c                         popq    %r12
// 3bb: 41 5d                         popq    %r13
// 3bd: 41 5e                         popq    %r14
// 3bf: 41 5f                         popq    %r15
// 3c1: 5d                            popq    %rbp
// 3c2: ff e0                         jmpq    *%rax
// 3c4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 
// 00000000000003d0 <Py_DECREF>:
// 3d0: 53                            pushq   %rbx
// 3d1: 48 89 f3                      movq    %rsi, %rbx
// 3d4: 48 8b 06                      movq    (%rsi), %rax
// 3d7: 48 85 c0                      testq   %rax, %rax
// 3da: 7e 06                         jle     0x3e2 <Py_DECREF+0x12>
// 3dc: 85 c0                         testl   %eax, %eax
// 3de: 79 24                         jns     0x404 <Py_DECREF+0x34>
// 3e0: eb 33                         jmp     0x415 <Py_DECREF+0x45>
// 3e2: 89 fe                         movl    %edi, %esi
// 3e4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003e6:  R_X86_64_64  .rodata.str1.1
// 3ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003f0:  R_X86_64_64  _Py_NegativeRefcount
// 3f8: 48 89 da                      movq    %rbx, %rdx
// 3fb: ff d0                         callq   *%rax
// 3fd: 48 8b 03                      movq    (%rbx), %rax
// 400: 85 c0                         testl   %eax, %eax
// 402: 78 11                         js      0x415 <Py_DECREF+0x45>
// 404: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000406:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 40e: ff d0                         callq   *%rax
// 410: 48 ff 0b                      decq    (%rbx)
// 413: 74 02                         je      0x417 <Py_DECREF+0x47>
// 415: 5b                            popq    %rbx
// 416: c3                            retq
// 417: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000419:  R_X86_64_64  _Py_Dealloc
// 421: 48 89 df                      movq    %rbx, %rdi
// 424: 5b                            popq    %rbx
// 425: ff e0                         jmpq    *%rax
// 427: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_METHOD_DESCRIPTOR_NOARGS_code_body[1064] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd6, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xde, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4b, 0x8d, 0x1c, 0xce, 0x48, 0x8b, 0x3b, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc6, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x70, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x20, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x73, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xc7, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x4c, 0x24, 0x18, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xd4, 0x01, 0x00, 0x00, 0x4f, 0x8d, 0x3c, 0xfe, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xae, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x89, 0xca, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x48, 0x8d, 0x2c, 0x12, 0x0f, 0xb7, 0xc0, 0x48, 0x89, 0xc6, 0x48, 0xf7, 0xde, 0x31, 0xff, 0x66, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc7, 0x45, 0x31, 0xc0, 0x66, 0x83, 0xf8, 0x01, 0x41, 0x0f, 0x94, 0xc0, 0x49, 0x83, 0x3c, 0xee, 0x00, 0x48, 0xf7, 0xd0, 0x48, 0x0f, 0x44, 0xc6, 0x41, 0x0f, 0x44, 0xf8, 0x40, 0x80, 0xff, 0x01, 0x0f, 0x85, 0x79, 0x01, 0x00, 0x00, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xce, 0x48, 0x63, 0xde, 0x48, 0x01, 0xd3, 0x4d, 0x8b, 0x24, 0xde, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x0f, 0x85, 0x53, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x2c, 0xc7, 0x49, 0x8b, 0x45, 0x08, 0x49, 0x3b, 0x44, 0x24, 0x10, 0x0f, 0x85, 0x40, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x28, 0x83, 0x78, 0x10, 0x04, 0x0f, 0x85, 0x31, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x40, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x8b, 0x42, 0x2c, 0x8d, 0x48, 0xff, 0x89, 0x4a, 0x2c, 0x85, 0xc0, 0x0f, 0x8e, 0x23, 0x01, 0x00, 0x00, 0x4d, 0x8d, 0x3c, 0xde, 0x4c, 0x89, 0xef, 0x31, 0xf6, 0x41, 0xff, 0xd0, 0x48, 0x89, 0xc3, 0x48, 0x8b, 0x44, 0x24, 0x08, 0xff, 0x40, 0x2c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x10, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xee, 0x49, 0x89, 0xc5, 0xff, 0xd0, 0xbf, 0x11, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0x41, 0xff, 0xd5, 0x48, 0x85, 0xdb, 0x0f, 0x84, 0xbb, 0x00, 0x00, 0x00, 0x4d, 0x8d, 0x34, 0xee, 0x49, 0x89, 0x1f, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xf4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xdd, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xf7, 0xe9, 0x81, 0x00, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xed, 0xeb, 0x0f, 0x0f, 0x1f, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xef, 0x0f, 0x84, 0x18, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x2c, 0xeb, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x27, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x49, 0x89, 0xc7, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x78, 0x40, 0x31, 0xc0, 0xe9, 0x49, 0xfd, 0xff, 0xff, 0x4d, 0x89, 0xfe, 0x4c, 0x8b, 0x04, 0x24, 0xe9, 0x15, 0xfd, 0xff, 0xff, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0x44, 0x24, 0x10, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x10, 0x85, 0xc0, 0x75, 0xb1, 0xe9, 0xaf, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x48, 0x89, 0xf3, 0x48, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x24, 0xeb, 0x33, 0x89, 0xfe, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x74, 0x02, 0x5b, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x5b, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_METHOD_DESCRIPTOR_NOARGS_code_holes[25] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x11e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x200, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x268, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x3d0},
    {0x2ae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x302, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x314, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x328, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x33d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x374, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x37e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x3a2, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x3e6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3f0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x406, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x419, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_METHOD_DESCRIPTOR_NOARGS_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_METHOD_DESCRIPTOR_NOARGS_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_METHOD_DESCRIPTOR_O
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_CALL_METHOD_DESCRIPTOR_O.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d6                   movq    (%r14,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 de                   movq    (%r14,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4b 8d 1c ce                   leaq    (%r14,%r9,8), %rbx
// 79: 48 8b 3b                      movq    (%rbx), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 4d 29 c6                      subq    %r8, %r14
// 8a: 49 83 c6 b8                   addq    $-0x48, %r14
// 8e: 49 c1 ee 03                   shrq    $0x3, %r14
// 92: 45 89 70 40                   movl    %r14d, 0x40(%r8)
// 96: 49 8b 00                      movq    (%r8), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 5c 24 18                movq    %r11, 0x18(%rsp)
// c3: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// c8: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// cd: 4c 89 04 24                   movq    %r8, (%rsp)
// d1: 48 85 c0                      testq   %rax, %rax
// d4: 40 0f 94 c5                   sete    %bpl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 73 08                   leaq    0x8(%rbx), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 32 01 00 00             je      0x236 <_JIT_ENTRY+0x236>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 110: 7f 22                         jg      0x134 <_JIT_ENTRY+0x134>
// 112: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000114:  R_X86_64_64  .rodata.str1.1
// 11c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011e:  R_X86_64_64  _Py_NegativeRefcount
// 126: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 12b: 4c 89 e2                      movq    %r12, %rdx
// 12e: ff d0                         callq   *%rax
// 130: 49 8b 04 24                   movq    (%r12), %rax
// 134: 85 c0                         testl   %eax, %eax
// 136: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 13b: 78 21                         js      0x15e <_JIT_ENTRY+0x15e>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 147: ff d0                         callq   *%rax
// 149: 49 ff 0c 24                   decq    (%r12)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_Dealloc
// 159: 4c 89 e7                      movq    %r12, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 163: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 167: 48 8b 4c 24 20                movq    0x20(%rsp), %rcx
// 16c: 48 85 c9                      testq   %rcx, %rcx
// 16f: 0f 84 44 01 00 00             je      0x2b9 <_JIT_ENTRY+0x2b9>
// 175: 4f 8d 3c fe                   leaq    (%r14,%r15,8), %r15
// 179: 48 89 08                      movq    %rcx, (%rax)
// 17c: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 180: 48 8b 00                      movq    (%rax), %rax
// 183: 84 c0                         testb   %al, %al
// 185: 74 17                         je      0x19e <_JIT_ENTRY+0x19e>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _Py_HandlePending
// 191: 48 89 df                      movq    %rbx, %rdi
// 194: ff d0                         callq   *%rax
// 196: 85 c0                         testl   %eax, %eax
// 198: 0f 85 1e 01 00 00             jne     0x2bc <_JIT_ENTRY+0x2bc>
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  _JIT_OPARG
// 1a8: 0f b7 c8                      movzwl  %ax, %ecx
// 1ab: 89 ca                         movl    %ecx, %edx
// 1ad: f7 d2                         notl    %edx
// 1af: 48 63 d2                      movslq  %edx, %rdx
// 1b2: 4c 8d 2c 12                   leaq    (%rdx,%rdx), %r13
// 1b6: 0f b7 c0                      movzwl  %ax, %eax
// 1b9: 48 89 c6                      movq    %rax, %rsi
// 1bc: 48 f7 de                      negq    %rsi
// 1bf: 31 ff                         xorl    %edi, %edi
// 1c1: 66 83 f8 01                   cmpw    $0x1, %ax
// 1c5: 40 0f 94 c7                   sete    %dil
// 1c9: 45 31 c0                      xorl    %r8d, %r8d
// 1cc: 66 83 f8 02                   cmpw    $0x2, %ax
// 1d0: 41 0f 94 c0                   sete    %r8b
// 1d4: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 1d9: 48 f7 d0                      notq    %rax
// 1dc: 48 0f 44 c6                   cmoveq  %rsi, %rax
// 1e0: 41 0f 44 f8                   cmovel  %r8d, %edi
// 1e4: 40 80 ff 01                   cmpb    $0x1, %dil
// 1e8: 75 40                         jne     0x22a <_JIT_ENTRY+0x22a>
// 1ea: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 1ef: 29 ce                         subl    %ecx, %esi
// 1f1: 48 63 de                      movslq  %esi, %rbx
// 1f4: 48 01 d3                      addq    %rdx, %rbx
// 1f7: 4d 8b 24 de                   movq    (%r14,%rbx,8), %r12
// 1fb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001fd:  R_X86_64_64  PyMethodDescr_Type
// 205: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 20a: 75 1e                         jne     0x22a <_JIT_ENTRY+0x22a>
// 20c: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 211: 83 79 10 08                   cmpl    $0x8, 0x10(%rcx)
// 215: 75 13                         jne     0x22a <_JIT_ENTRY+0x22a>
// 217: 49 8b 2c c7                   movq    (%r15,%rax,8), %rbp
// 21b: 48 8b 55 08                   movq    0x8(%rbp), %rdx
// 21f: 49 3b 54 24 10                cmpq    0x10(%r12), %rdx
// 224: 0f 84 ac 00 00 00             je      0x2d6 <_JIT_ENTRY+0x2d6>
// 22a: 4d 89 fe                      movq    %r15, %r14
// 22d: 4c 8b 04 24                   movq    (%rsp), %r8
// 231: e9 51 fe ff ff                jmp     0x87 <_JIT_ENTRY+0x87>
// 236: 41 83 fd 02                   cmpl    $0x2, %r13d
// 23a: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 240: 45 0f 43 fd                   cmovael %r13d, %r15d
// 244: 31 ed                         xorl    %ebp, %ebp
// 246: eb 14                         jmp     0x25c <_JIT_ENTRY+0x25c>
// 248: 0f 1f 84 00 00 00 00 00       nopl    (%rax,%rax)
// 250: 48 ff c5                      incq    %rbp
// 253: 49 39 ef                      cmpq    %rbp, %r15
// 256: 0f 84 a8 fe ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 25c: 4c 8b 2c eb                   movq    (%rbx,%rbp,8), %r13
// 260: 49 8b 45 00                   movq    (%r13), %rax
// 264: 48 85 c0                      testq   %rax, %rax
// 267: 7e 07                         jle     0x270 <_JIT_ENTRY+0x270>
// 269: 85 c0                         testl   %eax, %eax
// 26b: 78 e3                         js      0x250 <_JIT_ENTRY+0x250>
// 26d: eb 27                         jmp     0x296 <_JIT_ENTRY+0x296>
// 26f: 90                            nop
// 270: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000272:  R_X86_64_64  .rodata.str1.1
// 27a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 27f: 4c 89 ea                      movq    %r13, %rdx
// 282: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000284:  R_X86_64_64  _Py_NegativeRefcount
// 28c: ff d0                         callq   *%rax
// 28e: 49 8b 45 00                   movq    (%r13), %rax
// 292: 85 c0                         testl   %eax, %eax
// 294: 78 ba                         js      0x250 <_JIT_ENTRY+0x250>
// 296: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000298:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a0: ff d0                         callq   *%rax
// 2a2: 49 ff 4d 00                   decq    (%r13)
// 2a6: 75 a8                         jne     0x250 <_JIT_ENTRY+0x250>
// 2a8: 4c 89 ef                      movq    %r13, %rdi
// 2ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ad:  R_X86_64_64  _Py_Dealloc
// 2b5: ff d0                         callq   *%rax
// 2b7: eb 97                         jmp     0x250 <_JIT_ENTRY+0x250>
// 2b9: 49 89 c7                      movq    %rax, %r15
// 2bc: 48 8b 04 24                   movq    (%rsp), %rax
// 2c0: 49 29 c7                      subq    %rax, %r15
// 2c3: 49 83 c7 b8                   addq    $-0x48, %r15
// 2c7: 49 c1 ef 03                   shrq    $0x3, %r15
// 2cb: 44 89 78 40                   movl    %r15d, 0x40(%rax)
// 2cf: 31 c0                         xorl    %eax, %eax
// 2d1: e9 d9 fd ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 2d6: 49 8b 74 c7 08                movq    0x8(%r15,%rax,8), %rsi
// 2db: 4c 8b 41 08                   movq    0x8(%rcx), %r8
// 2df: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 2e4: 8b 42 2c                      movl    0x2c(%rdx), %eax
// 2e7: 8d 48 ff                      leal    -0x1(%rax), %ecx
// 2ea: 89 4a 2c                      movl    %ecx, 0x2c(%rdx)
// 2ed: 85 c0                         testl   %eax, %eax
// 2ef: 0f 8e 85 00 00 00             jle     0x37a <_JIT_ENTRY+0x37a>
// 2f5: 4d 8d 3c de                   leaq    (%r14,%rbx,8), %r15
// 2f9: 48 89 ef                      movq    %rbp, %rdi
// 2fc: 48 89 f3                      movq    %rsi, %rbx
// 2ff: 41 ff d0                      callq   *%r8
// 302: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 307: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 30c: ff 40 2c                      incl    0x2c(%rax)
// 30f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000311:  R_X86_64_64  .text+0x3e0
// 319: bf bf 0b 00 00                movl    $0xbbf, %edi            # imm = 0xBBF
// 31e: 48 89 ee                      movq    %rbp, %rsi
// 321: 48 89 c5                      movq    %rax, %rbp
// 324: ff d0                         callq   *%rax
// 326: bf c0 0b 00 00                movl    $0xbc0, %edi            # imm = 0xBC0
// 32b: 48 89 de                      movq    %rbx, %rsi
// 32e: ff d5                         callq   *%rbp
// 330: bf c1 0b 00 00                movl    $0xbc1, %edi            # imm = 0xBC1
// 335: 4c 89 e6                      movq    %r12, %rsi
// 338: ff d5                         callq   *%rbp
// 33a: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 33f: 48 85 c0                      testq   %rax, %rax
// 342: 0f 84 74 ff ff ff             je      0x2bc <_JIT_ENTRY+0x2bc>
// 348: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 34c: 49 89 07                      movq    %rax, (%r15)
// 34f: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 354: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 358: 48 8b 00                      movq    (%rax), %rax
// 35b: 84 c0                         testb   %al, %al
// 35d: 74 57                         je      0x3b6 <_JIT_ENTRY+0x3b6>
// 35f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000361:  R_X86_64_64  _Py_HandlePending
// 369: 48 89 df                      movq    %rbx, %rdi
// 36c: ff d0                         callq   *%rax
// 36e: 85 c0                         testl   %eax, %eax
// 370: 74 44                         je      0x3b6 <_JIT_ENTRY+0x3b6>
// 372: 4d 89 f7                      movq    %r14, %r15
// 375: e9 42 ff ff ff                jmp     0x2bc <_JIT_ENTRY+0x2bc>
// 37a: 48 89 74 24 08                movq    %rsi, 0x8(%rsp)
// 37f: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000381:  R_X86_64_64  .rodata.str1.1+0x39
// 389: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000038b:  R_X86_64_64  _Py_CheckRecursiveCall
// 393: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 398: 4c 89 44 24 18                movq    %r8, 0x18(%rsp)
// 39d: ff d0                         callq   *%rax
// 39f: 4c 8b 44 24 18                movq    0x18(%rsp), %r8
// 3a4: 48 8b 74 24 08                movq    0x8(%rsp), %rsi
// 3a9: 85 c0                         testl   %eax, %eax
// 3ab: 0f 85 0b ff ff ff             jne     0x2bc <_JIT_ENTRY+0x2bc>
// 3b1: e9 3f ff ff ff                jmp     0x2f5 <_JIT_ENTRY+0x2f5>
// 3b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003b8:  R_X86_64_64  _JIT_CONTINUE
// 3c0: 48 8b 3c 24                   movq    (%rsp), %rdi
// 3c4: 4c 89 f6                      movq    %r14, %rsi
// 3c7: 48 89 da                      movq    %rbx, %rdx
// 3ca: 48 83 c4 28                   addq    $0x28, %rsp
// 3ce: 5b                            popq    %rbx
// 3cf: 41 5c                         popq    %r12
// 3d1: 41 5d                         popq    %r13
// 3d3: 41 5e                         popq    %r14
// 3d5: 41 5f                         popq    %r15
// 3d7: 5d                            popq    %rbp
// 3d8: ff e0                         jmpq    *%rax
// 3da: 66 0f 1f 44 00 00             nopw    (%rax,%rax)
// 
// 00000000000003e0 <Py_DECREF>:
// 3e0: 53                            pushq   %rbx
// 3e1: 48 89 f3                      movq    %rsi, %rbx
// 3e4: 48 8b 06                      movq    (%rsi), %rax
// 3e7: 48 85 c0                      testq   %rax, %rax
// 3ea: 7e 06                         jle     0x3f2 <Py_DECREF+0x12>
// 3ec: 85 c0                         testl   %eax, %eax
// 3ee: 79 24                         jns     0x414 <Py_DECREF+0x34>
// 3f0: eb 33                         jmp     0x425 <Py_DECREF+0x45>
// 3f2: 89 fe                         movl    %edi, %esi
// 3f4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003f6:  R_X86_64_64  .rodata.str1.1
// 3fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000400:  R_X86_64_64  _Py_NegativeRefcount
// 408: 48 89 da                      movq    %rbx, %rdx
// 40b: ff d0                         callq   *%rax
// 40d: 48 8b 03                      movq    (%rbx), %rax
// 410: 85 c0                         testl   %eax, %eax
// 412: 78 11                         js      0x425 <Py_DECREF+0x45>
// 414: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000416:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 41e: ff d0                         callq   *%rax
// 420: 48 ff 0b                      decq    (%rbx)
// 423: 74 02                         je      0x427 <Py_DECREF+0x47>
// 425: 5b                            popq    %rbx
// 426: c3                            retq
// 427: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000429:  R_X86_64_64  _Py_Dealloc
// 431: 48 89 df                      movq    %rbx, %rdi
// 434: 5b                            popq    %rbx
// 435: ff e0                         jmpq    *%rax
// 437: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_METHOD_DESCRIPTOR_O_code_body[1080] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd6, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xde, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4b, 0x8d, 0x1c, 0xce, 0x48, 0x8b, 0x3b, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc6, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x70, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x18, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x73, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0x32, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x4c, 0x24, 0x20, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x44, 0x01, 0x00, 0x00, 0x4f, 0x8d, 0x3c, 0xfe, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x1e, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x89, 0xca, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x4c, 0x8d, 0x2c, 0x12, 0x0f, 0xb7, 0xc0, 0x48, 0x89, 0xc6, 0x48, 0xf7, 0xde, 0x31, 0xff, 0x66, 0x83, 0xf8, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x45, 0x31, 0xc0, 0x66, 0x83, 0xf8, 0x02, 0x41, 0x0f, 0x94, 0xc0, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x48, 0xf7, 0xd0, 0x48, 0x0f, 0x44, 0xc6, 0x41, 0x0f, 0x44, 0xf8, 0x40, 0x80, 0xff, 0x01, 0x75, 0x40, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xce, 0x48, 0x63, 0xde, 0x48, 0x01, 0xd3, 0x4d, 0x8b, 0x24, 0xde, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x1e, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x83, 0x79, 0x10, 0x08, 0x75, 0x13, 0x49, 0x8b, 0x2c, 0xc7, 0x48, 0x8b, 0x55, 0x08, 0x49, 0x3b, 0x54, 0x24, 0x10, 0x0f, 0x84, 0xac, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xfe, 0x4c, 0x8b, 0x04, 0x24, 0xe9, 0x51, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xed, 0xeb, 0x14, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xef, 0x0f, 0x84, 0xa8, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x2c, 0xeb, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x27, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x49, 0x89, 0xc7, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x78, 0x40, 0x31, 0xc0, 0xe9, 0xd9, 0xfd, 0xff, 0xff, 0x49, 0x8b, 0x74, 0xc7, 0x08, 0x4c, 0x8b, 0x41, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x8b, 0x42, 0x2c, 0x8d, 0x48, 0xff, 0x89, 0x4a, 0x2c, 0x85, 0xc0, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x4d, 0x8d, 0x3c, 0xde, 0x48, 0x89, 0xef, 0x48, 0x89, 0xf3, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x44, 0x24, 0x10, 0xff, 0x40, 0x2c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0xbf, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xee, 0x48, 0x89, 0xc5, 0xff, 0xd0, 0xbf, 0xc0, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xde, 0xff, 0xd5, 0xbf, 0xc1, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd5, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x74, 0xff, 0xff, 0xff, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x89, 0x07, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x57, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x44, 0x4d, 0x89, 0xf7, 0xe9, 0x42, 0xff, 0xff, 0xff, 0x48, 0x89, 0x74, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x4c, 0x89, 0x44, 0x24, 0x18, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x18, 0x48, 0x8b, 0x74, 0x24, 0x08, 0x85, 0xc0, 0x0f, 0x85, 0x0b, 0xff, 0xff, 0xff, 0xe9, 0x3f, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x66, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x53, 0x48, 0x89, 0xf3, 0x48, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x24, 0xeb, 0x33, 0x89, 0xfe, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x74, 0x02, 0x5b, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x5b, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_METHOD_DESCRIPTOR_O_code_holes[25] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x11e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x272, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x284, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x298, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x311, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x3e0},
    {0x361, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x381, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x38b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x3b8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x3f6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x400, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x416, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x429, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_METHOD_DESCRIPTOR_O_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_METHOD_DESCRIPTOR_O_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_STR_1
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_CALL_STR_1.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fd                      movq    %rdi, %rbp
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 cf                   movq    (%r15,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d7                   movq    (%r15,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4b 8d 1c c7                   leaq    (%r15,%r8,8), %rbx
// 79: 48 8b 3b                      movq    (%rbx), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 3a                         je      0xc1 <_JIT_ENTRY+0xc1>
// 87: 4c 89 fb                      movq    %r15, %rbx
// 8a: 48 29 eb                      subq    %rbp, %rbx
// 8d: 48 83 c3 b8                   addq    $-0x48, %rbx
// 91: 48 c1 eb 03                   shrq    $0x3, %rbx
// 95: 89 5d 40                      movl    %ebx, 0x40(%rbp)
// 98: 48 8b 45 00                   movq    (%rbp), %rax
// 9c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009e:  R_X86_64_64  _JIT_TARGET
// a6: 89 c9                         movl    %ecx, %ecx
// a8: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// ac: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b2: 48 83 c4 28                   addq    $0x28, %rsp
// b6: 5b                            popq    %rbx
// b7: 41 5c                         popq    %r12
// b9: 41 5d                         popq    %r13
// bb: 41 5e                         popq    %r14
// bd: 41 5f                         popq    %r15
// bf: 5d                            popq    %rbp
// c0: c3                            retq
// c1: 4c 89 54 24 20                movq    %r10, 0x20(%rsp)
// c6: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// cb: 48 89 14 24                   movq    %rdx, (%rsp)
// cf: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// d4: 48 85 c0                      testq   %rax, %rax
// d7: 40 0f 94 c5                   sete    %bpl
// db: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// df: 48 8d 73 08                   leaq    0x8(%rbx), %rsi
// e3: 48 63 d0                      movslq  %eax, %rdx
// e6: ff 51 08                      callq   *0x8(%rcx)
// e9: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _JIT_OPARG
// f8: 66 85 c0                      testw   %ax, %ax
// fb: 0f 94 c0                      sete    %al
// fe: 40 84 c5                      testb   %al, %bpl
// 101: 0f 84 b8 00 00 00             je      0x1bf <_JIT_ENTRY+0x1bf>
// 107: 49 8b 04 24                   movq    (%r12), %rax
// 10b: 48 85 c0                      testq   %rax, %rax
// 10e: 7f 22                         jg      0x132 <_JIT_ENTRY+0x132>
// 110: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000112:  R_X86_64_64  .rodata.str1.1
// 11a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011c:  R_X86_64_64  _Py_NegativeRefcount
// 124: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 129: 4c 89 e2                      movq    %r12, %rdx
// 12c: ff d0                         callq   *%rax
// 12e: 49 8b 04 24                   movq    (%r12), %rax
// 132: 85 c0                         testl   %eax, %eax
// 134: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 139: 4c 8b 34 24                   movq    (%rsp), %r14
// 13d: 78 21                         js      0x160 <_JIT_ENTRY+0x160>
// 13f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000141:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 149: ff d0                         callq   *%rax
// 14b: 49 ff 0c 24                   decq    (%r12)
// 14f: 75 0f                         jne     0x160 <_JIT_ENTRY+0x160>
// 151: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000153:  R_X86_64_64  _Py_Dealloc
// 15b: 4c 89 e7                      movq    %r12, %rdi
// 15e: ff d0                         callq   *%rax
// 160: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 165: 4d 8d 2c c7                   leaq    (%r15,%rax,8), %r13
// 169: 48 8b 4c 24 18                movq    0x18(%rsp), %rcx
// 16e: 48 85 c9                      testq   %rcx, %rcx
// 171: 74 36                         je      0x1a9 <_JIT_ENTRY+0x1a9>
// 173: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 178: 49 8d 1c c7                   leaq    (%r15,%rax,8), %rbx
// 17c: 49 89 4d 00                   movq    %rcx, (%r13)
// 180: 49 8b 46 10                   movq    0x10(%r14), %rax
// 184: 48 8b 00                      movq    (%rax), %rax
// 187: 84 c0                         testb   %al, %al
// 189: 0f 84 ba 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _Py_HandlePending
// 199: 4c 89 f7                      movq    %r14, %rdi
// 19c: ff d0                         callq   *%rax
// 19e: 85 c0                         testl   %eax, %eax
// 1a0: 0f 84 a3 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 1a6: 49 89 dd                      movq    %rbx, %r13
// 1a9: 49 29 ed                      subq    %rbp, %r13
// 1ac: 49 83 c5 b8                   addq    $-0x48, %r13
// 1b0: 49 c1 ed 03                   shrq    $0x3, %r13
// 1b4: 44 89 6d 40                   movl    %r13d, 0x40(%rbp)
// 1b8: 31 c0                         xorl    %eax, %eax
// 1ba: e9 f3 fe ff ff                jmp     0xb2 <_JIT_ENTRY+0xb2>
// 1bf: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1c3: 41 be 01 00 00 00             movl    $0x1, %r14d
// 1c9: 45 0f 43 f5                   cmovael %r13d, %r14d
// 1cd: 31 ed                         xorl    %ebp, %ebp
// 1cf: eb 1b                         jmp     0x1ec <_JIT_ENTRY+0x1ec>
// 1d1: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// 1e0: 48 ff c5                      incq    %rbp
// 1e3: 49 39 ee                      cmpq    %rbp, %r14
// 1e6: 0f 84 1b ff ff ff             je      0x107 <_JIT_ENTRY+0x107>
// 1ec: 4c 8b 2c eb                   movq    (%rbx,%rbp,8), %r13
// 1f0: 49 8b 45 00                   movq    (%r13), %rax
// 1f4: 48 85 c0                      testq   %rax, %rax
// 1f7: 7e 07                         jle     0x200 <_JIT_ENTRY+0x200>
// 1f9: 85 c0                         testl   %eax, %eax
// 1fb: 78 e3                         js      0x1e0 <_JIT_ENTRY+0x1e0>
// 1fd: eb 27                         jmp     0x226 <_JIT_ENTRY+0x226>
// 1ff: 90                            nop
// 200: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1
// 20a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 20f: 4c 89 ea                      movq    %r13, %rdx
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: ff d0                         callq   *%rax
// 21e: 49 8b 45 00                   movq    (%r13), %rax
// 222: 85 c0                         testl   %eax, %eax
// 224: 78 ba                         js      0x1e0 <_JIT_ENTRY+0x1e0>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 230: ff d0                         callq   *%rax
// 232: 49 ff 4d 00                   decq    (%r13)
// 236: 75 a8                         jne     0x1e0 <_JIT_ENTRY+0x1e0>
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: ff d0                         callq   *%rax
// 247: eb 97                         jmp     0x1e0 <_JIT_ENTRY+0x1e0>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _JIT_OPARG
// 253: 0f b7 c0                      movzwl  %ax, %eax
// 256: 89 c1                         movl    %eax, %ecx
// 258: f7 d1                         notl    %ecx
// 25a: 48 63 c9                      movslq  %ecx, %rcx
// 25d: 4c 8d 34 09                   leaq    (%rcx,%rcx), %r14
// 261: 4b 83 3c f7 00                cmpq    $0x0, (%r15,%r14,8)
// 266: 0f 85 1e fe ff ff             jne     0x8a <_JIT_ENTRY+0x8a>
// 26c: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 271: 29 c2                         subl    %eax, %edx
// 273: 48 63 c2                      movslq  %edx, %rax
// 276: 48 01 c8                      addq    %rcx, %rax
// 279: 4d 8d 2c c7                   leaq    (%r15,%rax,8), %r13
// 27d: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 000000000000027f:  R_X86_64_64  PyUnicode_Type
// 287: 4d 39 65 00                   cmpq    %r12, (%r13)
// 28b: 0f 85 f9 fd ff ff             jne     0x8a <_JIT_ENTRY+0x8a>
// 291: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000293:  R_X86_64_64  _JIT_OPARG
// 29b: 0f b7 c8                      movzwl  %ax, %ecx
// 29e: f7 d0                         notl    %eax
// 2a0: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 2a5: 48 98                         cltq
// 2a7: 48 29 c8                      subq    %rcx, %rax
// 2aa: 49 8b 2c c7                   movq    (%r15,%rax,8), %rbp
// 2ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b0:  R_X86_64_64  PyObject_Str
// 2b8: 48 89 ef                      movq    %rbp, %rdi
// 2bb: ff d0                         callq   *%rax
// 2bd: 48 89 c3                      movq    %rax, %rbx
// 2c0: 48 8b 45 00                   movq    (%rbp), %rax
// 2c4: 48 85 c0                      testq   %rax, %rax
// 2c7: 7f 22                         jg      0x2eb <_JIT_ENTRY+0x2eb>
// 2c9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002cb:  R_X86_64_64  .rodata.str1.1
// 2d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d5:  R_X86_64_64  _Py_NegativeRefcount
// 2dd: be 95 0a 00 00                movl    $0xa95, %esi            # imm = 0xA95
// 2e2: 48 89 ea                      movq    %rbp, %rdx
// 2e5: ff d0                         callq   *%rax
// 2e7: 48 8b 45 00                   movq    (%rbp), %rax
// 2eb: 85 c0                         testl   %eax, %eax
// 2ed: 78 21                         js      0x310 <_JIT_ENTRY+0x310>
// 2ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2f9: ff d0                         callq   *%rax
// 2fb: 48 ff 4d 00                   decq    (%rbp)
// 2ff: 75 0f                         jne     0x310 <_JIT_ENTRY+0x310>
// 301: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000303:  R_X86_64_64  _Py_Dealloc
// 30b: 48 89 ef                      movq    %rbp, %rdi
// 30e: ff d0                         callq   *%rax
// 310: 49 8b 04 24                   movq    (%r12), %rax
// 314: 48 85 c0                      testq   %rax, %rax
// 317: 7f 22                         jg      0x33b <_JIT_ENTRY+0x33b>
// 319: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000031b:  R_X86_64_64  .rodata.str1.1
// 323: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000325:  R_X86_64_64  _Py_NegativeRefcount
// 32d: be 96 0a 00 00                movl    $0xa96, %esi            # imm = 0xA96
// 332: 4c 89 e2                      movq    %r12, %rdx
// 335: ff d0                         callq   *%rax
// 337: 49 8b 04 24                   movq    (%r12), %rax
// 33b: 85 c0                         testl   %eax, %eax
// 33d: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 342: 78 28                         js      0x36c <_JIT_ENTRY+0x36c>
// 344: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000346:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 34e: ff d0                         callq   *%rax
// 350: 49 ff 0c 24                   decq    (%r12)
// 354: 75 16                         jne     0x36c <_JIT_ENTRY+0x36c>
// 356: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000358:  R_X86_64_64  PyUnicode_Type
// 360: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000362:  R_X86_64_64  _Py_Dealloc
// 36a: ff d0                         callq   *%rax
// 36c: 48 85 db                      testq   %rbx, %rbx
// 36f: 0f 84 34 fe ff ff             je      0x1a9 <_JIT_ENTRY+0x1a9>
// 375: 4f 8d 3c f7                   leaq    (%r15,%r14,8), %r15
// 379: 49 89 5d 00                   movq    %rbx, (%r13)
// 37d: 48 8b 1c 24                   movq    (%rsp), %rbx
// 381: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 385: 48 8b 00                      movq    (%rax), %rax
// 388: 84 c0                         testb   %al, %al
// 38a: 74 1b                         je      0x3a7 <_JIT_ENTRY+0x3a7>
// 38c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000038e:  R_X86_64_64  _Py_HandlePending
// 396: 48 89 df                      movq    %rbx, %rdi
// 399: ff d0                         callq   *%rax
// 39b: 85 c0                         testl   %eax, %eax
// 39d: 74 08                         je      0x3a7 <_JIT_ENTRY+0x3a7>
// 39f: 4d 89 fd                      movq    %r15, %r13
// 3a2: e9 02 fe ff ff                jmp     0x1a9 <_JIT_ENTRY+0x1a9>
// 3a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a9:  R_X86_64_64  _JIT_CONTINUE
// 3b1: 48 89 ef                      movq    %rbp, %rdi
// 3b4: 4c 89 fe                      movq    %r15, %rsi
// 3b7: 48 89 da                      movq    %rbx, %rdx
// 3ba: 48 83 c4 28                   addq    $0x28, %rsp
// 3be: 5b                            popq    %rbx
// 3bf: 41 5c                         popq    %r12
// 3c1: 41 5d                         popq    %r13
// 3c3: 41 5e                         popq    %r14
// 3c5: 41 5f                         popq    %r15
// 3c7: 5d                            popq    %rbp
// 3c8: ff e0                         jmpq    *%rax
// 3ca: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_STR_1_code_body[971] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfd, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xcf, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4b, 0x8d, 0x1c, 0xc7, 0x48, 0x8b, 0x3b, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x3a, 0x4c, 0x89, 0xfb, 0x48, 0x29, 0xeb, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x89, 0x5d, 0x40, 0x48, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x20, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x73, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xb8, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x4c, 0x8b, 0x34, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4d, 0x8d, 0x2c, 0xc7, 0x48, 0x8b, 0x4c, 0x24, 0x18, 0x48, 0x85, 0xc9, 0x74, 0x36, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x1c, 0xc7, 0x49, 0x89, 0x4d, 0x00, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xba, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xa3, 0x00, 0x00, 0x00, 0x49, 0x89, 0xdd, 0x49, 0x29, 0xed, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6d, 0x40, 0x31, 0xc0, 0xe9, 0xf3, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xed, 0xeb, 0x1b, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xee, 0x0f, 0x84, 0x1b, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x2c, 0xeb, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x27, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x89, 0xc1, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x4c, 0x8d, 0x34, 0x09, 0x4b, 0x83, 0x3c, 0xf7, 0x00, 0x0f, 0x85, 0x1e, 0xfe, 0xff, 0xff, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x48, 0x63, 0xc2, 0x48, 0x01, 0xc8, 0x4d, 0x8d, 0x2c, 0xc7, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x39, 0x65, 0x00, 0x0f, 0x85, 0xf9, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x29, 0xc8, 0x49, 0x8b, 0x2c, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x89, 0xc3, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x95, 0x0a, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x96, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xdb, 0x0f, 0x84, 0x34, 0xfe, 0xff, 0xff, 0x4f, 0x8d, 0x3c, 0xf7, 0x49, 0x89, 0x5d, 0x00, 0x48, 0x8b, 0x1c, 0x24, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x1b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x08, 0x4d, 0x89, 0xfd, 0xe9, 0x02, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_STR_1_code_holes[29] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9e, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x11c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x27f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x293, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Str, 0x0},
    {0x2cb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2d5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2f1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x303, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x31b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x325, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x346, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x358, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x362, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x38e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x3a9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_STR_1_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_STR_1_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_TUPLE_1
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_CALL_TUPLE_1.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fd                      movq    %rdi, %rbp
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 cf                   movq    (%r15,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d7                   movq    (%r15,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4b 8d 1c c7                   leaq    (%r15,%r8,8), %rbx
// 79: 48 8b 3b                      movq    (%rbx), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 3a                         je      0xc1 <_JIT_ENTRY+0xc1>
// 87: 4c 89 fb                      movq    %r15, %rbx
// 8a: 48 29 eb                      subq    %rbp, %rbx
// 8d: 48 83 c3 b8                   addq    $-0x48, %rbx
// 91: 48 c1 eb 03                   shrq    $0x3, %rbx
// 95: 89 5d 40                      movl    %ebx, 0x40(%rbp)
// 98: 48 8b 45 00                   movq    (%rbp), %rax
// 9c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009e:  R_X86_64_64  _JIT_TARGET
// a6: 89 c9                         movl    %ecx, %ecx
// a8: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// ac: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b2: 48 83 c4 28                   addq    $0x28, %rsp
// b6: 5b                            popq    %rbx
// b7: 41 5c                         popq    %r12
// b9: 41 5d                         popq    %r13
// bb: 41 5e                         popq    %r14
// bd: 41 5f                         popq    %r15
// bf: 5d                            popq    %rbp
// c0: c3                            retq
// c1: 4c 89 54 24 20                movq    %r10, 0x20(%rsp)
// c6: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// cb: 48 89 14 24                   movq    %rdx, (%rsp)
// cf: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// d4: 48 85 c0                      testq   %rax, %rax
// d7: 40 0f 94 c5                   sete    %bpl
// db: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// df: 48 8d 73 08                   leaq    0x8(%rbx), %rsi
// e3: 48 63 d0                      movslq  %eax, %rdx
// e6: ff 51 08                      callq   *0x8(%rcx)
// e9: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _JIT_OPARG
// f8: 66 85 c0                      testw   %ax, %ax
// fb: 0f 94 c0                      sete    %al
// fe: 40 84 c5                      testb   %al, %bpl
// 101: 0f 84 b8 00 00 00             je      0x1bf <_JIT_ENTRY+0x1bf>
// 107: 49 8b 04 24                   movq    (%r12), %rax
// 10b: 48 85 c0                      testq   %rax, %rax
// 10e: 7f 22                         jg      0x132 <_JIT_ENTRY+0x132>
// 110: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000112:  R_X86_64_64  .rodata.str1.1
// 11a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011c:  R_X86_64_64  _Py_NegativeRefcount
// 124: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 129: 4c 89 e2                      movq    %r12, %rdx
// 12c: ff d0                         callq   *%rax
// 12e: 49 8b 04 24                   movq    (%r12), %rax
// 132: 85 c0                         testl   %eax, %eax
// 134: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 139: 4c 8b 34 24                   movq    (%rsp), %r14
// 13d: 78 21                         js      0x160 <_JIT_ENTRY+0x160>
// 13f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000141:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 149: ff d0                         callq   *%rax
// 14b: 49 ff 0c 24                   decq    (%r12)
// 14f: 75 0f                         jne     0x160 <_JIT_ENTRY+0x160>
// 151: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000153:  R_X86_64_64  _Py_Dealloc
// 15b: 4c 89 e7                      movq    %r12, %rdi
// 15e: ff d0                         callq   *%rax
// 160: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 165: 4d 8d 2c c7                   leaq    (%r15,%rax,8), %r13
// 169: 48 8b 4c 24 18                movq    0x18(%rsp), %rcx
// 16e: 48 85 c9                      testq   %rcx, %rcx
// 171: 74 36                         je      0x1a9 <_JIT_ENTRY+0x1a9>
// 173: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 178: 49 8d 1c c7                   leaq    (%r15,%rax,8), %rbx
// 17c: 49 89 4d 00                   movq    %rcx, (%r13)
// 180: 49 8b 46 10                   movq    0x10(%r14), %rax
// 184: 48 8b 00                      movq    (%rax), %rax
// 187: 84 c0                         testb   %al, %al
// 189: 0f 84 ba 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _Py_HandlePending
// 199: 4c 89 f7                      movq    %r14, %rdi
// 19c: ff d0                         callq   *%rax
// 19e: 85 c0                         testl   %eax, %eax
// 1a0: 0f 84 a3 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 1a6: 49 89 dd                      movq    %rbx, %r13
// 1a9: 49 29 ed                      subq    %rbp, %r13
// 1ac: 49 83 c5 b8                   addq    $-0x48, %r13
// 1b0: 49 c1 ed 03                   shrq    $0x3, %r13
// 1b4: 44 89 6d 40                   movl    %r13d, 0x40(%rbp)
// 1b8: 31 c0                         xorl    %eax, %eax
// 1ba: e9 f3 fe ff ff                jmp     0xb2 <_JIT_ENTRY+0xb2>
// 1bf: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1c3: 41 be 01 00 00 00             movl    $0x1, %r14d
// 1c9: 45 0f 43 f5                   cmovael %r13d, %r14d
// 1cd: 31 ed                         xorl    %ebp, %ebp
// 1cf: eb 1b                         jmp     0x1ec <_JIT_ENTRY+0x1ec>
// 1d1: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// 1e0: 48 ff c5                      incq    %rbp
// 1e3: 49 39 ee                      cmpq    %rbp, %r14
// 1e6: 0f 84 1b ff ff ff             je      0x107 <_JIT_ENTRY+0x107>
// 1ec: 4c 8b 2c eb                   movq    (%rbx,%rbp,8), %r13
// 1f0: 49 8b 45 00                   movq    (%r13), %rax
// 1f4: 48 85 c0                      testq   %rax, %rax
// 1f7: 7e 07                         jle     0x200 <_JIT_ENTRY+0x200>
// 1f9: 85 c0                         testl   %eax, %eax
// 1fb: 78 e3                         js      0x1e0 <_JIT_ENTRY+0x1e0>
// 1fd: eb 27                         jmp     0x226 <_JIT_ENTRY+0x226>
// 1ff: 90                            nop
// 200: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1
// 20a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 20f: 4c 89 ea                      movq    %r13, %rdx
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: ff d0                         callq   *%rax
// 21e: 49 8b 45 00                   movq    (%r13), %rax
// 222: 85 c0                         testl   %eax, %eax
// 224: 78 ba                         js      0x1e0 <_JIT_ENTRY+0x1e0>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 230: ff d0                         callq   *%rax
// 232: 49 ff 4d 00                   decq    (%r13)
// 236: 75 a8                         jne     0x1e0 <_JIT_ENTRY+0x1e0>
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: ff d0                         callq   *%rax
// 247: eb 97                         jmp     0x1e0 <_JIT_ENTRY+0x1e0>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _JIT_OPARG
// 253: 0f b7 c0                      movzwl  %ax, %eax
// 256: 89 c1                         movl    %eax, %ecx
// 258: f7 d1                         notl    %ecx
// 25a: 48 63 c9                      movslq  %ecx, %rcx
// 25d: 4c 8d 34 09                   leaq    (%rcx,%rcx), %r14
// 261: 4b 83 3c f7 00                cmpq    $0x0, (%r15,%r14,8)
// 266: 0f 85 1e fe ff ff             jne     0x8a <_JIT_ENTRY+0x8a>
// 26c: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 271: 29 c2                         subl    %eax, %edx
// 273: 48 63 c2                      movslq  %edx, %rax
// 276: 48 01 c8                      addq    %rcx, %rax
// 279: 4d 8d 2c c7                   leaq    (%r15,%rax,8), %r13
// 27d: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 000000000000027f:  R_X86_64_64  PyTuple_Type
// 287: 4d 39 65 00                   cmpq    %r12, (%r13)
// 28b: 0f 85 f9 fd ff ff             jne     0x8a <_JIT_ENTRY+0x8a>
// 291: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000293:  R_X86_64_64  _JIT_OPARG
// 29b: 0f b7 c8                      movzwl  %ax, %ecx
// 29e: f7 d0                         notl    %eax
// 2a0: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 2a5: 48 98                         cltq
// 2a7: 48 29 c8                      subq    %rcx, %rax
// 2aa: 49 8b 2c c7                   movq    (%r15,%rax,8), %rbp
// 2ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b0:  R_X86_64_64  PySequence_Tuple
// 2b8: 48 89 ef                      movq    %rbp, %rdi
// 2bb: ff d0                         callq   *%rax
// 2bd: 48 89 c3                      movq    %rax, %rbx
// 2c0: 48 8b 45 00                   movq    (%rbp), %rax
// 2c4: 48 85 c0                      testq   %rax, %rax
// 2c7: 7f 22                         jg      0x2eb <_JIT_ENTRY+0x2eb>
// 2c9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002cb:  R_X86_64_64  .rodata.str1.1
// 2d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d5:  R_X86_64_64  _Py_NegativeRefcount
// 2dd: be ad 0a 00 00                movl    $0xaad, %esi            # imm = 0xAAD
// 2e2: 48 89 ea                      movq    %rbp, %rdx
// 2e5: ff d0                         callq   *%rax
// 2e7: 48 8b 45 00                   movq    (%rbp), %rax
// 2eb: 85 c0                         testl   %eax, %eax
// 2ed: 78 21                         js      0x310 <_JIT_ENTRY+0x310>
// 2ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2f9: ff d0                         callq   *%rax
// 2fb: 48 ff 4d 00                   decq    (%rbp)
// 2ff: 75 0f                         jne     0x310 <_JIT_ENTRY+0x310>
// 301: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000303:  R_X86_64_64  _Py_Dealloc
// 30b: 48 89 ef                      movq    %rbp, %rdi
// 30e: ff d0                         callq   *%rax
// 310: 49 8b 04 24                   movq    (%r12), %rax
// 314: 48 85 c0                      testq   %rax, %rax
// 317: 7f 22                         jg      0x33b <_JIT_ENTRY+0x33b>
// 319: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000031b:  R_X86_64_64  .rodata.str1.1
// 323: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000325:  R_X86_64_64  _Py_NegativeRefcount
// 32d: be ae 0a 00 00                movl    $0xaae, %esi            # imm = 0xAAE
// 332: 4c 89 e2                      movq    %r12, %rdx
// 335: ff d0                         callq   *%rax
// 337: 49 8b 04 24                   movq    (%r12), %rax
// 33b: 85 c0                         testl   %eax, %eax
// 33d: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 342: 78 28                         js      0x36c <_JIT_ENTRY+0x36c>
// 344: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000346:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 34e: ff d0                         callq   *%rax
// 350: 49 ff 0c 24                   decq    (%r12)
// 354: 75 16                         jne     0x36c <_JIT_ENTRY+0x36c>
// 356: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000358:  R_X86_64_64  PyTuple_Type
// 360: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000362:  R_X86_64_64  _Py_Dealloc
// 36a: ff d0                         callq   *%rax
// 36c: 48 85 db                      testq   %rbx, %rbx
// 36f: 0f 84 34 fe ff ff             je      0x1a9 <_JIT_ENTRY+0x1a9>
// 375: 4f 8d 3c f7                   leaq    (%r15,%r14,8), %r15
// 379: 49 89 5d 00                   movq    %rbx, (%r13)
// 37d: 48 8b 1c 24                   movq    (%rsp), %rbx
// 381: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 385: 48 8b 00                      movq    (%rax), %rax
// 388: 84 c0                         testb   %al, %al
// 38a: 74 1b                         je      0x3a7 <_JIT_ENTRY+0x3a7>
// 38c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000038e:  R_X86_64_64  _Py_HandlePending
// 396: 48 89 df                      movq    %rbx, %rdi
// 399: ff d0                         callq   *%rax
// 39b: 85 c0                         testl   %eax, %eax
// 39d: 74 08                         je      0x3a7 <_JIT_ENTRY+0x3a7>
// 39f: 4d 89 fd                      movq    %r15, %r13
// 3a2: e9 02 fe ff ff                jmp     0x1a9 <_JIT_ENTRY+0x1a9>
// 3a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a9:  R_X86_64_64  _JIT_CONTINUE
// 3b1: 48 89 ef                      movq    %rbp, %rdi
// 3b4: 4c 89 fe                      movq    %r15, %rsi
// 3b7: 48 89 da                      movq    %rbx, %rdx
// 3ba: 48 83 c4 28                   addq    $0x28, %rsp
// 3be: 5b                            popq    %rbx
// 3bf: 41 5c                         popq    %r12
// 3c1: 41 5d                         popq    %r13
// 3c3: 41 5e                         popq    %r14
// 3c5: 41 5f                         popq    %r15
// 3c7: 5d                            popq    %rbp
// 3c8: ff e0                         jmpq    *%rax
// 3ca: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_TUPLE_1_code_body[971] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfd, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xcf, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4b, 0x8d, 0x1c, 0xc7, 0x48, 0x8b, 0x3b, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x3a, 0x4c, 0x89, 0xfb, 0x48, 0x29, 0xeb, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x89, 0x5d, 0x40, 0x48, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x20, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x73, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xb8, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x4c, 0x8b, 0x34, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4d, 0x8d, 0x2c, 0xc7, 0x48, 0x8b, 0x4c, 0x24, 0x18, 0x48, 0x85, 0xc9, 0x74, 0x36, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x1c, 0xc7, 0x49, 0x89, 0x4d, 0x00, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xba, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xa3, 0x00, 0x00, 0x00, 0x49, 0x89, 0xdd, 0x49, 0x29, 0xed, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6d, 0x40, 0x31, 0xc0, 0xe9, 0xf3, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xed, 0xeb, 0x1b, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xee, 0x0f, 0x84, 0x1b, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x2c, 0xeb, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x27, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x89, 0xc1, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x4c, 0x8d, 0x34, 0x09, 0x4b, 0x83, 0x3c, 0xf7, 0x00, 0x0f, 0x85, 0x1e, 0xfe, 0xff, 0xff, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x48, 0x63, 0xc2, 0x48, 0x01, 0xc8, 0x4d, 0x8d, 0x2c, 0xc7, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x39, 0x65, 0x00, 0x0f, 0x85, 0xf9, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x29, 0xc8, 0x49, 0x8b, 0x2c, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x89, 0xc3, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xad, 0x0a, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xdb, 0x0f, 0x84, 0x34, 0xfe, 0xff, 0xff, 0x4f, 0x8d, 0x3c, 0xf7, 0x49, 0x89, 0x5d, 0x00, 0x48, 0x8b, 0x1c, 0x24, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x1b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x08, 0x4d, 0x89, 0xfd, 0xe9, 0x02, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_TUPLE_1_code_holes[29] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9e, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x11c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x27f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x293, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySequence_Tuple, 0x0},
    {0x2cb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2d5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2f1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x303, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x31b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x325, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x346, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x358, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x362, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x38e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x3a9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_TUPLE_1_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_TUPLE_1_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_TYPE_1
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_CALL_TYPE_1.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 ff                      movq    %rdi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 30: 44 29 cf                      subl    %r9d, %edi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 48: 48 63 ef                      movslq  %edi, %rbp
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4c 8b 24 ee                   movq    (%rsi,%rbp,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4a 8d 1c c6                   leaq    (%rsi,%r8,8), %rbx
// 79: 48 8b 3b                      movq    (%rbx), %rdi
// 7c: 4c 8b 47 08                   movq    0x8(%rdi), %r8
// 80: 4d 3b 44 24 10                cmpq    0x10(%r12), %r8
// 85: 74 3a                         je      0xc1 <_JIT_ENTRY+0xc1>
// 87: 48 89 f3                      movq    %rsi, %rbx
// 8a: 4c 29 fb                      subq    %r15, %rbx
// 8d: 48 83 c3 b8                   addq    $-0x48, %rbx
// 91: 48 c1 eb 03                   shrq    $0x3, %rbx
// 95: 41 89 5f 40                   movl    %ebx, 0x40(%r15)
// 99: 49 8b 07                      movq    (%r15), %rax
// 9c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009e:  R_X86_64_64  _JIT_TARGET
// a6: 89 c9                         movl    %ecx, %ecx
// a8: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// ac: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b2: 48 83 c4 28                   addq    $0x28, %rsp
// b6: 5b                            popq    %rbx
// b7: 41 5c                         popq    %r12
// b9: 41 5d                         popq    %r13
// bb: 41 5e                         popq    %r14
// bd: 41 5f                         popq    %r15
// bf: 5d                            popq    %rbp
// c0: c3                            retq
// c1: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c6: 48 89 34 24                   movq    %rsi, (%rsp)
// ca: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// cf: 4c 89 7c 24 20                movq    %r15, 0x20(%rsp)
// d4: 48 85 c0                      testq   %rax, %rax
// d7: 41 0f 94 c6                   sete    %r14b
// db: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// df: 48 8d 73 08                   leaq    0x8(%rbx), %rsi
// e3: 48 63 d0                      movslq  %eax, %rdx
// e6: ff 51 08                      callq   *0x8(%rcx)
// e9: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _JIT_OPARG
// f8: 66 85 c0                      testw   %ax, %ax
// fb: 0f 94 c0                      sete    %al
// fe: 41 84 c6                      testb   %al, %r14b
// 101: 0f 84 c7 00 00 00             je      0x1ce <_JIT_ENTRY+0x1ce>
// 107: 49 8b 04 24                   movq    (%r12), %rax
// 10b: 48 85 c0                      testq   %rax, %rax
// 10e: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 113: 48 8b 14 24                   movq    (%rsp), %rdx
// 117: 7f 26                         jg      0x13f <_JIT_ENTRY+0x13f>
// 119: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011b:  R_X86_64_64  .rodata.str1.1
// 123: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000125:  R_X86_64_64  _Py_NegativeRefcount
// 12d: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 132: 4c 89 e2                      movq    %r12, %rdx
// 135: ff d0                         callq   *%rax
// 137: 48 8b 14 24                   movq    (%rsp), %rdx
// 13b: 49 8b 04 24                   movq    (%r12), %rax
// 13f: 85 c0                         testl   %eax, %eax
// 141: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// 146: 78 29                         js      0x171 <_JIT_ENTRY+0x171>
// 148: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 152: ff d0                         callq   *%rax
// 154: 48 8b 14 24                   movq    (%rsp), %rdx
// 158: 49 ff 0c 24                   decq    (%r12)
// 15c: 75 13                         jne     0x171 <_JIT_ENTRY+0x171>
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_Dealloc
// 168: 4c 89 e7                      movq    %r12, %rdi
// 16b: ff d0                         callq   *%rax
// 16d: 48 8b 14 24                   movq    (%rsp), %rdx
// 171: 48 8d 04 ea                   leaq    (%rdx,%rbp,8), %rax
// 175: 48 8b 74 24 18                movq    0x18(%rsp), %rsi
// 17a: 48 85 f6                      testq   %rsi, %rsi
// 17d: 74 39                         je      0x1b8 <_JIT_ENTRY+0x1b8>
// 17f: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 184: 48 8d 1c ca                   leaq    (%rdx,%rcx,8), %rbx
// 188: 48 89 30                      movq    %rsi, (%rax)
// 18b: 49 8b 46 10                   movq    0x10(%r14), %rax
// 18f: 48 8b 00                      movq    (%rax), %rax
// 192: 84 c0                         testb   %al, %al
// 194: 0f 84 bf 00 00 00             je      0x259 <_JIT_ENTRY+0x259>
// 19a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019c:  R_X86_64_64  _Py_HandlePending
// 1a4: 4c 89 f7                      movq    %r14, %rdi
// 1a7: ff d0                         callq   *%rax
// 1a9: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 0f 84 a4 00 00 00             je      0x259 <_JIT_ENTRY+0x259>
// 1b5: 48 89 d8                      movq    %rbx, %rax
// 1b8: 4c 29 f8                      subq    %r15, %rax
// 1bb: 48 83 c0 b8                   addq    $-0x48, %rax
// 1bf: 48 c1 e8 03                   shrq    $0x3, %rax
// 1c3: 41 89 47 40                   movl    %eax, 0x40(%r15)
// 1c7: 31 c0                         xorl    %eax, %eax
// 1c9: e9 e4 fe ff ff                jmp     0xb2 <_JIT_ENTRY+0xb2>
// 1ce: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1d2: 41 be 01 00 00 00             movl    $0x1, %r14d
// 1d8: 45 0f 43 f5                   cmovael %r13d, %r14d
// 1dc: 45 31 ff                      xorl    %r15d, %r15d
// 1df: eb 1b                         jmp     0x1fc <_JIT_ENTRY+0x1fc>
// 1e1: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// 1f0: 49 ff c7                      incq    %r15
// 1f3: 4d 39 fe                      cmpq    %r15, %r14
// 1f6: 0f 84 0b ff ff ff             je      0x107 <_JIT_ENTRY+0x107>
// 1fc: 4e 8b 2c fb                   movq    (%rbx,%r15,8), %r13
// 200: 49 8b 45 00                   movq    (%r13), %rax
// 204: 48 85 c0                      testq   %rax, %rax
// 207: 7e 07                         jle     0x210 <_JIT_ENTRY+0x210>
// 209: 85 c0                         testl   %eax, %eax
// 20b: 78 e3                         js      0x1f0 <_JIT_ENTRY+0x1f0>
// 20d: eb 27                         jmp     0x236 <_JIT_ENTRY+0x236>
// 20f: 90                            nop
// 210: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000212:  R_X86_64_64  .rodata.str1.1
// 21a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 21f: 4c 89 ea                      movq    %r13, %rdx
// 222: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000224:  R_X86_64_64  _Py_NegativeRefcount
// 22c: ff d0                         callq   *%rax
// 22e: 49 8b 45 00                   movq    (%r13), %rax
// 232: 85 c0                         testl   %eax, %eax
// 234: 78 ba                         js      0x1f0 <_JIT_ENTRY+0x1f0>
// 236: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000238:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 240: ff d0                         callq   *%rax
// 242: 49 ff 4d 00                   decq    (%r13)
// 246: 75 a8                         jne     0x1f0 <_JIT_ENTRY+0x1f0>
// 248: 4c 89 ef                      movq    %r13, %rdi
// 24b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024d:  R_X86_64_64  _Py_Dealloc
// 255: ff d0                         callq   *%rax
// 257: eb 97                         jmp     0x1f0 <_JIT_ENTRY+0x1f0>
// 259: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025b:  R_X86_64_64  _JIT_OPARG
// 263: f7 d0                         notl    %eax
// 265: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 26a: 4c 63 f0                      movslq  %eax, %r14
// 26d: 4d 01 f6                      addq    %r14, %r14
// 270: 4a 83 3c f2 00                cmpq    $0x0, (%rdx,%r14,8)
// 275: 0f 85 0f fe ff ff             jne     0x8a <_JIT_ENTRY+0x8a>
// 27b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027d:  R_X86_64_64  _JIT_OPARG
// 285: 0f b7 c0                      movzwl  %ax, %eax
// 288: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 28d: 29 c1                         subl    %eax, %ecx
// 28f: 48 63 c9                      movslq  %ecx, %rcx
// 292: f7 d0                         notl    %eax
// 294: 48 98                         cltq
// 296: 48 01 c8                      addq    %rcx, %rax
// 299: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 000000000000029b:  R_X86_64_64  PyType_Type
// 2a3: 4c 39 24 c2                   cmpq    %r12, (%rdx,%rax,8)
// 2a7: 0f 85 dd fd ff ff             jne     0x8a <_JIT_ENTRY+0x8a>
// 2ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002af:  R_X86_64_64  _JIT_OPARG
// 2b7: 0f b7 c8                      movzwl  %ax, %ecx
// 2ba: f7 d0                         notl    %eax
// 2bc: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 2c1: 48 98                         cltq
// 2c3: 48 29 c8                      subq    %rcx, %rax
// 2c6: 4c 8b 2c c2                   movq    (%rdx,%rax,8), %r13
// 2ca: 49 8b 6d 08                   movq    0x8(%r13), %rbp
// 2ce: 8b 45 00                      movl    (%rbp), %eax
// 2d1: ff c0                         incl    %eax
// 2d3: 75 0f                         jne     0x2e4 <_JIT_ENTRY+0x2e4>
// 2d5: 49 8b 45 00                   movq    (%r13), %rax
// 2d9: 48 85 c0                      testq   %rax, %rax
// 2dc: 7e 22                         jle     0x300 <_JIT_ENTRY+0x300>
// 2de: 85 c0                         testl   %eax, %eax
// 2e0: 79 48                         jns     0x32a <_JIT_ENTRY+0x32a>
// 2e2: eb 6f                         jmp     0x353 <_JIT_ENTRY+0x353>
// 2e4: 89 45 00                      movl    %eax, (%rbp)
// 2e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e9:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 2f1: ff d0                         callq   *%rax
// 2f3: 48 8b 14 24                   movq    (%rsp), %rdx
// 2f7: 49 8b 45 00                   movq    (%r13), %rax
// 2fb: 48 85 c0                      testq   %rax, %rax
// 2fe: 7f de                         jg      0x2de <_JIT_ENTRY+0x2de>
// 300: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000302:  R_X86_64_64  .rodata.str1.1
// 30a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030c:  R_X86_64_64  _Py_NegativeRefcount
// 314: be 7f 0a 00 00                movl    $0xa7f, %esi            # imm = 0xA7F
// 319: 4c 89 ea                      movq    %r13, %rdx
// 31c: ff d0                         callq   *%rax
// 31e: 48 8b 14 24                   movq    (%rsp), %rdx
// 322: 49 8b 45 00                   movq    (%r13), %rax
// 326: 85 c0                         testl   %eax, %eax
// 328: 78 29                         js      0x353 <_JIT_ENTRY+0x353>
// 32a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 334: ff d0                         callq   *%rax
// 336: 48 8b 14 24                   movq    (%rsp), %rdx
// 33a: 49 ff 4d 00                   decq    (%r13)
// 33e: 75 13                         jne     0x353 <_JIT_ENTRY+0x353>
// 340: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000342:  R_X86_64_64  _Py_Dealloc
// 34a: 4c 89 ef                      movq    %r13, %rdi
// 34d: ff d0                         callq   *%rax
// 34f: 48 8b 14 24                   movq    (%rsp), %rdx
// 353: 49 8b 04 24                   movq    (%r12), %rax
// 357: 48 85 c0                      testq   %rax, %rax
// 35a: 7f 26                         jg      0x382 <_JIT_ENTRY+0x382>
// 35c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000035e:  R_X86_64_64  .rodata.str1.1
// 366: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000368:  R_X86_64_64  _Py_NegativeRefcount
// 370: be 80 0a 00 00                movl    $0xa80, %esi            # imm = 0xA80
// 375: 4c 89 e2                      movq    %r12, %rdx
// 378: ff d0                         callq   *%rax
// 37a: 48 8b 14 24                   movq    (%rsp), %rdx
// 37e: 49 8b 04 24                   movq    (%r12), %rax
// 382: 4e 8d 2c f2                   leaq    (%rdx,%r14,8), %r13
// 386: 85 c0                         testl   %eax, %eax
// 388: 78 30                         js      0x3ba <_JIT_ENTRY+0x3ba>
// 38a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000038c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 394: ff d0                         callq   *%rax
// 396: 48 8b 14 24                   movq    (%rsp), %rdx
// 39a: 49 ff 0c 24                   decq    (%r12)
// 39e: 75 1a                         jne     0x3ba <_JIT_ENTRY+0x3ba>
// 3a0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003a2:  R_X86_64_64  PyType_Type
// 3aa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003ac:  R_X86_64_64  _Py_Dealloc
// 3b4: ff d0                         callq   *%rax
// 3b6: 48 8b 14 24                   movq    (%rsp), %rdx
// 3ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003bc:  R_X86_64_64  _JIT_OPARG
// 3c4: 0f b7 c0                      movzwl  %ax, %eax
// 3c7: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 3cc: 29 c1                         subl    %eax, %ecx
// 3ce: 48 63 c9                      movslq  %ecx, %rcx
// 3d1: f7 d0                         notl    %eax
// 3d3: 48 98                         cltq
// 3d5: 48 01 c8                      addq    %rcx, %rax
// 3d8: 48 89 2c c2                   movq    %rbp, (%rdx,%rax,8)
// 3dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003de:  R_X86_64_64  _JIT_CONTINUE
// 3e6: 4c 89 ff                      movq    %r15, %rdi
// 3e9: 4c 89 ee                      movq    %r13, %rsi
// 3ec: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 3f1: 48 83 c4 28                   addq    $0x28, %rsp
// 3f5: 5b                            popq    %rbx
// 3f6: 41 5c                         popq    %r12
// 3f8: 41 5d                         popq    %r13
// 3fa: 41 5e                         popq    %r14
// 3fc: 41 5f                         popq    %r15
// 3fe: 5d                            popq    %rbp
// 3ff: ff e0                         jmpq    *%rax
// 401: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_TYPE_1_code_body[1026] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xff, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xcf, 0x45, 0x8d, 0x69, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x48, 0x63, 0xef, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4c, 0x8b, 0x24, 0xee, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4a, 0x8d, 0x1c, 0xc6, 0x48, 0x8b, 0x3b, 0x4c, 0x8b, 0x47, 0x08, 0x4d, 0x3b, 0x44, 0x24, 0x10, 0x74, 0x3a, 0x48, 0x89, 0xf3, 0x4c, 0x29, 0xfb, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5f, 0x40, 0x49, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x34, 0x24, 0x48, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x7c, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc6, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x73, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc6, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x48, 0x8b, 0x14, 0x24, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8d, 0x04, 0xea, 0x48, 0x8b, 0x74, 0x24, 0x18, 0x48, 0x85, 0xf6, 0x74, 0x39, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x8d, 0x1c, 0xca, 0x48, 0x89, 0x30, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xbf, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x0f, 0x84, 0xa4, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd8, 0x4c, 0x29, 0xf8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x47, 0x40, 0x31, 0xc0, 0xe9, 0xe4, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x45, 0x31, 0xff, 0xeb, 0x1b, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc7, 0x4d, 0x39, 0xfe, 0x0f, 0x84, 0x0b, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x2c, 0xfb, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x27, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xf0, 0x4d, 0x01, 0xf6, 0x4a, 0x83, 0x3c, 0xf2, 0x00, 0x0f, 0x85, 0x0f, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x24, 0xc2, 0x0f, 0x85, 0xdd, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x29, 0xc8, 0x4c, 0x8b, 0x2c, 0xc2, 0x49, 0x8b, 0x6d, 0x08, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x85, 0xc0, 0x79, 0x48, 0xeb, 0x6f, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x7f, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x80, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x4e, 0x8d, 0x2c, 0xf2, 0x85, 0xc0, 0x78, 0x30, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x1a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x48, 0x89, 0x2c, 0xc2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xee, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_TYPE_1_code_holes[30] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9e, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x11b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x125, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x224, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x238, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x24d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x25b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x27d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x29b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyType_Type, 0x0},
    {0x2af, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2e9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x302, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x30c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x32c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x342, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x35e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x368, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x38c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3a2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyType_Type, 0x0},
    {0x3ac, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3bc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3de, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_TYPE_1_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_CALL_TYPE_1_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_ATTR_CLASS
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_ATTR_CLASS.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4f 8d 04 c6                   leaq    (%r14,%r8,8), %r8
// 79: 49 8b 38                      movq    (%r8), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 49 29 de                      subq    %rbx, %r14
// 8a: 49 83 c6 b8                   addq    $-0x48, %r14
// 8e: 49 c1 ee 03                   shrq    $0x3, %r14
// 92: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 96: 48 8b 03                      movq    (%rbx), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c3: 4c 89 0c 24                   movq    %r9, (%rsp)
// c7: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cc: 48 85 c0                      testq   %rax, %rax
// cf: 40 0f 94 c5                   sete    %bpl
// d3: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// d7: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// dc: 49 8d 70 08                   leaq    0x8(%r8), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 b1 00 00 00             je      0x1b5 <_JIT_ENTRY+0x1b5>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 136: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 13b: 78 21                         js      0x15e <_JIT_ENTRY+0x15e>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 147: ff d0                         callq   *%rax
// 149: 49 ff 0c 24                   decq    (%r12)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_Dealloc
// 159: 4c 89 e7                      movq    %r12, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 163: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 167: 4d 85 ed                      testq   %r13, %r13
// 16a: 74 34                         je      0x1a0 <_JIT_ENTRY+0x1a0>
// 16c: 48 8b 0c 24                   movq    (%rsp), %rcx
// 170: 4d 8d 24 ce                   leaq    (%r14,%rcx,8), %r12
// 174: 4c 89 28                      movq    %r13, (%rax)
// 177: 49 8b 47 10                   movq    0x10(%r15), %rax
// 17b: 48 8b 00                      movq    (%rax), %rax
// 17e: 84 c0                         testb   %al, %al
// 180: 0f 84 c3 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 186: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000188:  R_X86_64_64  _Py_HandlePending
// 190: 4c 89 ff                      movq    %r15, %rdi
// 193: ff d0                         callq   *%rax
// 195: 85 c0                         testl   %eax, %eax
// 197: 0f 84 ac 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 19d: 4c 89 e0                      movq    %r12, %rax
// 1a0: 48 29 d8                      subq    %rbx, %rax
// 1a3: 48 83 c0 b8                   addq    $-0x48, %rax
// 1a7: 48 c1 e8 03                   shrq    $0x3, %rax
// 1ab: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1ae: 31 c0                         xorl    %eax, %eax
// 1b0: e9 fa fe ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 1b5: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1b9: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1bf: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1c3: 31 ed                         xorl    %ebp, %ebp
// 1c5: eb 15                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c7: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 1d0: 48 ff c5                      incq    %rbp
// 1d3: 49 39 ef                      cmpq    %rbp, %r15
// 1d6: 0f 84 28 ff ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 1dc: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 1e1: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 1e5: 49 8b 45 00                   movq    (%r13), %rax
// 1e9: 48 85 c0                      testq   %rax, %rax
// 1ec: 7e 12                         jle     0x200 <_JIT_ENTRY+0x200>
// 1ee: 85 c0                         testl   %eax, %eax
// 1f0: 78 de                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1f2: eb 32                         jmp     0x226 <_JIT_ENTRY+0x226>
// 1f4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 200: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1
// 20a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 20f: 4c 89 ea                      movq    %r13, %rdx
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: ff d0                         callq   *%rax
// 21e: 49 8b 45 00                   movq    (%r13), %rax
// 222: 85 c0                         testl   %eax, %eax
// 224: 78 aa                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 230: ff d0                         callq   *%rax
// 232: 49 ff 4d 00                   decq    (%r13)
// 236: 75 98                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: ff d0                         callq   *%rax
// 247: eb 87                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _JIT_OPARG
// 253: f7 d0                         notl    %eax
// 255: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 25a: 48 98                         cltq
// 25c: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 261: 48 8b 48 08                   movq    0x8(%rax), %rcx
// 265: f6 81 ab 00 00 00 80          testb   $-0x80, 0xab(%rcx)
// 26c: 74 35                         je      0x2a3 <_JIT_ENTRY+0x2a3>
// 26e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000270:  R_X86_64_64  _JIT_OPERAND
// 278: 39 88 80 01 00 00             cmpl    %ecx, 0x180(%rax)
// 27e: 75 23                         jne     0x2a3 <_JIT_ENTRY+0x2a3>
// 280: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000282:  R_X86_64_64  _JIT_CONTINUE
// 28a: 48 89 df                      movq    %rbx, %rdi
// 28d: 4c 89 e6                      movq    %r12, %rsi
// 290: 4c 89 fa                      movq    %r15, %rdx
// 293: 48 83 c4 28                   addq    $0x28, %rsp
// 297: 5b                            popq    %rbx
// 298: 41 5c                         popq    %r12
// 29a: 41 5d                         popq    %r13
// 29c: 41 5e                         popq    %r14
// 29e: 41 5f                         popq    %r15
// 2a0: 5d                            popq    %rbp
// 2a1: ff e0                         jmpq    *%rax
// 2a3: 4d 89 e6                      movq    %r12, %r14
// 2a6: e9 dc fd ff ff                jmp     0x87 <_JIT_ENTRY+0x87>
// 2ab: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_ATTR_CLASS_code_body[684] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xce, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4f, 0x8d, 0x04, 0xc6, 0x49, 0x8b, 0x38, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x70, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xb1, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x4d, 0x85, 0xed, 0x74, 0x34, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x24, 0xce, 0x4c, 0x89, 0x28, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xac, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xfa, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xed, 0xeb, 0x15, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xef, 0x0f, 0x84, 0x28, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0x8b, 0x48, 0x08, 0xf6, 0x81, 0xab, 0x00, 0x00, 0x00, 0x80, 0x74, 0x35, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x88, 0x80, 0x01, 0x00, 0x00, 0x75, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x89, 0xe6, 0xe9, 0xdc, 0xfd, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_ATTR_CLASS_code_holes[17] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x270, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x282, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_ATTR_CLASS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_ATTR_CLASS_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_ATTR_METHOD_LAZY_DICT
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_ATTR_METHOD_LAZY_DICT.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4f 8d 04 c6                   leaq    (%r14,%r8,8), %r8
// 79: 49 8b 38                      movq    (%r8), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 49 29 de                      subq    %rbx, %r14
// 8a: 49 83 c6 b8                   addq    $-0x48, %r14
// 8e: 49 c1 ee 03                   shrq    $0x3, %r14
// 92: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 96: 48 8b 03                      movq    (%rbx), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c3: 4c 89 0c 24                   movq    %r9, (%rsp)
// c7: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cc: 48 85 c0                      testq   %rax, %rax
// cf: 40 0f 94 c5                   sete    %bpl
// d3: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// d7: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// dc: 49 8d 70 08                   leaq    0x8(%r8), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 b1 00 00 00             je      0x1b5 <_JIT_ENTRY+0x1b5>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 136: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 13b: 78 21                         js      0x15e <_JIT_ENTRY+0x15e>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 147: ff d0                         callq   *%rax
// 149: 49 ff 0c 24                   decq    (%r12)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_Dealloc
// 159: 4c 89 e7                      movq    %r12, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 163: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 167: 4d 85 ed                      testq   %r13, %r13
// 16a: 74 34                         je      0x1a0 <_JIT_ENTRY+0x1a0>
// 16c: 48 8b 0c 24                   movq    (%rsp), %rcx
// 170: 4d 8d 24 ce                   leaq    (%r14,%rcx,8), %r12
// 174: 4c 89 28                      movq    %r13, (%rax)
// 177: 49 8b 47 10                   movq    0x10(%r15), %rax
// 17b: 48 8b 00                      movq    (%rax), %rax
// 17e: 84 c0                         testb   %al, %al
// 180: 0f 84 c3 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 186: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000188:  R_X86_64_64  _Py_HandlePending
// 190: 4c 89 ff                      movq    %r15, %rdi
// 193: ff d0                         callq   *%rax
// 195: 85 c0                         testl   %eax, %eax
// 197: 0f 84 ac 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 19d: 4c 89 e0                      movq    %r12, %rax
// 1a0: 48 29 d8                      subq    %rbx, %rax
// 1a3: 48 83 c0 b8                   addq    $-0x48, %rax
// 1a7: 48 c1 e8 03                   shrq    $0x3, %rax
// 1ab: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1ae: 31 c0                         xorl    %eax, %eax
// 1b0: e9 fa fe ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 1b5: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1b9: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1bf: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1c3: 31 ed                         xorl    %ebp, %ebp
// 1c5: eb 15                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c7: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 1d0: 48 ff c5                      incq    %rbp
// 1d3: 49 39 ef                      cmpq    %rbp, %r15
// 1d6: 0f 84 28 ff ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 1dc: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 1e1: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 1e5: 49 8b 45 00                   movq    (%r13), %rax
// 1e9: 48 85 c0                      testq   %rax, %rax
// 1ec: 7e 12                         jle     0x200 <_JIT_ENTRY+0x200>
// 1ee: 85 c0                         testl   %eax, %eax
// 1f0: 78 de                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1f2: eb 32                         jmp     0x226 <_JIT_ENTRY+0x226>
// 1f4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 200: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1
// 20a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 20f: 4c 89 ea                      movq    %r13, %rdx
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: ff d0                         callq   *%rax
// 21e: 49 8b 45 00                   movq    (%r13), %rax
// 222: 85 c0                         testl   %eax, %eax
// 224: 78 aa                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 230: ff d0                         callq   *%rax
// 232: 49 ff 4d 00                   decq    (%r13)
// 236: 75 98                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: ff d0                         callq   *%rax
// 247: eb 87                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _JIT_OPARG
// 253: f7 d0                         notl    %eax
// 255: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 25a: 48 98                         cltq
// 25c: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 261: 48 8b 48 08                   movq    0x8(%rax), %rcx
// 265: 48 8b 89 20 01 00 00          movq    0x120(%rcx), %rcx
// 26c: 48 83 3c 08 00                cmpq    $0x0, (%rax,%rcx)
// 271: 74 08                         je      0x27b <_JIT_ENTRY+0x27b>
// 273: 4d 89 e6                      movq    %r12, %r14
// 276: e9 0c fe ff ff                jmp     0x87 <_JIT_ENTRY+0x87>
// 27b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027d:  R_X86_64_64  _JIT_CONTINUE
// 285: 48 89 df                      movq    %rbx, %rdi
// 288: 4c 89 e6                      movq    %r12, %rsi
// 28b: 4c 89 fa                      movq    %r15, %rdx
// 28e: 48 83 c4 28                   addq    $0x28, %rsp
// 292: 5b                            popq    %rbx
// 293: 41 5c                         popq    %r12
// 295: 41 5d                         popq    %r13
// 297: 41 5e                         popq    %r14
// 299: 41 5f                         popq    %r15
// 29b: 5d                            popq    %rbp
// 29c: ff e0                         jmpq    *%rax
// 29e: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_ATTR_METHOD_LAZY_DICT_code_body[671] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xce, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4f, 0x8d, 0x04, 0xc6, 0x49, 0x8b, 0x38, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x70, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xb1, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x4d, 0x85, 0xed, 0x74, 0x34, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x24, 0xce, 0x4c, 0x89, 0x28, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xac, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xfa, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xed, 0xeb, 0x15, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xef, 0x0f, 0x84, 0x28, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0x8b, 0x48, 0x08, 0x48, 0x8b, 0x89, 0x20, 0x01, 0x00, 0x00, 0x48, 0x83, 0x3c, 0x08, 0x00, 0x74, 0x08, 0x4d, 0x89, 0xe6, 0xe9, 0x0c, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_ATTR_METHOD_LAZY_DICT_code_holes[16] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x27d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_ATTR_METHOD_LAZY_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_ATTR_METHOD_LAZY_DICT_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_ATTR_MODULE
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_ATTR_MODULE.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4f 8d 04 c6                   leaq    (%r14,%r8,8), %r8
// 79: 49 8b 38                      movq    (%r8), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 49 29 de                      subq    %rbx, %r14
// 8a: 49 83 c6 b8                   addq    $-0x48, %r14
// 8e: 49 c1 ee 03                   shrq    $0x3, %r14
// 92: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 96: 48 8b 03                      movq    (%rbx), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c3: 4c 89 0c 24                   movq    %r9, (%rsp)
// c7: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cc: 48 85 c0                      testq   %rax, %rax
// cf: 40 0f 94 c5                   sete    %bpl
// d3: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// d7: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// dc: 49 8d 70 08                   leaq    0x8(%r8), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 b1 00 00 00             je      0x1b5 <_JIT_ENTRY+0x1b5>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 136: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 13b: 78 21                         js      0x15e <_JIT_ENTRY+0x15e>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 147: ff d0                         callq   *%rax
// 149: 49 ff 0c 24                   decq    (%r12)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_Dealloc
// 159: 4c 89 e7                      movq    %r12, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 163: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 167: 4d 85 ed                      testq   %r13, %r13
// 16a: 74 34                         je      0x1a0 <_JIT_ENTRY+0x1a0>
// 16c: 48 8b 0c 24                   movq    (%rsp), %rcx
// 170: 4d 8d 24 ce                   leaq    (%r14,%rcx,8), %r12
// 174: 4c 89 28                      movq    %r13, (%rax)
// 177: 49 8b 47 10                   movq    0x10(%r15), %rax
// 17b: 48 8b 00                      movq    (%rax), %rax
// 17e: 84 c0                         testb   %al, %al
// 180: 0f 84 c3 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 186: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000188:  R_X86_64_64  _Py_HandlePending
// 190: 4c 89 ff                      movq    %r15, %rdi
// 193: ff d0                         callq   *%rax
// 195: 85 c0                         testl   %eax, %eax
// 197: 0f 84 ac 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 19d: 4c 89 e0                      movq    %r12, %rax
// 1a0: 48 29 d8                      subq    %rbx, %rax
// 1a3: 48 83 c0 b8                   addq    $-0x48, %rax
// 1a7: 48 c1 e8 03                   shrq    $0x3, %rax
// 1ab: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1ae: 31 c0                         xorl    %eax, %eax
// 1b0: e9 fa fe ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 1b5: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1b9: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1bf: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1c3: 31 ed                         xorl    %ebp, %ebp
// 1c5: eb 15                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c7: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 1d0: 48 ff c5                      incq    %rbp
// 1d3: 49 39 ef                      cmpq    %rbp, %r15
// 1d6: 0f 84 28 ff ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 1dc: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 1e1: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 1e5: 49 8b 45 00                   movq    (%r13), %rax
// 1e9: 48 85 c0                      testq   %rax, %rax
// 1ec: 7e 12                         jle     0x200 <_JIT_ENTRY+0x200>
// 1ee: 85 c0                         testl   %eax, %eax
// 1f0: 78 de                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1f2: eb 32                         jmp     0x226 <_JIT_ENTRY+0x226>
// 1f4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 200: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1
// 20a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 20f: 4c 89 ea                      movq    %r13, %rdx
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: ff d0                         callq   *%rax
// 21e: 49 8b 45 00                   movq    (%r13), %rax
// 222: 85 c0                         testl   %eax, %eax
// 224: 78 aa                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 230: ff d0                         callq   *%rax
// 232: 49 ff 4d 00                   decq    (%r13)
// 236: 75 98                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: ff d0                         callq   *%rax
// 247: eb 87                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _JIT_OPARG
// 253: f7 d0                         notl    %eax
// 255: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 25a: 48 98                         cltq
// 25c: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 261: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000263:  R_X86_64_64  PyModule_Type
// 26b: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 26f: 75 3a                         jne     0x2ab <_JIT_ENTRY+0x2ab>
// 271: 48 8b 40 10                   movq    0x10(%rax), %rax
// 275: 48 8b 40 20                   movq    0x20(%rax), %rax
// 279: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000027b:  R_X86_64_64  _JIT_OPERAND
// 283: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
// 286: 75 23                         jne     0x2ab <_JIT_ENTRY+0x2ab>
// 288: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028a:  R_X86_64_64  _JIT_CONTINUE
// 292: 48 89 df                      movq    %rbx, %rdi
// 295: 4c 89 e6                      movq    %r12, %rsi
// 298: 4c 89 fa                      movq    %r15, %rdx
// 29b: 48 83 c4 28                   addq    $0x28, %rsp
// 29f: 5b                            popq    %rbx
// 2a0: 41 5c                         popq    %r12
// 2a2: 41 5d                         popq    %r13
// 2a4: 41 5e                         popq    %r14
// 2a6: 41 5f                         popq    %r15
// 2a8: 5d                            popq    %rbp
// 2a9: ff e0                         jmpq    *%rax
// 2ab: 4d 89 e6                      movq    %r12, %r14
// 2ae: e9 d4 fd ff ff                jmp     0x87 <_JIT_ENTRY+0x87>
// 2b3: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_ATTR_MODULE_code_body[692] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xce, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4f, 0x8d, 0x04, 0xc6, 0x49, 0x8b, 0x38, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x70, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xb1, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x4d, 0x85, 0xed, 0x74, 0x34, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x24, 0xce, 0x4c, 0x89, 0x28, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xac, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xfa, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xed, 0xeb, 0x15, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xef, 0x0f, 0x84, 0x28, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x3a, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x48, 0x0c, 0x75, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x89, 0xe6, 0xe9, 0xd4, 0xfd, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_ATTR_MODULE_code_holes[18] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyModule_Type, 0x0},
    {0x27b, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x28a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_ATTR_MODULE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_ATTR_MODULE_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_ATTR_WITH_HINT
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_ATTR_WITH_HINT.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4f 8d 04 c6                   leaq    (%r14,%r8,8), %r8
// 79: 49 8b 38                      movq    (%r8), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 49 29 de                      subq    %rbx, %r14
// 8a: 49 83 c6 b8                   addq    $-0x48, %r14
// 8e: 49 c1 ee 03                   shrq    $0x3, %r14
// 92: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 96: 48 8b 03                      movq    (%rbx), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c3: 4c 89 0c 24                   movq    %r9, (%rsp)
// c7: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cc: 48 85 c0                      testq   %rax, %rax
// cf: 40 0f 94 c5                   sete    %bpl
// d3: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// d7: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// dc: 49 8d 70 08                   leaq    0x8(%r8), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 b1 00 00 00             je      0x1b5 <_JIT_ENTRY+0x1b5>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 136: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 13b: 78 21                         js      0x15e <_JIT_ENTRY+0x15e>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 147: ff d0                         callq   *%rax
// 149: 49 ff 0c 24                   decq    (%r12)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_Dealloc
// 159: 4c 89 e7                      movq    %r12, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 163: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 167: 4d 85 ed                      testq   %r13, %r13
// 16a: 74 34                         je      0x1a0 <_JIT_ENTRY+0x1a0>
// 16c: 48 8b 0c 24                   movq    (%rsp), %rcx
// 170: 4d 8d 24 ce                   leaq    (%r14,%rcx,8), %r12
// 174: 4c 89 28                      movq    %r13, (%rax)
// 177: 49 8b 47 10                   movq    0x10(%r15), %rax
// 17b: 48 8b 00                      movq    (%rax), %rax
// 17e: 84 c0                         testb   %al, %al
// 180: 0f 84 c3 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 186: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000188:  R_X86_64_64  _Py_HandlePending
// 190: 4c 89 ff                      movq    %r15, %rdi
// 193: ff d0                         callq   *%rax
// 195: 85 c0                         testl   %eax, %eax
// 197: 0f 84 ac 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 19d: 4c 89 e0                      movq    %r12, %rax
// 1a0: 48 29 d8                      subq    %rbx, %rax
// 1a3: 48 83 c0 b8                   addq    $-0x48, %rax
// 1a7: 48 c1 e8 03                   shrq    $0x3, %rax
// 1ab: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1ae: 31 c0                         xorl    %eax, %eax
// 1b0: e9 fa fe ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 1b5: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1b9: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1bf: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1c3: 31 ed                         xorl    %ebp, %ebp
// 1c5: eb 15                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c7: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 1d0: 48 ff c5                      incq    %rbp
// 1d3: 49 39 ef                      cmpq    %rbp, %r15
// 1d6: 0f 84 28 ff ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 1dc: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 1e1: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 1e5: 49 8b 45 00                   movq    (%r13), %rax
// 1e9: 48 85 c0                      testq   %rax, %rax
// 1ec: 7e 12                         jle     0x200 <_JIT_ENTRY+0x200>
// 1ee: 85 c0                         testl   %eax, %eax
// 1f0: 78 de                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1f2: eb 32                         jmp     0x226 <_JIT_ENTRY+0x226>
// 1f4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 200: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1
// 20a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 20f: 4c 89 ea                      movq    %r13, %rdx
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: ff d0                         callq   *%rax
// 21e: 49 8b 45 00                   movq    (%r13), %rax
// 222: 85 c0                         testl   %eax, %eax
// 224: 78 aa                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 230: ff d0                         callq   *%rax
// 232: 49 ff 4d 00                   decq    (%r13)
// 236: 75 98                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: ff d0                         callq   *%rax
// 247: eb 87                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _JIT_OPARG
// 253: f7 d0                         notl    %eax
// 255: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 25a: 48 98                         cltq
// 25c: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 261: 48 8b 40 e8                   movq    -0x18(%rax), %rax
// 265: a8 01                         testb   $0x1, %al
// 267: 75 28                         jne     0x291 <_JIT_ENTRY+0x291>
// 269: 48 85 c0                      testq   %rax, %rax
// 26c: 74 23                         je      0x291 <_JIT_ENTRY+0x291>
// 26e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000270:  R_X86_64_64  _JIT_CONTINUE
// 278: 48 89 df                      movq    %rbx, %rdi
// 27b: 4c 89 e6                      movq    %r12, %rsi
// 27e: 4c 89 fa                      movq    %r15, %rdx
// 281: 48 83 c4 28                   addq    $0x28, %rsp
// 285: 5b                            popq    %rbx
// 286: 41 5c                         popq    %r12
// 288: 41 5d                         popq    %r13
// 28a: 41 5e                         popq    %r14
// 28c: 41 5f                         popq    %r15
// 28e: 5d                            popq    %rbp
// 28f: ff e0                         jmpq    *%rax
// 291: 4d 89 e6                      movq    %r12, %r14
// 294: e9 ee fd ff ff                jmp     0x87 <_JIT_ENTRY+0x87>
// 299: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_ATTR_WITH_HINT_code_body[666] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xce, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4f, 0x8d, 0x04, 0xc6, 0x49, 0x8b, 0x38, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x70, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xb1, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x4d, 0x85, 0xed, 0x74, 0x34, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x24, 0xce, 0x4c, 0x89, 0x28, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xac, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xfa, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xed, 0xeb, 0x15, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xef, 0x0f, 0x84, 0x28, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0x8b, 0x40, 0xe8, 0xa8, 0x01, 0x75, 0x28, 0x48, 0x85, 0xc0, 0x74, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x89, 0xe6, 0xe9, 0xee, 0xfd, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_ATTR_WITH_HINT_code_holes[16] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x270, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_ATTR_WITH_HINT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_ATTR_WITH_HINT_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c c6                   leaq    (%r14,%r8,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 49 29 de                      subq    %rbx, %r14
// 8b: 49 83 c6 b8                   addq    $-0x48, %r14
// 8f: 49 c1 ee 03                   shrq    $0x3, %r14
// 93: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 97: 48 8b 03                      movq    (%rbx), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c4: 4c 89 0c 24                   movq    %r9, (%rsp)
// c8: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cd: 48 89 5c 24 20                movq    %rbx, 0x20(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 b6 00 00 00             je      0x1b9 <_JIT_ENTRY+0x1b9>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 135: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 13a: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 13f: 78 21                         js      0x162 <_JIT_ENTRY+0x162>
// 141: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000143:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 14b: ff d0                         callq   *%rax
// 14d: 49 ff 0c 24                   decq    (%r12)
// 151: 75 0f                         jne     0x162 <_JIT_ENTRY+0x162>
// 153: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000155:  R_X86_64_64  _Py_Dealloc
// 15d: 4c 89 e7                      movq    %r12, %rdi
// 160: ff d0                         callq   *%rax
// 162: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 167: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 16b: 4d 85 ed                      testq   %r13, %r13
// 16e: 74 34                         je      0x1a4 <_JIT_ENTRY+0x1a4>
// 170: 48 8b 0c 24                   movq    (%rsp), %rcx
// 174: 4d 8d 24 ce                   leaq    (%r14,%rcx,8), %r12
// 178: 4c 89 28                      movq    %r13, (%rax)
// 17b: 49 8b 47 10                   movq    0x10(%r15), %rax
// 17f: 48 8b 00                      movq    (%rax), %rax
// 182: 84 c0                         testb   %al, %al
// 184: 0f 84 af 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 18a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018c:  R_X86_64_64  _Py_HandlePending
// 194: 4c 89 ff                      movq    %r15, %rdi
// 197: ff d0                         callq   *%rax
// 199: 85 c0                         testl   %eax, %eax
// 19b: 0f 84 98 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 1a1: 4c 89 e0                      movq    %r12, %rax
// 1a4: 48 29 d8                      subq    %rbx, %rax
// 1a7: 48 83 c0 b8                   addq    $-0x48, %rax
// 1ab: 48 c1 e8 03                   shrq    $0x3, %rax
// 1af: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1b2: 31 c0                         xorl    %eax, %eax
// 1b4: e9 f7 fe ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 1b9: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1bd: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1c3: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1c7: 31 db                         xorl    %ebx, %ebx
// 1c9: eb 11                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1cb: 0f 1f 44 00 00                nopl    (%rax,%rax)
// 1d0: 48 ff c3                      incq    %rbx
// 1d3: 49 39 df                      cmpq    %rbx, %r15
// 1d6: 0f 84 27 ff ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 1dc: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1e1: 49 8b 45 00                   movq    (%r13), %rax
// 1e5: 48 85 c0                      testq   %rax, %rax
// 1e8: 7e 06                         jle     0x1f0 <_JIT_ENTRY+0x1f0>
// 1ea: 85 c0                         testl   %eax, %eax
// 1ec: 78 e2                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1ee: eb 26                         jmp     0x216 <_JIT_ENTRY+0x216>
// 1f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f2:  R_X86_64_64  .rodata.str1.1
// 1fa: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ff: 4c 89 ea                      movq    %r13, %rdx
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_NegativeRefcount
// 20c: ff d0                         callq   *%rax
// 20e: 49 8b 45 00                   movq    (%r13), %rax
// 212: 85 c0                         testl   %eax, %eax
// 214: 78 ba                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 220: ff d0                         callq   *%rax
// 222: 49 ff 4d 00                   decq    (%r13)
// 226: 75 a8                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 228: 4c 89 ef                      movq    %r13, %rdi
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_Dealloc
// 235: ff d0                         callq   *%rax
// 237: eb 97                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _JIT_OPARG
// 243: f7 d0                         notl    %eax
// 245: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 24a: 48 98                         cltq
// 24c: 48 01 c0                      addq    %rax, %rax
// 24f: 49 83 3c c6 00                cmpq    $0x0, (%r14,%rax,8)
// 254: 75 32                         jne     0x288 <_JIT_ENTRY+0x288>
// 256: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000258:  R_X86_64_64  _JIT_OPARG
// 260: 0f b7 c0                      movzwl  %ax, %eax
// 263: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 268: 29 c1                         subl    %eax, %ecx
// 26a: 48 63 c9                      movslq  %ecx, %rcx
// 26d: f7 d0                         notl    %eax
// 26f: 48 98                         cltq
// 271: 48 01 c8                      addq    %rcx, %rax
// 274: 49 8b 04 c6                   movq    (%r14,%rax,8), %rax
// 278: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000027a:  R_X86_64_64  PyMethod_Type
// 282: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 286: 74 08                         je      0x290 <_JIT_ENTRY+0x290>
// 288: 4d 89 e6                      movq    %r12, %r14
// 28b: e9 f8 fd ff ff                jmp     0x88 <_JIT_ENTRY+0x88>
// 290: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000292:  R_X86_64_64  _JIT_CONTINUE
// 29a: 48 89 df                      movq    %rbx, %rdi
// 29d: 4c 89 e6                      movq    %r12, %rsi
// 2a0: 4c 89 fa                      movq    %r15, %rdx
// 2a3: 48 83 c4 28                   addq    $0x28, %rsp
// 2a7: 5b                            popq    %rbx
// 2a8: 41 5c                         popq    %r12
// 2aa: 41 5d                         popq    %r13
// 2ac: 41 5e                         popq    %r14
// 2ae: 41 5f                         popq    %r15
// 2b0: 5d                            popq    %rbp
// 2b1: ff e0                         jmpq    *%rax
// 2b3: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS_code_body[692] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xce, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xc6, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x5c, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xb6, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x4d, 0x85, 0xed, 0x74, 0x34, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x24, 0xce, 0x4c, 0x89, 0x28, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xaf, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x98, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xf7, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xdb, 0xeb, 0x11, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0x27, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x01, 0xc0, 0x49, 0x83, 0x3c, 0xc6, 0x00, 0x75, 0x32, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x49, 0x8b, 0x04, 0xc6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x08, 0x4d, 0x89, 0xe6, 0xe9, 0xf8, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS_code_holes[18] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x143, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x155, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x258, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x27a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethod_Type, 0x0},
    {0x292, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_EG_MATCH
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_EG_MATCH.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 38                   subq    $0x38, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d6                   movq    (%r14,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 8d 6e 01                      leal    0x1(%rsi), %ebp
// 36: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3a: 4c 89 c9                      movq    %r9, %rcx
// 3d: 48 f7 d9                      negq    %rcx
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 0f 44 ee                      cmovel  %esi, %ebp
// 46: 4c 63 df                      movslq  %edi, %r11
// 49: 49 f7 d1                      notq    %r9
// 4c: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 50: 4f 8b 24 de                   movq    (%r14,%r11,8), %r12
// 54: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000056:  R_X86_64_64  PyMethodDescr_Type
// 5e: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 63: 75 20                         jne     0x85 <_JIT_ENTRY+0x85>
// 65: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6a: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 71: 75 12                         jne     0x85 <_JIT_ENTRY+0x85>
// 73: 4b 8d 1c ce                   leaq    (%r14,%r9,8), %rbx
// 77: 48 8b 3b                      movq    (%rbx), %rdi
// 7a: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 7e: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 83: 74 37                         je      0xbc <_JIT_ENTRY+0xbc>
// 85: 4d 29 c6                      subq    %r8, %r14
// 88: 49 83 c6 b8                   addq    $-0x48, %r14
// 8c: 49 c1 ee 03                   shrq    $0x3, %r14
// 90: 45 89 70 40                   movl    %r14d, 0x40(%r8)
// 94: 49 8b 00                      movq    (%r8), %rax
// 97: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000099:  R_X86_64_64  _JIT_TARGET
// a1: 89 c9                         movl    %ecx, %ecx
// a3: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a7: 48 05 c8 00 00 00             addq    $0xc8, %rax
// ad: 48 83 c4 38                   addq    $0x38, %rsp
// b1: 5b                            popq    %rbx
// b2: 41 5c                         popq    %r12
// b4: 41 5d                         popq    %r13
// b6: 41 5e                         popq    %r14
// b8: 41 5f                         popq    %r15
// ba: 5d                            popq    %rbp
// bb: c3                            retq
// bc: 4c 89 5c 24 08                movq    %r11, 0x8(%rsp)
// c1: 4c 89 54 24 20                movq    %r10, 0x20(%rsp)
// c6: 48 89 54 24 28                movq    %rdx, 0x28(%rsp)
// cb: 4c 89 44 24 30                movq    %r8, 0x30(%rsp)
// d0: 48 85 c0                      testq   %rax, %rax
// d3: 41 0f 94 c7                   sete    %r15b
// d7: 8d 45 ff                      leal    -0x1(%rbp), %eax
// da: 48 8d 73 08                   leaq    0x8(%rbx), %rsi
// de: 48 63 d0                      movslq  %eax, %rdx
// e1: ff 51 08                      callq   *0x8(%rcx)
// e4: 48 89 04 24                   movq    %rax, (%rsp)
// e8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ea:  R_X86_64_64  _JIT_OPARG
// f2: 66 85 c0                      testw   %ax, %ax
// f5: 0f 94 c0                      sete    %al
// f8: 41 84 c7                      testb   %al, %r15b
// fb: 0f 84 aa 00 00 00             je      0x1ab <_JIT_ENTRY+0x1ab>
// 101: 49 8b 04 24                   movq    (%r12), %rax
// 105: 48 85 c0                      testq   %rax, %rax
// 108: 7f 22                         jg      0x12c <_JIT_ENTRY+0x12c>
// 10a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010c:  R_X86_64_64  .rodata.str1.1
// 114: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000116:  R_X86_64_64  _Py_NegativeRefcount
// 11e: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 123: 4c 89 e2                      movq    %r12, %rdx
// 126: ff d0                         callq   *%rax
// 128: 49 8b 04 24                   movq    (%r12), %rax
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 48 8b 5c 24 30                movq    0x30(%rsp), %rbx
// 133: 4c 8b 7c 24 28                movq    0x28(%rsp), %r15
// 138: 4c 8b 2c 24                   movq    (%rsp), %r13
// 13c: 78 21                         js      0x15f <_JIT_ENTRY+0x15f>
// 13e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000140:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 148: ff d0                         callq   *%rax
// 14a: 49 ff 0c 24                   decq    (%r12)
// 14e: 75 0f                         jne     0x15f <_JIT_ENTRY+0x15f>
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _Py_Dealloc
// 15a: 4c 89 e7                      movq    %r12, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 164: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 168: 4d 85 ed                      testq   %r13, %r13
// 16b: 0f 84 ef 02 00 00             je      0x460 <_JIT_ENTRY+0x460>
// 171: 48 8b 4c 24 20                movq    0x20(%rsp), %rcx
// 176: 4d 8d 24 ce                   leaq    (%r14,%rcx,8), %r12
// 17a: 4c 89 28                      movq    %r13, (%rax)
// 17d: 49 8b 47 10                   movq    0x10(%r15), %rax
// 181: 48 8b 00                      movq    (%rax), %rax
// 184: 84 c0                         testb   %al, %al
// 186: 0f 84 9d 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _Py_HandlePending
// 196: 4c 89 ff                      movq    %r15, %rdi
// 199: ff d0                         callq   *%rax
// 19b: 85 c0                         testl   %eax, %eax
// 19d: 0f 84 86 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 1a3: 4c 89 e0                      movq    %r12, %rax
// 1a6: e9 b5 02 00 00                jmp     0x460 <_JIT_ENTRY+0x460>
// 1ab: 83 fd 02                      cmpl    $0x2, %ebp
// 1ae: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1b4: 44 0f 43 fd                   cmovael %ebp, %r15d
// 1b8: 45 31 ed                      xorl    %r13d, %r13d
// 1bb: eb 0f                         jmp     0x1cc <_JIT_ENTRY+0x1cc>
// 1bd: 0f 1f 00                      nopl    (%rax)
// 1c0: 49 ff c5                      incq    %r13
// 1c3: 4d 39 ef                      cmpq    %r13, %r15
// 1c6: 0f 84 35 ff ff ff             je      0x101 <_JIT_ENTRY+0x101>
// 1cc: 4a 8b 2c eb                   movq    (%rbx,%r13,8), %rbp
// 1d0: 48 8b 45 00                   movq    (%rbp), %rax
// 1d4: 48 85 c0                      testq   %rax, %rax
// 1d7: 7e 07                         jle     0x1e0 <_JIT_ENTRY+0x1e0>
// 1d9: 85 c0                         testl   %eax, %eax
// 1db: 78 e3                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 1dd: eb 27                         jmp     0x206 <_JIT_ENTRY+0x206>
// 1df: 90                            nop
// 1e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e2:  R_X86_64_64  .rodata.str1.1
// 1ea: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ef: 48 89 ea                      movq    %rbp, %rdx
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _Py_NegativeRefcount
// 1fc: ff d0                         callq   *%rax
// 1fe: 48 8b 45 00                   movq    (%rbp), %rax
// 202: 85 c0                         testl   %eax, %eax
// 204: 78 ba                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 210: ff d0                         callq   *%rax
// 212: 48 ff 4d 00                   decq    (%rbp)
// 216: 75 a8                         jne     0x1c0 <_JIT_ENTRY+0x1c0>
// 218: 48 89 ef                      movq    %rbp, %rdi
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_Dealloc
// 225: ff d0                         callq   *%rax
// 227: eb 97                         jmp     0x1c0 <_JIT_ENTRY+0x1c0>
// 229: 4c 89 24 24                   movq    %r12, (%rsp)
// 22d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022f:  R_X86_64_64  _JIT_OPARG
// 237: f7 d0                         notl    %eax
// 239: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 23e: 4c 63 e8                      movslq  %eax, %r13
// 241: 4b 8b 6c ee f0                movq    -0x10(%r14,%r13,8), %rbp
// 246: 4f 8b 64 ee f8                movq    -0x8(%r14,%r13,8), %r12
// 24b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024d:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 255: 4c 89 ff                      movq    %r15, %rdi
// 258: 4c 89 e6                      movq    %r12, %rsi
// 25b: ff d0                         callq   *%rax
// 25d: 85 c0                         testl   %eax, %eax
// 25f: 0f 88 53 01 00 00             js      0x3b8 <_JIT_ENTRY+0x3b8>
// 265: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 26e: 48 c7 44 24 18 00 00 00 00    movq    $0x0, 0x18(%rsp)
// 277: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000279:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 281: 48 8d 54 24 10                leaq    0x10(%rsp), %rdx
// 286: 48 8d 4c 24 18                leaq    0x18(%rsp), %rcx
// 28b: 48 89 ef                      movq    %rbp, %rdi
// 28e: 4c 89 e6                      movq    %r12, %rsi
// 291: ff d0                         callq   *%rax
// 293: 89 44 24 08                   movl    %eax, 0x8(%rsp)
// 297: 48 8b 45 00                   movq    (%rbp), %rax
// 29b: 48 85 c0                      testq   %rax, %rax
// 29e: 7f 22                         jg      0x2c2 <_JIT_ENTRY+0x2c2>
// 2a0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002a2:  R_X86_64_64  .rodata.str1.1
// 2aa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ac:  R_X86_64_64  _Py_NegativeRefcount
// 2b4: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 2b9: 48 89 ea                      movq    %rbp, %rdx
// 2bc: ff d0                         callq   *%rax
// 2be: 48 8b 45 00                   movq    (%rbp), %rax
// 2c2: 85 c0                         testl   %eax, %eax
// 2c4: 78 21                         js      0x2e7 <_JIT_ENTRY+0x2e7>
// 2c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2d0: ff d0                         callq   *%rax
// 2d2: 48 ff 4d 00                   decq    (%rbp)
// 2d6: 75 0f                         jne     0x2e7 <_JIT_ENTRY+0x2e7>
// 2d8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002da:  R_X86_64_64  _Py_Dealloc
// 2e2: 48 89 ef                      movq    %rbp, %rdi
// 2e5: ff d0                         callq   *%rax
// 2e7: 49 8b 04 24                   movq    (%r12), %rax
// 2eb: 48 85 c0                      testq   %rax, %rax
// 2ee: 7f 22                         jg      0x312 <_JIT_ENTRY+0x312>
// 2f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002f2:  R_X86_64_64  .rodata.str1.1
// 2fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fc:  R_X86_64_64  _Py_NegativeRefcount
// 304: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 309: 4c 89 e2                      movq    %r12, %rdx
// 30c: ff d0                         callq   *%rax
// 30e: 49 8b 04 24                   movq    (%r12), %rax
// 312: 85 c0                         testl   %eax, %eax
// 314: 78 21                         js      0x337 <_JIT_ENTRY+0x337>
// 316: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000318:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 320: ff d0                         callq   *%rax
// 322: 49 ff 0c 24                   decq    (%r12)
// 326: 75 0f                         jne     0x337 <_JIT_ENTRY+0x337>
// 328: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032a:  R_X86_64_64  _Py_Dealloc
// 332: 4c 89 e7                      movq    %r12, %rdi
// 335: ff d0                         callq   *%rax
// 337: 83 7c 24 08 00                cmpl    $0x0, 0x8(%rsp)
// 33c: 0f 88 16 01 00 00             js      0x458 <_JIT_ENTRY+0x458>
// 342: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 347: 48 85 ff                      testq   %rdi, %rdi
// 34a: 0f 84 08 01 00 00             je      0x458 <_JIT_ENTRY+0x458>
// 350: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000352:  R_X86_64_64  _Py_NoneStruct
// 35a: 48 39 c7                      cmpq    %rax, %rdi
// 35d: 74 11                         je      0x370 <_JIT_ENTRY+0x370>
// 35f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000361:  R_X86_64_64  PyErr_SetHandledException
// 369: ff d0                         callq   *%rax
// 36b: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 370: 48 8b 4c 24 18                movq    0x18(%rsp), %rcx
// 375: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000377:  R_X86_64_64  _JIT_OPARG
// 37f: f7 d2                         notl    %edx
// 381: 81 ca 00 00 ff ff             orl     $0xffff0000, %edx       # imm = 0xFFFF0000
// 387: 48 63 d2                      movslq  %edx, %rdx
// 38a: 49 89 4c d6 f0                movq    %rcx, -0x10(%r14,%rdx,8)
// 38f: 49 89 44 d6 f8                movq    %rax, -0x8(%r14,%rdx,8)
// 394: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000396:  R_X86_64_64  _JIT_CONTINUE
// 39e: 48 89 df                      movq    %rbx, %rdi
// 3a1: 48 8b 34 24                   movq    (%rsp), %rsi
// 3a5: 4c 89 fa                      movq    %r15, %rdx
// 3a8: 48 83 c4 38                   addq    $0x38, %rsp
// 3ac: 5b                            popq    %rbx
// 3ad: 41 5c                         popq    %r12
// 3af: 41 5d                         popq    %r13
// 3b1: 41 5e                         popq    %r14
// 3b3: 41 5f                         popq    %r15
// 3b5: 5d                            popq    %rbp
// 3b6: ff e0                         jmpq    *%rax
// 3b8: 48 8b 45 00                   movq    (%rbp), %rax
// 3bc: 48 85 c0                      testq   %rax, %rax
// 3bf: 7f 22                         jg      0x3e3 <_JIT_ENTRY+0x3e3>
// 3c1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003c3:  R_X86_64_64  .rodata.str1.1
// 3cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003cd:  R_X86_64_64  _Py_NegativeRefcount
// 3d5: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// 3da: 48 89 ea                      movq    %rbp, %rdx
// 3dd: ff d0                         callq   *%rax
// 3df: 48 8b 45 00                   movq    (%rbp), %rax
// 3e3: 85 c0                         testl   %eax, %eax
// 3e5: 78 21                         js      0x408 <_JIT_ENTRY+0x408>
// 3e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003e9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3f1: ff d0                         callq   *%rax
// 3f3: 48 ff 4d 00                   decq    (%rbp)
// 3f7: 75 0f                         jne     0x408 <_JIT_ENTRY+0x408>
// 3f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003fb:  R_X86_64_64  _Py_Dealloc
// 403: 48 89 ef                      movq    %rbp, %rdi
// 406: ff d0                         callq   *%rax
// 408: 49 8b 04 24                   movq    (%r12), %rax
// 40c: 48 85 c0                      testq   %rax, %rax
// 40f: 7f 22                         jg      0x433 <_JIT_ENTRY+0x433>
// 411: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000413:  R_X86_64_64  .rodata.str1.1
// 41b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000041d:  R_X86_64_64  _Py_NegativeRefcount
// 425: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 42a: 4c 89 e2                      movq    %r12, %rdx
// 42d: ff d0                         callq   *%rax
// 42f: 49 8b 04 24                   movq    (%r12), %rax
// 433: 85 c0                         testl   %eax, %eax
// 435: 78 21                         js      0x458 <_JIT_ENTRY+0x458>
// 437: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000439:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 441: ff d0                         callq   *%rax
// 443: 49 ff 0c 24                   decq    (%r12)
// 447: 75 0f                         jne     0x458 <_JIT_ENTRY+0x458>
// 449: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000044b:  R_X86_64_64  _Py_Dealloc
// 453: 4c 89 e7                      movq    %r12, %rdi
// 456: ff d0                         callq   *%rax
// 458: 4b 8d 04 ee                   leaq    (%r14,%r13,8), %rax
// 45c: 48 83 c0 f0                   addq    $-0x10, %rax
// 460: 48 29 d8                      subq    %rbx, %rax
// 463: 48 83 c0 b8                   addq    $-0x48, %rax
// 467: 48 c1 e8 03                   shrq    $0x3, %rax
// 46b: 89 43 40                      movl    %eax, 0x40(%rbx)
// 46e: 31 c0                         xorl    %eax, %eax
// 470: e9 38 fc ff ff                jmp     0xad <_JIT_ENTRY+0xad>
// 475: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_EG_MATCH_code_body[1142] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x38, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd6, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xde, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4b, 0x8d, 0x1c, 0xce, 0x48, 0x8b, 0x3b, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc6, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x70, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x08, 0x4c, 0x89, 0x54, 0x24, 0x20, 0x48, 0x89, 0x54, 0x24, 0x28, 0x4c, 0x89, 0x44, 0x24, 0x30, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc7, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x73, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc7, 0x0f, 0x84, 0xaa, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x4c, 0x8b, 0x7c, 0x24, 0x28, 0x4c, 0x8b, 0x2c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc6, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xef, 0x02, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x20, 0x4d, 0x8d, 0x24, 0xce, 0x4c, 0x89, 0x28, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0x9d, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x86, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0xe9, 0xb5, 0x02, 0x00, 0x00, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xfd, 0x45, 0x31, 0xed, 0xeb, 0x0f, 0x0f, 0x1f, 0x00, 0x49, 0xff, 0xc5, 0x4d, 0x39, 0xef, 0x0f, 0x84, 0x35, 0xff, 0xff, 0xff, 0x4a, 0x8b, 0x2c, 0xeb, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x27, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x4c, 0x89, 0x24, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xe8, 0x4b, 0x8b, 0x6c, 0xee, 0xf0, 0x4f, 0x8b, 0x64, 0xee, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x88, 0x53, 0x01, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x18, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x10, 0x48, 0x8d, 0x4c, 0x24, 0x18, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x83, 0x7c, 0x24, 0x08, 0x00, 0x0f, 0x88, 0x16, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x08, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x4c, 0x24, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd2, 0x81, 0xca, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xd2, 0x49, 0x89, 0x4c, 0xd6, 0xf0, 0x49, 0x89, 0x44, 0xd6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x34, 0x24, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xee, 0x48, 0x83, 0xc0, 0xf0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x38, 0xfc, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_EG_MATCH_code_holes[37] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x56, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x99, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xea, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x116, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x140, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x24d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x279, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x2a2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2ac, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2da, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2fc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x318, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x32a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x352, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x361, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x377, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x396, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x3c3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3cd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3e9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x413, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x41d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x439, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x44b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_EG_MATCH_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_EG_MATCH_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_EXC_MATCH
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_EXC_MATCH.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d7                   movq    (%r15,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 df                   movq    (%r15,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c cf                   leaq    (%r15,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 c7                      subq    %r8, %r15
// 8b: 49 83 c7 b8                   addq    $-0x48, %r15
// 8f: 49 c1 ef 03                   shrq    $0x3, %r15
// 93: 45 89 78 40                   movl    %r15d, 0x40(%r8)
// 97: 49 8b 00                      movq    (%r8), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 5c 24 18                movq    %r11, 0x18(%rsp)
// c4: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// c9: 48 89 14 24                   movq    %rdx, (%rsp)
// cd: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 aa 00 00 00             je      0x1ad <_JIT_ENTRY+0x1ad>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 135: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 13a: 78 21                         js      0x15d <_JIT_ENTRY+0x15d>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 146: ff d0                         callq   *%rax
// 148: 49 ff 0c 24                   decq    (%r12)
// 14c: 75 0f                         jne     0x15d <_JIT_ENTRY+0x15d>
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _Py_Dealloc
// 158: 4c 89 e7                      movq    %r12, %rdi
// 15b: ff d0                         callq   *%rax
// 15d: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 162: 4d 8d 34 c7                   leaq    (%r15,%rax,8), %r14
// 166: 4d 85 ed                      testq   %r13, %r13
// 169: 0f 84 e8 01 00 00             je      0x357 <_JIT_ENTRY+0x357>
// 16f: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 174: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 178: 4d 89 2e                      movq    %r13, (%r14)
// 17b: 4c 8b 34 24                   movq    (%rsp), %r14
// 17f: 49 8b 46 10                   movq    0x10(%r14), %rax
// 183: 48 8b 00                      movq    (%rax), %rax
// 186: 84 c0                         testb   %al, %al
// 188: 0f 84 9b 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_HandlePending
// 198: 4c 89 f7                      movq    %r14, %rdi
// 19b: ff d0                         callq   *%rax
// 19d: 85 c0                         testl   %eax, %eax
// 19f: 0f 84 84 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 1a5: 4d 89 e6                      movq    %r12, %r14
// 1a8: e9 aa 01 00 00                jmp     0x357 <_JIT_ENTRY+0x357>
// 1ad: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1b1: bb 01 00 00 00                movl    $0x1, %ebx
// 1b6: 41 0f 43 dd                   cmovael %r13d, %ebx
// 1ba: 45 31 f6                      xorl    %r14d, %r14d
// 1bd: eb 0d                         jmp     0x1cc <_JIT_ENTRY+0x1cc>
// 1bf: 90                            nop
// 1c0: 49 ff c6                      incq    %r14
// 1c3: 4c 39 f3                      cmpq    %r14, %rbx
// 1c6: 0f 84 37 ff ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 1cc: 4e 8b 6c f5 00                movq    (%rbp,%r14,8), %r13
// 1d1: 49 8b 45 00                   movq    (%r13), %rax
// 1d5: 48 85 c0                      testq   %rax, %rax
// 1d8: 7e 06                         jle     0x1e0 <_JIT_ENTRY+0x1e0>
// 1da: 85 c0                         testl   %eax, %eax
// 1dc: 78 e2                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 1de: eb 26                         jmp     0x206 <_JIT_ENTRY+0x206>
// 1e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e2:  R_X86_64_64  .rodata.str1.1
// 1ea: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ef: 4c 89 ea                      movq    %r13, %rdx
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _Py_NegativeRefcount
// 1fc: ff d0                         callq   *%rax
// 1fe: 49 8b 45 00                   movq    (%r13), %rax
// 202: 85 c0                         testl   %eax, %eax
// 204: 78 ba                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 210: ff d0                         callq   *%rax
// 212: 49 ff 4d 00                   decq    (%r13)
// 216: 75 a8                         jne     0x1c0 <_JIT_ENTRY+0x1c0>
// 218: 4c 89 ef                      movq    %r13, %rdi
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_Dealloc
// 225: ff d0                         callq   *%rax
// 227: eb 97                         jmp     0x1c0 <_JIT_ENTRY+0x1c0>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _JIT_OPARG
// 233: f7 d0                         notl    %eax
// 235: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 23a: 48 98                         cltq
// 23c: 4c 89 f7                      movq    %r14, %rdi
// 23f: 4d 8d 34 c7                   leaq    (%r15,%rax,8), %r14
// 243: 49 83 c6 f8                   addq    $-0x8, %r14
// 247: 4d 8b 6c c7 f0                movq    -0x10(%r15,%rax,8), %r13
// 24c: 4d 8b 7c c7 f8                movq    -0x8(%r15,%rax,8), %r15
// 251: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000253:  R_X86_64_64  _PyEval_CheckExceptTypeValid
// 25b: 4c 89 fe                      movq    %r15, %rsi
// 25e: ff d0                         callq   *%rax
// 260: 85 c0                         testl   %eax, %eax
// 262: 0f 88 a2 00 00 00             js      0x30a <_JIT_ENTRY+0x30a>
// 268: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026a:  R_X86_64_64  PyErr_GivenExceptionMatches
// 272: 4c 89 ef                      movq    %r13, %rdi
// 275: 4c 89 fe                      movq    %r15, %rsi
// 278: ff d0                         callq   *%rax
// 27a: 89 c5                         movl    %eax, %ebp
// 27c: 49 8b 07                      movq    (%r15), %rax
// 27f: 48 85 c0                      testq   %rax, %rax
// 282: 7f 21                         jg      0x2a5 <_JIT_ENTRY+0x2a5>
// 284: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000286:  R_X86_64_64  .rodata.str1.1
// 28e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000290:  R_X86_64_64  _Py_NegativeRefcount
// 298: be da 07 00 00                movl    $0x7da, %esi            # imm = 0x7DA
// 29d: 4c 89 fa                      movq    %r15, %rdx
// 2a0: ff d0                         callq   *%rax
// 2a2: 49 8b 07                      movq    (%r15), %rax
// 2a5: 85 c0                         testl   %eax, %eax
// 2a7: 78 20                         js      0x2c9 <_JIT_ENTRY+0x2c9>
// 2a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ab:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2b3: ff d0                         callq   *%rax
// 2b5: 49 ff 0f                      decq    (%r15)
// 2b8: 75 0f                         jne     0x2c9 <_JIT_ENTRY+0x2c9>
// 2ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bc:  R_X86_64_64  _Py_Dealloc
// 2c4: 4c 89 ff                      movq    %r15, %rdi
// 2c7: ff d0                         callq   *%rax
// 2c9: 85 ed                         testl   %ebp, %ebp
// 2cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cd:  R_X86_64_64  _Py_FalseStruct
// 2d5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002d7:  R_X86_64_64  _Py_TrueStruct
// 2df: 48 0f 44 c8                   cmoveq  %rax, %rcx
// 2e3: 49 89 0e                      movq    %rcx, (%r14)
// 2e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e8:  R_X86_64_64  _JIT_CONTINUE
// 2f0: 48 89 df                      movq    %rbx, %rdi
// 2f3: 4c 89 e6                      movq    %r12, %rsi
// 2f6: 48 8b 14 24                   movq    (%rsp), %rdx
// 2fa: 48 83 c4 28                   addq    $0x28, %rsp
// 2fe: 5b                            popq    %rbx
// 2ff: 41 5c                         popq    %r12
// 301: 41 5d                         popq    %r13
// 303: 41 5e                         popq    %r14
// 305: 41 5f                         popq    %r15
// 307: 5d                            popq    %rbp
// 308: ff e0                         jmpq    *%rax
// 30a: 49 8b 07                      movq    (%r15), %rax
// 30d: 48 85 c0                      testq   %rax, %rax
// 310: 7f 21                         jg      0x333 <_JIT_ENTRY+0x333>
// 312: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000314:  R_X86_64_64  .rodata.str1.1
// 31c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031e:  R_X86_64_64  _Py_NegativeRefcount
// 326: be d6 07 00 00                movl    $0x7d6, %esi            # imm = 0x7D6
// 32b: 4c 89 fa                      movq    %r15, %rdx
// 32e: ff d0                         callq   *%rax
// 330: 49 8b 07                      movq    (%r15), %rax
// 333: 85 c0                         testl   %eax, %eax
// 335: 78 20                         js      0x357 <_JIT_ENTRY+0x357>
// 337: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000339:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 341: ff d0                         callq   *%rax
// 343: 49 ff 0f                      decq    (%r15)
// 346: 75 0f                         jne     0x357 <_JIT_ENTRY+0x357>
// 348: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000034a:  R_X86_64_64  _Py_Dealloc
// 352: 4c 89 ff                      movq    %r15, %rdi
// 355: ff d0                         callq   *%rax
// 357: 49 29 de                      subq    %rbx, %r14
// 35a: 49 83 c6 b8                   addq    $-0x48, %r14
// 35e: 49 c1 ee 03                   shrq    $0x3, %r14
// 362: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 366: 31 c0                         xorl    %eax, %eax
// 368: e9 43 fd ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 36d: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_EXC_MATCH_code_body[878] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd7, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xdf, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xcf, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x78, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x18, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x14, 0x24, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xaa, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x4d, 0x8d, 0x34, 0xc7, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xe8, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x4d, 0x8d, 0x24, 0xc7, 0x4d, 0x89, 0x2e, 0x4c, 0x8b, 0x34, 0x24, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0x9b, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x84, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xe6, 0xe9, 0xaa, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xdd, 0x45, 0x31, 0xf6, 0xeb, 0x0d, 0x90, 0x49, 0xff, 0xc6, 0x4c, 0x39, 0xf3, 0x0f, 0x84, 0x37, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xf5, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4c, 0x89, 0xf7, 0x4d, 0x8d, 0x34, 0xc7, 0x49, 0x83, 0xc6, 0xf8, 0x4d, 0x8b, 0x6c, 0xc7, 0xf0, 0x4d, 0x8b, 0x7c, 0xc7, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x88, 0xa2, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xda, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x49, 0x89, 0x0e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd6, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x43, 0xfd, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_EXC_MATCH_code_holes[28] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptTypeValid, 0x0},
    {0x26a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_GivenExceptionMatches, 0x0},
    {0x286, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x290, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2cd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x2d7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x2e8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x314, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x31e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x339, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x34a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_EXC_MATCH_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_EXC_MATCH_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_FUNCTION_EXACT_ARGS
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_FUNCTION_EXACT_ARGS.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c c6                   leaq    (%r14,%r8,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 49 29 de                      subq    %rbx, %r14
// 8b: 49 83 c6 b8                   addq    $-0x48, %r14
// 8f: 49 c1 ee 03                   shrq    $0x3, %r14
// 93: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 97: 48 8b 03                      movq    (%rbx), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c4: 4c 89 0c 24                   movq    %r9, (%rsp)
// c8: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cd: 48 89 5c 24 20                movq    %rbx, 0x20(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 b6 00 00 00             je      0x1b9 <_JIT_ENTRY+0x1b9>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 135: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 13a: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 13f: 78 21                         js      0x162 <_JIT_ENTRY+0x162>
// 141: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000143:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 14b: ff d0                         callq   *%rax
// 14d: 49 ff 0c 24                   decq    (%r12)
// 151: 75 0f                         jne     0x162 <_JIT_ENTRY+0x162>
// 153: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000155:  R_X86_64_64  _Py_Dealloc
// 15d: 4c 89 e7                      movq    %r12, %rdi
// 160: ff d0                         callq   *%rax
// 162: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 167: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 16b: 4d 85 ed                      testq   %r13, %r13
// 16e: 74 34                         je      0x1a4 <_JIT_ENTRY+0x1a4>
// 170: 48 8b 0c 24                   movq    (%rsp), %rcx
// 174: 4d 8d 24 ce                   leaq    (%r14,%rcx,8), %r12
// 178: 4c 89 28                      movq    %r13, (%rax)
// 17b: 49 8b 47 10                   movq    0x10(%r15), %rax
// 17f: 48 8b 00                      movq    (%rax), %rax
// 182: 84 c0                         testb   %al, %al
// 184: 0f 84 af 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 18a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018c:  R_X86_64_64  _Py_HandlePending
// 194: 4c 89 ff                      movq    %r15, %rdi
// 197: ff d0                         callq   *%rax
// 199: 85 c0                         testl   %eax, %eax
// 19b: 0f 84 98 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 1a1: 4c 89 e0                      movq    %r12, %rax
// 1a4: 48 29 d8                      subq    %rbx, %rax
// 1a7: 48 83 c0 b8                   addq    $-0x48, %rax
// 1ab: 48 c1 e8 03                   shrq    $0x3, %rax
// 1af: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1b2: 31 c0                         xorl    %eax, %eax
// 1b4: e9 f7 fe ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 1b9: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1bd: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1c3: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1c7: 31 db                         xorl    %ebx, %ebx
// 1c9: eb 11                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1cb: 0f 1f 44 00 00                nopl    (%rax,%rax)
// 1d0: 48 ff c3                      incq    %rbx
// 1d3: 49 39 df                      cmpq    %rbx, %r15
// 1d6: 0f 84 27 ff ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 1dc: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1e1: 49 8b 45 00                   movq    (%r13), %rax
// 1e5: 48 85 c0                      testq   %rax, %rax
// 1e8: 7e 06                         jle     0x1f0 <_JIT_ENTRY+0x1f0>
// 1ea: 85 c0                         testl   %eax, %eax
// 1ec: 78 e2                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1ee: eb 26                         jmp     0x216 <_JIT_ENTRY+0x216>
// 1f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f2:  R_X86_64_64  .rodata.str1.1
// 1fa: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ff: 4c 89 ea                      movq    %r13, %rdx
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_NegativeRefcount
// 20c: ff d0                         callq   *%rax
// 20e: 49 8b 45 00                   movq    (%r13), %rax
// 212: 85 c0                         testl   %eax, %eax
// 214: 78 ba                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 220: ff d0                         callq   *%rax
// 222: 49 ff 4d 00                   decq    (%r13)
// 226: 75 a8                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 228: 4c 89 ef                      movq    %r13, %rdi
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_Dealloc
// 235: ff d0                         callq   *%rax
// 237: eb 97                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _JIT_OPARG
// 243: 0f b7 c0                      movzwl  %ax, %eax
// 246: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 24b: 29 c1                         subl    %eax, %ecx
// 24d: f7 d0                         notl    %eax
// 24f: 48 98                         cltq
// 251: 48 63 c9                      movslq  %ecx, %rcx
// 254: 48 01 c1                      addq    %rax, %rcx
// 257: 49 8b 0c ce                   movq    (%r14,%rcx,8), %rcx
// 25b: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000025d:  R_X86_64_64  PyFunction_Type
// 265: 48 39 51 08                   cmpq    %rdx, 0x8(%rcx)
// 269: 75 56                         jne     0x2c1 <_JIT_ENTRY+0x2c1>
// 26b: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000026d:  R_X86_64_64  _JIT_OPERAND
// 275: 39 91 88 00 00 00             cmpl    %edx, 0x88(%rcx)
// 27b: 75 44                         jne     0x2c1 <_JIT_ENTRY+0x2c1>
// 27d: 48 01 c0                      addq    %rax, %rax
// 280: 48 8b 49 30                   movq    0x30(%rcx), %rcx
// 284: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000286:  R_X86_64_64  _JIT_OPARG
// 28e: 0f b7 d2                      movzwl  %dx, %edx
// 291: 49 83 3c c6 01                cmpq    $0x1, (%r14,%rax,8)
// 296: 83 da ff                      sbbl    $-0x1, %edx
// 299: 39 51 34                      cmpl    %edx, 0x34(%rcx)
// 29c: 75 23                         jne     0x2c1 <_JIT_ENTRY+0x2c1>
// 29e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a0:  R_X86_64_64  _JIT_CONTINUE
// 2a8: 48 89 df                      movq    %rbx, %rdi
// 2ab: 4c 89 e6                      movq    %r12, %rsi
// 2ae: 4c 89 fa                      movq    %r15, %rdx
// 2b1: 48 83 c4 28                   addq    $0x28, %rsp
// 2b5: 5b                            popq    %rbx
// 2b6: 41 5c                         popq    %r12
// 2b8: 41 5d                         popq    %r13
// 2ba: 41 5e                         popq    %r14
// 2bc: 41 5f                         popq    %r15
// 2be: 5d                            popq    %rbp
// 2bf: ff e0                         jmpq    *%rax
// 2c1: 4d 89 e6                      movq    %r12, %r14
// 2c4: e9 bf fd ff ff                jmp     0x88 <_JIT_ENTRY+0x88>
// 2c9: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_FUNCTION_EXACT_ARGS_code_body[714] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xce, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xc6, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x5c, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xb6, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x4d, 0x85, 0xed, 0x74, 0x34, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x24, 0xce, 0x4c, 0x89, 0x28, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xaf, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x98, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xf7, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xdb, 0xeb, 0x11, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0x27, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x63, 0xc9, 0x48, 0x01, 0xc1, 0x49, 0x8b, 0x0c, 0xce, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x51, 0x08, 0x75, 0x56, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x91, 0x88, 0x00, 0x00, 0x00, 0x75, 0x44, 0x48, 0x01, 0xc0, 0x48, 0x8b, 0x49, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x49, 0x83, 0x3c, 0xc6, 0x01, 0x83, 0xda, 0xff, 0x39, 0x51, 0x34, 0x75, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x89, 0xe6, 0xe9, 0xbf, 0xfd, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_FUNCTION_EXACT_ARGS_code_holes[19] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x143, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x155, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFunction_Type, 0x0},
    {0x26d, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x286, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2a0, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_FUNCTION_EXACT_ARGS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_FUNCTION_EXACT_ARGS_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_MANAGED_OBJECT_HAS_VALUES
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_MANAGED_OBJECT_HAS_VALUES.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4f 8d 04 c6                   leaq    (%r14,%r8,8), %r8
// 79: 49 8b 38                      movq    (%r8), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 49 29 de                      subq    %rbx, %r14
// 8a: 49 83 c6 b8                   addq    $-0x48, %r14
// 8e: 49 c1 ee 03                   shrq    $0x3, %r14
// 92: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 96: 48 8b 03                      movq    (%rbx), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c3: 4c 89 0c 24                   movq    %r9, (%rsp)
// c7: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cc: 48 85 c0                      testq   %rax, %rax
// cf: 40 0f 94 c5                   sete    %bpl
// d3: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// d7: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// dc: 49 8d 70 08                   leaq    0x8(%r8), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 b1 00 00 00             je      0x1b5 <_JIT_ENTRY+0x1b5>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 136: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 13b: 78 21                         js      0x15e <_JIT_ENTRY+0x15e>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 147: ff d0                         callq   *%rax
// 149: 49 ff 0c 24                   decq    (%r12)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_Dealloc
// 159: 4c 89 e7                      movq    %r12, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 163: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 167: 4d 85 ed                      testq   %r13, %r13
// 16a: 74 34                         je      0x1a0 <_JIT_ENTRY+0x1a0>
// 16c: 48 8b 0c 24                   movq    (%rsp), %rcx
// 170: 4d 8d 24 ce                   leaq    (%r14,%rcx,8), %r12
// 174: 4c 89 28                      movq    %r13, (%rax)
// 177: 49 8b 47 10                   movq    0x10(%r15), %rax
// 17b: 48 8b 00                      movq    (%rax), %rax
// 17e: 84 c0                         testb   %al, %al
// 180: 0f 84 c3 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 186: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000188:  R_X86_64_64  _Py_HandlePending
// 190: 4c 89 ff                      movq    %r15, %rdi
// 193: ff d0                         callq   *%rax
// 195: 85 c0                         testl   %eax, %eax
// 197: 0f 84 ac 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 19d: 4c 89 e0                      movq    %r12, %rax
// 1a0: 48 29 d8                      subq    %rbx, %rax
// 1a3: 48 83 c0 b8                   addq    $-0x48, %rax
// 1a7: 48 c1 e8 03                   shrq    $0x3, %rax
// 1ab: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1ae: 31 c0                         xorl    %eax, %eax
// 1b0: e9 fa fe ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 1b5: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1b9: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1bf: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1c3: 31 ed                         xorl    %ebp, %ebp
// 1c5: eb 15                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c7: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 1d0: 48 ff c5                      incq    %rbp
// 1d3: 49 39 ef                      cmpq    %rbp, %r15
// 1d6: 0f 84 28 ff ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 1dc: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 1e1: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 1e5: 49 8b 45 00                   movq    (%r13), %rax
// 1e9: 48 85 c0                      testq   %rax, %rax
// 1ec: 7e 12                         jle     0x200 <_JIT_ENTRY+0x200>
// 1ee: 85 c0                         testl   %eax, %eax
// 1f0: 78 de                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1f2: eb 32                         jmp     0x226 <_JIT_ENTRY+0x226>
// 1f4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 200: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1
// 20a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 20f: 4c 89 ea                      movq    %r13, %rdx
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: ff d0                         callq   *%rax
// 21e: 49 8b 45 00                   movq    (%r13), %rax
// 222: 85 c0                         testl   %eax, %eax
// 224: 78 aa                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 230: ff d0                         callq   *%rax
// 232: 49 ff 4d 00                   decq    (%r13)
// 236: 75 98                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: ff d0                         callq   *%rax
// 247: eb 87                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _JIT_OPARG
// 253: f7 d0                         notl    %eax
// 255: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 25a: 48 98                         cltq
// 25c: 49 8b 7c c6 f8                movq    -0x8(%r14,%rax,8), %rdi
// 261: f6 47 e8 01                   testb   $0x1, -0x18(%rdi)
// 265: 75 14                         jne     0x27b <_JIT_ENTRY+0x27b>
// 267: 48 8d 77 e8                   leaq    -0x18(%rdi), %rsi
// 26b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026d:  R_X86_64_64  _PyObject_MakeInstanceAttributesFromDict
// 275: ff d0                         callq   *%rax
// 277: 84 c0                         testb   %al, %al
// 279: 74 23                         je      0x29e <_JIT_ENTRY+0x29e>
// 27b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027d:  R_X86_64_64  _JIT_CONTINUE
// 285: 48 89 df                      movq    %rbx, %rdi
// 288: 4c 89 e6                      movq    %r12, %rsi
// 28b: 4c 89 fa                      movq    %r15, %rdx
// 28e: 48 83 c4 28                   addq    $0x28, %rsp
// 292: 5b                            popq    %rbx
// 293: 41 5c                         popq    %r12
// 295: 41 5d                         popq    %r13
// 297: 41 5e                         popq    %r14
// 299: 41 5f                         popq    %r15
// 29b: 5d                            popq    %rbp
// 29c: ff e0                         jmpq    *%rax
// 29e: 4d 89 e6                      movq    %r12, %r14
// 2a1: e9 e1 fd ff ff                jmp     0x87 <_JIT_ENTRY+0x87>
// 2a6: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_MANAGED_OBJECT_HAS_VALUES_code_body[679] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xce, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4f, 0x8d, 0x04, 0xc6, 0x49, 0x8b, 0x38, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x70, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xb1, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x4d, 0x85, 0xed, 0x74, 0x34, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x24, 0xce, 0x4c, 0x89, 0x28, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xac, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xfa, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xed, 0xeb, 0x15, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xef, 0x0f, 0x84, 0x28, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x7c, 0xc6, 0xf8, 0xf6, 0x47, 0xe8, 0x01, 0x75, 0x14, 0x48, 0x8d, 0x77, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x84, 0xc0, 0x74, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x89, 0xe6, 0xe9, 0xe1, 0xfd, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_MANAGED_OBJECT_HAS_VALUES_code_holes[17] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x26d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_MakeInstanceAttributesFromDict, 0x0},
    {0x27d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_MANAGED_OBJECT_HAS_VALUES_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_MANAGED_OBJECT_HAS_VALUES_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_PEP_523
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_PEP_523.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4f 8d 04 c6                   leaq    (%r14,%r8,8), %r8
// 79: 49 8b 38                      movq    (%r8), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 49 29 de                      subq    %rbx, %r14
// 8a: 49 83 c6 b8                   addq    $-0x48, %r14
// 8e: 49 c1 ee 03                   shrq    $0x3, %r14
// 92: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 96: 48 8b 03                      movq    (%rbx), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c3: 4c 89 0c 24                   movq    %r9, (%rsp)
// c7: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cc: 48 85 c0                      testq   %rax, %rax
// cf: 40 0f 94 c5                   sete    %bpl
// d3: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// d7: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// dc: 49 8d 70 08                   leaq    0x8(%r8), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 b1 00 00 00             je      0x1b5 <_JIT_ENTRY+0x1b5>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 136: 78 21                         js      0x159 <_JIT_ENTRY+0x159>
// 138: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 142: ff d0                         callq   *%rax
// 144: 49 ff 0c 24                   decq    (%r12)
// 148: 75 0f                         jne     0x159 <_JIT_ENTRY+0x159>
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_Dealloc
// 154: 4c 89 e7                      movq    %r12, %rdi
// 157: ff d0                         callq   *%rax
// 159: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 15e: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 162: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 167: 48 85 d2                      testq   %rdx, %rdx
// 16a: 74 34                         je      0x1a0 <_JIT_ENTRY+0x1a0>
// 16c: 48 8b 0c 24                   movq    (%rsp), %rcx
// 170: 4d 8d 34 ce                   leaq    (%r14,%rcx,8), %r14
// 174: 48 89 10                      movq    %rdx, (%rax)
// 177: 49 8b 47 10                   movq    0x10(%r15), %rax
// 17b: 48 8b 08                      movq    (%rax), %rcx
// 17e: 84 c9                         testb   %cl, %cl
// 180: 0f 84 c7 00 00 00             je      0x24d <_JIT_ENTRY+0x24d>
// 186: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000188:  R_X86_64_64  _Py_HandlePending
// 190: 4c 89 ff                      movq    %r15, %rdi
// 193: ff d0                         callq   *%rax
// 195: 85 c0                         testl   %eax, %eax
// 197: 0f 84 ac 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 19d: 4c 89 f0                      movq    %r14, %rax
// 1a0: 48 29 d8                      subq    %rbx, %rax
// 1a3: 48 83 c0 b8                   addq    $-0x48, %rax
// 1a7: 48 c1 e8 03                   shrq    $0x3, %rax
// 1ab: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1ae: 31 c0                         xorl    %eax, %eax
// 1b0: e9 fa fe ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 1b5: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1b9: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1bf: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1c3: 31 ed                         xorl    %ebp, %ebp
// 1c5: eb 15                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c7: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 1d0: 48 ff c5                      incq    %rbp
// 1d3: 49 39 ef                      cmpq    %rbp, %r15
// 1d6: 0f 84 28 ff ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 1dc: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 1e1: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 1e5: 49 8b 45 00                   movq    (%r13), %rax
// 1e9: 48 85 c0                      testq   %rax, %rax
// 1ec: 7e 12                         jle     0x200 <_JIT_ENTRY+0x200>
// 1ee: 85 c0                         testl   %eax, %eax
// 1f0: 78 de                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1f2: eb 32                         jmp     0x226 <_JIT_ENTRY+0x226>
// 1f4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 200: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1
// 20a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 20f: 4c 89 ea                      movq    %r13, %rdx
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: ff d0                         callq   *%rax
// 21e: 49 8b 45 00                   movq    (%r13), %rax
// 222: 85 c0                         testl   %eax, %eax
// 224: 78 aa                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 230: ff d0                         callq   *%rax
// 232: 49 ff 4d 00                   decq    (%r13)
// 236: 75 98                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: ff d0                         callq   *%rax
// 247: eb 87                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 249: 49 8b 47 10                   movq    0x10(%r15), %rax
// 24d: 48 83 b8 20 08 00 00 00       cmpq    $0x0, 0x820(%rax)
// 255: 0f 85 2c fe ff ff             jne     0x87 <_JIT_ENTRY+0x87>
// 25b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025d:  R_X86_64_64  _JIT_CONTINUE
// 265: 48 89 df                      movq    %rbx, %rdi
// 268: 4c 89 f6                      movq    %r14, %rsi
// 26b: 4c 89 fa                      movq    %r15, %rdx
// 26e: 48 83 c4 28                   addq    $0x28, %rsp
// 272: 5b                            popq    %rbx
// 273: 41 5c                         popq    %r12
// 275: 41 5d                         popq    %r13
// 277: 41 5e                         popq    %r14
// 279: 41 5f                         popq    %r15
// 27b: 5d                            popq    %rbp
// 27c: ff e0                         jmpq    *%rax
// 27e: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_PEP_523_code_body[639] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xce, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4f, 0x8d, 0x04, 0xc6, 0x49, 0x8b, 0x38, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x70, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xb1, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x74, 0x34, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x34, 0xce, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x08, 0x84, 0xc9, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xac, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xfa, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xed, 0xeb, 0x15, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xef, 0x0f, 0x84, 0x28, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x83, 0xb8, 0x20, 0x08, 0x00, 0x00, 0x00, 0x0f, 0x85, 0x2c, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_PEP_523_code_holes[15] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_PEP_523_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_PEP_523_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_STACK_SPACE
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_STACK_SPACE.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c c6                   leaq    (%r14,%r8,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 49 29 de                      subq    %rbx, %r14
// 8b: 49 83 c6 b8                   addq    $-0x48, %r14
// 8f: 49 c1 ee 03                   shrq    $0x3, %r14
// 93: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 97: 48 8b 03                      movq    (%rbx), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c4: 4c 89 0c 24                   movq    %r9, (%rsp)
// c8: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cd: 48 89 5c 24 20                movq    %rbx, 0x20(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 b6 00 00 00             je      0x1b9 <_JIT_ENTRY+0x1b9>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 135: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 13a: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 13f: 78 21                         js      0x162 <_JIT_ENTRY+0x162>
// 141: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000143:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 14b: ff d0                         callq   *%rax
// 14d: 49 ff 0c 24                   decq    (%r12)
// 151: 75 0f                         jne     0x162 <_JIT_ENTRY+0x162>
// 153: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000155:  R_X86_64_64  _Py_Dealloc
// 15d: 4c 89 e7                      movq    %r12, %rdi
// 160: ff d0                         callq   *%rax
// 162: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 167: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 16b: 4d 85 ed                      testq   %r13, %r13
// 16e: 74 34                         je      0x1a4 <_JIT_ENTRY+0x1a4>
// 170: 48 8b 0c 24                   movq    (%rsp), %rcx
// 174: 4d 8d 24 ce                   leaq    (%r14,%rcx,8), %r12
// 178: 4c 89 28                      movq    %r13, (%rax)
// 17b: 49 8b 47 10                   movq    0x10(%r15), %rax
// 17f: 48 8b 00                      movq    (%rax), %rax
// 182: 84 c0                         testb   %al, %al
// 184: 0f 84 af 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 18a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018c:  R_X86_64_64  _Py_HandlePending
// 194: 4c 89 ff                      movq    %r15, %rdi
// 197: ff d0                         callq   *%rax
// 199: 85 c0                         testl   %eax, %eax
// 19b: 0f 84 98 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 1a1: 4c 89 e0                      movq    %r12, %rax
// 1a4: 48 29 d8                      subq    %rbx, %rax
// 1a7: 48 83 c0 b8                   addq    $-0x48, %rax
// 1ab: 48 c1 e8 03                   shrq    $0x3, %rax
// 1af: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1b2: 31 c0                         xorl    %eax, %eax
// 1b4: e9 f7 fe ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 1b9: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1bd: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1c3: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1c7: 31 db                         xorl    %ebx, %ebx
// 1c9: eb 11                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1cb: 0f 1f 44 00 00                nopl    (%rax,%rax)
// 1d0: 48 ff c3                      incq    %rbx
// 1d3: 49 39 df                      cmpq    %rbx, %r15
// 1d6: 0f 84 27 ff ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 1dc: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1e1: 49 8b 45 00                   movq    (%r13), %rax
// 1e5: 48 85 c0                      testq   %rax, %rax
// 1e8: 7e 06                         jle     0x1f0 <_JIT_ENTRY+0x1f0>
// 1ea: 85 c0                         testl   %eax, %eax
// 1ec: 78 e2                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1ee: eb 26                         jmp     0x216 <_JIT_ENTRY+0x216>
// 1f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f2:  R_X86_64_64  .rodata.str1.1
// 1fa: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ff: 4c 89 ea                      movq    %r13, %rdx
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_NegativeRefcount
// 20c: ff d0                         callq   *%rax
// 20e: 49 8b 45 00                   movq    (%r13), %rax
// 212: 85 c0                         testl   %eax, %eax
// 214: 78 ba                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 220: ff d0                         callq   *%rax
// 222: 49 ff 4d 00                   decq    (%r13)
// 226: 75 a8                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 228: 4c 89 ef                      movq    %r13, %rdi
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_Dealloc
// 235: ff d0                         callq   *%rax
// 237: eb 97                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 239: 49 8b 87 00 01 00 00          movq    0x100(%r15), %rax
// 240: 48 85 c0                      testq   %rax, %rax
// 243: 74 45                         je      0x28a <_JIT_ENTRY+0x28a>
// 245: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000247:  R_X86_64_64  _JIT_OPARG
// 24f: 0f b7 c9                      movzwl  %cx, %ecx
// 252: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 257: 29 ca                         subl    %ecx, %edx
// 259: 48 63 d2                      movslq  %edx, %rdx
// 25c: f7 d1                         notl    %ecx
// 25e: 48 63 c9                      movslq  %ecx, %rcx
// 261: 48 01 d1                      addq    %rdx, %rcx
// 264: 49 8b 0c ce                   movq    (%r14,%rcx,8), %rcx
// 268: 48 8b 49 30                   movq    0x30(%rcx), %rcx
// 26c: 48 63 49 4c                   movslq  0x4c(%rcx), %rcx
// 270: 49 8b 97 08 01 00 00          movq    0x108(%r15), %rdx
// 277: 48 29 c2                      subq    %rax, %rdx
// 27a: 48 c1 fa 03                   sarq    $0x3, %rdx
// 27e: 48 39 ca                      cmpq    %rcx, %rdx
// 281: 7e 07                         jle     0x28a <_JIT_ENTRY+0x28a>
// 283: 41 83 7f 24 02                cmpl    $0x2, 0x24(%r15)
// 288: 7d 08                         jge     0x292 <_JIT_ENTRY+0x292>
// 28a: 4d 89 e6                      movq    %r12, %r14
// 28d: e9 f6 fd ff ff                jmp     0x88 <_JIT_ENTRY+0x88>
// 292: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000294:  R_X86_64_64  _JIT_CONTINUE
// 29c: 48 89 df                      movq    %rbx, %rdi
// 29f: 4c 89 e6                      movq    %r12, %rsi
// 2a2: 4c 89 fa                      movq    %r15, %rdx
// 2a5: 48 83 c4 28                   addq    $0x28, %rsp
// 2a9: 5b                            popq    %rbx
// 2aa: 41 5c                         popq    %r12
// 2ac: 41 5d                         popq    %r13
// 2ae: 41 5e                         popq    %r14
// 2b0: 41 5f                         popq    %r15
// 2b2: 5d                            popq    %rbp
// 2b3: ff e0                         jmpq    *%rax
// 2b5: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_STACK_SPACE_code_body[694] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xce, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xc6, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x5c, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xb6, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x4d, 0x85, 0xed, 0x74, 0x34, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x24, 0xce, 0x4c, 0x89, 0x28, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xaf, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x98, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xf7, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xdb, 0xeb, 0x11, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0x27, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x49, 0x8b, 0x87, 0x00, 0x01, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x45, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xd2, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x48, 0x01, 0xd1, 0x49, 0x8b, 0x0c, 0xce, 0x48, 0x8b, 0x49, 0x30, 0x48, 0x63, 0x49, 0x4c, 0x49, 0x8b, 0x97, 0x08, 0x01, 0x00, 0x00, 0x48, 0x29, 0xc2, 0x48, 0xc1, 0xfa, 0x03, 0x48, 0x39, 0xca, 0x7e, 0x07, 0x41, 0x83, 0x7f, 0x24, 0x02, 0x7d, 0x08, 0x4d, 0x89, 0xe6, 0xe9, 0xf6, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_STACK_SPACE_code_holes[16] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x143, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x155, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x247, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x294, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_STACK_SPACE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_STACK_SPACE_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_VALIDITY
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_VALIDITY.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4f 8d 04 c6                   leaq    (%r14,%r8,8), %r8
// 79: 49 8b 38                      movq    (%r8), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 49 29 de                      subq    %rbx, %r14
// 8a: 49 83 c6 b8                   addq    $-0x48, %r14
// 8e: 49 c1 ee 03                   shrq    $0x3, %r14
// 92: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 96: 48 8b 03                      movq    (%rbx), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c3: 4c 89 0c 24                   movq    %r9, (%rsp)
// c7: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cc: 48 85 c0                      testq   %rax, %rax
// cf: 40 0f 94 c5                   sete    %bpl
// d3: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// d7: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// dc: 49 8d 70 08                   leaq    0x8(%r8), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 b1 00 00 00             je      0x1b5 <_JIT_ENTRY+0x1b5>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 136: 78 21                         js      0x159 <_JIT_ENTRY+0x159>
// 138: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 142: ff d0                         callq   *%rax
// 144: 49 ff 0c 24                   decq    (%r12)
// 148: 75 0f                         jne     0x159 <_JIT_ENTRY+0x159>
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_Dealloc
// 154: 4c 89 e7                      movq    %r12, %rdi
// 157: ff d0                         callq   *%rax
// 159: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 15e: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 162: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 167: 48 85 d2                      testq   %rdx, %rdx
// 16a: 74 34                         je      0x1a0 <_JIT_ENTRY+0x1a0>
// 16c: 48 8b 0c 24                   movq    (%rsp), %rcx
// 170: 4d 8d 34 ce                   leaq    (%r14,%rcx,8), %r14
// 174: 48 89 10                      movq    %rdx, (%rax)
// 177: 49 8b 47 10                   movq    0x10(%r15), %rax
// 17b: 48 8b 00                      movq    (%rax), %rax
// 17e: 84 c0                         testb   %al, %al
// 180: 0f 84 c3 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 186: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000188:  R_X86_64_64  _Py_HandlePending
// 190: 4c 89 ff                      movq    %r15, %rdi
// 193: ff d0                         callq   *%rax
// 195: 85 c0                         testl   %eax, %eax
// 197: 0f 84 ac 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 19d: 4c 89 f0                      movq    %r14, %rax
// 1a0: 48 29 d8                      subq    %rbx, %rax
// 1a3: 48 83 c0 b8                   addq    $-0x48, %rax
// 1a7: 48 c1 e8 03                   shrq    $0x3, %rax
// 1ab: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1ae: 31 c0                         xorl    %eax, %eax
// 1b0: e9 fa fe ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 1b5: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1b9: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1bf: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1c3: 31 ed                         xorl    %ebp, %ebp
// 1c5: eb 15                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c7: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 1d0: 48 ff c5                      incq    %rbp
// 1d3: 49 39 ef                      cmpq    %rbp, %r15
// 1d6: 0f 84 28 ff ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 1dc: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 1e1: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 1e5: 49 8b 45 00                   movq    (%r13), %rax
// 1e9: 48 85 c0                      testq   %rax, %rax
// 1ec: 7e 12                         jle     0x200 <_JIT_ENTRY+0x200>
// 1ee: 85 c0                         testl   %eax, %eax
// 1f0: 78 de                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1f2: eb 32                         jmp     0x226 <_JIT_ENTRY+0x226>
// 1f4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 200: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1
// 20a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 20f: 4c 89 ea                      movq    %r13, %rdx
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: ff d0                         callq   *%rax
// 21e: 49 8b 45 00                   movq    (%r13), %rax
// 222: 85 c0                         testl   %eax, %eax
// 224: 78 aa                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 230: ff d0                         callq   *%rax
// 232: 49 ff 4d 00                   decq    (%r13)
// 236: 75 98                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: ff d0                         callq   *%rax
// 247: eb 87                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _JIT_EXECUTOR
// 253: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 257: 0f 84 2a fe ff ff             je      0x87 <_JIT_ENTRY+0x87>
// 25d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025f:  R_X86_64_64  _JIT_CONTINUE
// 267: 48 89 df                      movq    %rbx, %rdi
// 26a: 4c 89 f6                      movq    %r14, %rsi
// 26d: 4c 89 fa                      movq    %r15, %rdx
// 270: 48 83 c4 28                   addq    $0x28, %rsp
// 274: 5b                            popq    %rbx
// 275: 41 5c                         popq    %r12
// 277: 41 5d                         popq    %r13
// 279: 41 5e                         popq    %r14
// 27b: 41 5f                         popq    %r15
// 27d: 5d                            popq    %rbp
// 27e: ff e0                         jmpq    *%rax
// 280: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_VALIDITY_code_body[641] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xce, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4f, 0x8d, 0x04, 0xc6, 0x49, 0x8b, 0x38, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x70, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xb1, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x74, 0x34, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x34, 0xce, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xac, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xfa, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xed, 0xeb, 0x15, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xef, 0x0f, 0x84, 0x28, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x0f, 0x84, 0x2a, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_VALIDITY_code_holes[16] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x25f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_VALIDITY_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_VALIDITY_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_COMPARE_OP
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_COMPARE_OP.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d6                   movq    (%r14,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 de                   movq    (%r14,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4b 8d 1c ce                   leaq    (%r14,%r9,8), %rbx
// 79: 48 8b 3b                      movq    (%rbx), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 4d 29 c6                      subq    %r8, %r14
// 8a: 49 83 c6 b8                   addq    $-0x48, %r14
// 8e: 49 c1 ee 03                   shrq    $0x3, %r14
// 92: 45 89 70 40                   movl    %r14d, 0x40(%r8)
// 96: 49 8b 00                      movq    (%r8), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 5c 24 20                movq    %r11, 0x20(%rsp)
// c3: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c8: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// cd: 4c 89 04 24                   movq    %r8, (%rsp)
// d1: 48 85 c0                      testq   %rax, %rax
// d4: 40 0f 94 c5                   sete    %bpl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 73 08                   leaq    0x8(%rbx), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 a8 00 00 00             je      0x1ac <_JIT_ENTRY+0x1ac>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 136: 78 21                         js      0x159 <_JIT_ENTRY+0x159>
// 138: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 142: ff d0                         callq   *%rax
// 144: 49 ff 0c 24                   decq    (%r12)
// 148: 75 0f                         jne     0x159 <_JIT_ENTRY+0x159>
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_Dealloc
// 154: 4c 89 e7                      movq    %r12, %rdi
// 157: ff d0                         callq   *%rax
// 159: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 15e: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 162: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 167: 48 85 c0                      testq   %rax, %rax
// 16a: 48 8b 1c 24                   movq    (%rsp), %rbx
// 16e: 0f 84 5a 02 00 00             je      0x3ce <_JIT_ENTRY+0x3ce>
// 174: 49 89 45 00                   movq    %rax, (%r13)
// 178: 49 8b 47 10                   movq    0x10(%r15), %rax
// 17c: 48 8b 00                      movq    (%rax), %rax
// 17f: 84 c0                         testb   %al, %al
// 181: 0f 84 a2 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _Py_HandlePending
// 191: 4c 89 ff                      movq    %r15, %rdi
// 194: ff d0                         callq   *%rax
// 196: 85 c0                         testl   %eax, %eax
// 198: 0f 84 8b 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 19e: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1a3: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 1a7: e9 22 02 00 00                jmp     0x3ce <_JIT_ENTRY+0x3ce>
// 1ac: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1b0: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1b6: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1ba: 31 ed                         xorl    %ebp, %ebp
// 1bc: eb 0e                         jmp     0x1cc <_JIT_ENTRY+0x1cc>
// 1be: 66 90                         nop
// 1c0: 48 ff c5                      incq    %rbp
// 1c3: 49 39 ef                      cmpq    %rbp, %r15
// 1c6: 0f 84 38 ff ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 1cc: 4c 8b 2c eb                   movq    (%rbx,%rbp,8), %r13
// 1d0: 49 8b 45 00                   movq    (%r13), %rax
// 1d4: 48 85 c0                      testq   %rax, %rax
// 1d7: 7e 07                         jle     0x1e0 <_JIT_ENTRY+0x1e0>
// 1d9: 85 c0                         testl   %eax, %eax
// 1db: 78 e3                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 1dd: eb 27                         jmp     0x206 <_JIT_ENTRY+0x206>
// 1df: 90                            nop
// 1e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e2:  R_X86_64_64  .rodata.str1.1
// 1ea: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ef: 4c 89 ea                      movq    %r13, %rdx
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _Py_NegativeRefcount
// 1fc: ff d0                         callq   *%rax
// 1fe: 49 8b 45 00                   movq    (%r13), %rax
// 202: 85 c0                         testl   %eax, %eax
// 204: 78 ba                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 210: ff d0                         callq   *%rax
// 212: 49 ff 4d 00                   decq    (%r13)
// 216: 75 a8                         jne     0x1c0 <_JIT_ENTRY+0x1c0>
// 218: 4c 89 ef                      movq    %r13, %rdi
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_Dealloc
// 225: ff d0                         callq   *%rax
// 227: eb 97                         jmp     0x1c0 <_JIT_ENTRY+0x1c0>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _JIT_OPARG
// 233: 0f b7 d0                      movzwl  %ax, %edx
// 236: 89 d0                         movl    %edx, %eax
// 238: f7 d0                         notl    %eax
// 23a: 4c 63 f8                      movslq  %eax, %r15
// 23d: 4b 8b 6c fe f0                movq    -0x10(%r14,%r15,8), %rbp
// 242: 4f 8b 6c fe f8                movq    -0x8(%r14,%r15,8), %r13
// 247: c1 ea 05                      shrl    $0x5, %edx
// 24a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024c:  R_X86_64_64  PyObject_RichCompare
// 254: 48 89 ef                      movq    %rbp, %rdi
// 257: 4c 89 ee                      movq    %r13, %rsi
// 25a: ff d0                         callq   *%rax
// 25c: 49 89 c4                      movq    %rax, %r12
// 25f: 48 8b 45 00                   movq    (%rbp), %rax
// 263: 48 85 c0                      testq   %rax, %rax
// 266: 7f 22                         jg      0x28a <_JIT_ENTRY+0x28a>
// 268: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000026a:  R_X86_64_64  .rodata.str1.1
// 272: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000274:  R_X86_64_64  _Py_NegativeRefcount
// 27c: be 38 07 00 00                movl    $0x738, %esi            # imm = 0x738
// 281: 48 89 ea                      movq    %rbp, %rdx
// 284: ff d0                         callq   *%rax
// 286: 48 8b 45 00                   movq    (%rbp), %rax
// 28a: 85 c0                         testl   %eax, %eax
// 28c: 78 21                         js      0x2af <_JIT_ENTRY+0x2af>
// 28e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000290:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 298: ff d0                         callq   *%rax
// 29a: 48 ff 4d 00                   decq    (%rbp)
// 29e: 75 0f                         jne     0x2af <_JIT_ENTRY+0x2af>
// 2a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a2:  R_X86_64_64  _Py_Dealloc
// 2aa: 48 89 ef                      movq    %rbp, %rdi
// 2ad: ff d0                         callq   *%rax
// 2af: 49 8b 45 00                   movq    (%r13), %rax
// 2b3: 48 85 c0                      testq   %rax, %rax
// 2b6: 7f 22                         jg      0x2da <_JIT_ENTRY+0x2da>
// 2b8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002ba:  R_X86_64_64  .rodata.str1.1
// 2c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c4:  R_X86_64_64  _Py_NegativeRefcount
// 2cc: be 39 07 00 00                movl    $0x739, %esi            # imm = 0x739
// 2d1: 4c 89 ea                      movq    %r13, %rdx
// 2d4: ff d0                         callq   *%rax
// 2d6: 49 8b 45 00                   movq    (%r13), %rax
// 2da: 85 c0                         testl   %eax, %eax
// 2dc: 78 21                         js      0x2ff <_JIT_ENTRY+0x2ff>
// 2de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2e8: ff d0                         callq   *%rax
// 2ea: 49 ff 4d 00                   decq    (%r13)
// 2ee: 75 0f                         jne     0x2ff <_JIT_ENTRY+0x2ff>
// 2f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f2:  R_X86_64_64  _Py_Dealloc
// 2fa: 4c 89 ef                      movq    %r13, %rdi
// 2fd: ff d0                         callq   *%rax
// 2ff: 4f 8d 2c fe                   leaq    (%r14,%r15,8), %r13
// 303: 49 83 c5 f0                   addq    $-0x10, %r13
// 307: 4d 85 e4                      testq   %r12, %r12
// 30a: 0f 84 ba 00 00 00             je      0x3ca <_JIT_ENTRY+0x3ca>
// 310: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000312:  R_X86_64_64  _JIT_OPARG
// 31a: a8 10                         testb   $0x10, %al
// 31c: 74 7d                         je      0x39b <_JIT_ENTRY+0x39b>
// 31e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000320:  R_X86_64_64  PyObject_IsTrue
// 328: 4c 89 e7                      movq    %r12, %rdi
// 32b: ff d0                         callq   *%rax
// 32d: 89 c5                         movl    %eax, %ebp
// 32f: 49 8b 04 24                   movq    (%r12), %rax
// 333: 48 85 c0                      testq   %rax, %rax
// 336: 7f 22                         jg      0x35a <_JIT_ENTRY+0x35a>
// 338: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000033a:  R_X86_64_64  .rodata.str1.1
// 342: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000344:  R_X86_64_64  _Py_NegativeRefcount
// 34c: be 3d 07 00 00                movl    $0x73d, %esi            # imm = 0x73D
// 351: 4c 89 e2                      movq    %r12, %rdx
// 354: ff d0                         callq   *%rax
// 356: 49 8b 04 24                   movq    (%r12), %rax
// 35a: 85 c0                         testl   %eax, %eax
// 35c: 78 21                         js      0x37f <_JIT_ENTRY+0x37f>
// 35e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000360:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 368: ff d0                         callq   *%rax
// 36a: 49 ff 0c 24                   decq    (%r12)
// 36e: 75 0f                         jne     0x37f <_JIT_ENTRY+0x37f>
// 370: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000372:  R_X86_64_64  _Py_Dealloc
// 37a: 4c 89 e7                      movq    %r12, %rdi
// 37d: ff d0                         callq   *%rax
// 37f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000381:  R_X86_64_64  _Py_FalseStruct
// 389: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 000000000000038b:  R_X86_64_64  _Py_TrueStruct
// 393: 85 ed                         testl   %ebp, %ebp
// 395: 4c 0f 44 e0                   cmoveq  %rax, %r12
// 399: 78 2f                         js      0x3ca <_JIT_ENTRY+0x3ca>
// 39b: 4b 8d 34 fe                   leaq    (%r14,%r15,8), %rsi
// 39f: 48 83 c6 f8                   addq    $-0x8, %rsi
// 3a3: 4d 89 65 00                   movq    %r12, (%r13)
// 3a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a9:  R_X86_64_64  _JIT_CONTINUE
// 3b1: 48 8b 3c 24                   movq    (%rsp), %rdi
// 3b5: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 3ba: 48 83 c4 28                   addq    $0x28, %rsp
// 3be: 5b                            popq    %rbx
// 3bf: 41 5c                         popq    %r12
// 3c1: 41 5d                         popq    %r13
// 3c3: 41 5e                         popq    %r14
// 3c5: 41 5f                         popq    %r15
// 3c7: 5d                            popq    %rbp
// 3c8: ff e0                         jmpq    *%rax
// 3ca: 48 8b 1c 24                   movq    (%rsp), %rbx
// 3ce: 49 29 dd                      subq    %rbx, %r13
// 3d1: 49 83 c5 b8                   addq    $-0x48, %r13
// 3d5: 49 c1 ed 03                   shrq    $0x3, %r13
// 3d9: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 3dd: 31 c0                         xorl    %eax, %eax
// 3df: e9 cb fc ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 3e4: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_COMPARE_OP_code_body[997] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd6, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xde, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4b, 0x8d, 0x1c, 0xce, 0x48, 0x8b, 0x3b, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc6, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x70, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x20, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x73, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xa8, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4d, 0x8d, 0x2c, 0xc6, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x0f, 0x84, 0x5a, 0x02, 0x00, 0x00, 0x49, 0x89, 0x45, 0x00, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xa2, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x8b, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x4d, 0x8d, 0x2c, 0xc6, 0xe9, 0x22, 0x02, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xed, 0xeb, 0x0e, 0x66, 0x90, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xef, 0x0f, 0x84, 0x38, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x2c, 0xeb, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x27, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x89, 0xd0, 0xf7, 0xd0, 0x4c, 0x63, 0xf8, 0x4b, 0x8b, 0x6c, 0xfe, 0xf0, 0x4f, 0x8b, 0x6c, 0xfe, 0xf8, 0xc1, 0xea, 0x05, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x07, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4f, 0x8d, 0x2c, 0xfe, 0x49, 0x83, 0xc5, 0xf0, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0xba, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x10, 0x74, 0x7d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3d, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xed, 0x4c, 0x0f, 0x44, 0xe0, 0x78, 0x2f, 0x4b, 0x8d, 0x34, 0xfe, 0x48, 0x83, 0xc6, 0xf8, 0x4d, 0x89, 0x65, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x1c, 0x24, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0xcb, 0xfc, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_COMPARE_OP_code_holes[33] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x24c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_RichCompare, 0x0},
    {0x26a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x274, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x290, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2a2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2ba, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2c4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2f2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x312, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x320, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_IsTrue, 0x0},
    {0x33a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x344, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x360, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x372, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x381, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x38b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x3a9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_COMPARE_OP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_COMPARE_OP_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_COMPARE_OP_FLOAT
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_COMPARE_OP_FLOAT.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d7                   movq    (%r15,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 df                   movq    (%r15,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c cf                   leaq    (%r15,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 3a                         je      0xc2 <_JIT_ENTRY+0xc2>
// 88: 4d 89 fe                      movq    %r15, %r14
// 8b: 4d 29 c6                      subq    %r8, %r14
// 8e: 49 83 c6 b8                   addq    $-0x48, %r14
// 92: 49 c1 ee 03                   shrq    $0x3, %r14
// 96: 45 89 70 40                   movl    %r14d, 0x40(%r8)
// 9a: 49 8b 00                      movq    (%r8), %rax
// 9d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009f:  R_X86_64_64  _JIT_TARGET
// a7: 89 c9                         movl    %ecx, %ecx
// a9: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// ad: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b3: 48 83 c4 28                   addq    $0x28, %rsp
// b7: 5b                            popq    %rbx
// b8: 41 5c                         popq    %r12
// ba: 41 5d                         popq    %r13
// bc: 41 5e                         popq    %r14
// be: 41 5f                         popq    %r15
// c0: 5d                            popq    %rbp
// c1: c3                            retq
// c2: 4c 89 5c 24 10                movq    %r11, 0x10(%rsp)
// c7: 4c 89 54 24 20                movq    %r10, 0x20(%rsp)
// cc: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// d1: 4c 89 04 24                   movq    %r8, (%rsp)
// d5: 48 85 c0                      testq   %rax, %rax
// d8: 0f 94 c3                      sete    %bl
// db: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// df: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e3: 48 63 d0                      movslq  %eax, %rdx
// e6: ff 51 08                      callq   *0x8(%rcx)
// e9: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _JIT_OPARG
// f8: 66 85 c0                      testw   %ax, %ax
// fb: 0f 94 c0                      sete    %al
// fe: 84 c3                         testb   %al, %bl
// 100: 0f 84 c7 00 00 00             je      0x1cd <_JIT_ENTRY+0x1cd>
// 106: 49 8b 04 24                   movq    (%r12), %rax
// 10a: 48 85 c0                      testq   %rax, %rax
// 10d: 4c 8b 04 24                   movq    (%rsp), %r8
// 111: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// 116: 7f 26                         jg      0x13e <_JIT_ENTRY+0x13e>
// 118: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011a:  R_X86_64_64  .rodata.str1.1
// 122: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000124:  R_X86_64_64  _Py_NegativeRefcount
// 12c: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 131: 4c 89 e2                      movq    %r12, %rdx
// 134: ff d0                         callq   *%rax
// 136: 4c 8b 04 24                   movq    (%rsp), %r8
// 13a: 49 8b 04 24                   movq    (%r12), %rax
// 13e: 85 c0                         testl   %eax, %eax
// 140: 78 29                         js      0x16b <_JIT_ENTRY+0x16b>
// 142: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000144:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 14c: ff d0                         callq   *%rax
// 14e: 4c 8b 04 24                   movq    (%rsp), %r8
// 152: 49 ff 0c 24                   decq    (%r12)
// 156: 75 13                         jne     0x16b <_JIT_ENTRY+0x16b>
// 158: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015a:  R_X86_64_64  _Py_Dealloc
// 162: 4c 89 e7                      movq    %r12, %rdi
// 165: ff d0                         callq   *%rax
// 167: 4c 8b 04 24                   movq    (%rsp), %r8
// 16b: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 170: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 174: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 179: 48 85 d2                      testq   %rdx, %rdx
// 17c: 74 39                         je      0x1b7 <_JIT_ENTRY+0x1b7>
// 17e: 48 8b 4c 24 20                movq    0x20(%rsp), %rcx
// 183: 4d 8d 34 cf                   leaq    (%r15,%rcx,8), %r14
// 187: 48 89 10                      movq    %rdx, (%rax)
// 18a: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 18e: 48 8b 00                      movq    (%rax), %rax
// 191: 84 c0                         testb   %al, %al
// 193: 0f 84 b0 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 199: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019b:  R_X86_64_64  _Py_HandlePending
// 1a3: 48 89 df                      movq    %rbx, %rdi
// 1a6: ff d0                         callq   *%rax
// 1a8: 4c 8b 04 24                   movq    (%rsp), %r8
// 1ac: 85 c0                         testl   %eax, %eax
// 1ae: 0f 84 95 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 1b4: 4c 89 f0                      movq    %r14, %rax
// 1b7: 4c 29 c0                      subq    %r8, %rax
// 1ba: 48 83 c0 b8                   addq    $-0x48, %rax
// 1be: 48 c1 e8 03                   shrq    $0x3, %rax
// 1c2: 41 89 40 40                   movl    %eax, 0x40(%r8)
// 1c6: 31 c0                         xorl    %eax, %eax
// 1c8: e9 e6 fe ff ff                jmp     0xb3 <_JIT_ENTRY+0xb3>
// 1cd: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1d1: bb 01 00 00 00                movl    $0x1, %ebx
// 1d6: 41 0f 43 dd                   cmovael %r13d, %ebx
// 1da: 45 31 f6                      xorl    %r14d, %r14d
// 1dd: eb 0d                         jmp     0x1ec <_JIT_ENTRY+0x1ec>
// 1df: 90                            nop
// 1e0: 49 ff c6                      incq    %r14
// 1e3: 4c 39 f3                      cmpq    %r14, %rbx
// 1e6: 0f 84 1a ff ff ff             je      0x106 <_JIT_ENTRY+0x106>
// 1ec: 4e 8b 6c f5 00                movq    (%rbp,%r14,8), %r13
// 1f1: 49 8b 45 00                   movq    (%r13), %rax
// 1f5: 48 85 c0                      testq   %rax, %rax
// 1f8: 7e 06                         jle     0x200 <_JIT_ENTRY+0x200>
// 1fa: 85 c0                         testl   %eax, %eax
// 1fc: 78 e2                         js      0x1e0 <_JIT_ENTRY+0x1e0>
// 1fe: eb 26                         jmp     0x226 <_JIT_ENTRY+0x226>
// 200: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1
// 20a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 20f: 4c 89 ea                      movq    %r13, %rdx
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: ff d0                         callq   *%rax
// 21e: 49 8b 45 00                   movq    (%r13), %rax
// 222: 85 c0                         testl   %eax, %eax
// 224: 78 ba                         js      0x1e0 <_JIT_ENTRY+0x1e0>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 230: ff d0                         callq   *%rax
// 232: 49 ff 4d 00                   decq    (%r13)
// 236: 75 a8                         jne     0x1e0 <_JIT_ENTRY+0x1e0>
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: ff d0                         callq   *%rax
// 247: eb 97                         jmp     0x1e0 <_JIT_ENTRY+0x1e0>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _JIT_OPARG
// 253: f7 d0                         notl    %eax
// 255: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 25a: 48 63 d8                      movslq  %eax, %rbx
// 25d: 4d 8b 64 df f0                movq    -0x10(%r15,%rbx,8), %r12
// 262: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000264:  R_X86_64_64  PyFloat_Type
// 26c: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 271: 0f 85 14 fe ff ff             jne     0x8b <_JIT_ENTRY+0x8b>
// 277: 4d 8b 6c df f8                movq    -0x8(%r15,%rbx,8), %r13
// 27c: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 280: 0f 85 05 fe ff ff             jne     0x8b <_JIT_ENTRY+0x8b>
// 286: f2 41 0f 10 44 24 10          movsd   0x10(%r12), %xmm0       # xmm0 = mem[0],zero
// 28d: f2 0f 11 44 24 10             movsd   %xmm0, 0x10(%rsp)
// 293: f2 41 0f 10 45 10             movsd   0x10(%r13), %xmm0       # xmm0 = mem[0],zero
// 299: f2 0f 11 44 24 08             movsd   %xmm0, 0x8(%rsp)
// 29f: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 2a5: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 00000000000002a7:  R_X86_64_64  PyInterpreterState_Get
// 2af: 75 27                         jne     0x2d8 <_JIT_ENTRY+0x2d8>
// 2b1: 41 ff d6                      callq   *%r14
// 2b4: 4c 8b 04 24                   movq    (%rsp), %r8
// 2b8: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 2bf: 49 ff 0c 24                   decq    (%r12)
// 2c3: 75 13                         jne     0x2d8 <_JIT_ENTRY+0x2d8>
// 2c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c7:  R_X86_64_64  _PyFloat_ExactDealloc
// 2cf: 4c 89 e7                      movq    %r12, %rdi
// 2d2: ff d0                         callq   *%rax
// 2d4: 4c 8b 04 24                   movq    (%rsp), %r8
// 2d8: 4d 8d 24 df                   leaq    (%r15,%rbx,8), %r12
// 2dc: 49 83 c4 f8                   addq    $-0x8, %r12
// 2e0: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 2e5: 75 27                         jne     0x30e <_JIT_ENTRY+0x30e>
// 2e7: 41 ff d6                      callq   *%r14
// 2ea: 4c 8b 04 24                   movq    (%rsp), %r8
// 2ee: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 2f5: 49 ff 4d 00                   decq    (%r13)
// 2f9: 75 13                         jne     0x30e <_JIT_ENTRY+0x30e>
// 2fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fd:  R_X86_64_64  _PyFloat_ExactDealloc
// 305: 4c 89 ef                      movq    %r13, %rdi
// 308: ff d0                         callq   *%rax
// 30a: 4c 8b 04 24                   movq    (%rsp), %r8
// 30e: 31 c0                         xorl    %eax, %eax
// 310: f2 0f 10 44 24 10             movsd   0x10(%rsp), %xmm0       # xmm0 = mem[0],zero
// 316: f2 0f 10 4c 24 08             movsd   0x8(%rsp), %xmm1        # xmm1 = mem[0],zero
// 31c: 66 0f 2e c1                   ucomisd %xmm1, %xmm0
// 320: 0f 93 c0                      setae   %al
// 323: 01 c0                         addl    %eax, %eax
// 325: 31 c9                         xorl    %ecx, %ecx
// 327: 66 0f 2e c8                   ucomisd %xmm0, %xmm1
// 32b: 0f 93 c1                      setae   %cl
// 32e: 09 c1                         orl     %eax, %ecx
// 330: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000332:  R_X86_64_64  _JIT_OPARG
// 33a: 0f b7 c0                      movzwl  %ax, %eax
// 33d: 0f a3 c8                      btl     %ecx, %eax
// 340: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000342:  R_X86_64_64  _Py_FalseStruct
// 34a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000034c:  R_X86_64_64  _Py_TrueStruct
// 354: 48 0f 43 d1                   cmovaeq %rcx, %rdx
// 358: f7 d0                         notl    %eax
// 35a: 48 98                         cltq
// 35c: 49 89 54 c7 f0                movq    %rdx, -0x10(%r15,%rax,8)
// 361: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000363:  R_X86_64_64  _JIT_CONTINUE
// 36b: 4c 89 c7                      movq    %r8, %rdi
// 36e: 4c 89 e6                      movq    %r12, %rsi
// 371: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 376: 48 83 c4 28                   addq    $0x28, %rsp
// 37a: 5b                            popq    %rbx
// 37b: 41 5c                         popq    %r12
// 37d: 41 5d                         popq    %r13
// 37f: 41 5e                         popq    %r14
// 381: 41 5f                         popq    %r15
// 383: 5d                            popq    %rbp
// 384: ff e0                         jmpq    *%rax
// 386: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_COMPARE_OP_FLOAT_code_body[903] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd7, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xdf, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xcf, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x3a, 0x4d, 0x89, 0xfe, 0x4d, 0x29, 0xc6, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x70, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x10, 0x4c, 0x89, 0x54, 0x24, 0x20, 0x48, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x4c, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x74, 0x39, 0x48, 0x8b, 0x4c, 0x24, 0x20, 0x4d, 0x8d, 0x34, 0xcf, 0x48, 0x89, 0x10, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xb0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x84, 0x95, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf0, 0x4c, 0x29, 0xc0, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x40, 0x40, 0x31, 0xc0, 0xe9, 0xe6, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xdd, 0x45, 0x31, 0xf6, 0xeb, 0x0d, 0x90, 0x49, 0xff, 0xc6, 0x4c, 0x39, 0xf3, 0x0f, 0x84, 0x1a, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xf5, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xd8, 0x4d, 0x8b, 0x64, 0xdf, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x14, 0xfe, 0xff, 0xff, 0x4d, 0x8b, 0x6c, 0xdf, 0xf8, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x05, 0xfe, 0xff, 0xff, 0xf2, 0x41, 0x0f, 0x10, 0x44, 0x24, 0x10, 0xf2, 0x0f, 0x11, 0x44, 0x24, 0x10, 0xf2, 0x41, 0x0f, 0x10, 0x45, 0x10, 0xf2, 0x0f, 0x11, 0x44, 0x24, 0x08, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x27, 0x41, 0xff, 0xd6, 0x4c, 0x8b, 0x04, 0x24, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x24, 0xdf, 0x49, 0x83, 0xc4, 0xf8, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x27, 0x41, 0xff, 0xd6, 0x4c, 0x8b, 0x04, 0x24, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x31, 0xc0, 0xf2, 0x0f, 0x10, 0x44, 0x24, 0x10, 0xf2, 0x0f, 0x10, 0x4c, 0x24, 0x08, 0x66, 0x0f, 0x2e, 0xc1, 0x0f, 0x93, 0xc0, 0x01, 0xc0, 0x31, 0xc9, 0x66, 0x0f, 0x2e, 0xc8, 0x0f, 0x93, 0xc1, 0x09, 0xc1, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x0f, 0xa3, 0xc8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x43, 0xd1, 0xf7, 0xd0, 0x48, 0x98, 0x49, 0x89, 0x54, 0xc7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xc7, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_COMPARE_OP_FLOAT_code_holes[23] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9f, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x11a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x124, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_Type, 0x0},
    {0x2a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x2fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x332, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x342, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x34c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x363, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_COMPARE_OP_FLOAT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_COMPARE_OP_FLOAT_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_COMPARE_OP_INT
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_COMPARE_OP_INT.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d7                   movq    (%r15,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 df                   movq    (%r15,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4b 8d 1c cf                   leaq    (%r15,%r9,8), %rbx
// 79: 48 8b 3b                      movq    (%rbx), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 3a                         je      0xc1 <_JIT_ENTRY+0xc1>
// 87: 4c 89 fb                      movq    %r15, %rbx
// 8a: 4c 29 c3                      subq    %r8, %rbx
// 8d: 48 83 c3 b8                   addq    $-0x48, %rbx
// 91: 48 c1 eb 03                   shrq    $0x3, %rbx
// 95: 41 89 58 40                   movl    %ebx, 0x40(%r8)
// 99: 49 8b 00                      movq    (%r8), %rax
// 9c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009e:  R_X86_64_64  _JIT_TARGET
// a6: 89 c9                         movl    %ecx, %ecx
// a8: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// ac: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b2: 48 83 c4 28                   addq    $0x28, %rsp
// b6: 5b                            popq    %rbx
// b7: 41 5c                         popq    %r12
// b9: 41 5d                         popq    %r13
// bb: 41 5e                         popq    %r14
// bd: 41 5f                         popq    %r15
// bf: 5d                            popq    %rbp
// c0: c3                            retq
// c1: 4c 89 5c 24 10                movq    %r11, 0x10(%rsp)
// c6: 4c 89 54 24 20                movq    %r10, 0x20(%rsp)
// cb: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// d0: 4c 89 04 24                   movq    %r8, (%rsp)
// d4: 48 85 c0                      testq   %rax, %rax
// d7: 40 0f 94 c5                   sete    %bpl
// db: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// df: 48 8d 73 08                   leaq    0x8(%rbx), %rsi
// e3: 48 63 d0                      movslq  %eax, %rdx
// e6: ff 51 08                      callq   *0x8(%rcx)
// e9: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _JIT_OPARG
// f8: 66 85 c0                      testw   %ax, %ax
// fb: 0f 94 c0                      sete    %al
// fe: 40 84 c5                      testb   %al, %bpl
// 101: 0f 84 c7 00 00 00             je      0x1ce <_JIT_ENTRY+0x1ce>
// 107: 49 8b 04 24                   movq    (%r12), %rax
// 10b: 48 85 c0                      testq   %rax, %rax
// 10e: 4c 8b 04 24                   movq    (%rsp), %r8
// 112: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// 117: 7f 26                         jg      0x13f <_JIT_ENTRY+0x13f>
// 119: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011b:  R_X86_64_64  .rodata.str1.1
// 123: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000125:  R_X86_64_64  _Py_NegativeRefcount
// 12d: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 132: 4c 89 e2                      movq    %r12, %rdx
// 135: ff d0                         callq   *%rax
// 137: 4c 8b 04 24                   movq    (%rsp), %r8
// 13b: 49 8b 04 24                   movq    (%r12), %rax
// 13f: 85 c0                         testl   %eax, %eax
// 141: 78 29                         js      0x16c <_JIT_ENTRY+0x16c>
// 143: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000145:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 14d: ff d0                         callq   *%rax
// 14f: 4c 8b 04 24                   movq    (%rsp), %r8
// 153: 49 ff 0c 24                   decq    (%r12)
// 157: 75 13                         jne     0x16c <_JIT_ENTRY+0x16c>
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  _Py_Dealloc
// 163: 4c 89 e7                      movq    %r12, %rdi
// 166: ff d0                         callq   *%rax
// 168: 4c 8b 04 24                   movq    (%rsp), %r8
// 16c: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 171: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 175: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 17a: 48 85 d2                      testq   %rdx, %rdx
// 17d: 74 39                         je      0x1b8 <_JIT_ENTRY+0x1b8>
// 17f: 48 8b 4c 24 20                movq    0x20(%rsp), %rcx
// 184: 49 8d 1c cf                   leaq    (%r15,%rcx,8), %rbx
// 188: 48 89 10                      movq    %rdx, (%rax)
// 18b: 49 8b 46 10                   movq    0x10(%r14), %rax
// 18f: 48 8b 00                      movq    (%rax), %rax
// 192: 84 c0                         testb   %al, %al
// 194: 0f 84 af 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 19a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019c:  R_X86_64_64  _Py_HandlePending
// 1a4: 4c 89 f7                      movq    %r14, %rdi
// 1a7: ff d0                         callq   *%rax
// 1a9: 4c 8b 04 24                   movq    (%rsp), %r8
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 0f 84 94 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 1b5: 48 89 d8                      movq    %rbx, %rax
// 1b8: 4c 29 c0                      subq    %r8, %rax
// 1bb: 48 83 c0 b8                   addq    $-0x48, %rax
// 1bf: 48 c1 e8 03                   shrq    $0x3, %rax
// 1c3: 41 89 40 40                   movl    %eax, 0x40(%r8)
// 1c7: 31 c0                         xorl    %eax, %eax
// 1c9: e9 e4 fe ff ff                jmp     0xb2 <_JIT_ENTRY+0xb2>
// 1ce: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1d2: bd 01 00 00 00                movl    $0x1, %ebp
// 1d7: 41 0f 43 ed                   cmovael %r13d, %ebp
// 1db: 45 31 f6                      xorl    %r14d, %r14d
// 1de: eb 0c                         jmp     0x1ec <_JIT_ENTRY+0x1ec>
// 1e0: 49 ff c6                      incq    %r14
// 1e3: 4c 39 f5                      cmpq    %r14, %rbp
// 1e6: 0f 84 1b ff ff ff             je      0x107 <_JIT_ENTRY+0x107>
// 1ec: 4e 8b 2c f3                   movq    (%rbx,%r14,8), %r13
// 1f0: 49 8b 45 00                   movq    (%r13), %rax
// 1f4: 48 85 c0                      testq   %rax, %rax
// 1f7: 7e 07                         jle     0x200 <_JIT_ENTRY+0x200>
// 1f9: 85 c0                         testl   %eax, %eax
// 1fb: 78 e3                         js      0x1e0 <_JIT_ENTRY+0x1e0>
// 1fd: eb 27                         jmp     0x226 <_JIT_ENTRY+0x226>
// 1ff: 90                            nop
// 200: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1
// 20a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 20f: 4c 89 ea                      movq    %r13, %rdx
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: ff d0                         callq   *%rax
// 21e: 49 8b 45 00                   movq    (%r13), %rax
// 222: 85 c0                         testl   %eax, %eax
// 224: 78 ba                         js      0x1e0 <_JIT_ENTRY+0x1e0>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 230: ff d0                         callq   *%rax
// 232: 49 ff 4d 00                   decq    (%r13)
// 236: 75 a8                         jne     0x1e0 <_JIT_ENTRY+0x1e0>
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: ff d0                         callq   *%rax
// 247: eb 97                         jmp     0x1e0 <_JIT_ENTRY+0x1e0>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _JIT_OPARG
// 253: f7 d0                         notl    %eax
// 255: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 25a: 4c 63 f0                      movslq  %eax, %r14
// 25d: 4f 8b 64 f7 f0                movq    -0x10(%r15,%r14,8), %r12
// 262: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000264:  R_X86_64_64  PyLong_Type
// 26c: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 271: 0f 85 13 fe ff ff             jne     0x8a <_JIT_ENTRY+0x8a>
// 277: 4f 8b 6c f7 f8                movq    -0x8(%r15,%r14,8), %r13
// 27c: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 280: 0f 85 04 fe ff ff             jne     0x8a <_JIT_ENTRY+0x8a>
// 286: 49 8b 6c 24 10                movq    0x10(%r12), %rbp
// 28b: 48 83 fd 0f                   cmpq    $0xf, %rbp
// 28f: 0f 87 f5 fd ff ff             ja      0x8a <_JIT_ENTRY+0x8a>
// 295: 49 8b 45 10                   movq    0x10(%r13), %rax
// 299: 48 83 f8 0f                   cmpq    $0xf, %rax
// 29d: 0f 87 e7 fd ff ff             ja      0x8a <_JIT_ENTRY+0x8a>
// 2a3: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 2a8: 41 8b 5c 24 18                movl    0x18(%r12), %ebx
// 2ad: 41 8b 45 18                   movl    0x18(%r13), %eax
// 2b1: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 2b6: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 2bc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002be:  R_X86_64_64  PyInterpreterState_Get
// 2c6: 75 44                         jne     0x30c <_JIT_ENTRY+0x30c>
// 2c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ca:  R_X86_64_64  PyInterpreterState_Get
// 2d2: ff d0                         callq   *%rax
// 2d4: 4c 8b 04 24                   movq    (%rsp), %r8
// 2d8: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 2df: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002e1:  R_X86_64_64  PyInterpreterState_Get
// 2e9: 49 ff 0c 24                   decq    (%r12)
// 2ed: 75 1d                         jne     0x30c <_JIT_ENTRY+0x30c>
// 2ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f1:  R_X86_64_64  PyObject_Free
// 2f9: 4c 89 e7                      movq    %r12, %rdi
// 2fc: ff d0                         callq   *%rax
// 2fe: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000300:  R_X86_64_64  PyInterpreterState_Get
// 308: 4c 8b 04 24                   movq    (%rsp), %r8
// 30c: 4f 8d 24 f7                   leaq    (%r15,%r14,8), %r12
// 310: 49 83 c4 f8                   addq    $-0x8, %r12
// 314: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 319: 75 26                         jne     0x341 <_JIT_ENTRY+0x341>
// 31b: ff d1                         callq   *%rcx
// 31d: 4c 8b 04 24                   movq    (%rsp), %r8
// 321: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 328: 49 ff 4d 00                   decq    (%r13)
// 32c: 75 13                         jne     0x341 <_JIT_ENTRY+0x341>
// 32e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000330:  R_X86_64_64  PyObject_Free
// 338: 4c 89 ef                      movq    %r13, %rdi
// 33b: ff d0                         callq   *%rax
// 33d: 4c 8b 04 24                   movq    (%rsp), %r8
// 341: 83 e5 03                      andl    $0x3, %ebp
// 344: b8 01 00 00 00                movl    $0x1, %eax
// 349: b9 01 00 00 00                movl    $0x1, %ecx
// 34e: 48 29 e9                      subq    %rbp, %rcx
// 351: 48 0f af cb                   imulq   %rbx, %rcx
// 355: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 35a: 83 e2 03                      andl    $0x3, %edx
// 35d: 48 29 d0                      subq    %rdx, %rax
// 360: 48 0f af 44 24 08             imulq   0x8(%rsp), %rax
// 366: 31 d2                         xorl    %edx, %edx
// 368: 31 f6                         xorl    %esi, %esi
// 36a: 48 39 c1                      cmpq    %rax, %rcx
// 36d: 0f 9d c2                      setge   %dl
// 370: 40 0f 9e c6                   setle   %sil
// 374: 01 d2                         addl    %edx, %edx
// 376: 09 d6                         orl     %edx, %esi
// 378: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000037a:  R_X86_64_64  _JIT_OPARG
// 382: 0f b7 c0                      movzwl  %ax, %eax
// 385: 0f a3 f0                      btl     %esi, %eax
// 388: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000038a:  R_X86_64_64  _Py_FalseStruct
// 392: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000394:  R_X86_64_64  _Py_TrueStruct
// 39c: 48 0f 43 d1                   cmovaeq %rcx, %rdx
// 3a0: f7 d0                         notl    %eax
// 3a2: 48 98                         cltq
// 3a4: 49 89 54 c7 f0                movq    %rdx, -0x10(%r15,%rax,8)
// 3a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003ab:  R_X86_64_64  _JIT_CONTINUE
// 3b3: 4c 89 c7                      movq    %r8, %rdi
// 3b6: 4c 89 e6                      movq    %r12, %rsi
// 3b9: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 3be: 48 83 c4 28                   addq    $0x28, %rsp
// 3c2: 5b                            popq    %rbx
// 3c3: 41 5c                         popq    %r12
// 3c5: 41 5d                         popq    %r13
// 3c7: 41 5e                         popq    %r14
// 3c9: 41 5f                         popq    %r15
// 3cb: 5d                            popq    %rbp
// 3cc: ff e0                         jmpq    *%rax
// 3ce: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_COMPARE_OP_INT_code_body[975] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd7, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xdf, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4b, 0x8d, 0x1c, 0xcf, 0x48, 0x8b, 0x3b, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x3a, 0x4c, 0x89, 0xfb, 0x4c, 0x29, 0xc3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x58, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x10, 0x4c, 0x89, 0x54, 0x24, 0x20, 0x48, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x73, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x4c, 0x8b, 0x04, 0x24, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x74, 0x39, 0x48, 0x8b, 0x4c, 0x24, 0x20, 0x49, 0x8d, 0x1c, 0xcf, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xaf, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x84, 0x94, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd8, 0x4c, 0x29, 0xc0, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x40, 0x40, 0x31, 0xc0, 0xe9, 0xe4, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xed, 0x45, 0x31, 0xf6, 0xeb, 0x0c, 0x49, 0xff, 0xc6, 0x4c, 0x39, 0xf5, 0x0f, 0x84, 0x1b, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x2c, 0xf3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x27, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xf0, 0x4f, 0x8b, 0x64, 0xf7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x13, 0xfe, 0xff, 0xff, 0x4f, 0x8b, 0x6c, 0xf7, 0xf8, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x04, 0xfe, 0xff, 0xff, 0x49, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x83, 0xfd, 0x0f, 0x0f, 0x87, 0xf5, 0xfd, 0xff, 0xff, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x83, 0xf8, 0x0f, 0x0f, 0x87, 0xe7, 0xfd, 0xff, 0xff, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0x8b, 0x5c, 0x24, 0x18, 0x41, 0x8b, 0x45, 0x18, 0x48, 0x89, 0x44, 0x24, 0x08, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x44, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x1d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x04, 0x24, 0x4f, 0x8d, 0x24, 0xf7, 0x49, 0x83, 0xc4, 0xf8, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x26, 0xff, 0xd1, 0x4c, 0x8b, 0x04, 0x24, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x83, 0xe5, 0x03, 0xb8, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x48, 0x29, 0xe9, 0x48, 0x0f, 0xaf, 0xcb, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x83, 0xe2, 0x03, 0x48, 0x29, 0xd0, 0x48, 0x0f, 0xaf, 0x44, 0x24, 0x08, 0x31, 0xd2, 0x31, 0xf6, 0x48, 0x39, 0xc1, 0x0f, 0x9d, 0xc2, 0x40, 0x0f, 0x9e, 0xc6, 0x01, 0xd2, 0x09, 0xd6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x0f, 0xa3, 0xf0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x43, 0xd1, 0xf7, 0xd0, 0x48, 0x98, 0x49, 0x89, 0x54, 0xc7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xc7, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_COMPARE_OP_INT_code_holes[26] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9e, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x11b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x125, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2be, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2e1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2f1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x300, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x330, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x37a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x38a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x394, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x3ab, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_COMPARE_OP_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_COMPARE_OP_INT_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_COMPARE_OP_STR
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_COMPARE_OP_STR.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d7                   movq    (%r15,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 df                   movq    (%r15,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c cf                   leaq    (%r15,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 3a                         je      0xc2 <_JIT_ENTRY+0xc2>
// 88: 4d 89 fe                      movq    %r15, %r14
// 8b: 4d 29 c6                      subq    %r8, %r14
// 8e: 49 83 c6 b8                   addq    $-0x48, %r14
// 92: 49 c1 ee 03                   shrq    $0x3, %r14
// 96: 45 89 70 40                   movl    %r14d, 0x40(%r8)
// 9a: 49 8b 00                      movq    (%r8), %rax
// 9d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009f:  R_X86_64_64  _JIT_TARGET
// a7: 89 c9                         movl    %ecx, %ecx
// a9: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// ad: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b3: 48 83 c4 28                   addq    $0x28, %rsp
// b7: 5b                            popq    %rbx
// b8: 41 5c                         popq    %r12
// ba: 41 5d                         popq    %r13
// bc: 41 5e                         popq    %r14
// be: 41 5f                         popq    %r15
// c0: 5d                            popq    %rbp
// c1: c3                            retq
// c2: 4c 89 5c 24 20                movq    %r11, 0x20(%rsp)
// c7: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// cc: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// d1: 4c 89 04 24                   movq    %r8, (%rsp)
// d5: 48 85 c0                      testq   %rax, %rax
// d8: 0f 94 c3                      sete    %bl
// db: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// df: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e3: 48 63 d0                      movslq  %eax, %rdx
// e6: ff 51 08                      callq   *0x8(%rcx)
// e9: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _JIT_OPARG
// f8: 66 85 c0                      testw   %ax, %ax
// fb: 0f 94 c0                      sete    %al
// fe: 84 c3                         testb   %al, %bl
// 100: 0f 84 c7 00 00 00             je      0x1cd <_JIT_ENTRY+0x1cd>
// 106: 49 8b 04 24                   movq    (%r12), %rax
// 10a: 48 85 c0                      testq   %rax, %rax
// 10d: 4c 8b 04 24                   movq    (%rsp), %r8
// 111: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 116: 7f 26                         jg      0x13e <_JIT_ENTRY+0x13e>
// 118: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011a:  R_X86_64_64  .rodata.str1.1
// 122: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000124:  R_X86_64_64  _Py_NegativeRefcount
// 12c: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 131: 4c 89 e2                      movq    %r12, %rdx
// 134: ff d0                         callq   *%rax
// 136: 4c 8b 04 24                   movq    (%rsp), %r8
// 13a: 49 8b 04 24                   movq    (%r12), %rax
// 13e: 85 c0                         testl   %eax, %eax
// 140: 78 29                         js      0x16b <_JIT_ENTRY+0x16b>
// 142: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000144:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 14c: ff d0                         callq   *%rax
// 14e: 4c 8b 04 24                   movq    (%rsp), %r8
// 152: 49 ff 0c 24                   decq    (%r12)
// 156: 75 13                         jne     0x16b <_JIT_ENTRY+0x16b>
// 158: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015a:  R_X86_64_64  _Py_Dealloc
// 162: 4c 89 e7                      movq    %r12, %rdi
// 165: ff d0                         callq   *%rax
// 167: 4c 8b 04 24                   movq    (%rsp), %r8
// 16b: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 170: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 174: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 179: 48 85 d2                      testq   %rdx, %rdx
// 17c: 74 39                         je      0x1b7 <_JIT_ENTRY+0x1b7>
// 17e: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 183: 4d 8d 34 cf                   leaq    (%r15,%rcx,8), %r14
// 187: 48 89 10                      movq    %rdx, (%rax)
// 18a: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 18e: 48 8b 00                      movq    (%rax), %rax
// 191: 84 c0                         testb   %al, %al
// 193: 0f 84 b0 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 199: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019b:  R_X86_64_64  _Py_HandlePending
// 1a3: 48 89 df                      movq    %rbx, %rdi
// 1a6: ff d0                         callq   *%rax
// 1a8: 4c 8b 04 24                   movq    (%rsp), %r8
// 1ac: 85 c0                         testl   %eax, %eax
// 1ae: 0f 84 95 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 1b4: 4c 89 f0                      movq    %r14, %rax
// 1b7: 4c 29 c0                      subq    %r8, %rax
// 1ba: 48 83 c0 b8                   addq    $-0x48, %rax
// 1be: 48 c1 e8 03                   shrq    $0x3, %rax
// 1c2: 41 89 40 40                   movl    %eax, 0x40(%r8)
// 1c6: 31 c0                         xorl    %eax, %eax
// 1c8: e9 e6 fe ff ff                jmp     0xb3 <_JIT_ENTRY+0xb3>
// 1cd: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1d1: bb 01 00 00 00                movl    $0x1, %ebx
// 1d6: 41 0f 43 dd                   cmovael %r13d, %ebx
// 1da: 45 31 f6                      xorl    %r14d, %r14d
// 1dd: eb 0d                         jmp     0x1ec <_JIT_ENTRY+0x1ec>
// 1df: 90                            nop
// 1e0: 49 ff c6                      incq    %r14
// 1e3: 4c 39 f3                      cmpq    %r14, %rbx
// 1e6: 0f 84 1a ff ff ff             je      0x106 <_JIT_ENTRY+0x106>
// 1ec: 4e 8b 6c f5 00                movq    (%rbp,%r14,8), %r13
// 1f1: 49 8b 45 00                   movq    (%r13), %rax
// 1f5: 48 85 c0                      testq   %rax, %rax
// 1f8: 7e 06                         jle     0x200 <_JIT_ENTRY+0x200>
// 1fa: 85 c0                         testl   %eax, %eax
// 1fc: 78 e2                         js      0x1e0 <_JIT_ENTRY+0x1e0>
// 1fe: eb 26                         jmp     0x226 <_JIT_ENTRY+0x226>
// 200: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1
// 20a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 20f: 4c 89 ea                      movq    %r13, %rdx
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: ff d0                         callq   *%rax
// 21e: 49 8b 45 00                   movq    (%r13), %rax
// 222: 85 c0                         testl   %eax, %eax
// 224: 78 ba                         js      0x1e0 <_JIT_ENTRY+0x1e0>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 230: ff d0                         callq   *%rax
// 232: 49 ff 4d 00                   decq    (%r13)
// 236: 75 a8                         jne     0x1e0 <_JIT_ENTRY+0x1e0>
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: ff d0                         callq   *%rax
// 247: eb 97                         jmp     0x1e0 <_JIT_ENTRY+0x1e0>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _JIT_OPARG
// 253: f7 d0                         notl    %eax
// 255: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 25a: 48 63 d8                      movslq  %eax, %rbx
// 25d: 4d 8b 6c df f0                movq    -0x10(%r15,%rbx,8), %r13
// 262: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000264:  R_X86_64_64  PyUnicode_Type
// 26c: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 270: 0f 85 15 fe ff ff             jne     0x8b <_JIT_ENTRY+0x8b>
// 276: 4d 8b 64 df f8                movq    -0x8(%r15,%rbx,8), %r12
// 27b: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 280: 0f 85 05 fe ff ff             jne     0x8b <_JIT_ENTRY+0x8b>
// 286: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000288:  R_X86_64_64  _PyUnicode_Equal
// 290: 4c 89 ef                      movq    %r13, %rdi
// 293: 4c 89 e6                      movq    %r12, %rsi
// 296: ff d0                         callq   *%rax
// 298: 89 c5                         movl    %eax, %ebp
// 29a: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 29f: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 00000000000002a1:  R_X86_64_64  PyInterpreterState_Get
// 2a9: 75 1f                         jne     0x2ca <_JIT_ENTRY+0x2ca>
// 2ab: 41 ff d6                      callq   *%r14
// 2ae: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 2b5: 49 ff 4d 00                   decq    (%r13)
// 2b9: 75 0f                         jne     0x2ca <_JIT_ENTRY+0x2ca>
// 2bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bd:  R_X86_64_64  _PyUnicode_ExactDealloc
// 2c5: 4c 89 ef                      movq    %r13, %rdi
// 2c8: ff d0                         callq   *%rax
// 2ca: 4d 8d 2c df                   leaq    (%r15,%rbx,8), %r13
// 2ce: 49 83 c5 f8                   addq    $-0x8, %r13
// 2d2: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 2d8: 75 1f                         jne     0x2f9 <_JIT_ENTRY+0x2f9>
// 2da: 41 ff d6                      callq   *%r14
// 2dd: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 2e4: 49 ff 0c 24                   decq    (%r12)
// 2e8: 75 0f                         jne     0x2f9 <_JIT_ENTRY+0x2f9>
// 2ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ec:  R_X86_64_64  _PyUnicode_ExactDealloc
// 2f4: 4c 89 e7                      movq    %r12, %rdi
// 2f7: ff d0                         callq   *%rax
// 2f9: 83 c5 07                      addl    $0x7, %ebp
// 2fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fe:  R_X86_64_64  _JIT_OPARG
// 306: 0f b7 c0                      movzwl  %ax, %eax
// 309: 85 c5                         testl   %eax, %ebp
// 30b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000030d:  R_X86_64_64  _Py_FalseStruct
// 315: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000317:  R_X86_64_64  _Py_TrueStruct
// 31f: 48 0f 44 d1                   cmoveq  %rcx, %rdx
// 323: f7 d0                         notl    %eax
// 325: 48 98                         cltq
// 327: 49 89 54 c7 f0                movq    %rdx, -0x10(%r15,%rax,8)
// 32c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032e:  R_X86_64_64  _JIT_CONTINUE
// 336: 48 8b 3c 24                   movq    (%rsp), %rdi
// 33a: 4c 89 ee                      movq    %r13, %rsi
// 33d: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 342: 48 83 c4 28                   addq    $0x28, %rsp
// 346: 5b                            popq    %rbx
// 347: 41 5c                         popq    %r12
// 349: 41 5d                         popq    %r13
// 34b: 41 5e                         popq    %r14
// 34d: 41 5f                         popq    %r15
// 34f: 5d                            popq    %rbp
// 350: ff e0                         jmpq    *%rax
// 352: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_COMPARE_OP_STR_code_body[851] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd7, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xdf, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xcf, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x3a, 0x4d, 0x89, 0xfe, 0x4d, 0x29, 0xc6, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x70, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x20, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x4c, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x85, 0xd2, 0x74, 0x39, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x4d, 0x8d, 0x34, 0xcf, 0x48, 0x89, 0x10, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xb0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x4c, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x84, 0x95, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf0, 0x4c, 0x29, 0xc0, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x40, 0x40, 0x31, 0xc0, 0xe9, 0xe6, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xdd, 0x45, 0x31, 0xf6, 0xeb, 0x0d, 0x90, 0x49, 0xff, 0xc6, 0x4c, 0x39, 0xf3, 0x0f, 0x84, 0x1a, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xf5, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xd8, 0x4d, 0x8b, 0x6c, 0xdf, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x15, 0xfe, 0xff, 0xff, 0x4d, 0x8b, 0x64, 0xdf, 0xf8, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x05, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x1f, 0x41, 0xff, 0xd6, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x8d, 0x2c, 0xdf, 0x49, 0x83, 0xc5, 0xf8, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x1f, 0x41, 0xff, 0xd6, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x83, 0xc5, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x85, 0xc5, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xd1, 0xf7, 0xd0, 0x48, 0x98, 0x49, 0x89, 0x54, 0xc7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xee, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_COMPARE_OP_STR_code_holes[24] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9f, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x11a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x124, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x288, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_Equal, 0x0},
    {0x2a1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_ExactDealloc, 0x0},
    {0x2ec, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_ExactDealloc, 0x0},
    {0x2fe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x30d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x317, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x32e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_COMPARE_OP_STR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_COMPARE_OP_STR_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_CONTAINS_OP
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_CONTAINS_OP.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d7                   movq    (%r15,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 df                   movq    (%r15,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c cf                   leaq    (%r15,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 c7                      subq    %r8, %r15
// 8b: 49 83 c7 b8                   addq    $-0x48, %r15
// 8f: 49 c1 ef 03                   shrq    $0x3, %r15
// 93: 45 89 78 40                   movl    %r15d, 0x40(%r8)
// 97: 49 8b 00                      movq    (%r8), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 5c 24 18                movq    %r11, 0x18(%rsp)
// c4: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// c9: 48 89 14 24                   movq    %rdx, (%rsp)
// cd: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 a7 00 00 00             je      0x1aa <_JIT_ENTRY+0x1aa>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 135: 4c 8b 34 24                   movq    (%rsp), %r14
// 139: 78 21                         js      0x15c <_JIT_ENTRY+0x15c>
// 13b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 145: ff d0                         callq   *%rax
// 147: 49 ff 0c 24                   decq    (%r12)
// 14b: 75 0f                         jne     0x15c <_JIT_ENTRY+0x15c>
// 14d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014f:  R_X86_64_64  _Py_Dealloc
// 157: 4c 89 e7                      movq    %r12, %rdi
// 15a: ff d0                         callq   *%rax
// 15c: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 161: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 165: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 16a: 48 85 c9                      testq   %rcx, %rcx
// 16d: 0f 84 e7 01 00 00             je      0x35a <_JIT_ENTRY+0x35a>
// 173: 48 89 08                      movq    %rcx, (%rax)
// 176: 49 8b 46 10                   movq    0x10(%r14), %rax
// 17a: 48 8b 00                      movq    (%rax), %rax
// 17d: 84 c0                         testb   %al, %al
// 17f: 0f 84 a4 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 185: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000187:  R_X86_64_64  _Py_HandlePending
// 18f: 4c 89 f7                      movq    %r14, %rdi
// 192: ff d0                         callq   *%rax
// 194: 85 c0                         testl   %eax, %eax
// 196: 0f 84 8d 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 19c: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1a1: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 1a5: e9 b0 01 00 00                jmp     0x35a <_JIT_ENTRY+0x35a>
// 1aa: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1ae: bb 01 00 00 00                movl    $0x1, %ebx
// 1b3: 41 0f 43 dd                   cmovael %r13d, %ebx
// 1b7: 45 31 f6                      xorl    %r14d, %r14d
// 1ba: eb 10                         jmp     0x1cc <_JIT_ENTRY+0x1cc>
// 1bc: 0f 1f 40 00                   nopl    (%rax)
// 1c0: 49 ff c6                      incq    %r14
// 1c3: 4c 39 f3                      cmpq    %r14, %rbx
// 1c6: 0f 84 37 ff ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 1cc: 4e 8b 6c f5 00                movq    (%rbp,%r14,8), %r13
// 1d1: 49 8b 45 00                   movq    (%r13), %rax
// 1d5: 48 85 c0                      testq   %rax, %rax
// 1d8: 7e 06                         jle     0x1e0 <_JIT_ENTRY+0x1e0>
// 1da: 85 c0                         testl   %eax, %eax
// 1dc: 78 e2                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 1de: eb 26                         jmp     0x206 <_JIT_ENTRY+0x206>
// 1e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e2:  R_X86_64_64  .rodata.str1.1
// 1ea: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ef: 4c 89 ea                      movq    %r13, %rdx
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _Py_NegativeRefcount
// 1fc: ff d0                         callq   *%rax
// 1fe: 49 8b 45 00                   movq    (%r13), %rax
// 202: 85 c0                         testl   %eax, %eax
// 204: 78 ba                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 210: ff d0                         callq   *%rax
// 212: 49 ff 4d 00                   decq    (%r13)
// 216: 75 a8                         jne     0x1c0 <_JIT_ENTRY+0x1c0>
// 218: 4c 89 ef                      movq    %r13, %rdi
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_Dealloc
// 225: ff d0                         callq   *%rax
// 227: eb 97                         jmp     0x1c0 <_JIT_ENTRY+0x1c0>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _JIT_OPARG
// 233: f7 d0                         notl    %eax
// 235: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 23a: 4c 63 f0                      movslq  %eax, %r14
// 23d: 4f 8b 6c f7 f0                movq    -0x10(%r15,%r14,8), %r13
// 242: 4f 8b 64 f7 f8                movq    -0x8(%r15,%r14,8), %r12
// 247: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000249:  R_X86_64_64  PySequence_Contains
// 251: 4c 89 e7                      movq    %r12, %rdi
// 254: 4c 89 ee                      movq    %r13, %rsi
// 257: ff d0                         callq   *%rax
// 259: 89 c5                         movl    %eax, %ebp
// 25b: 49 8b 45 00                   movq    (%r13), %rax
// 25f: 48 85 c0                      testq   %rax, %rax
// 262: 7f 22                         jg      0x286 <_JIT_ENTRY+0x286>
// 264: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000266:  R_X86_64_64  .rodata.str1.1
// 26e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000270:  R_X86_64_64  _Py_NegativeRefcount
// 278: be a8 07 00 00                movl    $0x7a8, %esi            # imm = 0x7A8
// 27d: 4c 89 ea                      movq    %r13, %rdx
// 280: ff d0                         callq   *%rax
// 282: 49 8b 45 00                   movq    (%r13), %rax
// 286: 85 c0                         testl   %eax, %eax
// 288: 78 21                         js      0x2ab <_JIT_ENTRY+0x2ab>
// 28a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 294: ff d0                         callq   *%rax
// 296: 49 ff 4d 00                   decq    (%r13)
// 29a: 75 0f                         jne     0x2ab <_JIT_ENTRY+0x2ab>
// 29c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029e:  R_X86_64_64  _Py_Dealloc
// 2a6: 4c 89 ef                      movq    %r13, %rdi
// 2a9: ff d0                         callq   *%rax
// 2ab: 49 8b 04 24                   movq    (%r12), %rax
// 2af: 48 85 c0                      testq   %rax, %rax
// 2b2: 7f 22                         jg      0x2d6 <_JIT_ENTRY+0x2d6>
// 2b4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002b6:  R_X86_64_64  .rodata.str1.1
// 2be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c0:  R_X86_64_64  _Py_NegativeRefcount
// 2c8: be a9 07 00 00                movl    $0x7a9, %esi            # imm = 0x7A9
// 2cd: 4c 89 e2                      movq    %r12, %rdx
// 2d0: ff d0                         callq   *%rax
// 2d2: 49 8b 04 24                   movq    (%r12), %rax
// 2d6: 85 c0                         testl   %eax, %eax
// 2d8: 78 21                         js      0x2fb <_JIT_ENTRY+0x2fb>
// 2da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002dc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2e4: ff d0                         callq   *%rax
// 2e6: 49 ff 0c 24                   decq    (%r12)
// 2ea: 75 0f                         jne     0x2fb <_JIT_ENTRY+0x2fb>
// 2ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ee:  R_X86_64_64  _Py_Dealloc
// 2f6: 4c 89 e7                      movq    %r12, %rdi
// 2f9: ff d0                         callq   *%rax
// 2fb: 4b 8d 04 f7                   leaq    (%r15,%r14,8), %rax
// 2ff: 48 83 c0 f0                   addq    $-0x10, %rax
// 303: 85 ed                         testl   %ebp, %ebp
// 305: 78 53                         js      0x35a <_JIT_ENTRY+0x35a>
// 307: 4b 8d 34 f7                   leaq    (%r15,%r14,8), %rsi
// 30b: 48 83 c6 f8                   addq    $-0x8, %rsi
// 30f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000311:  R_X86_64_64  _JIT_OPARG
// 319: 0f b7 c9                      movzwl  %cx, %ecx
// 31c: 39 cd                         cmpl    %ecx, %ebp
// 31e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000320:  R_X86_64_64  _Py_FalseStruct
// 328: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000032a:  R_X86_64_64  _Py_TrueStruct
// 332: 48 0f 44 d1                   cmoveq  %rcx, %rdx
// 336: 48 89 10                      movq    %rdx, (%rax)
// 339: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033b:  R_X86_64_64  _JIT_CONTINUE
// 343: 48 89 df                      movq    %rbx, %rdi
// 346: 48 8b 14 24                   movq    (%rsp), %rdx
// 34a: 48 83 c4 28                   addq    $0x28, %rsp
// 34e: 5b                            popq    %rbx
// 34f: 41 5c                         popq    %r12
// 351: 41 5d                         popq    %r13
// 353: 41 5e                         popq    %r14
// 355: 41 5f                         popq    %r15
// 357: 5d                            popq    %rbp
// 358: ff e0                         jmpq    *%rax
// 35a: 48 29 d8                      subq    %rbx, %rax
// 35d: 48 83 c0 b8                   addq    $-0x48, %rax
// 361: 48 c1 e8 03                   shrq    $0x3, %rax
// 365: 89 43 40                      movl    %eax, 0x40(%rbx)
// 368: 31 c0                         xorl    %eax, %eax
// 36a: e9 41 fd ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 36f: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_CONTAINS_OP_code_body[880] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd7, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xdf, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xcf, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x78, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x18, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x14, 0x24, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xa7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x34, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xe7, 0x01, 0x00, 0x00, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xa4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x8d, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc7, 0xe9, 0xb0, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xdd, 0x45, 0x31, 0xf6, 0xeb, 0x10, 0x0f, 0x1f, 0x40, 0x00, 0x49, 0xff, 0xc6, 0x4c, 0x39, 0xf3, 0x0f, 0x84, 0x37, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xf5, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xf0, 0x4f, 0x8b, 0x6c, 0xf7, 0xf0, 0x4f, 0x8b, 0x64, 0xf7, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xa8, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xa9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xf7, 0x48, 0x83, 0xc0, 0xf0, 0x85, 0xed, 0x78, 0x53, 0x4b, 0x8d, 0x34, 0xf7, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x39, 0xcd, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xd1, 0x48, 0x89, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x41, 0xfd, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_CONTAINS_OP_code_holes[28] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x187, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x249, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySequence_Contains, 0x0},
    {0x266, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x270, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x28c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x29e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2b6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2dc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x311, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x320, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x32a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x33b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_CONTAINS_OP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_CONTAINS_OP_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_CONVERT_VALUE
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_CONVERT_VALUE.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d7                   movq    (%r15,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 df                   movq    (%r15,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c cf                   leaq    (%r15,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 c7                      subq    %r8, %r15
// 8b: 49 83 c7 b8                   addq    $-0x48, %r15
// 8f: 49 c1 ef 03                   shrq    $0x3, %r15
// 93: 45 89 78 40                   movl    %r15d, 0x40(%r8)
// 97: 49 8b 00                      movq    (%r8), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 5c 24 18                movq    %r11, 0x18(%rsp)
// c4: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// c9: 48 89 14 24                   movq    %rdx, (%rsp)
// cd: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 aa 00 00 00             je      0x1ad <_JIT_ENTRY+0x1ad>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 1c 24                   movq    (%rsp), %rbx
// 134: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 139: 78 21                         js      0x15c <_JIT_ENTRY+0x15c>
// 13b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 145: ff d0                         callq   *%rax
// 147: 49 ff 0c 24                   decq    (%r12)
// 14b: 75 0f                         jne     0x15c <_JIT_ENTRY+0x15c>
// 14d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014f:  R_X86_64_64  _Py_Dealloc
// 157: 4c 89 e7                      movq    %r12, %rdi
// 15a: ff d0                         callq   *%rax
// 15c: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 161: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 165: 4d 85 ed                      testq   %r13, %r13
// 168: 4c 8b 74 24 20                movq    0x20(%rsp), %r14
// 16d: 0f 84 69 01 00 00             je      0x2dc <_JIT_ENTRY+0x2dc>
// 173: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 178: 4d 8d 24 cf                   leaq    (%r15,%rcx,8), %r12
// 17c: 4c 89 28                      movq    %r13, (%rax)
// 17f: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 183: 48 8b 00                      movq    (%rax), %rax
// 186: 84 c0                         testb   %al, %al
// 188: 0f 84 9b 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_HandlePending
// 198: 48 89 df                      movq    %rbx, %rdi
// 19b: ff d0                         callq   *%rax
// 19d: 85 c0                         testl   %eax, %eax
// 19f: 0f 84 84 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 1a5: 4c 89 e0                      movq    %r12, %rax
// 1a8: e9 2f 01 00 00                jmp     0x2dc <_JIT_ENTRY+0x2dc>
// 1ad: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1b1: 41 be 01 00 00 00             movl    $0x1, %r14d
// 1b7: 45 0f 43 f5                   cmovael %r13d, %r14d
// 1bb: 31 db                         xorl    %ebx, %ebx
// 1bd: eb 0d                         jmp     0x1cc <_JIT_ENTRY+0x1cc>
// 1bf: 90                            nop
// 1c0: 48 ff c3                      incq    %rbx
// 1c3: 49 39 de                      cmpq    %rbx, %r14
// 1c6: 0f 84 37 ff ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 1cc: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1d1: 49 8b 45 00                   movq    (%r13), %rax
// 1d5: 48 85 c0                      testq   %rax, %rax
// 1d8: 7e 06                         jle     0x1e0 <_JIT_ENTRY+0x1e0>
// 1da: 85 c0                         testl   %eax, %eax
// 1dc: 78 e2                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 1de: eb 26                         jmp     0x206 <_JIT_ENTRY+0x206>
// 1e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e2:  R_X86_64_64  .rodata.str1.1
// 1ea: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ef: 4c 89 ea                      movq    %r13, %rdx
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _Py_NegativeRefcount
// 1fc: ff d0                         callq   *%rax
// 1fe: 49 8b 45 00                   movq    (%r13), %rax
// 202: 85 c0                         testl   %eax, %eax
// 204: 78 ba                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 210: ff d0                         callq   *%rax
// 212: 49 ff 4d 00                   decq    (%r13)
// 216: 75 a8                         jne     0x1c0 <_JIT_ENTRY+0x1c0>
// 218: 4c 89 ef                      movq    %r13, %rdi
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_Dealloc
// 225: ff d0                         callq   *%rax
// 227: eb 97                         jmp     0x1c0 <_JIT_ENTRY+0x1c0>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _JIT_OPARG
// 233: 0f b7 c8                      movzwl  %ax, %ecx
// 236: f7 d0                         notl    %eax
// 238: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 23d: 48 63 d8                      movslq  %eax, %rbx
// 240: 49 8b 6c df f8                movq    -0x8(%r15,%rbx,8), %rbp
// 245: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000247:  R_X86_64_64  .rodata
// 24f: 48 89 ef                      movq    %rbp, %rdi
// 252: ff 14 c8                      callq   *(%rax,%rcx,8)
// 255: 49 89 c5                      movq    %rax, %r13
// 258: 48 8b 45 00                   movq    (%rbp), %rax
// 25c: 48 85 c0                      testq   %rax, %rax
// 25f: 7f 22                         jg      0x283 <_JIT_ENTRY+0x283>
// 261: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000263:  R_X86_64_64  .rodata.str1.1
// 26b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026d:  R_X86_64_64  _Py_NegativeRefcount
// 275: be 98 0c 00 00                movl    $0xc98, %esi            # imm = 0xC98
// 27a: 48 89 ea                      movq    %rbp, %rdx
// 27d: ff d0                         callq   *%rax
// 27f: 48 8b 45 00                   movq    (%rbp), %rax
// 283: 85 c0                         testl   %eax, %eax
// 285: 78 21                         js      0x2a8 <_JIT_ENTRY+0x2a8>
// 287: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000289:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 291: ff d0                         callq   *%rax
// 293: 48 ff 4d 00                   decq    (%rbp)
// 297: 75 0f                         jne     0x2a8 <_JIT_ENTRY+0x2a8>
// 299: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029b:  R_X86_64_64  _Py_Dealloc
// 2a3: 48 89 ef                      movq    %rbp, %rdi
// 2a6: ff d0                         callq   *%rax
// 2a8: 49 8d 04 df                   leaq    (%r15,%rbx,8), %rax
// 2ac: 48 83 c0 f8                   addq    $-0x8, %rax
// 2b0: 4d 85 ed                      testq   %r13, %r13
// 2b3: 74 27                         je      0x2dc <_JIT_ENTRY+0x2dc>
// 2b5: 4c 89 28                      movq    %r13, (%rax)
// 2b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ba:  R_X86_64_64  _JIT_CONTINUE
// 2c2: 4c 89 f7                      movq    %r14, %rdi
// 2c5: 4c 89 e6                      movq    %r12, %rsi
// 2c8: 48 8b 14 24                   movq    (%rsp), %rdx
// 2cc: 48 83 c4 28                   addq    $0x28, %rsp
// 2d0: 5b                            popq    %rbx
// 2d1: 41 5c                         popq    %r12
// 2d3: 41 5d                         popq    %r13
// 2d5: 41 5e                         popq    %r14
// 2d7: 41 5f                         popq    %r15
// 2d9: 5d                            popq    %rbp
// 2da: ff e0                         jmpq    *%rax
// 2dc: 4c 29 f0                      subq    %r14, %rax
// 2df: 48 83 c0 b8                   addq    $-0x48, %rax
// 2e3: 48 c1 e8 03                   shrq    $0x3, %rax
// 2e7: 41 89 46 40                   movl    %eax, 0x40(%r14)
// 2eb: 31 c0                         xorl    %eax, %eax
// 2ed: e9 be fd ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 2f2: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_CONVERT_VALUE_code_body[755] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd7, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xdf, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xcf, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x78, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x18, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x14, 0x24, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xaa, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x04, 0xc7, 0x4d, 0x85, 0xed, 0x4c, 0x8b, 0x74, 0x24, 0x20, 0x0f, 0x84, 0x69, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x4d, 0x8d, 0x24, 0xcf, 0x4c, 0x89, 0x28, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0x9b, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x84, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0xe9, 0x2f, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xdb, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x37, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xd8, 0x49, 0x8b, 0x6c, 0xdf, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0x14, 0xc8, 0x49, 0x89, 0xc5, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x98, 0x0c, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xdf, 0x48, 0x83, 0xc0, 0xf8, 0x4d, 0x85, 0xed, 0x74, 0x27, 0x4c, 0x89, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x29, 0xf0, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x46, 0x40, 0x31, 0xc0, 0xe9, 0xbe, 0xfd, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_CONVERT_VALUE_code_holes[21] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x247, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x263, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x26d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x289, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x29b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2ba, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
// 59: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_CONVERT_VALUE_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_CONVERT_VALUE_data_holes[4] = {
    {0x41, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Str, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Repr, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_ASCII, 0x0},
};

// _CALL_METHOD_DESCRIPTOR_FASTplus_COPY
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_COPY.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4f 8d 04 c6                   leaq    (%r14,%r8,8), %r8
// 79: 49 8b 38                      movq    (%r8), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 49 29 de                      subq    %rbx, %r14
// 8a: 49 83 c6 b8                   addq    $-0x48, %r14
// 8e: 49 c1 ee 03                   shrq    $0x3, %r14
// 92: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 96: 48 8b 03                      movq    (%rbx), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// c3: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// c8: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cd: 48 85 c0                      testq   %rax, %rax
// d0: 40 0f 94 c5                   sete    %bpl
// d4: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// d8: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// dd: 49 8d 70 08                   leaq    0x8(%r8), %rsi
// e1: 48 63 d0                      movslq  %eax, %rdx
// e4: ff 51 08                      callq   *0x8(%rcx)
// e7: 48 89 04 24                   movq    %rax, (%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 ae 00 00 00             je      0x1b2 <_JIT_ENTRY+0x1b2>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// 136: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 13b: 78 21                         js      0x15e <_JIT_ENTRY+0x15e>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 147: ff d0                         callq   *%rax
// 149: 49 ff 0c 24                   decq    (%r12)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_Dealloc
// 159: 4c 89 e7                      movq    %r12, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 162: 48 8b 0c 24                   movq    (%rsp), %rcx
// 166: 48 85 c9                      testq   %rcx, %rcx
// 169: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 16e: 74 2d                         je      0x19d <_JIT_ENTRY+0x19d>
// 170: 48 89 08                      movq    %rcx, (%rax)
// 173: 49 8b 45 10                   movq    0x10(%r13), %rax
// 177: 48 8b 00                      movq    (%rax), %rax
// 17a: 84 c0                         testb   %al, %al
// 17c: 0f 84 c7 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 182: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000184:  R_X86_64_64  _Py_HandlePending
// 18c: 4c 89 ef                      movq    %r13, %rdi
// 18f: ff d0                         callq   *%rax
// 191: 85 c0                         testl   %eax, %eax
// 193: 0f 84 b0 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 199: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 19d: 48 29 d8                      subq    %rbx, %rax
// 1a0: 48 83 c0 b8                   addq    $-0x48, %rax
// 1a4: 48 c1 e8 03                   shrq    $0x3, %rax
// 1a8: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1ab: 31 c0                         xorl    %eax, %eax
// 1ad: e9 fd fe ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 1b2: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1b6: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1bc: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1c0: 31 ed                         xorl    %ebp, %ebp
// 1c2: eb 18                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 1d0: 48 ff c5                      incq    %rbp
// 1d3: 49 39 ef                      cmpq    %rbp, %r15
// 1d6: 0f 84 28 ff ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 1dc: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 1e1: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 1e5: 49 8b 45 00                   movq    (%r13), %rax
// 1e9: 48 85 c0                      testq   %rax, %rax
// 1ec: 7e 12                         jle     0x200 <_JIT_ENTRY+0x200>
// 1ee: 85 c0                         testl   %eax, %eax
// 1f0: 78 de                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1f2: eb 32                         jmp     0x226 <_JIT_ENTRY+0x226>
// 1f4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 200: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1
// 20a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 20f: 4c 89 ea                      movq    %r13, %rdx
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: ff d0                         callq   *%rax
// 21e: 49 8b 45 00                   movq    (%r13), %rax
// 222: 85 c0                         testl   %eax, %eax
// 224: 78 aa                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 230: ff d0                         callq   *%rax
// 232: 49 ff 4d 00                   decq    (%r13)
// 236: 75 98                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: ff d0                         callq   *%rax
// 247: eb 87                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _JIT_OPARG
// 253: 0f b7 c8                      movzwl  %ax, %ecx
// 256: f7 d0                         notl    %eax
// 258: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 25d: 48 98                         cltq
// 25f: 48 29 c8                      subq    %rcx, %rax
// 262: 4d 8b 3c c6                   movq    (%r14,%rax,8), %r15
// 266: 41 8b 07                      movl    (%r15), %eax
// 269: ff c0                         incl    %eax
// 26b: 74 0f                         je      0x27c <_JIT_ENTRY+0x27c>
// 26d: 41 89 07                      movl    %eax, (%r15)
// 270: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000272:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 27a: ff d0                         callq   *%rax
// 27c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027e:  R_X86_64_64  _JIT_OPARG
// 286: f7 d0                         notl    %eax
// 288: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 28d: 48 98                         cltq
// 28f: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 293: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 297: 48 83 c6 08                   addq    $0x8, %rsi
// 29b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029d:  R_X86_64_64  _JIT_CONTINUE
// 2a5: 48 89 df                      movq    %rbx, %rdi
// 2a8: 4c 89 ea                      movq    %r13, %rdx
// 2ab: 48 83 c4 28                   addq    $0x28, %rsp
// 2af: 5b                            popq    %rbx
// 2b0: 41 5c                         popq    %r12
// 2b2: 41 5d                         popq    %r13
// 2b4: 41 5e                         popq    %r14
// 2b6: 41 5f                         popq    %r15
// 2b8: 5d                            popq    %rbp
// 2b9: ff e0                         jmpq    *%rax
// 2bb: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_COPY_code_body[700] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xce, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4f, 0x8d, 0x04, 0xc6, 0x49, 0x8b, 0x38, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x70, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xae, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x74, 0x2d, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xb0, 0x00, 0x00, 0x00, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xfd, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xed, 0xeb, 0x18, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xef, 0x0f, 0x84, 0x28, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x29, 0xc8, 0x4d, 0x8b, 0x3c, 0xc6, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x3c, 0xc6, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_COPY_code_holes[18] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x272, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x27e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x29d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_COPY_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_COPY_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_COPY_FREE_VARS
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_COPY_FREE_VARS.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d7                   movq    (%r15,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 df                   movq    (%r15,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c cf                   leaq    (%r15,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 c7                      subq    %r8, %r15
// 8b: 49 83 c7 b8                   addq    $-0x48, %r15
// 8f: 49 c1 ef 03                   shrq    $0x3, %r15
// 93: 45 89 78 40                   movl    %r15d, 0x40(%r8)
// 97: 49 8b 00                      movq    (%r8), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 1c 24                   movq    %r11, (%rsp)
// c3: 4c 89 54 24 18                movq    %r10, 0x18(%rsp)
// c8: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// cd: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 b6 00 00 00             je      0x1b9 <_JIT_ENTRY+0x1b9>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 135: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 13a: 78 21                         js      0x15d <_JIT_ENTRY+0x15d>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 146: ff d0                         callq   *%rax
// 148: 49 ff 0c 24                   decq    (%r12)
// 14c: 75 0f                         jne     0x15d <_JIT_ENTRY+0x15d>
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _Py_Dealloc
// 158: 4c 89 e7                      movq    %r12, %rdi
// 15b: ff d0                         callq   *%rax
// 15d: 48 8b 04 24                   movq    (%rsp), %rax
// 161: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 165: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// 16a: 48 85 d2                      testq   %rdx, %rdx
// 16d: 74 35                         je      0x1a4 <_JIT_ENTRY+0x1a4>
// 16f: 48 8b 4c 24 18                movq    0x18(%rsp), %rcx
// 174: 4d 8d 3c cf                   leaq    (%r15,%rcx,8), %r15
// 178: 48 89 10                      movq    %rdx, (%rax)
// 17b: 49 8b 46 10                   movq    0x10(%r14), %rax
// 17f: 48 8b 00                      movq    (%rax), %rax
// 182: 84 c0                         testb   %al, %al
// 184: 0f 84 af 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 18a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018c:  R_X86_64_64  _Py_HandlePending
// 194: 4c 89 f7                      movq    %r14, %rdi
// 197: ff d0                         callq   *%rax
// 199: 85 c0                         testl   %eax, %eax
// 19b: 0f 84 98 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 1a1: 4c 89 f8                      movq    %r15, %rax
// 1a4: 48 29 d8                      subq    %rbx, %rax
// 1a7: 48 83 c0 b8                   addq    $-0x48, %rax
// 1ab: 48 c1 e8 03                   shrq    $0x3, %rax
// 1af: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1b2: 31 c0                         xorl    %eax, %eax
// 1b4: e9 f7 fe ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 1b9: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1bd: 41 be 01 00 00 00             movl    $0x1, %r14d
// 1c3: 45 0f 43 f5                   cmovael %r13d, %r14d
// 1c7: 31 db                         xorl    %ebx, %ebx
// 1c9: eb 11                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1cb: 0f 1f 44 00 00                nopl    (%rax,%rax)
// 1d0: 48 ff c3                      incq    %rbx
// 1d3: 49 39 de                      cmpq    %rbx, %r14
// 1d6: 0f 84 27 ff ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 1dc: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1e1: 49 8b 45 00                   movq    (%r13), %rax
// 1e5: 48 85 c0                      testq   %rax, %rax
// 1e8: 7e 06                         jle     0x1f0 <_JIT_ENTRY+0x1f0>
// 1ea: 85 c0                         testl   %eax, %eax
// 1ec: 78 e2                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1ee: eb 26                         jmp     0x216 <_JIT_ENTRY+0x216>
// 1f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f2:  R_X86_64_64  .rodata.str1.1
// 1fa: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ff: 4c 89 ea                      movq    %r13, %rdx
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_NegativeRefcount
// 20c: ff d0                         callq   *%rax
// 20e: 49 8b 45 00                   movq    (%r13), %rax
// 212: 85 c0                         testl   %eax, %eax
// 214: 78 ba                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 220: ff d0                         callq   *%rax
// 222: 49 ff 4d 00                   decq    (%r13)
// 226: 75 a8                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 228: 4c 89 ef                      movq    %r13, %rdi
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_Dealloc
// 235: ff d0                         callq   *%rax
// 237: eb 97                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 239: 4c 89 3c 24                   movq    %r15, (%rsp)
// 23d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023f:  R_X86_64_64  _JIT_OPARG
// 247: 66 85 c0                      testw   %ax, %ax
// 24a: 74 73                         je      0x2bf <_JIT_ENTRY+0x2bf>
// 24c: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 251: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 255: 48 8b 58 48                   movq    0x48(%rax), %rbx
// 259: 48 8b 02                      movq    (%rdx), %rax
// 25c: 8b 40 48                      movl    0x48(%rax), %eax
// 25f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000261:  R_X86_64_64  _JIT_OPARG
// 269: 0f b7 c9                      movzwl  %cx, %ecx
// 26c: 29 c8                         subl    %ecx, %eax
// 26e: 83 f9 02                      cmpl    $0x2, %ecx
// 271: 41 be 01 00 00 00             movl    $0x1, %r14d
// 277: 44 0f 43 f1                   cmovael %ecx, %r14d
// 27b: 48 98                         cltq
// 27d: 4c 8d 24 c2                   leaq    (%rdx,%rax,8), %r12
// 281: 49 83 c4 48                   addq    $0x48, %r12
// 285: 45 31 ed                      xorl    %r13d, %r13d
// 288: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000028a:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 292: eb 18                         jmp     0x2ac <_JIT_ENTRY+0x2ac>
// 294: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 2a0: 4f 89 3c ec                   movq    %r15, (%r12,%r13,8)
// 2a4: 49 ff c5                      incq    %r13
// 2a7: 4d 39 ee                      cmpq    %r13, %r14
// 2aa: 74 13                         je      0x2bf <_JIT_ENTRY+0x2bf>
// 2ac: 4e 8b 7c eb 18                movq    0x18(%rbx,%r13,8), %r15
// 2b1: 41 8b 07                      movl    (%r15), %eax
// 2b4: ff c0                         incl    %eax
// 2b6: 74 e8                         je      0x2a0 <_JIT_ENTRY+0x2a0>
// 2b8: 41 89 07                      movl    %eax, (%r15)
// 2bb: ff d5                         callq   *%rbp
// 2bd: eb e1                         jmp     0x2a0 <_JIT_ENTRY+0x2a0>
// 2bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c1:  R_X86_64_64  _JIT_CONTINUE
// 2c9: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 2ce: 48 8b 34 24                   movq    (%rsp), %rsi
// 2d2: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 2d7: 48 83 c4 28                   addq    $0x28, %rsp
// 2db: 5b                            popq    %rbx
// 2dc: 41 5c                         popq    %r12
// 2de: 41 5d                         popq    %r13
// 2e0: 41 5e                         popq    %r14
// 2e2: 41 5f                         popq    %r15
// 2e4: 5d                            popq    %rbp
// 2e5: ff e0                         jmpq    *%rax
// 2e7: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_COPY_FREE_VARS_code_body[744] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd7, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xdf, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xcf, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x78, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x1c, 0x24, 0x4c, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xb6, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x74, 0x35, 0x48, 0x8b, 0x4c, 0x24, 0x18, 0x4d, 0x8d, 0x3c, 0xcf, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xaf, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x98, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xf7, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xdb, 0xeb, 0x11, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x27, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x4c, 0x89, 0x3c, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x74, 0x73, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x58, 0x48, 0x48, 0x8b, 0x02, 0x8b, 0x40, 0x48, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x29, 0xc8, 0x83, 0xf9, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xf1, 0x48, 0x98, 0x4c, 0x8d, 0x24, 0xc2, 0x49, 0x83, 0xc4, 0x48, 0x45, 0x31, 0xed, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x18, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4f, 0x89, 0x3c, 0xec, 0x49, 0xff, 0xc5, 0x4d, 0x39, 0xee, 0x74, 0x13, 0x4e, 0x8b, 0x7c, 0xeb, 0x18, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x74, 0xe8, 0x41, 0x89, 0x07, 0xff, 0xd5, 0xeb, 0xe1, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x34, 0x24, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_COPY_FREE_VARS_code_holes[18] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x261, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x28a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x2c1, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_COPY_FREE_VARS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_COPY_FREE_VARS_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_DELETE_ATTR
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_DELETE_ATTR.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d7                   movq    (%r15,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 df                   movq    (%r15,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c cf                   leaq    (%r15,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 c7                      subq    %r8, %r15
// 8b: 49 83 c7 b8                   addq    $-0x48, %r15
// 8f: 49 c1 ef 03                   shrq    $0x3, %r15
// 93: 45 89 78 40                   movl    %r15d, 0x40(%r8)
// 97: 49 8b 00                      movq    (%r8), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 5c 24 18                movq    %r11, 0x18(%rsp)
// c4: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// c9: 48 89 14 24                   movq    %rdx, (%rsp)
// cd: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 58 01 00 00             je      0x25b <_JIT_ENTRY+0x25b>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 1c 24                   movq    (%rsp), %rbx
// 134: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 139: 78 21                         js      0x15c <_JIT_ENTRY+0x15c>
// 13b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 145: ff d0                         callq   *%rax
// 147: 49 ff 0c 24                   decq    (%r12)
// 14b: 75 0f                         jne     0x15c <_JIT_ENTRY+0x15c>
// 14d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014f:  R_X86_64_64  _Py_Dealloc
// 157: 4c 89 e7                      movq    %r12, %rdi
// 15a: ff d0                         callq   *%rax
// 15c: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 161: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 165: 4d 85 ed                      testq   %r13, %r13
// 168: 4c 8b 74 24 20                movq    0x20(%rsp), %r14
// 16d: 0f 84 d2 00 00 00             je      0x245 <_JIT_ENTRY+0x245>
// 173: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 178: 4d 8d 24 cf                   leaq    (%r15,%rcx,8), %r12
// 17c: 4c 89 28                      movq    %r13, (%rax)
// 17f: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 183: 48 8b 00                      movq    (%rax), %rax
// 186: 84 c0                         testb   %al, %al
// 188: 74 17                         je      0x1a1 <_JIT_ENTRY+0x1a1>
// 18a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018c:  R_X86_64_64  _Py_HandlePending
// 194: 48 89 df                      movq    %rbx, %rdi
// 197: ff d0                         callq   *%rax
// 199: 85 c0                         testl   %eax, %eax
// 19b: 0f 85 a1 00 00 00             jne     0x242 <_JIT_ENTRY+0x242>
// 1a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a3:  R_X86_64_64  _JIT_OPARG
// 1ab: 0f b7 c8                      movzwl  %ax, %ecx
// 1ae: f7 d0                         notl    %eax
// 1b0: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1b5: 48 63 d8                      movslq  %eax, %rbx
// 1b8: 4d 8b 6c df f8                movq    -0x8(%r15,%rbx,8), %r13
// 1bd: 49 8b 06                      movq    (%r14), %rax
// 1c0: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1c4: 48 8b 74 c8 18                movq    0x18(%rax,%rcx,8), %rsi
// 1c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cb:  R_X86_64_64  PyObject_DelAttr
// 1d3: 4c 89 ef                      movq    %r13, %rdi
// 1d6: ff d0                         callq   *%rax
// 1d8: 89 c5                         movl    %eax, %ebp
// 1da: 49 8b 45 00                   movq    (%r13), %rax
// 1de: 48 85 c0                      testq   %rax, %rax
// 1e1: 7f 22                         jg      0x205 <_JIT_ENTRY+0x205>
// 1e3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e5:  R_X86_64_64  .rodata.str1.1
// 1ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ef:  R_X86_64_64  _Py_NegativeRefcount
// 1f7: be d2 03 00 00                movl    $0x3d2, %esi            # imm = 0x3D2
// 1fc: 4c 89 ea                      movq    %r13, %rdx
// 1ff: ff d0                         callq   *%rax
// 201: 49 8b 45 00                   movq    (%r13), %rax
// 205: 49 8d 1c df                   leaq    (%r15,%rbx,8), %rbx
// 209: 48 83 c3 f8                   addq    $-0x8, %rbx
// 20d: 85 c0                         testl   %eax, %eax
// 20f: 78 21                         js      0x232 <_JIT_ENTRY+0x232>
// 211: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000213:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 21b: ff d0                         callq   *%rax
// 21d: 49 ff 4d 00                   decq    (%r13)
// 221: 75 0f                         jne     0x232 <_JIT_ENTRY+0x232>
// 223: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000225:  R_X86_64_64  _Py_Dealloc
// 22d: 4c 89 ef                      movq    %r13, %rdi
// 230: ff d0                         callq   *%rax
// 232: 85 ed                         testl   %ebp, %ebp
// 234: 4c 0f 44 e3                   cmoveq  %rbx, %r12
// 238: 0f 84 9b 00 00 00             je      0x2d9 <_JIT_ENTRY+0x2d9>
// 23e: 49 83 c4 f8                   addq    $-0x8, %r12
// 242: 4c 89 e0                      movq    %r12, %rax
// 245: 4c 29 f0                      subq    %r14, %rax
// 248: 48 83 c0 b8                   addq    $-0x48, %rax
// 24c: 48 c1 e8 03                   shrq    $0x3, %rax
// 250: 41 89 46 40                   movl    %eax, 0x40(%r14)
// 254: 31 c0                         xorl    %eax, %eax
// 256: e9 55 fe ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 25b: 41 83 fd 02                   cmpl    $0x2, %r13d
// 25f: 41 be 01 00 00 00             movl    $0x1, %r14d
// 265: 45 0f 43 f5                   cmovael %r13d, %r14d
// 269: 31 db                         xorl    %ebx, %ebx
// 26b: eb 0f                         jmp     0x27c <_JIT_ENTRY+0x27c>
// 26d: 0f 1f 00                      nopl    (%rax)
// 270: 48 ff c3                      incq    %rbx
// 273: 49 39 de                      cmpq    %rbx, %r14
// 276: 0f 84 87 fe ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 27c: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 281: 49 8b 45 00                   movq    (%r13), %rax
// 285: 48 85 c0                      testq   %rax, %rax
// 288: 7e 06                         jle     0x290 <_JIT_ENTRY+0x290>
// 28a: 85 c0                         testl   %eax, %eax
// 28c: 78 e2                         js      0x270 <_JIT_ENTRY+0x270>
// 28e: eb 26                         jmp     0x2b6 <_JIT_ENTRY+0x2b6>
// 290: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000292:  R_X86_64_64  .rodata.str1.1
// 29a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 29f: 4c 89 ea                      movq    %r13, %rdx
// 2a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a4:  R_X86_64_64  _Py_NegativeRefcount
// 2ac: ff d0                         callq   *%rax
// 2ae: 49 8b 45 00                   movq    (%r13), %rax
// 2b2: 85 c0                         testl   %eax, %eax
// 2b4: 78 ba                         js      0x270 <_JIT_ENTRY+0x270>
// 2b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2c0: ff d0                         callq   *%rax
// 2c2: 49 ff 4d 00                   decq    (%r13)
// 2c6: 75 a8                         jne     0x270 <_JIT_ENTRY+0x270>
// 2c8: 4c 89 ef                      movq    %r13, %rdi
// 2cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cd:  R_X86_64_64  _Py_Dealloc
// 2d5: ff d0                         callq   *%rax
// 2d7: eb 97                         jmp     0x270 <_JIT_ENTRY+0x270>
// 2d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002db:  R_X86_64_64  _JIT_CONTINUE
// 2e3: 4c 89 f7                      movq    %r14, %rdi
// 2e6: 4c 89 e6                      movq    %r12, %rsi
// 2e9: 48 8b 14 24                   movq    (%rsp), %rdx
// 2ed: 48 83 c4 28                   addq    $0x28, %rsp
// 2f1: 5b                            popq    %rbx
// 2f2: 41 5c                         popq    %r12
// 2f4: 41 5d                         popq    %r13
// 2f6: 41 5e                         popq    %r14
// 2f8: 41 5f                         popq    %r15
// 2fa: 5d                            popq    %rbp
// 2fb: ff e0                         jmpq    *%rax
// 2fd: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_DELETE_ATTR_code_body[766] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd7, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xdf, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xcf, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x78, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x18, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x14, 0x24, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0x58, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x04, 0xc7, 0x4d, 0x85, 0xed, 0x4c, 0x8b, 0x74, 0x24, 0x20, 0x0f, 0x84, 0xd2, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x4d, 0x8d, 0x24, 0xcf, 0x4c, 0x89, 0x28, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xa1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xd8, 0x4d, 0x8b, 0x6c, 0xdf, 0xf8, 0x49, 0x8b, 0x06, 0x48, 0x8b, 0x40, 0x20, 0x48, 0x8b, 0x74, 0xc8, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd2, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x49, 0x8d, 0x1c, 0xdf, 0x48, 0x83, 0xc3, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xed, 0x4c, 0x0f, 0x44, 0xe3, 0x0f, 0x84, 0x9b, 0x00, 0x00, 0x00, 0x49, 0x83, 0xc4, 0xf8, 0x4c, 0x89, 0xe0, 0x4c, 0x29, 0xf0, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x46, 0x40, 0x31, 0xc0, 0xe9, 0x55, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xdb, 0xeb, 0x0f, 0x0f, 0x1f, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x87, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_DELETE_ATTR_code_holes[21] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_DelAttr, 0x0},
    {0x1e5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1ef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x292, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2a4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2cd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2db, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_DELETE_ATTR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_DELETE_ATTR_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_DELETE_DEREF
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_DELETE_DEREF.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d7                   movq    (%r15,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 df                   movq    (%r15,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c cf                   leaq    (%r15,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 c7                      subq    %r8, %r15
// 8b: 49 83 c7 b8                   addq    $-0x48, %r15
// 8f: 49 c1 ef 03                   shrq    $0x3, %r15
// 93: 45 89 78 40                   movl    %r15d, 0x40(%r8)
// 97: 49 8b 00                      movq    (%r8), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 5c 24 10                movq    %r11, 0x10(%rsp)
// c4: 4c 89 14 24                   movq    %r10, (%rsp)
// c8: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cd: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 38 01 00 00             je      0x23b <_JIT_ENTRY+0x23b>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 135: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// 13a: 78 21                         js      0x15d <_JIT_ENTRY+0x15d>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 146: ff d0                         callq   *%rax
// 148: 49 ff 0c 24                   decq    (%r12)
// 14c: 75 0f                         jne     0x15d <_JIT_ENTRY+0x15d>
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _Py_Dealloc
// 158: 4c 89 e7                      movq    %r12, %rdi
// 15b: ff d0                         callq   *%rax
// 15d: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 162: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 166: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 16b: 48 85 d2                      testq   %rdx, %rdx
// 16e: 0f 84 45 01 00 00             je      0x2b9 <_JIT_ENTRY+0x2b9>
// 174: 48 8b 0c 24                   movq    (%rsp), %rcx
// 178: 4d 8d 3c cf                   leaq    (%r15,%rcx,8), %r15
// 17c: 48 89 10                      movq    %rdx, (%rax)
// 17f: 49 8b 46 10                   movq    0x10(%r14), %rax
// 183: 48 8b 00                      movq    (%rax), %rax
// 186: 84 c0                         testb   %al, %al
// 188: 74 17                         je      0x1a1 <_JIT_ENTRY+0x1a1>
// 18a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018c:  R_X86_64_64  _Py_HandlePending
// 194: 4c 89 f7                      movq    %r14, %rdi
// 197: ff d0                         callq   *%rax
// 199: 85 c0                         testl   %eax, %eax
// 19b: 0f 85 3c 01 00 00             jne     0x2dd <_JIT_ENTRY+0x2dd>
// 1a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a3:  R_X86_64_64  _JIT_OPARG
// 1ab: 0f b7 c0                      movzwl  %ax, %eax
// 1ae: 48 8b 44 c3 48                movq    0x48(%rbx,%rax,8), %rax
// 1b3: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 1b7: 4d 85 e4                      testq   %r12, %r12
// 1ba: 0f 84 fe 00 00 00             je      0x2be <_JIT_ENTRY+0x2be>
// 1c0: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 1c8: 49 8b 04 24                   movq    (%r12), %rax
// 1cc: 48 85 c0                      testq   %rax, %rax
// 1cf: 7f 22                         jg      0x1f3 <_JIT_ENTRY+0x1f3>
// 1d1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d3:  R_X86_64_64  .rodata.str1.1
// 1db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dd:  R_X86_64_64  _Py_NegativeRefcount
// 1e5: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 1ea: 4c 89 e2                      movq    %r12, %rdx
// 1ed: ff d0                         callq   *%rax
// 1ef: 49 8b 04 24                   movq    (%r12), %rax
// 1f3: 85 c0                         testl   %eax, %eax
// 1f5: 78 21                         js      0x218 <_JIT_ENTRY+0x218>
// 1f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 201: ff d0                         callq   *%rax
// 203: 49 ff 0c 24                   decq    (%r12)
// 207: 75 0f                         jne     0x218 <_JIT_ENTRY+0x218>
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  _Py_Dealloc
// 213: 4c 89 e7                      movq    %r12, %rdi
// 216: ff d0                         callq   *%rax
// 218: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021a:  R_X86_64_64  _JIT_CONTINUE
// 222: 48 89 df                      movq    %rbx, %rdi
// 225: 4c 89 fe                      movq    %r15, %rsi
// 228: 4c 89 f2                      movq    %r14, %rdx
// 22b: 48 83 c4 28                   addq    $0x28, %rsp
// 22f: 5b                            popq    %rbx
// 230: 41 5c                         popq    %r12
// 232: 41 5d                         popq    %r13
// 234: 41 5e                         popq    %r14
// 236: 41 5f                         popq    %r15
// 238: 5d                            popq    %rbp
// 239: ff e0                         jmpq    *%rax
// 23b: 41 83 fd 02                   cmpl    $0x2, %r13d
// 23f: 41 be 01 00 00 00             movl    $0x1, %r14d
// 245: 45 0f 43 f5                   cmovael %r13d, %r14d
// 249: 31 db                         xorl    %ebx, %ebx
// 24b: eb 0f                         jmp     0x25c <_JIT_ENTRY+0x25c>
// 24d: 0f 1f 00                      nopl    (%rax)
// 250: 48 ff c3                      incq    %rbx
// 253: 49 39 de                      cmpq    %rbx, %r14
// 256: 0f 84 a7 fe ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 25c: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 261: 49 8b 45 00                   movq    (%r13), %rax
// 265: 48 85 c0                      testq   %rax, %rax
// 268: 7e 06                         jle     0x270 <_JIT_ENTRY+0x270>
// 26a: 85 c0                         testl   %eax, %eax
// 26c: 78 e2                         js      0x250 <_JIT_ENTRY+0x250>
// 26e: eb 26                         jmp     0x296 <_JIT_ENTRY+0x296>
// 270: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000272:  R_X86_64_64  .rodata.str1.1
// 27a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 27f: 4c 89 ea                      movq    %r13, %rdx
// 282: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000284:  R_X86_64_64  _Py_NegativeRefcount
// 28c: ff d0                         callq   *%rax
// 28e: 49 8b 45 00                   movq    (%r13), %rax
// 292: 85 c0                         testl   %eax, %eax
// 294: 78 ba                         js      0x250 <_JIT_ENTRY+0x250>
// 296: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000298:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a0: ff d0                         callq   *%rax
// 2a2: 49 ff 4d 00                   decq    (%r13)
// 2a6: 75 a8                         jne     0x250 <_JIT_ENTRY+0x250>
// 2a8: 4c 89 ef                      movq    %r13, %rdi
// 2ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ad:  R_X86_64_64  _Py_Dealloc
// 2b5: ff d0                         callq   *%rax
// 2b7: eb 97                         jmp     0x250 <_JIT_ENTRY+0x250>
// 2b9: 49 89 c7                      movq    %rax, %r15
// 2bc: eb 1f                         jmp     0x2dd <_JIT_ENTRY+0x2dd>
// 2be: 48 8b 33                      movq    (%rbx), %rsi
// 2c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c3:  R_X86_64_64  _JIT_OPARG
// 2cb: 0f b7 d0                      movzwl  %ax, %edx
// 2ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d0:  R_X86_64_64  _PyEval_FormatExcUnbound
// 2d8: 4c 89 f7                      movq    %r14, %rdi
// 2db: ff d0                         callq   *%rax
// 2dd: 49 29 df                      subq    %rbx, %r15
// 2e0: 49 83 c7 b8                   addq    $-0x48, %r15
// 2e4: 49 c1 ef 03                   shrq    $0x3, %r15
// 2e8: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 2ec: 31 c0                         xorl    %eax, %eax
// 2ee: e9 bd fd ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 2f3: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_DELETE_DEREF_code_body[756] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd7, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xdf, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xcf, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x78, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0x38, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x45, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x3c, 0xcf, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x3c, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc3, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0xfe, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xdb, 0xeb, 0x0f, 0x0f, 0x1f, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0xa7, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x49, 0x89, 0xc7, 0xeb, 0x1f, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0xe9, 0xbd, 0xfd, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_DELETE_DEREF_code_holes[22] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x272, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x284, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x298, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2c3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_DELETE_DEREF_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_DELETE_DEREF_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_DELETE_FAST
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_DELETE_FAST.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d7                   movq    (%r15,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 df                   movq    (%r15,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c cf                   leaq    (%r15,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 c7                      subq    %r8, %r15
// 8b: 49 83 c7 b8                   addq    $-0x48, %r15
// 8f: 49 c1 ef 03                   shrq    $0x3, %r15
// 93: 45 89 78 40                   movl    %r15d, 0x40(%r8)
// 97: 49 8b 00                      movq    (%r8), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 5c 24 10                movq    %r11, 0x10(%rsp)
// c4: 4c 89 14 24                   movq    %r10, (%rsp)
// c8: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cd: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 42 01 00 00             je      0x245 <_JIT_ENTRY+0x245>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 135: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// 13a: 78 21                         js      0x15d <_JIT_ENTRY+0x15d>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 146: ff d0                         callq   *%rax
// 148: 49 ff 0c 24                   decq    (%r12)
// 14c: 75 0f                         jne     0x15d <_JIT_ENTRY+0x15d>
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _Py_Dealloc
// 158: 4c 89 e7                      movq    %r12, %rdi
// 15b: ff d0                         callq   *%rax
// 15d: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 162: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 166: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 16b: 48 85 d2                      testq   %rdx, %rdx
// 16e: 0f 84 55 01 00 00             je      0x2c9 <_JIT_ENTRY+0x2c9>
// 174: 48 8b 0c 24                   movq    (%rsp), %rcx
// 178: 4d 8d 3c cf                   leaq    (%r15,%rcx,8), %r15
// 17c: 48 89 10                      movq    %rdx, (%rax)
// 17f: 49 8b 46 10                   movq    0x10(%r14), %rax
// 183: 48 8b 00                      movq    (%rax), %rax
// 186: 84 c0                         testb   %al, %al
// 188: 74 17                         je      0x1a1 <_JIT_ENTRY+0x1a1>
// 18a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018c:  R_X86_64_64  _Py_HandlePending
// 194: 4c 89 f7                      movq    %r14, %rdi
// 197: ff d0                         callq   *%rax
// 199: 85 c0                         testl   %eax, %eax
// 19b: 0f 85 7a 01 00 00             jne     0x31b <_JIT_ENTRY+0x31b>
// 1a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a3:  R_X86_64_64  _JIT_OPARG
// 1ab: 0f b7 c0                      movzwl  %ax, %eax
// 1ae: 4c 8b 64 c3 48                movq    0x48(%rbx,%rax,8), %r12
// 1b3: 4d 85 e4                      testq   %r12, %r12
// 1b6: 0f 84 12 01 00 00             je      0x2ce <_JIT_ENTRY+0x2ce>
// 1bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001be:  R_X86_64_64  _JIT_OPARG
// 1c6: 0f b7 c0                      movzwl  %ax, %eax
// 1c9: 48 c7 44 c3 48 00 00 00 00    movq    $0x0, 0x48(%rbx,%rax,8)
// 1d2: 49 8b 04 24                   movq    (%r12), %rax
// 1d6: 48 85 c0                      testq   %rax, %rax
// 1d9: 7f 22                         jg      0x1fd <_JIT_ENTRY+0x1fd>
// 1db: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001dd:  R_X86_64_64  .rodata.str1.1+0x83
// 1e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e7:  R_X86_64_64  _Py_NegativeRefcount
// 1ef: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 1f4: 4c 89 e2                      movq    %r12, %rdx
// 1f7: ff d0                         callq   *%rax
// 1f9: 49 8b 04 24                   movq    (%r12), %rax
// 1fd: 85 c0                         testl   %eax, %eax
// 1ff: 78 21                         js      0x222 <_JIT_ENTRY+0x222>
// 201: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000203:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 20b: ff d0                         callq   *%rax
// 20d: 49 ff 0c 24                   decq    (%r12)
// 211: 75 0f                         jne     0x222 <_JIT_ENTRY+0x222>
// 213: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000215:  R_X86_64_64  _Py_Dealloc
// 21d: 4c 89 e7                      movq    %r12, %rdi
// 220: ff d0                         callq   *%rax
// 222: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000224:  R_X86_64_64  _JIT_CONTINUE
// 22c: 48 89 df                      movq    %rbx, %rdi
// 22f: 4c 89 fe                      movq    %r15, %rsi
// 232: 4c 89 f2                      movq    %r14, %rdx
// 235: 48 83 c4 28                   addq    $0x28, %rsp
// 239: 5b                            popq    %rbx
// 23a: 41 5c                         popq    %r12
// 23c: 41 5d                         popq    %r13
// 23e: 41 5e                         popq    %r14
// 240: 41 5f                         popq    %r15
// 242: 5d                            popq    %rbp
// 243: ff e0                         jmpq    *%rax
// 245: 41 83 fd 02                   cmpl    $0x2, %r13d
// 249: 41 be 01 00 00 00             movl    $0x1, %r14d
// 24f: 45 0f 43 f5                   cmovael %r13d, %r14d
// 253: 31 db                         xorl    %ebx, %ebx
// 255: eb 15                         jmp     0x26c <_JIT_ENTRY+0x26c>
// 257: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 260: 48 ff c3                      incq    %rbx
// 263: 49 39 de                      cmpq    %rbx, %r14
// 266: 0f 84 97 fe ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 26c: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 271: 49 8b 45 00                   movq    (%r13), %rax
// 275: 48 85 c0                      testq   %rax, %rax
// 278: 7e 06                         jle     0x280 <_JIT_ENTRY+0x280>
// 27a: 85 c0                         testl   %eax, %eax
// 27c: 78 e2                         js      0x260 <_JIT_ENTRY+0x260>
// 27e: eb 26                         jmp     0x2a6 <_JIT_ENTRY+0x2a6>
// 280: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000282:  R_X86_64_64  .rodata.str1.1
// 28a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 28f: 4c 89 ea                      movq    %r13, %rdx
// 292: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000294:  R_X86_64_64  _Py_NegativeRefcount
// 29c: ff d0                         callq   *%rax
// 29e: 49 8b 45 00                   movq    (%r13), %rax
// 2a2: 85 c0                         testl   %eax, %eax
// 2a4: 78 ba                         js      0x260 <_JIT_ENTRY+0x260>
// 2a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2b0: ff d0                         callq   *%rax
// 2b2: 49 ff 4d 00                   decq    (%r13)
// 2b6: 75 a8                         jne     0x260 <_JIT_ENTRY+0x260>
// 2b8: 4c 89 ef                      movq    %r13, %rdi
// 2bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bd:  R_X86_64_64  _Py_Dealloc
// 2c5: ff d0                         callq   *%rax
// 2c7: eb 97                         jmp     0x260 <_JIT_ENTRY+0x260>
// 2c9: 49 89 c7                      movq    %rax, %r15
// 2cc: eb 4d                         jmp     0x31b <_JIT_ENTRY+0x31b>
// 2ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d0:  R_X86_64_64  PyExc_UnboundLocalError
// 2d8: 4c 8b 20                      movq    (%rax), %r12
// 2db: 48 8b 03                      movq    (%rbx), %rax
// 2de: 48 8b 78 60                   movq    0x60(%rax), %rdi
// 2e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e4:  R_X86_64_64  _JIT_OPARG
// 2ec: 0f b7 f0                      movzwl  %ax, %esi
// 2ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f1:  R_X86_64_64  PyTuple_GetItem
// 2f9: ff d0                         callq   *%rax
// 2fb: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002fd:  R_X86_64_64  .rodata.str1.1+0x39
// 305: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000307:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 30f: 4c 89 f7                      movq    %r14, %rdi
// 312: 4c 89 e6                      movq    %r12, %rsi
// 315: 48 89 c1                      movq    %rax, %rcx
// 318: 41 ff d0                      callq   *%r8
// 31b: 49 29 df                      subq    %rbx, %r15
// 31e: 49 83 c7 b8                   addq    $-0x48, %r15
// 322: 49 c1 ef 03                   shrq    $0x3, %r15
// 326: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 32a: 31 c0                         xorl    %eax, %eax
// 32c: e9 7f fd ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 331: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_DELETE_FAST_code_body[818] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd7, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xdf, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xcf, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x78, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0x42, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x55, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x3c, 0xcf, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x7a, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4c, 0x8b, 0x64, 0xc3, 0x48, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0x12, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc7, 0x44, 0xc3, 0x48, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xdb, 0xeb, 0x15, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x97, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x49, 0x89, 0xc7, 0xeb, 0x4d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x20, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x78, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xc1, 0x41, 0xff, 0xd0, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0xe9, 0x7f, 0xfd, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_DELETE_FAST_code_holes[26] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x83},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x203, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x215, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x224, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x282, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x294, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2a8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_UnboundLocalError, 0x0},
    {0x2e4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2f1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_GetItem, 0x0},
    {0x2fd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x307, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00cannot access local variable '%s' where it is not associated with a value\x00/home/jglass/Documents/cpython/Include/object.h\x00"
// b3: 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_DELETE_FAST_data_body[185] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x27, 0x25, 0x73, 0x27, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_DELETE_FAST_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_DELETE_GLOBAL
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_DELETE_GLOBAL.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d7                   movq    (%r15,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 df                   movq    (%r15,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c cf                   leaq    (%r15,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 c7                      subq    %r8, %r15
// 8b: 49 83 c7 b8                   addq    $-0x48, %r15
// 8f: 49 c1 ef 03                   shrq    $0x3, %r15
// 93: 45 89 78 40                   movl    %r15d, 0x40(%r8)
// 97: 49 8b 00                      movq    (%r8), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 5c 24 10                movq    %r11, 0x10(%rsp)
// c4: 4c 89 14 24                   movq    %r10, (%rsp)
// c8: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cd: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 24 01 00 00             je      0x227 <_JIT_ENTRY+0x227>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 135: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// 13a: 78 21                         js      0x15d <_JIT_ENTRY+0x15d>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 146: ff d0                         callq   *%rax
// 148: 49 ff 0c 24                   decq    (%r12)
// 14c: 75 0f                         jne     0x15d <_JIT_ENTRY+0x15d>
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _Py_Dealloc
// 158: 4c 89 e7                      movq    %r12, %rdi
// 15b: ff d0                         callq   *%rax
// 15d: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 162: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 166: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 16b: 48 85 d2                      testq   %rdx, %rdx
// 16e: 0f 84 35 01 00 00             je      0x2a9 <_JIT_ENTRY+0x2a9>
// 174: 48 8b 0c 24                   movq    (%rsp), %rcx
// 178: 4d 8d 3c cf                   leaq    (%r15,%rcx,8), %r15
// 17c: 48 89 10                      movq    %rdx, (%rax)
// 17f: 49 8b 46 10                   movq    0x10(%r14), %rax
// 183: 48 8b 00                      movq    (%rax), %rax
// 186: 84 c0                         testb   %al, %al
// 188: 74 17                         je      0x1a1 <_JIT_ENTRY+0x1a1>
// 18a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018c:  R_X86_64_64  _Py_HandlePending
// 194: 4c 89 f7                      movq    %r14, %rdi
// 197: ff d0                         callq   *%rax
// 199: 85 c0                         testl   %eax, %eax
// 19b: 0f 85 0b 01 00 00             jne     0x2ac <_JIT_ENTRY+0x2ac>
// 1a1: 48 8b 03                      movq    (%rbx), %rax
// 1a4: 48 8b 7b 18                   movq    0x18(%rbx), %rdi
// 1a8: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1ac: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ae:  R_X86_64_64  _JIT_OPARG
// 1b6: 0f b7 c9                      movzwl  %cx, %ecx
// 1b9: 4c 8b 64 c8 18                movq    0x18(%rax,%rcx,8), %r12
// 1be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c0:  R_X86_64_64  PyDict_DelItem
// 1c8: 4c 89 e6                      movq    %r12, %rsi
// 1cb: ff d0                         callq   *%rax
// 1cd: 85 c0                         testl   %eax, %eax
// 1cf: 0f 84 ed 00 00 00             je      0x2c2 <_JIT_ENTRY+0x2c2>
// 1d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d7:  R_X86_64_64  PyExc_KeyError
// 1df: 48 8b 30                      movq    (%rax), %rsi
// 1e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e4:  R_X86_64_64  _PyErr_ExceptionMatches
// 1ec: 4c 89 f7                      movq    %r14, %rdi
// 1ef: ff d0                         callq   *%rax
// 1f1: 85 c0                         testl   %eax, %eax
// 1f3: 0f 84 b3 00 00 00             je      0x2ac <_JIT_ENTRY+0x2ac>
// 1f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fb:  R_X86_64_64  PyExc_NameError
// 203: 48 8b 30                      movq    (%rax), %rsi
// 206: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000208:  R_X86_64_64  .rodata.str1.1+0x39
// 210: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000212:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 21a: 4c 89 f7                      movq    %r14, %rdi
// 21d: 4c 89 e1                      movq    %r12, %rcx
// 220: ff d0                         callq   *%rax
// 222: e9 85 00 00 00                jmp     0x2ac <_JIT_ENTRY+0x2ac>
// 227: 41 83 fd 02                   cmpl    $0x2, %r13d
// 22b: 41 be 01 00 00 00             movl    $0x1, %r14d
// 231: 45 0f 43 f5                   cmovael %r13d, %r14d
// 235: 31 db                         xorl    %ebx, %ebx
// 237: eb 13                         jmp     0x24c <_JIT_ENTRY+0x24c>
// 239: 0f 1f 80 00 00 00 00          nopl    (%rax)
// 240: 48 ff c3                      incq    %rbx
// 243: 49 39 de                      cmpq    %rbx, %r14
// 246: 0f 84 b7 fe ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 24c: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 251: 49 8b 45 00                   movq    (%r13), %rax
// 255: 48 85 c0                      testq   %rax, %rax
// 258: 7e 06                         jle     0x260 <_JIT_ENTRY+0x260>
// 25a: 85 c0                         testl   %eax, %eax
// 25c: 78 e2                         js      0x240 <_JIT_ENTRY+0x240>
// 25e: eb 26                         jmp     0x286 <_JIT_ENTRY+0x286>
// 260: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000262:  R_X86_64_64  .rodata.str1.1
// 26a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 26f: 4c 89 ea                      movq    %r13, %rdx
// 272: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000274:  R_X86_64_64  _Py_NegativeRefcount
// 27c: ff d0                         callq   *%rax
// 27e: 49 8b 45 00                   movq    (%r13), %rax
// 282: 85 c0                         testl   %eax, %eax
// 284: 78 ba                         js      0x240 <_JIT_ENTRY+0x240>
// 286: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000288:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 290: ff d0                         callq   *%rax
// 292: 49 ff 4d 00                   decq    (%r13)
// 296: 75 a8                         jne     0x240 <_JIT_ENTRY+0x240>
// 298: 4c 89 ef                      movq    %r13, %rdi
// 29b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029d:  R_X86_64_64  _Py_Dealloc
// 2a5: ff d0                         callq   *%rax
// 2a7: eb 97                         jmp     0x240 <_JIT_ENTRY+0x240>
// 2a9: 49 89 c7                      movq    %rax, %r15
// 2ac: 49 29 df                      subq    %rbx, %r15
// 2af: 49 83 c7 b8                   addq    $-0x48, %r15
// 2b3: 49 c1 ef 03                   shrq    $0x3, %r15
// 2b7: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 2bb: 31 c0                         xorl    %eax, %eax
// 2bd: e9 ee fd ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 2c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c4:  R_X86_64_64  _JIT_CONTINUE
// 2cc: 48 89 df                      movq    %rbx, %rdi
// 2cf: 4c 89 fe                      movq    %r15, %rsi
// 2d2: 4c 89 f2                      movq    %r14, %rdx
// 2d5: 48 83 c4 28                   addq    $0x28, %rsp
// 2d9: 5b                            popq    %rbx
// 2da: 41 5c                         popq    %r12
// 2dc: 41 5d                         popq    %r13
// 2de: 41 5e                         popq    %r14
// 2e0: 41 5f                         popq    %r15
// 2e2: 5d                            popq    %rbp
// 2e3: ff e0                         jmpq    *%rax
// 2e5: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_DELETE_GLOBAL_code_body[742] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd7, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xdf, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xcf, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x78, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0x24, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x35, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x3c, 0xcf, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x0b, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x7b, 0x18, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x64, 0xc8, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xed, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xb3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xe1, 0xff, 0xd0, 0xe9, 0x85, 0x00, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xdb, 0xeb, 0x13, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0xb7, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x49, 0x89, 0xc7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0xe9, 0xee, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_DELETE_GLOBAL_code_holes[22] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_DelItem, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_KeyError, 0x0},
    {0x1e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_ExceptionMatches, 0x0},
    {0x1fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x212, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
    {0x262, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x274, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x288, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x29d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2c4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00name '%.200s' is not defined\x00"
// 56: 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_DELETE_GLOBAL_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_DELETE_GLOBAL_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_DELETE_NAME
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_DELETE_NAME.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d7                   movq    (%r15,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 df                   movq    (%r15,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c cf                   leaq    (%r15,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 c7                      subq    %r8, %r15
// 8b: 49 83 c7 b8                   addq    $-0x48, %r15
// 8f: 49 c1 ef 03                   shrq    $0x3, %r15
// 93: 45 89 78 40                   movl    %r15d, 0x40(%r8)
// 97: 49 8b 00                      movq    (%r8), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 5c 24 10                movq    %r11, 0x10(%rsp)
// c4: 4c 89 14 24                   movq    %r10, (%rsp)
// c8: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cd: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 09 01 00 00             je      0x20c <_JIT_ENTRY+0x20c>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 135: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// 13a: 78 21                         js      0x15d <_JIT_ENTRY+0x15d>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 146: ff d0                         callq   *%rax
// 148: 49 ff 0c 24                   decq    (%r12)
// 14c: 75 0f                         jne     0x15d <_JIT_ENTRY+0x15d>
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _Py_Dealloc
// 158: 4c 89 e7                      movq    %r12, %rdi
// 15b: ff d0                         callq   *%rax
// 15d: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 162: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 166: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 16b: 48 85 d2                      testq   %rdx, %rdx
// 16e: 0f 84 15 01 00 00             je      0x289 <_JIT_ENTRY+0x289>
// 174: 48 8b 0c 24                   movq    (%rsp), %rcx
// 178: 4d 8d 3c cf                   leaq    (%r15,%rcx,8), %r15
// 17c: 48 89 10                      movq    %rdx, (%rax)
// 17f: 49 8b 46 10                   movq    0x10(%r14), %rax
// 183: 48 8b 00                      movq    (%rax), %rax
// 186: 84 c0                         testb   %al, %al
// 188: 74 17                         je      0x1a1 <_JIT_ENTRY+0x1a1>
// 18a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018c:  R_X86_64_64  _Py_HandlePending
// 194: 4c 89 f7                      movq    %r14, %rdi
// 197: ff d0                         callq   *%rax
// 199: 85 c0                         testl   %eax, %eax
// 19b: 0f 85 19 01 00 00             jne     0x2ba <_JIT_ENTRY+0x2ba>
// 1a1: 48 8b 03                      movq    (%rbx), %rax
// 1a4: 48 8b 7b 28                   movq    0x28(%rbx), %rdi
// 1a8: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1ac: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ae:  R_X86_64_64  _JIT_OPARG
// 1b6: 0f b7 c9                      movzwl  %cx, %ecx
// 1b9: 4c 8b 64 c8 18                movq    0x18(%rax,%rcx,8), %r12
// 1be: 48 85 ff                      testq   %rdi, %rdi
// 1c1: 0f 84 c7 00 00 00             je      0x28e <_JIT_ENTRY+0x28e>
// 1c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c9:  R_X86_64_64  PyObject_DelItem
// 1d1: 4c 89 e6                      movq    %r12, %rsi
// 1d4: ff d0                         callq   *%rax
// 1d6: 85 c0                         testl   %eax, %eax
// 1d8: 0f 84 f2 00 00 00             je      0x2d0 <_JIT_ENTRY+0x2d0>
// 1de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e0:  R_X86_64_64  PyExc_NameError
// 1e8: 48 8b 30                      movq    (%rax), %rsi
// 1eb: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001ed:  R_X86_64_64  .rodata.str1.1+0x54
// 1f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f7:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 1ff: 4c 89 f7                      movq    %r14, %rdi
// 202: 4c 89 e1                      movq    %r12, %rcx
// 205: ff d0                         callq   *%rax
// 207: e9 ae 00 00 00                jmp     0x2ba <_JIT_ENTRY+0x2ba>
// 20c: 41 83 fd 02                   cmpl    $0x2, %r13d
// 210: 41 be 01 00 00 00             movl    $0x1, %r14d
// 216: 45 0f 43 f5                   cmovael %r13d, %r14d
// 21a: 31 db                         xorl    %ebx, %ebx
// 21c: eb 0e                         jmp     0x22c <_JIT_ENTRY+0x22c>
// 21e: 66 90                         nop
// 220: 48 ff c3                      incq    %rbx
// 223: 49 39 de                      cmpq    %rbx, %r14
// 226: 0f 84 d7 fe ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 22c: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 231: 49 8b 45 00                   movq    (%r13), %rax
// 235: 48 85 c0                      testq   %rax, %rax
// 238: 7e 06                         jle     0x240 <_JIT_ENTRY+0x240>
// 23a: 85 c0                         testl   %eax, %eax
// 23c: 78 e2                         js      0x220 <_JIT_ENTRY+0x220>
// 23e: eb 26                         jmp     0x266 <_JIT_ENTRY+0x266>
// 240: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000242:  R_X86_64_64  .rodata.str1.1
// 24a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 24f: 4c 89 ea                      movq    %r13, %rdx
// 252: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000254:  R_X86_64_64  _Py_NegativeRefcount
// 25c: ff d0                         callq   *%rax
// 25e: 49 8b 45 00                   movq    (%r13), %rax
// 262: 85 c0                         testl   %eax, %eax
// 264: 78 ba                         js      0x220 <_JIT_ENTRY+0x220>
// 266: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000268:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 270: ff d0                         callq   *%rax
// 272: 49 ff 4d 00                   decq    (%r13)
// 276: 75 a8                         jne     0x220 <_JIT_ENTRY+0x220>
// 278: 4c 89 ef                      movq    %r13, %rdi
// 27b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027d:  R_X86_64_64  _Py_Dealloc
// 285: ff d0                         callq   *%rax
// 287: eb 97                         jmp     0x220 <_JIT_ENTRY+0x220>
// 289: 49 89 c7                      movq    %rax, %r15
// 28c: eb 2c                         jmp     0x2ba <_JIT_ENTRY+0x2ba>
// 28e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000290:  R_X86_64_64  PyExc_SystemError
// 298: 48 8b 30                      movq    (%rax), %rsi
// 29b: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000029d:  R_X86_64_64  .rodata.str1.1+0x39
// 2a5: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000002a7:  R_X86_64_64  _PyErr_Format
// 2af: 4c 89 f7                      movq    %r14, %rdi
// 2b2: 4c 89 e1                      movq    %r12, %rcx
// 2b5: 31 c0                         xorl    %eax, %eax
// 2b7: 41 ff d0                      callq   *%r8
// 2ba: 49 29 df                      subq    %rbx, %r15
// 2bd: 49 83 c7 b8                   addq    $-0x48, %r15
// 2c1: 49 c1 ef 03                   shrq    $0x3, %r15
// 2c5: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 2c9: 31 c0                         xorl    %eax, %eax
// 2cb: e9 e0 fd ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 2d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d2:  R_X86_64_64  _JIT_CONTINUE
// 2da: 48 89 df                      movq    %rbx, %rdi
// 2dd: 4c 89 fe                      movq    %r15, %rsi
// 2e0: 4c 89 f2                      movq    %r14, %rdx
// 2e3: 48 83 c4 28                   addq    $0x28, %rsp
// 2e7: 5b                            popq    %rbx
// 2e8: 41 5c                         popq    %r12
// 2ea: 41 5d                         popq    %r13
// 2ec: 41 5e                         popq    %r14
// 2ee: 41 5f                         popq    %r15
// 2f0: 5d                            popq    %rbp
// 2f1: ff e0                         jmpq    *%rax
// 2f3: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_DELETE_NAME_code_body[756] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd7, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xdf, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xcf, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x78, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0x09, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x15, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x3c, 0xcf, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x19, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x7b, 0x28, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x64, 0xc8, 0x18, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xf2, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xe1, 0xff, 0xd0, 0xe9, 0xae, 0x00, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xdb, 0xeb, 0x0e, 0x66, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0xd7, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x49, 0x89, 0xc7, 0xeb, 0x2c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xe1, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0xe9, 0xe0, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_DELETE_NAME_code_holes[23] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_DelItem, 0x0},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x54},
    {0x1f7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
    {0x242, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x254, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x268, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x27d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x290, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x29d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x2d2, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00no locals when deleting %R\x00name '%.200s' is not defined\x00"
// 71: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_DELETE_NAME_data_body[121] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x25, 0x52, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_DELETE_NAME_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_DELETE_SUBSCR
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_DELETE_SUBSCR.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d7                   movq    (%r15,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 df                   movq    (%r15,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c cf                   leaq    (%r15,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 c7                      subq    %r8, %r15
// 8b: 49 83 c7 b8                   addq    $-0x48, %r15
// 8f: 49 c1 ef 03                   shrq    $0x3, %r15
// 93: 45 89 78 40                   movl    %r15d, 0x40(%r8)
// 97: 49 8b 00                      movq    (%r8), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 1c 24                   movq    %r11, (%rsp)
// c3: 4c 89 54 24 18                movq    %r10, 0x18(%rsp)
// c8: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// cd: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 aa 00 00 00             je      0x1ad <_JIT_ENTRY+0x1ad>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 135: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 13a: 4c 8b 6c 24 20                movq    0x20(%rsp), %r13
// 13f: 78 21                         js      0x162 <_JIT_ENTRY+0x162>
// 141: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000143:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 14b: ff d0                         callq   *%rax
// 14d: 49 ff 0c 24                   decq    (%r12)
// 151: 75 0f                         jne     0x162 <_JIT_ENTRY+0x162>
// 153: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000155:  R_X86_64_64  _Py_Dealloc
// 15d: 4c 89 e7                      movq    %r12, %rdi
// 160: ff d0                         callq   *%rax
// 162: 48 8b 04 24                   movq    (%rsp), %rax
// 166: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 16a: 4d 85 ed                      testq   %r13, %r13
// 16d: 0f 84 ac 01 00 00             je      0x31f <_JIT_ENTRY+0x31f>
// 173: 48 8b 4c 24 18                movq    0x18(%rsp), %rcx
// 178: 4d 8d 24 cf                   leaq    (%r15,%rcx,8), %r12
// 17c: 4c 89 28                      movq    %r13, (%rax)
// 17f: 49 8b 46 10                   movq    0x10(%r14), %rax
// 183: 48 8b 00                      movq    (%rax), %rax
// 186: 84 c0                         testb   %al, %al
// 188: 0f 84 9b 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_HandlePending
// 198: 4c 89 f7                      movq    %r14, %rdi
// 19b: ff d0                         callq   *%rax
// 19d: 85 c0                         testl   %eax, %eax
// 19f: 0f 84 84 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 1a5: 4c 89 e0                      movq    %r12, %rax
// 1a8: e9 72 01 00 00                jmp     0x31f <_JIT_ENTRY+0x31f>
// 1ad: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1b1: bb 01 00 00 00                movl    $0x1, %ebx
// 1b6: 41 0f 43 dd                   cmovael %r13d, %ebx
// 1ba: 45 31 f6                      xorl    %r14d, %r14d
// 1bd: eb 0d                         jmp     0x1cc <_JIT_ENTRY+0x1cc>
// 1bf: 90                            nop
// 1c0: 49 ff c6                      incq    %r14
// 1c3: 4c 39 f3                      cmpq    %r14, %rbx
// 1c6: 0f 84 37 ff ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 1cc: 4e 8b 6c f5 00                movq    (%rbp,%r14,8), %r13
// 1d1: 49 8b 45 00                   movq    (%r13), %rax
// 1d5: 48 85 c0                      testq   %rax, %rax
// 1d8: 7e 06                         jle     0x1e0 <_JIT_ENTRY+0x1e0>
// 1da: 85 c0                         testl   %eax, %eax
// 1dc: 78 e2                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 1de: eb 26                         jmp     0x206 <_JIT_ENTRY+0x206>
// 1e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e2:  R_X86_64_64  .rodata.str1.1
// 1ea: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ef: 4c 89 ea                      movq    %r13, %rdx
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _Py_NegativeRefcount
// 1fc: ff d0                         callq   *%rax
// 1fe: 49 8b 45 00                   movq    (%r13), %rax
// 202: 85 c0                         testl   %eax, %eax
// 204: 78 ba                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 210: ff d0                         callq   *%rax
// 212: 49 ff 4d 00                   decq    (%r13)
// 216: 75 a8                         jne     0x1c0 <_JIT_ENTRY+0x1c0>
// 218: 4c 89 ef                      movq    %r13, %rdi
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_Dealloc
// 225: ff d0                         callq   *%rax
// 227: eb 97                         jmp     0x1c0 <_JIT_ENTRY+0x1c0>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _JIT_OPARG
// 233: f7 d0                         notl    %eax
// 235: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 23a: 4c 63 f0                      movslq  %eax, %r14
// 23d: 4b 8b 6c f7 f0                movq    -0x10(%r15,%r14,8), %rbp
// 242: 4f 8b 6c f7 f8                movq    -0x8(%r15,%r14,8), %r13
// 247: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000249:  R_X86_64_64  PyObject_DelItem
// 251: 48 89 ef                      movq    %rbp, %rdi
// 254: 4c 89 ee                      movq    %r13, %rsi
// 257: ff d0                         callq   *%rax
// 259: 89 04 24                      movl    %eax, (%rsp)
// 25c: 48 8b 45 00                   movq    (%rbp), %rax
// 260: 48 85 c0                      testq   %rax, %rax
// 263: 7f 22                         jg      0x287 <_JIT_ENTRY+0x287>
// 265: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000267:  R_X86_64_64  .rodata.str1.1
// 26f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000271:  R_X86_64_64  _Py_NegativeRefcount
// 279: be 70 02 00 00                movl    $0x270, %esi            # imm = 0x270
// 27e: 48 89 ea                      movq    %rbp, %rdx
// 281: ff d0                         callq   *%rax
// 283: 48 8b 45 00                   movq    (%rbp), %rax
// 287: 85 c0                         testl   %eax, %eax
// 289: 78 21                         js      0x2ac <_JIT_ENTRY+0x2ac>
// 28b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 295: ff d0                         callq   *%rax
// 297: 48 ff 4d 00                   decq    (%rbp)
// 29b: 75 0f                         jne     0x2ac <_JIT_ENTRY+0x2ac>
// 29d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029f:  R_X86_64_64  _Py_Dealloc
// 2a7: 48 89 ef                      movq    %rbp, %rdi
// 2aa: ff d0                         callq   *%rax
// 2ac: 49 8b 45 00                   movq    (%r13), %rax
// 2b0: 48 85 c0                      testq   %rax, %rax
// 2b3: 7f 22                         jg      0x2d7 <_JIT_ENTRY+0x2d7>
// 2b5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002b7:  R_X86_64_64  .rodata.str1.1
// 2bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c1:  R_X86_64_64  _Py_NegativeRefcount
// 2c9: be 71 02 00 00                movl    $0x271, %esi            # imm = 0x271
// 2ce: 4c 89 ea                      movq    %r13, %rdx
// 2d1: ff d0                         callq   *%rax
// 2d3: 49 8b 45 00                   movq    (%r13), %rax
// 2d7: 4b 8d 1c f7                   leaq    (%r15,%r14,8), %rbx
// 2db: 48 83 c3 f0                   addq    $-0x10, %rbx
// 2df: 85 c0                         testl   %eax, %eax
// 2e1: 78 21                         js      0x304 <_JIT_ENTRY+0x304>
// 2e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2ed: ff d0                         callq   *%rax
// 2ef: 49 ff 4d 00                   decq    (%r13)
// 2f3: 75 0f                         jne     0x304 <_JIT_ENTRY+0x304>
// 2f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f7:  R_X86_64_64  _Py_Dealloc
// 2ff: 4c 89 ef                      movq    %r13, %rdi
// 302: ff d0                         callq   *%rax
// 304: 83 3c 24 00                   cmpl    $0x0, (%rsp)
// 308: 4c 0f 44 e3                   cmoveq  %rbx, %r12
// 30c: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 311: 74 21                         je      0x334 <_JIT_ENTRY+0x334>
// 313: 49 83 c4 f0                   addq    $-0x10, %r12
// 317: 4c 89 e0                      movq    %r12, %rax
// 31a: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 31f: 48 29 d8                      subq    %rbx, %rax
// 322: 48 83 c0 b8                   addq    $-0x48, %rax
// 326: 48 c1 e8 03                   shrq    $0x3, %rax
// 32a: 89 43 40                      movl    %eax, 0x40(%rbx)
// 32d: 31 c0                         xorl    %eax, %eax
// 32f: e9 7c fd ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 334: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000336:  R_X86_64_64  _JIT_CONTINUE
// 33e: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 343: 4c 89 e6                      movq    %r12, %rsi
// 346: 48 83 c4 28                   addq    $0x28, %rsp
// 34a: 5b                            popq    %rbx
// 34b: 41 5c                         popq    %r12
// 34d: 41 5d                         popq    %r13
// 34f: 41 5e                         popq    %r14
// 351: 41 5f                         popq    %r15
// 353: 5d                            popq    %rbp
// 354: ff e0                         jmpq    *%rax
// 356: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_DELETE_SUBSCR_code_body[855] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd7, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xdf, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xcf, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x78, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x1c, 0x24, 0x4c, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xaa, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x4c, 0x8b, 0x6c, 0x24, 0x20, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xc7, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xac, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x18, 0x4d, 0x8d, 0x24, 0xcf, 0x4c, 0x89, 0x28, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0x9b, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x84, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0xe9, 0x72, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xdd, 0x45, 0x31, 0xf6, 0xeb, 0x0d, 0x90, 0x49, 0xff, 0xc6, 0x4c, 0x39, 0xf3, 0x0f, 0x84, 0x37, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xf5, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xf0, 0x4b, 0x8b, 0x6c, 0xf7, 0xf0, 0x4f, 0x8b, 0x6c, 0xf7, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x70, 0x02, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x71, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x4b, 0x8d, 0x1c, 0xf7, 0x48, 0x83, 0xc3, 0xf0, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x83, 0x3c, 0x24, 0x00, 0x4c, 0x0f, 0x44, 0xe3, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x74, 0x21, 0x49, 0x83, 0xc4, 0xf0, 0x4c, 0x89, 0xe0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x7c, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_DELETE_SUBSCR_code_holes[25] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x143, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x155, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x249, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_DelItem, 0x0},
    {0x267, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x271, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x28d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x29f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2b7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2e5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2f7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x336, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_DELETE_SUBSCR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_DELETE_SUBSCR_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_DICT_MERGE
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_DICT_MERGE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d7                   movq    (%r15,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 df                   movq    (%r15,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c cf                   leaq    (%r15,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 c7                      subq    %r8, %r15
// 8b: 49 83 c7 b8                   addq    $-0x48, %r15
// 8f: 49 c1 ef 03                   shrq    $0x3, %r15
// 93: 45 89 78 40                   movl    %r15d, 0x40(%r8)
// 97: 49 8b 00                      movq    (%r8), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 5c 24 10                movq    %r11, 0x10(%rsp)
// c4: 4c 89 14 24                   movq    %r10, (%rsp)
// c8: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cd: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 a8 00 00 00             je      0x1ab <_JIT_ENTRY+0x1ab>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 135: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// 13a: 78 21                         js      0x15d <_JIT_ENTRY+0x15d>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 146: ff d0                         callq   *%rax
// 148: 49 ff 0c 24                   decq    (%r12)
// 14c: 75 0f                         jne     0x15d <_JIT_ENTRY+0x15d>
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _Py_Dealloc
// 158: 4c 89 e7                      movq    %r12, %rdi
// 15b: ff d0                         callq   *%rax
// 15d: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 162: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 166: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 16b: 48 85 c0                      testq   %rax, %rax
// 16e: 0f 84 dc 01 00 00             je      0x350 <_JIT_ENTRY+0x350>
// 174: 49 89 04 24                   movq    %rax, (%r12)
// 178: 49 8b 46 10                   movq    0x10(%r14), %rax
// 17c: 48 8b 00                      movq    (%rax), %rax
// 17f: 84 c0                         testb   %al, %al
// 181: 0f 84 a2 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _Py_HandlePending
// 191: 4c 89 f7                      movq    %r14, %rdi
// 194: ff d0                         callq   *%rax
// 196: 85 c0                         testl   %eax, %eax
// 198: 0f 84 8b 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 19e: 48 8b 04 24                   movq    (%rsp), %rax
// 1a2: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 1a6: e9 a5 01 00 00                jmp     0x350 <_JIT_ENTRY+0x350>
// 1ab: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1af: bb 01 00 00 00                movl    $0x1, %ebx
// 1b4: 41 0f 43 dd                   cmovael %r13d, %ebx
// 1b8: 45 31 f6                      xorl    %r14d, %r14d
// 1bb: eb 0f                         jmp     0x1cc <_JIT_ENTRY+0x1cc>
// 1bd: 0f 1f 00                      nopl    (%rax)
// 1c0: 49 ff c6                      incq    %r14
// 1c3: 4c 39 f3                      cmpq    %r14, %rbx
// 1c6: 0f 84 37 ff ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 1cc: 4e 8b 6c f5 00                movq    (%rbp,%r14,8), %r13
// 1d1: 49 8b 45 00                   movq    (%r13), %rax
// 1d5: 48 85 c0                      testq   %rax, %rax
// 1d8: 7e 06                         jle     0x1e0 <_JIT_ENTRY+0x1e0>
// 1da: 85 c0                         testl   %eax, %eax
// 1dc: 78 e2                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 1de: eb 26                         jmp     0x206 <_JIT_ENTRY+0x206>
// 1e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e2:  R_X86_64_64  .rodata.str1.1
// 1ea: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ef: 4c 89 ea                      movq    %r13, %rdx
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _Py_NegativeRefcount
// 1fc: ff d0                         callq   *%rax
// 1fe: 49 8b 45 00                   movq    (%r13), %rax
// 202: 85 c0                         testl   %eax, %eax
// 204: 78 ba                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 210: ff d0                         callq   *%rax
// 212: 49 ff 4d 00                   decq    (%r13)
// 216: 75 a8                         jne     0x1c0 <_JIT_ENTRY+0x1c0>
// 218: 4c 89 ef                      movq    %r13, %rdi
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_Dealloc
// 225: ff d0                         callq   *%rax
// 227: eb 97                         jmp     0x1c0 <_JIT_ENTRY+0x1c0>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _JIT_OPARG
// 233: 0f b7 c0                      movzwl  %ax, %eax
// 236: b9 fc ff ff ff                movl    $0xfffffffc, %ecx       # imm = 0xFFFFFFFC
// 23b: 29 c1                         subl    %eax, %ecx
// 23d: f7 d0                         notl    %eax
// 23f: 48 98                         cltq
// 241: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 245: 49 83 c4 f8                   addq    $-0x8, %r12
// 249: 4d 8b 6c c7 f8                movq    -0x8(%r15,%rax,8), %r13
// 24e: 48 8d 14 00                   leaq    (%rax,%rax), %rdx
// 252: 49 8b 3c d7                   movq    (%r15,%rdx,8), %rdi
// 256: 48 63 c9                      movslq  %ecx, %rcx
// 259: 48 01 c1                      addq    %rax, %rcx
// 25c: 4d 8b 3c cf                   movq    (%r15,%rcx,8), %r15
// 260: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000262:  R_X86_64_64  _PyDict_MergeEx
// 26a: 4c 89 ee                      movq    %r13, %rsi
// 26d: ba 02 00 00 00                movl    $0x2, %edx
// 272: ff d0                         callq   *%rax
// 274: 85 c0                         testl   %eax, %eax
// 276: 78 73                         js      0x2eb <_JIT_ENTRY+0x2eb>
// 278: 49 8b 45 00                   movq    (%r13), %rax
// 27c: 48 85 c0                      testq   %rax, %rax
// 27f: 7f 22                         jg      0x2a3 <_JIT_ENTRY+0x2a3>
// 281: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000283:  R_X86_64_64  .rodata.str1.1
// 28b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028d:  R_X86_64_64  _Py_NegativeRefcount
// 295: be d6 05 00 00                movl    $0x5d6, %esi            # imm = 0x5D6
// 29a: 4c 89 ea                      movq    %r13, %rdx
// 29d: ff d0                         callq   *%rax
// 29f: 49 8b 45 00                   movq    (%r13), %rax
// 2a3: 85 c0                         testl   %eax, %eax
// 2a5: 78 21                         js      0x2c8 <_JIT_ENTRY+0x2c8>
// 2a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2b1: ff d0                         callq   *%rax
// 2b3: 49 ff 4d 00                   decq    (%r13)
// 2b7: 75 0f                         jne     0x2c8 <_JIT_ENTRY+0x2c8>
// 2b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bb:  R_X86_64_64  _Py_Dealloc
// 2c3: 4c 89 ef                      movq    %r13, %rdi
// 2c6: ff d0                         callq   *%rax
// 2c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ca:  R_X86_64_64  _JIT_CONTINUE
// 2d2: 48 89 df                      movq    %rbx, %rdi
// 2d5: 4c 89 e6                      movq    %r12, %rsi
// 2d8: 4c 89 f2                      movq    %r14, %rdx
// 2db: 48 83 c4 28                   addq    $0x28, %rsp
// 2df: 5b                            popq    %rbx
// 2e0: 41 5c                         popq    %r12
// 2e2: 41 5d                         popq    %r13
// 2e4: 41 5e                         popq    %r14
// 2e6: 41 5f                         popq    %r15
// 2e8: 5d                            popq    %rbp
// 2e9: ff e0                         jmpq    *%rax
// 2eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ed:  R_X86_64_64  _PyEval_FormatKwargsError
// 2f5: 4c 89 f7                      movq    %r14, %rdi
// 2f8: 4c 89 fe                      movq    %r15, %rsi
// 2fb: 4c 89 ea                      movq    %r13, %rdx
// 2fe: ff d0                         callq   *%rax
// 300: 49 8b 45 00                   movq    (%r13), %rax
// 304: 48 85 c0                      testq   %rax, %rax
// 307: 7f 22                         jg      0x32b <_JIT_ENTRY+0x32b>
// 309: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000030b:  R_X86_64_64  .rodata.str1.1
// 313: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000315:  R_X86_64_64  _Py_NegativeRefcount
// 31d: be d3 05 00 00                movl    $0x5d3, %esi            # imm = 0x5D3
// 322: 4c 89 ea                      movq    %r13, %rdx
// 325: ff d0                         callq   *%rax
// 327: 49 8b 45 00                   movq    (%r13), %rax
// 32b: 85 c0                         testl   %eax, %eax
// 32d: 78 21                         js      0x350 <_JIT_ENTRY+0x350>
// 32f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000331:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 339: ff d0                         callq   *%rax
// 33b: 49 ff 4d 00                   decq    (%r13)
// 33f: 75 0f                         jne     0x350 <_JIT_ENTRY+0x350>
// 341: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000343:  R_X86_64_64  _Py_Dealloc
// 34b: 4c 89 ef                      movq    %r13, %rdi
// 34e: ff d0                         callq   *%rax
// 350: 49 29 dc                      subq    %rbx, %r12
// 353: 49 83 c4 b8                   addq    $-0x48, %r12
// 357: 49 c1 ec 03                   shrq    $0x3, %r12
// 35b: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 35f: 31 c0                         xorl    %eax, %eax
// 361: e9 4a fd ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 366: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_DICT_MERGE_code_body[871] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd7, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xdf, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xcf, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x78, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xa8, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x4d, 0x8d, 0x24, 0xc7, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xdc, 0x01, 0x00, 0x00, 0x49, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xa2, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x8b, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x24, 0xc7, 0xe9, 0xa5, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xdd, 0x45, 0x31, 0xf6, 0xeb, 0x0f, 0x0f, 0x1f, 0x00, 0x49, 0xff, 0xc6, 0x4c, 0x39, 0xf3, 0x0f, 0x84, 0x37, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xf5, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfc, 0xff, 0xff, 0xff, 0x29, 0xc1, 0xf7, 0xd0, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x83, 0xc4, 0xf8, 0x4d, 0x8b, 0x6c, 0xc7, 0xf8, 0x48, 0x8d, 0x14, 0x00, 0x49, 0x8b, 0x3c, 0xd7, 0x48, 0x63, 0xc9, 0x48, 0x01, 0xc1, 0x4d, 0x8b, 0x3c, 0xcf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xee, 0xba, 0x02, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x73, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd6, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd3, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x4a, 0xfd, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_DICT_MERGE_code_holes[26] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x262, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_MergeEx, 0x0},
    {0x283, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x28d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2a9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2ca, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatKwargsError, 0x0},
    {0x30b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x315, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x331, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x343, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_DICT_MERGE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_DICT_MERGE_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_DICT_UPDATE
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_DICT_UPDATE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d7                   movq    (%r15,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 df                   movq    (%r15,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c cf                   leaq    (%r15,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 c7                      subq    %r8, %r15
// 8b: 49 83 c7 b8                   addq    $-0x48, %r15
// 8f: 49 c1 ef 03                   shrq    $0x3, %r15
// 93: 45 89 78 40                   movl    %r15d, 0x40(%r8)
// 97: 49 8b 00                      movq    (%r8), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 5c 24 10                movq    %r11, 0x10(%rsp)
// c4: 4c 89 14 24                   movq    %r10, (%rsp)
// c8: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cd: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 a8 00 00 00             je      0x1ab <_JIT_ENTRY+0x1ab>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 135: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// 13a: 78 21                         js      0x15d <_JIT_ENTRY+0x15d>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 146: ff d0                         callq   *%rax
// 148: 49 ff 0c 24                   decq    (%r12)
// 14c: 75 0f                         jne     0x15d <_JIT_ENTRY+0x15d>
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _Py_Dealloc
// 158: 4c 89 e7                      movq    %r12, %rdi
// 15b: ff d0                         callq   *%rax
// 15d: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 162: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 166: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 16b: 48 85 c0                      testq   %rax, %rax
// 16e: 0f 84 03 02 00 00             je      0x377 <_JIT_ENTRY+0x377>
// 174: 49 89 04 24                   movq    %rax, (%r12)
// 178: 49 8b 46 10                   movq    0x10(%r14), %rax
// 17c: 48 8b 00                      movq    (%rax), %rax
// 17f: 84 c0                         testb   %al, %al
// 181: 0f 84 a2 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _Py_HandlePending
// 191: 4c 89 f7                      movq    %r14, %rdi
// 194: ff d0                         callq   *%rax
// 196: 85 c0                         testl   %eax, %eax
// 198: 0f 84 8b 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 19e: 48 8b 04 24                   movq    (%rsp), %rax
// 1a2: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 1a6: e9 cc 01 00 00                jmp     0x377 <_JIT_ENTRY+0x377>
// 1ab: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1af: bb 01 00 00 00                movl    $0x1, %ebx
// 1b4: 41 0f 43 dd                   cmovael %r13d, %ebx
// 1b8: 45 31 f6                      xorl    %r14d, %r14d
// 1bb: eb 0f                         jmp     0x1cc <_JIT_ENTRY+0x1cc>
// 1bd: 0f 1f 00                      nopl    (%rax)
// 1c0: 49 ff c6                      incq    %r14
// 1c3: 4c 39 f3                      cmpq    %r14, %rbx
// 1c6: 0f 84 37 ff ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 1cc: 4e 8b 6c f5 00                movq    (%rbp,%r14,8), %r13
// 1d1: 49 8b 45 00                   movq    (%r13), %rax
// 1d5: 48 85 c0                      testq   %rax, %rax
// 1d8: 7e 06                         jle     0x1e0 <_JIT_ENTRY+0x1e0>
// 1da: 85 c0                         testl   %eax, %eax
// 1dc: 78 e2                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 1de: eb 26                         jmp     0x206 <_JIT_ENTRY+0x206>
// 1e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e2:  R_X86_64_64  .rodata.str1.1
// 1ea: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ef: 4c 89 ea                      movq    %r13, %rdx
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _Py_NegativeRefcount
// 1fc: ff d0                         callq   *%rax
// 1fe: 49 8b 45 00                   movq    (%r13), %rax
// 202: 85 c0                         testl   %eax, %eax
// 204: 78 ba                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 210: ff d0                         callq   *%rax
// 212: 49 ff 4d 00                   decq    (%r13)
// 216: 75 a8                         jne     0x1c0 <_JIT_ENTRY+0x1c0>
// 218: 4c 89 ef                      movq    %r13, %rdi
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_Dealloc
// 225: ff d0                         callq   *%rax
// 227: eb 97                         jmp     0x1c0 <_JIT_ENTRY+0x1c0>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _JIT_OPARG
// 233: f7 d0                         notl    %eax
// 235: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 23a: 48 98                         cltq
// 23c: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 240: 49 83 c4 f8                   addq    $-0x8, %r12
// 244: 4d 8b 6c c7 f8                movq    -0x8(%r15,%rax,8), %r13
// 249: 48 01 c0                      addq    %rax, %rax
// 24c: 49 8b 3c c7                   movq    (%r15,%rax,8), %rdi
// 250: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000252:  R_X86_64_64  PyDict_Update
// 25a: 4c 89 ee                      movq    %r13, %rsi
// 25d: ff d0                         callq   *%rax
// 25f: 85 c0                         testl   %eax, %eax
// 261: 78 73                         js      0x2d6 <_JIT_ENTRY+0x2d6>
// 263: 49 8b 45 00                   movq    (%r13), %rax
// 267: 48 85 c0                      testq   %rax, %rax
// 26a: 7f 22                         jg      0x28e <_JIT_ENTRY+0x28e>
// 26c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000026e:  R_X86_64_64  .rodata.str1.1
// 276: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000278:  R_X86_64_64  _Py_NegativeRefcount
// 280: be c4 05 00 00                movl    $0x5c4, %esi            # imm = 0x5C4
// 285: 4c 89 ea                      movq    %r13, %rdx
// 288: ff d0                         callq   *%rax
// 28a: 49 8b 45 00                   movq    (%r13), %rax
// 28e: 85 c0                         testl   %eax, %eax
// 290: 78 21                         js      0x2b3 <_JIT_ENTRY+0x2b3>
// 292: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000294:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 29c: ff d0                         callq   *%rax
// 29e: 49 ff 4d 00                   decq    (%r13)
// 2a2: 75 0f                         jne     0x2b3 <_JIT_ENTRY+0x2b3>
// 2a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a6:  R_X86_64_64  _Py_Dealloc
// 2ae: 4c 89 ef                      movq    %r13, %rdi
// 2b1: ff d0                         callq   *%rax
// 2b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b5:  R_X86_64_64  _JIT_CONTINUE
// 2bd: 48 89 df                      movq    %rbx, %rdi
// 2c0: 4c 89 e6                      movq    %r12, %rsi
// 2c3: 4c 89 f2                      movq    %r14, %rdx
// 2c6: 48 83 c4 28                   addq    $0x28, %rsp
// 2ca: 5b                            popq    %rbx
// 2cb: 41 5c                         popq    %r12
// 2cd: 41 5d                         popq    %r13
// 2cf: 41 5e                         popq    %r14
// 2d1: 41 5f                         popq    %r15
// 2d3: 5d                            popq    %rbp
// 2d4: ff e0                         jmpq    *%rax
// 2d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d8:  R_X86_64_64  PyExc_AttributeError
// 2e0: 48 8b 30                      movq    (%rax), %rsi
// 2e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e5:  R_X86_64_64  _PyErr_ExceptionMatches
// 2ed: 4c 89 f7                      movq    %r14, %rdi
// 2f0: ff d0                         callq   *%rax
// 2f2: 85 c0                         testl   %eax, %eax
// 2f4: 74 31                         je      0x327 <_JIT_ENTRY+0x327>
// 2f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f8:  R_X86_64_64  PyExc_TypeError
// 300: 48 8b 30                      movq    (%rax), %rsi
// 303: 49 8b 45 08                   movq    0x8(%r13), %rax
// 307: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 30b: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000030d:  R_X86_64_64  .rodata.str1.1+0x39
// 315: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000317:  R_X86_64_64  _PyErr_Format
// 31f: 4c 89 f7                      movq    %r14, %rdi
// 322: 31 c0                         xorl    %eax, %eax
// 324: 41 ff d0                      callq   *%r8
// 327: 49 8b 45 00                   movq    (%r13), %rax
// 32b: 48 85 c0                      testq   %rax, %rax
// 32e: 7f 22                         jg      0x352 <_JIT_ENTRY+0x352>
// 330: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000332:  R_X86_64_64  .rodata.str1.1
// 33a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033c:  R_X86_64_64  _Py_NegativeRefcount
// 344: be c1 05 00 00                movl    $0x5c1, %esi            # imm = 0x5C1
// 349: 4c 89 ea                      movq    %r13, %rdx
// 34c: ff d0                         callq   *%rax
// 34e: 49 8b 45 00                   movq    (%r13), %rax
// 352: 85 c0                         testl   %eax, %eax
// 354: 78 21                         js      0x377 <_JIT_ENTRY+0x377>
// 356: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000358:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 360: ff d0                         callq   *%rax
// 362: 49 ff 4d 00                   decq    (%r13)
// 366: 75 0f                         jne     0x377 <_JIT_ENTRY+0x377>
// 368: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000036a:  R_X86_64_64  _Py_Dealloc
// 372: 4c 89 ef                      movq    %r13, %rdi
// 375: ff d0                         callq   *%rax
// 377: 49 29 dc                      subq    %rbx, %r12
// 37a: 49 83 c4 b8                   addq    $-0x48, %r12
// 37e: 49 c1 ec 03                   shrq    $0x3, %r12
// 382: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 386: 31 c0                         xorl    %eax, %eax
// 388: e9 23 fd ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 38d: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_DICT_UPDATE_code_body[910] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd7, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xdf, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xcf, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x78, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xa8, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x4d, 0x8d, 0x24, 0xc7, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x03, 0x02, 0x00, 0x00, 0x49, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xa2, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x8b, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x24, 0xc7, 0xe9, 0xcc, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xdd, 0x45, 0x31, 0xf6, 0xeb, 0x0f, 0x0f, 0x1f, 0x00, 0x49, 0xff, 0xc6, 0x4c, 0x39, 0xf3, 0x0f, 0x84, 0x37, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xf5, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x83, 0xc4, 0xf8, 0x4d, 0x8b, 0x6c, 0xc7, 0xf8, 0x48, 0x01, 0xc0, 0x49, 0x8b, 0x3c, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x73, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x31, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x49, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x23, 0xfd, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_DICT_UPDATE_code_holes[30] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Update, 0x0},
    {0x26e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x278, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x294, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2a6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2b5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_AttributeError, 0x0},
    {0x2e5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_ExceptionMatches, 0x0},
    {0x2f8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x30d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x317, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x332, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x33c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x358, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x36a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'%.200s' object is not a mapping\x00"
// 5a: 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_DICT_UPDATE_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x20, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_DICT_UPDATE_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_END_SEND
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_END_SEND.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d6                   movq    (%r14,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 de                   movq    (%r14,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c ce                   leaq    (%r14,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 c6                      subq    %r8, %r14
// 8b: 49 83 c6 b8                   addq    $-0x48, %r14
// 8f: 49 c1 ee 03                   shrq    $0x3, %r14
// 93: 45 89 70 40                   movl    %r14d, 0x40(%r8)
// 97: 49 8b 00                      movq    (%r8), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 5c 24 20                movq    %r11, 0x20(%rsp)
// c4: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c9: 48 89 14 24                   movq    %rdx, (%rsp)
// cd: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 b3 00 00 00             je      0x1b6 <_JIT_ENTRY+0x1b6>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 135: 4c 8b 3c 24                   movq    (%rsp), %r15
// 139: 78 21                         js      0x15c <_JIT_ENTRY+0x15c>
// 13b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 145: ff d0                         callq   *%rax
// 147: 49 ff 0c 24                   decq    (%r12)
// 14b: 75 0f                         jne     0x15c <_JIT_ENTRY+0x15c>
// 14d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014f:  R_X86_64_64  _Py_Dealloc
// 157: 4c 89 e7                      movq    %r12, %rdi
// 15a: ff d0                         callq   *%rax
// 15c: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 161: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 165: 48 8b 4c 24 18                movq    0x18(%rsp), %rcx
// 16a: 48 85 c9                      testq   %rcx, %rcx
// 16d: 74 32                         je      0x1a1 <_JIT_ENTRY+0x1a1>
// 16f: 48 89 08                      movq    %rcx, (%rax)
// 172: 49 8b 47 10                   movq    0x10(%r15), %rax
// 176: 48 8b 00                      movq    (%rax), %rax
// 179: 84 c0                         testb   %al, %al
// 17b: 0f 84 b8 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  _Py_HandlePending
// 18b: 4c 89 ff                      movq    %r15, %rdi
// 18e: ff d0                         callq   *%rax
// 190: 85 c0                         testl   %eax, %eax
// 192: 0f 84 a1 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 198: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 19d: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 1a1: 48 29 d8                      subq    %rbx, %rax
// 1a4: 48 83 c0 b8                   addq    $-0x48, %rax
// 1a8: 48 c1 e8 03                   shrq    $0x3, %rax
// 1ac: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1af: 31 c0                         xorl    %eax, %eax
// 1b1: e9 fa fe ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 1b6: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1ba: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1c0: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1c4: 31 db                         xorl    %ebx, %ebx
// 1c6: eb 14                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c8: 0f 1f 84 00 00 00 00 00       nopl    (%rax,%rax)
// 1d0: 48 ff c3                      incq    %rbx
// 1d3: 49 39 df                      cmpq    %rbx, %r15
// 1d6: 0f 84 27 ff ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 1dc: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1e1: 49 8b 45 00                   movq    (%r13), %rax
// 1e5: 48 85 c0                      testq   %rax, %rax
// 1e8: 7e 06                         jle     0x1f0 <_JIT_ENTRY+0x1f0>
// 1ea: 85 c0                         testl   %eax, %eax
// 1ec: 78 e2                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1ee: eb 26                         jmp     0x216 <_JIT_ENTRY+0x216>
// 1f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f2:  R_X86_64_64  .rodata.str1.1
// 1fa: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ff: 4c 89 ea                      movq    %r13, %rdx
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_NegativeRefcount
// 20c: ff d0                         callq   *%rax
// 20e: 49 8b 45 00                   movq    (%r13), %rax
// 212: 85 c0                         testl   %eax, %eax
// 214: 78 ba                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 220: ff d0                         callq   *%rax
// 222: 49 ff 4d 00                   decq    (%r13)
// 226: 75 a8                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 228: 4c 89 ef                      movq    %r13, %rdi
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_Dealloc
// 235: ff d0                         callq   *%rax
// 237: eb 97                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _JIT_OPARG
// 243: f7 d0                         notl    %eax
// 245: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 24a: 4c 63 f8                      movslq  %eax, %r15
// 24d: 4f 8b 64 fe f0                movq    -0x10(%r14,%r15,8), %r12
// 252: 4b 8b 5c fe f8                movq    -0x8(%r14,%r15,8), %rbx
// 257: 49 8b 04 24                   movq    (%r12), %rax
// 25b: 48 85 c0                      testq   %rax, %rax
// 25e: 7f 22                         jg      0x282 <_JIT_ENTRY+0x282>
// 260: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000262:  R_X86_64_64  .rodata.str1.1
// 26a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026c:  R_X86_64_64  _Py_NegativeRefcount
// 274: be 66 00 00 00                movl    $0x66, %esi
// 279: 4c 89 e2                      movq    %r12, %rdx
// 27c: ff d0                         callq   *%rax
// 27e: 49 8b 04 24                   movq    (%r12), %rax
// 282: 4f 8d 2c fe                   leaq    (%r14,%r15,8), %r13
// 286: 49 83 c5 f8                   addq    $-0x8, %r13
// 28a: 85 c0                         testl   %eax, %eax
// 28c: 78 21                         js      0x2af <_JIT_ENTRY+0x2af>
// 28e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000290:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 298: ff d0                         callq   *%rax
// 29a: 49 ff 0c 24                   decq    (%r12)
// 29e: 75 0f                         jne     0x2af <_JIT_ENTRY+0x2af>
// 2a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a2:  R_X86_64_64  _Py_Dealloc
// 2aa: 4c 89 e7                      movq    %r12, %rdi
// 2ad: ff d0                         callq   *%rax
// 2af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b1:  R_X86_64_64  _JIT_OPARG
// 2b9: f7 d0                         notl    %eax
// 2bb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 2c0: 48 98                         cltq
// 2c2: 49 89 5c c6 f0                movq    %rbx, -0x10(%r14,%rax,8)
// 2c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c9:  R_X86_64_64  _JIT_CONTINUE
// 2d1: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 2d6: 4c 89 ee                      movq    %r13, %rsi
// 2d9: 48 8b 14 24                   movq    (%rsp), %rdx
// 2dd: 48 83 c4 28                   addq    $0x28, %rsp
// 2e1: 5b                            popq    %rbx
// 2e2: 41 5c                         popq    %r12
// 2e4: 41 5d                         popq    %r13
// 2e6: 41 5e                         popq    %r14
// 2e8: 41 5f                         popq    %r15
// 2ea: 5d                            popq    %rbp
// 2eb: ff e0                         jmpq    *%rax
// 2ed: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_END_SEND_code_body[750] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd6, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xde, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xce, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc6, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x70, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x20, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x14, 0x24, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xb3, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x4c, 0x8b, 0x3c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x4c, 0x24, 0x18, 0x48, 0x85, 0xc9, 0x74, 0x32, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xb8, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xa1, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xfa, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xdb, 0xeb, 0x14, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0x27, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xf8, 0x4f, 0x8b, 0x64, 0xfe, 0xf0, 0x4b, 0x8b, 0x5c, 0xfe, 0xf8, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4f, 0x8d, 0x2c, 0xfe, 0x49, 0x83, 0xc5, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x5c, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xee, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_END_SEND_code_holes[21] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x262, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x26c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x290, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2a2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2b1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2c9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_END_SEND_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_END_SEND_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_EXIT_INIT_CHECK
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_EXIT_INIT_CHECK.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4f 8d 04 c6                   leaq    (%r14,%r8,8), %r8
// 79: 49 8b 38                      movq    (%r8), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 49 29 de                      subq    %rbx, %r14
// 8a: 49 83 c6 b8                   addq    $-0x48, %r14
// 8e: 49 c1 ee 03                   shrq    $0x3, %r14
// 92: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 96: 48 8b 03                      movq    (%rbx), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// c3: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// c8: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cd: 48 85 c0                      testq   %rax, %rax
// d0: 40 0f 94 c5                   sete    %bpl
// d4: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// d8: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// dd: 49 8d 70 08                   leaq    0x8(%r8), %rsi
// e1: 48 63 d0                      movslq  %eax, %rdx
// e4: ff 51 08                      callq   *0x8(%rcx)
// e7: 48 89 04 24                   movq    %rax, (%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 f7 00 00 00             je      0x1fb <_JIT_ENTRY+0x1fb>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// 136: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 13b: 78 21                         js      0x15e <_JIT_ENTRY+0x15e>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 147: ff d0                         callq   *%rax
// 149: 49 ff 0c 24                   decq    (%r12)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_Dealloc
// 159: 4c 89 e7                      movq    %r12, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 163: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 167: 48 8b 0c 24                   movq    (%rsp), %rcx
// 16b: 48 85 c9                      testq   %rcx, %rcx
// 16e: 0f 84 15 01 00 00             je      0x289 <_JIT_ENTRY+0x289>
// 174: 4f 8d 3c fe                   leaq    (%r14,%r15,8), %r15
// 178: 48 89 08                      movq    %rcx, (%rax)
// 17b: 49 8b 45 10                   movq    0x10(%r13), %rax
// 17f: 48 8b 00                      movq    (%rax), %rax
// 182: 84 c0                         testb   %al, %al
// 184: 74 17                         je      0x19d <_JIT_ENTRY+0x19d>
// 186: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000188:  R_X86_64_64  _Py_HandlePending
// 190: 4c 89 ef                      movq    %r13, %rdi
// 193: ff d0                         callq   *%rax
// 195: 85 c0                         testl   %eax, %eax
// 197: 0f 85 ef 00 00 00             jne     0x28c <_JIT_ENTRY+0x28c>
// 19d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019f:  R_X86_64_64  _JIT_OPARG
// 1a7: f7 d0                         notl    %eax
// 1a9: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1ae: 48 63 c8                      movslq  %eax, %rcx
// 1b1: 49 8b 44 ce f8                movq    -0x8(%r14,%rcx,8), %rax
// 1b6: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001b8:  R_X86_64_64  _Py_NoneStruct
// 1c0: 48 39 d0                      cmpq    %rdx, %rax
// 1c3: 0f 84 d9 00 00 00             je      0x2a2 <_JIT_ENTRY+0x2a2>
// 1c9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001cb:  R_X86_64_64  PyExc_TypeError
// 1d3: 48 8b 39                      movq    (%rcx), %rdi
// 1d6: 48 8b 40 08                   movq    0x8(%rax), %rax
// 1da: 48 8b 50 18                   movq    0x18(%rax), %rdx
// 1de: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001e0:  R_X86_64_64  .rodata.str1.1+0x39
// 1e8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ea:  R_X86_64_64  PyErr_Format
// 1f2: 31 c0                         xorl    %eax, %eax
// 1f4: ff d1                         callq   *%rcx
// 1f6: e9 91 00 00 00                jmp     0x28c <_JIT_ENTRY+0x28c>
// 1fb: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1ff: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 205: 45 0f 43 fd                   cmovael %r13d, %r15d
// 209: 31 ed                         xorl    %ebp, %ebp
// 20b: eb 0f                         jmp     0x21c <_JIT_ENTRY+0x21c>
// 20d: 0f 1f 00                      nopl    (%rax)
// 210: 48 ff c5                      incq    %rbp
// 213: 49 39 ef                      cmpq    %rbp, %r15
// 216: 0f 84 e8 fe ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 21c: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 221: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 225: 49 8b 45 00                   movq    (%r13), %rax
// 229: 48 85 c0                      testq   %rax, %rax
// 22c: 7e 12                         jle     0x240 <_JIT_ENTRY+0x240>
// 22e: 85 c0                         testl   %eax, %eax
// 230: 78 de                         js      0x210 <_JIT_ENTRY+0x210>
// 232: eb 32                         jmp     0x266 <_JIT_ENTRY+0x266>
// 234: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 240: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000242:  R_X86_64_64  .rodata.str1.1
// 24a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 24f: 4c 89 ea                      movq    %r13, %rdx
// 252: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000254:  R_X86_64_64  _Py_NegativeRefcount
// 25c: ff d0                         callq   *%rax
// 25e: 49 8b 45 00                   movq    (%r13), %rax
// 262: 85 c0                         testl   %eax, %eax
// 264: 78 aa                         js      0x210 <_JIT_ENTRY+0x210>
// 266: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000268:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 270: ff d0                         callq   *%rax
// 272: 49 ff 4d 00                   decq    (%r13)
// 276: 75 98                         jne     0x210 <_JIT_ENTRY+0x210>
// 278: 4c 89 ef                      movq    %r13, %rdi
// 27b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027d:  R_X86_64_64  _Py_Dealloc
// 285: ff d0                         callq   *%rax
// 287: eb 87                         jmp     0x210 <_JIT_ENTRY+0x210>
// 289: 49 89 c7                      movq    %rax, %r15
// 28c: 49 29 df                      subq    %rbx, %r15
// 28f: 49 83 c7 b8                   addq    $-0x48, %r15
// 293: 49 c1 ef 03                   shrq    $0x3, %r15
// 297: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 29b: 31 c0                         xorl    %eax, %eax
// 29d: e9 0d fe ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 2a2: 49 8d 34 ce                   leaq    (%r14,%rcx,8), %rsi
// 2a6: 48 83 c6 f8                   addq    $-0x8, %rsi
// 2aa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ac:  R_X86_64_64  _JIT_CONTINUE
// 2b4: 48 89 df                      movq    %rbx, %rdi
// 2b7: 4c 89 ea                      movq    %r13, %rdx
// 2ba: 48 83 c4 28                   addq    $0x28, %rsp
// 2be: 5b                            popq    %rbx
// 2bf: 41 5c                         popq    %r12
// 2c1: 41 5d                         popq    %r13
// 2c3: 41 5e                         popq    %r14
// 2c5: 41 5f                         popq    %r15
// 2c7: 5d                            popq    %rbp
// 2c8: ff e0                         jmpq    *%rax
// 2ca: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_EXIT_INIT_CHECK_code_body[715] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xce, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4f, 0x8d, 0x04, 0xc6, 0x49, 0x8b, 0x38, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x70, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xf7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x15, 0x01, 0x00, 0x00, 0x4f, 0x8d, 0x3c, 0xfe, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xef, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc8, 0x49, 0x8b, 0x44, 0xce, 0xf8, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xd0, 0x0f, 0x84, 0xd9, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x39, 0x48, 0x8b, 0x40, 0x08, 0x48, 0x8b, 0x50, 0x18, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xc0, 0xff, 0xd1, 0xe9, 0x91, 0x00, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xed, 0xeb, 0x0f, 0x0f, 0x1f, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xef, 0x0f, 0x84, 0xe8, 0xfe, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x49, 0x89, 0xc7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0xe9, 0x0d, 0xfe, 0xff, 0xff, 0x49, 0x8d, 0x34, 0xce, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_EXIT_INIT_CHECK_code_holes[20] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x19f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1ea, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_Format, 0x0},
    {0x242, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x254, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x268, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x27d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2ac, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00__init__() should return None, not '%.200s'\x00"
// 65: 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_EXIT_INIT_CHECK_data_body[105] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x5f, 0x28, 0x29, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x4e, 0x6f, 0x6e, 0x65, 0x2c, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_EXIT_INIT_CHECK_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_EXIT_TRACE
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_EXIT_TRACE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4f 8d 04 c6                   leaq    (%r14,%r8,8), %r8
// 79: 49 8b 38                      movq    (%r8), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 49 29 de                      subq    %rbx, %r14
// 8a: 49 83 c6 b8                   addq    $-0x48, %r14
// 8e: 49 c1 ee 03                   shrq    $0x3, %r14
// 92: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 96: 48 8b 03                      movq    (%rbx), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c3: 4c 89 0c 24                   movq    %r9, (%rsp)
// c7: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cc: 48 85 c0                      testq   %rax, %rax
// cf: 40 0f 94 c5                   sete    %bpl
// d3: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// d7: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// dc: 49 8d 70 08                   leaq    0x8(%r8), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 a2 00 00 00             je      0x1a6 <_JIT_ENTRY+0x1a6>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 136: 78 21                         js      0x159 <_JIT_ENTRY+0x159>
// 138: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 142: ff d0                         callq   *%rax
// 144: 49 ff 0c 24                   decq    (%r12)
// 148: 75 0f                         jne     0x159 <_JIT_ENTRY+0x159>
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_Dealloc
// 154: 4c 89 e7                      movq    %r12, %rdi
// 157: ff d0                         callq   *%rax
// 159: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 15e: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 162: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 167: 48 85 d2                      testq   %rdx, %rdx
// 16a: 0f 84 c9 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 170: 48 8b 0c 24                   movq    (%rsp), %rcx
// 174: 4d 8d 34 ce                   leaq    (%r14,%rcx,8), %r14
// 178: 48 89 10                      movq    %rdx, (%rax)
// 17b: 49 8b 47 10                   movq    0x10(%r15), %rax
// 17f: 48 8b 00                      movq    (%rax), %rax
// 182: 84 c0                         testb   %al, %al
// 184: 0f 84 fd fe ff ff             je      0x87 <_JIT_ENTRY+0x87>
// 18a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018c:  R_X86_64_64  _Py_HandlePending
// 194: 4c 89 ff                      movq    %r15, %rdi
// 197: ff d0                         callq   *%rax
// 199: 85 c0                         testl   %eax, %eax
// 19b: 0f 85 9b 00 00 00             jne     0x23c <_JIT_ENTRY+0x23c>
// 1a1: e9 e1 fe ff ff                jmp     0x87 <_JIT_ENTRY+0x87>
// 1a6: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1aa: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1b0: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1b4: 31 ed                         xorl    %ebp, %ebp
// 1b6: eb 14                         jmp     0x1cc <_JIT_ENTRY+0x1cc>
// 1b8: 0f 1f 84 00 00 00 00 00       nopl    (%rax,%rax)
// 1c0: 48 ff c5                      incq    %rbp
// 1c3: 49 39 ef                      cmpq    %rbp, %r15
// 1c6: 0f 84 38 ff ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 1cc: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 1d1: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 1d5: 49 8b 45 00                   movq    (%r13), %rax
// 1d9: 48 85 c0                      testq   %rax, %rax
// 1dc: 7e 12                         jle     0x1f0 <_JIT_ENTRY+0x1f0>
// 1de: 85 c0                         testl   %eax, %eax
// 1e0: 78 de                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 1e2: eb 32                         jmp     0x216 <_JIT_ENTRY+0x216>
// 1e4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 1f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f2:  R_X86_64_64  .rodata.str1.1
// 1fa: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ff: 4c 89 ea                      movq    %r13, %rdx
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_NegativeRefcount
// 20c: ff d0                         callq   *%rax
// 20e: 49 8b 45 00                   movq    (%r13), %rax
// 212: 85 c0                         testl   %eax, %eax
// 214: 78 aa                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 220: ff d0                         callq   *%rax
// 222: 49 ff 4d 00                   decq    (%r13)
// 226: 75 98                         jne     0x1c0 <_JIT_ENTRY+0x1c0>
// 228: 4c 89 ef                      movq    %r13, %rdi
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_Dealloc
// 235: ff d0                         callq   *%rax
// 237: eb 87                         jmp     0x1c0 <_JIT_ENTRY+0x1c0>
// 239: 49 89 c6                      movq    %rax, %r14
// 23c: 49 29 de                      subq    %rbx, %r14
// 23f: 49 83 c6 b8                   addq    $-0x48, %r14
// 243: 49 c1 ee 03                   shrq    $0x3, %r14
// 247: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 24b: 31 c0                         xorl    %eax, %eax
// 24d: e9 5d fe ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 252: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_EXIT_TRACE_code_body[595] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xce, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4f, 0x8d, 0x04, 0xc6, 0x49, 0x8b, 0x38, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x70, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xa2, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xc9, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x34, 0xce, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xfd, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x9b, 0x00, 0x00, 0x00, 0xe9, 0xe1, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xed, 0xeb, 0x14, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xef, 0x0f, 0x84, 0x38, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x5d, 0xfe, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_EXIT_TRACE_code_holes[14] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_EXIT_TRACE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_EXIT_TRACE_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_FORMAT_SIMPLE
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_FORMAT_SIMPLE.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d7                   movq    (%r15,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 df                   movq    (%r15,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c cf                   leaq    (%r15,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 c7                      subq    %r8, %r15
// 8b: 49 83 c7 b8                   addq    $-0x48, %r15
// 8f: 49 c1 ef 03                   shrq    $0x3, %r15
// 93: 45 89 78 40                   movl    %r15d, 0x40(%r8)
// 97: 49 8b 00                      movq    (%r8), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 5c 24 18                movq    %r11, 0x18(%rsp)
// c4: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// c9: 48 89 54 24 20                movq    %rdx, 0x20(%rsp)
// ce: 4c 89 04 24                   movq    %r8, (%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 a6 00 00 00             je      0x1a9 <_JIT_ENTRY+0x1a9>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 135: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 13a: 78 21                         js      0x15d <_JIT_ENTRY+0x15d>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 146: ff d0                         callq   *%rax
// 148: 49 ff 0c 24                   decq    (%r12)
// 14c: 75 0f                         jne     0x15d <_JIT_ENTRY+0x15d>
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _Py_Dealloc
// 158: 4c 89 e7                      movq    %r12, %rdi
// 15b: ff d0                         callq   *%rax
// 15d: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 162: 4d 8d 34 c7                   leaq    (%r15,%rax,8), %r14
// 166: 4d 85 ed                      testq   %r13, %r13
// 169: 0f 84 7a 01 00 00             je      0x2e9 <_JIT_ENTRY+0x2e9>
// 16f: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 174: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 178: 4d 89 2e                      movq    %r13, (%r14)
// 17b: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 17f: 48 8b 00                      movq    (%rax), %rax
// 182: 84 c0                         testb   %al, %al
// 184: 0f 84 9f 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 18a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018c:  R_X86_64_64  _Py_HandlePending
// 194: 48 89 df                      movq    %rbx, %rdi
// 197: ff d0                         callq   *%rax
// 199: 85 c0                         testl   %eax, %eax
// 19b: 0f 84 88 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 1a1: 4d 89 e6                      movq    %r12, %r14
// 1a4: e9 40 01 00 00                jmp     0x2e9 <_JIT_ENTRY+0x2e9>
// 1a9: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1ad: 41 be 01 00 00 00             movl    $0x1, %r14d
// 1b3: 45 0f 43 f5                   cmovael %r13d, %r14d
// 1b7: 31 db                         xorl    %ebx, %ebx
// 1b9: eb 11                         jmp     0x1cc <_JIT_ENTRY+0x1cc>
// 1bb: 0f 1f 44 00 00                nopl    (%rax,%rax)
// 1c0: 48 ff c3                      incq    %rbx
// 1c3: 49 39 de                      cmpq    %rbx, %r14
// 1c6: 0f 84 37 ff ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 1cc: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1d1: 49 8b 45 00                   movq    (%r13), %rax
// 1d5: 48 85 c0                      testq   %rax, %rax
// 1d8: 7e 06                         jle     0x1e0 <_JIT_ENTRY+0x1e0>
// 1da: 85 c0                         testl   %eax, %eax
// 1dc: 78 e2                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 1de: eb 26                         jmp     0x206 <_JIT_ENTRY+0x206>
// 1e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e2:  R_X86_64_64  .rodata.str1.1
// 1ea: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ef: 4c 89 ea                      movq    %r13, %rdx
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _Py_NegativeRefcount
// 1fc: ff d0                         callq   *%rax
// 1fe: 49 8b 45 00                   movq    (%r13), %rax
// 202: 85 c0                         testl   %eax, %eax
// 204: 78 ba                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 210: ff d0                         callq   *%rax
// 212: 49 ff 4d 00                   decq    (%r13)
// 216: 75 a8                         jne     0x1c0 <_JIT_ENTRY+0x1c0>
// 218: 4c 89 ef                      movq    %r13, %rdi
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_Dealloc
// 225: ff d0                         callq   *%rax
// 227: eb 97                         jmp     0x1c0 <_JIT_ENTRY+0x1c0>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _JIT_OPARG
// 233: f7 d0                         notl    %eax
// 235: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 23a: 48 98                         cltq
// 23c: 4d 8d 34 c7                   leaq    (%r15,%rax,8), %r14
// 240: 49 83 c6 f8                   addq    $-0x8, %r14
// 244: 4d 8b 7c c7 f8                movq    -0x8(%r15,%rax,8), %r15
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  PyUnicode_Type
// 253: 49 39 47 08                   cmpq    %rax, 0x8(%r15)
// 257: 74 69                         je      0x2c2 <_JIT_ENTRY+0x2c2>
// 259: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025b:  R_X86_64_64  PyObject_Format
// 263: 4c 89 ff                      movq    %r15, %rdi
// 266: 31 f6                         xorl    %esi, %esi
// 268: ff d0                         callq   *%rax
// 26a: 49 89 c5                      movq    %rax, %r13
// 26d: 49 8b 07                      movq    (%r15), %rax
// 270: 48 85 c0                      testq   %rax, %rax
// 273: 7f 21                         jg      0x296 <_JIT_ENTRY+0x296>
// 275: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000277:  R_X86_64_64  .rodata.str1.1
// 27f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000281:  R_X86_64_64  _Py_NegativeRefcount
// 289: be a6 0c 00 00                movl    $0xca6, %esi            # imm = 0xCA6
// 28e: 4c 89 fa                      movq    %r15, %rdx
// 291: ff d0                         callq   *%rax
// 293: 49 8b 07                      movq    (%r15), %rax
// 296: 85 c0                         testl   %eax, %eax
// 298: 78 20                         js      0x2ba <_JIT_ENTRY+0x2ba>
// 29a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a4: ff d0                         callq   *%rax
// 2a6: 49 ff 0f                      decq    (%r15)
// 2a9: 75 0f                         jne     0x2ba <_JIT_ENTRY+0x2ba>
// 2ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ad:  R_X86_64_64  _Py_Dealloc
// 2b5: 4c 89 ff                      movq    %r15, %rdi
// 2b8: ff d0                         callq   *%rax
// 2ba: 4d 89 ef                      movq    %r13, %r15
// 2bd: 4d 85 ed                      testq   %r13, %r13
// 2c0: 74 27                         je      0x2e9 <_JIT_ENTRY+0x2e9>
// 2c2: 4d 89 3e                      movq    %r15, (%r14)
// 2c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c7:  R_X86_64_64  _JIT_CONTINUE
// 2cf: 48 8b 3c 24                   movq    (%rsp), %rdi
// 2d3: 4c 89 e6                      movq    %r12, %rsi
// 2d6: 48 89 da                      movq    %rbx, %rdx
// 2d9: 48 83 c4 28                   addq    $0x28, %rsp
// 2dd: 5b                            popq    %rbx
// 2de: 41 5c                         popq    %r12
// 2e0: 41 5d                         popq    %r13
// 2e2: 41 5e                         popq    %r14
// 2e4: 41 5f                         popq    %r15
// 2e6: 5d                            popq    %rbp
// 2e7: ff e0                         jmpq    *%rax
// 2e9: 48 8b 04 24                   movq    (%rsp), %rax
// 2ed: 49 29 c6                      subq    %rax, %r14
// 2f0: 49 83 c6 b8                   addq    $-0x48, %r14
// 2f4: 49 c1 ee 03                   shrq    $0x3, %r14
// 2f8: 44 89 70 40                   movl    %r14d, 0x40(%rax)
// 2fc: 31 c0                         xorl    %eax, %eax
// 2fe: e9 ad fd ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 303: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_FORMAT_SIMPLE_code_body[772] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd7, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xdf, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xcf, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x78, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x18, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x54, 0x24, 0x20, 0x4c, 0x89, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xa6, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x4d, 0x8d, 0x34, 0xc7, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x7a, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x4d, 0x8d, 0x24, 0xc7, 0x4d, 0x89, 0x2e, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0x9f, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x88, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xe6, 0xe9, 0x40, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xdb, 0xeb, 0x11, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x37, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x34, 0xc7, 0x49, 0x83, 0xc6, 0xf8, 0x4d, 0x8b, 0x7c, 0xc7, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x47, 0x08, 0x74, 0x69, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x31, 0xf6, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xa6, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4d, 0x89, 0xef, 0x4d, 0x85, 0xed, 0x74, 0x27, 0x4d, 0x89, 0x3e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x29, 0xc6, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x70, 0x40, 0x31, 0xc0, 0xe9, 0xad, 0xfd, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_FORMAT_SIMPLE_code_holes[22] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x25b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Format, 0x0},
    {0x277, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x281, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x29c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2c7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_FORMAT_SIMPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_FORMAT_SIMPLE_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_FORMAT_WITH_SPEC
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_FORMAT_WITH_SPEC.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d6                   movq    (%r14,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 de                   movq    (%r14,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c ce                   leaq    (%r14,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 c6                      subq    %r8, %r14
// 8b: 49 83 c6 b8                   addq    $-0x48, %r14
// 8f: 49 c1 ee 03                   shrq    $0x3, %r14
// 93: 45 89 70 40                   movl    %r14d, 0x40(%r8)
// 97: 49 8b 00                      movq    (%r8), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 5c 24 18                movq    %r11, 0x18(%rsp)
// c4: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// c9: 48 89 14 24                   movq    %rdx, (%rsp)
// cd: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 a7 00 00 00             je      0x1aa <_JIT_ENTRY+0x1aa>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 135: 4c 8b 3c 24                   movq    (%rsp), %r15
// 139: 78 21                         js      0x15c <_JIT_ENTRY+0x15c>
// 13b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 145: ff d0                         callq   *%rax
// 147: 49 ff 0c 24                   decq    (%r12)
// 14b: 75 0f                         jne     0x15c <_JIT_ENTRY+0x15c>
// 14d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014f:  R_X86_64_64  _Py_Dealloc
// 157: 4c 89 e7                      movq    %r12, %rdi
// 15a: ff d0                         callq   *%rax
// 15c: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 161: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 165: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 16a: 48 85 c9                      testq   %rcx, %rcx
// 16d: 0f 84 c2 01 00 00             je      0x335 <_JIT_ENTRY+0x335>
// 173: 48 89 08                      movq    %rcx, (%rax)
// 176: 49 8b 47 10                   movq    0x10(%r15), %rax
// 17a: 48 8b 00                      movq    (%rax), %rax
// 17d: 84 c0                         testb   %al, %al
// 17f: 0f 84 a4 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 185: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000187:  R_X86_64_64  _Py_HandlePending
// 18f: 4c 89 ff                      movq    %r15, %rdi
// 192: ff d0                         callq   *%rax
// 194: 85 c0                         testl   %eax, %eax
// 196: 0f 84 8d 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 19c: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1a1: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 1a5: e9 8b 01 00 00                jmp     0x335 <_JIT_ENTRY+0x335>
// 1aa: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1ae: bb 01 00 00 00                movl    $0x1, %ebx
// 1b3: 41 0f 43 dd                   cmovael %r13d, %ebx
// 1b7: 45 31 ff                      xorl    %r15d, %r15d
// 1ba: eb 10                         jmp     0x1cc <_JIT_ENTRY+0x1cc>
// 1bc: 0f 1f 40 00                   nopl    (%rax)
// 1c0: 49 ff c7                      incq    %r15
// 1c3: 4c 39 fb                      cmpq    %r15, %rbx
// 1c6: 0f 84 37 ff ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 1cc: 4e 8b 6c fd 00                movq    (%rbp,%r15,8), %r13
// 1d1: 49 8b 45 00                   movq    (%r13), %rax
// 1d5: 48 85 c0                      testq   %rax, %rax
// 1d8: 7e 06                         jle     0x1e0 <_JIT_ENTRY+0x1e0>
// 1da: 85 c0                         testl   %eax, %eax
// 1dc: 78 e2                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 1de: eb 26                         jmp     0x206 <_JIT_ENTRY+0x206>
// 1e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e2:  R_X86_64_64  .rodata.str1.1
// 1ea: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ef: 4c 89 ea                      movq    %r13, %rdx
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _Py_NegativeRefcount
// 1fc: ff d0                         callq   *%rax
// 1fe: 49 8b 45 00                   movq    (%r13), %rax
// 202: 85 c0                         testl   %eax, %eax
// 204: 78 ba                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 210: ff d0                         callq   *%rax
// 212: 49 ff 4d 00                   decq    (%r13)
// 216: 75 a8                         jne     0x1c0 <_JIT_ENTRY+0x1c0>
// 218: 4c 89 ef                      movq    %r13, %rdi
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_Dealloc
// 225: ff d0                         callq   *%rax
// 227: eb 97                         jmp     0x1c0 <_JIT_ENTRY+0x1c0>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _JIT_OPARG
// 233: f7 d0                         notl    %eax
// 235: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 23a: 4c 63 f8                      movslq  %eax, %r15
// 23d: 4b 8b 6c fe f0                movq    -0x10(%r14,%r15,8), %rbp
// 242: 4f 8b 6c fe f8                movq    -0x8(%r14,%r15,8), %r13
// 247: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000249:  R_X86_64_64  PyObject_Format
// 251: 48 89 ef                      movq    %rbp, %rdi
// 254: 4c 89 ee                      movq    %r13, %rsi
// 257: ff d0                         callq   *%rax
// 259: 49 89 c4                      movq    %rax, %r12
// 25c: 48 8b 45 00                   movq    (%rbp), %rax
// 260: 48 85 c0                      testq   %rax, %rax
// 263: 7f 22                         jg      0x287 <_JIT_ENTRY+0x287>
// 265: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000267:  R_X86_64_64  .rodata.str1.1
// 26f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000271:  R_X86_64_64  _Py_NegativeRefcount
// 279: be b7 0c 00 00                movl    $0xcb7, %esi            # imm = 0xCB7
// 27e: 48 89 ea                      movq    %rbp, %rdx
// 281: ff d0                         callq   *%rax
// 283: 48 8b 45 00                   movq    (%rbp), %rax
// 287: 85 c0                         testl   %eax, %eax
// 289: 78 21                         js      0x2ac <_JIT_ENTRY+0x2ac>
// 28b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 295: ff d0                         callq   *%rax
// 297: 48 ff 4d 00                   decq    (%rbp)
// 29b: 75 0f                         jne     0x2ac <_JIT_ENTRY+0x2ac>
// 29d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029f:  R_X86_64_64  _Py_Dealloc
// 2a7: 48 89 ef                      movq    %rbp, %rdi
// 2aa: ff d0                         callq   *%rax
// 2ac: 49 8b 45 00                   movq    (%r13), %rax
// 2b0: 48 85 c0                      testq   %rax, %rax
// 2b3: 7f 22                         jg      0x2d7 <_JIT_ENTRY+0x2d7>
// 2b5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002b7:  R_X86_64_64  .rodata.str1.1
// 2bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c1:  R_X86_64_64  _Py_NegativeRefcount
// 2c9: be b8 0c 00 00                movl    $0xcb8, %esi            # imm = 0xCB8
// 2ce: 4c 89 ea                      movq    %r13, %rdx
// 2d1: ff d0                         callq   *%rax
// 2d3: 49 8b 45 00                   movq    (%r13), %rax
// 2d7: 85 c0                         testl   %eax, %eax
// 2d9: 78 21                         js      0x2fc <_JIT_ENTRY+0x2fc>
// 2db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002dd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2e5: ff d0                         callq   *%rax
// 2e7: 49 ff 4d 00                   decq    (%r13)
// 2eb: 75 0f                         jne     0x2fc <_JIT_ENTRY+0x2fc>
// 2ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ef:  R_X86_64_64  _Py_Dealloc
// 2f7: 4c 89 ef                      movq    %r13, %rdi
// 2fa: ff d0                         callq   *%rax
// 2fc: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 300: 48 83 c0 f0                   addq    $-0x10, %rax
// 304: 4d 85 e4                      testq   %r12, %r12
// 307: 74 2c                         je      0x335 <_JIT_ENTRY+0x335>
// 309: 4b 8d 34 fe                   leaq    (%r14,%r15,8), %rsi
// 30d: 48 83 c6 f8                   addq    $-0x8, %rsi
// 311: 4c 89 20                      movq    %r12, (%rax)
// 314: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000316:  R_X86_64_64  _JIT_CONTINUE
// 31e: 48 89 df                      movq    %rbx, %rdi
// 321: 48 8b 14 24                   movq    (%rsp), %rdx
// 325: 48 83 c4 28                   addq    $0x28, %rsp
// 329: 5b                            popq    %rbx
// 32a: 41 5c                         popq    %r12
// 32c: 41 5d                         popq    %r13
// 32e: 41 5e                         popq    %r14
// 330: 41 5f                         popq    %r15
// 332: 5d                            popq    %rbp
// 333: ff e0                         jmpq    *%rax
// 335: 48 29 d8                      subq    %rbx, %rax
// 338: 48 83 c0 b8                   addq    $-0x48, %rax
// 33c: 48 c1 e8 03                   shrq    $0x3, %rax
// 340: 89 43 40                      movl    %eax, 0x40(%rbx)
// 343: 31 c0                         xorl    %eax, %eax
// 345: e9 66 fd ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 34a: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_FORMAT_WITH_SPEC_code_body[843] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd6, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xde, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xce, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc6, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x70, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x18, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x14, 0x24, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xa7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x3c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xc2, 0x01, 0x00, 0x00, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xa4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x8d, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc6, 0xe9, 0x8b, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xdd, 0x45, 0x31, 0xff, 0xeb, 0x10, 0x0f, 0x1f, 0x40, 0x00, 0x49, 0xff, 0xc7, 0x4c, 0x39, 0xfb, 0x0f, 0x84, 0x37, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xfd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xf8, 0x4b, 0x8b, 0x6c, 0xfe, 0xf0, 0x4f, 0x8b, 0x6c, 0xfe, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb7, 0x0c, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb8, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x83, 0xc0, 0xf0, 0x4d, 0x85, 0xe4, 0x74, 0x2c, 0x4b, 0x8d, 0x34, 0xfe, 0x48, 0x83, 0xc6, 0xf8, 0x4c, 0x89, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x66, 0xfd, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_FORMAT_WITH_SPEC_code_holes[25] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x187, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x249, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Format, 0x0},
    {0x267, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x271, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x28d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x29f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2b7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x316, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_FORMAT_WITH_SPEC_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_FORMAT_WITH_SPEC_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_FOR_ITER_TIER_TWO
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_FOR_ITER_TIER_TWO.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 48 63 f7                      movslq  %edi, %rsi
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4d 8b 24 f6                   movq    (%r14,%rsi,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 26                         jne     0x8d <_JIT_ENTRY+0x8d>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 18                         jne     0x8d <_JIT_ENTRY+0x8d>
// 75: 48 89 54 24 20                movq    %rdx, 0x20(%rsp)
// 7a: 4b 8d 2c c6                   leaq    (%r14,%r8,8), %rbp
// 7e: 48 8b 7d 00                   movq    (%rbp), %rdi
// 82: 48 8b 57 08                   movq    0x8(%rdi), %rdx
// 86: 49 3b 54 24 10                cmpq    0x10(%r12), %rdx
// 8b: 74 37                         je      0xc4 <_JIT_ENTRY+0xc4>
// 8d: 49 29 de                      subq    %rbx, %r14
// 90: 49 83 c6 b8                   addq    $-0x48, %r14
// 94: 49 c1 ee 03                   shrq    $0x3, %r14
// 98: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 9c: 48 8b 03                      movq    (%rbx), %rax
// 9f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000a1:  R_X86_64_64  _JIT_TARGET
// a9: 89 c9                         movl    %ecx, %ecx
// ab: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// af: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b5: 48 83 c4 28                   addq    $0x28, %rsp
// b9: 5b                            popq    %rbx
// ba: 41 5c                         popq    %r12
// bc: 41 5d                         popq    %r13
// be: 41 5e                         popq    %r14
// c0: 41 5f                         popq    %r15
// c2: 5d                            popq    %rbp
// c3: c3                            retq
// c4: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// c9: 4c 89 4c 24 18                movq    %r9, 0x18(%rsp)
// ce: 48 89 1c 24                   movq    %rbx, (%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 0c 01 00 00             je      0x20f <_JIT_ENTRY+0x20f>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 135: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 13a: 78 21                         js      0x15d <_JIT_ENTRY+0x15d>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 146: ff d0                         callq   *%rax
// 148: 49 ff 0c 24                   decq    (%r12)
// 14c: 75 0f                         jne     0x15d <_JIT_ENTRY+0x15d>
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _Py_Dealloc
// 158: 4c 89 e7                      movq    %r12, %rdi
// 15b: ff d0                         callq   *%rax
// 15d: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 162: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 166: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 16b: 48 85 c9                      testq   %rcx, %rcx
// 16e: 0f 84 25 01 00 00             je      0x299 <_JIT_ENTRY+0x299>
// 174: 4f 8d 3c fe                   leaq    (%r14,%r15,8), %r15
// 178: 48 89 08                      movq    %rcx, (%rax)
// 17b: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 17f: 48 8b 00                      movq    (%rax), %rax
// 182: 84 c0                         testb   %al, %al
// 184: 74 17                         je      0x19d <_JIT_ENTRY+0x19d>
// 186: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000188:  R_X86_64_64  _Py_HandlePending
// 190: 48 89 df                      movq    %rbx, %rdi
// 193: ff d0                         callq   *%rax
// 195: 85 c0                         testl   %eax, %eax
// 197: 0f 85 ff 00 00 00             jne     0x29c <_JIT_ENTRY+0x29c>
// 19d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019f:  R_X86_64_64  _JIT_OPARG
// 1a7: f7 d0                         notl    %eax
// 1a9: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1ae: 4c 63 e8                      movslq  %eax, %r13
// 1b1: 4f 8b 64 ee f8                movq    -0x8(%r14,%r13,8), %r12
// 1b6: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 1bb: 4c 89 e7                      movq    %r12, %rdi
// 1be: ff 90 e0 00 00 00             callq   *0xe0(%rax)
// 1c4: 48 85 c0                      testq   %rax, %rax
// 1c7: 0f 84 e9 00 00 00             je      0x2b6 <_JIT_ENTRY+0x2b6>
// 1cd: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001cf:  R_X86_64_64  _JIT_OPARG
// 1d7: f7 d1                         notl    %ecx
// 1d9: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 1df: 48 63 c9                      movslq  %ecx, %rcx
// 1e2: 49 89 04 ce                   movq    %rax, (%r14,%rcx,8)
// 1e6: 49 8d 34 ce                   leaq    (%r14,%rcx,8), %rsi
// 1ea: 48 83 c6 08                   addq    $0x8, %rsi
// 1ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f0:  R_X86_64_64  _JIT_CONTINUE
// 1f8: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1fc: 48 89 da                      movq    %rbx, %rdx
// 1ff: 48 83 c4 28                   addq    $0x28, %rsp
// 203: 5b                            popq    %rbx
// 204: 41 5c                         popq    %r12
// 206: 41 5d                         popq    %r13
// 208: 41 5e                         popq    %r14
// 20a: 41 5f                         popq    %r15
// 20c: 5d                            popq    %rbp
// 20d: ff e0                         jmpq    *%rax
// 20f: 41 83 fd 02                   cmpl    $0x2, %r13d
// 213: bb 01 00 00 00                movl    $0x1, %ebx
// 218: 41 0f 43 dd                   cmovael %r13d, %ebx
// 21c: 45 31 ff                      xorl    %r15d, %r15d
// 21f: eb 1b                         jmp     0x23c <_JIT_ENTRY+0x23c>
// 221: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// 230: 49 ff c7                      incq    %r15
// 233: 4c 39 fb                      cmpq    %r15, %rbx
// 236: 0f 84 c7 fe ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 23c: 4e 8b 6c fd 00                movq    (%rbp,%r15,8), %r13
// 241: 49 8b 45 00                   movq    (%r13), %rax
// 245: 48 85 c0                      testq   %rax, %rax
// 248: 7e 06                         jle     0x250 <_JIT_ENTRY+0x250>
// 24a: 85 c0                         testl   %eax, %eax
// 24c: 78 e2                         js      0x230 <_JIT_ENTRY+0x230>
// 24e: eb 26                         jmp     0x276 <_JIT_ENTRY+0x276>
// 250: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000252:  R_X86_64_64  .rodata.str1.1
// 25a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 25f: 4c 89 ea                      movq    %r13, %rdx
// 262: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000264:  R_X86_64_64  _Py_NegativeRefcount
// 26c: ff d0                         callq   *%rax
// 26e: 49 8b 45 00                   movq    (%r13), %rax
// 272: 85 c0                         testl   %eax, %eax
// 274: 78 ba                         js      0x230 <_JIT_ENTRY+0x230>
// 276: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000278:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 280: ff d0                         callq   *%rax
// 282: 49 ff 4d 00                   decq    (%r13)
// 286: 75 a8                         jne     0x230 <_JIT_ENTRY+0x230>
// 288: 4c 89 ef                      movq    %r13, %rdi
// 28b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028d:  R_X86_64_64  _Py_Dealloc
// 295: ff d0                         callq   *%rax
// 297: eb 97                         jmp     0x230 <_JIT_ENTRY+0x230>
// 299: 49 89 c7                      movq    %rax, %r15
// 29c: 48 8b 04 24                   movq    (%rsp), %rax
// 2a0: 49 29 c7                      subq    %rax, %r15
// 2a3: 49 83 c7 b8                   addq    $-0x48, %r15
// 2a7: 49 c1 ef 03                   shrq    $0x3, %r15
// 2ab: 44 89 78 40                   movl    %r15d, 0x40(%rax)
// 2af: 31 c0                         xorl    %eax, %eax
// 2b1: e9 ff fd ff ff                jmp     0xb5 <_JIT_ENTRY+0xb5>
// 2b6: 48 8b 43 68                   movq    0x68(%rbx), %rax
// 2ba: 48 85 c0                      testq   %rax, %rax
// 2bd: 74 36                         je      0x2f5 <_JIT_ENTRY+0x2f5>
// 2bf: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 2c4: 74 2f                         je      0x2f5 <_JIT_ENTRY+0x2f5>
// 2c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c8:  R_X86_64_64  PyExc_StopIteration
// 2d0: 48 8b 30                      movq    (%rax), %rsi
// 2d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d5:  R_X86_64_64  _PyErr_ExceptionMatches
// 2dd: 48 89 df                      movq    %rbx, %rdi
// 2e0: ff d0                         callq   *%rax
// 2e2: 85 c0                         testl   %eax, %eax
// 2e4: 74 b6                         je      0x29c <_JIT_ENTRY+0x29c>
// 2e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e8:  R_X86_64_64  _PyErr_Clear
// 2f0: 48 89 df                      movq    %rbx, %rdi
// 2f3: ff d0                         callq   *%rax
// 2f5: 49 8b 04 24                   movq    (%r12), %rax
// 2f9: 48 85 c0                      testq   %rax, %rax
// 2fc: 7f 22                         jg      0x320 <_JIT_ENTRY+0x320>
// 2fe: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000300:  R_X86_64_64  .rodata.str1.1
// 308: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030a:  R_X86_64_64  _Py_NegativeRefcount
// 312: be 80 08 00 00                movl    $0x880, %esi            # imm = 0x880
// 317: 4c 89 e2                      movq    %r12, %rdx
// 31a: ff d0                         callq   *%rax
// 31c: 49 8b 04 24                   movq    (%r12), %rax
// 320: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 324: 49 83 c6 f8                   addq    $-0x8, %r14
// 328: 85 c0                         testl   %eax, %eax
// 32a: 48 8b 1c 24                   movq    (%rsp), %rbx
// 32e: 0f 88 59 fd ff ff             js      0x8d <_JIT_ENTRY+0x8d>
// 334: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000336:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 33e: ff d0                         callq   *%rax
// 340: 49 ff 0c 24                   decq    (%r12)
// 344: 0f 85 43 fd ff ff             jne     0x8d <_JIT_ENTRY+0x8d>
// 34a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000034c:  R_X86_64_64  _Py_Dealloc
// 354: 4c 89 e7                      movq    %r12, %rdi
// 357: ff d0                         callq   *%rax
// 359: e9 2f fd ff ff                jmp     0x8d <_JIT_ENTRY+0x8d>
// 35e: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_FOR_ITER_TIER_TWO_code_body[863] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xce, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x48, 0x63, 0xf7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4d, 0x8b, 0x24, 0xf6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x26, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x18, 0x48, 0x89, 0x54, 0x24, 0x20, 0x4b, 0x8d, 0x2c, 0xc6, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x57, 0x08, 0x49, 0x3b, 0x54, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x74, 0x24, 0x10, 0x4c, 0x89, 0x4c, 0x24, 0x18, 0x48, 0x89, 0x1c, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0x0c, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x25, 0x01, 0x00, 0x00, 0x4f, 0x8d, 0x3c, 0xfe, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xff, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xe8, 0x4f, 0x8b, 0x64, 0xee, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x4c, 0x89, 0xe7, 0xff, 0x90, 0xe0, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xe9, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x04, 0xce, 0x49, 0x8d, 0x34, 0xce, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x41, 0x83, 0xfd, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xdd, 0x45, 0x31, 0xff, 0xeb, 0x1b, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc7, 0x4c, 0x39, 0xfb, 0x0f, 0x84, 0xc7, 0xfe, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xfd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x49, 0x89, 0xc7, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x78, 0x40, 0x31, 0xc0, 0xe9, 0xff, 0xfd, 0xff, 0xff, 0x48, 0x8b, 0x43, 0x68, 0x48, 0x85, 0xc0, 0x74, 0x36, 0x48, 0x83, 0x78, 0x08, 0x00, 0x74, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0xb6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x80, 0x08, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x83, 0xc6, 0xf8, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x0f, 0x88, 0x59, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x43, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0x2f, 0xfd, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_FOR_ITER_TIER_TWO_code_holes[24] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0xa1, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x19f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1cf, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f0, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x278, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x28d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_StopIteration, 0x0},
    {0x2d5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_ExceptionMatches, 0x0},
    {0x2e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Clear, 0x0},
    {0x300, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x30a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x336, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x34c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_FOR_ITER_TIER_TWO_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_FOR_ITER_TIER_TWO_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_GET_AITER
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_GET_AITER.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d7                   movq    (%r15,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 df                   movq    (%r15,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4b 8d 1c cf                   leaq    (%r15,%r9,8), %rbx
// 79: 48 8b 3b                      movq    (%rbx), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 4d 29 c7                      subq    %r8, %r15
// 8a: 49 83 c7 b8                   addq    $-0x48, %r15
// 8e: 49 c1 ef 03                   shrq    $0x3, %r15
// 92: 45 89 78 40                   movl    %r15d, 0x40(%r8)
// 96: 49 8b 00                      movq    (%r8), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 5c 24 10                movq    %r11, 0x10(%rsp)
// c3: 4c 89 14 24                   movq    %r10, (%rsp)
// c7: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cc: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// d1: 48 85 c0                      testq   %rax, %rax
// d4: 40 0f 94 c5                   sete    %bpl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 73 08                   leaq    0x8(%rbx), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 ab 00 00 00             je      0x1af <_JIT_ENTRY+0x1af>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// 136: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 13b: 78 21                         js      0x15e <_JIT_ENTRY+0x15e>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 147: ff d0                         callq   *%rax
// 149: 49 ff 0c 24                   decq    (%r12)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_Dealloc
// 159: 4c 89 e7                      movq    %r12, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 163: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 167: 4d 85 ed                      testq   %r13, %r13
// 16a: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 16f: 0f 84 9c 02 00 00             je      0x411 <_JIT_ENTRY+0x411>
// 175: 48 8b 04 24                   movq    (%rsp), %rax
// 179: 49 8d 2c c7                   leaq    (%r15,%rax,8), %rbp
// 17d: 4d 89 2c 24                   movq    %r13, (%r12)
// 181: 49 8b 46 10                   movq    0x10(%r14), %rax
// 185: 48 8b 00                      movq    (%rax), %rax
// 188: 84 c0                         testb   %al, %al
// 18a: 0f 84 a9 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_HandlePending
// 19a: 4c 89 f7                      movq    %r14, %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 85 c0                         testl   %eax, %eax
// 1a1: 0f 84 92 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 1a7: 49 89 ec                      movq    %rbp, %r12
// 1aa: e9 62 02 00 00                jmp     0x411 <_JIT_ENTRY+0x411>
// 1af: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1b3: bd 01 00 00 00                movl    $0x1, %ebp
// 1b8: 41 0f 43 ed                   cmovael %r13d, %ebp
// 1bc: 45 31 f6                      xorl    %r14d, %r14d
// 1bf: eb 1b                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c1: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// 1d0: 49 ff c6                      incq    %r14
// 1d3: 4c 39 f5                      cmpq    %r14, %rbp
// 1d6: 0f 84 28 ff ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 1dc: 4e 8b 2c f3                   movq    (%rbx,%r14,8), %r13
// 1e0: 49 8b 45 00                   movq    (%r13), %rax
// 1e4: 48 85 c0                      testq   %rax, %rax
// 1e7: 7e 07                         jle     0x1f0 <_JIT_ENTRY+0x1f0>
// 1e9: 85 c0                         testl   %eax, %eax
// 1eb: 78 e3                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1ed: eb 27                         jmp     0x216 <_JIT_ENTRY+0x216>
// 1ef: 90                            nop
// 1f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f2:  R_X86_64_64  .rodata.str1.1
// 1fa: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ff: 4c 89 ea                      movq    %r13, %rdx
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_NegativeRefcount
// 20c: ff d0                         callq   *%rax
// 20e: 49 8b 45 00                   movq    (%r13), %rax
// 212: 85 c0                         testl   %eax, %eax
// 214: 78 ba                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 220: ff d0                         callq   *%rax
// 222: 49 ff 4d 00                   decq    (%r13)
// 226: 75 a8                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 228: 4c 89 ef                      movq    %r13, %rdi
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_Dealloc
// 235: ff d0                         callq   *%rax
// 237: eb 97                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _JIT_OPARG
// 243: f7 d0                         notl    %eax
// 245: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 24a: 48 98                         cltq
// 24c: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 250: 49 83 c4 f8                   addq    $-0x8, %r12
// 254: 4d 8b 7c c7 f8                movq    -0x8(%r15,%rax,8), %r15
// 259: 49 8b 47 08                   movq    0x8(%r15), %rax
// 25d: 48 8b 48 50                   movq    0x50(%rax), %rcx
// 261: 48 85 c9                      testq   %rcx, %rcx
// 264: 0f 84 ae 00 00 00             je      0x318 <_JIT_ENTRY+0x318>
// 26a: 48 8b 49 08                   movq    0x8(%rcx), %rcx
// 26e: 48 85 c9                      testq   %rcx, %rcx
// 271: 0f 84 a1 00 00 00             je      0x318 <_JIT_ENTRY+0x318>
// 277: 4c 89 ff                      movq    %r15, %rdi
// 27a: ff d1                         callq   *%rcx
// 27c: 49 89 c5                      movq    %rax, %r13
// 27f: 49 8b 07                      movq    (%r15), %rax
// 282: 48 85 c0                      testq   %rax, %rax
// 285: 7f 21                         jg      0x2a8 <_JIT_ENTRY+0x2a8>
// 287: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000289:  R_X86_64_64  .rodata.str1.1
// 291: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000293:  R_X86_64_64  _Py_NegativeRefcount
// 29b: be c5 02 00 00                movl    $0x2c5, %esi            # imm = 0x2C5
// 2a0: 4c 89 fa                      movq    %r15, %rdx
// 2a3: ff d0                         callq   *%rax
// 2a5: 49 8b 07                      movq    (%r15), %rax
// 2a8: 85 c0                         testl   %eax, %eax
// 2aa: 78 20                         js      0x2cc <_JIT_ENTRY+0x2cc>
// 2ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2b6: ff d0                         callq   *%rax
// 2b8: 49 ff 0f                      decq    (%r15)
// 2bb: 75 0f                         jne     0x2cc <_JIT_ENTRY+0x2cc>
// 2bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bf:  R_X86_64_64  _Py_Dealloc
// 2c7: 4c 89 ff                      movq    %r15, %rdi
// 2ca: ff d0                         callq   *%rax
// 2cc: 4d 85 ed                      testq   %r13, %r13
// 2cf: 0f 84 3c 01 00 00             je      0x411 <_JIT_ENTRY+0x411>
// 2d5: 49 8b 45 08                   movq    0x8(%r13), %rax
// 2d9: 48 8b 48 50                   movq    0x50(%rax), %rcx
// 2dd: 48 85 c9                      testq   %rcx, %rcx
// 2e0: 0f 84 b6 00 00 00             je      0x39c <_JIT_ENTRY+0x39c>
// 2e6: 48 83 79 10 00                cmpq    $0x0, 0x10(%rcx)
// 2eb: 0f 84 ab 00 00 00             je      0x39c <_JIT_ENTRY+0x39c>
// 2f1: 4d 89 2c 24                   movq    %r13, (%r12)
// 2f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f7:  R_X86_64_64  _JIT_CONTINUE
// 2ff: 48 89 df                      movq    %rbx, %rdi
// 302: 48 89 ee                      movq    %rbp, %rsi
// 305: 4c 89 f2                      movq    %r14, %rdx
// 308: 48 83 c4 28                   addq    $0x28, %rsp
// 30c: 5b                            popq    %rbx
// 30d: 41 5c                         popq    %r12
// 30f: 41 5d                         popq    %r13
// 311: 41 5e                         popq    %r14
// 313: 41 5f                         popq    %r15
// 315: 5d                            popq    %rbp
// 316: ff e0                         jmpq    *%rax
// 318: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000031a:  R_X86_64_64  PyExc_TypeError
// 322: 48 8b 31                      movq    (%rcx), %rsi
// 325: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 329: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000032b:  R_X86_64_64  .rodata.str1.1+0x39
// 333: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000335:  R_X86_64_64  _PyErr_Format
// 33d: 4c 89 f7                      movq    %r14, %rdi
// 340: 31 c0                         xorl    %eax, %eax
// 342: 41 ff d0                      callq   *%r8
// 345: 49 8b 07                      movq    (%r15), %rax
// 348: 48 85 c0                      testq   %rax, %rax
// 34b: 7f 21                         jg      0x36e <_JIT_ENTRY+0x36e>
// 34d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000034f:  R_X86_64_64  .rodata.str1.1
// 357: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000359:  R_X86_64_64  _Py_NegativeRefcount
// 361: be c1 02 00 00                movl    $0x2c1, %esi            # imm = 0x2C1
// 366: 4c 89 fa                      movq    %r15, %rdx
// 369: ff d0                         callq   *%rax
// 36b: 49 8b 07                      movq    (%r15), %rax
// 36e: 85 c0                         testl   %eax, %eax
// 370: 0f 88 9b 00 00 00             js      0x411 <_JIT_ENTRY+0x411>
// 376: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000378:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 380: ff d0                         callq   *%rax
// 382: 49 ff 0f                      decq    (%r15)
// 385: 0f 85 86 00 00 00             jne     0x411 <_JIT_ENTRY+0x411>
// 38b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000038d:  R_X86_64_64  _Py_Dealloc
// 395: 4c 89 ff                      movq    %r15, %rdi
// 398: ff d0                         callq   *%rax
// 39a: eb 75                         jmp     0x411 <_JIT_ENTRY+0x411>
// 39c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000039e:  R_X86_64_64  PyExc_TypeError
// 3a6: 48 8b 31                      movq    (%rcx), %rsi
// 3a9: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 3ad: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000003af:  R_X86_64_64  .rodata.str1.1+0x7a
// 3b7: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000003b9:  R_X86_64_64  _PyErr_Format
// 3c1: 4c 89 f7                      movq    %r14, %rdi
// 3c4: 31 c0                         xorl    %eax, %eax
// 3c6: 41 ff d0                      callq   *%r8
// 3c9: 49 8b 45 00                   movq    (%r13), %rax
// 3cd: 48 85 c0                      testq   %rax, %rax
// 3d0: 7f 22                         jg      0x3f4 <_JIT_ENTRY+0x3f4>
// 3d2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003d4:  R_X86_64_64  .rodata.str1.1
// 3dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003de:  R_X86_64_64  _Py_NegativeRefcount
// 3e6: be cd 02 00 00                movl    $0x2cd, %esi            # imm = 0x2CD
// 3eb: 4c 89 ea                      movq    %r13, %rdx
// 3ee: ff d0                         callq   *%rax
// 3f0: 49 8b 45 00                   movq    (%r13), %rax
// 3f4: 85 c0                         testl   %eax, %eax
// 3f6: 78 19                         js      0x411 <_JIT_ENTRY+0x411>
// 3f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003fa:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 402: ff d0                         callq   *%rax
// 404: 49 ff 4d 00                   decq    (%r13)
// 408: 4d 89 ef                      movq    %r13, %r15
// 40b: 0f 84 7a ff ff ff             je      0x38b <_JIT_ENTRY+0x38b>
// 411: 49 29 dc                      subq    %rbx, %r12
// 414: 49 83 c4 b8                   addq    $-0x48, %r12
// 418: 49 c1 ec 03                   shrq    $0x3, %r12
// 41c: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 420: 31 c0                         xorl    %eax, %eax
// 422: e9 88 fc ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 427: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_GET_AITER_code_body[1064] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd7, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xdf, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4b, 0x8d, 0x1c, 0xcf, 0x48, 0x8b, 0x3b, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x78, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x73, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xab, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x4d, 0x8d, 0x24, 0xc7, 0x4d, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x0f, 0x84, 0x9c, 0x02, 0x00, 0x00, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x2c, 0xc7, 0x4d, 0x89, 0x2c, 0x24, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xa9, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x92, 0x00, 0x00, 0x00, 0x49, 0x89, 0xec, 0xe9, 0x62, 0x02, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xed, 0x45, 0x31, 0xf6, 0xeb, 0x1b, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc6, 0x4c, 0x39, 0xf5, 0x0f, 0x84, 0x28, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x2c, 0xf3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x27, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x83, 0xc4, 0xf8, 0x4d, 0x8b, 0x7c, 0xc7, 0xf8, 0x49, 0x8b, 0x47, 0x08, 0x48, 0x8b, 0x48, 0x50, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xae, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x49, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xa1, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd1, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc5, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x3c, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x50, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xb6, 0x00, 0x00, 0x00, 0x48, 0x83, 0x79, 0x10, 0x00, 0x0f, 0x84, 0xab, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x2c, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x89, 0xee, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x31, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x0f, 0x88, 0x9b, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0x86, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xeb, 0x75, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x31, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xcd, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x19, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x4d, 0x89, 0xef, 0x0f, 0x84, 0x7a, 0xff, 0xff, 0xff, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x88, 0xfc, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_GET_AITER_code_holes[33] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x289, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x293, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2ae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2bf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2f7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x31a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x32b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x335, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x34f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x359, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x378, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x38d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x39e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x3af, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x7a},
    {0x3b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x3d4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3de, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3fa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'async for' requires an object with __aiter__ method, got %.100s\x00'async for' received an object from __aiter__ that does not implement __anext__: %.100s\x00"
// d2: 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_GET_AITER_data_body[217] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x5f, 0x5f, 0x61, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x5f, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x2c, 0x20, 0x67, 0x6f, 0x74, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73, 0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x5f, 0x5f, 0x61, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x5f, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x5f, 0x5f, 0x61, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x5f, 0x3a, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_GET_AITER_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_GET_ANEXT
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_GET_ANEXT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d7                   movq    (%r15,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 df                   movq    (%r15,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4b 8d 1c cf                   leaq    (%r15,%r9,8), %rbx
// 79: 48 8b 3b                      movq    (%rbx), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 4d 29 c7                      subq    %r8, %r15
// 8a: 49 83 c7 b8                   addq    $-0x48, %r15
// 8e: 49 c1 ef 03                   shrq    $0x3, %r15
// 92: 45 89 78 40                   movl    %r15d, 0x40(%r8)
// 96: 49 8b 00                      movq    (%r8), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 5c 24 10                movq    %r11, 0x10(%rsp)
// c3: 4c 89 54 24 18                movq    %r10, 0x18(%rsp)
// c8: 48 89 54 24 20                movq    %rdx, 0x20(%rsp)
// cd: 4c 89 04 24                   movq    %r8, (%rsp)
// d1: 48 85 c0                      testq   %rax, %rax
// d4: 40 0f 94 c5                   sete    %bpl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 73 08                   leaq    0x8(%rbx), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 69 01 00 00             je      0x26d <_JIT_ENTRY+0x26d>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 136: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// 13b: 78 21                         js      0x15e <_JIT_ENTRY+0x15e>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 147: ff d0                         callq   *%rax
// 149: 49 ff 0c 24                   decq    (%r12)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_Dealloc
// 159: 4c 89 e7                      movq    %r12, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 163: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 167: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 16c: 48 85 c9                      testq   %rcx, %rcx
// 16f: 0f 84 74 01 00 00             je      0x2e9 <_JIT_ENTRY+0x2e9>
// 175: 4f 8d 34 f7                   leaq    (%r15,%r14,8), %r14
// 179: 48 89 08                      movq    %rcx, (%rax)
// 17c: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 180: 48 8b 00                      movq    (%rax), %rax
// 183: 84 c0                         testb   %al, %al
// 185: 74 17                         je      0x19e <_JIT_ENTRY+0x19e>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _Py_HandlePending
// 191: 48 89 df                      movq    %rbx, %rdi
// 194: ff d0                         callq   *%rax
// 196: 85 c0                         testl   %eax, %eax
// 198: 0f 85 1a 02 00 00             jne     0x3b8 <_JIT_ENTRY+0x3b8>
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  _JIT_OPARG
// 1a8: f7 d0                         notl    %eax
// 1aa: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1af: 48 98                         cltq
// 1b1: 49 8b 7c c7 f8                movq    -0x8(%r15,%rax,8), %rdi
// 1b6: 48 8b 47 08                   movq    0x8(%rdi), %rax
// 1ba: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001bc:  R_X86_64_64  PyAsyncGen_Type
// 1c4: 48 39 c8                      cmpq    %rcx, %rax
// 1c7: 0f 84 56 01 00 00             je      0x323 <_JIT_ENTRY+0x323>
// 1cd: 48 8b 48 50                   movq    0x50(%rax), %rcx
// 1d1: 48 85 c9                      testq   %rcx, %rcx
// 1d4: 0f 84 17 01 00 00             je      0x2f1 <_JIT_ENTRY+0x2f1>
// 1da: 48 8b 49 10                   movq    0x10(%rcx), %rcx
// 1de: 48 85 c9                      testq   %rcx, %rcx
// 1e1: 0f 84 0a 01 00 00             je      0x2f1 <_JIT_ENTRY+0x2f1>
// 1e7: ff d1                         callq   *%rcx
// 1e9: 48 85 c0                      testq   %rax, %rax
// 1ec: 0f 84 c6 01 00 00             je      0x3b8 <_JIT_ENTRY+0x3b8>
// 1f2: 49 89 c4                      movq    %rax, %r12
// 1f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f7:  R_X86_64_64  _PyCoro_GetAwaitableIter
// 1ff: 4c 89 e7                      movq    %r12, %rdi
// 202: ff d0                         callq   *%rax
// 204: 48 85 c0                      testq   %rax, %rax
// 207: 0f 84 69 01 00 00             je      0x376 <_JIT_ENTRY+0x376>
// 20d: 49 89 c5                      movq    %rax, %r13
// 210: 49 8b 04 24                   movq    (%r12), %rax
// 214: 48 85 c0                      testq   %rax, %rax
// 217: 7f 22                         jg      0x23b <_JIT_ENTRY+0x23b>
// 219: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000021b:  R_X86_64_64  .rodata.str1.1
// 223: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000225:  R_X86_64_64  _Py_NegativeRefcount
// 22d: be fb 02 00 00                movl    $0x2fb, %esi            # imm = 0x2FB
// 232: 4c 89 e2                      movq    %r12, %rdx
// 235: ff d0                         callq   *%rax
// 237: 49 8b 04 24                   movq    (%r12), %rax
// 23b: 85 c0                         testl   %eax, %eax
// 23d: 0f 88 f3 00 00 00             js      0x336 <_JIT_ENTRY+0x336>
// 243: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000245:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 24d: ff d0                         callq   *%rax
// 24f: 49 ff 0c 24                   decq    (%r12)
// 253: 0f 85 dd 00 00 00             jne     0x336 <_JIT_ENTRY+0x336>
// 259: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025b:  R_X86_64_64  _Py_Dealloc
// 263: 4c 89 e7                      movq    %r12, %rdi
// 266: ff d0                         callq   *%rax
// 268: e9 c9 00 00 00                jmp     0x336 <_JIT_ENTRY+0x336>
// 26d: 41 83 fd 02                   cmpl    $0x2, %r13d
// 271: bd 01 00 00 00                movl    $0x1, %ebp
// 276: 41 0f 43 ed                   cmovael %r13d, %ebp
// 27a: 45 31 f6                      xorl    %r14d, %r14d
// 27d: eb 0d                         jmp     0x28c <_JIT_ENTRY+0x28c>
// 27f: 90                            nop
// 280: 49 ff c6                      incq    %r14
// 283: 4c 39 f5                      cmpq    %r14, %rbp
// 286: 0f 84 78 fe ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 28c: 4e 8b 2c f3                   movq    (%rbx,%r14,8), %r13
// 290: 49 8b 45 00                   movq    (%r13), %rax
// 294: 48 85 c0                      testq   %rax, %rax
// 297: 7e 07                         jle     0x2a0 <_JIT_ENTRY+0x2a0>
// 299: 85 c0                         testl   %eax, %eax
// 29b: 78 e3                         js      0x280 <_JIT_ENTRY+0x280>
// 29d: eb 27                         jmp     0x2c6 <_JIT_ENTRY+0x2c6>
// 29f: 90                            nop
// 2a0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002a2:  R_X86_64_64  .rodata.str1.1
// 2aa: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 2af: 4c 89 ea                      movq    %r13, %rdx
// 2b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b4:  R_X86_64_64  _Py_NegativeRefcount
// 2bc: ff d0                         callq   *%rax
// 2be: 49 8b 45 00                   movq    (%r13), %rax
// 2c2: 85 c0                         testl   %eax, %eax
// 2c4: 78 ba                         js      0x280 <_JIT_ENTRY+0x280>
// 2c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2d0: ff d0                         callq   *%rax
// 2d2: 49 ff 4d 00                   decq    (%r13)
// 2d6: 75 a8                         jne     0x280 <_JIT_ENTRY+0x280>
// 2d8: 4c 89 ef                      movq    %r13, %rdi
// 2db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002dd:  R_X86_64_64  _Py_Dealloc
// 2e5: ff d0                         callq   *%rax
// 2e7: eb 97                         jmp     0x280 <_JIT_ENTRY+0x280>
// 2e9: 49 89 c6                      movq    %rax, %r14
// 2ec: e9 c7 00 00 00                jmp     0x3b8 <_JIT_ENTRY+0x3b8>
// 2f1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002f3:  R_X86_64_64  PyExc_TypeError
// 2fb: 48 8b 31                      movq    (%rcx), %rsi
// 2fe: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 302: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000304:  R_X86_64_64  .rodata.str1.1+0x39
// 30c: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000030e:  R_X86_64_64  _PyErr_Format
// 316: 48 89 df                      movq    %rbx, %rdi
// 319: 31 c0                         xorl    %eax, %eax
// 31b: 41 ff d0                      callq   *%r8
// 31e: e9 95 00 00 00                jmp     0x3b8 <_JIT_ENTRY+0x3b8>
// 323: 48 8b 41 50                   movq    0x50(%rcx), %rax
// 327: ff 50 10                      callq   *0x10(%rax)
// 32a: 49 89 c5                      movq    %rax, %r13
// 32d: 48 85 c0                      testq   %rax, %rax
// 330: 0f 84 82 00 00 00             je      0x3b8 <_JIT_ENTRY+0x3b8>
// 336: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000338:  R_X86_64_64  _JIT_OPARG
// 340: f7 d0                         notl    %eax
// 342: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 347: 48 98                         cltq
// 349: 4d 89 2c c7                   movq    %r13, (%r15,%rax,8)
// 34d: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 351: 48 83 c6 08                   addq    $0x8, %rsi
// 355: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000357:  R_X86_64_64  _JIT_CONTINUE
// 35f: 48 8b 3c 24                   movq    (%rsp), %rdi
// 363: 48 89 da                      movq    %rbx, %rdx
// 366: 48 83 c4 28                   addq    $0x28, %rsp
// 36a: 5b                            popq    %rbx
// 36b: 41 5c                         popq    %r12
// 36d: 41 5d                         popq    %r13
// 36f: 41 5e                         popq    %r14
// 371: 41 5f                         popq    %r15
// 373: 5d                            popq    %rbp
// 374: ff e0                         jmpq    *%rax
// 376: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000378:  R_X86_64_64  PyExc_TypeError
// 380: 48 8b 38                      movq    (%rax), %rdi
// 383: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 388: 48 8b 50 18                   movq    0x18(%rax), %rdx
// 38c: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000038e:  R_X86_64_64  .rodata.str1.1+0x7c
// 396: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000398:  R_X86_64_64  _PyErr_FormatFromCause
// 3a0: 31 c0                         xorl    %eax, %eax
// 3a2: ff d1                         callq   *%rcx
// 3a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a6:  R_X86_64_64  .text+0x3e0
// 3ae: bf f8 02 00 00                movl    $0x2f8, %edi            # imm = 0x2F8
// 3b3: 4c 89 e6                      movq    %r12, %rsi
// 3b6: ff d0                         callq   *%rax
// 3b8: 48 8b 04 24                   movq    (%rsp), %rax
// 3bc: 49 29 c6                      subq    %rax, %r14
// 3bf: 49 83 c6 b8                   addq    $-0x48, %r14
// 3c3: 49 c1 ee 03                   shrq    $0x3, %r14
// 3c7: 44 89 70 40                   movl    %r14d, 0x40(%rax)
// 3cb: 31 c0                         xorl    %eax, %eax
// 3cd: e9 dd fc ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 3d2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// 
// 00000000000003e0 <Py_DECREF>:
// 3e0: 53                            pushq   %rbx
// 3e1: 48 89 f3                      movq    %rsi, %rbx
// 3e4: 48 8b 06                      movq    (%rsi), %rax
// 3e7: 48 85 c0                      testq   %rax, %rax
// 3ea: 7e 06                         jle     0x3f2 <Py_DECREF+0x12>
// 3ec: 85 c0                         testl   %eax, %eax
// 3ee: 79 24                         jns     0x414 <Py_DECREF+0x34>
// 3f0: eb 33                         jmp     0x425 <Py_DECREF+0x45>
// 3f2: 89 fe                         movl    %edi, %esi
// 3f4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003f6:  R_X86_64_64  .rodata.str1.1
// 3fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000400:  R_X86_64_64  _Py_NegativeRefcount
// 408: 48 89 da                      movq    %rbx, %rdx
// 40b: ff d0                         callq   *%rax
// 40d: 48 8b 03                      movq    (%rbx), %rax
// 410: 85 c0                         testl   %eax, %eax
// 412: 78 11                         js      0x425 <Py_DECREF+0x45>
// 414: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000416:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 41e: ff d0                         callq   *%rax
// 420: 48 ff 0b                      decq    (%rbx)
// 423: 74 02                         je      0x427 <Py_DECREF+0x47>
// 425: 5b                            popq    %rbx
// 426: c3                            retq
// 427: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000429:  R_X86_64_64  _Py_Dealloc
// 431: 48 89 df                      movq    %rbx, %rdi
// 434: 5b                            popq    %rbx
// 435: ff e0                         jmpq    *%rax
// 437: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_GET_ANEXT_code_body[1080] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd7, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xdf, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4b, 0x8d, 0x1c, 0xcf, 0x48, 0x8b, 0x3b, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x78, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x10, 0x4c, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x54, 0x24, 0x20, 0x4c, 0x89, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x73, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0x69, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x74, 0x01, 0x00, 0x00, 0x4f, 0x8d, 0x34, 0xf7, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x1a, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x7c, 0xc7, 0xf8, 0x48, 0x8b, 0x47, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc8, 0x0f, 0x84, 0x56, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x48, 0x50, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x17, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x49, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x0a, 0x01, 0x00, 0x00, 0xff, 0xd1, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xc6, 0x01, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x69, 0x01, 0x00, 0x00, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfb, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0xf3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0xdd, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0xc9, 0x00, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xed, 0x45, 0x31, 0xf6, 0xeb, 0x0d, 0x90, 0x49, 0xff, 0xc6, 0x4c, 0x39, 0xf5, 0x0f, 0x84, 0x78, 0xfe, 0xff, 0xff, 0x4e, 0x8b, 0x2c, 0xf3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x27, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x49, 0x89, 0xc6, 0xe9, 0xc7, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x31, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0xe9, 0x95, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x41, 0x50, 0xff, 0x50, 0x10, 0x49, 0x89, 0xc5, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x82, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x2c, 0xc7, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x38, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x50, 0x18, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xc0, 0xff, 0xd1, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0xf8, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x29, 0xc6, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x70, 0x40, 0x31, 0xc0, 0xe9, 0xdd, 0xfc, 0xff, 0xff, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x48, 0x89, 0xf3, 0x48, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x24, 0xeb, 0x33, 0x89, 0xfe, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x74, 0x02, 0x5b, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x5b, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_GET_ANEXT_code_holes[34] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyAsyncGen_Type, 0x0},
    {0x1f7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyCoro_GetAwaitableIter, 0x0},
    {0x21b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x245, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x25b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2a2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2f3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x304, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x30e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x338, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x357, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x378, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x38e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x7c},
    {0x398, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_FormatFromCause, 0x0},
    {0x3a6, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x3e0},
    {0x3f6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x400, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x416, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x429, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'async for' requires an iterator with __anext__ method, got %.100s\x00'async for' received an invalid object from __anext__: %.100s\x00"
// ba: 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_GET_ANEXT_data_body[193] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x5f, 0x5f, 0x61, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x5f, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x2c, 0x20, 0x67, 0x6f, 0x74, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73, 0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x5f, 0x5f, 0x61, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x5f, 0x3a, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_GET_ANEXT_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_GET_AWAITABLE
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_GET_AWAITABLE.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d7                   movq    (%r15,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 8d 6e 01                      leal    0x1(%rsi), %ebp
// 36: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3a: 4c 89 c9                      movq    %r9, %rcx
// 3d: 48 f7 d9                      negq    %rcx
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 0f 44 ee                      cmovel  %esi, %ebp
// 46: 4c 63 df                      movslq  %edi, %r11
// 49: 49 f7 d1                      notq    %r9
// 4c: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 50: 4f 8b 24 df                   movq    (%r15,%r11,8), %r12
// 54: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000056:  R_X86_64_64  PyMethodDescr_Type
// 5e: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 63: 75 20                         jne     0x85 <_JIT_ENTRY+0x85>
// 65: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6a: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 71: 75 12                         jne     0x85 <_JIT_ENTRY+0x85>
// 73: 4b 8d 1c cf                   leaq    (%r15,%r9,8), %rbx
// 77: 48 8b 3b                      movq    (%rbx), %rdi
// 7a: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 7e: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 83: 74 37                         je      0xbc <_JIT_ENTRY+0xbc>
// 85: 4d 29 c7                      subq    %r8, %r15
// 88: 49 83 c7 b8                   addq    $-0x48, %r15
// 8c: 49 c1 ef 03                   shrq    $0x3, %r15
// 90: 45 89 78 40                   movl    %r15d, 0x40(%r8)
// 94: 49 8b 00                      movq    (%r8), %rax
// 97: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000099:  R_X86_64_64  _JIT_TARGET
// a1: 89 c9                         movl    %ecx, %ecx
// a3: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a7: 48 05 c8 00 00 00             addq    $0xc8, %rax
// ad: 48 83 c4 28                   addq    $0x28, %rsp
// b1: 5b                            popq    %rbx
// b2: 41 5c                         popq    %r12
// b4: 41 5d                         popq    %r13
// b6: 41 5e                         popq    %r14
// b8: 41 5f                         popq    %r15
// ba: 5d                            popq    %rbp
// bb: c3                            retq
// bc: 4c 89 5c 24 18                movq    %r11, 0x18(%rsp)
// c1: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// c6: 48 89 54 24 20                movq    %rdx, 0x20(%rsp)
// cb: 4c 89 04 24                   movq    %r8, (%rsp)
// cf: 48 85 c0                      testq   %rax, %rax
// d2: 41 0f 94 c6                   sete    %r14b
// d6: 8d 45 ff                      leal    -0x1(%rbp), %eax
// d9: 48 8d 73 08                   leaq    0x8(%rbx), %rsi
// dd: 48 63 d0                      movslq  %eax, %rdx
// e0: ff 51 08                      callq   *0x8(%rcx)
// e3: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// e8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ea:  R_X86_64_64  _JIT_OPARG
// f2: 66 85 c0                      testw   %ax, %ax
// f5: 0f 94 c0                      sete    %al
// f8: 41 84 c6                      testb   %al, %r14b
// fb: 0f 84 ab 00 00 00             je      0x1ac <_JIT_ENTRY+0x1ac>
// 101: 49 8b 04 24                   movq    (%r12), %rax
// 105: 48 85 c0                      testq   %rax, %rax
// 108: 7f 22                         jg      0x12c <_JIT_ENTRY+0x12c>
// 10a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010c:  R_X86_64_64  .rodata.str1.1
// 114: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000116:  R_X86_64_64  _Py_NegativeRefcount
// 11e: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 123: 4c 89 e2                      movq    %r12, %rdx
// 126: ff d0                         callq   *%rax
// 128: 49 8b 04 24                   movq    (%r12), %rax
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 4c 8b 74 24 20                movq    0x20(%rsp), %r14
// 133: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 138: 78 21                         js      0x15b <_JIT_ENTRY+0x15b>
// 13a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 144: ff d0                         callq   *%rax
// 146: 49 ff 0c 24                   decq    (%r12)
// 14a: 75 0f                         jne     0x15b <_JIT_ENTRY+0x15b>
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_Dealloc
// 156: 4c 89 e7                      movq    %r12, %rdi
// 159: ff d0                         callq   *%rax
// 15b: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 160: 49 8d 2c c7                   leaq    (%r15,%rax,8), %rbp
// 164: 48 85 db                      testq   %rbx, %rbx
// 167: 0f 84 b1 01 00 00             je      0x31e <_JIT_ENTRY+0x31e>
// 16d: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 172: 4d 8d 2c c7                   leaq    (%r15,%rax,8), %r13
// 176: 48 89 5d 00                   movq    %rbx, (%rbp)
// 17a: 49 8b 46 10                   movq    0x10(%r14), %rax
// 17e: 48 8b 00                      movq    (%rax), %rax
// 181: 84 c0                         testb   %al, %al
// 183: 0f 84 a0 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_HandlePending
// 193: 4c 89 f7                      movq    %r14, %rdi
// 196: ff d0                         callq   *%rax
// 198: 85 c0                         testl   %eax, %eax
// 19a: 0f 84 89 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 1a0: 4c 89 ed                      movq    %r13, %rbp
// 1a3: 48 8b 1c 24                   movq    (%rsp), %rbx
// 1a7: e9 76 01 00 00                jmp     0x322 <_JIT_ENTRY+0x322>
// 1ac: 83 fd 02                      cmpl    $0x2, %ebp
// 1af: 41 be 01 00 00 00             movl    $0x1, %r14d
// 1b5: 44 0f 43 f5                   cmovael %ebp, %r14d
// 1b9: 45 31 ed                      xorl    %r13d, %r13d
// 1bc: eb 0e                         jmp     0x1cc <_JIT_ENTRY+0x1cc>
// 1be: 66 90                         nop
// 1c0: 49 ff c5                      incq    %r13
// 1c3: 4d 39 ee                      cmpq    %r13, %r14
// 1c6: 0f 84 35 ff ff ff             je      0x101 <_JIT_ENTRY+0x101>
// 1cc: 4a 8b 2c eb                   movq    (%rbx,%r13,8), %rbp
// 1d0: 48 8b 45 00                   movq    (%rbp), %rax
// 1d4: 48 85 c0                      testq   %rax, %rax
// 1d7: 7e 07                         jle     0x1e0 <_JIT_ENTRY+0x1e0>
// 1d9: 85 c0                         testl   %eax, %eax
// 1db: 78 e3                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 1dd: eb 27                         jmp     0x206 <_JIT_ENTRY+0x206>
// 1df: 90                            nop
// 1e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e2:  R_X86_64_64  .rodata.str1.1
// 1ea: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ef: 48 89 ea                      movq    %rbp, %rdx
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _Py_NegativeRefcount
// 1fc: ff d0                         callq   *%rax
// 1fe: 48 8b 45 00                   movq    (%rbp), %rax
// 202: 85 c0                         testl   %eax, %eax
// 204: 78 ba                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 210: ff d0                         callq   *%rax
// 212: 48 ff 4d 00                   decq    (%rbp)
// 216: 75 a8                         jne     0x1c0 <_JIT_ENTRY+0x1c0>
// 218: 48 89 ef                      movq    %rbp, %rdi
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_Dealloc
// 225: ff d0                         callq   *%rax
// 227: eb 97                         jmp     0x1c0 <_JIT_ENTRY+0x1c0>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _JIT_OPARG
// 233: f7 d0                         notl    %eax
// 235: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 23a: 48 63 d8                      movslq  %eax, %rbx
// 23d: 49 8b 6c df f8                movq    -0x8(%r15,%rbx,8), %rbp
// 242: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000244:  R_X86_64_64  _PyCoro_GetAwaitableIter
// 24c: 48 89 ef                      movq    %rbp, %rdi
// 24f: ff d0                         callq   *%rax
// 251: 49 89 c4                      movq    %rax, %r12
// 254: 48 85 c0                      testq   %rax, %rax
// 257: 74 0f                         je      0x268 <_JIT_ENTRY+0x268>
// 259: 48 8b 45 00                   movq    (%rbp), %rax
// 25d: 48 85 c0                      testq   %rax, %rax
// 260: 7e 2f                         jle     0x291 <_JIT_ENTRY+0x291>
// 262: 85 c0                         testl   %eax, %eax
// 264: 79 51                         jns     0x2b7 <_JIT_ENTRY+0x2b7>
// 266: eb 70                         jmp     0x2d8 <_JIT_ENTRY+0x2d8>
// 268: 48 8b 75 08                   movq    0x8(%rbp), %rsi
// 26c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026e:  R_X86_64_64  _JIT_OPARG
// 276: 0f b7 d0                      movzwl  %ax, %edx
// 279: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027b:  R_X86_64_64  _PyEval_FormatAwaitableError
// 283: 4c 89 f7                      movq    %r14, %rdi
// 286: ff d0                         callq   *%rax
// 288: 48 8b 45 00                   movq    (%rbp), %rax
// 28c: 48 85 c0                      testq   %rax, %rax
// 28f: 7f d1                         jg      0x262 <_JIT_ENTRY+0x262>
// 291: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000293:  R_X86_64_64  .rodata.str1.1
// 29b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029d:  R_X86_64_64  _Py_NegativeRefcount
// 2a5: be 0c 03 00 00                movl    $0x30c, %esi            # imm = 0x30C
// 2aa: 48 89 ea                      movq    %rbp, %rdx
// 2ad: ff d0                         callq   *%rax
// 2af: 48 8b 45 00                   movq    (%rbp), %rax
// 2b3: 85 c0                         testl   %eax, %eax
// 2b5: 78 21                         js      0x2d8 <_JIT_ENTRY+0x2d8>
// 2b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2c1: ff d0                         callq   *%rax
// 2c3: 48 ff 4d 00                   decq    (%rbp)
// 2c7: 75 0f                         jne     0x2d8 <_JIT_ENTRY+0x2d8>
// 2c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cb:  R_X86_64_64  _Py_Dealloc
// 2d3: 48 89 ef                      movq    %rbp, %rdi
// 2d6: ff d0                         callq   *%rax
// 2d8: 49 8d 2c df                   leaq    (%r15,%rbx,8), %rbp
// 2dc: 48 83 c5 f8                   addq    $-0x8, %rbp
// 2e0: 4d 85 e4                      testq   %r12, %r12
// 2e3: 74 39                         je      0x31e <_JIT_ENTRY+0x31e>
// 2e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e7:  R_X86_64_64  PyCoro_Type
// 2ef: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2f4: 74 41                         je      0x337 <_JIT_ENTRY+0x337>
// 2f6: 4c 89 65 00                   movq    %r12, (%rbp)
// 2fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fc:  R_X86_64_64  _JIT_CONTINUE
// 304: 48 8b 3c 24                   movq    (%rsp), %rdi
// 308: 4c 89 ee                      movq    %r13, %rsi
// 30b: 4c 89 f2                      movq    %r14, %rdx
// 30e: 48 83 c4 28                   addq    $0x28, %rsp
// 312: 5b                            popq    %rbx
// 313: 41 5c                         popq    %r12
// 315: 41 5d                         popq    %r13
// 317: 41 5e                         popq    %r14
// 319: 41 5f                         popq    %r15
// 31b: 5d                            popq    %rbp
// 31c: ff e0                         jmpq    *%rax
// 31e: 48 8b 1c 24                   movq    (%rsp), %rbx
// 322: 48 29 dd                      subq    %rbx, %rbp
// 325: 48 83 c5 b8                   addq    $-0x48, %rbp
// 329: 48 c1 ed 03                   shrq    $0x3, %rbp
// 32d: 89 6b 40                      movl    %ebp, 0x40(%rbx)
// 330: 31 c0                         xorl    %eax, %eax
// 332: e9 76 fd ff ff                jmp     0xad <_JIT_ENTRY+0xad>
// 337: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000339:  R_X86_64_64  _PyGen_yf
// 341: 4c 89 e7                      movq    %r12, %rdi
// 344: ff d0                         callq   *%rax
// 346: 48 85 c0                      testq   %rax, %rax
// 349: 74 ab                         je      0x2f6 <_JIT_ENTRY+0x2f6>
// 34b: 49 89 c7                      movq    %rax, %r15
// 34e: 48 8b 00                      movq    (%rax), %rax
// 351: 48 85 c0                      testq   %rax, %rax
// 354: 7f 21                         jg      0x377 <_JIT_ENTRY+0x377>
// 356: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000358:  R_X86_64_64  .rodata.str1.1
// 360: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000362:  R_X86_64_64  _Py_NegativeRefcount
// 36a: be 13 03 00 00                movl    $0x313, %esi            # imm = 0x313
// 36f: 4c 89 fa                      movq    %r15, %rdx
// 372: ff d0                         callq   *%rax
// 374: 49 8b 07                      movq    (%r15), %rax
// 377: 85 c0                         testl   %eax, %eax
// 379: 48 8b 1c 24                   movq    (%rsp), %rbx
// 37d: 78 20                         js      0x39f <_JIT_ENTRY+0x39f>
// 37f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000381:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 389: ff d0                         callq   *%rax
// 38b: 49 ff 0f                      decq    (%r15)
// 38e: 75 0f                         jne     0x39f <_JIT_ENTRY+0x39f>
// 390: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000392:  R_X86_64_64  _Py_Dealloc
// 39a: 4c 89 ff                      movq    %r15, %rdi
// 39d: ff d0                         callq   *%rax
// 39f: 49 8b 04 24                   movq    (%r12), %rax
// 3a3: 48 85 c0                      testq   %rax, %rax
// 3a6: 7f 22                         jg      0x3ca <_JIT_ENTRY+0x3ca>
// 3a8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003aa:  R_X86_64_64  .rodata.str1.1
// 3b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003b4:  R_X86_64_64  _Py_NegativeRefcount
// 3bc: be 14 03 00 00                movl    $0x314, %esi            # imm = 0x314
// 3c1: 4c 89 e2                      movq    %r12, %rdx
// 3c4: ff d0                         callq   *%rax
// 3c6: 49 8b 04 24                   movq    (%r12), %rax
// 3ca: 85 c0                         testl   %eax, %eax
// 3cc: 78 21                         js      0x3ef <_JIT_ENTRY+0x3ef>
// 3ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003d0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3d8: ff d0                         callq   *%rax
// 3da: 49 ff 0c 24                   decq    (%r12)
// 3de: 75 0f                         jne     0x3ef <_JIT_ENTRY+0x3ef>
// 3e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003e2:  R_X86_64_64  _Py_Dealloc
// 3ea: 4c 89 e7                      movq    %r12, %rdi
// 3ed: ff d0                         callq   *%rax
// 3ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003f1:  R_X86_64_64  PyExc_RuntimeError
// 3f9: 48 8b 30                      movq    (%rax), %rsi
// 3fc: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000003fe:  R_X86_64_64  .rodata.str1.1+0x39
// 406: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000408:  R_X86_64_64  _PyErr_SetString
// 410: 4c 89 f7                      movq    %r14, %rdi
// 413: ff d0                         callq   *%rax
// 415: e9 08 ff ff ff                jmp     0x322 <_JIT_ENTRY+0x322>
// 41a: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_GET_AWAITABLE_code_body[1051] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd7, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xdf, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4b, 0x8d, 0x1c, 0xcf, 0x48, 0x8b, 0x3b, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x78, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x18, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x54, 0x24, 0x20, 0x4c, 0x89, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc6, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x73, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc6, 0x0f, 0x84, 0xab, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x20, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x2c, 0xc7, 0x48, 0x85, 0xdb, 0x0f, 0x84, 0xb1, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x4d, 0x8d, 0x2c, 0xc7, 0x48, 0x89, 0x5d, 0x00, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xa0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x89, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xed, 0x48, 0x8b, 0x1c, 0x24, 0xe9, 0x76, 0x01, 0x00, 0x00, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xf5, 0x45, 0x31, 0xed, 0xeb, 0x0e, 0x66, 0x90, 0x49, 0xff, 0xc5, 0x4d, 0x39, 0xee, 0x0f, 0x84, 0x35, 0xff, 0xff, 0xff, 0x4a, 0x8b, 0x2c, 0xeb, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x27, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xd8, 0x49, 0x8b, 0x6c, 0xdf, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x48, 0x85, 0xc0, 0x74, 0x0f, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x2f, 0x85, 0xc0, 0x79, 0x51, 0xeb, 0x70, 0x48, 0x8b, 0x75, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xd1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x0c, 0x03, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8d, 0x2c, 0xdf, 0x48, 0x83, 0xc5, 0xf8, 0x4d, 0x85, 0xe4, 0x74, 0x39, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x74, 0x41, 0x4c, 0x89, 0x65, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x1c, 0x24, 0x48, 0x29, 0xdd, 0x48, 0x83, 0xc5, 0xb8, 0x48, 0xc1, 0xed, 0x03, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0x76, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0xab, 0x49, 0x89, 0xc7, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x13, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x14, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0xe9, 0x08, 0xff, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_GET_AWAITABLE_code_holes[36] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x56, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x99, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xea, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x116, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x244, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyCoro_GetAwaitableIter, 0x0},
    {0x26e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x27b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatAwaitableError, 0x0},
    {0x293, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x29d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2e7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCoro_Type, 0x0},
    {0x2fc, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x339, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyGen_yf, 0x0},
    {0x358, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x362, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x381, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x392, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3aa, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3e2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3f1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_RuntimeError, 0x0},
    {0x3fe, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x408, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00coroutine is being awaited already\x00'
// 5c: 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_GET_AWAITABLE_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x63, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x20, 0x69, 0x73, 0x20, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x77, 0x61, 0x69, 0x74, 0x65, 0x64, 0x20, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_GET_AWAITABLE_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_GET_ITER
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_GET_ITER.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d7                   movq    (%r15,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 df                   movq    (%r15,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c cf                   leaq    (%r15,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 c7                      subq    %r8, %r15
// 8b: 49 83 c7 b8                   addq    $-0x48, %r15
// 8f: 49 c1 ef 03                   shrq    $0x3, %r15
// 93: 45 89 78 40                   movl    %r15d, 0x40(%r8)
// 97: 49 8b 00                      movq    (%r8), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 5c 24 18                movq    %r11, 0x18(%rsp)
// c4: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// c9: 48 89 14 24                   movq    %rdx, (%rsp)
// cd: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 aa 00 00 00             je      0x1ad <_JIT_ENTRY+0x1ad>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 1c 24                   movq    (%rsp), %rbx
// 134: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 139: 78 21                         js      0x15c <_JIT_ENTRY+0x15c>
// 13b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 145: ff d0                         callq   *%rax
// 147: 49 ff 0c 24                   decq    (%r12)
// 14b: 75 0f                         jne     0x15c <_JIT_ENTRY+0x15c>
// 14d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014f:  R_X86_64_64  _Py_Dealloc
// 157: 4c 89 e7                      movq    %r12, %rdi
// 15a: ff d0                         callq   *%rax
// 15c: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 161: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 165: 4d 85 ed                      testq   %r13, %r13
// 168: 4c 8b 74 24 20                movq    0x20(%rsp), %r14
// 16d: 0f 84 65 01 00 00             je      0x2d8 <_JIT_ENTRY+0x2d8>
// 173: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 178: 4d 8d 24 cf                   leaq    (%r15,%rcx,8), %r12
// 17c: 4c 89 28                      movq    %r13, (%rax)
// 17f: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 183: 48 8b 00                      movq    (%rax), %rax
// 186: 84 c0                         testb   %al, %al
// 188: 0f 84 9b 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_HandlePending
// 198: 48 89 df                      movq    %rbx, %rdi
// 19b: ff d0                         callq   *%rax
// 19d: 85 c0                         testl   %eax, %eax
// 19f: 0f 84 84 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 1a5: 4c 89 e0                      movq    %r12, %rax
// 1a8: e9 2b 01 00 00                jmp     0x2d8 <_JIT_ENTRY+0x2d8>
// 1ad: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1b1: 41 be 01 00 00 00             movl    $0x1, %r14d
// 1b7: 45 0f 43 f5                   cmovael %r13d, %r14d
// 1bb: 31 db                         xorl    %ebx, %ebx
// 1bd: eb 0d                         jmp     0x1cc <_JIT_ENTRY+0x1cc>
// 1bf: 90                            nop
// 1c0: 48 ff c3                      incq    %rbx
// 1c3: 49 39 de                      cmpq    %rbx, %r14
// 1c6: 0f 84 37 ff ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 1cc: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1d1: 49 8b 45 00                   movq    (%r13), %rax
// 1d5: 48 85 c0                      testq   %rax, %rax
// 1d8: 7e 06                         jle     0x1e0 <_JIT_ENTRY+0x1e0>
// 1da: 85 c0                         testl   %eax, %eax
// 1dc: 78 e2                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 1de: eb 26                         jmp     0x206 <_JIT_ENTRY+0x206>
// 1e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e2:  R_X86_64_64  .rodata.str1.1
// 1ea: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ef: 4c 89 ea                      movq    %r13, %rdx
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _Py_NegativeRefcount
// 1fc: ff d0                         callq   *%rax
// 1fe: 49 8b 45 00                   movq    (%r13), %rax
// 202: 85 c0                         testl   %eax, %eax
// 204: 78 ba                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 210: ff d0                         callq   *%rax
// 212: 49 ff 4d 00                   decq    (%r13)
// 216: 75 a8                         jne     0x1c0 <_JIT_ENTRY+0x1c0>
// 218: 4c 89 ef                      movq    %r13, %rdi
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_Dealloc
// 225: ff d0                         callq   *%rax
// 227: eb 97                         jmp     0x1c0 <_JIT_ENTRY+0x1c0>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _JIT_OPARG
// 233: f7 d0                         notl    %eax
// 235: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 23a: 48 63 d8                      movslq  %eax, %rbx
// 23d: 49 8b 6c df f8                movq    -0x8(%r15,%rbx,8), %rbp
// 242: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000244:  R_X86_64_64  PyObject_GetIter
// 24c: 48 89 ef                      movq    %rbp, %rdi
// 24f: ff d0                         callq   *%rax
// 251: 49 89 c5                      movq    %rax, %r13
// 254: 48 8b 45 00                   movq    (%rbp), %rax
// 258: 48 85 c0                      testq   %rax, %rax
// 25b: 7f 22                         jg      0x27f <_JIT_ENTRY+0x27f>
// 25d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000025f:  R_X86_64_64  .rodata.str1.1
// 267: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000269:  R_X86_64_64  _Py_NegativeRefcount
// 271: be 4a 08 00 00                movl    $0x84a, %esi            # imm = 0x84A
// 276: 48 89 ea                      movq    %rbp, %rdx
// 279: ff d0                         callq   *%rax
// 27b: 48 8b 45 00                   movq    (%rbp), %rax
// 27f: 85 c0                         testl   %eax, %eax
// 281: 78 21                         js      0x2a4 <_JIT_ENTRY+0x2a4>
// 283: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000285:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 28d: ff d0                         callq   *%rax
// 28f: 48 ff 4d 00                   decq    (%rbp)
// 293: 75 0f                         jne     0x2a4 <_JIT_ENTRY+0x2a4>
// 295: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000297:  R_X86_64_64  _Py_Dealloc
// 29f: 48 89 ef                      movq    %rbp, %rdi
// 2a2: ff d0                         callq   *%rax
// 2a4: 49 8d 04 df                   leaq    (%r15,%rbx,8), %rax
// 2a8: 48 83 c0 f8                   addq    $-0x8, %rax
// 2ac: 4d 85 ed                      testq   %r13, %r13
// 2af: 74 27                         je      0x2d8 <_JIT_ENTRY+0x2d8>
// 2b1: 4c 89 28                      movq    %r13, (%rax)
// 2b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b6:  R_X86_64_64  _JIT_CONTINUE
// 2be: 4c 89 f7                      movq    %r14, %rdi
// 2c1: 4c 89 e6                      movq    %r12, %rsi
// 2c4: 48 8b 14 24                   movq    (%rsp), %rdx
// 2c8: 48 83 c4 28                   addq    $0x28, %rsp
// 2cc: 5b                            popq    %rbx
// 2cd: 41 5c                         popq    %r12
// 2cf: 41 5d                         popq    %r13
// 2d1: 41 5e                         popq    %r14
// 2d3: 41 5f                         popq    %r15
// 2d5: 5d                            popq    %rbp
// 2d6: ff e0                         jmpq    *%rax
// 2d8: 4c 29 f0                      subq    %r14, %rax
// 2db: 48 83 c0 b8                   addq    $-0x48, %rax
// 2df: 48 c1 e8 03                   shrq    $0x3, %rax
// 2e3: 41 89 46 40                   movl    %eax, 0x40(%r14)
// 2e7: 31 c0                         xorl    %eax, %eax
// 2e9: e9 c2 fd ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 2ee: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_GET_ITER_code_body[751] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd7, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xdf, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xcf, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x78, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x18, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x14, 0x24, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xaa, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x04, 0xc7, 0x4d, 0x85, 0xed, 0x4c, 0x8b, 0x74, 0x24, 0x20, 0x0f, 0x84, 0x65, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x4d, 0x8d, 0x24, 0xcf, 0x4c, 0x89, 0x28, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0x9b, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x84, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0xe9, 0x2b, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xdb, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x37, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xd8, 0x49, 0x8b, 0x6c, 0xdf, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4a, 0x08, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xdf, 0x48, 0x83, 0xc0, 0xf8, 0x4d, 0x85, 0xed, 0x74, 0x27, 0x4c, 0x89, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x29, 0xf0, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x46, 0x40, 0x31, 0xc0, 0xe9, 0xc2, 0xfd, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_GET_ITER_code_holes[21] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x244, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetIter, 0x0},
    {0x25f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x269, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x285, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x297, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2b6, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_GET_ITER_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_GET_ITER_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_GET_LEN
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_GET_LEN.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d6                   movq    (%r14,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 de                   movq    (%r14,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c ce                   leaq    (%r14,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 c6                      subq    %r8, %r14
// 8b: 49 83 c6 b8                   addq    $-0x48, %r14
// 8f: 49 c1 ee 03                   shrq    $0x3, %r14
// 93: 45 89 70 40                   movl    %r14d, 0x40(%r8)
// 97: 49 8b 00                      movq    (%r8), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 5c 24 18                movq    %r11, 0x18(%rsp)
// c4: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// c9: 48 89 54 24 20                movq    %rdx, 0x20(%rsp)
// ce: 4c 89 04 24                   movq    %r8, (%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 21 01 00 00             je      0x224 <_JIT_ENTRY+0x224>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 135: 78 21                         js      0x158 <_JIT_ENTRY+0x158>
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 141: ff d0                         callq   *%rax
// 143: 49 ff 0c 24                   decq    (%r12)
// 147: 75 0f                         jne     0x158 <_JIT_ENTRY+0x158>
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_Dealloc
// 153: 4c 89 e7                      movq    %r12, %rdi
// 156: ff d0                         callq   *%rax
// 158: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 15d: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 161: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 166: 48 85 d2                      testq   %rdx, %rdx
// 169: 0f 84 3a 01 00 00             je      0x2a9 <_JIT_ENTRY+0x2a9>
// 16f: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 174: 4d 8d 3c ce                   leaq    (%r14,%rcx,8), %r15
// 178: 48 89 10                      movq    %rdx, (%rax)
// 17b: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 17f: 48 8b 00                      movq    (%rax), %rax
// 182: 84 c0                         testb   %al, %al
// 184: 74 17                         je      0x19d <_JIT_ENTRY+0x19d>
// 186: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000188:  R_X86_64_64  _Py_HandlePending
// 190: 48 89 df                      movq    %rbx, %rdi
// 193: ff d0                         callq   *%rax
// 195: 85 c0                         testl   %eax, %eax
// 197: 0f 85 0f 01 00 00             jne     0x2ac <_JIT_ENTRY+0x2ac>
// 19d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019f:  R_X86_64_64  _JIT_OPARG
// 1a7: f7 d0                         notl    %eax
// 1a9: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1ae: 48 98                         cltq
// 1b0: 49 8b 7c c6 f8                movq    -0x8(%r14,%rax,8), %rdi
// 1b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b7:  R_X86_64_64  PyObject_Size
// 1bf: ff d0                         callq   *%rax
// 1c1: 48 85 c0                      testq   %rax, %rax
// 1c4: 0f 88 e2 00 00 00             js      0x2ac <_JIT_ENTRY+0x2ac>
// 1ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001cc:  R_X86_64_64  PyLong_FromSsize_t
// 1d4: 48 89 c7                      movq    %rax, %rdi
// 1d7: ff d1                         callq   *%rcx
// 1d9: 48 85 c0                      testq   %rax, %rax
// 1dc: 0f 84 ca 00 00 00             je      0x2ac <_JIT_ENTRY+0x2ac>
// 1e2: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e4:  R_X86_64_64  _JIT_OPARG
// 1ec: f7 d1                         notl    %ecx
// 1ee: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 1f4: 48 63 c9                      movslq  %ecx, %rcx
// 1f7: 49 89 04 ce                   movq    %rax, (%r14,%rcx,8)
// 1fb: 49 8d 34 ce                   leaq    (%r14,%rcx,8), %rsi
// 1ff: 48 83 c6 08                   addq    $0x8, %rsi
// 203: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000205:  R_X86_64_64  _JIT_CONTINUE
// 20d: 48 8b 3c 24                   movq    (%rsp), %rdi
// 211: 48 89 da                      movq    %rbx, %rdx
// 214: 48 83 c4 28                   addq    $0x28, %rsp
// 218: 5b                            popq    %rbx
// 219: 41 5c                         popq    %r12
// 21b: 41 5d                         popq    %r13
// 21d: 41 5e                         popq    %r14
// 21f: 41 5f                         popq    %r15
// 221: 5d                            popq    %rbp
// 222: ff e0                         jmpq    *%rax
// 224: 41 83 fd 02                   cmpl    $0x2, %r13d
// 228: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 22e: 45 0f 43 fd                   cmovael %r13d, %r15d
// 232: 31 db                         xorl    %ebx, %ebx
// 234: eb 16                         jmp     0x24c <_JIT_ENTRY+0x24c>
// 236: 66 2e 0f 1f 84 00 00 00 00 00 nopw    %cs:(%rax,%rax)
// 240: 48 ff c3                      incq    %rbx
// 243: 49 39 df                      cmpq    %rbx, %r15
// 246: 0f 84 b7 fe ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 24c: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 251: 49 8b 45 00                   movq    (%r13), %rax
// 255: 48 85 c0                      testq   %rax, %rax
// 258: 7e 06                         jle     0x260 <_JIT_ENTRY+0x260>
// 25a: 85 c0                         testl   %eax, %eax
// 25c: 78 e2                         js      0x240 <_JIT_ENTRY+0x240>
// 25e: eb 26                         jmp     0x286 <_JIT_ENTRY+0x286>
// 260: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000262:  R_X86_64_64  .rodata.str1.1
// 26a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 26f: 4c 89 ea                      movq    %r13, %rdx
// 272: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000274:  R_X86_64_64  _Py_NegativeRefcount
// 27c: ff d0                         callq   *%rax
// 27e: 49 8b 45 00                   movq    (%r13), %rax
// 282: 85 c0                         testl   %eax, %eax
// 284: 78 ba                         js      0x240 <_JIT_ENTRY+0x240>
// 286: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000288:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 290: ff d0                         callq   *%rax
// 292: 49 ff 4d 00                   decq    (%r13)
// 296: 75 a8                         jne     0x240 <_JIT_ENTRY+0x240>
// 298: 4c 89 ef                      movq    %r13, %rdi
// 29b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029d:  R_X86_64_64  _Py_Dealloc
// 2a5: ff d0                         callq   *%rax
// 2a7: eb 97                         jmp     0x240 <_JIT_ENTRY+0x240>
// 2a9: 49 89 c7                      movq    %rax, %r15
// 2ac: 48 8b 04 24                   movq    (%rsp), %rax
// 2b0: 49 29 c7                      subq    %rax, %r15
// 2b3: 49 83 c7 b8                   addq    $-0x48, %r15
// 2b7: 49 c1 ef 03                   shrq    $0x3, %r15
// 2bb: 44 89 78 40                   movl    %r15d, 0x40(%rax)
// 2bf: 31 c0                         xorl    %eax, %eax
// 2c1: e9 ea fd ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 2c6: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_GET_LEN_code_body[711] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd6, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xde, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xce, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc6, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x70, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x18, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x54, 0x24, 0x20, 0x4c, 0x89, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0x21, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x3a, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x4d, 0x8d, 0x3c, 0xce, 0x48, 0x89, 0x10, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x0f, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x7c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0xe2, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xca, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x04, 0xce, 0x49, 0x8d, 0x34, 0xce, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xdb, 0xeb, 0x16, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0xb7, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x49, 0x89, 0xc7, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x78, 0x40, 0x31, 0xc0, 0xe9, 0xea, 0xfd, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_GET_LEN_code_holes[19] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x19f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1b7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0x1cc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0x1e4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x205, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x262, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x274, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x288, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x29d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_GET_LEN_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_GET_LEN_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_GET_YIELD_FROM_ITER
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_GET_YIELD_FROM_ITER.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d7                   movq    (%r15,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 df                   movq    (%r15,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c cf                   leaq    (%r15,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 c7                      subq    %r8, %r15
// 8b: 49 83 c7 b8                   addq    $-0x48, %r15
// 8f: 49 c1 ef 03                   shrq    $0x3, %r15
// 93: 45 89 78 40                   movl    %r15d, 0x40(%r8)
// 97: 49 8b 00                      movq    (%r8), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 5c 24 10                movq    %r11, 0x10(%rsp)
// c4: 4c 89 14 24                   movq    %r10, (%rsp)
// c8: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cd: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 53 01 00 00             je      0x256 <_JIT_ENTRY+0x256>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 135: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// 13a: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 13f: 78 21                         js      0x162 <_JIT_ENTRY+0x162>
// 141: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000143:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 14b: ff d0                         callq   *%rax
// 14d: 49 ff 0c 24                   decq    (%r12)
// 151: 75 0f                         jne     0x162 <_JIT_ENTRY+0x162>
// 153: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000155:  R_X86_64_64  _Py_Dealloc
// 15d: 4c 89 e7                      movq    %r12, %rdi
// 160: ff d0                         callq   *%rax
// 162: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 167: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 16b: 4d 85 ed                      testq   %r13, %r13
// 16e: 0f 84 65 01 00 00             je      0x2d9 <_JIT_ENTRY+0x2d9>
// 174: 48 8b 0c 24                   movq    (%rsp), %rcx
// 178: 4d 8d 24 cf                   leaq    (%r15,%rcx,8), %r12
// 17c: 4c 89 28                      movq    %r13, (%rax)
// 17f: 49 8b 46 10                   movq    0x10(%r14), %rax
// 183: 48 8b 00                      movq    (%rax), %rax
// 186: 84 c0                         testb   %al, %al
// 188: 74 17                         je      0x1a1 <_JIT_ENTRY+0x1a1>
// 18a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018c:  R_X86_64_64  _Py_HandlePending
// 194: 4c 89 f7                      movq    %r14, %rdi
// 197: ff d0                         callq   *%rax
// 199: 85 c0                         testl   %eax, %eax
// 19b: 0f 85 3b 01 00 00             jne     0x2dc <_JIT_ENTRY+0x2dc>
// 1a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a3:  R_X86_64_64  _JIT_OPARG
// 1ab: f7 d0                         notl    %eax
// 1ad: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1b2: 48 98                         cltq
// 1b4: 4d 8b 6c c7 f8                movq    -0x8(%r15,%rax,8), %r13
// 1b9: 49 8b 45 08                   movq    0x8(%r13), %rax
// 1bd: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001bf:  R_X86_64_64  PyCoro_Type
// 1c7: 48 39 c8                      cmpq    %rcx, %rax
// 1ca: 0f 84 22 01 00 00             je      0x2f2 <_JIT_ENTRY+0x2f2>
// 1d0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d2:  R_X86_64_64  PyGen_Type
// 1da: 48 39 c8                      cmpq    %rcx, %rax
// 1dd: 0f 84 1d 01 00 00             je      0x300 <_JIT_ENTRY+0x300>
// 1e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e5:  R_X86_64_64  PyObject_GetIter
// 1ed: 4c 89 ef                      movq    %r13, %rdi
// 1f0: ff d0                         callq   *%rax
// 1f2: 48 85 c0                      testq   %rax, %rax
// 1f5: 0f 84 e1 00 00 00             je      0x2dc <_JIT_ENTRY+0x2dc>
// 1fb: 48 89 c5                      movq    %rax, %rbp
// 1fe: 49 8b 45 00                   movq    (%r13), %rax
// 202: 48 85 c0                      testq   %rax, %rax
// 205: 7f 22                         jg      0x229 <_JIT_ENTRY+0x229>
// 207: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000209:  R_X86_64_64  .rodata.str1.1
// 211: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000213:  R_X86_64_64  _Py_NegativeRefcount
// 21b: be 6a 08 00 00                movl    $0x86a, %esi            # imm = 0x86A
// 220: 4c 89 ea                      movq    %r13, %rdx
// 223: ff d0                         callq   *%rax
// 225: 49 8b 45 00                   movq    (%r13), %rax
// 229: 85 c0                         testl   %eax, %eax
// 22b: 78 21                         js      0x24e <_JIT_ENTRY+0x24e>
// 22d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 237: ff d0                         callq   *%rax
// 239: 49 ff 4d 00                   decq    (%r13)
// 23d: 75 0f                         jne     0x24e <_JIT_ENTRY+0x24e>
// 23f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000241:  R_X86_64_64  _Py_Dealloc
// 249: 4c 89 ef                      movq    %r13, %rdi
// 24c: ff d0                         callq   *%rax
// 24e: 49 89 ed                      movq    %rbp, %r13
// 251: e9 aa 00 00 00                jmp     0x300 <_JIT_ENTRY+0x300>
// 256: 41 83 fd 02                   cmpl    $0x2, %r13d
// 25a: bb 01 00 00 00                movl    $0x1, %ebx
// 25f: 41 0f 43 dd                   cmovael %r13d, %ebx
// 263: 45 31 f6                      xorl    %r14d, %r14d
// 266: eb 14                         jmp     0x27c <_JIT_ENTRY+0x27c>
// 268: 0f 1f 84 00 00 00 00 00       nopl    (%rax,%rax)
// 270: 49 ff c6                      incq    %r14
// 273: 4c 39 f3                      cmpq    %r14, %rbx
// 276: 0f 84 87 fe ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 27c: 4e 8b 6c f5 00                movq    (%rbp,%r14,8), %r13
// 281: 49 8b 45 00                   movq    (%r13), %rax
// 285: 48 85 c0                      testq   %rax, %rax
// 288: 7e 06                         jle     0x290 <_JIT_ENTRY+0x290>
// 28a: 85 c0                         testl   %eax, %eax
// 28c: 78 e2                         js      0x270 <_JIT_ENTRY+0x270>
// 28e: eb 26                         jmp     0x2b6 <_JIT_ENTRY+0x2b6>
// 290: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000292:  R_X86_64_64  .rodata.str1.1
// 29a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 29f: 4c 89 ea                      movq    %r13, %rdx
// 2a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a4:  R_X86_64_64  _Py_NegativeRefcount
// 2ac: ff d0                         callq   *%rax
// 2ae: 49 8b 45 00                   movq    (%r13), %rax
// 2b2: 85 c0                         testl   %eax, %eax
// 2b4: 78 ba                         js      0x270 <_JIT_ENTRY+0x270>
// 2b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2c0: ff d0                         callq   *%rax
// 2c2: 49 ff 4d 00                   decq    (%r13)
// 2c6: 75 a8                         jne     0x270 <_JIT_ENTRY+0x270>
// 2c8: 4c 89 ef                      movq    %r13, %rdi
// 2cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cd:  R_X86_64_64  _Py_Dealloc
// 2d5: ff d0                         callq   *%rax
// 2d7: eb 97                         jmp     0x270 <_JIT_ENTRY+0x270>
// 2d9: 49 89 c4                      movq    %rax, %r12
// 2dc: 49 29 dc                      subq    %rbx, %r12
// 2df: 49 83 c4 b8                   addq    $-0x48, %r12
// 2e3: 49 c1 ec 03                   shrq    $0x3, %r12
// 2e7: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 2eb: 31 c0                         xorl    %eax, %eax
// 2ed: e9 be fd ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 2f2: 48 8b 03                      movq    (%rbx), %rax
// 2f5: 0f b7 40 30                   movzwl  0x30(%rax), %eax
// 2f9: a9 80 01 00 00                testl   $0x180, %eax            # imm = 0x180
// 2fe: 74 3b                         je      0x33b <_JIT_ENTRY+0x33b>
// 300: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000302:  R_X86_64_64  _JIT_OPARG
// 30a: f7 d0                         notl    %eax
// 30c: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 311: 48 98                         cltq
// 313: 4d 89 6c c7 f8                movq    %r13, -0x8(%r15,%rax,8)
// 318: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031a:  R_X86_64_64  _JIT_CONTINUE
// 322: 48 89 df                      movq    %rbx, %rdi
// 325: 4c 89 e6                      movq    %r12, %rsi
// 328: 4c 89 f2                      movq    %r14, %rdx
// 32b: 48 83 c4 28                   addq    $0x28, %rsp
// 32f: 5b                            popq    %rbx
// 330: 41 5c                         popq    %r12
// 332: 41 5d                         popq    %r13
// 334: 41 5e                         popq    %r14
// 336: 41 5f                         popq    %r15
// 338: 5d                            popq    %rbp
// 339: ff e0                         jmpq    *%rax
// 33b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033d:  R_X86_64_64  PyExc_TypeError
// 345: 48 8b 30                      movq    (%rax), %rsi
// 348: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000034a:  R_X86_64_64  .rodata.str1.1+0x39
// 352: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000354:  R_X86_64_64  _PyErr_SetString
// 35c: 4c 89 f7                      movq    %r14, %rdi
// 35f: ff d0                         callq   *%rax
// 361: e9 76 ff ff ff                jmp     0x2dc <_JIT_ENTRY+0x2dc>
// 366: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_GET_YIELD_FROM_ITER_code_body[871] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd7, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xdf, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xcf, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x78, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0x53, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc7, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x65, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x24, 0xcf, 0x4c, 0x89, 0x28, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x3b, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x6c, 0xc7, 0xf8, 0x49, 0x8b, 0x45, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc8, 0x0f, 0x84, 0x22, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc8, 0x0f, 0x84, 0x1d, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xe1, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x6a, 0x08, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xed, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xdd, 0x45, 0x31, 0xf6, 0xeb, 0x14, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc6, 0x4c, 0x39, 0xf3, 0x0f, 0x84, 0x87, 0xfe, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xf5, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x49, 0x89, 0xc4, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0xbe, 0xfd, 0xff, 0xff, 0x48, 0x8b, 0x03, 0x0f, 0xb7, 0x40, 0x30, 0xa9, 0x80, 0x01, 0x00, 0x00, 0x74, 0x3b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x6c, 0xc7, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0xe9, 0x76, 0xff, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_GET_YIELD_FROM_ITER_code_holes[27] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x143, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x155, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1bf, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCoro_Type, 0x0},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyGen_Type, 0x0},
    {0x1e5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetIter, 0x0},
    {0x209, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x22f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x241, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x292, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2a4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2cd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x302, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x31a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x33d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x34a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x354, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00cannot 'yield from' a coroutine object in a non-coroutine generator\x00"
// 7d: 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_GET_YIELD_FROM_ITER_data_body[129] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x27, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x27, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x6e, 0x6f, 0x6e, 0x2d, 0x63, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_GET_YIELD_FROM_ITER_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_BOTH_FLOAT
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_BOTH_FLOAT.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4f 8d 04 c6                   leaq    (%r14,%r8,8), %r8
// 79: 49 8b 38                      movq    (%r8), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 49 29 de                      subq    %rbx, %r14
// 8a: 49 83 c6 b8                   addq    $-0x48, %r14
// 8e: 49 c1 ee 03                   shrq    $0x3, %r14
// 92: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 96: 48 8b 03                      movq    (%rbx), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c3: 4c 89 0c 24                   movq    %r9, (%rsp)
// c7: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cc: 48 85 c0                      testq   %rax, %rax
// cf: 40 0f 94 c5                   sete    %bpl
// d3: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// d7: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// dc: 49 8d 70 08                   leaq    0x8(%r8), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 b1 00 00 00             je      0x1b5 <_JIT_ENTRY+0x1b5>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 136: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 13b: 78 21                         js      0x15e <_JIT_ENTRY+0x15e>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 147: ff d0                         callq   *%rax
// 149: 49 ff 0c 24                   decq    (%r12)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_Dealloc
// 159: 4c 89 e7                      movq    %r12, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 163: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 167: 4d 85 ed                      testq   %r13, %r13
// 16a: 74 34                         je      0x1a0 <_JIT_ENTRY+0x1a0>
// 16c: 48 8b 0c 24                   movq    (%rsp), %rcx
// 170: 4d 8d 24 ce                   leaq    (%r14,%rcx,8), %r12
// 174: 4c 89 28                      movq    %r13, (%rax)
// 177: 49 8b 47 10                   movq    0x10(%r15), %rax
// 17b: 48 8b 00                      movq    (%rax), %rax
// 17e: 84 c0                         testb   %al, %al
// 180: 0f 84 c3 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 186: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000188:  R_X86_64_64  _Py_HandlePending
// 190: 4c 89 ff                      movq    %r15, %rdi
// 193: ff d0                         callq   *%rax
// 195: 85 c0                         testl   %eax, %eax
// 197: 0f 84 ac 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 19d: 4c 89 e0                      movq    %r12, %rax
// 1a0: 48 29 d8                      subq    %rbx, %rax
// 1a3: 48 83 c0 b8                   addq    $-0x48, %rax
// 1a7: 48 c1 e8 03                   shrq    $0x3, %rax
// 1ab: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1ae: 31 c0                         xorl    %eax, %eax
// 1b0: e9 fa fe ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 1b5: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1b9: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1bf: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1c3: 31 ed                         xorl    %ebp, %ebp
// 1c5: eb 15                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c7: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 1d0: 48 ff c5                      incq    %rbp
// 1d3: 49 39 ef                      cmpq    %rbp, %r15
// 1d6: 0f 84 28 ff ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 1dc: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 1e1: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 1e5: 49 8b 45 00                   movq    (%r13), %rax
// 1e9: 48 85 c0                      testq   %rax, %rax
// 1ec: 7e 12                         jle     0x200 <_JIT_ENTRY+0x200>
// 1ee: 85 c0                         testl   %eax, %eax
// 1f0: 78 de                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1f2: eb 32                         jmp     0x226 <_JIT_ENTRY+0x226>
// 1f4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 200: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1
// 20a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 20f: 4c 89 ea                      movq    %r13, %rdx
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: ff d0                         callq   *%rax
// 21e: 49 8b 45 00                   movq    (%r13), %rax
// 222: 85 c0                         testl   %eax, %eax
// 224: 78 aa                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 230: ff d0                         callq   *%rax
// 232: 49 ff 4d 00                   decq    (%r13)
// 236: 75 98                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: ff d0                         callq   *%rax
// 247: eb 87                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _JIT_OPARG
// 253: f7 d0                         notl    %eax
// 255: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 25a: 48 98                         cltq
// 25c: 49 8b 4c c6 f0                movq    -0x10(%r14,%rax,8), %rcx
// 261: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000263:  R_X86_64_64  PyFloat_Type
// 26b: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// 26f: 75 20                         jne     0x291 <_JIT_ENTRY+0x291>
// 271: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000273:  R_X86_64_64  _JIT_OPARG
// 27b: f7 d1                         notl    %ecx
// 27d: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 283: 48 63 c9                      movslq  %ecx, %rcx
// 286: 49 8b 4c ce f8                movq    -0x8(%r14,%rcx,8), %rcx
// 28b: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// 28f: 74 08                         je      0x299 <_JIT_ENTRY+0x299>
// 291: 4d 89 e6                      movq    %r12, %r14
// 294: e9 ee fd ff ff                jmp     0x87 <_JIT_ENTRY+0x87>
// 299: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029b:  R_X86_64_64  _JIT_CONTINUE
// 2a3: 48 89 df                      movq    %rbx, %rdi
// 2a6: 4c 89 e6                      movq    %r12, %rsi
// 2a9: 4c 89 fa                      movq    %r15, %rdx
// 2ac: 48 83 c4 28                   addq    $0x28, %rsp
// 2b0: 5b                            popq    %rbx
// 2b1: 41 5c                         popq    %r12
// 2b3: 41 5d                         popq    %r13
// 2b5: 41 5e                         popq    %r14
// 2b7: 41 5f                         popq    %r15
// 2b9: 5d                            popq    %rbp
// 2ba: ff e0                         jmpq    *%rax
// 2bc: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_BOTH_FLOAT_code_body[701] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xce, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4f, 0x8d, 0x04, 0xc6, 0x49, 0x8b, 0x38, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x70, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xb1, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x4d, 0x85, 0xed, 0x74, 0x34, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x24, 0xce, 0x4c, 0x89, 0x28, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xac, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xfa, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xed, 0xeb, 0x15, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xef, 0x0f, 0x84, 0x28, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x4c, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x41, 0x08, 0x75, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x8b, 0x4c, 0xce, 0xf8, 0x48, 0x39, 0x41, 0x08, 0x74, 0x08, 0x4d, 0x89, 0xe6, 0xe9, 0xee, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_BOTH_FLOAT_code_holes[18] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_Type, 0x0},
    {0x273, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x29b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_BOTH_FLOAT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_BOTH_FLOAT_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_BOTH_INT
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_BOTH_INT.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4f 8d 04 c6                   leaq    (%r14,%r8,8), %r8
// 79: 49 8b 38                      movq    (%r8), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 49 29 de                      subq    %rbx, %r14
// 8a: 49 83 c6 b8                   addq    $-0x48, %r14
// 8e: 49 c1 ee 03                   shrq    $0x3, %r14
// 92: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 96: 48 8b 03                      movq    (%rbx), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c3: 4c 89 0c 24                   movq    %r9, (%rsp)
// c7: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cc: 48 85 c0                      testq   %rax, %rax
// cf: 40 0f 94 c5                   sete    %bpl
// d3: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// d7: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// dc: 49 8d 70 08                   leaq    0x8(%r8), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 b1 00 00 00             je      0x1b5 <_JIT_ENTRY+0x1b5>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 136: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 13b: 78 21                         js      0x15e <_JIT_ENTRY+0x15e>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 147: ff d0                         callq   *%rax
// 149: 49 ff 0c 24                   decq    (%r12)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_Dealloc
// 159: 4c 89 e7                      movq    %r12, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 163: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 167: 4d 85 ed                      testq   %r13, %r13
// 16a: 74 34                         je      0x1a0 <_JIT_ENTRY+0x1a0>
// 16c: 48 8b 0c 24                   movq    (%rsp), %rcx
// 170: 4d 8d 24 ce                   leaq    (%r14,%rcx,8), %r12
// 174: 4c 89 28                      movq    %r13, (%rax)
// 177: 49 8b 47 10                   movq    0x10(%r15), %rax
// 17b: 48 8b 00                      movq    (%rax), %rax
// 17e: 84 c0                         testb   %al, %al
// 180: 0f 84 c3 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 186: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000188:  R_X86_64_64  _Py_HandlePending
// 190: 4c 89 ff                      movq    %r15, %rdi
// 193: ff d0                         callq   *%rax
// 195: 85 c0                         testl   %eax, %eax
// 197: 0f 84 ac 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 19d: 4c 89 e0                      movq    %r12, %rax
// 1a0: 48 29 d8                      subq    %rbx, %rax
// 1a3: 48 83 c0 b8                   addq    $-0x48, %rax
// 1a7: 48 c1 e8 03                   shrq    $0x3, %rax
// 1ab: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1ae: 31 c0                         xorl    %eax, %eax
// 1b0: e9 fa fe ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 1b5: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1b9: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1bf: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1c3: 31 ed                         xorl    %ebp, %ebp
// 1c5: eb 15                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c7: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 1d0: 48 ff c5                      incq    %rbp
// 1d3: 49 39 ef                      cmpq    %rbp, %r15
// 1d6: 0f 84 28 ff ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 1dc: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 1e1: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 1e5: 49 8b 45 00                   movq    (%r13), %rax
// 1e9: 48 85 c0                      testq   %rax, %rax
// 1ec: 7e 12                         jle     0x200 <_JIT_ENTRY+0x200>
// 1ee: 85 c0                         testl   %eax, %eax
// 1f0: 78 de                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1f2: eb 32                         jmp     0x226 <_JIT_ENTRY+0x226>
// 1f4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 200: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1
// 20a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 20f: 4c 89 ea                      movq    %r13, %rdx
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: ff d0                         callq   *%rax
// 21e: 49 8b 45 00                   movq    (%r13), %rax
// 222: 85 c0                         testl   %eax, %eax
// 224: 78 aa                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 230: ff d0                         callq   *%rax
// 232: 49 ff 4d 00                   decq    (%r13)
// 236: 75 98                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: ff d0                         callq   *%rax
// 247: eb 87                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _JIT_OPARG
// 253: f7 d0                         notl    %eax
// 255: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 25a: 48 98                         cltq
// 25c: 49 8b 4c c6 f0                movq    -0x10(%r14,%rax,8), %rcx
// 261: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000263:  R_X86_64_64  PyLong_Type
// 26b: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// 26f: 75 20                         jne     0x291 <_JIT_ENTRY+0x291>
// 271: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000273:  R_X86_64_64  _JIT_OPARG
// 27b: f7 d1                         notl    %ecx
// 27d: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 283: 48 63 c9                      movslq  %ecx, %rcx
// 286: 49 8b 4c ce f8                movq    -0x8(%r14,%rcx,8), %rcx
// 28b: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// 28f: 74 08                         je      0x299 <_JIT_ENTRY+0x299>
// 291: 4d 89 e6                      movq    %r12, %r14
// 294: e9 ee fd ff ff                jmp     0x87 <_JIT_ENTRY+0x87>
// 299: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029b:  R_X86_64_64  _JIT_CONTINUE
// 2a3: 48 89 df                      movq    %rbx, %rdi
// 2a6: 4c 89 e6                      movq    %r12, %rsi
// 2a9: 4c 89 fa                      movq    %r15, %rdx
// 2ac: 48 83 c4 28                   addq    $0x28, %rsp
// 2b0: 5b                            popq    %rbx
// 2b1: 41 5c                         popq    %r12
// 2b3: 41 5d                         popq    %r13
// 2b5: 41 5e                         popq    %r14
// 2b7: 41 5f                         popq    %r15
// 2b9: 5d                            popq    %rbp
// 2ba: ff e0                         jmpq    *%rax
// 2bc: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_BOTH_INT_code_body[701] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xce, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4f, 0x8d, 0x04, 0xc6, 0x49, 0x8b, 0x38, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x70, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xb1, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x4d, 0x85, 0xed, 0x74, 0x34, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x24, 0xce, 0x4c, 0x89, 0x28, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xac, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xfa, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xed, 0xeb, 0x15, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xef, 0x0f, 0x84, 0x28, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x4c, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x41, 0x08, 0x75, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x8b, 0x4c, 0xce, 0xf8, 0x48, 0x39, 0x41, 0x08, 0x74, 0x08, 0x4d, 0x89, 0xe6, 0xe9, 0xee, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_BOTH_INT_code_holes[18] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x273, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x29b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_BOTH_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_BOTH_INT_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_BOTH_UNICODE
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_BOTH_UNICODE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4f 8d 04 c6                   leaq    (%r14,%r8,8), %r8
// 79: 49 8b 38                      movq    (%r8), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 49 29 de                      subq    %rbx, %r14
// 8a: 49 83 c6 b8                   addq    $-0x48, %r14
// 8e: 49 c1 ee 03                   shrq    $0x3, %r14
// 92: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 96: 48 8b 03                      movq    (%rbx), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c3: 4c 89 0c 24                   movq    %r9, (%rsp)
// c7: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cc: 48 85 c0                      testq   %rax, %rax
// cf: 40 0f 94 c5                   sete    %bpl
// d3: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// d7: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// dc: 49 8d 70 08                   leaq    0x8(%r8), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 b1 00 00 00             je      0x1b5 <_JIT_ENTRY+0x1b5>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 136: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 13b: 78 21                         js      0x15e <_JIT_ENTRY+0x15e>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 147: ff d0                         callq   *%rax
// 149: 49 ff 0c 24                   decq    (%r12)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_Dealloc
// 159: 4c 89 e7                      movq    %r12, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 163: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 167: 4d 85 ed                      testq   %r13, %r13
// 16a: 74 34                         je      0x1a0 <_JIT_ENTRY+0x1a0>
// 16c: 48 8b 0c 24                   movq    (%rsp), %rcx
// 170: 4d 8d 24 ce                   leaq    (%r14,%rcx,8), %r12
// 174: 4c 89 28                      movq    %r13, (%rax)
// 177: 49 8b 47 10                   movq    0x10(%r15), %rax
// 17b: 48 8b 00                      movq    (%rax), %rax
// 17e: 84 c0                         testb   %al, %al
// 180: 0f 84 c3 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 186: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000188:  R_X86_64_64  _Py_HandlePending
// 190: 4c 89 ff                      movq    %r15, %rdi
// 193: ff d0                         callq   *%rax
// 195: 85 c0                         testl   %eax, %eax
// 197: 0f 84 ac 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 19d: 4c 89 e0                      movq    %r12, %rax
// 1a0: 48 29 d8                      subq    %rbx, %rax
// 1a3: 48 83 c0 b8                   addq    $-0x48, %rax
// 1a7: 48 c1 e8 03                   shrq    $0x3, %rax
// 1ab: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1ae: 31 c0                         xorl    %eax, %eax
// 1b0: e9 fa fe ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 1b5: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1b9: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1bf: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1c3: 31 ed                         xorl    %ebp, %ebp
// 1c5: eb 15                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c7: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 1d0: 48 ff c5                      incq    %rbp
// 1d3: 49 39 ef                      cmpq    %rbp, %r15
// 1d6: 0f 84 28 ff ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 1dc: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 1e1: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 1e5: 49 8b 45 00                   movq    (%r13), %rax
// 1e9: 48 85 c0                      testq   %rax, %rax
// 1ec: 7e 12                         jle     0x200 <_JIT_ENTRY+0x200>
// 1ee: 85 c0                         testl   %eax, %eax
// 1f0: 78 de                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1f2: eb 32                         jmp     0x226 <_JIT_ENTRY+0x226>
// 1f4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 200: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1
// 20a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 20f: 4c 89 ea                      movq    %r13, %rdx
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: ff d0                         callq   *%rax
// 21e: 49 8b 45 00                   movq    (%r13), %rax
// 222: 85 c0                         testl   %eax, %eax
// 224: 78 aa                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 230: ff d0                         callq   *%rax
// 232: 49 ff 4d 00                   decq    (%r13)
// 236: 75 98                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: ff d0                         callq   *%rax
// 247: eb 87                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _JIT_OPARG
// 253: f7 d0                         notl    %eax
// 255: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 25a: 48 98                         cltq
// 25c: 49 8b 4c c6 f0                movq    -0x10(%r14,%rax,8), %rcx
// 261: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000263:  R_X86_64_64  PyUnicode_Type
// 26b: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// 26f: 75 20                         jne     0x291 <_JIT_ENTRY+0x291>
// 271: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000273:  R_X86_64_64  _JIT_OPARG
// 27b: f7 d1                         notl    %ecx
// 27d: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 283: 48 63 c9                      movslq  %ecx, %rcx
// 286: 49 8b 4c ce f8                movq    -0x8(%r14,%rcx,8), %rcx
// 28b: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// 28f: 74 08                         je      0x299 <_JIT_ENTRY+0x299>
// 291: 4d 89 e6                      movq    %r12, %r14
// 294: e9 ee fd ff ff                jmp     0x87 <_JIT_ENTRY+0x87>
// 299: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029b:  R_X86_64_64  _JIT_CONTINUE
// 2a3: 48 89 df                      movq    %rbx, %rdi
// 2a6: 4c 89 e6                      movq    %r12, %rsi
// 2a9: 4c 89 fa                      movq    %r15, %rdx
// 2ac: 48 83 c4 28                   addq    $0x28, %rsp
// 2b0: 5b                            popq    %rbx
// 2b1: 41 5c                         popq    %r12
// 2b3: 41 5d                         popq    %r13
// 2b5: 41 5e                         popq    %r14
// 2b7: 41 5f                         popq    %r15
// 2b9: 5d                            popq    %rbp
// 2ba: ff e0                         jmpq    *%rax
// 2bc: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_BOTH_UNICODE_code_body[701] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xce, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4f, 0x8d, 0x04, 0xc6, 0x49, 0x8b, 0x38, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x70, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xb1, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x4d, 0x85, 0xed, 0x74, 0x34, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x24, 0xce, 0x4c, 0x89, 0x28, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xac, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xfa, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xed, 0xeb, 0x15, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xef, 0x0f, 0x84, 0x28, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x4c, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x41, 0x08, 0x75, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x8b, 0x4c, 0xce, 0xf8, 0x48, 0x39, 0x41, 0x08, 0x74, 0x08, 0x4d, 0x89, 0xe6, 0xe9, 0xee, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_BOTH_UNICODE_code_holes[18] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x273, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x29b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_BOTH_UNICODE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_BOTH_UNICODE_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_BUILTINS_VERSION
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_BUILTINS_VERSION.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4f 8d 04 c6                   leaq    (%r14,%r8,8), %r8
// 79: 49 8b 38                      movq    (%r8), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 49 29 de                      subq    %rbx, %r14
// 8a: 49 83 c6 b8                   addq    $-0x48, %r14
// 8e: 49 c1 ee 03                   shrq    $0x3, %r14
// 92: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 96: 48 8b 03                      movq    (%rbx), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c3: 4c 89 0c 24                   movq    %r9, (%rsp)
// c7: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cc: 48 85 c0                      testq   %rax, %rax
// cf: 40 0f 94 c5                   sete    %bpl
// d3: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// d7: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// dc: 49 8d 70 08                   leaq    0x8(%r8), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 b1 00 00 00             je      0x1b5 <_JIT_ENTRY+0x1b5>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 136: 78 21                         js      0x159 <_JIT_ENTRY+0x159>
// 138: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 142: ff d0                         callq   *%rax
// 144: 49 ff 0c 24                   decq    (%r12)
// 148: 75 0f                         jne     0x159 <_JIT_ENTRY+0x159>
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_Dealloc
// 154: 4c 89 e7                      movq    %r12, %rdi
// 157: ff d0                         callq   *%rax
// 159: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 15e: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 162: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 167: 48 85 d2                      testq   %rdx, %rdx
// 16a: 74 34                         je      0x1a0 <_JIT_ENTRY+0x1a0>
// 16c: 48 8b 0c 24                   movq    (%rsp), %rcx
// 170: 4d 8d 34 ce                   leaq    (%r14,%rcx,8), %r14
// 174: 48 89 10                      movq    %rdx, (%rax)
// 177: 49 8b 47 10                   movq    0x10(%r15), %rax
// 17b: 48 8b 00                      movq    (%rax), %rax
// 17e: 84 c0                         testb   %al, %al
// 180: 0f 84 c3 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 186: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000188:  R_X86_64_64  _Py_HandlePending
// 190: 4c 89 ff                      movq    %r15, %rdi
// 193: ff d0                         callq   *%rax
// 195: 85 c0                         testl   %eax, %eax
// 197: 0f 84 ac 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 19d: 4c 89 f0                      movq    %r14, %rax
// 1a0: 48 29 d8                      subq    %rbx, %rax
// 1a3: 48 83 c0 b8                   addq    $-0x48, %rax
// 1a7: 48 c1 e8 03                   shrq    $0x3, %rax
// 1ab: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1ae: 31 c0                         xorl    %eax, %eax
// 1b0: e9 fa fe ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 1b5: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1b9: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1bf: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1c3: 31 ed                         xorl    %ebp, %ebp
// 1c5: eb 15                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c7: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 1d0: 48 ff c5                      incq    %rbp
// 1d3: 49 39 ef                      cmpq    %rbp, %r15
// 1d6: 0f 84 28 ff ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 1dc: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 1e1: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 1e5: 49 8b 45 00                   movq    (%r13), %rax
// 1e9: 48 85 c0                      testq   %rax, %rax
// 1ec: 7e 12                         jle     0x200 <_JIT_ENTRY+0x200>
// 1ee: 85 c0                         testl   %eax, %eax
// 1f0: 78 de                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1f2: eb 32                         jmp     0x226 <_JIT_ENTRY+0x226>
// 1f4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 200: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1
// 20a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 20f: 4c 89 ea                      movq    %r13, %rdx
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: ff d0                         callq   *%rax
// 21e: 49 8b 45 00                   movq    (%r13), %rax
// 222: 85 c0                         testl   %eax, %eax
// 224: 78 aa                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 230: ff d0                         callq   *%rax
// 232: 49 ff 4d 00                   decq    (%r13)
// 236: 75 98                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: ff d0                         callq   *%rax
// 247: eb 87                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 249: 48 8b 43 20                   movq    0x20(%rbx), %rax
// 24d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000024f:  R_X86_64_64  PyDict_Type
// 257: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 25b: 0f 85 26 fe ff ff             jne     0x87 <_JIT_ENTRY+0x87>
// 261: 48 8b 40 20                   movq    0x20(%rax), %rax
// 265: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000267:  R_X86_64_64  _JIT_OPERAND
// 26f: 0f b7 c9                      movzwl  %cx, %ecx
// 272: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
// 275: 0f 85 0c fe ff ff             jne     0x87 <_JIT_ENTRY+0x87>
// 27b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027d:  R_X86_64_64  _JIT_CONTINUE
// 285: 48 89 df                      movq    %rbx, %rdi
// 288: 4c 89 f6                      movq    %r14, %rsi
// 28b: 4c 89 fa                      movq    %r15, %rdx
// 28e: 48 83 c4 28                   addq    $0x28, %rsp
// 292: 5b                            popq    %rbx
// 293: 41 5c                         popq    %r12
// 295: 41 5d                         popq    %r13
// 297: 41 5e                         popq    %r14
// 299: 41 5f                         popq    %r15
// 29b: 5d                            popq    %rbp
// 29c: ff e0                         jmpq    *%rax
// 29e: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_BUILTINS_VERSION_code_body[671] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xce, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4f, 0x8d, 0x04, 0xc6, 0x49, 0x8b, 0x38, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x70, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xb1, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x74, 0x34, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x34, 0xce, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xac, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xfa, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xed, 0xeb, 0x15, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xef, 0x0f, 0x84, 0x28, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0x8b, 0x43, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0x26, 0xfe, 0xff, 0xff, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x39, 0x48, 0x0c, 0x0f, 0x85, 0x0c, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_BUILTINS_VERSION_code_holes[17] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x267, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x27d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_BUILTINS_VERSION_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_BUILTINS_VERSION_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_DORV_VALUES
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_DORV_VALUES.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4f 8d 04 c6                   leaq    (%r14,%r8,8), %r8
// 79: 49 8b 38                      movq    (%r8), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 49 29 de                      subq    %rbx, %r14
// 8a: 49 83 c6 b8                   addq    $-0x48, %r14
// 8e: 49 c1 ee 03                   shrq    $0x3, %r14
// 92: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 96: 48 8b 03                      movq    (%rbx), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c3: 4c 89 0c 24                   movq    %r9, (%rsp)
// c7: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cc: 48 85 c0                      testq   %rax, %rax
// cf: 40 0f 94 c5                   sete    %bpl
// d3: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// d7: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// dc: 49 8d 70 08                   leaq    0x8(%r8), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 b1 00 00 00             je      0x1b5 <_JIT_ENTRY+0x1b5>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 136: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 13b: 78 21                         js      0x15e <_JIT_ENTRY+0x15e>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 147: ff d0                         callq   *%rax
// 149: 49 ff 0c 24                   decq    (%r12)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_Dealloc
// 159: 4c 89 e7                      movq    %r12, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 163: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 167: 4d 85 ed                      testq   %r13, %r13
// 16a: 74 34                         je      0x1a0 <_JIT_ENTRY+0x1a0>
// 16c: 48 8b 0c 24                   movq    (%rsp), %rcx
// 170: 4d 8d 24 ce                   leaq    (%r14,%rcx,8), %r12
// 174: 4c 89 28                      movq    %r13, (%rax)
// 177: 49 8b 47 10                   movq    0x10(%r15), %rax
// 17b: 48 8b 00                      movq    (%rax), %rax
// 17e: 84 c0                         testb   %al, %al
// 180: 0f 84 c3 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 186: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000188:  R_X86_64_64  _Py_HandlePending
// 190: 4c 89 ff                      movq    %r15, %rdi
// 193: ff d0                         callq   *%rax
// 195: 85 c0                         testl   %eax, %eax
// 197: 0f 84 ac 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 19d: 4c 89 e0                      movq    %r12, %rax
// 1a0: 48 29 d8                      subq    %rbx, %rax
// 1a3: 48 83 c0 b8                   addq    $-0x48, %rax
// 1a7: 48 c1 e8 03                   shrq    $0x3, %rax
// 1ab: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1ae: 31 c0                         xorl    %eax, %eax
// 1b0: e9 fa fe ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 1b5: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1b9: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1bf: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1c3: 31 ed                         xorl    %ebp, %ebp
// 1c5: eb 15                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c7: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 1d0: 48 ff c5                      incq    %rbp
// 1d3: 49 39 ef                      cmpq    %rbp, %r15
// 1d6: 0f 84 28 ff ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 1dc: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 1e1: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 1e5: 49 8b 45 00                   movq    (%r13), %rax
// 1e9: 48 85 c0                      testq   %rax, %rax
// 1ec: 7e 12                         jle     0x200 <_JIT_ENTRY+0x200>
// 1ee: 85 c0                         testl   %eax, %eax
// 1f0: 78 de                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1f2: eb 32                         jmp     0x226 <_JIT_ENTRY+0x226>
// 1f4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 200: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1
// 20a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 20f: 4c 89 ea                      movq    %r13, %rdx
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: ff d0                         callq   *%rax
// 21e: 49 8b 45 00                   movq    (%r13), %rax
// 222: 85 c0                         testl   %eax, %eax
// 224: 78 aa                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 230: ff d0                         callq   *%rax
// 232: 49 ff 4d 00                   decq    (%r13)
// 236: 75 98                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: ff d0                         callq   *%rax
// 247: eb 87                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _JIT_OPARG
// 253: f7 d0                         notl    %eax
// 255: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 25a: 48 98                         cltq
// 25c: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 261: f6 40 e8 01                   testb   $0x1, -0x18(%rax)
// 265: 75 08                         jne     0x26f <_JIT_ENTRY+0x26f>
// 267: 4d 89 e6                      movq    %r12, %r14
// 26a: e9 18 fe ff ff                jmp     0x87 <_JIT_ENTRY+0x87>
// 26f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000271:  R_X86_64_64  _JIT_CONTINUE
// 279: 48 89 df                      movq    %rbx, %rdi
// 27c: 4c 89 e6                      movq    %r12, %rsi
// 27f: 4c 89 fa                      movq    %r15, %rdx
// 282: 48 83 c4 28                   addq    $0x28, %rsp
// 286: 5b                            popq    %rbx
// 287: 41 5c                         popq    %r12
// 289: 41 5d                         popq    %r13
// 28b: 41 5e                         popq    %r14
// 28d: 41 5f                         popq    %r15
// 28f: 5d                            popq    %rbp
// 290: ff e0                         jmpq    *%rax
// 292: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_DORV_VALUES_code_body[659] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xce, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4f, 0x8d, 0x04, 0xc6, 0x49, 0x8b, 0x38, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x70, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xb1, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x4d, 0x85, 0xed, 0x74, 0x34, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x24, 0xce, 0x4c, 0x89, 0x28, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xac, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xfa, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xed, 0xeb, 0x15, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xef, 0x0f, 0x84, 0x28, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0xf6, 0x40, 0xe8, 0x01, 0x75, 0x08, 0x4d, 0x89, 0xe6, 0xe9, 0x18, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_DORV_VALUES_code_holes[16] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x271, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_DORV_VALUES_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_DORV_VALUES_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4f 8d 04 c6                   leaq    (%r14,%r8,8), %r8
// 79: 49 8b 38                      movq    (%r8), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 49 29 de                      subq    %rbx, %r14
// 8a: 49 83 c6 b8                   addq    $-0x48, %r14
// 8e: 49 c1 ee 03                   shrq    $0x3, %r14
// 92: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 96: 48 8b 03                      movq    (%rbx), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c3: 4c 89 0c 24                   movq    %r9, (%rsp)
// c7: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cc: 48 85 c0                      testq   %rax, %rax
// cf: 40 0f 94 c5                   sete    %bpl
// d3: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// d7: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// dc: 49 8d 70 08                   leaq    0x8(%r8), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 b1 00 00 00             je      0x1b5 <_JIT_ENTRY+0x1b5>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 136: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 13b: 78 21                         js      0x15e <_JIT_ENTRY+0x15e>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 147: ff d0                         callq   *%rax
// 149: 49 ff 0c 24                   decq    (%r12)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_Dealloc
// 159: 4c 89 e7                      movq    %r12, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 163: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 167: 4d 85 ed                      testq   %r13, %r13
// 16a: 74 34                         je      0x1a0 <_JIT_ENTRY+0x1a0>
// 16c: 48 8b 0c 24                   movq    (%rsp), %rcx
// 170: 4d 8d 24 ce                   leaq    (%r14,%rcx,8), %r12
// 174: 4c 89 28                      movq    %r13, (%rax)
// 177: 49 8b 47 10                   movq    0x10(%r15), %rax
// 17b: 48 8b 00                      movq    (%rax), %rax
// 17e: 84 c0                         testb   %al, %al
// 180: 0f 84 c3 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 186: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000188:  R_X86_64_64  _Py_HandlePending
// 190: 4c 89 ff                      movq    %r15, %rdi
// 193: ff d0                         callq   *%rax
// 195: 85 c0                         testl   %eax, %eax
// 197: 0f 84 ac 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 19d: 4c 89 e0                      movq    %r12, %rax
// 1a0: 48 29 d8                      subq    %rbx, %rax
// 1a3: 48 83 c0 b8                   addq    $-0x48, %rax
// 1a7: 48 c1 e8 03                   shrq    $0x3, %rax
// 1ab: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1ae: 31 c0                         xorl    %eax, %eax
// 1b0: e9 fa fe ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 1b5: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1b9: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1bf: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1c3: 31 ed                         xorl    %ebp, %ebp
// 1c5: eb 15                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c7: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 1d0: 48 ff c5                      incq    %rbp
// 1d3: 49 39 ef                      cmpq    %rbp, %r15
// 1d6: 0f 84 28 ff ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 1dc: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 1e1: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 1e5: 49 8b 45 00                   movq    (%r13), %rax
// 1e9: 48 85 c0                      testq   %rax, %rax
// 1ec: 7e 12                         jle     0x200 <_JIT_ENTRY+0x200>
// 1ee: 85 c0                         testl   %eax, %eax
// 1f0: 78 de                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1f2: eb 32                         jmp     0x226 <_JIT_ENTRY+0x226>
// 1f4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 200: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1
// 20a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 20f: 4c 89 ea                      movq    %r13, %rdx
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: ff d0                         callq   *%rax
// 21e: 49 8b 45 00                   movq    (%r13), %rax
// 222: 85 c0                         testl   %eax, %eax
// 224: 78 aa                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 230: ff d0                         callq   *%rax
// 232: 49 ff 4d 00                   decq    (%r13)
// 236: 75 98                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: ff d0                         callq   *%rax
// 247: eb 87                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _JIT_OPARG
// 253: f7 d0                         notl    %eax
// 255: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 25a: 48 98                         cltq
// 25c: 49 8b 7c c6 f8                movq    -0x8(%r14,%rax,8), %rdi
// 261: f6 47 e8 01                   testb   $0x1, -0x18(%rdi)
// 265: 75 14                         jne     0x27b <_JIT_ENTRY+0x27b>
// 267: 48 8d 77 e8                   leaq    -0x18(%rdi), %rsi
// 26b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026d:  R_X86_64_64  _PyObject_MakeInstanceAttributesFromDict
// 275: ff d0                         callq   *%rax
// 277: 84 c0                         testb   %al, %al
// 279: 74 23                         je      0x29e <_JIT_ENTRY+0x29e>
// 27b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027d:  R_X86_64_64  _JIT_CONTINUE
// 285: 48 89 df                      movq    %rbx, %rdi
// 288: 4c 89 e6                      movq    %r12, %rsi
// 28b: 4c 89 fa                      movq    %r15, %rdx
// 28e: 48 83 c4 28                   addq    $0x28, %rsp
// 292: 5b                            popq    %rbx
// 293: 41 5c                         popq    %r12
// 295: 41 5d                         popq    %r13
// 297: 41 5e                         popq    %r14
// 299: 41 5f                         popq    %r15
// 29b: 5d                            popq    %rbp
// 29c: ff e0                         jmpq    *%rax
// 29e: 4d 89 e6                      movq    %r12, %r14
// 2a1: e9 e1 fd ff ff                jmp     0x87 <_JIT_ENTRY+0x87>
// 2a6: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT_code_body[679] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xce, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4f, 0x8d, 0x04, 0xc6, 0x49, 0x8b, 0x38, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x70, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xb1, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x4d, 0x85, 0xed, 0x74, 0x34, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x24, 0xce, 0x4c, 0x89, 0x28, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xac, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xfa, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xed, 0xeb, 0x15, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xef, 0x0f, 0x84, 0x28, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x7c, 0xc6, 0xf8, 0xf6, 0x47, 0xe8, 0x01, 0x75, 0x14, 0x48, 0x8d, 0x77, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x84, 0xc0, 0x74, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x89, 0xe6, 0xe9, 0xe1, 0xfd, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT_code_holes[17] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x26d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_MakeInstanceAttributesFromDict, 0x0},
    {0x27d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_GLOBALS_VERSION
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_GLOBALS_VERSION.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4f 8d 04 c6                   leaq    (%r14,%r8,8), %r8
// 79: 49 8b 38                      movq    (%r8), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 49 29 de                      subq    %rbx, %r14
// 8a: 49 83 c6 b8                   addq    $-0x48, %r14
// 8e: 49 c1 ee 03                   shrq    $0x3, %r14
// 92: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 96: 48 8b 03                      movq    (%rbx), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c3: 4c 89 0c 24                   movq    %r9, (%rsp)
// c7: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cc: 48 85 c0                      testq   %rax, %rax
// cf: 40 0f 94 c5                   sete    %bpl
// d3: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// d7: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// dc: 49 8d 70 08                   leaq    0x8(%r8), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 b1 00 00 00             je      0x1b5 <_JIT_ENTRY+0x1b5>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 136: 78 21                         js      0x159 <_JIT_ENTRY+0x159>
// 138: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 142: ff d0                         callq   *%rax
// 144: 49 ff 0c 24                   decq    (%r12)
// 148: 75 0f                         jne     0x159 <_JIT_ENTRY+0x159>
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_Dealloc
// 154: 4c 89 e7                      movq    %r12, %rdi
// 157: ff d0                         callq   *%rax
// 159: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 15e: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 162: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 167: 48 85 d2                      testq   %rdx, %rdx
// 16a: 74 34                         je      0x1a0 <_JIT_ENTRY+0x1a0>
// 16c: 48 8b 0c 24                   movq    (%rsp), %rcx
// 170: 4d 8d 34 ce                   leaq    (%r14,%rcx,8), %r14
// 174: 48 89 10                      movq    %rdx, (%rax)
// 177: 49 8b 47 10                   movq    0x10(%r15), %rax
// 17b: 48 8b 00                      movq    (%rax), %rax
// 17e: 84 c0                         testb   %al, %al
// 180: 0f 84 c3 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 186: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000188:  R_X86_64_64  _Py_HandlePending
// 190: 4c 89 ff                      movq    %r15, %rdi
// 193: ff d0                         callq   *%rax
// 195: 85 c0                         testl   %eax, %eax
// 197: 0f 84 ac 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 19d: 4c 89 f0                      movq    %r14, %rax
// 1a0: 48 29 d8                      subq    %rbx, %rax
// 1a3: 48 83 c0 b8                   addq    $-0x48, %rax
// 1a7: 48 c1 e8 03                   shrq    $0x3, %rax
// 1ab: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1ae: 31 c0                         xorl    %eax, %eax
// 1b0: e9 fa fe ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 1b5: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1b9: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1bf: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1c3: 31 ed                         xorl    %ebp, %ebp
// 1c5: eb 15                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c7: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 1d0: 48 ff c5                      incq    %rbp
// 1d3: 49 39 ef                      cmpq    %rbp, %r15
// 1d6: 0f 84 28 ff ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 1dc: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 1e1: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 1e5: 49 8b 45 00                   movq    (%r13), %rax
// 1e9: 48 85 c0                      testq   %rax, %rax
// 1ec: 7e 12                         jle     0x200 <_JIT_ENTRY+0x200>
// 1ee: 85 c0                         testl   %eax, %eax
// 1f0: 78 de                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1f2: eb 32                         jmp     0x226 <_JIT_ENTRY+0x226>
// 1f4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 200: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1
// 20a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 20f: 4c 89 ea                      movq    %r13, %rdx
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: ff d0                         callq   *%rax
// 21e: 49 8b 45 00                   movq    (%r13), %rax
// 222: 85 c0                         testl   %eax, %eax
// 224: 78 aa                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 230: ff d0                         callq   *%rax
// 232: 49 ff 4d 00                   decq    (%r13)
// 236: 75 98                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: ff d0                         callq   *%rax
// 247: eb 87                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 249: 48 8b 43 18                   movq    0x18(%rbx), %rax
// 24d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000024f:  R_X86_64_64  PyDict_Type
// 257: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 25b: 0f 85 26 fe ff ff             jne     0x87 <_JIT_ENTRY+0x87>
// 261: 48 8b 40 20                   movq    0x20(%rax), %rax
// 265: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000267:  R_X86_64_64  _JIT_OPERAND
// 26f: 0f b7 c9                      movzwl  %cx, %ecx
// 272: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
// 275: 0f 85 0c fe ff ff             jne     0x87 <_JIT_ENTRY+0x87>
// 27b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027d:  R_X86_64_64  _JIT_CONTINUE
// 285: 48 89 df                      movq    %rbx, %rdi
// 288: 4c 89 f6                      movq    %r14, %rsi
// 28b: 4c 89 fa                      movq    %r15, %rdx
// 28e: 48 83 c4 28                   addq    $0x28, %rsp
// 292: 5b                            popq    %rbx
// 293: 41 5c                         popq    %r12
// 295: 41 5d                         popq    %r13
// 297: 41 5e                         popq    %r14
// 299: 41 5f                         popq    %r15
// 29b: 5d                            popq    %rbp
// 29c: ff e0                         jmpq    *%rax
// 29e: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_GLOBALS_VERSION_code_body[671] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xce, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4f, 0x8d, 0x04, 0xc6, 0x49, 0x8b, 0x38, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x70, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xb1, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x74, 0x34, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x34, 0xce, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xac, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xfa, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xed, 0xeb, 0x15, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xef, 0x0f, 0x84, 0x28, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0x8b, 0x43, 0x18, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0x26, 0xfe, 0xff, 0xff, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x39, 0x48, 0x0c, 0x0f, 0x85, 0x0c, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_GLOBALS_VERSION_code_holes[17] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x267, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x27d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_GLOBALS_VERSION_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_GLOBALS_VERSION_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_IS_FALSE_POP
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_IS_FALSE_POP.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 cf                   movq    (%r15,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d7                   movq    (%r15,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4f 8d 04 c7                   leaq    (%r15,%r8,8), %r8
// 79: 49 8b 38                      movq    (%r8), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 3a                         je      0xc1 <_JIT_ENTRY+0xc1>
// 87: 4d 89 fe                      movq    %r15, %r14
// 8a: 49 29 de                      subq    %rbx, %r14
// 8d: 49 83 c6 b8                   addq    $-0x48, %r14
// 91: 49 c1 ee 03                   shrq    $0x3, %r14
// 95: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 99: 48 8b 03                      movq    (%rbx), %rax
// 9c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009e:  R_X86_64_64  _JIT_TARGET
// a6: 89 c9                         movl    %ecx, %ecx
// a8: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// ac: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b2: 48 83 c4 28                   addq    $0x28, %rsp
// b6: 5b                            popq    %rbx
// b7: 41 5c                         popq    %r12
// b9: 41 5d                         popq    %r13
// bb: 41 5e                         popq    %r14
// bd: 41 5f                         popq    %r15
// bf: 5d                            popq    %rbp
// c0: c3                            retq
// c1: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// c6: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// cb: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// d0: 48 85 c0                      testq   %rax, %rax
// d3: 40 0f 94 c5                   sete    %bpl
// d7: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// db: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// e0: 49 8d 70 08                   leaq    0x8(%r8), %rsi
// e4: 48 63 d0                      movslq  %eax, %rdx
// e7: ff 51 08                      callq   *0x8(%rcx)
// ea: 48 89 04 24                   movq    %rax, (%rsp)
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _JIT_OPARG
// f8: 66 85 c0                      testw   %ax, %ax
// fb: 0f 94 c0                      sete    %al
// fe: 40 84 c5                      testb   %al, %bpl
// 101: 0f 84 b1 00 00 00             je      0x1b8 <_JIT_ENTRY+0x1b8>
// 107: 49 8b 04 24                   movq    (%r12), %rax
// 10b: 48 85 c0                      testq   %rax, %rax
// 10e: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// 113: 7f 22                         jg      0x137 <_JIT_ENTRY+0x137>
// 115: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000117:  R_X86_64_64  .rodata.str1.1
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_NegativeRefcount
// 129: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 12e: 4c 89 e2                      movq    %r12, %rdx
// 131: ff d0                         callq   *%rax
// 133: 49 8b 04 24                   movq    (%r12), %rax
// 137: 85 c0                         testl   %eax, %eax
// 139: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 13e: 78 21                         js      0x161 <_JIT_ENTRY+0x161>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 14a: ff d0                         callq   *%rax
// 14c: 49 ff 0c 24                   decq    (%r12)
// 150: 75 0f                         jne     0x161 <_JIT_ENTRY+0x161>
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  _Py_Dealloc
// 15c: 4c 89 e7                      movq    %r12, %rdi
// 15f: ff d0                         callq   *%rax
// 161: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 166: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 16a: 48 8b 0c 24                   movq    (%rsp), %rcx
// 16e: 48 85 c9                      testq   %rcx, %rcx
// 171: 74 30                         je      0x1a3 <_JIT_ENTRY+0x1a3>
// 173: 4f 8d 34 f7                   leaq    (%r15,%r14,8), %r14
// 177: 48 89 08                      movq    %rcx, (%rax)
// 17a: 49 8b 45 10                   movq    0x10(%r13), %rax
// 17e: 48 8b 00                      movq    (%rax), %rax
// 181: 84 c0                         testb   %al, %al
// 183: 0f 84 c0 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_HandlePending
// 193: 4c 89 ef                      movq    %r13, %rdi
// 196: ff d0                         callq   *%rax
// 198: 85 c0                         testl   %eax, %eax
// 19a: 0f 84 a9 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 1a0: 4c 89 f0                      movq    %r14, %rax
// 1a3: 48 29 d8                      subq    %rbx, %rax
// 1a6: 48 83 c0 b8                   addq    $-0x48, %rax
// 1aa: 48 c1 e8 03                   shrq    $0x3, %rax
// 1ae: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1b1: 31 c0                         xorl    %eax, %eax
// 1b3: e9 fa fe ff ff                jmp     0xb2 <_JIT_ENTRY+0xb2>
// 1b8: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1bc: 41 be 01 00 00 00             movl    $0x1, %r14d
// 1c2: 45 0f 43 f5                   cmovael %r13d, %r14d
// 1c6: 31 ed                         xorl    %ebp, %ebp
// 1c8: eb 12                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1ca: 66 0f 1f 44 00 00             nopw    (%rax,%rax)
// 1d0: 48 ff c5                      incq    %rbp
// 1d3: 49 39 ee                      cmpq    %rbp, %r14
// 1d6: 0f 84 2b ff ff ff             je      0x107 <_JIT_ENTRY+0x107>
// 1dc: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 1e1: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 1e5: 49 8b 45 00                   movq    (%r13), %rax
// 1e9: 48 85 c0                      testq   %rax, %rax
// 1ec: 7e 12                         jle     0x200 <_JIT_ENTRY+0x200>
// 1ee: 85 c0                         testl   %eax, %eax
// 1f0: 78 de                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1f2: eb 32                         jmp     0x226 <_JIT_ENTRY+0x226>
// 1f4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 200: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1
// 20a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 20f: 4c 89 ea                      movq    %r13, %rdx
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: ff d0                         callq   *%rax
// 21e: 49 8b 45 00                   movq    (%r13), %rax
// 222: 85 c0                         testl   %eax, %eax
// 224: 78 aa                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 230: ff d0                         callq   *%rax
// 232: 49 ff 4d 00                   decq    (%r13)
// 236: 75 98                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: ff d0                         callq   *%rax
// 247: eb 87                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _JIT_OPARG
// 253: f7 d0                         notl    %eax
// 255: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 25a: 48 98                         cltq
// 25c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000025e:  R_X86_64_64  _Py_TrueStruct
// 266: 49 39 4c c7 f8                cmpq    %rcx, -0x8(%r15,%rax,8)
// 26b: 0f 84 19 fe ff ff             je      0x8a <_JIT_ENTRY+0x8a>
// 271: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 275: 48 83 c6 f8                   addq    $-0x8, %rsi
// 279: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027b:  R_X86_64_64  _JIT_CONTINUE
// 283: 48 89 df                      movq    %rbx, %rdi
// 286: 4c 89 ea                      movq    %r13, %rdx
// 289: 48 83 c4 28                   addq    $0x28, %rsp
// 28d: 5b                            popq    %rbx
// 28e: 41 5c                         popq    %r12
// 290: 41 5d                         popq    %r13
// 292: 41 5e                         popq    %r14
// 294: 41 5f                         popq    %r15
// 296: 5d                            popq    %rbp
// 297: ff e0                         jmpq    *%rax
// 299: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_IS_FALSE_POP_code_body[666] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xcf, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4f, 0x8d, 0x04, 0xc7, 0x49, 0x8b, 0x38, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x3a, 0x4d, 0x89, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x70, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xb1, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x30, 0x4f, 0x8d, 0x34, 0xf7, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xa9, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xfa, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xed, 0xeb, 0x12, 0x66, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xee, 0x0f, 0x84, 0x2b, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0xc7, 0xf8, 0x0f, 0x84, 0x19, 0xfe, 0xff, 0xff, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_IS_FALSE_POP_code_holes[17] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9e, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x117, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x25e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x27b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_IS_FALSE_POP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_IS_FALSE_POP_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_IS_NONE_POP
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_IS_NONE_POP.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 cf                   movq    (%r15,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d7                   movq    (%r15,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4f 8d 04 c7                   leaq    (%r15,%r8,8), %r8
// 79: 49 8b 38                      movq    (%r8), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 3a                         je      0xc1 <_JIT_ENTRY+0xc1>
// 87: 4d 89 fe                      movq    %r15, %r14
// 8a: 49 29 de                      subq    %rbx, %r14
// 8d: 49 83 c6 b8                   addq    $-0x48, %r14
// 91: 49 c1 ee 03                   shrq    $0x3, %r14
// 95: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 99: 48 8b 03                      movq    (%rbx), %rax
// 9c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009e:  R_X86_64_64  _JIT_TARGET
// a6: 89 c9                         movl    %ecx, %ecx
// a8: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// ac: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b2: 48 83 c4 28                   addq    $0x28, %rsp
// b6: 5b                            popq    %rbx
// b7: 41 5c                         popq    %r12
// b9: 41 5d                         popq    %r13
// bb: 41 5e                         popq    %r14
// bd: 41 5f                         popq    %r15
// bf: 5d                            popq    %rbp
// c0: c3                            retq
// c1: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// c6: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// cb: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// d0: 48 85 c0                      testq   %rax, %rax
// d3: 40 0f 94 c5                   sete    %bpl
// d7: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// db: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// e0: 49 8d 70 08                   leaq    0x8(%r8), %rsi
// e4: 48 63 d0                      movslq  %eax, %rdx
// e7: ff 51 08                      callq   *0x8(%rcx)
// ea: 48 89 04 24                   movq    %rax, (%rsp)
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _JIT_OPARG
// f8: 66 85 c0                      testw   %ax, %ax
// fb: 0f 94 c0                      sete    %al
// fe: 40 84 c5                      testb   %al, %bpl
// 101: 0f 84 b1 00 00 00             je      0x1b8 <_JIT_ENTRY+0x1b8>
// 107: 49 8b 04 24                   movq    (%r12), %rax
// 10b: 48 85 c0                      testq   %rax, %rax
// 10e: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// 113: 7f 22                         jg      0x137 <_JIT_ENTRY+0x137>
// 115: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000117:  R_X86_64_64  .rodata.str1.1
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_NegativeRefcount
// 129: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 12e: 4c 89 e2                      movq    %r12, %rdx
// 131: ff d0                         callq   *%rax
// 133: 49 8b 04 24                   movq    (%r12), %rax
// 137: 85 c0                         testl   %eax, %eax
// 139: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 13e: 78 21                         js      0x161 <_JIT_ENTRY+0x161>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 14a: ff d0                         callq   *%rax
// 14c: 49 ff 0c 24                   decq    (%r12)
// 150: 75 0f                         jne     0x161 <_JIT_ENTRY+0x161>
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  _Py_Dealloc
// 15c: 4c 89 e7                      movq    %r12, %rdi
// 15f: ff d0                         callq   *%rax
// 161: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 166: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 16a: 48 8b 0c 24                   movq    (%rsp), %rcx
// 16e: 48 85 c9                      testq   %rcx, %rcx
// 171: 74 30                         je      0x1a3 <_JIT_ENTRY+0x1a3>
// 173: 4f 8d 34 f7                   leaq    (%r15,%r14,8), %r14
// 177: 48 89 08                      movq    %rcx, (%rax)
// 17a: 49 8b 45 10                   movq    0x10(%r13), %rax
// 17e: 48 8b 00                      movq    (%rax), %rax
// 181: 84 c0                         testb   %al, %al
// 183: 0f 84 c0 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_HandlePending
// 193: 4c 89 ef                      movq    %r13, %rdi
// 196: ff d0                         callq   *%rax
// 198: 85 c0                         testl   %eax, %eax
// 19a: 0f 84 a9 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 1a0: 4c 89 f0                      movq    %r14, %rax
// 1a3: 48 29 d8                      subq    %rbx, %rax
// 1a6: 48 83 c0 b8                   addq    $-0x48, %rax
// 1aa: 48 c1 e8 03                   shrq    $0x3, %rax
// 1ae: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1b1: 31 c0                         xorl    %eax, %eax
// 1b3: e9 fa fe ff ff                jmp     0xb2 <_JIT_ENTRY+0xb2>
// 1b8: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1bc: 41 be 01 00 00 00             movl    $0x1, %r14d
// 1c2: 45 0f 43 f5                   cmovael %r13d, %r14d
// 1c6: 31 ed                         xorl    %ebp, %ebp
// 1c8: eb 12                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1ca: 66 0f 1f 44 00 00             nopw    (%rax,%rax)
// 1d0: 48 ff c5                      incq    %rbp
// 1d3: 49 39 ee                      cmpq    %rbp, %r14
// 1d6: 0f 84 2b ff ff ff             je      0x107 <_JIT_ENTRY+0x107>
// 1dc: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 1e1: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 1e5: 49 8b 45 00                   movq    (%r13), %rax
// 1e9: 48 85 c0                      testq   %rax, %rax
// 1ec: 7e 12                         jle     0x200 <_JIT_ENTRY+0x200>
// 1ee: 85 c0                         testl   %eax, %eax
// 1f0: 78 de                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1f2: eb 32                         jmp     0x226 <_JIT_ENTRY+0x226>
// 1f4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 200: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1
// 20a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 20f: 4c 89 ea                      movq    %r13, %rdx
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: ff d0                         callq   *%rax
// 21e: 49 8b 45 00                   movq    (%r13), %rax
// 222: 85 c0                         testl   %eax, %eax
// 224: 78 aa                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 230: ff d0                         callq   *%rax
// 232: 49 ff 4d 00                   decq    (%r13)
// 236: 75 98                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: ff d0                         callq   *%rax
// 247: eb 87                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _JIT_OPARG
// 253: f7 d0                         notl    %eax
// 255: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 25a: 48 98                         cltq
// 25c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000025e:  R_X86_64_64  _Py_NoneStruct
// 266: 49 39 4c c7 f8                cmpq    %rcx, -0x8(%r15,%rax,8)
// 26b: 0f 85 19 fe ff ff             jne     0x8a <_JIT_ENTRY+0x8a>
// 271: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 275: 48 83 c6 f8                   addq    $-0x8, %rsi
// 279: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027b:  R_X86_64_64  _JIT_CONTINUE
// 283: 48 89 df                      movq    %rbx, %rdi
// 286: 4c 89 ea                      movq    %r13, %rdx
// 289: 48 83 c4 28                   addq    $0x28, %rsp
// 28d: 5b                            popq    %rbx
// 28e: 41 5c                         popq    %r12
// 290: 41 5d                         popq    %r13
// 292: 41 5e                         popq    %r14
// 294: 41 5f                         popq    %r15
// 296: 5d                            popq    %rbp
// 297: ff e0                         jmpq    *%rax
// 299: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_IS_NONE_POP_code_body[666] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xcf, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4f, 0x8d, 0x04, 0xc7, 0x49, 0x8b, 0x38, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x3a, 0x4d, 0x89, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x70, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xb1, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x30, 0x4f, 0x8d, 0x34, 0xf7, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xa9, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xfa, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xed, 0xeb, 0x12, 0x66, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xee, 0x0f, 0x84, 0x2b, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0xc7, 0xf8, 0x0f, 0x85, 0x19, 0xfe, 0xff, 0xff, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_IS_NONE_POP_code_holes[17] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9e, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x117, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x25e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x27b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_IS_NONE_POP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_IS_NONE_POP_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_IS_NOT_NONE_POP
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_IS_NOT_NONE_POP.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fd                      movq    %rdi, %rbp
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 cf                   movq    (%r15,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d7                   movq    (%r15,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 30                         jne     0x97 <_JIT_ENTRY+0x97>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 22                         jne     0x97 <_JIT_ENTRY+0x97>
// 75: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 7a: 4b 8d 2c c7                   leaq    (%r15,%r8,8), %rbp
// 7e: 48 8b 7d 00                   movq    (%rbp), %rdi
// 82: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 86: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 8b: 74 44                         je      0xd1 <_JIT_ENTRY+0xd1>
// 8d: 4c 89 fb                      movq    %r15, %rbx
// 90: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 95: eb 03                         jmp     0x9a <_JIT_ENTRY+0x9a>
// 97: 4c 89 fb                      movq    %r15, %rbx
// 9a: 48 29 eb                      subq    %rbp, %rbx
// 9d: 48 83 c3 b8                   addq    $-0x48, %rbx
// a1: 48 c1 eb 03                   shrq    $0x3, %rbx
// a5: 89 5d 40                      movl    %ebx, 0x40(%rbp)
// a8: 48 8b 45 00                   movq    (%rbp), %rax
// ac: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ae:  R_X86_64_64  _JIT_TARGET
// b6: 89 c9                         movl    %ecx, %ecx
// b8: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// bc: 48 05 c8 00 00 00             addq    $0xc8, %rax
// c2: 48 83 c4 28                   addq    $0x28, %rsp
// c6: 5b                            popq    %rbx
// c7: 41 5c                         popq    %r12
// c9: 41 5d                         popq    %r13
// cb: 41 5e                         popq    %r14
// cd: 41 5f                         popq    %r15
// cf: 5d                            popq    %rbp
// d0: c3                            retq
// d1: 4c 89 54 24 20                movq    %r10, 0x20(%rsp)
// d6: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// db: 48 89 14 24                   movq    %rdx, (%rsp)
// df: 48 85 c0                      testq   %rax, %rax
// e2: 0f 94 c3                      sete    %bl
// e5: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// e9: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// ed: 48 63 d0                      movslq  %eax, %rdx
// f0: ff 51 08                      callq   *0x8(%rcx)
// f3: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _JIT_OPARG
// 102: 66 85 c0                      testw   %ax, %ax
// 105: 0f 94 c0                      sete    %al
// 108: 84 c3                         testb   %al, %bl
// 10a: 0f 84 b6 00 00 00             je      0x1c6 <_JIT_ENTRY+0x1c6>
// 110: 49 8b 04 24                   movq    (%r12), %rax
// 114: 48 85 c0                      testq   %rax, %rax
// 117: 7f 22                         jg      0x13b <_JIT_ENTRY+0x13b>
// 119: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011b:  R_X86_64_64  .rodata.str1.1
// 123: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000125:  R_X86_64_64  _Py_NegativeRefcount
// 12d: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 132: 4c 89 e2                      movq    %r12, %rdx
// 135: ff d0                         callq   *%rax
// 137: 49 8b 04 24                   movq    (%r12), %rax
// 13b: 85 c0                         testl   %eax, %eax
// 13d: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 142: 4c 8b 34 24                   movq    (%rsp), %r14
// 146: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 14b: 78 21                         js      0x16e <_JIT_ENTRY+0x16e>
// 14d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 157: ff d0                         callq   *%rax
// 159: 49 ff 0c 24                   decq    (%r12)
// 15d: 75 0f                         jne     0x16e <_JIT_ENTRY+0x16e>
// 15f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000161:  R_X86_64_64  _Py_Dealloc
// 169: 4c 89 e7                      movq    %r12, %rdi
// 16c: ff d0                         callq   *%rax
// 16e: 49 8d 04 df                   leaq    (%r15,%rbx,8), %rax
// 172: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 177: 48 85 d2                      testq   %rdx, %rdx
// 17a: 74 35                         je      0x1b1 <_JIT_ENTRY+0x1b1>
// 17c: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 181: 49 8d 1c cf                   leaq    (%r15,%rcx,8), %rbx
// 185: 48 89 10                      movq    %rdx, (%rax)
// 188: 49 8b 46 10                   movq    0x10(%r14), %rax
// 18c: 48 8b 00                      movq    (%rax), %rax
// 18f: 84 c0                         testb   %al, %al
// 191: 0f 84 b2 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 197: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000199:  R_X86_64_64  _Py_HandlePending
// 1a1: 4c 89 f7                      movq    %r14, %rdi
// 1a4: ff d0                         callq   *%rax
// 1a6: 85 c0                         testl   %eax, %eax
// 1a8: 0f 84 9b 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 1ae: 48 89 d8                      movq    %rbx, %rax
// 1b1: 48 29 e8                      subq    %rbp, %rax
// 1b4: 48 83 c0 b8                   addq    $-0x48, %rax
// 1b8: 48 c1 e8 03                   shrq    $0x3, %rax
// 1bc: 89 45 40                      movl    %eax, 0x40(%rbp)
// 1bf: 31 c0                         xorl    %eax, %eax
// 1c1: e9 fc fe ff ff                jmp     0xc2 <_JIT_ENTRY+0xc2>
// 1c6: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1ca: 41 be 01 00 00 00             movl    $0x1, %r14d
// 1d0: 45 0f 43 f5                   cmovael %r13d, %r14d
// 1d4: 31 db                         xorl    %ebx, %ebx
// 1d6: eb 14                         jmp     0x1ec <_JIT_ENTRY+0x1ec>
// 1d8: 0f 1f 84 00 00 00 00 00       nopl    (%rax,%rax)
// 1e0: 48 ff c3                      incq    %rbx
// 1e3: 49 39 de                      cmpq    %rbx, %r14
// 1e6: 0f 84 24 ff ff ff             je      0x110 <_JIT_ENTRY+0x110>
// 1ec: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1f1: 49 8b 45 00                   movq    (%r13), %rax
// 1f5: 48 85 c0                      testq   %rax, %rax
// 1f8: 7e 06                         jle     0x200 <_JIT_ENTRY+0x200>
// 1fa: 85 c0                         testl   %eax, %eax
// 1fc: 78 e2                         js      0x1e0 <_JIT_ENTRY+0x1e0>
// 1fe: eb 26                         jmp     0x226 <_JIT_ENTRY+0x226>
// 200: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1
// 20a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 20f: 4c 89 ea                      movq    %r13, %rdx
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: ff d0                         callq   *%rax
// 21e: 49 8b 45 00                   movq    (%r13), %rax
// 222: 85 c0                         testl   %eax, %eax
// 224: 78 ba                         js      0x1e0 <_JIT_ENTRY+0x1e0>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 230: ff d0                         callq   *%rax
// 232: 49 ff 4d 00                   decq    (%r13)
// 236: 75 a8                         jne     0x1e0 <_JIT_ENTRY+0x1e0>
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: ff d0                         callq   *%rax
// 247: eb 97                         jmp     0x1e0 <_JIT_ENTRY+0x1e0>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _JIT_OPARG
// 253: f7 d0                         notl    %eax
// 255: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 25a: 4c 63 f0                      movslq  %eax, %r14
// 25d: 4f 8b 64 f7 f8                movq    -0x8(%r15,%r14,8), %r12
// 262: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000264:  R_X86_64_64  _Py_NoneStruct
// 26c: 49 39 c4                      cmpq    %rax, %r12
// 26f: 0f 84 25 fe ff ff             je      0x9a <_JIT_ENTRY+0x9a>
// 275: 49 8b 04 24                   movq    (%r12), %rax
// 279: 48 85 c0                      testq   %rax, %rax
// 27c: 7f 22                         jg      0x2a0 <_JIT_ENTRY+0x2a0>
// 27e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000280:  R_X86_64_64  .rodata.str1.1
// 288: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028a:  R_X86_64_64  _Py_NegativeRefcount
// 292: be 14 0d 00 00                movl    $0xd14, %esi            # imm = 0xD14
// 297: 4c 89 e2                      movq    %r12, %rdx
// 29a: ff d0                         callq   *%rax
// 29c: 49 8b 04 24                   movq    (%r12), %rax
// 2a0: 4f 8d 3c f7                   leaq    (%r15,%r14,8), %r15
// 2a4: 49 83 c7 f8                   addq    $-0x8, %r15
// 2a8: 85 c0                         testl   %eax, %eax
// 2aa: 78 21                         js      0x2cd <_JIT_ENTRY+0x2cd>
// 2ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2b6: ff d0                         callq   *%rax
// 2b8: 49 ff 0c 24                   decq    (%r12)
// 2bc: 75 0f                         jne     0x2cd <_JIT_ENTRY+0x2cd>
// 2be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c0:  R_X86_64_64  _Py_Dealloc
// 2c8: 4c 89 e7                      movq    %r12, %rdi
// 2cb: ff d0                         callq   *%rax
// 2cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cf:  R_X86_64_64  _JIT_CONTINUE
// 2d7: 48 89 ef                      movq    %rbp, %rdi
// 2da: 4c 89 fe                      movq    %r15, %rsi
// 2dd: 48 8b 14 24                   movq    (%rsp), %rdx
// 2e1: 48 83 c4 28                   addq    $0x28, %rsp
// 2e5: 5b                            popq    %rbx
// 2e6: 41 5c                         popq    %r12
// 2e8: 41 5d                         popq    %r13
// 2ea: 41 5e                         popq    %r14
// 2ec: 41 5f                         popq    %r15
// 2ee: 5d                            popq    %rbp
// 2ef: ff e0                         jmpq    *%rax
// 2f1: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_IS_NOT_NONE_POP_code_body[754] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfd, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xcf, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x30, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x22, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x4b, 0x8d, 0x2c, 0xc7, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x44, 0x4c, 0x89, 0xfb, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0xeb, 0x03, 0x4c, 0x89, 0xfb, 0x48, 0x29, 0xeb, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x89, 0x5d, 0x40, 0x48, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x20, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x14, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xb6, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x4c, 0x8b, 0x34, 0x24, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x85, 0xd2, 0x74, 0x35, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x49, 0x8d, 0x1c, 0xcf, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xb2, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x9b, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd8, 0x48, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x45, 0x40, 0x31, 0xc0, 0xe9, 0xfc, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xdb, 0xeb, 0x14, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x24, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xf0, 0x4f, 0x8b, 0x64, 0xf7, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0xc4, 0x0f, 0x84, 0x25, 0xfe, 0xff, 0xff, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x14, 0x0d, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4f, 0x8d, 0x3c, 0xf7, 0x49, 0x83, 0xc7, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_IS_NOT_NONE_POP_code_holes[21] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x11b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x125, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x161, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x199, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x280, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x28a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2ae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2cf, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_IS_NOT_NONE_POP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_IS_NOT_NONE_POP_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_IS_TRUE_POP
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_IS_TRUE_POP.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 cf                   movq    (%r15,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d7                   movq    (%r15,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4f 8d 04 c7                   leaq    (%r15,%r8,8), %r8
// 79: 49 8b 38                      movq    (%r8), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 3a                         je      0xc1 <_JIT_ENTRY+0xc1>
// 87: 4d 89 fe                      movq    %r15, %r14
// 8a: 49 29 de                      subq    %rbx, %r14
// 8d: 49 83 c6 b8                   addq    $-0x48, %r14
// 91: 49 c1 ee 03                   shrq    $0x3, %r14
// 95: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 99: 48 8b 03                      movq    (%rbx), %rax
// 9c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009e:  R_X86_64_64  _JIT_TARGET
// a6: 89 c9                         movl    %ecx, %ecx
// a8: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// ac: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b2: 48 83 c4 28                   addq    $0x28, %rsp
// b6: 5b                            popq    %rbx
// b7: 41 5c                         popq    %r12
// b9: 41 5d                         popq    %r13
// bb: 41 5e                         popq    %r14
// bd: 41 5f                         popq    %r15
// bf: 5d                            popq    %rbp
// c0: c3                            retq
// c1: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// c6: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// cb: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// d0: 48 85 c0                      testq   %rax, %rax
// d3: 40 0f 94 c5                   sete    %bpl
// d7: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// db: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// e0: 49 8d 70 08                   leaq    0x8(%r8), %rsi
// e4: 48 63 d0                      movslq  %eax, %rdx
// e7: ff 51 08                      callq   *0x8(%rcx)
// ea: 48 89 04 24                   movq    %rax, (%rsp)
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _JIT_OPARG
// f8: 66 85 c0                      testw   %ax, %ax
// fb: 0f 94 c0                      sete    %al
// fe: 40 84 c5                      testb   %al, %bpl
// 101: 0f 84 b1 00 00 00             je      0x1b8 <_JIT_ENTRY+0x1b8>
// 107: 49 8b 04 24                   movq    (%r12), %rax
// 10b: 48 85 c0                      testq   %rax, %rax
// 10e: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// 113: 7f 22                         jg      0x137 <_JIT_ENTRY+0x137>
// 115: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000117:  R_X86_64_64  .rodata.str1.1
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_NegativeRefcount
// 129: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 12e: 4c 89 e2                      movq    %r12, %rdx
// 131: ff d0                         callq   *%rax
// 133: 49 8b 04 24                   movq    (%r12), %rax
// 137: 85 c0                         testl   %eax, %eax
// 139: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 13e: 78 21                         js      0x161 <_JIT_ENTRY+0x161>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 14a: ff d0                         callq   *%rax
// 14c: 49 ff 0c 24                   decq    (%r12)
// 150: 75 0f                         jne     0x161 <_JIT_ENTRY+0x161>
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  _Py_Dealloc
// 15c: 4c 89 e7                      movq    %r12, %rdi
// 15f: ff d0                         callq   *%rax
// 161: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 166: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 16a: 48 8b 0c 24                   movq    (%rsp), %rcx
// 16e: 48 85 c9                      testq   %rcx, %rcx
// 171: 74 30                         je      0x1a3 <_JIT_ENTRY+0x1a3>
// 173: 4f 8d 34 f7                   leaq    (%r15,%r14,8), %r14
// 177: 48 89 08                      movq    %rcx, (%rax)
// 17a: 49 8b 45 10                   movq    0x10(%r13), %rax
// 17e: 48 8b 00                      movq    (%rax), %rax
// 181: 84 c0                         testb   %al, %al
// 183: 0f 84 c0 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_HandlePending
// 193: 4c 89 ef                      movq    %r13, %rdi
// 196: ff d0                         callq   *%rax
// 198: 85 c0                         testl   %eax, %eax
// 19a: 0f 84 a9 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 1a0: 4c 89 f0                      movq    %r14, %rax
// 1a3: 48 29 d8                      subq    %rbx, %rax
// 1a6: 48 83 c0 b8                   addq    $-0x48, %rax
// 1aa: 48 c1 e8 03                   shrq    $0x3, %rax
// 1ae: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1b1: 31 c0                         xorl    %eax, %eax
// 1b3: e9 fa fe ff ff                jmp     0xb2 <_JIT_ENTRY+0xb2>
// 1b8: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1bc: 41 be 01 00 00 00             movl    $0x1, %r14d
// 1c2: 45 0f 43 f5                   cmovael %r13d, %r14d
// 1c6: 31 ed                         xorl    %ebp, %ebp
// 1c8: eb 12                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1ca: 66 0f 1f 44 00 00             nopw    (%rax,%rax)
// 1d0: 48 ff c5                      incq    %rbp
// 1d3: 49 39 ee                      cmpq    %rbp, %r14
// 1d6: 0f 84 2b ff ff ff             je      0x107 <_JIT_ENTRY+0x107>
// 1dc: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 1e1: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 1e5: 49 8b 45 00                   movq    (%r13), %rax
// 1e9: 48 85 c0                      testq   %rax, %rax
// 1ec: 7e 12                         jle     0x200 <_JIT_ENTRY+0x200>
// 1ee: 85 c0                         testl   %eax, %eax
// 1f0: 78 de                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1f2: eb 32                         jmp     0x226 <_JIT_ENTRY+0x226>
// 1f4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 200: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1
// 20a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 20f: 4c 89 ea                      movq    %r13, %rdx
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: ff d0                         callq   *%rax
// 21e: 49 8b 45 00                   movq    (%r13), %rax
// 222: 85 c0                         testl   %eax, %eax
// 224: 78 aa                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 230: ff d0                         callq   *%rax
// 232: 49 ff 4d 00                   decq    (%r13)
// 236: 75 98                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: ff d0                         callq   *%rax
// 247: eb 87                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _JIT_OPARG
// 253: f7 d0                         notl    %eax
// 255: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 25a: 48 98                         cltq
// 25c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000025e:  R_X86_64_64  _Py_FalseStruct
// 266: 49 39 4c c7 f8                cmpq    %rcx, -0x8(%r15,%rax,8)
// 26b: 0f 84 19 fe ff ff             je      0x8a <_JIT_ENTRY+0x8a>
// 271: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 275: 48 83 c6 f8                   addq    $-0x8, %rsi
// 279: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027b:  R_X86_64_64  _JIT_CONTINUE
// 283: 48 89 df                      movq    %rbx, %rdi
// 286: 4c 89 ea                      movq    %r13, %rdx
// 289: 48 83 c4 28                   addq    $0x28, %rsp
// 28d: 5b                            popq    %rbx
// 28e: 41 5c                         popq    %r12
// 290: 41 5d                         popq    %r13
// 292: 41 5e                         popq    %r14
// 294: 41 5f                         popq    %r15
// 296: 5d                            popq    %rbp
// 297: ff e0                         jmpq    *%rax
// 299: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_IS_TRUE_POP_code_body[666] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xcf, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4f, 0x8d, 0x04, 0xc7, 0x49, 0x8b, 0x38, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x3a, 0x4d, 0x89, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x70, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xb1, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x30, 0x4f, 0x8d, 0x34, 0xf7, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xa9, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xfa, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xed, 0xeb, 0x12, 0x66, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xee, 0x0f, 0x84, 0x2b, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0xc7, 0xf8, 0x0f, 0x84, 0x19, 0xfe, 0xff, 0xff, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_IS_TRUE_POP_code_holes[17] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9e, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x117, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x25e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x27b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_IS_TRUE_POP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_IS_TRUE_POP_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_KEYS_VERSION
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_KEYS_VERSION.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4f 8d 04 c6                   leaq    (%r14,%r8,8), %r8
// 79: 49 8b 38                      movq    (%r8), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 49 29 de                      subq    %rbx, %r14
// 8a: 49 83 c6 b8                   addq    $-0x48, %r14
// 8e: 49 c1 ee 03                   shrq    $0x3, %r14
// 92: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 96: 48 8b 03                      movq    (%rbx), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c3: 4c 89 0c 24                   movq    %r9, (%rsp)
// c7: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cc: 48 85 c0                      testq   %rax, %rax
// cf: 40 0f 94 c5                   sete    %bpl
// d3: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// d7: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// dc: 49 8d 70 08                   leaq    0x8(%r8), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 b1 00 00 00             je      0x1b5 <_JIT_ENTRY+0x1b5>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 136: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 13b: 78 21                         js      0x15e <_JIT_ENTRY+0x15e>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 147: ff d0                         callq   *%rax
// 149: 49 ff 0c 24                   decq    (%r12)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_Dealloc
// 159: 4c 89 e7                      movq    %r12, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 163: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 167: 4d 85 ed                      testq   %r13, %r13
// 16a: 74 34                         je      0x1a0 <_JIT_ENTRY+0x1a0>
// 16c: 48 8b 0c 24                   movq    (%rsp), %rcx
// 170: 4d 8d 24 ce                   leaq    (%r14,%rcx,8), %r12
// 174: 4c 89 28                      movq    %r13, (%rax)
// 177: 49 8b 47 10                   movq    0x10(%r15), %rax
// 17b: 48 8b 00                      movq    (%rax), %rax
// 17e: 84 c0                         testb   %al, %al
// 180: 0f 84 c3 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 186: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000188:  R_X86_64_64  _Py_HandlePending
// 190: 4c 89 ff                      movq    %r15, %rdi
// 193: ff d0                         callq   *%rax
// 195: 85 c0                         testl   %eax, %eax
// 197: 0f 84 ac 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 19d: 4c 89 e0                      movq    %r12, %rax
// 1a0: 48 29 d8                      subq    %rbx, %rax
// 1a3: 48 83 c0 b8                   addq    $-0x48, %rax
// 1a7: 48 c1 e8 03                   shrq    $0x3, %rax
// 1ab: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1ae: 31 c0                         xorl    %eax, %eax
// 1b0: e9 fa fe ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 1b5: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1b9: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1bf: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1c3: 31 ed                         xorl    %ebp, %ebp
// 1c5: eb 15                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c7: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 1d0: 48 ff c5                      incq    %rbp
// 1d3: 49 39 ef                      cmpq    %rbp, %r15
// 1d6: 0f 84 28 ff ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 1dc: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 1e1: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 1e5: 49 8b 45 00                   movq    (%r13), %rax
// 1e9: 48 85 c0                      testq   %rax, %rax
// 1ec: 7e 12                         jle     0x200 <_JIT_ENTRY+0x200>
// 1ee: 85 c0                         testl   %eax, %eax
// 1f0: 78 de                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1f2: eb 32                         jmp     0x226 <_JIT_ENTRY+0x226>
// 1f4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 200: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1
// 20a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 20f: 4c 89 ea                      movq    %r13, %rdx
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: ff d0                         callq   *%rax
// 21e: 49 8b 45 00                   movq    (%r13), %rax
// 222: 85 c0                         testl   %eax, %eax
// 224: 78 aa                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 230: ff d0                         callq   *%rax
// 232: 49 ff 4d 00                   decq    (%r13)
// 236: 75 98                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: ff d0                         callq   *%rax
// 247: eb 87                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _JIT_OPARG
// 253: f7 d0                         notl    %eax
// 255: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 25a: 48 98                         cltq
// 25c: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 261: 48 8b 40 08                   movq    0x8(%rax), %rax
// 265: 48 8b 80 70 03 00 00          movq    0x370(%rax), %rax
// 26c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000026e:  R_X86_64_64  _JIT_OPERAND
// 276: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
// 279: 75 23                         jne     0x29e <_JIT_ENTRY+0x29e>
// 27b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027d:  R_X86_64_64  _JIT_CONTINUE
// 285: 48 89 df                      movq    %rbx, %rdi
// 288: 4c 89 e6                      movq    %r12, %rsi
// 28b: 4c 89 fa                      movq    %r15, %rdx
// 28e: 48 83 c4 28                   addq    $0x28, %rsp
// 292: 5b                            popq    %rbx
// 293: 41 5c                         popq    %r12
// 295: 41 5d                         popq    %r13
// 297: 41 5e                         popq    %r14
// 299: 41 5f                         popq    %r15
// 29b: 5d                            popq    %rbp
// 29c: ff e0                         jmpq    *%rax
// 29e: 4d 89 e6                      movq    %r12, %r14
// 2a1: e9 e1 fd ff ff                jmp     0x87 <_JIT_ENTRY+0x87>
// 2a6: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_KEYS_VERSION_code_body[679] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xce, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4f, 0x8d, 0x04, 0xc6, 0x49, 0x8b, 0x38, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x70, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xb1, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x4d, 0x85, 0xed, 0x74, 0x34, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x24, 0xce, 0x4c, 0x89, 0x28, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xac, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xfa, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xed, 0xeb, 0x15, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xef, 0x0f, 0x84, 0x28, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0x8b, 0x40, 0x08, 0x48, 0x8b, 0x80, 0x70, 0x03, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x48, 0x0c, 0x75, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x89, 0xe6, 0xe9, 0xe1, 0xfd, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_KEYS_VERSION_code_holes[17] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x26e, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x27d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_KEYS_VERSION_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_KEYS_VERSION_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_NOT_EXHAUSTED_LIST
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_NOT_EXHAUSTED_LIST.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4f 8d 04 c6                   leaq    (%r14,%r8,8), %r8
// 79: 49 8b 38                      movq    (%r8), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 49 29 de                      subq    %rbx, %r14
// 8a: 49 83 c6 b8                   addq    $-0x48, %r14
// 8e: 49 c1 ee 03                   shrq    $0x3, %r14
// 92: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 96: 48 8b 03                      movq    (%rbx), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c3: 4c 89 0c 24                   movq    %r9, (%rsp)
// c7: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cc: 48 85 c0                      testq   %rax, %rax
// cf: 40 0f 94 c5                   sete    %bpl
// d3: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// d7: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// dc: 49 8d 70 08                   leaq    0x8(%r8), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 b1 00 00 00             je      0x1b5 <_JIT_ENTRY+0x1b5>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 136: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 13b: 78 21                         js      0x15e <_JIT_ENTRY+0x15e>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 147: ff d0                         callq   *%rax
// 149: 49 ff 0c 24                   decq    (%r12)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_Dealloc
// 159: 4c 89 e7                      movq    %r12, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 163: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 167: 4d 85 ed                      testq   %r13, %r13
// 16a: 74 34                         je      0x1a0 <_JIT_ENTRY+0x1a0>
// 16c: 48 8b 0c 24                   movq    (%rsp), %rcx
// 170: 4d 8d 24 ce                   leaq    (%r14,%rcx,8), %r12
// 174: 4c 89 28                      movq    %r13, (%rax)
// 177: 49 8b 47 10                   movq    0x10(%r15), %rax
// 17b: 48 8b 00                      movq    (%rax), %rax
// 17e: 84 c0                         testb   %al, %al
// 180: 0f 84 c3 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 186: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000188:  R_X86_64_64  _Py_HandlePending
// 190: 4c 89 ff                      movq    %r15, %rdi
// 193: ff d0                         callq   *%rax
// 195: 85 c0                         testl   %eax, %eax
// 197: 0f 84 ac 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 19d: 4c 89 e0                      movq    %r12, %rax
// 1a0: 48 29 d8                      subq    %rbx, %rax
// 1a3: 48 83 c0 b8                   addq    $-0x48, %rax
// 1a7: 48 c1 e8 03                   shrq    $0x3, %rax
// 1ab: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1ae: 31 c0                         xorl    %eax, %eax
// 1b0: e9 fa fe ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 1b5: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1b9: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1bf: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1c3: 31 ed                         xorl    %ebp, %ebp
// 1c5: eb 15                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c7: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 1d0: 48 ff c5                      incq    %rbp
// 1d3: 49 39 ef                      cmpq    %rbp, %r15
// 1d6: 0f 84 28 ff ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 1dc: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 1e1: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 1e5: 49 8b 45 00                   movq    (%r13), %rax
// 1e9: 48 85 c0                      testq   %rax, %rax
// 1ec: 7e 12                         jle     0x200 <_JIT_ENTRY+0x200>
// 1ee: 85 c0                         testl   %eax, %eax
// 1f0: 78 de                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1f2: eb 32                         jmp     0x226 <_JIT_ENTRY+0x226>
// 1f4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 200: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1
// 20a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 20f: 4c 89 ea                      movq    %r13, %rdx
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: ff d0                         callq   *%rax
// 21e: 49 8b 45 00                   movq    (%r13), %rax
// 222: 85 c0                         testl   %eax, %eax
// 224: 78 aa                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 230: ff d0                         callq   *%rax
// 232: 49 ff 4d 00                   decq    (%r13)
// 236: 75 98                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: ff d0                         callq   *%rax
// 247: eb 87                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _JIT_OPARG
// 253: f7 d0                         notl    %eax
// 255: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 25a: 48 98                         cltq
// 25c: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 261: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 265: 48 85 c9                      testq   %rcx, %rcx
// 268: 74 2d                         je      0x297 <_JIT_ENTRY+0x297>
// 26a: 48 8b 40 10                   movq    0x10(%rax), %rax
// 26e: 48 3b 41 10                   cmpq    0x10(%rcx), %rax
// 272: 7d 23                         jge     0x297 <_JIT_ENTRY+0x297>
// 274: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000276:  R_X86_64_64  _JIT_CONTINUE
// 27e: 48 89 df                      movq    %rbx, %rdi
// 281: 4c 89 e6                      movq    %r12, %rsi
// 284: 4c 89 fa                      movq    %r15, %rdx
// 287: 48 83 c4 28                   addq    $0x28, %rsp
// 28b: 5b                            popq    %rbx
// 28c: 41 5c                         popq    %r12
// 28e: 41 5d                         popq    %r13
// 290: 41 5e                         popq    %r14
// 292: 41 5f                         popq    %r15
// 294: 5d                            popq    %rbp
// 295: ff e0                         jmpq    *%rax
// 297: 4d 89 e6                      movq    %r12, %r14
// 29a: e9 e8 fd ff ff                jmp     0x87 <_JIT_ENTRY+0x87>
// 29f: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_NOT_EXHAUSTED_LIST_code_body[672] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xce, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4f, 0x8d, 0x04, 0xc6, 0x49, 0x8b, 0x38, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x70, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xb1, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x4d, 0x85, 0xed, 0x74, 0x34, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x24, 0xce, 0x4c, 0x89, 0x28, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xac, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xfa, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xed, 0xeb, 0x15, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xef, 0x0f, 0x84, 0x28, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0x8b, 0x48, 0x18, 0x48, 0x85, 0xc9, 0x74, 0x2d, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x3b, 0x41, 0x10, 0x7d, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x89, 0xe6, 0xe9, 0xe8, 0xfd, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_NOT_EXHAUSTED_LIST_code_holes[16] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x276, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_NOT_EXHAUSTED_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_NOT_EXHAUSTED_LIST_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_NOT_EXHAUSTED_RANGE
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_NOT_EXHAUSTED_RANGE.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4f 8d 04 c6                   leaq    (%r14,%r8,8), %r8
// 79: 49 8b 38                      movq    (%r8), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 49 29 de                      subq    %rbx, %r14
// 8a: 49 83 c6 b8                   addq    $-0x48, %r14
// 8e: 49 c1 ee 03                   shrq    $0x3, %r14
// 92: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 96: 48 8b 03                      movq    (%rbx), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c3: 4c 89 0c 24                   movq    %r9, (%rsp)
// c7: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cc: 48 85 c0                      testq   %rax, %rax
// cf: 40 0f 94 c5                   sete    %bpl
// d3: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// d7: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// dc: 49 8d 70 08                   leaq    0x8(%r8), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 b1 00 00 00             je      0x1b5 <_JIT_ENTRY+0x1b5>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 136: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 13b: 78 21                         js      0x15e <_JIT_ENTRY+0x15e>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 147: ff d0                         callq   *%rax
// 149: 49 ff 0c 24                   decq    (%r12)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_Dealloc
// 159: 4c 89 e7                      movq    %r12, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 163: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 167: 4d 85 ed                      testq   %r13, %r13
// 16a: 74 34                         je      0x1a0 <_JIT_ENTRY+0x1a0>
// 16c: 48 8b 0c 24                   movq    (%rsp), %rcx
// 170: 4d 8d 24 ce                   leaq    (%r14,%rcx,8), %r12
// 174: 4c 89 28                      movq    %r13, (%rax)
// 177: 49 8b 47 10                   movq    0x10(%r15), %rax
// 17b: 48 8b 00                      movq    (%rax), %rax
// 17e: 84 c0                         testb   %al, %al
// 180: 0f 84 c3 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 186: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000188:  R_X86_64_64  _Py_HandlePending
// 190: 4c 89 ff                      movq    %r15, %rdi
// 193: ff d0                         callq   *%rax
// 195: 85 c0                         testl   %eax, %eax
// 197: 0f 84 ac 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 19d: 4c 89 e0                      movq    %r12, %rax
// 1a0: 48 29 d8                      subq    %rbx, %rax
// 1a3: 48 83 c0 b8                   addq    $-0x48, %rax
// 1a7: 48 c1 e8 03                   shrq    $0x3, %rax
// 1ab: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1ae: 31 c0                         xorl    %eax, %eax
// 1b0: e9 fa fe ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 1b5: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1b9: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1bf: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1c3: 31 ed                         xorl    %ebp, %ebp
// 1c5: eb 15                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c7: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 1d0: 48 ff c5                      incq    %rbp
// 1d3: 49 39 ef                      cmpq    %rbp, %r15
// 1d6: 0f 84 28 ff ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 1dc: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 1e1: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 1e5: 49 8b 45 00                   movq    (%r13), %rax
// 1e9: 48 85 c0                      testq   %rax, %rax
// 1ec: 7e 12                         jle     0x200 <_JIT_ENTRY+0x200>
// 1ee: 85 c0                         testl   %eax, %eax
// 1f0: 78 de                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1f2: eb 32                         jmp     0x226 <_JIT_ENTRY+0x226>
// 1f4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 200: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1
// 20a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 20f: 4c 89 ea                      movq    %r13, %rdx
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: ff d0                         callq   *%rax
// 21e: 49 8b 45 00                   movq    (%r13), %rax
// 222: 85 c0                         testl   %eax, %eax
// 224: 78 aa                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 230: ff d0                         callq   *%rax
// 232: 49 ff 4d 00                   decq    (%r13)
// 236: 75 98                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: ff d0                         callq   *%rax
// 247: eb 87                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _JIT_OPARG
// 253: f7 d0                         notl    %eax
// 255: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 25a: 48 98                         cltq
// 25c: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 261: 48 83 78 20 00                cmpq    $0x0, 0x20(%rax)
// 266: 7e 23                         jle     0x28b <_JIT_ENTRY+0x28b>
// 268: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026a:  R_X86_64_64  _JIT_CONTINUE
// 272: 48 89 df                      movq    %rbx, %rdi
// 275: 4c 89 e6                      movq    %r12, %rsi
// 278: 4c 89 fa                      movq    %r15, %rdx
// 27b: 48 83 c4 28                   addq    $0x28, %rsp
// 27f: 5b                            popq    %rbx
// 280: 41 5c                         popq    %r12
// 282: 41 5d                         popq    %r13
// 284: 41 5e                         popq    %r14
// 286: 41 5f                         popq    %r15
// 288: 5d                            popq    %rbp
// 289: ff e0                         jmpq    *%rax
// 28b: 4d 89 e6                      movq    %r12, %r14
// 28e: e9 f4 fd ff ff                jmp     0x87 <_JIT_ENTRY+0x87>
// 293: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_NOT_EXHAUSTED_RANGE_code_body[660] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xce, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4f, 0x8d, 0x04, 0xc6, 0x49, 0x8b, 0x38, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x70, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xb1, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x4d, 0x85, 0xed, 0x74, 0x34, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x24, 0xce, 0x4c, 0x89, 0x28, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xac, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xfa, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xed, 0xeb, 0x15, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xef, 0x0f, 0x84, 0x28, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0x83, 0x78, 0x20, 0x00, 0x7e, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x89, 0xe6, 0xe9, 0xf4, 0xfd, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_NOT_EXHAUSTED_RANGE_code_holes[16] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x26a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_NOT_EXHAUSTED_RANGE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_NOT_EXHAUSTED_RANGE_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_NOT_EXHAUSTED_TUPLE
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_NOT_EXHAUSTED_TUPLE.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4f 8d 04 c6                   leaq    (%r14,%r8,8), %r8
// 79: 49 8b 38                      movq    (%r8), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 49 29 de                      subq    %rbx, %r14
// 8a: 49 83 c6 b8                   addq    $-0x48, %r14
// 8e: 49 c1 ee 03                   shrq    $0x3, %r14
// 92: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 96: 48 8b 03                      movq    (%rbx), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c3: 4c 89 0c 24                   movq    %r9, (%rsp)
// c7: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cc: 48 85 c0                      testq   %rax, %rax
// cf: 40 0f 94 c5                   sete    %bpl
// d3: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// d7: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// dc: 49 8d 70 08                   leaq    0x8(%r8), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 b1 00 00 00             je      0x1b5 <_JIT_ENTRY+0x1b5>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 136: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 13b: 78 21                         js      0x15e <_JIT_ENTRY+0x15e>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 147: ff d0                         callq   *%rax
// 149: 49 ff 0c 24                   decq    (%r12)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_Dealloc
// 159: 4c 89 e7                      movq    %r12, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 163: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 167: 4d 85 ed                      testq   %r13, %r13
// 16a: 74 34                         je      0x1a0 <_JIT_ENTRY+0x1a0>
// 16c: 48 8b 0c 24                   movq    (%rsp), %rcx
// 170: 4d 8d 24 ce                   leaq    (%r14,%rcx,8), %r12
// 174: 4c 89 28                      movq    %r13, (%rax)
// 177: 49 8b 47 10                   movq    0x10(%r15), %rax
// 17b: 48 8b 00                      movq    (%rax), %rax
// 17e: 84 c0                         testb   %al, %al
// 180: 0f 84 c3 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 186: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000188:  R_X86_64_64  _Py_HandlePending
// 190: 4c 89 ff                      movq    %r15, %rdi
// 193: ff d0                         callq   *%rax
// 195: 85 c0                         testl   %eax, %eax
// 197: 0f 84 ac 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 19d: 4c 89 e0                      movq    %r12, %rax
// 1a0: 48 29 d8                      subq    %rbx, %rax
// 1a3: 48 83 c0 b8                   addq    $-0x48, %rax
// 1a7: 48 c1 e8 03                   shrq    $0x3, %rax
// 1ab: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1ae: 31 c0                         xorl    %eax, %eax
// 1b0: e9 fa fe ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 1b5: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1b9: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1bf: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1c3: 31 ed                         xorl    %ebp, %ebp
// 1c5: eb 15                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c7: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 1d0: 48 ff c5                      incq    %rbp
// 1d3: 49 39 ef                      cmpq    %rbp, %r15
// 1d6: 0f 84 28 ff ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 1dc: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 1e1: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 1e5: 49 8b 45 00                   movq    (%r13), %rax
// 1e9: 48 85 c0                      testq   %rax, %rax
// 1ec: 7e 12                         jle     0x200 <_JIT_ENTRY+0x200>
// 1ee: 85 c0                         testl   %eax, %eax
// 1f0: 78 de                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1f2: eb 32                         jmp     0x226 <_JIT_ENTRY+0x226>
// 1f4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 200: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1
// 20a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 20f: 4c 89 ea                      movq    %r13, %rdx
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: ff d0                         callq   *%rax
// 21e: 49 8b 45 00                   movq    (%r13), %rax
// 222: 85 c0                         testl   %eax, %eax
// 224: 78 aa                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 230: ff d0                         callq   *%rax
// 232: 49 ff 4d 00                   decq    (%r13)
// 236: 75 98                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: ff d0                         callq   *%rax
// 247: eb 87                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _JIT_OPARG
// 253: f7 d0                         notl    %eax
// 255: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 25a: 48 98                         cltq
// 25c: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 261: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 265: 48 85 c9                      testq   %rcx, %rcx
// 268: 74 2d                         je      0x297 <_JIT_ENTRY+0x297>
// 26a: 48 8b 40 10                   movq    0x10(%rax), %rax
// 26e: 48 3b 41 10                   cmpq    0x10(%rcx), %rax
// 272: 7d 23                         jge     0x297 <_JIT_ENTRY+0x297>
// 274: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000276:  R_X86_64_64  _JIT_CONTINUE
// 27e: 48 89 df                      movq    %rbx, %rdi
// 281: 4c 89 e6                      movq    %r12, %rsi
// 284: 4c 89 fa                      movq    %r15, %rdx
// 287: 48 83 c4 28                   addq    $0x28, %rsp
// 28b: 5b                            popq    %rbx
// 28c: 41 5c                         popq    %r12
// 28e: 41 5d                         popq    %r13
// 290: 41 5e                         popq    %r14
// 292: 41 5f                         popq    %r15
// 294: 5d                            popq    %rbp
// 295: ff e0                         jmpq    *%rax
// 297: 4d 89 e6                      movq    %r12, %r14
// 29a: e9 e8 fd ff ff                jmp     0x87 <_JIT_ENTRY+0x87>
// 29f: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_NOT_EXHAUSTED_TUPLE_code_body[672] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xce, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4f, 0x8d, 0x04, 0xc6, 0x49, 0x8b, 0x38, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x70, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xb1, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x4d, 0x85, 0xed, 0x74, 0x34, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x24, 0xce, 0x4c, 0x89, 0x28, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xac, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xfa, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xed, 0xeb, 0x15, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xef, 0x0f, 0x84, 0x28, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0x8b, 0x48, 0x18, 0x48, 0x85, 0xc9, 0x74, 0x2d, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x3b, 0x41, 0x10, 0x7d, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x89, 0xe6, 0xe9, 0xe8, 0xfd, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_NOT_EXHAUSTED_TUPLE_code_holes[16] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x276, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_NOT_EXHAUSTED_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_NOT_EXHAUSTED_TUPLE_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_TYPE_VERSION
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_TYPE_VERSION.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4f 8d 04 c6                   leaq    (%r14,%r8,8), %r8
// 79: 49 8b 38                      movq    (%r8), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 49 29 de                      subq    %rbx, %r14
// 8a: 49 83 c6 b8                   addq    $-0x48, %r14
// 8e: 49 c1 ee 03                   shrq    $0x3, %r14
// 92: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 96: 48 8b 03                      movq    (%rbx), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c3: 4c 89 0c 24                   movq    %r9, (%rsp)
// c7: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cc: 48 85 c0                      testq   %rax, %rax
// cf: 40 0f 94 c5                   sete    %bpl
// d3: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// d7: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// dc: 49 8d 70 08                   leaq    0x8(%r8), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 b1 00 00 00             je      0x1b5 <_JIT_ENTRY+0x1b5>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 136: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 13b: 78 21                         js      0x15e <_JIT_ENTRY+0x15e>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 147: ff d0                         callq   *%rax
// 149: 49 ff 0c 24                   decq    (%r12)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_Dealloc
// 159: 4c 89 e7                      movq    %r12, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 163: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 167: 4d 85 ed                      testq   %r13, %r13
// 16a: 74 34                         je      0x1a0 <_JIT_ENTRY+0x1a0>
// 16c: 48 8b 0c 24                   movq    (%rsp), %rcx
// 170: 4d 8d 24 ce                   leaq    (%r14,%rcx,8), %r12
// 174: 4c 89 28                      movq    %r13, (%rax)
// 177: 49 8b 47 10                   movq    0x10(%r15), %rax
// 17b: 48 8b 00                      movq    (%rax), %rax
// 17e: 84 c0                         testb   %al, %al
// 180: 0f 84 c3 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 186: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000188:  R_X86_64_64  _Py_HandlePending
// 190: 4c 89 ff                      movq    %r15, %rdi
// 193: ff d0                         callq   *%rax
// 195: 85 c0                         testl   %eax, %eax
// 197: 0f 84 ac 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 19d: 4c 89 e0                      movq    %r12, %rax
// 1a0: 48 29 d8                      subq    %rbx, %rax
// 1a3: 48 83 c0 b8                   addq    $-0x48, %rax
// 1a7: 48 c1 e8 03                   shrq    $0x3, %rax
// 1ab: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1ae: 31 c0                         xorl    %eax, %eax
// 1b0: e9 fa fe ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 1b5: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1b9: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1bf: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1c3: 31 ed                         xorl    %ebp, %ebp
// 1c5: eb 15                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c7: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 1d0: 48 ff c5                      incq    %rbp
// 1d3: 49 39 ef                      cmpq    %rbp, %r15
// 1d6: 0f 84 28 ff ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 1dc: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 1e1: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 1e5: 49 8b 45 00                   movq    (%r13), %rax
// 1e9: 48 85 c0                      testq   %rax, %rax
// 1ec: 7e 12                         jle     0x200 <_JIT_ENTRY+0x200>
// 1ee: 85 c0                         testl   %eax, %eax
// 1f0: 78 de                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1f2: eb 32                         jmp     0x226 <_JIT_ENTRY+0x226>
// 1f4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 200: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1
// 20a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 20f: 4c 89 ea                      movq    %r13, %rdx
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: ff d0                         callq   *%rax
// 21e: 49 8b 45 00                   movq    (%r13), %rax
// 222: 85 c0                         testl   %eax, %eax
// 224: 78 aa                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 230: ff d0                         callq   *%rax
// 232: 49 ff 4d 00                   decq    (%r13)
// 236: 75 98                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: ff d0                         callq   *%rax
// 247: eb 87                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _JIT_OPARG
// 253: f7 d0                         notl    %eax
// 255: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 25a: 48 98                         cltq
// 25c: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 261: 48 8b 40 08                   movq    0x8(%rax), %rax
// 265: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000267:  R_X86_64_64  _JIT_OPERAND
// 26f: 39 88 80 01 00 00             cmpl    %ecx, 0x180(%rax)
// 275: 75 23                         jne     0x29a <_JIT_ENTRY+0x29a>
// 277: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000279:  R_X86_64_64  _JIT_CONTINUE
// 281: 48 89 df                      movq    %rbx, %rdi
// 284: 4c 89 e6                      movq    %r12, %rsi
// 287: 4c 89 fa                      movq    %r15, %rdx
// 28a: 48 83 c4 28                   addq    $0x28, %rsp
// 28e: 5b                            popq    %rbx
// 28f: 41 5c                         popq    %r12
// 291: 41 5d                         popq    %r13
// 293: 41 5e                         popq    %r14
// 295: 41 5f                         popq    %r15
// 297: 5d                            popq    %rbp
// 298: ff e0                         jmpq    *%rax
// 29a: 4d 89 e6                      movq    %r12, %r14
// 29d: e9 e5 fd ff ff                jmp     0x87 <_JIT_ENTRY+0x87>
// 2a2: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_TYPE_VERSION_code_body[675] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xce, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4f, 0x8d, 0x04, 0xc6, 0x49, 0x8b, 0x38, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x70, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xb1, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x4d, 0x85, 0xed, 0x74, 0x34, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x24, 0xce, 0x4c, 0x89, 0x28, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xac, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xfa, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xed, 0xeb, 0x15, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xef, 0x0f, 0x84, 0x28, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0x8b, 0x40, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x88, 0x80, 0x01, 0x00, 0x00, 0x75, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x89, 0xe6, 0xe9, 0xe5, 0xfd, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_TYPE_VERSION_code_holes[17] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x267, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x279, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_TYPE_VERSION_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_TYPE_VERSION_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d6                   movq    (%r14,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 de                   movq    (%r14,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c ce                   leaq    (%r14,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 c6                      subq    %r8, %r14
// 8b: 49 83 c6 b8                   addq    $-0x48, %r14
// 8f: 49 c1 ee 03                   shrq    $0x3, %r14
// 93: 45 89 70 40                   movl    %r14d, 0x40(%r8)
// 97: 49 8b 00                      movq    (%r8), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 5c 24 20                movq    %r11, 0x20(%rsp)
// c4: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c9: 48 89 14 24                   movq    %rdx, (%rsp)
// cd: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 b6 00 00 00             je      0x1b9 <_JIT_ENTRY+0x1b9>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 135: 4c 8b 3c 24                   movq    (%rsp), %r15
// 139: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// 13e: 78 21                         js      0x161 <_JIT_ENTRY+0x161>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 14a: ff d0                         callq   *%rax
// 14c: 49 ff 0c 24                   decq    (%r12)
// 150: 75 0f                         jne     0x161 <_JIT_ENTRY+0x161>
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  _Py_Dealloc
// 15c: 4c 89 e7                      movq    %r12, %rdi
// 15f: ff d0                         callq   *%rax
// 161: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 166: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 16a: 4d 85 ed                      testq   %r13, %r13
// 16d: 74 35                         je      0x1a4 <_JIT_ENTRY+0x1a4>
// 16f: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 174: 4d 8d 24 ce                   leaq    (%r14,%rcx,8), %r12
// 178: 4c 89 28                      movq    %r13, (%rax)
// 17b: 49 8b 47 10                   movq    0x10(%r15), %rax
// 17f: 48 8b 00                      movq    (%rax), %rax
// 182: 84 c0                         testb   %al, %al
// 184: 0f 84 af 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 18a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018c:  R_X86_64_64  _Py_HandlePending
// 194: 4c 89 ff                      movq    %r15, %rdi
// 197: ff d0                         callq   *%rax
// 199: 85 c0                         testl   %eax, %eax
// 19b: 0f 84 98 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 1a1: 4c 89 e0                      movq    %r12, %rax
// 1a4: 48 29 d8                      subq    %rbx, %rax
// 1a7: 48 83 c0 b8                   addq    $-0x48, %rax
// 1ab: 48 c1 e8 03                   shrq    $0x3, %rax
// 1af: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1b2: 31 c0                         xorl    %eax, %eax
// 1b4: e9 f7 fe ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 1b9: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1bd: bb 01 00 00 00                movl    $0x1, %ebx
// 1c2: 41 0f 43 dd                   cmovael %r13d, %ebx
// 1c6: 45 31 ff                      xorl    %r15d, %r15d
// 1c9: eb 11                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1cb: 0f 1f 44 00 00                nopl    (%rax,%rax)
// 1d0: 49 ff c7                      incq    %r15
// 1d3: 4c 39 fb                      cmpq    %r15, %rbx
// 1d6: 0f 84 27 ff ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 1dc: 4e 8b 6c fd 00                movq    (%rbp,%r15,8), %r13
// 1e1: 49 8b 45 00                   movq    (%r13), %rax
// 1e5: 48 85 c0                      testq   %rax, %rax
// 1e8: 7e 06                         jle     0x1f0 <_JIT_ENTRY+0x1f0>
// 1ea: 85 c0                         testl   %eax, %eax
// 1ec: 78 e2                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1ee: eb 26                         jmp     0x216 <_JIT_ENTRY+0x216>
// 1f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f2:  R_X86_64_64  .rodata.str1.1
// 1fa: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ff: 4c 89 ea                      movq    %r13, %rdx
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_NegativeRefcount
// 20c: ff d0                         callq   *%rax
// 20e: 49 8b 45 00                   movq    (%r13), %rax
// 212: 85 c0                         testl   %eax, %eax
// 214: 78 ba                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 220: ff d0                         callq   *%rax
// 222: 49 ff 4d 00                   decq    (%r13)
// 226: 75 a8                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 228: 4c 89 ef                      movq    %r13, %rdi
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_Dealloc
// 235: ff d0                         callq   *%rax
// 237: eb 97                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _JIT_OPARG
// 243: 0f b7 c0                      movzwl  %ax, %eax
// 246: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 24b: 29 c1                         subl    %eax, %ecx
// 24d: 48 63 c9                      movslq  %ecx, %rcx
// 250: f7 d0                         notl    %eax
// 252: 48 98                         cltq
// 254: 48 01 c8                      addq    %rcx, %rax
// 257: 4d 8b 2c c6                   movq    (%r14,%rax,8), %r13
// 25b: 4d 8b 7d 18                   movq    0x18(%r13), %r15
// 25f: 41 8b 07                      movl    (%r15), %eax
// 262: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000264:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 26c: ff c0                         incl    %eax
// 26e: 74 05                         je      0x275 <_JIT_ENTRY+0x275>
// 270: 41 89 07                      movl    %eax, (%r15)
// 273: ff d3                         callq   *%rbx
// 275: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000277:  R_X86_64_64  _JIT_OPARG
// 27f: f7 d0                         notl    %eax
// 281: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 286: 48 98                         cltq
// 288: 48 01 c0                      addq    %rax, %rax
// 28b: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 28f: 49 8b 6d 10                   movq    0x10(%r13), %rbp
// 293: 8b 45 00                      movl    (%rbp), %eax
// 296: ff c0                         incl    %eax
// 298: 74 05                         je      0x29f <_JIT_ENTRY+0x29f>
// 29a: 89 45 00                      movl    %eax, (%rbp)
// 29d: ff d3                         callq   *%rbx
// 29f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a1:  R_X86_64_64  _JIT_OPARG
// 2a9: 0f b7 c0                      movzwl  %ax, %eax
// 2ac: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 2b1: 29 c1                         subl    %eax, %ecx
// 2b3: 48 63 c9                      movslq  %ecx, %rcx
// 2b6: f7 d0                         notl    %eax
// 2b8: 48 98                         cltq
// 2ba: 48 01 c8                      addq    %rcx, %rax
// 2bd: 49 89 2c c6                   movq    %rbp, (%r14,%rax,8)
// 2c1: 49 8b 45 00                   movq    (%r13), %rax
// 2c5: 48 85 c0                      testq   %rax, %rax
// 2c8: 7f 22                         jg      0x2ec <_JIT_ENTRY+0x2ec>
// 2ca: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002cc:  R_X86_64_64  .rodata.str1.1
// 2d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d6:  R_X86_64_64  _Py_NegativeRefcount
// 2de: be 18 0a 00 00                movl    $0xa18, %esi            # imm = 0xA18
// 2e3: 4c 89 ea                      movq    %r13, %rdx
// 2e6: ff d0                         callq   *%rax
// 2e8: 49 8b 45 00                   movq    (%r13), %rax
// 2ec: 85 c0                         testl   %eax, %eax
// 2ee: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 2f3: 78 21                         js      0x316 <_JIT_ENTRY+0x316>
// 2f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2ff: ff d0                         callq   *%rax
// 301: 49 ff 4d 00                   decq    (%r13)
// 305: 75 0f                         jne     0x316 <_JIT_ENTRY+0x316>
// 307: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000309:  R_X86_64_64  _Py_Dealloc
// 311: 4c 89 ef                      movq    %r13, %rdi
// 314: ff d0                         callq   *%rax
// 316: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000318:  R_X86_64_64  _JIT_OPARG
// 320: 0f b7 c0                      movzwl  %ax, %eax
// 323: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 328: 29 c1                         subl    %eax, %ecx
// 32a: 48 63 c9                      movslq  %ecx, %rcx
// 32d: f7 d0                         notl    %eax
// 32f: 48 98                         cltq
// 331: 48 01 c1                      addq    %rax, %rcx
// 334: 49 89 2c ce                   movq    %rbp, (%r14,%rcx,8)
// 338: 48 01 c0                      addq    %rax, %rax
// 33b: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 33f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000341:  R_X86_64_64  _JIT_CONTINUE
// 349: 48 89 df                      movq    %rbx, %rdi
// 34c: 4c 89 e6                      movq    %r12, %rsi
// 34f: 48 8b 14 24                   movq    (%rsp), %rdx
// 353: 48 83 c4 28                   addq    $0x28, %rsp
// 357: 5b                            popq    %rbx
// 358: 41 5c                         popq    %r12
// 35a: 41 5d                         popq    %r13
// 35c: 41 5e                         popq    %r14
// 35e: 41 5f                         popq    %r15
// 360: 5d                            popq    %rbp
// 361: ff e0                         jmpq    *%rax
// 363: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS_code_body[868] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd6, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xde, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xce, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc6, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x70, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x20, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x14, 0x24, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xb6, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x4c, 0x8b, 0x3c, 0x24, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x04, 0xc6, 0x4d, 0x85, 0xed, 0x74, 0x35, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x4d, 0x8d, 0x24, 0xce, 0x4c, 0x89, 0x28, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xaf, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x98, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xf7, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xdd, 0x45, 0x31, 0xff, 0xeb, 0x11, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x49, 0xff, 0xc7, 0x4c, 0x39, 0xfb, 0x0f, 0x84, 0x27, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xfd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x4d, 0x8b, 0x2c, 0xc6, 0x4d, 0x8b, 0x7d, 0x18, 0x41, 0x8b, 0x07, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0x74, 0x05, 0x41, 0x89, 0x07, 0xff, 0xd3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x01, 0xc0, 0x4d, 0x89, 0x3c, 0xc6, 0x49, 0x8b, 0x6d, 0x10, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x05, 0x89, 0x45, 0x00, 0xff, 0xd3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x49, 0x89, 0x2c, 0xc6, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x18, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x01, 0xc1, 0x49, 0x89, 0x2c, 0xce, 0x48, 0x01, 0xc0, 0x4d, 0x89, 0x3c, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS_code_holes[24] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x277, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2a1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2cc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2d6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2f7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x309, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x318, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x341, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_INIT_CALL_PY_EXACT_ARGS
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_INIT_CALL_PY_EXACT_ARGS.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d6                   movq    (%r14,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 de                   movq    (%r14,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4b 8d 1c ce                   leaq    (%r14,%r9,8), %rbx
// 79: 48 8b 3b                      movq    (%rbx), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 4d 29 c6                      subq    %r8, %r14
// 8a: 49 83 c6 b8                   addq    $-0x48, %r14
// 8e: 49 c1 ee 03                   shrq    $0x3, %r14
// 92: 45 89 70 40                   movl    %r14d, 0x40(%r8)
// 96: 49 8b 00                      movq    (%r8), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 5c 24 18                movq    %r11, 0x18(%rsp)
// c3: 4c 89 54 24 20                movq    %r10, 0x20(%rsp)
// c8: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// cd: 4c 89 04 24                   movq    %r8, (%rsp)
// d1: 48 85 c0                      testq   %rax, %rax
// d4: 40 0f 94 c5                   sete    %bpl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 73 08                   leaq    0x8(%rbx), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 b6 00 00 00             je      0x1ba <_JIT_ENTRY+0x1ba>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 136: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// 13b: 78 21                         js      0x15e <_JIT_ENTRY+0x15e>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 147: ff d0                         callq   *%rax
// 149: 49 ff 0c 24                   decq    (%r12)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_Dealloc
// 159: 4c 89 e7                      movq    %r12, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 163: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 167: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 16c: 48 85 c9                      testq   %rcx, %rcx
// 16f: 74 30                         je      0x1a1 <_JIT_ENTRY+0x1a1>
// 171: 4f 8d 3c fe                   leaq    (%r14,%r15,8), %r15
// 175: 48 89 08                      movq    %rcx, (%rax)
// 178: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 17c: 48 8b 00                      movq    (%rax), %rax
// 17f: 84 c0                         testb   %al, %al
// 181: 0f 84 b2 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _Py_HandlePending
// 191: 48 89 df                      movq    %rbx, %rdi
// 194: ff d0                         callq   *%rax
// 196: 85 c0                         testl   %eax, %eax
// 198: 0f 84 9b 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 19e: 4c 89 f8                      movq    %r15, %rax
// 1a1: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1a5: 48 29 c8                      subq    %rcx, %rax
// 1a8: 48 83 c0 b8                   addq    $-0x48, %rax
// 1ac: 48 c1 e8 03                   shrq    $0x3, %rax
// 1b0: 89 41 40                      movl    %eax, 0x40(%rcx)
// 1b3: 31 c0                         xorl    %eax, %eax
// 1b5: e9 f5 fe ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 1ba: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1be: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1c4: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1c8: 31 ed                         xorl    %ebp, %ebp
// 1ca: eb 10                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1cc: 0f 1f 40 00                   nopl    (%rax)
// 1d0: 48 ff c5                      incq    %rbp
// 1d3: 49 39 ef                      cmpq    %rbp, %r15
// 1d6: 0f 84 28 ff ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 1dc: 4c 8b 2c eb                   movq    (%rbx,%rbp,8), %r13
// 1e0: 49 8b 45 00                   movq    (%r13), %rax
// 1e4: 48 85 c0                      testq   %rax, %rax
// 1e7: 7e 07                         jle     0x1f0 <_JIT_ENTRY+0x1f0>
// 1e9: 85 c0                         testl   %eax, %eax
// 1eb: 78 e3                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1ed: eb 27                         jmp     0x216 <_JIT_ENTRY+0x216>
// 1ef: 90                            nop
// 1f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f2:  R_X86_64_64  .rodata.str1.1
// 1fa: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ff: 4c 89 ea                      movq    %r13, %rdx
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_NegativeRefcount
// 20c: ff d0                         callq   *%rax
// 20e: 49 8b 45 00                   movq    (%r13), %rax
// 212: 85 c0                         testl   %eax, %eax
// 214: 78 ba                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 220: ff d0                         callq   *%rax
// 222: 49 ff 4d 00                   decq    (%r13)
// 226: 75 a8                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 228: 4c 89 ef                      movq    %r13, %rdi
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_Dealloc
// 235: ff d0                         callq   *%rax
// 237: eb 97                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _JIT_OPARG
// 243: 0f b7 c0                      movzwl  %ax, %eax
// 246: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 24b: 29 c1                         subl    %eax, %ecx
// 24d: f7 d0                         notl    %eax
// 24f: 48 63 d0                      movslq  %eax, %rdx
// 252: 48 63 c1                      movslq  %ecx, %rax
// 255: 48 01 d0                      addq    %rdx, %rax
// 258: 48 01 d2                      addq    %rdx, %rdx
// 25b: 48 89 de                      movq    %rbx, %rsi
// 25e: 49 8b 2c c6                   movq    (%r14,%rax,8), %rbp
// 262: 49 8b 0c d6                   movq    (%r14,%rdx,8), %rcx
// 266: 48 8b 5d 30                   movq    0x30(%rbp), %rbx
// 26a: 4c 8b ae 00 01 00 00          movq    0x100(%rsi), %r13
// 271: 48 63 43 4c                   movslq  0x4c(%rbx), %rax
// 275: 49 8d 44 c5 00                leaq    (%r13,%rax,8), %rax
// 27a: 48 89 86 00 01 00 00          movq    %rax, 0x100(%rsi)
// 281: 49 89 6d 10                   movq    %rbp, 0x10(%r13)
// 285: 8b 03                         movl    (%rbx), %eax
// 287: ff c0                         incl    %eax
// 289: 4d 8d 24 d6                   leaq    (%r14,%rdx,8), %r12
// 28d: 48 85 c9                      testq   %rcx, %rcx
// 290: 0f 84 c2 00 00 00             je      0x358 <_JIT_ENTRY+0x358>
// 296: 85 c0                         testl   %eax, %eax
// 298: 74 0e                         je      0x2a8 <_JIT_ENTRY+0x2a8>
// 29a: 89 03                         movl    %eax, (%rbx)
// 29c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029e:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 2a6: ff d0                         callq   *%rax
// 2a8: 49 89 5d 00                   movq    %rbx, (%r13)
// 2ac: 0f 10 45 10                   movups  0x10(%rbp), %xmm0
// 2b0: 41 0f 11 45 18                movups  %xmm0, 0x18(%r13)
// 2b5: 49 c7 45 28 00 00 00 00       movq    $0x0, 0x28(%r13)
// 2bd: 8b 4b 48                      movl    0x48(%rbx), %ecx
// 2c0: 41 89 4d 40                   movl    %ecx, 0x40(%r13)
// 2c4: 49 c7 45 30 00 00 00 00       movq    $0x0, 0x30(%r13)
// 2cc: 48 81 c3 c8 00 00 00          addq    $0xc8, %rbx
// 2d3: 49 89 5d 38                   movq    %rbx, 0x38(%r13)
// 2d7: 66 41 c7 45 44 00 00          movw    $0x0, 0x44(%r13)
// 2de: 41 c6 45 46 00                movb    $0x0, 0x46(%r13)
// 2e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e5:  R_X86_64_64  _JIT_OPARG
// 2ed: 0f b7 e8                      movzwl  %ax, %ebp
// 2f0: ff c5                         incl    %ebp
// 2f2: 85 ed                         testl   %ebp, %ebp
// 2f4: 0f 9f c2                      setg    %dl
// 2f7: 39 e9                         cmpl    %ebp, %ecx
// 2f9: 0f 8e 00 01 00 00             jle     0x3ff <_JIT_ENTRY+0x3ff>
// 2ff: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000301:  R_X86_64_64  _JIT_OPARG
// 309: 41 0f b7 df                   movzwl  %r15w, %ebx
// 30d: 8d 6b 01                      leal    0x1(%rbx), %ebp
// 310: 48 8d 3c ed 48 00 00 00       leaq    0x48(,%rbp,8), %rdi
// 318: 4c 01 ef                      addq    %r13, %rdi
// 31b: 89 e8                         movl    %ebp, %eax
// 31d: f7 d0                         notl    %eax
// 31f: 01 c1                         addl    %eax, %ecx
// 321: 48 8d 14 cd 08 00 00 00       leaq    0x8(,%rcx,8), %rdx
// 329: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032b:  R_X86_64_64  memset
// 333: 31 f6                         xorl    %esi, %esi
// 335: ff d0                         callq   *%rax
// 337: 85 ed                         testl   %ebp, %ebp
// 339: 0f 8e 8b 01 00 00             jle     0x4ca <_JIT_ENTRY+0x4ca>
// 33f: 41 0f b7 c7                   movzwl  %r15w, %eax
// 343: f7 d3                         notl    %ebx
// 345: 48 63 cb                      movslq  %ebx, %rcx
// 348: 48 29 c1                      subq    %rax, %rcx
// 34b: 49 8d 04 ce                   leaq    (%r14,%rcx,8), %rax
// 34f: 48 83 c0 f8                   addq    $-0x8, %rax
// 353: e9 c4 00 00 00                jmp     0x41c <_JIT_ENTRY+0x41c>
// 358: 85 c0                         testl   %eax, %eax
// 35a: 74 0e                         je      0x36a <_JIT_ENTRY+0x36a>
// 35c: 89 03                         movl    %eax, (%rbx)
// 35e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000360:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 368: ff d0                         callq   *%rax
// 36a: 49 89 5d 00                   movq    %rbx, (%r13)
// 36e: 0f 10 45 10                   movups  0x10(%rbp), %xmm0
// 372: 41 0f 11 45 18                movups  %xmm0, 0x18(%r13)
// 377: 49 c7 45 28 00 00 00 00       movq    $0x0, 0x28(%r13)
// 37f: 8b 43 48                      movl    0x48(%rbx), %eax
// 382: 41 89 45 40                   movl    %eax, 0x40(%r13)
// 386: 49 c7 45 30 00 00 00 00       movq    $0x0, 0x30(%r13)
// 38e: 48 81 c3 c8 00 00 00          addq    $0xc8, %rbx
// 395: 49 89 5d 38                   movq    %rbx, 0x38(%r13)
// 399: 66 41 c7 45 44 00 00          movw    $0x0, 0x44(%r13)
// 3a0: 41 c6 45 46 00                movb    $0x0, 0x46(%r13)
// 3a5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000003a7:  R_X86_64_64  _JIT_OPARG
// 3af: 0f b7 e9                      movzwl  %cx, %ebp
// 3b2: 85 ed                         testl   %ebp, %ebp
// 3b4: 0f 9f c2                      setg    %dl
// 3b7: 39 e8                         cmpl    %ebp, %eax
// 3b9: 7e 4e                         jle     0x409 <_JIT_ENTRY+0x409>
// 3bb: 0f b7 d9                      movzwl  %cx, %ebx
// 3be: 48 8d 3c dd 48 00 00 00       leaq    0x48(,%rbx,8), %rdi
// 3c6: 4c 01 ef                      addq    %r13, %rdi
// 3c9: 0f b7 e9                      movzwl  %cx, %ebp
// 3cc: 41 89 ef                      movl    %ebp, %r15d
// 3cf: 41 f7 d7                      notl    %r15d
// 3d2: 44 01 f8                      addl    %r15d, %eax
// 3d5: 48 8d 14 c5 08 00 00 00       leaq    0x8(,%rax,8), %rdx
// 3dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003df:  R_X86_64_64  memset
// 3e7: 31 f6                         xorl    %esi, %esi
// 3e9: ff d0                         callq   *%rax
// 3eb: 85 ed                         testl   %ebp, %ebp
// 3ed: 0f 8e d7 00 00 00             jle     0x4ca <_JIT_ENTRY+0x4ca>
// 3f3: 49 63 c7                      movslq  %r15d, %rax
// 3f6: 48 29 d8                      subq    %rbx, %rax
// 3f9: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 3fd: eb 1d                         jmp     0x41c <_JIT_ENTRY+0x41c>
// 3ff: f7 d0                         notl    %eax
// 401: 48 0d 00 00 ff ff             orq     $-0x10000, %rax         # imm = 0xFFFF0000
// 407: eb 06                         jmp     0x40f <_JIT_ENTRY+0x40f>
// 409: 0f b7 c1                      movzwl  %cx, %eax
// 40c: 48 f7 d8                      negq    %rax
// 40f: f6 c2 01                      testb   $0x1, %dl
// 412: 0f 84 b2 00 00 00             je      0x4ca <_JIT_ENTRY+0x4ca>
// 418: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 41c: 83 fd 02                      cmpl    $0x2, %ebp
// 41f: b9 01 00 00 00                movl    $0x1, %ecx
// 424: 0f 4d cd                      cmovgel %ebp, %ecx
// 427: 83 f9 08                      cmpl    $0x8, %ecx
// 42a: 72 10                         jb      0x43c <_JIT_ENTRY+0x43c>
// 42c: 4c 89 ea                      movq    %r13, %rdx
// 42f: 48 29 c2                      subq    %rax, %rdx
// 432: 48 83 c2 48                   addq    $0x48, %rdx
// 436: 48 83 fa 20                   cmpq    $0x20, %rdx
// 43a: 73 5d                         jae     0x499 <_JIT_ENTRY+0x499>
// 43c: 31 d2                         xorl    %edx, %edx
// 43e: 48 89 d6                      movq    %rdx, %rsi
// 441: 48 f7 d6                      notq    %rsi
// 444: 48 01 ce                      addq    %rcx, %rsi
// 447: 48 89 cf                      movq    %rcx, %rdi
// 44a: 48 83 e7 03                   andq    $0x3, %rdi
// 44e: 74 11                         je      0x461 <_JIT_ENTRY+0x461>
// 450: 4c 8b 04 d0                   movq    (%rax,%rdx,8), %r8
// 454: 4d 89 44 d5 48                movq    %r8, 0x48(%r13,%rdx,8)
// 459: 48 ff c2                      incq    %rdx
// 45c: 48 ff cf                      decq    %rdi
// 45f: 75 ef                         jne     0x450 <_JIT_ENTRY+0x450>
// 461: 48 83 fe 03                   cmpq    $0x3, %rsi
// 465: 72 63                         jb      0x4ca <_JIT_ENTRY+0x4ca>
// 467: 48 8b 34 d0                   movq    (%rax,%rdx,8), %rsi
// 46b: 49 89 74 d5 48                movq    %rsi, 0x48(%r13,%rdx,8)
// 470: 48 8b 74 d0 08                movq    0x8(%rax,%rdx,8), %rsi
// 475: 49 89 74 d5 50                movq    %rsi, 0x50(%r13,%rdx,8)
// 47a: 48 8b 74 d0 10                movq    0x10(%rax,%rdx,8), %rsi
// 47f: 49 89 74 d5 58                movq    %rsi, 0x58(%r13,%rdx,8)
// 484: 48 8b 74 d0 18                movq    0x18(%rax,%rdx,8), %rsi
// 489: 49 89 74 d5 60                movq    %rsi, 0x60(%r13,%rdx,8)
// 48e: 48 83 c2 04                   addq    $0x4, %rdx
// 492: 48 39 d1                      cmpq    %rdx, %rcx
// 495: 75 d0                         jne     0x467 <_JIT_ENTRY+0x467>
// 497: eb 31                         jmp     0x4ca <_JIT_ENTRY+0x4ca>
// 499: 89 ca                         movl    %ecx, %edx
// 49b: 81 e2 fc ff ff 7f             andl    $0x7ffffffc, %edx       # imm = 0x7FFFFFFC
// 4a1: 31 f6                         xorl    %esi, %esi
// 4a3: 0f 10 04 f0                   movups  (%rax,%rsi,8), %xmm0
// 4a7: 0f 10 4c f0 10                movups  0x10(%rax,%rsi,8), %xmm1
// 4ac: 41 0f 11 44 f5 48             movups  %xmm0, 0x48(%r13,%rsi,8)
// 4b2: 41 0f 11 4c f5 58             movups  %xmm1, 0x58(%r13,%rsi,8)
// 4b8: 48 83 c6 04                   addq    $0x4, %rsi
// 4bc: 48 39 f2                      cmpq    %rsi, %rdx
// 4bf: 75 e2                         jne     0x4a3 <_JIT_ENTRY+0x4a3>
// 4c1: 48 39 ca                      cmpq    %rcx, %rdx
// 4c4: 0f 85 74 ff ff ff             jne     0x43e <_JIT_ENTRY+0x43e>
// 4ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000004cc:  R_X86_64_64  _JIT_OPARG
// 4d4: 0f b7 c0                      movzwl  %ax, %eax
// 4d7: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 4dc: 29 c1                         subl    %eax, %ecx
// 4de: 48 63 c9                      movslq  %ecx, %rcx
// 4e1: f7 d0                         notl    %eax
// 4e3: 48 98                         cltq
// 4e5: 48 01 c8                      addq    %rcx, %rax
// 4e8: 4d 89 2c c6                   movq    %r13, (%r14,%rax,8)
// 4ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000004ee:  R_X86_64_64  _JIT_CONTINUE
// 4f6: 48 8b 3c 24                   movq    (%rsp), %rdi
// 4fa: 4c 89 e6                      movq    %r12, %rsi
// 4fd: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 502: 48 83 c4 28                   addq    $0x28, %rsp
// 506: 5b                            popq    %rbx
// 507: 41 5c                         popq    %r12
// 509: 41 5d                         popq    %r13
// 50b: 41 5e                         popq    %r14
// 50d: 41 5f                         popq    %r15
// 50f: 5d                            popq    %rbp
// 510: ff e0                         jmpq    *%rax
// 512: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_INIT_CALL_PY_EXACT_ARGS_code_body[1299] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd6, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xde, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4b, 0x8d, 0x1c, 0xce, 0x48, 0x8b, 0x3b, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc6, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x70, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x18, 0x4c, 0x89, 0x54, 0x24, 0x20, 0x48, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x73, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xb6, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x30, 0x4f, 0x8d, 0x3c, 0xfe, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xb2, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x9b, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf8, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x29, 0xc8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x41, 0x40, 0x31, 0xc0, 0xe9, 0xf5, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xed, 0xeb, 0x10, 0x0f, 0x1f, 0x40, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xef, 0x0f, 0x84, 0x28, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x2c, 0xeb, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x27, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0xf7, 0xd0, 0x48, 0x63, 0xd0, 0x48, 0x63, 0xc1, 0x48, 0x01, 0xd0, 0x48, 0x01, 0xd2, 0x48, 0x89, 0xde, 0x49, 0x8b, 0x2c, 0xc6, 0x49, 0x8b, 0x0c, 0xd6, 0x48, 0x8b, 0x5d, 0x30, 0x4c, 0x8b, 0xae, 0x00, 0x01, 0x00, 0x00, 0x48, 0x63, 0x43, 0x4c, 0x49, 0x8d, 0x44, 0xc5, 0x00, 0x48, 0x89, 0x86, 0x00, 0x01, 0x00, 0x00, 0x49, 0x89, 0x6d, 0x10, 0x8b, 0x03, 0xff, 0xc0, 0x4d, 0x8d, 0x24, 0xd6, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xc2, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x74, 0x0e, 0x89, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x89, 0x5d, 0x00, 0x0f, 0x10, 0x45, 0x10, 0x41, 0x0f, 0x11, 0x45, 0x18, 0x49, 0xc7, 0x45, 0x28, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x4b, 0x48, 0x41, 0x89, 0x4d, 0x40, 0x49, 0xc7, 0x45, 0x30, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc3, 0xc8, 0x00, 0x00, 0x00, 0x49, 0x89, 0x5d, 0x38, 0x66, 0x41, 0xc7, 0x45, 0x44, 0x00, 0x00, 0x41, 0xc6, 0x45, 0x46, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0xff, 0xc5, 0x85, 0xed, 0x0f, 0x9f, 0xc2, 0x39, 0xe9, 0x0f, 0x8e, 0x00, 0x01, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x0f, 0xb7, 0xdf, 0x8d, 0x6b, 0x01, 0x48, 0x8d, 0x3c, 0xed, 0x48, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xef, 0x89, 0xe8, 0xf7, 0xd0, 0x01, 0xc1, 0x48, 0x8d, 0x14, 0xcd, 0x08, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xf6, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x8e, 0x8b, 0x01, 0x00, 0x00, 0x41, 0x0f, 0xb7, 0xc7, 0xf7, 0xd3, 0x48, 0x63, 0xcb, 0x48, 0x29, 0xc1, 0x49, 0x8d, 0x04, 0xce, 0x48, 0x83, 0xc0, 0xf8, 0xe9, 0xc4, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x74, 0x0e, 0x89, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x89, 0x5d, 0x00, 0x0f, 0x10, 0x45, 0x10, 0x41, 0x0f, 0x11, 0x45, 0x18, 0x49, 0xc7, 0x45, 0x28, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x43, 0x48, 0x41, 0x89, 0x45, 0x40, 0x49, 0xc7, 0x45, 0x30, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc3, 0xc8, 0x00, 0x00, 0x00, 0x49, 0x89, 0x5d, 0x38, 0x66, 0x41, 0xc7, 0x45, 0x44, 0x00, 0x00, 0x41, 0xc6, 0x45, 0x46, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe9, 0x85, 0xed, 0x0f, 0x9f, 0xc2, 0x39, 0xe8, 0x7e, 0x4e, 0x0f, 0xb7, 0xd9, 0x48, 0x8d, 0x3c, 0xdd, 0x48, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xef, 0x0f, 0xb7, 0xe9, 0x41, 0x89, 0xef, 0x41, 0xf7, 0xd7, 0x44, 0x01, 0xf8, 0x48, 0x8d, 0x14, 0xc5, 0x08, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xf6, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x8e, 0xd7, 0x00, 0x00, 0x00, 0x49, 0x63, 0xc7, 0x48, 0x29, 0xd8, 0x49, 0x8d, 0x04, 0xc6, 0xeb, 0x1d, 0xf7, 0xd0, 0x48, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xeb, 0x06, 0x0f, 0xb7, 0xc1, 0x48, 0xf7, 0xd8, 0xf6, 0xc2, 0x01, 0x0f, 0x84, 0xb2, 0x00, 0x00, 0x00, 0x49, 0x8d, 0x04, 0xc7, 0x83, 0xfd, 0x02, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x4d, 0xcd, 0x83, 0xf9, 0x08, 0x72, 0x10, 0x4c, 0x89, 0xea, 0x48, 0x29, 0xc2, 0x48, 0x83, 0xc2, 0x48, 0x48, 0x83, 0xfa, 0x20, 0x73, 0x5d, 0x31, 0xd2, 0x48, 0x89, 0xd6, 0x48, 0xf7, 0xd6, 0x48, 0x01, 0xce, 0x48, 0x89, 0xcf, 0x48, 0x83, 0xe7, 0x03, 0x74, 0x11, 0x4c, 0x8b, 0x04, 0xd0, 0x4d, 0x89, 0x44, 0xd5, 0x48, 0x48, 0xff, 0xc2, 0x48, 0xff, 0xcf, 0x75, 0xef, 0x48, 0x83, 0xfe, 0x03, 0x72, 0x63, 0x48, 0x8b, 0x34, 0xd0, 0x49, 0x89, 0x74, 0xd5, 0x48, 0x48, 0x8b, 0x74, 0xd0, 0x08, 0x49, 0x89, 0x74, 0xd5, 0x50, 0x48, 0x8b, 0x74, 0xd0, 0x10, 0x49, 0x89, 0x74, 0xd5, 0x58, 0x48, 0x8b, 0x74, 0xd0, 0x18, 0x49, 0x89, 0x74, 0xd5, 0x60, 0x48, 0x83, 0xc2, 0x04, 0x48, 0x39, 0xd1, 0x75, 0xd0, 0xeb, 0x31, 0x89, 0xca, 0x81, 0xe2, 0xfc, 0xff, 0xff, 0x7f, 0x31, 0xf6, 0x0f, 0x10, 0x04, 0xf0, 0x0f, 0x10, 0x4c, 0xf0, 0x10, 0x41, 0x0f, 0x11, 0x44, 0xf5, 0x48, 0x41, 0x0f, 0x11, 0x4c, 0xf5, 0x58, 0x48, 0x83, 0xc6, 0x04, 0x48, 0x39, 0xf2, 0x75, 0xe2, 0x48, 0x39, 0xca, 0x0f, 0x85, 0x74, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x4d, 0x89, 0x2c, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_INIT_CALL_PY_EXACT_ARGS_code_holes[24] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x29e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x2e5, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x301, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x32b, HoleKind_R_X86_64_64, HoleValue_ZERO, &memset, 0x0},
    {0x360, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x3a7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3df, HoleKind_R_X86_64_64, HoleValue_ZERO, &memset, 0x0},
    {0x4cc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4ee, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_INIT_CALL_PY_EXACT_ARGS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_INIT_CALL_PY_EXACT_ARGS_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_INSERT
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_INSERT.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4f 8d 04 c6                   leaq    (%r14,%r8,8), %r8
// 79: 49 8b 38                      movq    (%r8), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 49 29 de                      subq    %rbx, %r14
// 8a: 49 83 c6 b8                   addq    $-0x48, %r14
// 8e: 49 c1 ee 03                   shrq    $0x3, %r14
// 92: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 96: 48 8b 03                      movq    (%rbx), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c3: 4c 89 0c 24                   movq    %r9, (%rsp)
// c7: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cc: 48 85 c0                      testq   %rax, %rax
// cf: 40 0f 94 c5                   sete    %bpl
// d3: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// d7: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// dc: 49 8d 70 08                   leaq    0x8(%r8), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 b1 00 00 00             je      0x1b5 <_JIT_ENTRY+0x1b5>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 48 8b 6c 24 18                movq    0x18(%rsp), %rbp
// 136: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 13b: 78 21                         js      0x15e <_JIT_ENTRY+0x15e>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 147: ff d0                         callq   *%rax
// 149: 49 ff 0c 24                   decq    (%r12)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_Dealloc
// 159: 4c 89 e7                      movq    %r12, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 162: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 167: 48 85 d2                      testq   %rdx, %rdx
// 16a: 74 34                         je      0x1a0 <_JIT_ENTRY+0x1a0>
// 16c: 48 8b 0c 24                   movq    (%rsp), %rcx
// 170: 4d 8d 24 ce                   leaq    (%r14,%rcx,8), %r12
// 174: 48 89 10                      movq    %rdx, (%rax)
// 177: 48 8b 45 10                   movq    0x10(%rbp), %rax
// 17b: 48 8b 00                      movq    (%rax), %rax
// 17e: 84 c0                         testb   %al, %al
// 180: 0f 84 c3 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 186: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000188:  R_X86_64_64  _Py_HandlePending
// 190: 48 89 ef                      movq    %rbp, %rdi
// 193: ff d0                         callq   *%rax
// 195: 85 c0                         testl   %eax, %eax
// 197: 0f 84 ac 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 19d: 4c 89 e0                      movq    %r12, %rax
// 1a0: 48 29 d8                      subq    %rbx, %rax
// 1a3: 48 83 c0 b8                   addq    $-0x48, %rax
// 1a7: 48 c1 e8 03                   shrq    $0x3, %rax
// 1ab: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1ae: 31 c0                         xorl    %eax, %eax
// 1b0: e9 fa fe ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 1b5: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1b9: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1bf: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1c3: 31 ed                         xorl    %ebp, %ebp
// 1c5: eb 15                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c7: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 1d0: 48 ff c5                      incq    %rbp
// 1d3: 49 39 ef                      cmpq    %rbp, %r15
// 1d6: 0f 84 28 ff ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 1dc: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 1e1: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 1e5: 49 8b 45 00                   movq    (%r13), %rax
// 1e9: 48 85 c0                      testq   %rax, %rax
// 1ec: 7e 12                         jle     0x200 <_JIT_ENTRY+0x200>
// 1ee: 85 c0                         testl   %eax, %eax
// 1f0: 78 de                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1f2: eb 32                         jmp     0x226 <_JIT_ENTRY+0x226>
// 1f4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 200: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1
// 20a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 20f: 4c 89 ea                      movq    %r13, %rdx
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: ff d0                         callq   *%rax
// 21e: 49 8b 45 00                   movq    (%r13), %rax
// 222: 85 c0                         testl   %eax, %eax
// 224: 78 aa                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 230: ff d0                         callq   *%rax
// 232: 49 ff 4d 00                   decq    (%r13)
// 236: 75 98                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: ff d0                         callq   *%rax
// 247: eb 87                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _JIT_OPARG
// 253: 0f b7 d0                      movzwl  %ax, %edx
// 256: f7 d0                         notl    %eax
// 258: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 25d: 48 98                         cltq
// 25f: 4d 8b 7c c6 f8                movq    -0x8(%r14,%rax,8), %r15
// 264: 4c 8d 2c 00                   leaq    (%rax,%rax), %r13
// 268: 4b 8d 3c ee                   leaq    (%r14,%r13,8), %rdi
// 26c: 48 29 d0                      subq    %rdx, %rax
// 26f: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 273: 48 c1 e2 03                   shlq    $0x3, %rdx
// 277: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000279:  R_X86_64_64  memmove
// 281: ff d0                         callq   *%rax
// 283: 4f 89 3c ee                   movq    %r15, (%r14,%r13,8)
// 287: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000289:  R_X86_64_64  _JIT_CONTINUE
// 291: 48 89 df                      movq    %rbx, %rdi
// 294: 4c 89 e6                      movq    %r12, %rsi
// 297: 48 89 ea                      movq    %rbp, %rdx
// 29a: 48 83 c4 28                   addq    $0x28, %rsp
// 29e: 5b                            popq    %rbx
// 29f: 41 5c                         popq    %r12
// 2a1: 41 5d                         popq    %r13
// 2a3: 41 5e                         popq    %r14
// 2a5: 41 5f                         popq    %r15
// 2a7: 5d                            popq    %rbp
// 2a8: ff e0                         jmpq    *%rax
// 2aa: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_INSERT_code_body[683] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xce, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4f, 0x8d, 0x04, 0xc6, 0x49, 0x8b, 0x38, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x70, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xb1, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x18, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x74, 0x34, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x24, 0xce, 0x48, 0x89, 0x10, 0x48, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xac, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xfa, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xed, 0xeb, 0x15, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xef, 0x0f, 0x84, 0x28, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x7c, 0xc6, 0xf8, 0x4c, 0x8d, 0x2c, 0x00, 0x4b, 0x8d, 0x3c, 0xee, 0x48, 0x29, 0xd0, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xc1, 0xe2, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4f, 0x89, 0x3c, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_INSERT_code_holes[17] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x279, HoleKind_R_X86_64_64, HoleValue_ZERO, &memmove, 0x0},
    {0x289, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_INSERT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_INSERT_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_IS_NONE
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_IS_NONE.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d6                   movq    (%r14,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 de                   movq    (%r14,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c ce                   leaq    (%r14,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 c6                      subq    %r8, %r14
// 8b: 49 83 c6 b8                   addq    $-0x48, %r14
// 8f: 49 c1 ee 03                   shrq    $0x3, %r14
// 93: 45 89 70 40                   movl    %r14d, 0x40(%r8)
// 97: 49 8b 00                      movq    (%r8), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 5c 24 18                movq    %r11, 0x18(%rsp)
// c4: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// c9: 48 89 14 24                   movq    %rdx, (%rsp)
// cd: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 b7 00 00 00             je      0x1ba <_JIT_ENTRY+0x1ba>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 1c 24                   movq    (%rsp), %rbx
// 134: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 139: 78 21                         js      0x15c <_JIT_ENTRY+0x15c>
// 13b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 145: ff d0                         callq   *%rax
// 147: 49 ff 0c 24                   decq    (%r12)
// 14b: 75 0f                         jne     0x15c <_JIT_ENTRY+0x15c>
// 14d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014f:  R_X86_64_64  _Py_Dealloc
// 157: 4c 89 e7                      movq    %r12, %rdi
// 15a: ff d0                         callq   *%rax
// 15c: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 161: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 165: 4d 85 ed                      testq   %r13, %r13
// 168: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// 16d: 74 35                         je      0x1a4 <_JIT_ENTRY+0x1a4>
// 16f: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 174: 4d 8d 24 ce                   leaq    (%r14,%rcx,8), %r12
// 178: 4c 89 28                      movq    %r13, (%rax)
// 17b: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 17f: 48 8b 00                      movq    (%rax), %rax
// 182: 84 c0                         testb   %al, %al
// 184: 0f 84 af 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 18a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018c:  R_X86_64_64  _Py_HandlePending
// 194: 48 89 df                      movq    %rbx, %rdi
// 197: ff d0                         callq   *%rax
// 199: 85 c0                         testl   %eax, %eax
// 19b: 0f 84 98 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 1a1: 4c 89 e0                      movq    %r12, %rax
// 1a4: 4c 29 f8                      subq    %r15, %rax
// 1a7: 48 83 c0 b8                   addq    $-0x48, %rax
// 1ab: 48 c1 e8 03                   shrq    $0x3, %rax
// 1af: 41 89 47 40                   movl    %eax, 0x40(%r15)
// 1b3: 31 c0                         xorl    %eax, %eax
// 1b5: e9 f6 fe ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 1ba: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1be: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1c4: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1c8: 31 db                         xorl    %ebx, %ebx
// 1ca: eb 10                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1cc: 0f 1f 40 00                   nopl    (%rax)
// 1d0: 48 ff c3                      incq    %rbx
// 1d3: 49 39 df                      cmpq    %rbx, %r15
// 1d6: 0f 84 27 ff ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 1dc: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1e1: 49 8b 45 00                   movq    (%r13), %rax
// 1e5: 48 85 c0                      testq   %rax, %rax
// 1e8: 7e 06                         jle     0x1f0 <_JIT_ENTRY+0x1f0>
// 1ea: 85 c0                         testl   %eax, %eax
// 1ec: 78 e2                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1ee: eb 26                         jmp     0x216 <_JIT_ENTRY+0x216>
// 1f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f2:  R_X86_64_64  .rodata.str1.1
// 1fa: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ff: 4c 89 ea                      movq    %r13, %rdx
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_NegativeRefcount
// 20c: ff d0                         callq   *%rax
// 20e: 49 8b 45 00                   movq    (%r13), %rax
// 212: 85 c0                         testl   %eax, %eax
// 214: 78 ba                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 220: ff d0                         callq   *%rax
// 222: 49 ff 4d 00                   decq    (%r13)
// 226: 75 a8                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 228: 4c 89 ef                      movq    %r13, %rdi
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_Dealloc
// 235: ff d0                         callq   *%rax
// 237: eb 97                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _JIT_OPARG
// 243: f7 d0                         notl    %eax
// 245: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 24a: 48 98                         cltq
// 24c: 4d 8b 6c c6 f8                movq    -0x8(%r14,%rax,8), %r13
// 251: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000253:  R_X86_64_64  _Py_NoneStruct
// 25b: 49 39 c5                      cmpq    %rax, %r13
// 25e: 74 5c                         je      0x2bc <_JIT_ENTRY+0x2bc>
// 260: 49 8b 45 00                   movq    (%r13), %rax
// 264: 48 85 c0                      testq   %rax, %rax
// 267: 7f 22                         jg      0x28b <_JIT_ENTRY+0x28b>
// 269: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000026b:  R_X86_64_64  .rodata.str1.1
// 273: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000275:  R_X86_64_64  _Py_NegativeRefcount
// 27d: be ef 07 00 00                movl    $0x7ef, %esi            # imm = 0x7EF
// 282: 4c 89 ea                      movq    %r13, %rdx
// 285: ff d0                         callq   *%rax
// 287: 49 8b 45 00                   movq    (%r13), %rax
// 28b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000028d:  R_X86_64_64  _Py_FalseStruct
// 295: 85 c0                         testl   %eax, %eax
// 297: 78 2d                         js      0x2c6 <_JIT_ENTRY+0x2c6>
// 299: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a3: ff d0                         callq   *%rax
// 2a5: 49 ff 4d 00                   decq    (%r13)
// 2a9: 75 1b                         jne     0x2c6 <_JIT_ENTRY+0x2c6>
// 2ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ad:  R_X86_64_64  _Py_Dealloc
// 2b5: 4c 89 ef                      movq    %r13, %rdi
// 2b8: ff d0                         callq   *%rax
// 2ba: eb 0a                         jmp     0x2c6 <_JIT_ENTRY+0x2c6>
// 2bc: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000002be:  R_X86_64_64  _Py_TrueStruct
// 2c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c8:  R_X86_64_64  _JIT_OPARG
// 2d0: f7 d0                         notl    %eax
// 2d2: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 2d7: 48 98                         cltq
// 2d9: 49 89 5c c6 f8                movq    %rbx, -0x8(%r14,%rax,8)
// 2de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e0:  R_X86_64_64  _JIT_CONTINUE
// 2e8: 4c 89 ff                      movq    %r15, %rdi
// 2eb: 4c 89 e6                      movq    %r12, %rsi
// 2ee: 48 8b 14 24                   movq    (%rsp), %rdx
// 2f2: 48 83 c4 28                   addq    $0x28, %rsp
// 2f6: 5b                            popq    %rbx
// 2f7: 41 5c                         popq    %r12
// 2f9: 41 5d                         popq    %r13
// 2fb: 41 5e                         popq    %r14
// 2fd: 41 5f                         popq    %r15
// 2ff: 5d                            popq    %rbp
// 300: ff e0                         jmpq    *%rax
// 302: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_IS_NONE_code_body[771] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd6, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xde, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xce, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc6, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x70, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x18, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x14, 0x24, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xb7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x04, 0xc6, 0x4d, 0x85, 0xed, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x74, 0x35, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x4d, 0x8d, 0x24, 0xce, 0x4c, 0x89, 0x28, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xaf, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x98, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0x4c, 0x29, 0xf8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x47, 0x40, 0x31, 0xc0, 0xe9, 0xf6, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xdb, 0xeb, 0x10, 0x0f, 0x1f, 0x40, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0x27, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x6c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0xc5, 0x74, 0x5c, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xef, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x2d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x1b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0xeb, 0x0a, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x5c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_IS_NONE_code_holes[24] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x26b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x275, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x28d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x29b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2be, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x2c8, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2e0, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_IS_NONE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_IS_NONE_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_IS_OP
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_IS_OP.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d6                   movq    (%r14,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 de                   movq    (%r14,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c ce                   leaq    (%r14,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 c6                      subq    %r8, %r14
// 8b: 49 83 c6 b8                   addq    $-0x48, %r14
// 8f: 49 c1 ee 03                   shrq    $0x3, %r14
// 93: 45 89 70 40                   movl    %r14d, 0x40(%r8)
// 97: 49 8b 00                      movq    (%r8), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 5c 24 18                movq    %r11, 0x18(%rsp)
// c4: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// c9: 48 89 14 24                   movq    %rdx, (%rsp)
// cd: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 b3 00 00 00             je      0x1b6 <_JIT_ENTRY+0x1b6>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 135: 4c 8b 3c 24                   movq    (%rsp), %r15
// 139: 78 21                         js      0x15c <_JIT_ENTRY+0x15c>
// 13b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 145: ff d0                         callq   *%rax
// 147: 49 ff 0c 24                   decq    (%r12)
// 14b: 75 0f                         jne     0x15c <_JIT_ENTRY+0x15c>
// 14d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014f:  R_X86_64_64  _Py_Dealloc
// 157: 4c 89 e7                      movq    %r12, %rdi
// 15a: ff d0                         callq   *%rax
// 15c: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 161: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 165: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 16a: 48 85 c9                      testq   %rcx, %rcx
// 16d: 74 32                         je      0x1a1 <_JIT_ENTRY+0x1a1>
// 16f: 48 89 08                      movq    %rcx, (%rax)
// 172: 49 8b 47 10                   movq    0x10(%r15), %rax
// 176: 48 8b 00                      movq    (%rax), %rax
// 179: 84 c0                         testb   %al, %al
// 17b: 0f 84 b8 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  _Py_HandlePending
// 18b: 4c 89 ff                      movq    %r15, %rdi
// 18e: ff d0                         callq   *%rax
// 190: 85 c0                         testl   %eax, %eax
// 192: 0f 84 a1 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 198: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 19d: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 1a1: 48 29 d8                      subq    %rbx, %rax
// 1a4: 48 83 c0 b8                   addq    $-0x48, %rax
// 1a8: 48 c1 e8 03                   shrq    $0x3, %rax
// 1ac: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1af: 31 c0                         xorl    %eax, %eax
// 1b1: e9 fa fe ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 1b6: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1ba: bb 01 00 00 00                movl    $0x1, %ebx
// 1bf: 41 0f 43 dd                   cmovael %r13d, %ebx
// 1c3: 45 31 ff                      xorl    %r15d, %r15d
// 1c6: eb 14                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c8: 0f 1f 84 00 00 00 00 00       nopl    (%rax,%rax)
// 1d0: 49 ff c7                      incq    %r15
// 1d3: 4c 39 fb                      cmpq    %r15, %rbx
// 1d6: 0f 84 27 ff ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 1dc: 4e 8b 6c fd 00                movq    (%rbp,%r15,8), %r13
// 1e1: 49 8b 45 00                   movq    (%r13), %rax
// 1e5: 48 85 c0                      testq   %rax, %rax
// 1e8: 7e 06                         jle     0x1f0 <_JIT_ENTRY+0x1f0>
// 1ea: 85 c0                         testl   %eax, %eax
// 1ec: 78 e2                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1ee: eb 26                         jmp     0x216 <_JIT_ENTRY+0x216>
// 1f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f2:  R_X86_64_64  .rodata.str1.1
// 1fa: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ff: 4c 89 ea                      movq    %r13, %rdx
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_NegativeRefcount
// 20c: ff d0                         callq   *%rax
// 20e: 49 8b 45 00                   movq    (%r13), %rax
// 212: 85 c0                         testl   %eax, %eax
// 214: 78 ba                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 220: ff d0                         callq   *%rax
// 222: 49 ff 4d 00                   decq    (%r13)
// 226: 75 a8                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 228: 4c 89 ef                      movq    %r13, %rdi
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_Dealloc
// 235: ff d0                         callq   *%rax
// 237: eb 97                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _JIT_OPARG
// 243: f7 d0                         notl    %eax
// 245: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 24a: 4c 63 f8                      movslq  %eax, %r15
// 24d: 4f 8b 64 fe f0                movq    -0x10(%r14,%r15,8), %r12
// 252: 4f 8b 6c fe f8                movq    -0x8(%r14,%r15,8), %r13
// 257: 49 8b 04 24                   movq    (%r12), %rax
// 25b: 48 85 c0                      testq   %rax, %rax
// 25e: 7f 22                         jg      0x282 <_JIT_ENTRY+0x282>
// 260: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000262:  R_X86_64_64  .rodata.str1.1
// 26a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026c:  R_X86_64_64  _Py_NegativeRefcount
// 274: be 98 07 00 00                movl    $0x798, %esi            # imm = 0x798
// 279: 4c 89 e2                      movq    %r12, %rdx
// 27c: ff d0                         callq   *%rax
// 27e: 49 8b 04 24                   movq    (%r12), %rax
// 282: 85 c0                         testl   %eax, %eax
// 284: 78 21                         js      0x2a7 <_JIT_ENTRY+0x2a7>
// 286: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000288:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 290: ff d0                         callq   *%rax
// 292: 49 ff 0c 24                   decq    (%r12)
// 296: 75 0f                         jne     0x2a7 <_JIT_ENTRY+0x2a7>
// 298: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029a:  R_X86_64_64  _Py_Dealloc
// 2a2: 4c 89 e7                      movq    %r12, %rdi
// 2a5: ff d0                         callq   *%rax
// 2a7: 49 8b 45 00                   movq    (%r13), %rax
// 2ab: 48 85 c0                      testq   %rax, %rax
// 2ae: 7f 22                         jg      0x2d2 <_JIT_ENTRY+0x2d2>
// 2b0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002b2:  R_X86_64_64  .rodata.str1.1
// 2ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bc:  R_X86_64_64  _Py_NegativeRefcount
// 2c4: be 99 07 00 00                movl    $0x799, %esi            # imm = 0x799
// 2c9: 4c 89 ea                      movq    %r13, %rdx
// 2cc: ff d0                         callq   *%rax
// 2ce: 49 8b 45 00                   movq    (%r13), %rax
// 2d2: 4b 8d 2c fe                   leaq    (%r14,%r15,8), %rbp
// 2d6: 48 83 c5 f8                   addq    $-0x8, %rbp
// 2da: 85 c0                         testl   %eax, %eax
// 2dc: 78 21                         js      0x2ff <_JIT_ENTRY+0x2ff>
// 2de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2e8: ff d0                         callq   *%rax
// 2ea: 49 ff 4d 00                   decq    (%r13)
// 2ee: 75 0f                         jne     0x2ff <_JIT_ENTRY+0x2ff>
// 2f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f2:  R_X86_64_64  _Py_Dealloc
// 2fa: 4c 89 ef                      movq    %r13, %rdi
// 2fd: ff d0                         callq   *%rax
// 2ff: 31 c0                         xorl    %eax, %eax
// 301: 4d 39 ec                      cmpq    %r13, %r12
// 304: 0f 94 c0                      sete    %al
// 307: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000309:  R_X86_64_64  _JIT_OPARG
// 311: 66 39 c8                      cmpw    %cx, %ax
// 314: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000316:  R_X86_64_64  _Py_FalseStruct
// 31e: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000320:  R_X86_64_64  _Py_TrueStruct
// 328: 48 0f 44 d0                   cmoveq  %rax, %rdx
// 32c: f7 d1                         notl    %ecx
// 32e: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 334: 48 63 c1                      movslq  %ecx, %rax
// 337: 49 89 54 c6 f0                movq    %rdx, -0x10(%r14,%rax,8)
// 33c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033e:  R_X86_64_64  _JIT_CONTINUE
// 346: 48 89 df                      movq    %rbx, %rdi
// 349: 48 89 ee                      movq    %rbp, %rsi
// 34c: 48 8b 14 24                   movq    (%rsp), %rdx
// 350: 48 83 c4 28                   addq    $0x28, %rsp
// 354: 5b                            popq    %rbx
// 355: 41 5c                         popq    %r12
// 357: 41 5d                         popq    %r13
// 359: 41 5e                         popq    %r14
// 35b: 41 5f                         popq    %r15
// 35d: 5d                            popq    %rbp
// 35e: ff e0                         jmpq    *%rax
// 360: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_IS_OP_code_body[865] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd6, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xde, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xce, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc6, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x70, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x18, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x14, 0x24, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xb3, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x3c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x32, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xb8, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xa1, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xfa, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xdd, 0x45, 0x31, 0xff, 0xeb, 0x14, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc7, 0x4c, 0x39, 0xfb, 0x0f, 0x84, 0x27, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xfd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xf8, 0x4f, 0x8b, 0x64, 0xfe, 0xf0, 0x4f, 0x8b, 0x6c, 0xfe, 0xf8, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x98, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x99, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x4b, 0x8d, 0x2c, 0xfe, 0x48, 0x83, 0xc5, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x31, 0xc0, 0x4d, 0x39, 0xec, 0x0f, 0x94, 0xc0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x39, 0xc8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xd0, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc1, 0x49, 0x89, 0x54, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x89, 0xee, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_IS_OP_code_holes[27] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x262, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x26c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x288, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x29a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2b2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2f2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x309, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x316, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x320, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x33e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_IS_OP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_IS_OP_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_ITER_CHECK_LIST
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_ITER_CHECK_LIST.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4f 8d 04 c6                   leaq    (%r14,%r8,8), %r8
// 79: 49 8b 38                      movq    (%r8), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 49 29 de                      subq    %rbx, %r14
// 8a: 49 83 c6 b8                   addq    $-0x48, %r14
// 8e: 49 c1 ee 03                   shrq    $0x3, %r14
// 92: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 96: 48 8b 03                      movq    (%rbx), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c3: 4c 89 0c 24                   movq    %r9, (%rsp)
// c7: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cc: 48 85 c0                      testq   %rax, %rax
// cf: 40 0f 94 c5                   sete    %bpl
// d3: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// d7: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// dc: 49 8d 70 08                   leaq    0x8(%r8), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 b1 00 00 00             je      0x1b5 <_JIT_ENTRY+0x1b5>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 136: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 13b: 78 21                         js      0x15e <_JIT_ENTRY+0x15e>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 147: ff d0                         callq   *%rax
// 149: 49 ff 0c 24                   decq    (%r12)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_Dealloc
// 159: 4c 89 e7                      movq    %r12, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 163: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 167: 4d 85 ed                      testq   %r13, %r13
// 16a: 74 34                         je      0x1a0 <_JIT_ENTRY+0x1a0>
// 16c: 48 8b 0c 24                   movq    (%rsp), %rcx
// 170: 4d 8d 24 ce                   leaq    (%r14,%rcx,8), %r12
// 174: 4c 89 28                      movq    %r13, (%rax)
// 177: 49 8b 47 10                   movq    0x10(%r15), %rax
// 17b: 48 8b 00                      movq    (%rax), %rax
// 17e: 84 c0                         testb   %al, %al
// 180: 0f 84 c3 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 186: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000188:  R_X86_64_64  _Py_HandlePending
// 190: 4c 89 ff                      movq    %r15, %rdi
// 193: ff d0                         callq   *%rax
// 195: 85 c0                         testl   %eax, %eax
// 197: 0f 84 ac 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 19d: 4c 89 e0                      movq    %r12, %rax
// 1a0: 48 29 d8                      subq    %rbx, %rax
// 1a3: 48 83 c0 b8                   addq    $-0x48, %rax
// 1a7: 48 c1 e8 03                   shrq    $0x3, %rax
// 1ab: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1ae: 31 c0                         xorl    %eax, %eax
// 1b0: e9 fa fe ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 1b5: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1b9: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1bf: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1c3: 31 ed                         xorl    %ebp, %ebp
// 1c5: eb 15                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c7: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 1d0: 48 ff c5                      incq    %rbp
// 1d3: 49 39 ef                      cmpq    %rbp, %r15
// 1d6: 0f 84 28 ff ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 1dc: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 1e1: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 1e5: 49 8b 45 00                   movq    (%r13), %rax
// 1e9: 48 85 c0                      testq   %rax, %rax
// 1ec: 7e 12                         jle     0x200 <_JIT_ENTRY+0x200>
// 1ee: 85 c0                         testl   %eax, %eax
// 1f0: 78 de                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1f2: eb 32                         jmp     0x226 <_JIT_ENTRY+0x226>
// 1f4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 200: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1
// 20a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 20f: 4c 89 ea                      movq    %r13, %rdx
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: ff d0                         callq   *%rax
// 21e: 49 8b 45 00                   movq    (%r13), %rax
// 222: 85 c0                         testl   %eax, %eax
// 224: 78 aa                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 230: ff d0                         callq   *%rax
// 232: 49 ff 4d 00                   decq    (%r13)
// 236: 75 98                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: ff d0                         callq   *%rax
// 247: eb 87                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _JIT_OPARG
// 253: f7 d0                         notl    %eax
// 255: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 25a: 48 98                         cltq
// 25c: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 261: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000263:  R_X86_64_64  PyListIter_Type
// 26b: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 26f: 74 08                         je      0x279 <_JIT_ENTRY+0x279>
// 271: 4d 89 e6                      movq    %r12, %r14
// 274: e9 0e fe ff ff                jmp     0x87 <_JIT_ENTRY+0x87>
// 279: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027b:  R_X86_64_64  _JIT_CONTINUE
// 283: 48 89 df                      movq    %rbx, %rdi
// 286: 4c 89 e6                      movq    %r12, %rsi
// 289: 4c 89 fa                      movq    %r15, %rdx
// 28c: 48 83 c4 28                   addq    $0x28, %rsp
// 290: 5b                            popq    %rbx
// 291: 41 5c                         popq    %r12
// 293: 41 5d                         popq    %r13
// 295: 41 5e                         popq    %r14
// 297: 41 5f                         popq    %r15
// 299: 5d                            popq    %rbp
// 29a: ff e0                         jmpq    *%rax
// 29c: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_ITER_CHECK_LIST_code_body[669] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xce, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4f, 0x8d, 0x04, 0xc6, 0x49, 0x8b, 0x38, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x70, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xb1, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x4d, 0x85, 0xed, 0x74, 0x34, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x24, 0xce, 0x4c, 0x89, 0x28, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xac, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xfa, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xed, 0xeb, 0x15, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xef, 0x0f, 0x84, 0x28, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x08, 0x4d, 0x89, 0xe6, 0xe9, 0x0e, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_ITER_CHECK_LIST_code_holes[17] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyListIter_Type, 0x0},
    {0x27b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_ITER_CHECK_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_ITER_CHECK_LIST_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_ITER_CHECK_RANGE
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_ITER_CHECK_RANGE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4f 8d 04 c6                   leaq    (%r14,%r8,8), %r8
// 79: 49 8b 38                      movq    (%r8), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 49 29 de                      subq    %rbx, %r14
// 8a: 49 83 c6 b8                   addq    $-0x48, %r14
// 8e: 49 c1 ee 03                   shrq    $0x3, %r14
// 92: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 96: 48 8b 03                      movq    (%rbx), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c3: 4c 89 0c 24                   movq    %r9, (%rsp)
// c7: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cc: 48 85 c0                      testq   %rax, %rax
// cf: 40 0f 94 c5                   sete    %bpl
// d3: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// d7: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// dc: 49 8d 70 08                   leaq    0x8(%r8), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 b1 00 00 00             je      0x1b5 <_JIT_ENTRY+0x1b5>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 136: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 13b: 78 21                         js      0x15e <_JIT_ENTRY+0x15e>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 147: ff d0                         callq   *%rax
// 149: 49 ff 0c 24                   decq    (%r12)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_Dealloc
// 159: 4c 89 e7                      movq    %r12, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 163: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 167: 4d 85 ed                      testq   %r13, %r13
// 16a: 74 34                         je      0x1a0 <_JIT_ENTRY+0x1a0>
// 16c: 48 8b 0c 24                   movq    (%rsp), %rcx
// 170: 4d 8d 24 ce                   leaq    (%r14,%rcx,8), %r12
// 174: 4c 89 28                      movq    %r13, (%rax)
// 177: 49 8b 47 10                   movq    0x10(%r15), %rax
// 17b: 48 8b 00                      movq    (%rax), %rax
// 17e: 84 c0                         testb   %al, %al
// 180: 0f 84 c3 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 186: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000188:  R_X86_64_64  _Py_HandlePending
// 190: 4c 89 ff                      movq    %r15, %rdi
// 193: ff d0                         callq   *%rax
// 195: 85 c0                         testl   %eax, %eax
// 197: 0f 84 ac 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 19d: 4c 89 e0                      movq    %r12, %rax
// 1a0: 48 29 d8                      subq    %rbx, %rax
// 1a3: 48 83 c0 b8                   addq    $-0x48, %rax
// 1a7: 48 c1 e8 03                   shrq    $0x3, %rax
// 1ab: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1ae: 31 c0                         xorl    %eax, %eax
// 1b0: e9 fa fe ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 1b5: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1b9: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1bf: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1c3: 31 ed                         xorl    %ebp, %ebp
// 1c5: eb 15                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c7: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 1d0: 48 ff c5                      incq    %rbp
// 1d3: 49 39 ef                      cmpq    %rbp, %r15
// 1d6: 0f 84 28 ff ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 1dc: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 1e1: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 1e5: 49 8b 45 00                   movq    (%r13), %rax
// 1e9: 48 85 c0                      testq   %rax, %rax
// 1ec: 7e 12                         jle     0x200 <_JIT_ENTRY+0x200>
// 1ee: 85 c0                         testl   %eax, %eax
// 1f0: 78 de                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1f2: eb 32                         jmp     0x226 <_JIT_ENTRY+0x226>
// 1f4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 200: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1
// 20a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 20f: 4c 89 ea                      movq    %r13, %rdx
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: ff d0                         callq   *%rax
// 21e: 49 8b 45 00                   movq    (%r13), %rax
// 222: 85 c0                         testl   %eax, %eax
// 224: 78 aa                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 230: ff d0                         callq   *%rax
// 232: 49 ff 4d 00                   decq    (%r13)
// 236: 75 98                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: ff d0                         callq   *%rax
// 247: eb 87                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _JIT_OPARG
// 253: f7 d0                         notl    %eax
// 255: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 25a: 48 98                         cltq
// 25c: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 261: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000263:  R_X86_64_64  PyRangeIter_Type
// 26b: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 26f: 74 08                         je      0x279 <_JIT_ENTRY+0x279>
// 271: 4d 89 e6                      movq    %r12, %r14
// 274: e9 0e fe ff ff                jmp     0x87 <_JIT_ENTRY+0x87>
// 279: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027b:  R_X86_64_64  _JIT_CONTINUE
// 283: 48 89 df                      movq    %rbx, %rdi
// 286: 4c 89 e6                      movq    %r12, %rsi
// 289: 4c 89 fa                      movq    %r15, %rdx
// 28c: 48 83 c4 28                   addq    $0x28, %rsp
// 290: 5b                            popq    %rbx
// 291: 41 5c                         popq    %r12
// 293: 41 5d                         popq    %r13
// 295: 41 5e                         popq    %r14
// 297: 41 5f                         popq    %r15
// 299: 5d                            popq    %rbp
// 29a: ff e0                         jmpq    *%rax
// 29c: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_ITER_CHECK_RANGE_code_body[669] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xce, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4f, 0x8d, 0x04, 0xc6, 0x49, 0x8b, 0x38, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x70, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xb1, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x4d, 0x85, 0xed, 0x74, 0x34, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x24, 0xce, 0x4c, 0x89, 0x28, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xac, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xfa, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xed, 0xeb, 0x15, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xef, 0x0f, 0x84, 0x28, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x08, 0x4d, 0x89, 0xe6, 0xe9, 0x0e, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_ITER_CHECK_RANGE_code_holes[17] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyRangeIter_Type, 0x0},
    {0x27b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_ITER_CHECK_RANGE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_ITER_CHECK_RANGE_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_ITER_CHECK_TUPLE
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_ITER_CHECK_TUPLE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4f 8d 04 c6                   leaq    (%r14,%r8,8), %r8
// 79: 49 8b 38                      movq    (%r8), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 49 29 de                      subq    %rbx, %r14
// 8a: 49 83 c6 b8                   addq    $-0x48, %r14
// 8e: 49 c1 ee 03                   shrq    $0x3, %r14
// 92: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 96: 48 8b 03                      movq    (%rbx), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c3: 4c 89 0c 24                   movq    %r9, (%rsp)
// c7: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cc: 48 85 c0                      testq   %rax, %rax
// cf: 40 0f 94 c5                   sete    %bpl
// d3: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// d7: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// dc: 49 8d 70 08                   leaq    0x8(%r8), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 b1 00 00 00             je      0x1b5 <_JIT_ENTRY+0x1b5>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 136: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 13b: 78 21                         js      0x15e <_JIT_ENTRY+0x15e>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 147: ff d0                         callq   *%rax
// 149: 49 ff 0c 24                   decq    (%r12)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_Dealloc
// 159: 4c 89 e7                      movq    %r12, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 163: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 167: 4d 85 ed                      testq   %r13, %r13
// 16a: 74 34                         je      0x1a0 <_JIT_ENTRY+0x1a0>
// 16c: 48 8b 0c 24                   movq    (%rsp), %rcx
// 170: 4d 8d 24 ce                   leaq    (%r14,%rcx,8), %r12
// 174: 4c 89 28                      movq    %r13, (%rax)
// 177: 49 8b 47 10                   movq    0x10(%r15), %rax
// 17b: 48 8b 00                      movq    (%rax), %rax
// 17e: 84 c0                         testb   %al, %al
// 180: 0f 84 c3 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 186: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000188:  R_X86_64_64  _Py_HandlePending
// 190: 4c 89 ff                      movq    %r15, %rdi
// 193: ff d0                         callq   *%rax
// 195: 85 c0                         testl   %eax, %eax
// 197: 0f 84 ac 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 19d: 4c 89 e0                      movq    %r12, %rax
// 1a0: 48 29 d8                      subq    %rbx, %rax
// 1a3: 48 83 c0 b8                   addq    $-0x48, %rax
// 1a7: 48 c1 e8 03                   shrq    $0x3, %rax
// 1ab: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1ae: 31 c0                         xorl    %eax, %eax
// 1b0: e9 fa fe ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 1b5: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1b9: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1bf: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1c3: 31 ed                         xorl    %ebp, %ebp
// 1c5: eb 15                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c7: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 1d0: 48 ff c5                      incq    %rbp
// 1d3: 49 39 ef                      cmpq    %rbp, %r15
// 1d6: 0f 84 28 ff ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 1dc: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 1e1: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 1e5: 49 8b 45 00                   movq    (%r13), %rax
// 1e9: 48 85 c0                      testq   %rax, %rax
// 1ec: 7e 12                         jle     0x200 <_JIT_ENTRY+0x200>
// 1ee: 85 c0                         testl   %eax, %eax
// 1f0: 78 de                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1f2: eb 32                         jmp     0x226 <_JIT_ENTRY+0x226>
// 1f4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 200: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1
// 20a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 20f: 4c 89 ea                      movq    %r13, %rdx
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: ff d0                         callq   *%rax
// 21e: 49 8b 45 00                   movq    (%r13), %rax
// 222: 85 c0                         testl   %eax, %eax
// 224: 78 aa                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 230: ff d0                         callq   *%rax
// 232: 49 ff 4d 00                   decq    (%r13)
// 236: 75 98                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: ff d0                         callq   *%rax
// 247: eb 87                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _JIT_OPARG
// 253: f7 d0                         notl    %eax
// 255: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 25a: 48 98                         cltq
// 25c: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 261: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000263:  R_X86_64_64  PyTupleIter_Type
// 26b: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 26f: 74 08                         je      0x279 <_JIT_ENTRY+0x279>
// 271: 4d 89 e6                      movq    %r12, %r14
// 274: e9 0e fe ff ff                jmp     0x87 <_JIT_ENTRY+0x87>
// 279: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027b:  R_X86_64_64  _JIT_CONTINUE
// 283: 48 89 df                      movq    %rbx, %rdi
// 286: 4c 89 e6                      movq    %r12, %rsi
// 289: 4c 89 fa                      movq    %r15, %rdx
// 28c: 48 83 c4 28                   addq    $0x28, %rsp
// 290: 5b                            popq    %rbx
// 291: 41 5c                         popq    %r12
// 293: 41 5d                         popq    %r13
// 295: 41 5e                         popq    %r14
// 297: 41 5f                         popq    %r15
// 299: 5d                            popq    %rbp
// 29a: ff e0                         jmpq    *%rax
// 29c: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_ITER_CHECK_TUPLE_code_body[669] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xce, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4f, 0x8d, 0x04, 0xc6, 0x49, 0x8b, 0x38, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x70, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xb1, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x4d, 0x85, 0xed, 0x74, 0x34, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x24, 0xce, 0x4c, 0x89, 0x28, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xac, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xfa, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xed, 0xeb, 0x15, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xef, 0x0f, 0x84, 0x28, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x08, 0x4d, 0x89, 0xe6, 0xe9, 0x0e, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_ITER_CHECK_TUPLE_code_holes[17] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTupleIter_Type, 0x0},
    {0x27b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_ITER_CHECK_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_ITER_CHECK_TUPLE_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_ITER_NEXT_LIST
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_ITER_NEXT_LIST.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4f 8d 04 c6                   leaq    (%r14,%r8,8), %r8
// 79: 49 8b 38                      movq    (%r8), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 49 29 de                      subq    %rbx, %r14
// 8a: 49 83 c6 b8                   addq    $-0x48, %r14
// 8e: 49 c1 ee 03                   shrq    $0x3, %r14
// 92: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 96: 48 8b 03                      movq    (%rbx), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// c3: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// c8: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cd: 48 85 c0                      testq   %rax, %rax
// d0: 40 0f 94 c5                   sete    %bpl
// d4: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// d8: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// dd: 49 8d 70 08                   leaq    0x8(%r8), %rsi
// e1: 48 63 d0                      movslq  %eax, %rdx
// e4: ff 51 08                      callq   *0x8(%rcx)
// e7: 48 89 04 24                   movq    %rax, (%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 ae 00 00 00             je      0x1b2 <_JIT_ENTRY+0x1b2>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// 136: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 13b: 78 21                         js      0x15e <_JIT_ENTRY+0x15e>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 147: ff d0                         callq   *%rax
// 149: 49 ff 0c 24                   decq    (%r12)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_Dealloc
// 159: 4c 89 e7                      movq    %r12, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 162: 48 8b 0c 24                   movq    (%rsp), %rcx
// 166: 48 85 c9                      testq   %rcx, %rcx
// 169: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 16e: 74 2d                         je      0x19d <_JIT_ENTRY+0x19d>
// 170: 48 89 08                      movq    %rcx, (%rax)
// 173: 49 8b 45 10                   movq    0x10(%r13), %rax
// 177: 48 8b 00                      movq    (%rax), %rax
// 17a: 84 c0                         testb   %al, %al
// 17c: 0f 84 c7 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 182: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000184:  R_X86_64_64  _Py_HandlePending
// 18c: 4c 89 ef                      movq    %r13, %rdi
// 18f: ff d0                         callq   *%rax
// 191: 85 c0                         testl   %eax, %eax
// 193: 0f 84 b0 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 199: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 19d: 48 29 d8                      subq    %rbx, %rax
// 1a0: 48 83 c0 b8                   addq    $-0x48, %rax
// 1a4: 48 c1 e8 03                   shrq    $0x3, %rax
// 1a8: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1ab: 31 c0                         xorl    %eax, %eax
// 1ad: e9 fd fe ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 1b2: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1b6: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1bc: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1c0: 31 ed                         xorl    %ebp, %ebp
// 1c2: eb 18                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 1d0: 48 ff c5                      incq    %rbp
// 1d3: 49 39 ef                      cmpq    %rbp, %r15
// 1d6: 0f 84 28 ff ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 1dc: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 1e1: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 1e5: 49 8b 45 00                   movq    (%r13), %rax
// 1e9: 48 85 c0                      testq   %rax, %rax
// 1ec: 7e 12                         jle     0x200 <_JIT_ENTRY+0x200>
// 1ee: 85 c0                         testl   %eax, %eax
// 1f0: 78 de                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1f2: eb 32                         jmp     0x226 <_JIT_ENTRY+0x226>
// 1f4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 200: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1
// 20a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 20f: 4c 89 ea                      movq    %r13, %rdx
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: ff d0                         callq   *%rax
// 21e: 49 8b 45 00                   movq    (%r13), %rax
// 222: 85 c0                         testl   %eax, %eax
// 224: 78 aa                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 230: ff d0                         callq   *%rax
// 232: 49 ff 4d 00                   decq    (%r13)
// 236: 75 98                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: ff d0                         callq   *%rax
// 247: eb 87                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _JIT_OPARG
// 253: f7 d0                         notl    %eax
// 255: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 25a: 48 98                         cltq
// 25c: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 261: 48 8b 48 10                   movq    0x10(%rax), %rcx
// 265: 48 8b 50 18                   movq    0x18(%rax), %rdx
// 269: 48 8b 52 18                   movq    0x18(%rdx), %rdx
// 26d: 48 8d 71 01                   leaq    0x1(%rcx), %rsi
// 271: 48 89 70 10                   movq    %rsi, 0x10(%rax)
// 275: 4c 8b 3c ca                   movq    (%rdx,%rcx,8), %r15
// 279: 41 8b 07                      movl    (%r15), %eax
// 27c: ff c0                         incl    %eax
// 27e: 74 0f                         je      0x28f <_JIT_ENTRY+0x28f>
// 280: 41 89 07                      movl    %eax, (%r15)
// 283: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000285:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 28d: ff d0                         callq   *%rax
// 28f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000291:  R_X86_64_64  _JIT_OPARG
// 299: f7 d0                         notl    %eax
// 29b: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 2a0: 48 98                         cltq
// 2a2: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 2a6: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 2aa: 48 83 c6 08                   addq    $0x8, %rsi
// 2ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b0:  R_X86_64_64  _JIT_CONTINUE
// 2b8: 48 89 df                      movq    %rbx, %rdi
// 2bb: 4c 89 ea                      movq    %r13, %rdx
// 2be: 48 83 c4 28                   addq    $0x28, %rsp
// 2c2: 5b                            popq    %rbx
// 2c3: 41 5c                         popq    %r12
// 2c5: 41 5d                         popq    %r13
// 2c7: 41 5e                         popq    %r14
// 2c9: 41 5f                         popq    %r15
// 2cb: 5d                            popq    %rbp
// 2cc: ff e0                         jmpq    *%rax
// 2ce: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_ITER_NEXT_LIST_code_body[719] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xce, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4f, 0x8d, 0x04, 0xc6, 0x49, 0x8b, 0x38, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x70, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xae, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x74, 0x2d, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xb0, 0x00, 0x00, 0x00, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xfd, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xed, 0xeb, 0x18, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xef, 0x0f, 0x84, 0x28, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0x8b, 0x48, 0x10, 0x48, 0x8b, 0x50, 0x18, 0x48, 0x8b, 0x52, 0x18, 0x48, 0x8d, 0x71, 0x01, 0x48, 0x89, 0x70, 0x10, 0x4c, 0x8b, 0x3c, 0xca, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x3c, 0xc6, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_ITER_NEXT_LIST_code_holes[18] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x285, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x291, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2b0, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_ITER_NEXT_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_ITER_NEXT_LIST_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_ITER_NEXT_RANGE
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_ITER_NEXT_RANGE.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4f 8d 04 c6                   leaq    (%r14,%r8,8), %r8
// 79: 49 8b 38                      movq    (%r8), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 49 29 de                      subq    %rbx, %r14
// 8a: 49 83 c6 b8                   addq    $-0x48, %r14
// 8e: 49 c1 ee 03                   shrq    $0x3, %r14
// 92: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 96: 48 8b 03                      movq    (%rbx), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// c3: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// c8: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cd: 48 85 c0                      testq   %rax, %rax
// d0: 40 0f 94 c5                   sete    %bpl
// d4: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// d8: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// dd: 49 8d 70 08                   leaq    0x8(%r8), %rsi
// e1: 48 63 d0                      movslq  %eax, %rdx
// e4: ff 51 08                      callq   *0x8(%rcx)
// e7: 48 89 04 24                   movq    %rax, (%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 1a 01 00 00             je      0x21e <_JIT_ENTRY+0x21e>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// 136: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 13b: 78 21                         js      0x15e <_JIT_ENTRY+0x15e>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 147: ff d0                         callq   *%rax
// 149: 49 ff 0c 24                   decq    (%r12)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_Dealloc
// 159: 4c 89 e7                      movq    %r12, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 163: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 167: 48 8b 0c 24                   movq    (%rsp), %rcx
// 16b: 48 85 c9                      testq   %rcx, %rcx
// 16e: 0f 84 35 01 00 00             je      0x2a9 <_JIT_ENTRY+0x2a9>
// 174: 4f 8d 3c fe                   leaq    (%r14,%r15,8), %r15
// 178: 48 89 08                      movq    %rcx, (%rax)
// 17b: 49 8b 45 10                   movq    0x10(%r13), %rax
// 17f: 48 8b 00                      movq    (%rax), %rax
// 182: 84 c0                         testb   %al, %al
// 184: 74 17                         je      0x19d <_JIT_ENTRY+0x19d>
// 186: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000188:  R_X86_64_64  _Py_HandlePending
// 190: 4c 89 ef                      movq    %r13, %rdi
// 193: ff d0                         callq   *%rax
// 195: 85 c0                         testl   %eax, %eax
// 197: 0f 85 0f 01 00 00             jne     0x2ac <_JIT_ENTRY+0x2ac>
// 19d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019f:  R_X86_64_64  _JIT_OPARG
// 1a7: f7 d0                         notl    %eax
// 1a9: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1ae: 48 98                         cltq
// 1b0: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 1b5: 48 8b 78 10                   movq    0x10(%rax), %rdi
// 1b9: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 1bd: 48 01 f9                      addq    %rdi, %rcx
// 1c0: 48 89 48 10                   movq    %rcx, 0x10(%rax)
// 1c4: 48 ff 48 20                   decq    0x20(%rax)
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  PyLong_FromLong
// 1d2: ff d0                         callq   *%rax
// 1d4: 48 85 c0                      testq   %rax, %rax
// 1d7: 0f 84 cf 00 00 00             je      0x2ac <_JIT_ENTRY+0x2ac>
// 1dd: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001df:  R_X86_64_64  _JIT_OPARG
// 1e7: f7 d1                         notl    %ecx
// 1e9: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 1ef: 48 63 c9                      movslq  %ecx, %rcx
// 1f2: 49 89 04 ce                   movq    %rax, (%r14,%rcx,8)
// 1f6: 49 8d 34 ce                   leaq    (%r14,%rcx,8), %rsi
// 1fa: 48 83 c6 08                   addq    $0x8, %rsi
// 1fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000200:  R_X86_64_64  _JIT_CONTINUE
// 208: 48 89 df                      movq    %rbx, %rdi
// 20b: 4c 89 ea                      movq    %r13, %rdx
// 20e: 48 83 c4 28                   addq    $0x28, %rsp
// 212: 5b                            popq    %rbx
// 213: 41 5c                         popq    %r12
// 215: 41 5d                         popq    %r13
// 217: 41 5e                         popq    %r14
// 219: 41 5f                         popq    %r15
// 21b: 5d                            popq    %rbp
// 21c: ff e0                         jmpq    *%rax
// 21e: 41 83 fd 02                   cmpl    $0x2, %r13d
// 222: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 228: 45 0f 43 fd                   cmovael %r13d, %r15d
// 22c: 31 ed                         xorl    %ebp, %ebp
// 22e: eb 0c                         jmp     0x23c <_JIT_ENTRY+0x23c>
// 230: 48 ff c5                      incq    %rbp
// 233: 49 39 ef                      cmpq    %rbp, %r15
// 236: 0f 84 c8 fe ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 23c: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 241: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 245: 49 8b 45 00                   movq    (%r13), %rax
// 249: 48 85 c0                      testq   %rax, %rax
// 24c: 7e 12                         jle     0x260 <_JIT_ENTRY+0x260>
// 24e: 85 c0                         testl   %eax, %eax
// 250: 78 de                         js      0x230 <_JIT_ENTRY+0x230>
// 252: eb 32                         jmp     0x286 <_JIT_ENTRY+0x286>
// 254: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 260: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000262:  R_X86_64_64  .rodata.str1.1
// 26a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 26f: 4c 89 ea                      movq    %r13, %rdx
// 272: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000274:  R_X86_64_64  _Py_NegativeRefcount
// 27c: ff d0                         callq   *%rax
// 27e: 49 8b 45 00                   movq    (%r13), %rax
// 282: 85 c0                         testl   %eax, %eax
// 284: 78 aa                         js      0x230 <_JIT_ENTRY+0x230>
// 286: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000288:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 290: ff d0                         callq   *%rax
// 292: 49 ff 4d 00                   decq    (%r13)
// 296: 75 98                         jne     0x230 <_JIT_ENTRY+0x230>
// 298: 4c 89 ef                      movq    %r13, %rdi
// 29b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029d:  R_X86_64_64  _Py_Dealloc
// 2a5: ff d0                         callq   *%rax
// 2a7: eb 87                         jmp     0x230 <_JIT_ENTRY+0x230>
// 2a9: 49 89 c7                      movq    %rax, %r15
// 2ac: 49 29 df                      subq    %rbx, %r15
// 2af: 49 83 c7 b8                   addq    $-0x48, %r15
// 2b3: 49 c1 ef 03                   shrq    $0x3, %r15
// 2b7: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 2bb: 31 c0                         xorl    %eax, %eax
// 2bd: e9 ed fd ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 2c2: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_ITER_NEXT_RANGE_code_body[707] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xce, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4f, 0x8d, 0x04, 0xc6, 0x49, 0x8b, 0x38, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x70, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0x1a, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x35, 0x01, 0x00, 0x00, 0x4f, 0x8d, 0x3c, 0xfe, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x0f, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0x8b, 0x78, 0x10, 0x48, 0x8b, 0x48, 0x18, 0x48, 0x01, 0xf9, 0x48, 0x89, 0x48, 0x10, 0x48, 0xff, 0x48, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xcf, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x04, 0xce, 0x49, 0x8d, 0x34, 0xce, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xed, 0xeb, 0x0c, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xef, 0x0f, 0x84, 0xc8, 0xfe, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x49, 0x89, 0xc7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0xe9, 0xed, 0xfd, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_ITER_NEXT_RANGE_code_holes[18] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x19f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromLong, 0x0},
    {0x1df, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x200, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x262, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x274, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x288, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x29d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_ITER_NEXT_RANGE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_ITER_NEXT_RANGE_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_ITER_NEXT_TUPLE
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_ITER_NEXT_TUPLE.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4f 8d 04 c6                   leaq    (%r14,%r8,8), %r8
// 79: 49 8b 38                      movq    (%r8), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 49 29 de                      subq    %rbx, %r14
// 8a: 49 83 c6 b8                   addq    $-0x48, %r14
// 8e: 49 c1 ee 03                   shrq    $0x3, %r14
// 92: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 96: 48 8b 03                      movq    (%rbx), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// c3: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// c8: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cd: 48 85 c0                      testq   %rax, %rax
// d0: 40 0f 94 c5                   sete    %bpl
// d4: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// d8: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// dd: 49 8d 70 08                   leaq    0x8(%r8), %rsi
// e1: 48 63 d0                      movslq  %eax, %rdx
// e4: ff 51 08                      callq   *0x8(%rcx)
// e7: 48 89 04 24                   movq    %rax, (%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 ae 00 00 00             je      0x1b2 <_JIT_ENTRY+0x1b2>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// 136: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 13b: 78 21                         js      0x15e <_JIT_ENTRY+0x15e>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 147: ff d0                         callq   *%rax
// 149: 49 ff 0c 24                   decq    (%r12)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_Dealloc
// 159: 4c 89 e7                      movq    %r12, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 162: 48 8b 0c 24                   movq    (%rsp), %rcx
// 166: 48 85 c9                      testq   %rcx, %rcx
// 169: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 16e: 74 2d                         je      0x19d <_JIT_ENTRY+0x19d>
// 170: 48 89 08                      movq    %rcx, (%rax)
// 173: 49 8b 45 10                   movq    0x10(%r13), %rax
// 177: 48 8b 00                      movq    (%rax), %rax
// 17a: 84 c0                         testb   %al, %al
// 17c: 0f 84 c7 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 182: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000184:  R_X86_64_64  _Py_HandlePending
// 18c: 4c 89 ef                      movq    %r13, %rdi
// 18f: ff d0                         callq   *%rax
// 191: 85 c0                         testl   %eax, %eax
// 193: 0f 84 b0 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 199: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 19d: 48 29 d8                      subq    %rbx, %rax
// 1a0: 48 83 c0 b8                   addq    $-0x48, %rax
// 1a4: 48 c1 e8 03                   shrq    $0x3, %rax
// 1a8: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1ab: 31 c0                         xorl    %eax, %eax
// 1ad: e9 fd fe ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 1b2: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1b6: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1bc: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1c0: 31 ed                         xorl    %ebp, %ebp
// 1c2: eb 18                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 1d0: 48 ff c5                      incq    %rbp
// 1d3: 49 39 ef                      cmpq    %rbp, %r15
// 1d6: 0f 84 28 ff ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 1dc: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 1e1: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 1e5: 49 8b 45 00                   movq    (%r13), %rax
// 1e9: 48 85 c0                      testq   %rax, %rax
// 1ec: 7e 12                         jle     0x200 <_JIT_ENTRY+0x200>
// 1ee: 85 c0                         testl   %eax, %eax
// 1f0: 78 de                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1f2: eb 32                         jmp     0x226 <_JIT_ENTRY+0x226>
// 1f4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 200: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1
// 20a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 20f: 4c 89 ea                      movq    %r13, %rdx
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: ff d0                         callq   *%rax
// 21e: 49 8b 45 00                   movq    (%r13), %rax
// 222: 85 c0                         testl   %eax, %eax
// 224: 78 aa                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 230: ff d0                         callq   *%rax
// 232: 49 ff 4d 00                   decq    (%r13)
// 236: 75 98                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: ff d0                         callq   *%rax
// 247: eb 87                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _JIT_OPARG
// 253: f7 d0                         notl    %eax
// 255: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 25a: 48 98                         cltq
// 25c: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 261: 48 8b 48 10                   movq    0x10(%rax), %rcx
// 265: 48 8b 50 18                   movq    0x18(%rax), %rdx
// 269: 48 8d 71 01                   leaq    0x1(%rcx), %rsi
// 26d: 48 89 70 10                   movq    %rsi, 0x10(%rax)
// 271: 4c 8b 7c ca 18                movq    0x18(%rdx,%rcx,8), %r15
// 276: 41 8b 07                      movl    (%r15), %eax
// 279: ff c0                         incl    %eax
// 27b: 74 0f                         je      0x28c <_JIT_ENTRY+0x28c>
// 27d: 41 89 07                      movl    %eax, (%r15)
// 280: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000282:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 28a: ff d0                         callq   *%rax
// 28c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028e:  R_X86_64_64  _JIT_OPARG
// 296: f7 d0                         notl    %eax
// 298: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 29d: 48 98                         cltq
// 29f: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 2a3: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 2a7: 48 83 c6 08                   addq    $0x8, %rsi
// 2ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ad:  R_X86_64_64  _JIT_CONTINUE
// 2b5: 48 89 df                      movq    %rbx, %rdi
// 2b8: 4c 89 ea                      movq    %r13, %rdx
// 2bb: 48 83 c4 28                   addq    $0x28, %rsp
// 2bf: 5b                            popq    %rbx
// 2c0: 41 5c                         popq    %r12
// 2c2: 41 5d                         popq    %r13
// 2c4: 41 5e                         popq    %r14
// 2c6: 41 5f                         popq    %r15
// 2c8: 5d                            popq    %rbp
// 2c9: ff e0                         jmpq    *%rax
// 2cb: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_ITER_NEXT_TUPLE_code_body[716] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xce, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4f, 0x8d, 0x04, 0xc6, 0x49, 0x8b, 0x38, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x70, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xae, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x74, 0x2d, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xb0, 0x00, 0x00, 0x00, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xfd, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xed, 0xeb, 0x18, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xef, 0x0f, 0x84, 0x28, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0x8b, 0x48, 0x10, 0x48, 0x8b, 0x50, 0x18, 0x48, 0x8d, 0x71, 0x01, 0x48, 0x89, 0x70, 0x10, 0x4c, 0x8b, 0x7c, 0xca, 0x18, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x3c, 0xc6, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_ITER_NEXT_TUPLE_code_holes[18] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x282, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x28e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2ad, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_ITER_NEXT_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_ITER_NEXT_TUPLE_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_JUMP_TO_TOP
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_JUMP_TO_TOP.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 cf                   movq    (%r15,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d7                   movq    (%r15,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4f 8d 04 c7                   leaq    (%r15,%r8,8), %r8
// 79: 49 8b 38                      movq    (%r8), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 49 29 df                      subq    %rbx, %r15
// 8a: 49 83 c7 b8                   addq    $-0x48, %r15
// 8e: 49 c1 ef 03                   shrq    $0x3, %r15
// 92: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 96: 48 8b 03                      movq    (%rbx), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c3: 4c 89 0c 24                   movq    %r9, (%rsp)
// c7: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cc: 48 85 c0                      testq   %rax, %rax
// cf: 40 0f 94 c5                   sete    %bpl
// d3: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// d7: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// dc: 49 8d 70 08                   leaq    0x8(%r8), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 cf 00 00 00             je      0x1d3 <_JIT_ENTRY+0x1d3>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// 136: 78 21                         js      0x159 <_JIT_ENTRY+0x159>
// 138: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 142: ff d0                         callq   *%rax
// 144: 49 ff 0c 24                   decq    (%r12)
// 148: 75 0f                         jne     0x159 <_JIT_ENTRY+0x159>
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_Dealloc
// 154: 4c 89 e7                      movq    %r12, %rdi
// 157: ff d0                         callq   *%rax
// 159: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 15e: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 162: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 167: 48 85 d2                      testq   %rdx, %rdx
// 16a: 74 52                         je      0x1be <_JIT_ENTRY+0x1be>
// 16c: 48 8b 0c 24                   movq    (%rsp), %rcx
// 170: 4d 8d 3c cf                   leaq    (%r15,%rcx,8), %r15
// 174: 48 89 10                      movq    %rdx, (%rax)
// 177: 49 8b 46 10                   movq    0x10(%r14), %rax
// 17b: 48 8b 08                      movq    (%rax), %rcx
// 17e: 84 c9                         testb   %cl, %cl
// 180: 74 17                         je      0x199 <_JIT_ENTRY+0x199>
// 182: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000184:  R_X86_64_64  _Py_HandlePending
// 18c: 4c 89 f7                      movq    %r14, %rdi
// 18f: ff d0                         callq   *%rax
// 191: 85 c0                         testl   %eax, %eax
// 193: 75 26                         jne     0x1bb <_JIT_ENTRY+0x1bb>
// 195: 49 8b 46 10                   movq    0x10(%r14), %rax
// 199: 48 8b 00                      movq    (%rax), %rax
// 19c: 84 c0                         testb   %al, %al
// 19e: 0f 84 c5 00 00 00             je      0x269 <_JIT_ENTRY+0x269>
// 1a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a6:  R_X86_64_64  _Py_HandlePending
// 1ae: 4c 89 f7                      movq    %r14, %rdi
// 1b1: ff d0                         callq   *%rax
// 1b3: 85 c0                         testl   %eax, %eax
// 1b5: 0f 84 ae 00 00 00             je      0x269 <_JIT_ENTRY+0x269>
// 1bb: 4c 89 f8                      movq    %r15, %rax
// 1be: 48 29 d8                      subq    %rbx, %rax
// 1c1: 48 83 c0 b8                   addq    $-0x48, %rax
// 1c5: 48 c1 e8 03                   shrq    $0x3, %rax
// 1c9: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1cc: 31 c0                         xorl    %eax, %eax
// 1ce: e9 dc fe ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 1d3: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1d7: 41 be 01 00 00 00             movl    $0x1, %r14d
// 1dd: 45 0f 43 f5                   cmovael %r13d, %r14d
// 1e1: 31 ed                         xorl    %ebp, %ebp
// 1e3: eb 17                         jmp     0x1fc <_JIT_ENTRY+0x1fc>
// 1e5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// 1f0: 48 ff c5                      incq    %rbp
// 1f3: 49 39 ee                      cmpq    %rbp, %r14
// 1f6: 0f 84 08 ff ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 1fc: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 201: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 205: 49 8b 45 00                   movq    (%r13), %rax
// 209: 48 85 c0                      testq   %rax, %rax
// 20c: 7e 12                         jle     0x220 <_JIT_ENTRY+0x220>
// 20e: 85 c0                         testl   %eax, %eax
// 210: 78 de                         js      0x1f0 <_JIT_ENTRY+0x1f0>
// 212: eb 32                         jmp     0x246 <_JIT_ENTRY+0x246>
// 214: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 220: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000222:  R_X86_64_64  .rodata.str1.1
// 22a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 22f: 4c 89 ea                      movq    %r13, %rdx
// 232: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000234:  R_X86_64_64  _Py_NegativeRefcount
// 23c: ff d0                         callq   *%rax
// 23e: 49 8b 45 00                   movq    (%r13), %rax
// 242: 85 c0                         testl   %eax, %eax
// 244: 78 aa                         js      0x1f0 <_JIT_ENTRY+0x1f0>
// 246: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000248:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 250: ff d0                         callq   *%rax
// 252: 49 ff 4d 00                   decq    (%r13)
// 256: 75 98                         jne     0x1f0 <_JIT_ENTRY+0x1f0>
// 258: 4c 89 ef                      movq    %r13, %rdi
// 25b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025d:  R_X86_64_64  _Py_Dealloc
// 265: ff d0                         callq   *%rax
// 267: eb 87                         jmp     0x1f0 <_JIT_ENTRY+0x1f0>
// 269: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026b:  R_X86_64_64  _JIT_CONTINUE
// 273: 48 89 df                      movq    %rbx, %rdi
// 276: 4c 89 fe                      movq    %r15, %rsi
// 279: 4c 89 f2                      movq    %r14, %rdx
// 27c: 48 83 c4 28                   addq    $0x28, %rsp
// 280: 5b                            popq    %rbx
// 281: 41 5c                         popq    %r12
// 283: 41 5d                         popq    %r13
// 285: 41 5e                         popq    %r14
// 287: 41 5f                         popq    %r15
// 289: 5d                            popq    %rbp
// 28a: ff e0                         jmpq    *%rax
// 28c: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_JUMP_TO_TOP_code_body[653] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xcf, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4f, 0x8d, 0x04, 0xc7, 0x49, 0x8b, 0x38, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x70, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xcf, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x74, 0x52, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x3c, 0xcf, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x08, 0x84, 0xc9, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x75, 0x26, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc5, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xae, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xdc, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xed, 0xeb, 0x17, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xee, 0x0f, 0x84, 0x08, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_JUMP_TO_TOP_code_holes[16] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1a6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x222, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x234, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x248, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x26b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_JUMP_TO_TOP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_JUMP_TO_TOP_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_LIST_APPEND
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_LIST_APPEND.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 cf                   movq    (%r15,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d7                   movq    (%r15,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4f 8d 04 c7                   leaq    (%r15,%r8,8), %r8
// 79: 49 8b 38                      movq    (%r8), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 49 29 df                      subq    %rbx, %r15
// 8a: 49 83 c7 b8                   addq    $-0x48, %r15
// 8e: 49 c1 ef 03                   shrq    $0x3, %r15
// 92: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 96: 48 8b 03                      movq    (%rbx), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c3: 4c 89 0c 24                   movq    %r9, (%rsp)
// c7: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cc: 48 85 c0                      testq   %rax, %rax
// cf: 40 0f 94 c5                   sete    %bpl
// d3: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// d7: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// dc: 49 8d 70 08                   leaq    0x8(%r8), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 a3 00 00 00             je      0x1a7 <_JIT_ENTRY+0x1a7>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// 136: 78 21                         js      0x159 <_JIT_ENTRY+0x159>
// 138: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 142: ff d0                         callq   *%rax
// 144: 49 ff 0c 24                   decq    (%r12)
// 148: 75 0f                         jne     0x159 <_JIT_ENTRY+0x159>
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_Dealloc
// 154: 4c 89 e7                      movq    %r12, %rdi
// 157: ff d0                         callq   *%rax
// 159: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 15e: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 162: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 167: 48 85 c0                      testq   %rax, %rax
// 16a: 0f 84 3e 01 00 00             je      0x2ae <_JIT_ENTRY+0x2ae>
// 170: 49 89 04 24                   movq    %rax, (%r12)
// 174: 49 8b 46 10                   movq    0x10(%r14), %rax
// 178: 48 8b 00                      movq    (%rax), %rax
// 17b: 84 c0                         testb   %al, %al
// 17d: 0f 84 b6 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 183: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000185:  R_X86_64_64  _Py_HandlePending
// 18d: 4c 89 f7                      movq    %r14, %rdi
// 190: ff d0                         callq   *%rax
// 192: 85 c0                         testl   %eax, %eax
// 194: 0f 84 9f 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 19a: 48 8b 04 24                   movq    (%rsp), %rax
// 19e: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 1a2: e9 07 01 00 00                jmp     0x2ae <_JIT_ENTRY+0x2ae>
// 1a7: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1ab: 41 be 01 00 00 00             movl    $0x1, %r14d
// 1b1: 45 0f 43 f5                   cmovael %r13d, %r14d
// 1b5: 31 ed                         xorl    %ebp, %ebp
// 1b7: eb 13                         jmp     0x1cc <_JIT_ENTRY+0x1cc>
// 1b9: 0f 1f 80 00 00 00 00          nopl    (%rax)
// 1c0: 48 ff c5                      incq    %rbp
// 1c3: 49 39 ee                      cmpq    %rbp, %r14
// 1c6: 0f 84 38 ff ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 1cc: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 1d1: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 1d5: 49 8b 45 00                   movq    (%r13), %rax
// 1d9: 48 85 c0                      testq   %rax, %rax
// 1dc: 7e 12                         jle     0x1f0 <_JIT_ENTRY+0x1f0>
// 1de: 85 c0                         testl   %eax, %eax
// 1e0: 78 de                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 1e2: eb 32                         jmp     0x216 <_JIT_ENTRY+0x216>
// 1e4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 1f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f2:  R_X86_64_64  .rodata.str1.1
// 1fa: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ff: 4c 89 ea                      movq    %r13, %rdx
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_NegativeRefcount
// 20c: ff d0                         callq   *%rax
// 20e: 49 8b 45 00                   movq    (%r13), %rax
// 212: 85 c0                         testl   %eax, %eax
// 214: 78 aa                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 220: ff d0                         callq   *%rax
// 222: 49 ff 4d 00                   decq    (%r13)
// 226: 75 98                         jne     0x1c0 <_JIT_ENTRY+0x1c0>
// 228: 4c 89 ef                      movq    %r13, %rdi
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_Dealloc
// 235: ff d0                         callq   *%rax
// 237: eb 87                         jmp     0x1c0 <_JIT_ENTRY+0x1c0>
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _JIT_OPARG
// 243: f7 d0                         notl    %eax
// 245: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 24a: 48 98                         cltq
// 24c: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 250: 49 83 c4 f8                   addq    $-0x8, %r12
// 254: 49 8b 74 c7 f8                movq    -0x8(%r15,%rax,8), %rsi
// 259: 48 01 c0                      addq    %rax, %rax
// 25c: 49 8b 3c c7                   movq    (%r15,%rax,8), %rdi
// 260: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 264: 48 39 47 20                   cmpq    %rax, 0x20(%rdi)
// 268: 7e 11                         jle     0x27b <_JIT_ENTRY+0x27b>
// 26a: 48 8b 4f 18                   movq    0x18(%rdi), %rcx
// 26e: 48 89 34 c1                   movq    %rsi, (%rcx,%rax,8)
// 272: 48 ff c0                      incq    %rax
// 275: 48 89 47 10                   movq    %rax, 0x10(%rdi)
// 279: eb 10                         jmp     0x28b <_JIT_ENTRY+0x28b>
// 27b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027d:  R_X86_64_64  _PyList_AppendTakeRefListResize
// 285: ff d0                         callq   *%rax
// 287: 85 c0                         testl   %eax, %eax
// 289: 78 23                         js      0x2ae <_JIT_ENTRY+0x2ae>
// 28b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028d:  R_X86_64_64  _JIT_CONTINUE
// 295: 48 89 df                      movq    %rbx, %rdi
// 298: 4c 89 e6                      movq    %r12, %rsi
// 29b: 4c 89 f2                      movq    %r14, %rdx
// 29e: 48 83 c4 28                   addq    $0x28, %rsp
// 2a2: 5b                            popq    %rbx
// 2a3: 41 5c                         popq    %r12
// 2a5: 41 5d                         popq    %r13
// 2a7: 41 5e                         popq    %r14
// 2a9: 41 5f                         popq    %r15
// 2ab: 5d                            popq    %rbp
// 2ac: ff e0                         jmpq    *%rax
// 2ae: 49 29 dc                      subq    %rbx, %r12
// 2b1: 49 83 c4 b8                   addq    $-0x48, %r12
// 2b5: 49 c1 ec 03                   shrq    $0x3, %r12
// 2b9: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 2bd: 31 c0                         xorl    %eax, %eax
// 2bf: e9 eb fd ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 2c4: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_LIST_APPEND_code_body[709] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xcf, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4f, 0x8d, 0x04, 0xc7, 0x49, 0x8b, 0x38, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x70, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xa3, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x4d, 0x8d, 0x24, 0xc7, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x3e, 0x01, 0x00, 0x00, 0x49, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xb6, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x9f, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x24, 0xc7, 0xe9, 0x07, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xed, 0xeb, 0x13, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xee, 0x0f, 0x84, 0x38, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x83, 0xc4, 0xf8, 0x49, 0x8b, 0x74, 0xc7, 0xf8, 0x48, 0x01, 0xc0, 0x49, 0x8b, 0x3c, 0xc7, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x39, 0x47, 0x20, 0x7e, 0x11, 0x48, 0x8b, 0x4f, 0x18, 0x48, 0x89, 0x34, 0xc1, 0x48, 0xff, 0xc0, 0x48, 0x89, 0x47, 0x10, 0xeb, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0xeb, 0xfd, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_LIST_APPEND_code_holes[17] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x185, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x27d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyList_AppendTakeRefListResize, 0x0},
    {0x28d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_LIST_APPEND_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_LIST_APPEND_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_LIST_EXTEND
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_LIST_EXTEND.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d7                   movq    (%r15,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 df                   movq    (%r15,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c cf                   leaq    (%r15,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 c7                      subq    %r8, %r15
// 8b: 49 83 c7 b8                   addq    $-0x48, %r15
// 8f: 49 c1 ef 03                   shrq    $0x3, %r15
// 93: 45 89 78 40                   movl    %r15d, 0x40(%r8)
// 97: 49 8b 00                      movq    (%r8), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 5c 24 18                movq    %r11, 0x18(%rsp)
// c4: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// c9: 48 89 14 24                   movq    %rdx, (%rsp)
// cd: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 a8 00 00 00             je      0x1ab <_JIT_ENTRY+0x1ab>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 1c 24                   movq    (%rsp), %rbx
// 134: 78 21                         js      0x157 <_JIT_ENTRY+0x157>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 140: ff d0                         callq   *%rax
// 142: 49 ff 0c 24                   decq    (%r12)
// 146: 75 0f                         jne     0x157 <_JIT_ENTRY+0x157>
// 148: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014a:  R_X86_64_64  _Py_Dealloc
// 152: 4c 89 e7                      movq    %r12, %rdi
// 155: ff d0                         callq   *%rax
// 157: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 15c: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 160: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 165: 48 85 c0                      testq   %rax, %rax
// 168: 4c 8b 74 24 20                movq    0x20(%rsp), %r14
// 16d: 0f 84 2f 02 00 00             je      0x3a2 <_JIT_ENTRY+0x3a2>
// 173: 49 89 04 24                   movq    %rax, (%r12)
// 177: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 17b: 48 8b 00                      movq    (%rax), %rax
// 17e: 84 c0                         testb   %al, %al
// 180: 0f 84 a3 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 186: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000188:  R_X86_64_64  _Py_HandlePending
// 190: 48 89 df                      movq    %rbx, %rdi
// 193: ff d0                         callq   *%rax
// 195: 85 c0                         testl   %eax, %eax
// 197: 0f 84 8c 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 19d: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1a2: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 1a6: e9 f7 01 00 00                jmp     0x3a2 <_JIT_ENTRY+0x3a2>
// 1ab: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1af: bb 01 00 00 00                movl    $0x1, %ebx
// 1b4: 41 0f 43 dd                   cmovael %r13d, %ebx
// 1b8: 45 31 f6                      xorl    %r14d, %r14d
// 1bb: eb 0f                         jmp     0x1cc <_JIT_ENTRY+0x1cc>
// 1bd: 0f 1f 00                      nopl    (%rax)
// 1c0: 49 ff c6                      incq    %r14
// 1c3: 4c 39 f3                      cmpq    %r14, %rbx
// 1c6: 0f 84 37 ff ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 1cc: 4e 8b 6c f5 00                movq    (%rbp,%r14,8), %r13
// 1d1: 49 8b 45 00                   movq    (%r13), %rax
// 1d5: 48 85 c0                      testq   %rax, %rax
// 1d8: 7e 06                         jle     0x1e0 <_JIT_ENTRY+0x1e0>
// 1da: 85 c0                         testl   %eax, %eax
// 1dc: 78 e2                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 1de: eb 26                         jmp     0x206 <_JIT_ENTRY+0x206>
// 1e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e2:  R_X86_64_64  .rodata.str1.1
// 1ea: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ef: 4c 89 ea                      movq    %r13, %rdx
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _Py_NegativeRefcount
// 1fc: ff d0                         callq   *%rax
// 1fe: 49 8b 45 00                   movq    (%r13), %rax
// 202: 85 c0                         testl   %eax, %eax
// 204: 78 ba                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 210: ff d0                         callq   *%rax
// 212: 49 ff 4d 00                   decq    (%r13)
// 216: 75 a8                         jne     0x1c0 <_JIT_ENTRY+0x1c0>
// 218: 4c 89 ef                      movq    %r13, %rdi
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_Dealloc
// 225: ff d0                         callq   *%rax
// 227: eb 97                         jmp     0x1c0 <_JIT_ENTRY+0x1c0>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _JIT_OPARG
// 233: f7 d0                         notl    %eax
// 235: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 23a: 48 98                         cltq
// 23c: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 240: 49 83 c4 f8                   addq    $-0x8, %r12
// 244: 4d 8b 6c c7 f8                movq    -0x8(%r15,%rax,8), %r13
// 249: 48 01 c0                      addq    %rax, %rax
// 24c: 49 8b 3c c7                   movq    (%r15,%rax,8), %rdi
// 250: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000252:  R_X86_64_64  _PyList_Extend
// 25a: 4c 89 ee                      movq    %r13, %rsi
// 25d: ff d0                         callq   *%rax
// 25f: 48 85 c0                      testq   %rax, %rax
// 262: 74 73                         je      0x2d7 <_JIT_ENTRY+0x2d7>
// 264: 49 8b 45 00                   movq    (%r13), %rax
// 268: 48 85 c0                      testq   %rax, %rax
// 26b: 7f 22                         jg      0x28f <_JIT_ENTRY+0x28f>
// 26d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000026f:  R_X86_64_64  .rodata.str1.1
// 277: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000279:  R_X86_64_64  _Py_NegativeRefcount
// 281: be 47 05 00 00                movl    $0x547, %esi            # imm = 0x547
// 286: 4c 89 ea                      movq    %r13, %rdx
// 289: ff d0                         callq   *%rax
// 28b: 49 8b 45 00                   movq    (%r13), %rax
// 28f: 85 c0                         testl   %eax, %eax
// 291: 78 21                         js      0x2b4 <_JIT_ENTRY+0x2b4>
// 293: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000295:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 29d: ff d0                         callq   *%rax
// 29f: 49 ff 4d 00                   decq    (%r13)
// 2a3: 75 0f                         jne     0x2b4 <_JIT_ENTRY+0x2b4>
// 2a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a7:  R_X86_64_64  _Py_Dealloc
// 2af: 4c 89 ef                      movq    %r13, %rdi
// 2b2: ff d0                         callq   *%rax
// 2b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b6:  R_X86_64_64  _JIT_CONTINUE
// 2be: 4c 89 f7                      movq    %r14, %rdi
// 2c1: 4c 89 e6                      movq    %r12, %rsi
// 2c4: 48 89 da                      movq    %rbx, %rdx
// 2c7: 48 83 c4 28                   addq    $0x28, %rsp
// 2cb: 5b                            popq    %rbx
// 2cc: 41 5c                         popq    %r12
// 2ce: 41 5d                         popq    %r13
// 2d0: 41 5e                         popq    %r14
// 2d2: 41 5f                         popq    %r15
// 2d4: 5d                            popq    %rbp
// 2d5: ff e0                         jmpq    *%rax
// 2d7: 48 89 df                      movq    %rbx, %rdi
// 2da: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000002dc:  R_X86_64_64  PyExc_TypeError
// 2e4: 48 8b 33                      movq    (%rbx), %rsi
// 2e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e9:  R_X86_64_64  _PyErr_ExceptionMatches
// 2f1: ff d0                         callq   *%rax
// 2f3: 85 c0                         testl   %eax, %eax
// 2f5: 74 5b                         je      0x352 <_JIT_ENTRY+0x352>
// 2f7: 49 8b 45 08                   movq    0x8(%r13), %rax
// 2fb: 48 83 b8 d8 00 00 00 00       cmpq    $0x0, 0xd8(%rax)
// 303: 75 4d                         jne     0x352 <_JIT_ENTRY+0x352>
// 305: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000307:  R_X86_64_64  PySequence_Check
// 30f: 4c 89 ef                      movq    %r13, %rdi
// 312: ff d0                         callq   *%rax
// 314: 85 c0                         testl   %eax, %eax
// 316: 75 3a                         jne     0x352 <_JIT_ENTRY+0x352>
// 318: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031a:  R_X86_64_64  _PyErr_Clear
// 322: 4c 8b 3c 24                   movq    (%rsp), %r15
// 326: 4c 89 ff                      movq    %r15, %rdi
// 329: ff d0                         callq   *%rax
// 32b: 48 8b 33                      movq    (%rbx), %rsi
// 32e: 49 8b 45 08                   movq    0x8(%r13), %rax
// 332: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 336: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000338:  R_X86_64_64  .rodata.str1.1+0x39
// 340: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000342:  R_X86_64_64  _PyErr_Format
// 34a: 4c 89 ff                      movq    %r15, %rdi
// 34d: 31 c0                         xorl    %eax, %eax
// 34f: 41 ff d0                      callq   *%r8
// 352: 49 8b 45 00                   movq    (%r13), %rax
// 356: 48 85 c0                      testq   %rax, %rax
// 359: 7f 22                         jg      0x37d <_JIT_ENTRY+0x37d>
// 35b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000035d:  R_X86_64_64  .rodata.str1.1
// 365: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000367:  R_X86_64_64  _Py_NegativeRefcount
// 36f: be 43 05 00 00                movl    $0x543, %esi            # imm = 0x543
// 374: 4c 89 ea                      movq    %r13, %rdx
// 377: ff d0                         callq   *%rax
// 379: 49 8b 45 00                   movq    (%r13), %rax
// 37d: 85 c0                         testl   %eax, %eax
// 37f: 78 21                         js      0x3a2 <_JIT_ENTRY+0x3a2>
// 381: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000383:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 38b: ff d0                         callq   *%rax
// 38d: 49 ff 4d 00                   decq    (%r13)
// 391: 75 0f                         jne     0x3a2 <_JIT_ENTRY+0x3a2>
// 393: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000395:  R_X86_64_64  _Py_Dealloc
// 39d: 4c 89 ef                      movq    %r13, %rdi
// 3a0: ff d0                         callq   *%rax
// 3a2: 4d 29 f4                      subq    %r14, %r12
// 3a5: 49 83 c4 b8                   addq    $-0x48, %r12
// 3a9: 49 c1 ec 03                   shrq    $0x3, %r12
// 3ad: 45 89 66 40                   movl    %r12d, 0x40(%r14)
// 3b1: 31 c0                         xorl    %eax, %eax
// 3b3: e9 f8 fc ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 3b8: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_LIST_EXTEND_code_body[953] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd7, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xdf, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xcf, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x78, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x18, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x14, 0x24, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xa8, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x4d, 0x8d, 0x24, 0xc7, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x20, 0x0f, 0x84, 0x2f, 0x02, 0x00, 0x00, 0x49, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xa3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x8c, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x4d, 0x8d, 0x24, 0xc7, 0xe9, 0xf7, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xdd, 0x45, 0x31, 0xf6, 0xeb, 0x0f, 0x0f, 0x1f, 0x00, 0x49, 0xff, 0xc6, 0x4c, 0x39, 0xf3, 0x0f, 0x84, 0x37, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xf5, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x83, 0xc4, 0xf8, 0x4d, 0x8b, 0x6c, 0xc7, 0xf8, 0x48, 0x01, 0xc0, 0x49, 0x8b, 0x3c, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x73, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x47, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x89, 0xdf, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x5b, 0x49, 0x8b, 0x45, 0x08, 0x48, 0x83, 0xb8, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x75, 0x4d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x75, 0x3a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x8b, 0x33, 0x49, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x43, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x29, 0xf4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x45, 0x89, 0x66, 0x40, 0x31, 0xc0, 0xe9, 0xf8, 0xfc, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_LIST_EXTEND_code_holes[31] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyList_Extend, 0x0},
    {0x26f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x279, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x295, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2b6, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2dc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x2e9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_ExceptionMatches, 0x0},
    {0x307, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySequence_Check, 0x0},
    {0x31a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Clear, 0x0},
    {0x338, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x342, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x35d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x367, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x383, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x395, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00Value after * must be an iterable, not %.200s\x00'
// 67: 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_LIST_EXTEND_data_body[105] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x2a, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x74, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x2c, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_LIST_EXTEND_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ASSERTION_ERROR
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ASSERTION_ERROR.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4f 8d 04 c6                   leaq    (%r14,%r8,8), %r8
// 79: 49 8b 38                      movq    (%r8), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 49 29 de                      subq    %rbx, %r14
// 8a: 49 83 c6 b8                   addq    $-0x48, %r14
// 8e: 49 c1 ee 03                   shrq    $0x3, %r14
// 92: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 96: 48 8b 03                      movq    (%rbx), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// c3: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// c8: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cd: 48 85 c0                      testq   %rax, %rax
// d0: 40 0f 94 c5                   sete    %bpl
// d4: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// d8: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// dd: 49 8d 70 08                   leaq    0x8(%r8), %rsi
// e1: 48 63 d0                      movslq  %eax, %rdx
// e4: ff 51 08                      callq   *0x8(%rcx)
// e7: 48 89 04 24                   movq    %rax, (%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 ae 00 00 00             je      0x1b2 <_JIT_ENTRY+0x1b2>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// 136: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 13b: 78 21                         js      0x15e <_JIT_ENTRY+0x15e>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 147: ff d0                         callq   *%rax
// 149: 49 ff 0c 24                   decq    (%r12)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_Dealloc
// 159: 4c 89 e7                      movq    %r12, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 162: 48 8b 0c 24                   movq    (%rsp), %rcx
// 166: 48 85 c9                      testq   %rcx, %rcx
// 169: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 16e: 74 2d                         je      0x19d <_JIT_ENTRY+0x19d>
// 170: 48 89 08                      movq    %rcx, (%rax)
// 173: 49 8b 45 10                   movq    0x10(%r13), %rax
// 177: 48 8b 00                      movq    (%rax), %rax
// 17a: 84 c0                         testb   %al, %al
// 17c: 0f 84 c7 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 182: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000184:  R_X86_64_64  _Py_HandlePending
// 18c: 4c 89 ef                      movq    %r13, %rdi
// 18f: ff d0                         callq   *%rax
// 191: 85 c0                         testl   %eax, %eax
// 193: 0f 84 b0 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 199: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 19d: 48 29 d8                      subq    %rbx, %rax
// 1a0: 48 83 c0 b8                   addq    $-0x48, %rax
// 1a4: 48 c1 e8 03                   shrq    $0x3, %rax
// 1a8: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1ab: 31 c0                         xorl    %eax, %eax
// 1ad: e9 fd fe ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 1b2: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1b6: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1bc: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1c0: 31 ed                         xorl    %ebp, %ebp
// 1c2: eb 18                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 1d0: 48 ff c5                      incq    %rbp
// 1d3: 49 39 ef                      cmpq    %rbp, %r15
// 1d6: 0f 84 28 ff ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 1dc: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 1e1: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 1e5: 49 8b 45 00                   movq    (%r13), %rax
// 1e9: 48 85 c0                      testq   %rax, %rax
// 1ec: 7e 12                         jle     0x200 <_JIT_ENTRY+0x200>
// 1ee: 85 c0                         testl   %eax, %eax
// 1f0: 78 de                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1f2: eb 32                         jmp     0x226 <_JIT_ENTRY+0x226>
// 1f4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 200: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1
// 20a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 20f: 4c 89 ea                      movq    %r13, %rdx
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: ff d0                         callq   *%rax
// 21e: 49 8b 45 00                   movq    (%r13), %rax
// 222: 85 c0                         testl   %eax, %eax
// 224: 78 aa                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 230: ff d0                         callq   *%rax
// 232: 49 ff 4d 00                   decq    (%r13)
// 236: 75 98                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: ff d0                         callq   *%rax
// 247: eb 87                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  PyExc_AssertionError
// 253: 4c 8b 38                      movq    (%rax), %r15
// 256: 41 8b 07                      movl    (%r15), %eax
// 259: ff c0                         incl    %eax
// 25b: 74 0f                         je      0x26c <_JIT_ENTRY+0x26c>
// 25d: 41 89 07                      movl    %eax, (%r15)
// 260: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000262:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 26a: ff d0                         callq   *%rax
// 26c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026e:  R_X86_64_64  _JIT_OPARG
// 276: f7 d0                         notl    %eax
// 278: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 27d: 48 98                         cltq
// 27f: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 283: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 287: 48 83 c6 08                   addq    $0x8, %rsi
// 28b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028d:  R_X86_64_64  _JIT_CONTINUE
// 295: 48 89 df                      movq    %rbx, %rdi
// 298: 4c 89 ea                      movq    %r13, %rdx
// 29b: 48 83 c4 28                   addq    $0x28, %rsp
// 29f: 5b                            popq    %rbx
// 2a0: 41 5c                         popq    %r12
// 2a2: 41 5d                         popq    %r13
// 2a4: 41 5e                         popq    %r14
// 2a6: 41 5f                         popq    %r15
// 2a8: 5d                            popq    %rbp
// 2a9: ff e0                         jmpq    *%rax
// 2ab: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ASSERTION_ERROR_code_body[684] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xce, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4f, 0x8d, 0x04, 0xc6, 0x49, 0x8b, 0x38, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x70, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xae, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x74, 0x2d, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xb0, 0x00, 0x00, 0x00, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xfd, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xed, 0xeb, 0x18, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xef, 0x0f, 0x84, 0x28, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x38, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x3c, 0xc6, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ASSERTION_ERROR_code_holes[18] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_AssertionError, 0x0},
    {0x262, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x26e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x28d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ASSERTION_ERROR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ASSERTION_ERROR_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 38                   subq    $0x38, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d6                   movq    (%r14,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 de                   movq    (%r14,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4b 8d 1c ce                   leaq    (%r14,%r9,8), %rbx
// 79: 48 8b 3b                      movq    (%rbx), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 4d 29 c6                      subq    %r8, %r14
// 8a: 49 83 c6 b8                   addq    $-0x48, %r14
// 8e: 49 c1 ee 03                   shrq    $0x3, %r14
// 92: 45 89 70 40                   movl    %r14d, 0x40(%r8)
// 96: 49 8b 00                      movq    (%r8), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 38                   addq    $0x38, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 5c 24 20                movq    %r11, 0x20(%rsp)
// c3: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c8: 48 89 54 24 28                movq    %rdx, 0x28(%rsp)
// cd: 4c 89 44 24 30                movq    %r8, 0x30(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 40 0f 94 c5                   sete    %bpl
// d9: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dd: 48 8d 73 08                   leaq    0x8(%rbx), %rsi
// e1: 48 63 d0                      movslq  %eax, %rdx
// e4: ff 51 08                      callq   *0x8(%rcx)
// e7: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ee:  R_X86_64_64  _JIT_OPARG
// f6: 66 85 c0                      testw   %ax, %ax
// f9: 0f 94 c0                      sete    %al
// fc: 40 84 c5                      testb   %al, %bpl
// ff: 0f 84 ac 00 00 00             je      0x1b1 <_JIT_ENTRY+0x1b1>
// 105: 49 8b 04 24                   movq    (%r12), %rax
// 109: 48 85 c0                      testq   %rax, %rax
// 10c: 7f 22                         jg      0x130 <_JIT_ENTRY+0x130>
// 10e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000110:  R_X86_64_64  .rodata.str1.1
// 118: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011a:  R_X86_64_64  _Py_NegativeRefcount
// 122: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 127: 4c 89 e2                      movq    %r12, %rdx
// 12a: ff d0                         callq   *%rax
// 12c: 49 8b 04 24                   movq    (%r12), %rax
// 130: 85 c0                         testl   %eax, %eax
// 132: 4c 8b 7c 24 28                movq    0x28(%rsp), %r15
// 137: 78 21                         js      0x15a <_JIT_ENTRY+0x15a>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 143: ff d0                         callq   *%rax
// 145: 49 ff 0c 24                   decq    (%r12)
// 149: 75 0f                         jne     0x15a <_JIT_ENTRY+0x15a>
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_Dealloc
// 155: 4c 89 e7                      movq    %r12, %rdi
// 158: ff d0                         callq   *%rax
// 15a: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 15f: 49 8d 2c c6                   leaq    (%r14,%rax,8), %rbp
// 163: 48 8b 4c 24 18                movq    0x18(%rsp), %rcx
// 168: 48 85 c9                      testq   %rcx, %rcx
// 16b: 48 8b 5c 24 30                movq    0x30(%rsp), %rbx
// 170: 0f 84 0a 02 00 00             je      0x380 <_JIT_ENTRY+0x380>
// 176: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 17b: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 17f: 48 89 4d 00                   movq    %rcx, (%rbp)
// 183: 49 8b 47 10                   movq    0x10(%r15), %rax
// 187: 48 8b 00                      movq    (%rax), %rax
// 18a: 84 c0                         testb   %al, %al
// 18c: 0f 84 a7 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 192: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000194:  R_X86_64_64  _Py_HandlePending
// 19c: 4c 89 ff                      movq    %r15, %rdi
// 19f: ff d0                         callq   *%rax
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 0f 84 90 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 1a9: 4c 89 ed                      movq    %r13, %rbp
// 1ac: e9 cf 01 00 00                jmp     0x380 <_JIT_ENTRY+0x380>
// 1b1: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1b5: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1bb: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1bf: 31 ed                         xorl    %ebp, %ebp
// 1c1: eb 19                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// 1d0: 48 ff c5                      incq    %rbp
// 1d3: 49 39 ef                      cmpq    %rbp, %r15
// 1d6: 0f 84 29 ff ff ff             je      0x105 <_JIT_ENTRY+0x105>
// 1dc: 4c 8b 2c eb                   movq    (%rbx,%rbp,8), %r13
// 1e0: 49 8b 45 00                   movq    (%r13), %rax
// 1e4: 48 85 c0                      testq   %rax, %rax
// 1e7: 7e 07                         jle     0x1f0 <_JIT_ENTRY+0x1f0>
// 1e9: 85 c0                         testl   %eax, %eax
// 1eb: 78 e3                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1ed: eb 27                         jmp     0x216 <_JIT_ENTRY+0x216>
// 1ef: 90                            nop
// 1f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f2:  R_X86_64_64  .rodata.str1.1
// 1fa: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ff: 4c 89 ea                      movq    %r13, %rdx
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_NegativeRefcount
// 20c: ff d0                         callq   *%rax
// 20e: 49 8b 45 00                   movq    (%r13), %rax
// 212: 85 c0                         testl   %eax, %eax
// 214: 78 ba                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 220: ff d0                         callq   *%rax
// 222: 49 ff 4d 00                   decq    (%r13)
// 226: 75 a8                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 228: 4c 89 ef                      movq    %r13, %rdi
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_Dealloc
// 235: ff d0                         callq   *%rax
// 237: eb 97                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _JIT_OPARG
// 243: 89 c1                         movl    %eax, %ecx
// 245: f7 d1                         notl    %ecx
// 247: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 24d: 48 63 c9                      movslq  %ecx, %rcx
// 250: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 254: 48 83 c5 f8                   addq    $-0x8, %rbp
// 258: 4d 8b 64 ce f8                movq    -0x8(%r14,%rcx,8), %r12
// 25d: 48 8b 0b                      movq    (%rbx), %rcx
// 260: 48 8b 49 20                   movq    0x20(%rcx), %rcx
// 264: 89 c2                         movl    %eax, %edx
// 266: 81 e2 fe ff 00 00             andl    $0xfffe, %edx           # imm = 0xFFFE
// 26c: 48 8b 74 91 18                movq    0x18(%rcx,%rdx,4), %rsi
// 271: a8 01                         testb   $0x1, %al
// 273: 74 2b                         je      0x2a0 <_JIT_ENTRY+0x2a0>
// 275: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 27e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000280:  R_X86_64_64  _PyObject_GetMethod
// 288: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 28d: 4c 89 e7                      movq    %r12, %rdi
// 290: ff d0                         callq   *%rax
// 292: 85 c0                         testl   %eax, %eax
// 294: 74 42                         je      0x2d8 <_JIT_ENTRY+0x2d8>
// 296: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 29b: e9 95 00 00 00                jmp     0x335 <_JIT_ENTRY+0x335>
// 2a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a2:  R_X86_64_64  PyObject_GetAttr
// 2aa: 4c 89 e7                      movq    %r12, %rdi
// 2ad: ff d0                         callq   *%rax
// 2af: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 2b4: 49 8b 04 24                   movq    (%r12), %rax
// 2b8: 48 85 c0                      testq   %rax, %rax
// 2bb: 7f 46                         jg      0x303 <_JIT_ENTRY+0x303>
// 2bd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002bf:  R_X86_64_64  .rodata.str1.1
// 2c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c9:  R_X86_64_64  _Py_NegativeRefcount
// 2d1: be 4b 06 00 00                movl    $0x64b, %esi            # imm = 0x64B
// 2d6: eb 22                         jmp     0x2fa <_JIT_ENTRY+0x2fa>
// 2d8: 49 8b 04 24                   movq    (%r12), %rax
// 2dc: 48 85 c0                      testq   %rax, %rax
// 2df: 7f 22                         jg      0x303 <_JIT_ENTRY+0x303>
// 2e1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002e3:  R_X86_64_64  .rodata.str1.1
// 2eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ed:  R_X86_64_64  _Py_NegativeRefcount
// 2f5: be 43 06 00 00                movl    $0x643, %esi            # imm = 0x643
// 2fa: 4c 89 e2                      movq    %r12, %rdx
// 2fd: ff d0                         callq   *%rax
// 2ff: 49 8b 04 24                   movq    (%r12), %rax
// 303: 85 c0                         testl   %eax, %eax
// 305: 78 21                         js      0x328 <_JIT_ENTRY+0x328>
// 307: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000309:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 311: ff d0                         callq   *%rax
// 313: 49 ff 0c 24                   decq    (%r12)
// 317: 75 0f                         jne     0x328 <_JIT_ENTRY+0x328>
// 319: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031b:  R_X86_64_64  _Py_Dealloc
// 323: 4c 89 e7                      movq    %r12, %rdi
// 326: ff d0                         callq   *%rax
// 328: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 32d: 48 85 c0                      testq   %rax, %rax
// 330: 74 4e                         je      0x380 <_JIT_ENTRY+0x380>
// 332: 45 31 e4                      xorl    %r12d, %r12d
// 335: 48 89 45 00                   movq    %rax, (%rbp)
// 339: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033b:  R_X86_64_64  _JIT_OPARG
// 343: a8 01                         testb   $0x1, %al
// 345: 74 04                         je      0x34b <_JIT_ENTRY+0x34b>
// 347: 4d 89 65 00                   movq    %r12, (%r13)
// 34b: 89 c1                         movl    %eax, %ecx
// 34d: 83 e1 01                      andl    $0x1, %ecx
// 350: f7 d0                         notl    %eax
// 352: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 357: 48 98                         cltq
// 359: 48 01 c8                      addq    %rcx, %rax
// 35c: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 360: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000362:  R_X86_64_64  _JIT_CONTINUE
// 36a: 48 89 df                      movq    %rbx, %rdi
// 36d: 4c 89 fa                      movq    %r15, %rdx
// 370: 48 83 c4 38                   addq    $0x38, %rsp
// 374: 5b                            popq    %rbx
// 375: 41 5c                         popq    %r12
// 377: 41 5d                         popq    %r13
// 379: 41 5e                         popq    %r14
// 37b: 41 5f                         popq    %r15
// 37d: 5d                            popq    %rbp
// 37e: ff e0                         jmpq    *%rax
// 380: 48 29 dd                      subq    %rbx, %rbp
// 383: 48 83 c5 b8                   addq    $-0x48, %rbp
// 387: 48 c1 ed 03                   shrq    $0x3, %rbp
// 38b: 89 6b 40                      movl    %ebp, 0x40(%rbx)
// 38e: 31 c0                         xorl    %eax, %eax
// 390: e9 1a fd ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 395: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_code_body[918] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x38, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd6, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xde, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4b, 0x8d, 0x1c, 0xce, 0x48, 0x8b, 0x3b, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc6, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x70, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x20, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x28, 0x4c, 0x89, 0x44, 0x24, 0x30, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x73, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xac, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x28, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xc6, 0x48, 0x8b, 0x4c, 0x24, 0x18, 0x48, 0x85, 0xc9, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x0f, 0x84, 0x0a, 0x02, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x4d, 0x8d, 0x2c, 0xc6, 0x48, 0x89, 0x4d, 0x00, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xa7, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x90, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xed, 0xe9, 0xcf, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xed, 0xeb, 0x19, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xef, 0x0f, 0x84, 0x29, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x2c, 0xeb, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x27, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x83, 0xc5, 0xf8, 0x4d, 0x8b, 0x64, 0xce, 0xf8, 0x48, 0x8b, 0x0b, 0x48, 0x8b, 0x49, 0x20, 0x89, 0xc2, 0x81, 0xe2, 0xfe, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x74, 0x91, 0x18, 0xa8, 0x01, 0x74, 0x2b, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x42, 0x48, 0x8b, 0x44, 0x24, 0x08, 0xe9, 0x95, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x46, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4b, 0x06, 0x00, 0x00, 0xeb, 0x22, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x43, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x74, 0x4e, 0x45, 0x31, 0xe4, 0x48, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x04, 0x4d, 0x89, 0x65, 0x00, 0x89, 0xc1, 0x83, 0xe1, 0x01, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xdd, 0x48, 0x83, 0xc5, 0xb8, 0x48, 0xc1, 0xed, 0x03, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0x1a, 0xfd, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_code_holes[25] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xee, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x11a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x194, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x280, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_GetMethod, 0x0},
    {0x2a2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetAttr, 0x0},
    {0x2bf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2c9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2e3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x309, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x31b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x33b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x362, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_CLASS
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_CLASS.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d6                   movq    (%r14,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 de                   movq    (%r14,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c ce                   leaq    (%r14,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 c6                      subq    %r8, %r14
// 8b: 49 83 c6 b8                   addq    $-0x48, %r14
// 8f: 49 c1 ee 03                   shrq    $0x3, %r14
// 93: 45 89 70 40                   movl    %r14d, 0x40(%r8)
// 97: 49 8b 00                      movq    (%r8), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 5c 24 18                movq    %r11, 0x18(%rsp)
// c4: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// c9: 48 89 54 24 20                movq    %rdx, 0x20(%rsp)
// ce: 4c 89 04 24                   movq    %r8, (%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 b6 00 00 00             je      0x1b9 <_JIT_ENTRY+0x1b9>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 135: 78 21                         js      0x158 <_JIT_ENTRY+0x158>
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 141: ff d0                         callq   *%rax
// 143: 49 ff 0c 24                   decq    (%r12)
// 147: 75 0f                         jne     0x158 <_JIT_ENTRY+0x158>
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_Dealloc
// 153: 4c 89 e7                      movq    %r12, %rdi
// 156: ff d0                         callq   *%rax
// 158: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 15d: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 161: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 166: 48 85 d2                      testq   %rdx, %rdx
// 169: 74 35                         je      0x1a0 <_JIT_ENTRY+0x1a0>
// 16b: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 170: 4d 8d 3c ce                   leaq    (%r14,%rcx,8), %r15
// 174: 48 89 10                      movq    %rdx, (%rax)
// 177: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 17b: 48 8b 00                      movq    (%rax), %rax
// 17e: 84 c0                         testb   %al, %al
// 180: 0f 84 b3 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 186: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000188:  R_X86_64_64  _Py_HandlePending
// 190: 48 89 df                      movq    %rbx, %rdi
// 193: ff d0                         callq   *%rax
// 195: 85 c0                         testl   %eax, %eax
// 197: 0f 84 9c 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 19d: 4c 89 f8                      movq    %r15, %rax
// 1a0: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1a4: 48 29 c8                      subq    %rcx, %rax
// 1a7: 48 83 c0 b8                   addq    $-0x48, %rax
// 1ab: 48 c1 e8 03                   shrq    $0x3, %rax
// 1af: 89 41 40                      movl    %eax, 0x40(%rcx)
// 1b2: 31 c0                         xorl    %eax, %eax
// 1b4: e9 f7 fe ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 1b9: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1bd: bb 01 00 00 00                movl    $0x1, %ebx
// 1c2: 41 0f 43 dd                   cmovael %r13d, %ebx
// 1c6: 45 31 ff                      xorl    %r15d, %r15d
// 1c9: eb 11                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1cb: 0f 1f 44 00 00                nopl    (%rax,%rax)
// 1d0: 49 ff c7                      incq    %r15
// 1d3: 4c 39 fb                      cmpq    %r15, %rbx
// 1d6: 0f 84 27 ff ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 1dc: 4e 8b 6c fd 00                movq    (%rbp,%r15,8), %r13
// 1e1: 49 8b 45 00                   movq    (%r13), %rax
// 1e5: 48 85 c0                      testq   %rax, %rax
// 1e8: 7e 06                         jle     0x1f0 <_JIT_ENTRY+0x1f0>
// 1ea: 85 c0                         testl   %eax, %eax
// 1ec: 78 e2                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1ee: eb 26                         jmp     0x216 <_JIT_ENTRY+0x216>
// 1f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f2:  R_X86_64_64  .rodata.str1.1
// 1fa: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ff: 4c 89 ea                      movq    %r13, %rdx
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_NegativeRefcount
// 20c: ff d0                         callq   *%rax
// 20e: 49 8b 45 00                   movq    (%r13), %rax
// 212: 85 c0                         testl   %eax, %eax
// 214: 78 ba                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 220: ff d0                         callq   *%rax
// 222: 49 ff 4d 00                   decq    (%r13)
// 226: 75 a8                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 228: 4c 89 ef                      movq    %r13, %rdi
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_Dealloc
// 235: ff d0                         callq   *%rax
// 237: eb 97                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _JIT_OPARG
// 243: f7 d0                         notl    %eax
// 245: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 24a: 48 98                         cltq
// 24c: 4d 8b 64 c6 f8                movq    -0x8(%r14,%rax,8), %r12
// 251: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000253:  R_X86_64_64  _JIT_OPERAND
// 25b: 41 8b 45 00                   movl    (%r13), %eax
// 25f: ff c0                         incl    %eax
// 261: 75 0f                         jne     0x272 <_JIT_ENTRY+0x272>
// 263: 49 8b 04 24                   movq    (%r12), %rax
// 267: 48 85 c0                      testq   %rax, %rax
// 26a: 7e 1f                         jle     0x28b <_JIT_ENTRY+0x28b>
// 26c: 85 c0                         testl   %eax, %eax
// 26e: 79 41                         jns     0x2b1 <_JIT_ENTRY+0x2b1>
// 270: eb 60                         jmp     0x2d2 <_JIT_ENTRY+0x2d2>
// 272: 41 89 45 00                   movl    %eax, (%r13)
// 276: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000278:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 280: ff d0                         callq   *%rax
// 282: 49 8b 04 24                   movq    (%r12), %rax
// 286: 48 85 c0                      testq   %rax, %rax
// 289: 7f e1                         jg      0x26c <_JIT_ENTRY+0x26c>
// 28b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000028d:  R_X86_64_64  .rodata.str1.1
// 295: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000297:  R_X86_64_64  _Py_NegativeRefcount
// 29f: be f3 06 00 00                movl    $0x6f3, %esi            # imm = 0x6F3
// 2a4: 4c 89 e2                      movq    %r12, %rdx
// 2a7: ff d0                         callq   *%rax
// 2a9: 49 8b 04 24                   movq    (%r12), %rax
// 2ad: 85 c0                         testl   %eax, %eax
// 2af: 78 21                         js      0x2d2 <_JIT_ENTRY+0x2d2>
// 2b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2bb: ff d0                         callq   *%rax
// 2bd: 49 ff 0c 24                   decq    (%r12)
// 2c1: 75 0f                         jne     0x2d2 <_JIT_ENTRY+0x2d2>
// 2c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c5:  R_X86_64_64  _Py_Dealloc
// 2cd: 4c 89 e7                      movq    %r12, %rdi
// 2d0: ff d0                         callq   *%rax
// 2d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d4:  R_X86_64_64  _JIT_OPARG
// 2dc: 89 c1                         movl    %eax, %ecx
// 2de: f7 d1                         notl    %ecx
// 2e0: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 2e6: 48 63 c9                      movslq  %ecx, %rcx
// 2e9: 4d 89 6c ce f8                movq    %r13, -0x8(%r14,%rcx,8)
// 2ee: a8 01                         testb   $0x1, %al
// 2f0: 74 07                         je      0x2f9 <_JIT_ENTRY+0x2f9>
// 2f2: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// 2f9: 89 c1                         movl    %eax, %ecx
// 2fb: 83 e1 01                      andl    $0x1, %ecx
// 2fe: f7 d0                         notl    %eax
// 300: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 305: 48 98                         cltq
// 307: 48 01 c8                      addq    %rcx, %rax
// 30a: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 30e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000310:  R_X86_64_64  _JIT_CONTINUE
// 318: 48 8b 3c 24                   movq    (%rsp), %rdi
// 31c: 48 89 da                      movq    %rbx, %rdx
// 31f: 48 83 c4 28                   addq    $0x28, %rsp
// 323: 5b                            popq    %rbx
// 324: 41 5c                         popq    %r12
// 326: 41 5d                         popq    %r13
// 328: 41 5e                         popq    %r14
// 32a: 41 5f                         popq    %r15
// 32c: 5d                            popq    %rbp
// 32d: ff e0                         jmpq    *%rax
// 32f: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_CLASS_code_body[816] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd6, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xde, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xce, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc6, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x70, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x18, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x54, 0x24, 0x20, 0x4c, 0x89, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xb6, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x85, 0xd2, 0x74, 0x35, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x4d, 0x8d, 0x3c, 0xce, 0x48, 0x89, 0x10, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xb3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x9c, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf8, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x29, 0xc8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x41, 0x40, 0x31, 0xc0, 0xe9, 0xf7, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xdd, 0x45, 0x31, 0xff, 0xeb, 0x11, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x49, 0xff, 0xc7, 0x4c, 0x39, 0xfb, 0x0f, 0x84, 0x27, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xfd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x64, 0xc6, 0xf8, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1f, 0x85, 0xc0, 0x79, 0x41, 0xeb, 0x60, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xf3, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x4d, 0x89, 0x6c, 0xce, 0xf8, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0x83, 0xe1, 0x01, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_CLASS_code_holes[23] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x278, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x28d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x297, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2c5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2d4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x310, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_CLASS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_CLASS_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_INSTANCE_VALUE
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_INSTANCE_VALUE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c c6                   leaq    (%r14,%r8,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 49 29 de                      subq    %rbx, %r14
// 8b: 49 83 c6 b8                   addq    $-0x48, %r14
// 8f: 49 c1 ee 03                   shrq    $0x3, %r14
// 93: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 97: 48 8b 03                      movq    (%rbx), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c4: 4c 89 4c 24 18                movq    %r9, 0x18(%rsp)
// c9: 48 89 14 24                   movq    %rdx, (%rsp)
// cd: 48 89 5c 24 20                movq    %rbx, 0x20(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 b3 00 00 00             je      0x1b6 <_JIT_ENTRY+0x1b6>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 135: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 13a: 78 21                         js      0x15d <_JIT_ENTRY+0x15d>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 146: ff d0                         callq   *%rax
// 148: 49 ff 0c 24                   decq    (%r12)
// 14c: 75 0f                         jne     0x15d <_JIT_ENTRY+0x15d>
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _Py_Dealloc
// 158: 4c 89 e7                      movq    %r12, %rdi
// 15b: ff d0                         callq   *%rax
// 15d: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 162: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 166: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 16b: 48 85 c9                      testq   %rcx, %rcx
// 16e: 74 31                         je      0x1a1 <_JIT_ENTRY+0x1a1>
// 170: 4f 8d 3c fe                   leaq    (%r14,%r15,8), %r15
// 174: 48 89 08                      movq    %rcx, (%rax)
// 177: 48 8b 3c 24                   movq    (%rsp), %rdi
// 17b: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 17f: 48 8b 00                      movq    (%rax), %rax
// 182: 84 c0                         testb   %al, %al
// 184: 0f 84 af 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 18a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018c:  R_X86_64_64  _Py_HandlePending
// 194: ff d0                         callq   *%rax
// 196: 85 c0                         testl   %eax, %eax
// 198: 0f 84 9b 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 19e: 4c 89 f8                      movq    %r15, %rax
// 1a1: 48 29 d8                      subq    %rbx, %rax
// 1a4: 48 83 c0 b8                   addq    $-0x48, %rax
// 1a8: 48 c1 e8 03                   shrq    $0x3, %rax
// 1ac: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1af: 31 c0                         xorl    %eax, %eax
// 1b1: e9 fa fe ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 1b6: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1ba: bb 01 00 00 00                movl    $0x1, %ebx
// 1bf: 41 0f 43 dd                   cmovael %r13d, %ebx
// 1c3: 45 31 ff                      xorl    %r15d, %r15d
// 1c6: eb 14                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c8: 0f 1f 84 00 00 00 00 00       nopl    (%rax,%rax)
// 1d0: 49 ff c7                      incq    %r15
// 1d3: 4c 39 fb                      cmpq    %r15, %rbx
// 1d6: 0f 84 27 ff ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 1dc: 4e 8b 6c fd 00                movq    (%rbp,%r15,8), %r13
// 1e1: 49 8b 45 00                   movq    (%r13), %rax
// 1e5: 48 85 c0                      testq   %rax, %rax
// 1e8: 7e 06                         jle     0x1f0 <_JIT_ENTRY+0x1f0>
// 1ea: 85 c0                         testl   %eax, %eax
// 1ec: 78 e2                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1ee: eb 26                         jmp     0x216 <_JIT_ENTRY+0x216>
// 1f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f2:  R_X86_64_64  .rodata.str1.1
// 1fa: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ff: 4c 89 ea                      movq    %r13, %rdx
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_NegativeRefcount
// 20c: ff d0                         callq   *%rax
// 20e: 49 8b 45 00                   movq    (%r13), %rax
// 212: 85 c0                         testl   %eax, %eax
// 214: 78 ba                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 220: ff d0                         callq   *%rax
// 222: 49 ff 4d 00                   decq    (%r13)
// 226: 75 a8                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 228: 4c 89 ef                      movq    %r13, %rdi
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_Dealloc
// 235: ff d0                         callq   *%rax
// 237: eb 97                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _JIT_OPARG
// 243: f7 d0                         notl    %eax
// 245: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 24a: 48 98                         cltq
// 24c: 4d 8b 64 c6 f8                movq    -0x8(%r14,%rax,8), %r12
// 251: 49 8b 44 24 e8                movq    -0x18(%r12), %rax
// 256: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000258:  R_X86_64_64  _JIT_OPERAND
// 260: 0f b7 c9                      movzwl  %cx, %ecx
// 263: 4c 8b 6c c8 01                movq    0x1(%rax,%rcx,8), %r13
// 268: 4d 85 ed                      testq   %r13, %r13
// 26b: 74 17                         je      0x284 <_JIT_ENTRY+0x284>
// 26d: 41 8b 45 00                   movl    (%r13), %eax
// 271: ff c0                         incl    %eax
// 273: 75 17                         jne     0x28c <_JIT_ENTRY+0x28c>
// 275: 49 8b 04 24                   movq    (%r12), %rax
// 279: 48 85 c0                      testq   %rax, %rax
// 27c: 7e 27                         jle     0x2a5 <_JIT_ENTRY+0x2a5>
// 27e: 85 c0                         testl   %eax, %eax
// 280: 79 49                         jns     0x2cb <_JIT_ENTRY+0x2cb>
// 282: eb 68                         jmp     0x2ec <_JIT_ENTRY+0x2ec>
// 284: 4d 89 fe                      movq    %r15, %r14
// 287: e9 fc fd ff ff                jmp     0x88 <_JIT_ENTRY+0x88>
// 28c: 41 89 45 00                   movl    %eax, (%r13)
// 290: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000292:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 29a: ff d0                         callq   *%rax
// 29c: 49 8b 04 24                   movq    (%r12), %rax
// 2a0: 48 85 c0                      testq   %rax, %rax
// 2a3: 7f d9                         jg      0x27e <_JIT_ENTRY+0x27e>
// 2a5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002a7:  R_X86_64_64  .rodata.str1.1
// 2af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b1:  R_X86_64_64  _Py_NegativeRefcount
// 2b9: be 75 06 00 00                movl    $0x675, %esi            # imm = 0x675
// 2be: 4c 89 e2                      movq    %r12, %rdx
// 2c1: ff d0                         callq   *%rax
// 2c3: 49 8b 04 24                   movq    (%r12), %rax
// 2c7: 85 c0                         testl   %eax, %eax
// 2c9: 78 21                         js      0x2ec <_JIT_ENTRY+0x2ec>
// 2cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2d5: ff d0                         callq   *%rax
// 2d7: 49 ff 0c 24                   decq    (%r12)
// 2db: 75 0f                         jne     0x2ec <_JIT_ENTRY+0x2ec>
// 2dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002df:  R_X86_64_64  _Py_Dealloc
// 2e7: 4c 89 e7                      movq    %r12, %rdi
// 2ea: ff d0                         callq   *%rax
// 2ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ee:  R_X86_64_64  _JIT_OPARG
// 2f6: 89 c1                         movl    %eax, %ecx
// 2f8: f7 d1                         notl    %ecx
// 2fa: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 300: 48 63 c9                      movslq  %ecx, %rcx
// 303: 4d 89 6c ce f8                movq    %r13, -0x8(%r14,%rcx,8)
// 308: a8 01                         testb   $0x1, %al
// 30a: 74 07                         je      0x313 <_JIT_ENTRY+0x313>
// 30c: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// 313: 89 c1                         movl    %eax, %ecx
// 315: 83 e1 01                      andl    $0x1, %ecx
// 318: f7 d0                         notl    %eax
// 31a: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 31f: 48 98                         cltq
// 321: 48 01 c8                      addq    %rcx, %rax
// 324: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 328: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032a:  R_X86_64_64  _JIT_CONTINUE
// 332: 48 89 df                      movq    %rbx, %rdi
// 335: 48 8b 14 24                   movq    (%rsp), %rdx
// 339: 48 83 c4 28                   addq    $0x28, %rsp
// 33d: 5b                            popq    %rbx
// 33e: 41 5c                         popq    %r12
// 340: 41 5d                         popq    %r13
// 342: 41 5e                         popq    %r14
// 344: 41 5f                         popq    %r15
// 346: 5d                            popq    %rbp
// 347: ff e0                         jmpq    *%rax
// 349: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_INSTANCE_VALUE_code_body[842] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xce, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xc6, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x4c, 0x24, 0x18, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0x5c, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xb3, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x74, 0x31, 0x4f, 0x8d, 0x3c, 0xfe, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xaf, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x9b, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xfa, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xdd, 0x45, 0x31, 0xff, 0xeb, 0x14, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc7, 0x4c, 0x39, 0xfb, 0x0f, 0x84, 0x27, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xfd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x64, 0xc6, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0xe8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x6c, 0xc8, 0x01, 0x4d, 0x85, 0xed, 0x74, 0x17, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x17, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x27, 0x85, 0xc0, 0x79, 0x49, 0xeb, 0x68, 0x4d, 0x89, 0xfe, 0xe9, 0xfc, 0xfd, 0xff, 0xff, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xd9, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x75, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x4d, 0x89, 0x6c, 0xce, 0xf8, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0x83, 0xe1, 0x01, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_INSTANCE_VALUE_code_holes[23] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x258, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x292, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x2a7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2cd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2df, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2ee, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x32a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_INSTANCE_VALUE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_INSTANCE_VALUE_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_METHOD_LAZY_DICT
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_METHOD_LAZY_DICT.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4f 8d 04 c6                   leaq    (%r14,%r8,8), %r8
// 79: 49 8b 38                      movq    (%r8), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 49 29 de                      subq    %rbx, %r14
// 8a: 49 83 c6 b8                   addq    $-0x48, %r14
// 8e: 49 c1 ee 03                   shrq    $0x3, %r14
// 92: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 96: 48 8b 03                      movq    (%rbx), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// c3: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// c8: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cd: 48 85 c0                      testq   %rax, %rax
// d0: 40 0f 94 c5                   sete    %bpl
// d4: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// d8: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// dd: 49 8d 70 08                   leaq    0x8(%r8), %rsi
// e1: 48 63 d0                      movslq  %eax, %rdx
// e4: ff 51 08                      callq   *0x8(%rcx)
// e7: 48 89 04 24                   movq    %rax, (%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 ae 00 00 00             je      0x1b2 <_JIT_ENTRY+0x1b2>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// 136: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 13b: 78 21                         js      0x15e <_JIT_ENTRY+0x15e>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 147: ff d0                         callq   *%rax
// 149: 49 ff 0c 24                   decq    (%r12)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_Dealloc
// 159: 4c 89 e7                      movq    %r12, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 162: 48 8b 0c 24                   movq    (%rsp), %rcx
// 166: 48 85 c9                      testq   %rcx, %rcx
// 169: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 16e: 74 2d                         je      0x19d <_JIT_ENTRY+0x19d>
// 170: 48 89 08                      movq    %rcx, (%rax)
// 173: 49 8b 45 10                   movq    0x10(%r13), %rax
// 177: 48 8b 00                      movq    (%rax), %rax
// 17a: 84 c0                         testb   %al, %al
// 17c: 0f 84 c7 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 182: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000184:  R_X86_64_64  _Py_HandlePending
// 18c: 4c 89 ef                      movq    %r13, %rdi
// 18f: ff d0                         callq   *%rax
// 191: 85 c0                         testl   %eax, %eax
// 193: 0f 84 b0 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 199: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 19d: 48 29 d8                      subq    %rbx, %rax
// 1a0: 48 83 c0 b8                   addq    $-0x48, %rax
// 1a4: 48 c1 e8 03                   shrq    $0x3, %rax
// 1a8: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1ab: 31 c0                         xorl    %eax, %eax
// 1ad: e9 fd fe ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 1b2: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1b6: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1bc: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1c0: 31 ed                         xorl    %ebp, %ebp
// 1c2: eb 18                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 1d0: 48 ff c5                      incq    %rbp
// 1d3: 49 39 ef                      cmpq    %rbp, %r15
// 1d6: 0f 84 28 ff ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 1dc: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 1e1: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 1e5: 49 8b 45 00                   movq    (%r13), %rax
// 1e9: 48 85 c0                      testq   %rax, %rax
// 1ec: 7e 12                         jle     0x200 <_JIT_ENTRY+0x200>
// 1ee: 85 c0                         testl   %eax, %eax
// 1f0: 78 de                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1f2: eb 32                         jmp     0x226 <_JIT_ENTRY+0x226>
// 1f4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 200: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1
// 20a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 20f: 4c 89 ea                      movq    %r13, %rdx
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: ff d0                         callq   *%rax
// 21e: 49 8b 45 00                   movq    (%r13), %rax
// 222: 85 c0                         testl   %eax, %eax
// 224: 78 aa                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 230: ff d0                         callq   *%rax
// 232: 49 ff 4d 00                   decq    (%r13)
// 236: 75 98                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: ff d0                         callq   *%rax
// 247: eb 87                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _JIT_OPARG
// 253: f7 d0                         notl    %eax
// 255: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 25a: 48 98                         cltq
// 25c: 4d 8b 7c c6 f8                movq    -0x8(%r14,%rax,8), %r15
// 261: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000263:  R_X86_64_64  _JIT_OPERAND
// 26b: 41 8b 04 24                   movl    (%r12), %eax
// 26f: ff c0                         incl    %eax
// 271: 74 10                         je      0x283 <_JIT_ENTRY+0x283>
// 273: 41 89 04 24                   movl    %eax, (%r12)
// 277: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000279:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 281: ff d0                         callq   *%rax
// 283: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000285:  R_X86_64_64  _JIT_OPARG
// 28d: f7 d0                         notl    %eax
// 28f: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 294: 48 98                         cltq
// 296: 4d 89 64 c6 f8                movq    %r12, -0x8(%r14,%rax,8)
// 29b: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 29f: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 2a3: 48 83 c6 08                   addq    $0x8, %rsi
// 2a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a9:  R_X86_64_64  _JIT_CONTINUE
// 2b1: 48 89 df                      movq    %rbx, %rdi
// 2b4: 4c 89 ea                      movq    %r13, %rdx
// 2b7: 48 83 c4 28                   addq    $0x28, %rsp
// 2bb: 5b                            popq    %rbx
// 2bc: 41 5c                         popq    %r12
// 2be: 41 5d                         popq    %r13
// 2c0: 41 5e                         popq    %r14
// 2c2: 41 5f                         popq    %r15
// 2c4: 5d                            popq    %rbp
// 2c5: ff e0                         jmpq    *%rax
// 2c7: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_METHOD_LAZY_DICT_code_body[712] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xce, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4f, 0x8d, 0x04, 0xc6, 0x49, 0x8b, 0x38, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x70, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xae, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x74, 0x2d, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xb0, 0x00, 0x00, 0x00, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xfd, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xed, 0xeb, 0x18, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xef, 0x0f, 0x84, 0x28, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x7c, 0xc6, 0xf8, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x64, 0xc6, 0xf8, 0x4d, 0x89, 0x3c, 0xc6, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_METHOD_LAZY_DICT_code_holes[19] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x279, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x285, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2a9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_METHOD_LAZY_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_METHOD_LAZY_DICT_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_METHOD_NO_DICT
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_METHOD_NO_DICT.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4f 8d 04 c6                   leaq    (%r14,%r8,8), %r8
// 79: 49 8b 38                      movq    (%r8), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 49 29 de                      subq    %rbx, %r14
// 8a: 49 83 c6 b8                   addq    $-0x48, %r14
// 8e: 49 c1 ee 03                   shrq    $0x3, %r14
// 92: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 96: 48 8b 03                      movq    (%rbx), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// c3: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// c8: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cd: 48 85 c0                      testq   %rax, %rax
// d0: 40 0f 94 c5                   sete    %bpl
// d4: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// d8: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// dd: 49 8d 70 08                   leaq    0x8(%r8), %rsi
// e1: 48 63 d0                      movslq  %eax, %rdx
// e4: ff 51 08                      callq   *0x8(%rcx)
// e7: 48 89 04 24                   movq    %rax, (%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 ae 00 00 00             je      0x1b2 <_JIT_ENTRY+0x1b2>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// 136: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 13b: 78 21                         js      0x15e <_JIT_ENTRY+0x15e>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 147: ff d0                         callq   *%rax
// 149: 49 ff 0c 24                   decq    (%r12)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_Dealloc
// 159: 4c 89 e7                      movq    %r12, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 162: 48 8b 0c 24                   movq    (%rsp), %rcx
// 166: 48 85 c9                      testq   %rcx, %rcx
// 169: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 16e: 74 2d                         je      0x19d <_JIT_ENTRY+0x19d>
// 170: 48 89 08                      movq    %rcx, (%rax)
// 173: 49 8b 45 10                   movq    0x10(%r13), %rax
// 177: 48 8b 00                      movq    (%rax), %rax
// 17a: 84 c0                         testb   %al, %al
// 17c: 0f 84 c7 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 182: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000184:  R_X86_64_64  _Py_HandlePending
// 18c: 4c 89 ef                      movq    %r13, %rdi
// 18f: ff d0                         callq   *%rax
// 191: 85 c0                         testl   %eax, %eax
// 193: 0f 84 b0 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 199: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 19d: 48 29 d8                      subq    %rbx, %rax
// 1a0: 48 83 c0 b8                   addq    $-0x48, %rax
// 1a4: 48 c1 e8 03                   shrq    $0x3, %rax
// 1a8: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1ab: 31 c0                         xorl    %eax, %eax
// 1ad: e9 fd fe ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 1b2: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1b6: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1bc: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1c0: 31 ed                         xorl    %ebp, %ebp
// 1c2: eb 18                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 1d0: 48 ff c5                      incq    %rbp
// 1d3: 49 39 ef                      cmpq    %rbp, %r15
// 1d6: 0f 84 28 ff ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 1dc: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 1e1: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 1e5: 49 8b 45 00                   movq    (%r13), %rax
// 1e9: 48 85 c0                      testq   %rax, %rax
// 1ec: 7e 12                         jle     0x200 <_JIT_ENTRY+0x200>
// 1ee: 85 c0                         testl   %eax, %eax
// 1f0: 78 de                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1f2: eb 32                         jmp     0x226 <_JIT_ENTRY+0x226>
// 1f4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 200: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1
// 20a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 20f: 4c 89 ea                      movq    %r13, %rdx
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: ff d0                         callq   *%rax
// 21e: 49 8b 45 00                   movq    (%r13), %rax
// 222: 85 c0                         testl   %eax, %eax
// 224: 78 aa                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 230: ff d0                         callq   *%rax
// 232: 49 ff 4d 00                   decq    (%r13)
// 236: 75 98                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: ff d0                         callq   *%rax
// 247: eb 87                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _JIT_OPARG
// 253: f7 d0                         notl    %eax
// 255: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 25a: 48 98                         cltq
// 25c: 4d 8b 7c c6 f8                movq    -0x8(%r14,%rax,8), %r15
// 261: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000263:  R_X86_64_64  _JIT_OPERAND
// 26b: 41 8b 04 24                   movl    (%r12), %eax
// 26f: ff c0                         incl    %eax
// 271: 74 10                         je      0x283 <_JIT_ENTRY+0x283>
// 273: 41 89 04 24                   movl    %eax, (%r12)
// 277: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000279:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 281: ff d0                         callq   *%rax
// 283: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000285:  R_X86_64_64  _JIT_OPARG
// 28d: f7 d0                         notl    %eax
// 28f: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 294: 48 98                         cltq
// 296: 4d 89 64 c6 f8                movq    %r12, -0x8(%r14,%rax,8)
// 29b: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 29f: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 2a3: 48 83 c6 08                   addq    $0x8, %rsi
// 2a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a9:  R_X86_64_64  _JIT_CONTINUE
// 2b1: 48 89 df                      movq    %rbx, %rdi
// 2b4: 4c 89 ea                      movq    %r13, %rdx
// 2b7: 48 83 c4 28                   addq    $0x28, %rsp
// 2bb: 5b                            popq    %rbx
// 2bc: 41 5c                         popq    %r12
// 2be: 41 5d                         popq    %r13
// 2c0: 41 5e                         popq    %r14
// 2c2: 41 5f                         popq    %r15
// 2c4: 5d                            popq    %rbp
// 2c5: ff e0                         jmpq    *%rax
// 2c7: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_METHOD_NO_DICT_code_body[712] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xce, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4f, 0x8d, 0x04, 0xc6, 0x49, 0x8b, 0x38, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x70, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xae, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x74, 0x2d, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xb0, 0x00, 0x00, 0x00, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xfd, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xed, 0xeb, 0x18, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xef, 0x0f, 0x84, 0x28, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x7c, 0xc6, 0xf8, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x64, 0xc6, 0xf8, 0x4d, 0x89, 0x3c, 0xc6, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_METHOD_NO_DICT_code_holes[19] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x279, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x285, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2a9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_METHOD_NO_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_METHOD_NO_DICT_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_METHOD_WITH_VALUES
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_METHOD_WITH_VALUES.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4f 8d 04 c6                   leaq    (%r14,%r8,8), %r8
// 79: 49 8b 38                      movq    (%r8), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 49 29 de                      subq    %rbx, %r14
// 8a: 49 83 c6 b8                   addq    $-0x48, %r14
// 8e: 49 c1 ee 03                   shrq    $0x3, %r14
// 92: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 96: 48 8b 03                      movq    (%rbx), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// c3: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// c8: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cd: 48 85 c0                      testq   %rax, %rax
// d0: 40 0f 94 c5                   sete    %bpl
// d4: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// d8: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// dd: 49 8d 70 08                   leaq    0x8(%r8), %rsi
// e1: 48 63 d0                      movslq  %eax, %rdx
// e4: ff 51 08                      callq   *0x8(%rcx)
// e7: 48 89 04 24                   movq    %rax, (%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 ae 00 00 00             je      0x1b2 <_JIT_ENTRY+0x1b2>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// 136: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 13b: 78 21                         js      0x15e <_JIT_ENTRY+0x15e>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 147: ff d0                         callq   *%rax
// 149: 49 ff 0c 24                   decq    (%r12)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_Dealloc
// 159: 4c 89 e7                      movq    %r12, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 162: 48 8b 0c 24                   movq    (%rsp), %rcx
// 166: 48 85 c9                      testq   %rcx, %rcx
// 169: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 16e: 74 2d                         je      0x19d <_JIT_ENTRY+0x19d>
// 170: 48 89 08                      movq    %rcx, (%rax)
// 173: 49 8b 45 10                   movq    0x10(%r13), %rax
// 177: 48 8b 00                      movq    (%rax), %rax
// 17a: 84 c0                         testb   %al, %al
// 17c: 0f 84 c7 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 182: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000184:  R_X86_64_64  _Py_HandlePending
// 18c: 4c 89 ef                      movq    %r13, %rdi
// 18f: ff d0                         callq   *%rax
// 191: 85 c0                         testl   %eax, %eax
// 193: 0f 84 b0 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 199: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 19d: 48 29 d8                      subq    %rbx, %rax
// 1a0: 48 83 c0 b8                   addq    $-0x48, %rax
// 1a4: 48 c1 e8 03                   shrq    $0x3, %rax
// 1a8: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1ab: 31 c0                         xorl    %eax, %eax
// 1ad: e9 fd fe ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 1b2: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1b6: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1bc: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1c0: 31 ed                         xorl    %ebp, %ebp
// 1c2: eb 18                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 1d0: 48 ff c5                      incq    %rbp
// 1d3: 49 39 ef                      cmpq    %rbp, %r15
// 1d6: 0f 84 28 ff ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 1dc: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 1e1: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 1e5: 49 8b 45 00                   movq    (%r13), %rax
// 1e9: 48 85 c0                      testq   %rax, %rax
// 1ec: 7e 12                         jle     0x200 <_JIT_ENTRY+0x200>
// 1ee: 85 c0                         testl   %eax, %eax
// 1f0: 78 de                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1f2: eb 32                         jmp     0x226 <_JIT_ENTRY+0x226>
// 1f4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 200: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1
// 20a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 20f: 4c 89 ea                      movq    %r13, %rdx
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: ff d0                         callq   *%rax
// 21e: 49 8b 45 00                   movq    (%r13), %rax
// 222: 85 c0                         testl   %eax, %eax
// 224: 78 aa                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 230: ff d0                         callq   *%rax
// 232: 49 ff 4d 00                   decq    (%r13)
// 236: 75 98                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: ff d0                         callq   *%rax
// 247: eb 87                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _JIT_OPARG
// 253: f7 d0                         notl    %eax
// 255: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 25a: 48 98                         cltq
// 25c: 4d 8b 7c c6 f8                movq    -0x8(%r14,%rax,8), %r15
// 261: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000263:  R_X86_64_64  _JIT_OPERAND
// 26b: 41 8b 04 24                   movl    (%r12), %eax
// 26f: ff c0                         incl    %eax
// 271: 74 10                         je      0x283 <_JIT_ENTRY+0x283>
// 273: 41 89 04 24                   movl    %eax, (%r12)
// 277: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000279:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 281: ff d0                         callq   *%rax
// 283: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000285:  R_X86_64_64  _JIT_OPARG
// 28d: f7 d0                         notl    %eax
// 28f: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 294: 48 98                         cltq
// 296: 4d 89 64 c6 f8                movq    %r12, -0x8(%r14,%rax,8)
// 29b: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 29f: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 2a3: 48 83 c6 08                   addq    $0x8, %rsi
// 2a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a9:  R_X86_64_64  _JIT_CONTINUE
// 2b1: 48 89 df                      movq    %rbx, %rdi
// 2b4: 4c 89 ea                      movq    %r13, %rdx
// 2b7: 48 83 c4 28                   addq    $0x28, %rsp
// 2bb: 5b                            popq    %rbx
// 2bc: 41 5c                         popq    %r12
// 2be: 41 5d                         popq    %r13
// 2c0: 41 5e                         popq    %r14
// 2c2: 41 5f                         popq    %r15
// 2c4: 5d                            popq    %rbp
// 2c5: ff e0                         jmpq    *%rax
// 2c7: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_METHOD_WITH_VALUES_code_body[712] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xce, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4f, 0x8d, 0x04, 0xc6, 0x49, 0x8b, 0x38, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x70, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xae, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x74, 0x2d, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xb0, 0x00, 0x00, 0x00, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xfd, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xed, 0xeb, 0x18, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xef, 0x0f, 0x84, 0x28, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x7c, 0xc6, 0xf8, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x64, 0xc6, 0xf8, 0x4d, 0x89, 0x3c, 0xc6, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_METHOD_WITH_VALUES_code_holes[19] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x279, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x285, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2a9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_METHOD_WITH_VALUES_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_METHOD_WITH_VALUES_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_MODULE
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_MODULE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fd                      movq    %rdi, %rbp
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4b 8d 1c c6                   leaq    (%r14,%r8,8), %rbx
// 79: 48 8b 3b                      movq    (%rbx), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 38                         je      0xbf <_JIT_ENTRY+0xbf>
// 87: 49 29 ee                      subq    %rbp, %r14
// 8a: 49 83 c6 b8                   addq    $-0x48, %r14
// 8e: 49 c1 ee 03                   shrq    $0x3, %r14
// 92: 44 89 75 40                   movl    %r14d, 0x40(%rbp)
// 96: 48 8b 45 00                   movq    (%rbp), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c4: 4c 89 4c 24 18                movq    %r9, 0x18(%rsp)
// c9: 48 89 14 24                   movq    %rdx, (%rsp)
// cd: 48 89 6c 24 20                movq    %rbp, 0x20(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 40 0f 94 c5                   sete    %bpl
// d9: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dd: 48 8d 73 08                   leaq    0x8(%rbx), %rsi
// e1: 48 63 d0                      movslq  %eax, %rdx
// e4: ff 51 08                      callq   *0x8(%rcx)
// e7: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ee:  R_X86_64_64  _JIT_OPARG
// f6: 66 85 c0                      testw   %ax, %ax
// f9: 0f 94 c0                      sete    %al
// fc: 40 84 c5                      testb   %al, %bpl
// ff: 0f 84 b3 00 00 00             je      0x1b8 <_JIT_ENTRY+0x1b8>
// 105: 49 8b 04 24                   movq    (%r12), %rax
// 109: 48 85 c0                      testq   %rax, %rax
// 10c: 7f 22                         jg      0x130 <_JIT_ENTRY+0x130>
// 10e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000110:  R_X86_64_64  .rodata.str1.1
// 118: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011a:  R_X86_64_64  _Py_NegativeRefcount
// 122: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 127: 4c 89 e2                      movq    %r12, %rdx
// 12a: ff d0                         callq   *%rax
// 12c: 49 8b 04 24                   movq    (%r12), %rax
// 130: 85 c0                         testl   %eax, %eax
// 132: 48 8b 6c 24 20                movq    0x20(%rsp), %rbp
// 137: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// 13c: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 141: 78 21                         js      0x164 <_JIT_ENTRY+0x164>
// 143: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000145:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 14d: ff d0                         callq   *%rax
// 14f: 49 ff 0c 24                   decq    (%r12)
// 153: 75 0f                         jne     0x164 <_JIT_ENTRY+0x164>
// 155: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000157:  R_X86_64_64  _Py_Dealloc
// 15f: 4c 89 e7                      movq    %r12, %rdi
// 162: ff d0                         callq   *%rax
// 164: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 168: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 16d: 48 85 c9                      testq   %rcx, %rcx
// 170: 74 31                         je      0x1a3 <_JIT_ENTRY+0x1a3>
// 172: 4d 8d 3c de                   leaq    (%r14,%rbx,8), %r15
// 176: 48 89 08                      movq    %rcx, (%rax)
// 179: 48 8b 3c 24                   movq    (%rsp), %rdi
// 17d: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 181: 48 8b 00                      movq    (%rax), %rax
// 184: 84 c0                         testb   %al, %al
// 186: 0f 84 ad 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _Py_HandlePending
// 196: ff d0                         callq   *%rax
// 198: 85 c0                         testl   %eax, %eax
// 19a: 0f 84 99 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 1a0: 4c 89 f8                      movq    %r15, %rax
// 1a3: 48 29 e8                      subq    %rbp, %rax
// 1a6: 48 83 c0 b8                   addq    $-0x48, %rax
// 1aa: 48 c1 e8 03                   shrq    $0x3, %rax
// 1ae: 89 45 40                      movl    %eax, 0x40(%rbp)
// 1b1: 31 c0                         xorl    %eax, %eax
// 1b3: e9 f8 fe ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 1b8: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1bc: bd 01 00 00 00                movl    $0x1, %ebp
// 1c1: 41 0f 43 ed                   cmovael %r13d, %ebp
// 1c5: 45 31 ff                      xorl    %r15d, %r15d
// 1c8: eb 12                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1ca: 66 0f 1f 44 00 00             nopw    (%rax,%rax)
// 1d0: 49 ff c7                      incq    %r15
// 1d3: 4c 39 fd                      cmpq    %r15, %rbp
// 1d6: 0f 84 29 ff ff ff             je      0x105 <_JIT_ENTRY+0x105>
// 1dc: 4e 8b 2c fb                   movq    (%rbx,%r15,8), %r13
// 1e0: 49 8b 45 00                   movq    (%r13), %rax
// 1e4: 48 85 c0                      testq   %rax, %rax
// 1e7: 7e 07                         jle     0x1f0 <_JIT_ENTRY+0x1f0>
// 1e9: 85 c0                         testl   %eax, %eax
// 1eb: 78 e3                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1ed: eb 27                         jmp     0x216 <_JIT_ENTRY+0x216>
// 1ef: 90                            nop
// 1f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f2:  R_X86_64_64  .rodata.str1.1
// 1fa: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ff: 4c 89 ea                      movq    %r13, %rdx
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_NegativeRefcount
// 20c: ff d0                         callq   *%rax
// 20e: 49 8b 45 00                   movq    (%r13), %rax
// 212: 85 c0                         testl   %eax, %eax
// 214: 78 ba                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 220: ff d0                         callq   *%rax
// 222: 49 ff 4d 00                   decq    (%r13)
// 226: 75 a8                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 228: 4c 89 ef                      movq    %r13, %rdi
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_Dealloc
// 235: ff d0                         callq   *%rax
// 237: eb 97                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _JIT_OPARG
// 243: f7 d0                         notl    %eax
// 245: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 24a: 48 98                         cltq
// 24c: 4d 8b 64 c6 f8                movq    -0x8(%r14,%rax,8), %r12
// 251: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 256: 48 8b 40 20                   movq    0x20(%rax), %rax
// 25a: 0f b6 48 09                   movzbl  0x9(%rax), %ecx
// 25e: ba 01 00 00 00                movl    $0x1, %edx
// 263: 48 d3 e2                      shlq    %cl, %rdx
// 266: 48 01 c2                      addq    %rax, %rdx
// 269: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026b:  R_X86_64_64  _JIT_OPERAND
// 273: 0f b7 c0                      movzwl  %ax, %eax
// 276: 48 c1 e0 04                   shlq    $0x4, %rax
// 27a: 48 8b 5c 10 28                movq    0x28(%rax,%rdx), %rbx
// 27f: 48 85 db                      testq   %rbx, %rbx
// 282: 74 15                         je      0x299 <_JIT_ENTRY+0x299>
// 284: 8b 03                         movl    (%rbx), %eax
// 286: ff c0                         incl    %eax
// 288: 75 17                         jne     0x2a1 <_JIT_ENTRY+0x2a1>
// 28a: 49 8b 04 24                   movq    (%r12), %rax
// 28e: 48 85 c0                      testq   %rax, %rax
// 291: 7e 25                         jle     0x2b8 <_JIT_ENTRY+0x2b8>
// 293: 85 c0                         testl   %eax, %eax
// 295: 79 47                         jns     0x2de <_JIT_ENTRY+0x2de>
// 297: eb 66                         jmp     0x2ff <_JIT_ENTRY+0x2ff>
// 299: 4d 89 fe                      movq    %r15, %r14
// 29c: e9 e6 fd ff ff                jmp     0x87 <_JIT_ENTRY+0x87>
// 2a1: 89 03                         movl    %eax, (%rbx)
// 2a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a5:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 2ad: ff d0                         callq   *%rax
// 2af: 49 8b 04 24                   movq    (%r12), %rax
// 2b3: 48 85 c0                      testq   %rax, %rax
// 2b6: 7f db                         jg      0x293 <_JIT_ENTRY+0x293>
// 2b8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002ba:  R_X86_64_64  .rodata.str1.1
// 2c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c4:  R_X86_64_64  _Py_NegativeRefcount
// 2cc: be 97 06 00 00                movl    $0x697, %esi            # imm = 0x697
// 2d1: 4c 89 e2                      movq    %r12, %rdx
// 2d4: ff d0                         callq   *%rax
// 2d6: 49 8b 04 24                   movq    (%r12), %rax
// 2da: 85 c0                         testl   %eax, %eax
// 2dc: 78 21                         js      0x2ff <_JIT_ENTRY+0x2ff>
// 2de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2e8: ff d0                         callq   *%rax
// 2ea: 49 ff 0c 24                   decq    (%r12)
// 2ee: 75 0f                         jne     0x2ff <_JIT_ENTRY+0x2ff>
// 2f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f2:  R_X86_64_64  _Py_Dealloc
// 2fa: 4c 89 e7                      movq    %r12, %rdi
// 2fd: ff d0                         callq   *%rax
// 2ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000301:  R_X86_64_64  _JIT_OPARG
// 309: 89 c1                         movl    %eax, %ecx
// 30b: f7 d1                         notl    %ecx
// 30d: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 313: 48 63 c9                      movslq  %ecx, %rcx
// 316: 49 89 5c ce f8                movq    %rbx, -0x8(%r14,%rcx,8)
// 31b: a8 01                         testb   $0x1, %al
// 31d: 74 07                         je      0x326 <_JIT_ENTRY+0x326>
// 31f: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// 326: 89 c1                         movl    %eax, %ecx
// 328: 83 e1 01                      andl    $0x1, %ecx
// 32b: f7 d0                         notl    %eax
// 32d: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 332: 48 98                         cltq
// 334: 48 01 c8                      addq    %rcx, %rax
// 337: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 33b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033d:  R_X86_64_64  _JIT_CONTINUE
// 345: 48 89 ef                      movq    %rbp, %rdi
// 348: 48 8b 14 24                   movq    (%rsp), %rdx
// 34c: 48 83 c4 28                   addq    $0x28, %rsp
// 350: 5b                            popq    %rbx
// 351: 41 5c                         popq    %r12
// 353: 41 5d                         popq    %r13
// 355: 41 5e                         popq    %r14
// 357: 41 5f                         popq    %r15
// 359: 5d                            popq    %rbp
// 35a: ff e0                         jmpq    *%rax
// 35c: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_MODULE_code_body[861] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfd, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xce, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4b, 0x8d, 0x1c, 0xc6, 0x48, 0x8b, 0x3b, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x38, 0x49, 0x29, 0xee, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x75, 0x40, 0x48, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x4c, 0x24, 0x18, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0x6c, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x73, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xb3, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x20, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x74, 0x31, 0x4d, 0x8d, 0x3c, 0xde, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xad, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x99, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x45, 0x40, 0x31, 0xc0, 0xe9, 0xf8, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xed, 0x45, 0x31, 0xff, 0xeb, 0x12, 0x66, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x49, 0xff, 0xc7, 0x4c, 0x39, 0xfd, 0x0f, 0x84, 0x29, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x2c, 0xfb, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x27, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x64, 0xc6, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x40, 0x20, 0x0f, 0xb6, 0x48, 0x09, 0xba, 0x01, 0x00, 0x00, 0x00, 0x48, 0xd3, 0xe2, 0x48, 0x01, 0xc2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x04, 0x48, 0x8b, 0x5c, 0x10, 0x28, 0x48, 0x85, 0xdb, 0x74, 0x15, 0x8b, 0x03, 0xff, 0xc0, 0x75, 0x17, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x25, 0x85, 0xc0, 0x79, 0x47, 0xeb, 0x66, 0x4d, 0x89, 0xfe, 0xe9, 0xe6, 0xfd, 0xff, 0xff, 0x89, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xdb, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x97, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x5c, 0xce, 0xf8, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0x83, 0xe1, 0x01, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_MODULE_code_holes[23] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xee, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x11a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x157, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x26b, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x2a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x2ba, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2c4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2f2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x301, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x33d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_MODULE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_MODULE_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d6                   movq    (%r14,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 de                   movq    (%r14,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c ce                   leaq    (%r14,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 c6                      subq    %r8, %r14
// 8b: 49 83 c6 b8                   addq    $-0x48, %r14
// 8f: 49 c1 ee 03                   shrq    $0x3, %r14
// 93: 45 89 70 40                   movl    %r14d, 0x40(%r8)
// 97: 49 8b 00                      movq    (%r8), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 5c 24 18                movq    %r11, 0x18(%rsp)
// c4: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// c9: 48 89 14 24                   movq    %rdx, (%rsp)
// cd: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 b7 00 00 00             je      0x1ba <_JIT_ENTRY+0x1ba>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 1c 24                   movq    (%rsp), %rbx
// 134: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 139: 78 21                         js      0x15c <_JIT_ENTRY+0x15c>
// 13b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 145: ff d0                         callq   *%rax
// 147: 49 ff 0c 24                   decq    (%r12)
// 14b: 75 0f                         jne     0x15c <_JIT_ENTRY+0x15c>
// 14d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014f:  R_X86_64_64  _Py_Dealloc
// 157: 4c 89 e7                      movq    %r12, %rdi
// 15a: ff d0                         callq   *%rax
// 15c: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 161: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 165: 4d 85 ed                      testq   %r13, %r13
// 168: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// 16d: 74 35                         je      0x1a4 <_JIT_ENTRY+0x1a4>
// 16f: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 174: 4d 8d 24 ce                   leaq    (%r14,%rcx,8), %r12
// 178: 4c 89 28                      movq    %r13, (%rax)
// 17b: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 17f: 48 8b 00                      movq    (%rax), %rax
// 182: 84 c0                         testb   %al, %al
// 184: 0f 84 af 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 18a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018c:  R_X86_64_64  _Py_HandlePending
// 194: 48 89 df                      movq    %rbx, %rdi
// 197: ff d0                         callq   *%rax
// 199: 85 c0                         testl   %eax, %eax
// 19b: 0f 84 98 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 1a1: 4c 89 e0                      movq    %r12, %rax
// 1a4: 4c 29 f8                      subq    %r15, %rax
// 1a7: 48 83 c0 b8                   addq    $-0x48, %rax
// 1ab: 48 c1 e8 03                   shrq    $0x3, %rax
// 1af: 41 89 47 40                   movl    %eax, 0x40(%r15)
// 1b3: 31 c0                         xorl    %eax, %eax
// 1b5: e9 f6 fe ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 1ba: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1be: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1c4: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1c8: 31 db                         xorl    %ebx, %ebx
// 1ca: eb 10                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1cc: 0f 1f 40 00                   nopl    (%rax)
// 1d0: 48 ff c3                      incq    %rbx
// 1d3: 49 39 df                      cmpq    %rbx, %r15
// 1d6: 0f 84 27 ff ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 1dc: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1e1: 49 8b 45 00                   movq    (%r13), %rax
// 1e5: 48 85 c0                      testq   %rax, %rax
// 1e8: 7e 06                         jle     0x1f0 <_JIT_ENTRY+0x1f0>
// 1ea: 85 c0                         testl   %eax, %eax
// 1ec: 78 e2                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1ee: eb 26                         jmp     0x216 <_JIT_ENTRY+0x216>
// 1f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f2:  R_X86_64_64  .rodata.str1.1
// 1fa: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ff: 4c 89 ea                      movq    %r13, %rdx
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_NegativeRefcount
// 20c: ff d0                         callq   *%rax
// 20e: 49 8b 45 00                   movq    (%r13), %rax
// 212: 85 c0                         testl   %eax, %eax
// 214: 78 ba                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 220: ff d0                         callq   *%rax
// 222: 49 ff 4d 00                   decq    (%r13)
// 226: 75 a8                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 228: 4c 89 ef                      movq    %r13, %rdi
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_Dealloc
// 235: ff d0                         callq   *%rax
// 237: eb 97                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _JIT_OPARG
// 243: f7 d0                         notl    %eax
// 245: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 24a: 48 98                         cltq
// 24c: 4d 8b 6c c6 f8                movq    -0x8(%r14,%rax,8), %r13
// 251: 49 8b 45 00                   movq    (%r13), %rax
// 255: 48 85 c0                      testq   %rax, %rax
// 258: 7f 22                         jg      0x27c <_JIT_ENTRY+0x27c>
// 25a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000025c:  R_X86_64_64  .rodata.str1.1
// 264: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000266:  R_X86_64_64  _Py_NegativeRefcount
// 26e: be d9 09 00 00                movl    $0x9d9, %esi            # imm = 0x9D9
// 273: 4c 89 ea                      movq    %r13, %rdx
// 276: ff d0                         callq   *%rax
// 278: 49 8b 45 00                   movq    (%r13), %rax
// 27c: 85 c0                         testl   %eax, %eax
// 27e: 78 21                         js      0x2a1 <_JIT_ENTRY+0x2a1>
// 280: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000282:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 28a: ff d0                         callq   *%rax
// 28c: 49 ff 4d 00                   decq    (%r13)
// 290: 75 0f                         jne     0x2a1 <_JIT_ENTRY+0x2a1>
// 292: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000294:  R_X86_64_64  _Py_Dealloc
// 29c: 4c 89 ef                      movq    %r13, %rdi
// 29f: ff d0                         callq   *%rax
// 2a1: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000002a3:  R_X86_64_64  _JIT_OPERAND
// 2ab: 8b 03                         movl    (%rbx), %eax
// 2ad: ff c0                         incl    %eax
// 2af: 74 0e                         je      0x2bf <_JIT_ENTRY+0x2bf>
// 2b1: 89 03                         movl    %eax, (%rbx)
// 2b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b5:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 2bd: ff d0                         callq   *%rax
// 2bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c1:  R_X86_64_64  _JIT_OPARG
// 2c9: f7 d0                         notl    %eax
// 2cb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 2d0: 48 98                         cltq
// 2d2: 49 89 5c c6 f8                movq    %rbx, -0x8(%r14,%rax,8)
// 2d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d9:  R_X86_64_64  _JIT_CONTINUE
// 2e1: 4c 89 ff                      movq    %r15, %rdi
// 2e4: 4c 89 e6                      movq    %r12, %rsi
// 2e7: 48 8b 14 24                   movq    (%rsp), %rdx
// 2eb: 48 83 c4 28                   addq    $0x28, %rsp
// 2ef: 5b                            popq    %rbx
// 2f0: 41 5c                         popq    %r12
// 2f2: 41 5d                         popq    %r13
// 2f4: 41 5e                         popq    %r14
// 2f6: 41 5f                         popq    %r15
// 2f8: 5d                            popq    %rbp
// 2f9: ff e0                         jmpq    *%rax
// 2fb: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT_code_body[764] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd6, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xde, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xce, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc6, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x70, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x18, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x14, 0x24, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xb7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x04, 0xc6, 0x4d, 0x85, 0xed, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x74, 0x35, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x4d, 0x8d, 0x24, 0xce, 0x4c, 0x89, 0x28, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xaf, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x98, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0x4c, 0x29, 0xf8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x47, 0x40, 0x31, 0xc0, 0xe9, 0xf6, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xdb, 0xeb, 0x10, 0x0f, 0x1f, 0x40, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0x27, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x6c, 0xc6, 0xf8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd9, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x03, 0xff, 0xc0, 0x74, 0x0e, 0x89, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x5c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT_code_holes[23] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x25c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x266, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x282, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x294, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2a3, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x2b5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x2c1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2d9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d6                   movq    (%r14,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 de                   movq    (%r14,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c ce                   leaq    (%r14,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 c6                      subq    %r8, %r14
// 8b: 49 83 c6 b8                   addq    $-0x48, %r14
// 8f: 49 c1 ee 03                   shrq    $0x3, %r14
// 93: 45 89 70 40                   movl    %r14d, 0x40(%r8)
// 97: 49 8b 00                      movq    (%r8), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 5c 24 18                movq    %r11, 0x18(%rsp)
// c4: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// c9: 48 89 14 24                   movq    %rdx, (%rsp)
// cd: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 b7 00 00 00             je      0x1ba <_JIT_ENTRY+0x1ba>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 1c 24                   movq    (%rsp), %rbx
// 134: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 139: 78 21                         js      0x15c <_JIT_ENTRY+0x15c>
// 13b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 145: ff d0                         callq   *%rax
// 147: 49 ff 0c 24                   decq    (%r12)
// 14b: 75 0f                         jne     0x15c <_JIT_ENTRY+0x15c>
// 14d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014f:  R_X86_64_64  _Py_Dealloc
// 157: 4c 89 e7                      movq    %r12, %rdi
// 15a: ff d0                         callq   *%rax
// 15c: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 161: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 165: 4d 85 ed                      testq   %r13, %r13
// 168: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// 16d: 74 35                         je      0x1a4 <_JIT_ENTRY+0x1a4>
// 16f: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 174: 4d 8d 24 ce                   leaq    (%r14,%rcx,8), %r12
// 178: 4c 89 28                      movq    %r13, (%rax)
// 17b: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 17f: 48 8b 00                      movq    (%rax), %rax
// 182: 84 c0                         testb   %al, %al
// 184: 0f 84 af 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 18a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018c:  R_X86_64_64  _Py_HandlePending
// 194: 48 89 df                      movq    %rbx, %rdi
// 197: ff d0                         callq   *%rax
// 199: 85 c0                         testl   %eax, %eax
// 19b: 0f 84 98 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 1a1: 4c 89 e0                      movq    %r12, %rax
// 1a4: 4c 29 f8                      subq    %r15, %rax
// 1a7: 48 83 c0 b8                   addq    $-0x48, %rax
// 1ab: 48 c1 e8 03                   shrq    $0x3, %rax
// 1af: 41 89 47 40                   movl    %eax, 0x40(%r15)
// 1b3: 31 c0                         xorl    %eax, %eax
// 1b5: e9 f6 fe ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 1ba: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1be: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1c4: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1c8: 31 db                         xorl    %ebx, %ebx
// 1ca: eb 10                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1cc: 0f 1f 40 00                   nopl    (%rax)
// 1d0: 48 ff c3                      incq    %rbx
// 1d3: 49 39 df                      cmpq    %rbx, %r15
// 1d6: 0f 84 27 ff ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 1dc: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1e1: 49 8b 45 00                   movq    (%r13), %rax
// 1e5: 48 85 c0                      testq   %rax, %rax
// 1e8: 7e 06                         jle     0x1f0 <_JIT_ENTRY+0x1f0>
// 1ea: 85 c0                         testl   %eax, %eax
// 1ec: 78 e2                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1ee: eb 26                         jmp     0x216 <_JIT_ENTRY+0x216>
// 1f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f2:  R_X86_64_64  .rodata.str1.1
// 1fa: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ff: 4c 89 ea                      movq    %r13, %rdx
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_NegativeRefcount
// 20c: ff d0                         callq   *%rax
// 20e: 49 8b 45 00                   movq    (%r13), %rax
// 212: 85 c0                         testl   %eax, %eax
// 214: 78 ba                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 220: ff d0                         callq   *%rax
// 222: 49 ff 4d 00                   decq    (%r13)
// 226: 75 a8                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 228: 4c 89 ef                      movq    %r13, %rdi
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_Dealloc
// 235: ff d0                         callq   *%rax
// 237: eb 97                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _JIT_OPARG
// 243: f7 d0                         notl    %eax
// 245: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 24a: 48 98                         cltq
// 24c: 4d 8b 6c c6 f8                movq    -0x8(%r14,%rax,8), %r13
// 251: 49 8b 45 00                   movq    (%r13), %rax
// 255: 48 85 c0                      testq   %rax, %rax
// 258: 7f 22                         jg      0x27c <_JIT_ENTRY+0x27c>
// 25a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000025c:  R_X86_64_64  .rodata.str1.1
// 264: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000266:  R_X86_64_64  _Py_NegativeRefcount
// 26e: be c8 09 00 00                movl    $0x9c8, %esi            # imm = 0x9C8
// 273: 4c 89 ea                      movq    %r13, %rdx
// 276: ff d0                         callq   *%rax
// 278: 49 8b 45 00                   movq    (%r13), %rax
// 27c: 85 c0                         testl   %eax, %eax
// 27e: 78 21                         js      0x2a1 <_JIT_ENTRY+0x2a1>
// 280: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000282:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 28a: ff d0                         callq   *%rax
// 28c: 49 ff 4d 00                   decq    (%r13)
// 290: 75 0f                         jne     0x2a1 <_JIT_ENTRY+0x2a1>
// 292: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000294:  R_X86_64_64  _Py_Dealloc
// 29c: 4c 89 ef                      movq    %r13, %rdi
// 29f: ff d0                         callq   *%rax
// 2a1: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000002a3:  R_X86_64_64  _JIT_OPERAND
// 2ab: 8b 03                         movl    (%rbx), %eax
// 2ad: ff c0                         incl    %eax
// 2af: 74 0e                         je      0x2bf <_JIT_ENTRY+0x2bf>
// 2b1: 89 03                         movl    %eax, (%rbx)
// 2b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b5:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 2bd: ff d0                         callq   *%rax
// 2bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c1:  R_X86_64_64  _JIT_OPARG
// 2c9: f7 d0                         notl    %eax
// 2cb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 2d0: 48 98                         cltq
// 2d2: 49 89 5c c6 f8                movq    %rbx, -0x8(%r14,%rax,8)
// 2d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d9:  R_X86_64_64  _JIT_CONTINUE
// 2e1: 4c 89 ff                      movq    %r15, %rdi
// 2e4: 4c 89 e6                      movq    %r12, %rsi
// 2e7: 48 8b 14 24                   movq    (%rsp), %rdx
// 2eb: 48 83 c4 28                   addq    $0x28, %rsp
// 2ef: 5b                            popq    %rbx
// 2f0: 41 5c                         popq    %r12
// 2f2: 41 5d                         popq    %r13
// 2f4: 41 5e                         popq    %r14
// 2f6: 41 5f                         popq    %r15
// 2f8: 5d                            popq    %rbp
// 2f9: ff e0                         jmpq    *%rax
// 2fb: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES_code_body[764] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd6, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xde, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xce, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc6, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x70, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x18, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x14, 0x24, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xb7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x04, 0xc6, 0x4d, 0x85, 0xed, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x74, 0x35, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x4d, 0x8d, 0x24, 0xce, 0x4c, 0x89, 0x28, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xaf, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x98, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0x4c, 0x29, 0xf8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x47, 0x40, 0x31, 0xc0, 0xe9, 0xf6, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xdb, 0xeb, 0x10, 0x0f, 0x1f, 0x40, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0x27, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x6c, 0xc6, 0xf8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc8, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x03, 0xff, 0xc0, 0x74, 0x0e, 0x89, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x5c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES_code_holes[23] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x25c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x266, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x282, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x294, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2a3, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x2b5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x2c1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2d9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_SLOT
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_SLOT.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c c6                   leaq    (%r14,%r8,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 49 29 de                      subq    %rbx, %r14
// 8b: 49 83 c6 b8                   addq    $-0x48, %r14
// 8f: 49 c1 ee 03                   shrq    $0x3, %r14
// 93: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 97: 48 8b 03                      movq    (%rbx), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c4: 4c 89 4c 24 18                movq    %r9, 0x18(%rsp)
// c9: 48 89 14 24                   movq    %rdx, (%rsp)
// cd: 48 89 5c 24 20                movq    %rbx, 0x20(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 b3 00 00 00             je      0x1b6 <_JIT_ENTRY+0x1b6>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 135: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 13a: 78 21                         js      0x15d <_JIT_ENTRY+0x15d>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 146: ff d0                         callq   *%rax
// 148: 49 ff 0c 24                   decq    (%r12)
// 14c: 75 0f                         jne     0x15d <_JIT_ENTRY+0x15d>
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _Py_Dealloc
// 158: 4c 89 e7                      movq    %r12, %rdi
// 15b: ff d0                         callq   *%rax
// 15d: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 162: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 166: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 16b: 48 85 c9                      testq   %rcx, %rcx
// 16e: 74 31                         je      0x1a1 <_JIT_ENTRY+0x1a1>
// 170: 4f 8d 3c fe                   leaq    (%r14,%r15,8), %r15
// 174: 48 89 08                      movq    %rcx, (%rax)
// 177: 48 8b 3c 24                   movq    (%rsp), %rdi
// 17b: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 17f: 48 8b 00                      movq    (%rax), %rax
// 182: 84 c0                         testb   %al, %al
// 184: 0f 84 af 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 18a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018c:  R_X86_64_64  _Py_HandlePending
// 194: ff d0                         callq   *%rax
// 196: 85 c0                         testl   %eax, %eax
// 198: 0f 84 9b 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 19e: 4c 89 f8                      movq    %r15, %rax
// 1a1: 48 29 d8                      subq    %rbx, %rax
// 1a4: 48 83 c0 b8                   addq    $-0x48, %rax
// 1a8: 48 c1 e8 03                   shrq    $0x3, %rax
// 1ac: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1af: 31 c0                         xorl    %eax, %eax
// 1b1: e9 fa fe ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 1b6: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1ba: bb 01 00 00 00                movl    $0x1, %ebx
// 1bf: 41 0f 43 dd                   cmovael %r13d, %ebx
// 1c3: 45 31 ff                      xorl    %r15d, %r15d
// 1c6: eb 14                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c8: 0f 1f 84 00 00 00 00 00       nopl    (%rax,%rax)
// 1d0: 49 ff c7                      incq    %r15
// 1d3: 4c 39 fb                      cmpq    %r15, %rbx
// 1d6: 0f 84 27 ff ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 1dc: 4e 8b 6c fd 00                movq    (%rbp,%r15,8), %r13
// 1e1: 49 8b 45 00                   movq    (%r13), %rax
// 1e5: 48 85 c0                      testq   %rax, %rax
// 1e8: 7e 06                         jle     0x1f0 <_JIT_ENTRY+0x1f0>
// 1ea: 85 c0                         testl   %eax, %eax
// 1ec: 78 e2                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1ee: eb 26                         jmp     0x216 <_JIT_ENTRY+0x216>
// 1f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f2:  R_X86_64_64  .rodata.str1.1
// 1fa: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ff: 4c 89 ea                      movq    %r13, %rdx
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_NegativeRefcount
// 20c: ff d0                         callq   *%rax
// 20e: 49 8b 45 00                   movq    (%r13), %rax
// 212: 85 c0                         testl   %eax, %eax
// 214: 78 ba                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 220: ff d0                         callq   *%rax
// 222: 49 ff 4d 00                   decq    (%r13)
// 226: 75 a8                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 228: 4c 89 ef                      movq    %r13, %rdi
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_Dealloc
// 235: ff d0                         callq   *%rax
// 237: eb 97                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _JIT_OPARG
// 243: f7 d0                         notl    %eax
// 245: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 24a: 48 98                         cltq
// 24c: 4d 8b 64 c6 f8                movq    -0x8(%r14,%rax,8), %r12
// 251: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000253:  R_X86_64_64  _JIT_OPERAND
// 25b: 0f b7 c0                      movzwl  %ax, %eax
// 25e: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 262: 4d 85 ed                      testq   %r13, %r13
// 265: 74 17                         je      0x27e <_JIT_ENTRY+0x27e>
// 267: 41 8b 45 00                   movl    (%r13), %eax
// 26b: ff c0                         incl    %eax
// 26d: 75 17                         jne     0x286 <_JIT_ENTRY+0x286>
// 26f: 49 8b 04 24                   movq    (%r12), %rax
// 273: 48 85 c0                      testq   %rax, %rax
// 276: 7e 27                         jle     0x29f <_JIT_ENTRY+0x29f>
// 278: 85 c0                         testl   %eax, %eax
// 27a: 79 49                         jns     0x2c5 <_JIT_ENTRY+0x2c5>
// 27c: eb 68                         jmp     0x2e6 <_JIT_ENTRY+0x2e6>
// 27e: 4d 89 fe                      movq    %r15, %r14
// 281: e9 02 fe ff ff                jmp     0x88 <_JIT_ENTRY+0x88>
// 286: 41 89 45 00                   movl    %eax, (%r13)
// 28a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028c:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 294: ff d0                         callq   *%rax
// 296: 49 8b 04 24                   movq    (%r12), %rax
// 29a: 48 85 c0                      testq   %rax, %rax
// 29d: 7f d9                         jg      0x278 <_JIT_ENTRY+0x278>
// 29f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002a1:  R_X86_64_64  .rodata.str1.1
// 2a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ab:  R_X86_64_64  _Py_NegativeRefcount
// 2b3: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 2b8: 4c 89 e2                      movq    %r12, %rdx
// 2bb: ff d0                         callq   *%rax
// 2bd: 49 8b 04 24                   movq    (%r12), %rax
// 2c1: 85 c0                         testl   %eax, %eax
// 2c3: 78 21                         js      0x2e6 <_JIT_ENTRY+0x2e6>
// 2c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2cf: ff d0                         callq   *%rax
// 2d1: 49 ff 0c 24                   decq    (%r12)
// 2d5: 75 0f                         jne     0x2e6 <_JIT_ENTRY+0x2e6>
// 2d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d9:  R_X86_64_64  _Py_Dealloc
// 2e1: 4c 89 e7                      movq    %r12, %rdi
// 2e4: ff d0                         callq   *%rax
// 2e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e8:  R_X86_64_64  _JIT_OPARG
// 2f0: 89 c1                         movl    %eax, %ecx
// 2f2: f7 d1                         notl    %ecx
// 2f4: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 2fa: 48 63 c9                      movslq  %ecx, %rcx
// 2fd: 4d 89 6c ce f8                movq    %r13, -0x8(%r14,%rcx,8)
// 302: a8 01                         testb   $0x1, %al
// 304: 74 07                         je      0x30d <_JIT_ENTRY+0x30d>
// 306: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// 30d: 89 c1                         movl    %eax, %ecx
// 30f: 83 e1 01                      andl    $0x1, %ecx
// 312: f7 d0                         notl    %eax
// 314: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 319: 48 98                         cltq
// 31b: 48 01 c8                      addq    %rcx, %rax
// 31e: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 322: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000324:  R_X86_64_64  _JIT_CONTINUE
// 32c: 48 89 df                      movq    %rbx, %rdi
// 32f: 48 8b 14 24                   movq    (%rsp), %rdx
// 333: 48 83 c4 28                   addq    $0x28, %rsp
// 337: 5b                            popq    %rbx
// 338: 41 5c                         popq    %r12
// 33a: 41 5d                         popq    %r13
// 33c: 41 5e                         popq    %r14
// 33e: 41 5f                         popq    %r15
// 340: 5d                            popq    %rbp
// 341: ff e0                         jmpq    *%rax
// 343: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_SLOT_code_body[836] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xce, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xc6, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x4c, 0x24, 0x18, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0x5c, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xb3, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x74, 0x31, 0x4f, 0x8d, 0x3c, 0xfe, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xaf, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x9b, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xfa, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xdd, 0x45, 0x31, 0xff, 0xeb, 0x14, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc7, 0x4c, 0x39, 0xfb, 0x0f, 0x84, 0x27, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xfd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x64, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x17, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x17, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x27, 0x85, 0xc0, 0x79, 0x49, 0xeb, 0x68, 0x4d, 0x89, 0xfe, 0xe9, 0x02, 0xfe, 0xff, 0xff, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xd9, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x4d, 0x89, 0x6c, 0xce, 0xf8, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0x83, 0xe1, 0x01, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_SLOT_code_holes[23] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x28c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x2a1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2e8, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x324, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_SLOT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_SLOT_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_WITH_HINT
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_WITH_HINT.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 ff                      movq    %rdi, %r15
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4b 8d 1c c6                   leaq    (%r14,%r8,8), %rbx
// 79: 48 8b 3b                      movq    (%rbx), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 4d 29 fe                      subq    %r15, %r14
// 8a: 49 83 c6 b8                   addq    $-0x48, %r14
// 8e: 49 c1 ee 03                   shrq    $0x3, %r14
// 92: 45 89 77 40                   movl    %r14d, 0x40(%r15)
// 96: 49 8b 07                      movq    (%r15), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c3: 4c 89 0c 24                   movq    %r9, (%rsp)
// c7: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cc: 4c 89 7c 24 20                movq    %r15, 0x20(%rsp)
// d1: 48 85 c0                      testq   %rax, %rax
// d4: 40 0f 94 c5                   sete    %bpl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 73 08                   leaq    0x8(%rbx), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 b7 00 00 00             je      0x1bb <_JIT_ENTRY+0x1bb>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 48 8b 6c 24 18                movq    0x18(%rsp), %rbp
// 110: 7f 22                         jg      0x134 <_JIT_ENTRY+0x134>
// 112: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000114:  R_X86_64_64  .rodata.str1.1
// 11c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011e:  R_X86_64_64  _Py_NegativeRefcount
// 126: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 12b: 4c 89 e2                      movq    %r12, %rdx
// 12e: ff d0                         callq   *%rax
// 130: 49 8b 04 24                   movq    (%r12), %rax
// 134: 85 c0                         testl   %eax, %eax
// 136: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// 13b: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 140: 78 21                         js      0x163 <_JIT_ENTRY+0x163>
// 142: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000144:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 14c: ff d0                         callq   *%rax
// 14e: 49 ff 0c 24                   decq    (%r12)
// 152: 75 0f                         jne     0x163 <_JIT_ENTRY+0x163>
// 154: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000156:  R_X86_64_64  _Py_Dealloc
// 15e: 4c 89 e7                      movq    %r12, %rdi
// 161: ff d0                         callq   *%rax
// 163: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 168: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 16c: 48 85 db                      testq   %rbx, %rbx
// 16f: 74 34                         je      0x1a5 <_JIT_ENTRY+0x1a5>
// 171: 48 8b 0c 24                   movq    (%rsp), %rcx
// 175: 4d 8d 2c ce                   leaq    (%r14,%rcx,8), %r13
// 179: 48 89 18                      movq    %rbx, (%rax)
// 17c: 48 8b 45 10                   movq    0x10(%rbp), %rax
// 180: 48 8b 00                      movq    (%rax), %rax
// 183: 84 c0                         testb   %al, %al
// 185: 0f 84 ae 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_HandlePending
// 195: 48 89 ef                      movq    %rbp, %rdi
// 198: ff d0                         callq   *%rax
// 19a: 85 c0                         testl   %eax, %eax
// 19c: 0f 84 97 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 1a2: 4c 89 e8                      movq    %r13, %rax
// 1a5: 4c 29 f8                      subq    %r15, %rax
// 1a8: 48 83 c0 b8                   addq    $-0x48, %rax
// 1ac: 48 c1 e8 03                   shrq    $0x3, %rax
// 1b0: 41 89 47 40                   movl    %eax, 0x40(%r15)
// 1b4: 31 c0                         xorl    %eax, %eax
// 1b6: e9 f4 fe ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 1bb: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1bf: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1c5: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1c9: 31 ed                         xorl    %ebp, %ebp
// 1cb: eb 0f                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1cd: 0f 1f 00                      nopl    (%rax)
// 1d0: 48 ff c5                      incq    %rbp
// 1d3: 49 39 ef                      cmpq    %rbp, %r15
// 1d6: 0f 84 28 ff ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 1dc: 4c 8b 2c eb                   movq    (%rbx,%rbp,8), %r13
// 1e0: 49 8b 45 00                   movq    (%r13), %rax
// 1e4: 48 85 c0                      testq   %rax, %rax
// 1e7: 7e 07                         jle     0x1f0 <_JIT_ENTRY+0x1f0>
// 1e9: 85 c0                         testl   %eax, %eax
// 1eb: 78 e3                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1ed: eb 27                         jmp     0x216 <_JIT_ENTRY+0x216>
// 1ef: 90                            nop
// 1f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f2:  R_X86_64_64  .rodata.str1.1
// 1fa: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ff: 4c 89 ea                      movq    %r13, %rdx
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_NegativeRefcount
// 20c: ff d0                         callq   *%rax
// 20e: 49 8b 45 00                   movq    (%r13), %rax
// 212: 85 c0                         testl   %eax, %eax
// 214: 78 ba                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 220: ff d0                         callq   *%rax
// 222: 49 ff 4d 00                   decq    (%r13)
// 226: 75 a8                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 228: 4c 89 ef                      movq    %r13, %rdi
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_Dealloc
// 235: ff d0                         callq   *%rax
// 237: eb 97                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _JIT_OPARG
// 243: f7 d0                         notl    %eax
// 245: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 24a: 48 98                         cltq
// 24c: 4d 8b 64 c6 f8                movq    -0x8(%r14,%rax,8), %r12
// 251: 49 8b 44 24 e8                movq    -0x18(%r12), %rax
// 256: 48 8b 40 20                   movq    0x20(%rax), %rax
// 25a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000025c:  R_X86_64_64  _JIT_OPERAND
// 264: 0f b7 c9                      movzwl  %cx, %ecx
// 267: 48 39 48 18                   cmpq    %rcx, 0x18(%rax)
// 26b: 0f 86 a5 00 00 00             jbe     0x316 <_JIT_ENTRY+0x316>
// 271: 49 8b 0f                      movq    (%r15), %rcx
// 274: 48 8b 51 20                   movq    0x20(%rcx), %rdx
// 278: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000027a:  R_X86_64_64  _JIT_OPARG
// 282: 81 e6 fe ff 00 00             andl    $0xfffe, %esi           # imm = 0xFFFE
// 288: 0f b6 48 09                   movzbl  0x9(%rax), %ecx
// 28c: bf 01 00 00 00                movl    $0x1, %edi
// 291: 48 d3 e7                      shlq    %cl, %rdi
// 294: 48 8b 4c b2 18                movq    0x18(%rdx,%rsi,4), %rcx
// 299: 80 78 0a 00                   cmpb    $0x0, 0xa(%rax)
// 29d: 48 8d 44 38 20                leaq    0x20(%rax,%rdi), %rax
// 2a2: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002a4:  R_X86_64_64  _JIT_OPERAND
// 2ac: 0f b7 d2                      movzwl  %dx, %edx
// 2af: 74 24                         je      0x2d5 <_JIT_ENTRY+0x2d5>
// 2b1: 48 c1 e2 04                   shlq    $0x4, %rdx
// 2b5: 48 39 0c 10                   cmpq    %rcx, (%rax,%rdx)
// 2b9: 75 5b                         jne     0x316 <_JIT_ENTRY+0x316>
// 2bb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002bd:  R_X86_64_64  _JIT_OPERAND
// 2c5: 0f b7 c9                      movzwl  %cx, %ecx
// 2c8: 48 c1 e1 04                   shlq    $0x4, %rcx
// 2cc: 48 01 c8                      addq    %rcx, %rax
// 2cf: 48 83 c0 08                   addq    $0x8, %rax
// 2d3: eb 24                         jmp     0x2f9 <_JIT_ENTRY+0x2f9>
// 2d5: 48 8d 14 52                   leaq    (%rdx,%rdx,2), %rdx
// 2d9: 48 39 4c d0 08                cmpq    %rcx, 0x8(%rax,%rdx,8)
// 2de: 75 36                         jne     0x316 <_JIT_ENTRY+0x316>
// 2e0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002e2:  R_X86_64_64  _JIT_OPERAND
// 2ea: 0f b7 c9                      movzwl  %cx, %ecx
// 2ed: 48 8d 0c 49                   leaq    (%rcx,%rcx,2), %rcx
// 2f1: 48 8d 04 c8                   leaq    (%rax,%rcx,8), %rax
// 2f5: 48 83 c0 10                   addq    $0x10, %rax
// 2f9: 48 8b 18                      movq    (%rax), %rbx
// 2fc: 48 85 db                      testq   %rbx, %rbx
// 2ff: 74 15                         je      0x316 <_JIT_ENTRY+0x316>
// 301: 8b 03                         movl    (%rbx), %eax
// 303: ff c0                         incl    %eax
// 305: 75 17                         jne     0x31e <_JIT_ENTRY+0x31e>
// 307: 49 8b 04 24                   movq    (%r12), %rax
// 30b: 48 85 c0                      testq   %rax, %rax
// 30e: 7e 25                         jle     0x335 <_JIT_ENTRY+0x335>
// 310: 85 c0                         testl   %eax, %eax
// 312: 79 47                         jns     0x35b <_JIT_ENTRY+0x35b>
// 314: eb 66                         jmp     0x37c <_JIT_ENTRY+0x37c>
// 316: 4d 89 ee                      movq    %r13, %r14
// 319: e9 69 fd ff ff                jmp     0x87 <_JIT_ENTRY+0x87>
// 31e: 89 03                         movl    %eax, (%rbx)
// 320: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000322:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 32a: ff d0                         callq   *%rax
// 32c: 49 8b 04 24                   movq    (%r12), %rax
// 330: 48 85 c0                      testq   %rax, %rax
// 333: 7f db                         jg      0x310 <_JIT_ENTRY+0x310>
// 335: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000337:  R_X86_64_64  .rodata.str1.1
// 33f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000341:  R_X86_64_64  _Py_NegativeRefcount
// 349: be c3 06 00 00                movl    $0x6c3, %esi            # imm = 0x6C3
// 34e: 4c 89 e2                      movq    %r12, %rdx
// 351: ff d0                         callq   *%rax
// 353: 49 8b 04 24                   movq    (%r12), %rax
// 357: 85 c0                         testl   %eax, %eax
// 359: 78 21                         js      0x37c <_JIT_ENTRY+0x37c>
// 35b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000035d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 365: ff d0                         callq   *%rax
// 367: 49 ff 0c 24                   decq    (%r12)
// 36b: 75 0f                         jne     0x37c <_JIT_ENTRY+0x37c>
// 36d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000036f:  R_X86_64_64  _Py_Dealloc
// 377: 4c 89 e7                      movq    %r12, %rdi
// 37a: ff d0                         callq   *%rax
// 37c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000037e:  R_X86_64_64  _JIT_OPARG
// 386: 89 c1                         movl    %eax, %ecx
// 388: f7 d1                         notl    %ecx
// 38a: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 390: 48 63 c9                      movslq  %ecx, %rcx
// 393: 49 89 5c ce f8                movq    %rbx, -0x8(%r14,%rcx,8)
// 398: a8 01                         testb   $0x1, %al
// 39a: 74 08                         je      0x3a4 <_JIT_ENTRY+0x3a4>
// 39c: 49 c7 45 00 00 00 00 00       movq    $0x0, (%r13)
// 3a4: 89 c1                         movl    %eax, %ecx
// 3a6: 83 e1 01                      andl    $0x1, %ecx
// 3a9: f7 d0                         notl    %eax
// 3ab: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 3b0: 48 98                         cltq
// 3b2: 48 01 c8                      addq    %rcx, %rax
// 3b5: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 3b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003bb:  R_X86_64_64  _JIT_CONTINUE
// 3c3: 4c 89 ff                      movq    %r15, %rdi
// 3c6: 48 89 ea                      movq    %rbp, %rdx
// 3c9: 48 83 c4 28                   addq    $0x28, %rsp
// 3cd: 5b                            popq    %rbx
// 3ce: 41 5c                         popq    %r12
// 3d0: 41 5d                         popq    %r13
// 3d2: 41 5e                         popq    %r14
// 3d4: 41 5f                         popq    %r15
// 3d6: 5d                            popq    %rbp
// 3d7: ff e0                         jmpq    *%rax
// 3d9: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_WITH_HINT_code_body[986] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xff, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xce, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4b, 0x8d, 0x1c, 0xc6, 0x48, 0x8b, 0x3b, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x77, 0x40, 0x49, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x7c, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x73, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xb7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x18, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x85, 0xdb, 0x74, 0x34, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x2c, 0xce, 0x48, 0x89, 0x18, 0x48, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xae, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x97, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe8, 0x4c, 0x29, 0xf8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x47, 0x40, 0x31, 0xc0, 0xe9, 0xf4, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xed, 0xeb, 0x0f, 0x0f, 0x1f, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xef, 0x0f, 0x84, 0x28, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x2c, 0xeb, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x27, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x64, 0xc6, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0xe8, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x39, 0x48, 0x18, 0x0f, 0x86, 0xa5, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x0f, 0x48, 0x8b, 0x51, 0x20, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe6, 0xfe, 0xff, 0x00, 0x00, 0x0f, 0xb6, 0x48, 0x09, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x48, 0xd3, 0xe7, 0x48, 0x8b, 0x4c, 0xb2, 0x18, 0x80, 0x78, 0x0a, 0x00, 0x48, 0x8d, 0x44, 0x38, 0x20, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x74, 0x24, 0x48, 0xc1, 0xe2, 0x04, 0x48, 0x39, 0x0c, 0x10, 0x75, 0x5b, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0xc1, 0xe1, 0x04, 0x48, 0x01, 0xc8, 0x48, 0x83, 0xc0, 0x08, 0xeb, 0x24, 0x48, 0x8d, 0x14, 0x52, 0x48, 0x39, 0x4c, 0xd0, 0x08, 0x75, 0x36, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x8d, 0x0c, 0x49, 0x48, 0x8d, 0x04, 0xc8, 0x48, 0x83, 0xc0, 0x10, 0x48, 0x8b, 0x18, 0x48, 0x85, 0xdb, 0x74, 0x15, 0x8b, 0x03, 0xff, 0xc0, 0x75, 0x17, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x25, 0x85, 0xc0, 0x79, 0x47, 0xeb, 0x66, 0x4d, 0x89, 0xee, 0xe9, 0x69, 0xfd, 0xff, 0xff, 0x89, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xdb, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc3, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x5c, 0xce, 0xf8, 0xa8, 0x01, 0x74, 0x08, 0x49, 0xc7, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0x83, 0xe1, 0x01, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_WITH_HINT_code_holes[27] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x11e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x25c, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x27a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2a4, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x2bd, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x2e2, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x322, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x337, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x341, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x35d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x36f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x37e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3bb, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_WITH_HINT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_WITH_HINT_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_BUILD_CLASS
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_BUILD_CLASS.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 38                   subq    $0x38, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d7                   movq    (%r15,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 df                   movq    (%r15,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c cf                   leaq    (%r15,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 c7                      subq    %r8, %r15
// 8b: 49 83 c7 b8                   addq    $-0x48, %r15
// 8f: 49 c1 ef 03                   shrq    $0x3, %r15
// 93: 45 89 78 40                   movl    %r15d, 0x40(%r8)
// 97: 49 8b 00                      movq    (%r8), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 38                   addq    $0x38, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 5c 24 20                movq    %r11, 0x20(%rsp)
// c4: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c9: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// ce: 4c 89 44 24 28                movq    %r8, 0x28(%rsp)
// d3: 48 85 c0                      testq   %rax, %rax
// d6: 0f 94 c3                      sete    %bl
// d9: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dd: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e1: 48 63 d0                      movslq  %eax, %rdx
// e4: ff 51 08                      callq   *0x8(%rcx)
// e7: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ee:  R_X86_64_64  _JIT_OPARG
// f6: 66 85 c0                      testw   %ax, %ax
// f9: 0f 94 c0                      sete    %al
// fc: 84 c3                         testb   %al, %bl
// fe: 0f 84 1b 01 00 00             je      0x21f <_JIT_ENTRY+0x21f>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 48 8b 5c 24 28                movq    0x28(%rsp), %rbx
// 136: 78 21                         js      0x159 <_JIT_ENTRY+0x159>
// 138: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 142: ff d0                         callq   *%rax
// 144: 49 ff 0c 24                   decq    (%r12)
// 148: 75 0f                         jne     0x159 <_JIT_ENTRY+0x159>
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_Dealloc
// 154: 4c 89 e7                      movq    %r12, %rdi
// 157: ff d0                         callq   *%rax
// 159: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 15e: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 162: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 167: 48 85 d2                      testq   %rdx, %rdx
// 16a: 0f 84 39 01 00 00             je      0x2a9 <_JIT_ENTRY+0x2a9>
// 170: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 175: 4d 8d 34 cf                   leaq    (%r15,%rcx,8), %r14
// 179: 48 89 10                      movq    %rdx, (%rax)
// 17c: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 181: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 185: 48 8b 00                      movq    (%rax), %rax
// 188: 84 c0                         testb   %al, %al
// 18a: 74 14                         je      0x1a0 <_JIT_ENTRY+0x1a0>
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _Py_HandlePending
// 196: ff d0                         callq   *%rax
// 198: 85 c0                         testl   %eax, %eax
// 19a: 0f 85 36 01 00 00             jne     0x2d6 <_JIT_ENTRY+0x2d6>
// 1a0: 48 8b 7b 20                   movq    0x20(%rbx), %rdi
// 1a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a6:  R_X86_64_64  PyMapping_GetOptionalItem
// 1ae: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001b0:  R_X86_64_64  _PyRuntime
// 1b8: 48 81 c6 40 a9 00 00          addq    $0xa940, %rsi           # imm = 0xA940
// 1bf: 48 8d 54 24 30                leaq    0x30(%rsp), %rdx
// 1c4: ff d0                         callq   *%rax
// 1c6: 85 c0                         testl   %eax, %eax
// 1c8: 0f 88 08 01 00 00             js      0x2d6 <_JIT_ENTRY+0x2d6>
// 1ce: 48 8b 44 24 30                movq    0x30(%rsp), %rax
// 1d3: 48 85 c0                      testq   %rax, %rax
// 1d6: 0f 84 d2 00 00 00             je      0x2ae <_JIT_ENTRY+0x2ae>
// 1dc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001de:  R_X86_64_64  _JIT_OPARG
// 1e6: f7 d1                         notl    %ecx
// 1e8: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 1ee: 48 63 c9                      movslq  %ecx, %rcx
// 1f1: 49 89 04 cf                   movq    %rax, (%r15,%rcx,8)
// 1f5: 49 8d 34 cf                   leaq    (%r15,%rcx,8), %rsi
// 1f9: 48 83 c6 08                   addq    $0x8, %rsi
// 1fd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ff:  R_X86_64_64  _JIT_CONTINUE
// 207: 48 89 df                      movq    %rbx, %rdi
// 20a: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 20f: 48 83 c4 38                   addq    $0x38, %rsp
// 213: 5b                            popq    %rbx
// 214: 41 5c                         popq    %r12
// 216: 41 5d                         popq    %r13
// 218: 41 5e                         popq    %r14
// 21a: 41 5f                         popq    %r15
// 21c: 5d                            popq    %rbp
// 21d: ff e0                         jmpq    *%rax
// 21f: 41 83 fd 02                   cmpl    $0x2, %r13d
// 223: 41 be 01 00 00 00             movl    $0x1, %r14d
// 229: 45 0f 43 f5                   cmovael %r13d, %r14d
// 22d: 31 db                         xorl    %ebx, %ebx
// 22f: eb 1b                         jmp     0x24c <_JIT_ENTRY+0x24c>
// 231: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// 240: 48 ff c3                      incq    %rbx
// 243: 49 39 de                      cmpq    %rbx, %r14
// 246: 0f 84 b8 fe ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 24c: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 251: 49 8b 45 00                   movq    (%r13), %rax
// 255: 48 85 c0                      testq   %rax, %rax
// 258: 7e 06                         jle     0x260 <_JIT_ENTRY+0x260>
// 25a: 85 c0                         testl   %eax, %eax
// 25c: 78 e2                         js      0x240 <_JIT_ENTRY+0x240>
// 25e: eb 26                         jmp     0x286 <_JIT_ENTRY+0x286>
// 260: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000262:  R_X86_64_64  .rodata.str1.1
// 26a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 26f: 4c 89 ea                      movq    %r13, %rdx
// 272: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000274:  R_X86_64_64  _Py_NegativeRefcount
// 27c: ff d0                         callq   *%rax
// 27e: 49 8b 45 00                   movq    (%r13), %rax
// 282: 85 c0                         testl   %eax, %eax
// 284: 78 ba                         js      0x240 <_JIT_ENTRY+0x240>
// 286: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000288:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 290: ff d0                         callq   *%rax
// 292: 49 ff 4d 00                   decq    (%r13)
// 296: 75 a8                         jne     0x240 <_JIT_ENTRY+0x240>
// 298: 4c 89 ef                      movq    %r13, %rdi
// 29b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029d:  R_X86_64_64  _Py_Dealloc
// 2a5: ff d0                         callq   *%rax
// 2a7: eb 97                         jmp     0x240 <_JIT_ENTRY+0x240>
// 2a9: 49 89 c6                      movq    %rax, %r14
// 2ac: eb 28                         jmp     0x2d6 <_JIT_ENTRY+0x2d6>
// 2ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b0:  R_X86_64_64  PyExc_NameError
// 2b8: 48 8b 30                      movq    (%rax), %rsi
// 2bb: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002bd:  R_X86_64_64  .rodata.str1.1+0x39
// 2c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c7:  R_X86_64_64  _PyErr_SetString
// 2cf: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 2d4: ff d0                         callq   *%rax
// 2d6: 49 29 de                      subq    %rbx, %r14
// 2d9: 49 83 c6 b8                   addq    $-0x48, %r14
// 2dd: 49 c1 ee 03                   shrq    $0x3, %r14
// 2e1: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2e5: 31 c0                         xorl    %eax, %eax
// 2e7: e9 c4 fd ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 2ec: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_BUILD_CLASS_code_body[749] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x38, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd7, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xdf, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xcf, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x78, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x20, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x44, 0x24, 0x28, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0x1b, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x28, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x39, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x4d, 0x8d, 0x34, 0xcf, 0x48, 0x89, 0x10, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x36, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7b, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc6, 0x40, 0xa9, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x30, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x88, 0x08, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x30, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xd2, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x04, 0xcf, 0x49, 0x8d, 0x34, 0xcf, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xdb, 0xeb, 0x1b, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0xb8, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x49, 0x89, 0xc6, 0xeb, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xc4, 0xfd, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_BUILD_CLASS_code_holes[21] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xee, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1a6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x1b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ff, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x262, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x274, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x288, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x29d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x2bd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00__build_class__ not found\x00'
// 53: 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_BUILD_CLASS_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x5f, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_BUILD_CLASS_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_CONST
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_CONST.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4f 8d 04 c6                   leaq    (%r14,%r8,8), %r8
// 79: 49 8b 38                      movq    (%r8), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 49 29 de                      subq    %rbx, %r14
// 8a: 49 83 c6 b8                   addq    $-0x48, %r14
// 8e: 49 c1 ee 03                   shrq    $0x3, %r14
// 92: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 96: 48 8b 03                      movq    (%rbx), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// c3: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// c8: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cd: 48 85 c0                      testq   %rax, %rax
// d0: 40 0f 94 c5                   sete    %bpl
// d4: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// d8: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// dd: 49 8d 70 08                   leaq    0x8(%r8), %rsi
// e1: 48 63 d0                      movslq  %eax, %rdx
// e4: ff 51 08                      callq   *0x8(%rcx)
// e7: 48 89 04 24                   movq    %rax, (%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 ae 00 00 00             je      0x1b2 <_JIT_ENTRY+0x1b2>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// 136: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 13b: 78 21                         js      0x15e <_JIT_ENTRY+0x15e>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 147: ff d0                         callq   *%rax
// 149: 49 ff 0c 24                   decq    (%r12)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_Dealloc
// 159: 4c 89 e7                      movq    %r12, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 162: 48 8b 0c 24                   movq    (%rsp), %rcx
// 166: 48 85 c9                      testq   %rcx, %rcx
// 169: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 16e: 74 2d                         je      0x19d <_JIT_ENTRY+0x19d>
// 170: 48 89 08                      movq    %rcx, (%rax)
// 173: 49 8b 45 10                   movq    0x10(%r13), %rax
// 177: 48 8b 00                      movq    (%rax), %rax
// 17a: 84 c0                         testb   %al, %al
// 17c: 0f 84 c7 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 182: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000184:  R_X86_64_64  _Py_HandlePending
// 18c: 4c 89 ef                      movq    %r13, %rdi
// 18f: ff d0                         callq   *%rax
// 191: 85 c0                         testl   %eax, %eax
// 193: 0f 84 b0 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 199: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 19d: 48 29 d8                      subq    %rbx, %rax
// 1a0: 48 83 c0 b8                   addq    $-0x48, %rax
// 1a4: 48 c1 e8 03                   shrq    $0x3, %rax
// 1a8: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1ab: 31 c0                         xorl    %eax, %eax
// 1ad: e9 fd fe ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 1b2: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1b6: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1bc: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1c0: 31 ed                         xorl    %ebp, %ebp
// 1c2: eb 18                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 1d0: 48 ff c5                      incq    %rbp
// 1d3: 49 39 ef                      cmpq    %rbp, %r15
// 1d6: 0f 84 28 ff ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 1dc: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 1e1: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 1e5: 49 8b 45 00                   movq    (%r13), %rax
// 1e9: 48 85 c0                      testq   %rax, %rax
// 1ec: 7e 12                         jle     0x200 <_JIT_ENTRY+0x200>
// 1ee: 85 c0                         testl   %eax, %eax
// 1f0: 78 de                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1f2: eb 32                         jmp     0x226 <_JIT_ENTRY+0x226>
// 1f4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 200: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1
// 20a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 20f: 4c 89 ea                      movq    %r13, %rdx
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: ff d0                         callq   *%rax
// 21e: 49 8b 45 00                   movq    (%r13), %rax
// 222: 85 c0                         testl   %eax, %eax
// 224: 78 aa                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 230: ff d0                         callq   *%rax
// 232: 49 ff 4d 00                   decq    (%r13)
// 236: 75 98                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: ff d0                         callq   *%rax
// 247: eb 87                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 249: 48 8b 03                      movq    (%rbx), %rax
// 24c: 48 8b 40 18                   movq    0x18(%rax), %rax
// 250: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000252:  R_X86_64_64  _JIT_OPARG
// 25a: 0f b7 c9                      movzwl  %cx, %ecx
// 25d: 4c 8b 7c c8 18                movq    0x18(%rax,%rcx,8), %r15
// 262: 41 8b 07                      movl    (%r15), %eax
// 265: ff c0                         incl    %eax
// 267: 74 0f                         je      0x278 <_JIT_ENTRY+0x278>
// 269: 41 89 07                      movl    %eax, (%r15)
// 26c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026e:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 276: ff d0                         callq   *%rax
// 278: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027a:  R_X86_64_64  _JIT_OPARG
// 282: f7 d0                         notl    %eax
// 284: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 289: 48 98                         cltq
// 28b: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 28f: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 293: 48 83 c6 08                   addq    $0x8, %rsi
// 297: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000299:  R_X86_64_64  _JIT_CONTINUE
// 2a1: 48 89 df                      movq    %rbx, %rdi
// 2a4: 4c 89 ea                      movq    %r13, %rdx
// 2a7: 48 83 c4 28                   addq    $0x28, %rsp
// 2ab: 5b                            popq    %rbx
// 2ac: 41 5c                         popq    %r12
// 2ae: 41 5d                         popq    %r13
// 2b0: 41 5e                         popq    %r14
// 2b2: 41 5f                         popq    %r15
// 2b4: 5d                            popq    %rbp
// 2b5: ff e0                         jmpq    *%rax
// 2b7: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_CONST_code_body[696] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xce, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4f, 0x8d, 0x04, 0xc6, 0x49, 0x8b, 0x38, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x70, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xae, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x74, 0x2d, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xb0, 0x00, 0x00, 0x00, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xfd, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xed, 0xeb, 0x18, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xef, 0x0f, 0x84, 0x28, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x18, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x7c, 0xc8, 0x18, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x3c, 0xc6, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_CONST_code_holes[18] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x26e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x27a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x299, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_CONST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_CONST_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_DEREF
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_DEREF.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d7                   movq    (%r15,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 df                   movq    (%r15,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c cf                   leaq    (%r15,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 c7                      subq    %r8, %r15
// 8b: 49 83 c7 b8                   addq    $-0x48, %r15
// 8f: 49 c1 ef 03                   shrq    $0x3, %r15
// 93: 45 89 78 40                   movl    %r15d, 0x40(%r8)
// 97: 49 8b 00                      movq    (%r8), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 5c 24 20                movq    %r11, 0x20(%rsp)
// c4: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c9: 48 89 14 24                   movq    %rdx, (%rsp)
// cd: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 13 01 00 00             je      0x216 <_JIT_ENTRY+0x216>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 135: 78 21                         js      0x158 <_JIT_ENTRY+0x158>
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 141: ff d0                         callq   *%rax
// 143: 49 ff 0c 24                   decq    (%r12)
// 147: 75 0f                         jne     0x158 <_JIT_ENTRY+0x158>
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_Dealloc
// 153: 4c 89 e7                      movq    %r12, %rdi
// 156: ff d0                         callq   *%rax
// 158: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 15d: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 161: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 166: 48 85 d2                      testq   %rdx, %rdx
// 169: 0f 84 2a 01 00 00             je      0x299 <_JIT_ENTRY+0x299>
// 16f: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 174: 4d 8d 34 cf                   leaq    (%r15,%rcx,8), %r14
// 178: 48 89 10                      movq    %rdx, (%rax)
// 17b: 48 8b 3c 24                   movq    (%rsp), %rdi
// 17f: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 183: 48 8b 00                      movq    (%rax), %rax
// 186: 84 c0                         testb   %al, %al
// 188: 74 14                         je      0x19e <_JIT_ENTRY+0x19e>
// 18a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018c:  R_X86_64_64  _Py_HandlePending
// 194: ff d0                         callq   *%rax
// 196: 85 c0                         testl   %eax, %eax
// 198: 0f 85 24 01 00 00             jne     0x2c2 <_JIT_ENTRY+0x2c2>
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  _JIT_OPARG
// 1a8: 0f b7 c0                      movzwl  %ax, %eax
// 1ab: 48 8b 44 c3 48                movq    0x48(%rbx,%rax,8), %rax
// 1b0: 49 89 dc                      movq    %rbx, %r12
// 1b3: 48 8b 58 10                   movq    0x10(%rax), %rbx
// 1b7: 48 85 db                      testq   %rbx, %rbx
// 1ba: 0f 84 de 00 00 00             je      0x29e <_JIT_ENTRY+0x29e>
// 1c0: 8b 03                         movl    (%rbx), %eax
// 1c2: ff c0                         incl    %eax
// 1c4: 74 0e                         je      0x1d4 <_JIT_ENTRY+0x1d4>
// 1c6: 89 03                         movl    %eax, (%rbx)
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1d2: ff d0                         callq   *%rax
// 1d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d6:  R_X86_64_64  _JIT_OPARG
// 1de: f7 d0                         notl    %eax
// 1e0: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1e5: 48 98                         cltq
// 1e7: 49 89 1c c7                   movq    %rbx, (%r15,%rax,8)
// 1eb: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 1ef: 48 83 c6 08                   addq    $0x8, %rsi
// 1f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f5:  R_X86_64_64  _JIT_CONTINUE
// 1fd: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 202: 48 8b 14 24                   movq    (%rsp), %rdx
// 206: 48 83 c4 28                   addq    $0x28, %rsp
// 20a: 5b                            popq    %rbx
// 20b: 41 5c                         popq    %r12
// 20d: 41 5d                         popq    %r13
// 20f: 41 5e                         popq    %r14
// 211: 41 5f                         popq    %r15
// 213: 5d                            popq    %rbp
// 214: ff e0                         jmpq    *%rax
// 216: 41 83 fd 02                   cmpl    $0x2, %r13d
// 21a: 41 be 01 00 00 00             movl    $0x1, %r14d
// 220: 45 0f 43 f5                   cmovael %r13d, %r14d
// 224: 31 db                         xorl    %ebx, %ebx
// 226: eb 14                         jmp     0x23c <_JIT_ENTRY+0x23c>
// 228: 0f 1f 84 00 00 00 00 00       nopl    (%rax,%rax)
// 230: 48 ff c3                      incq    %rbx
// 233: 49 39 de                      cmpq    %rbx, %r14
// 236: 0f 84 c7 fe ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 23c: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 241: 49 8b 45 00                   movq    (%r13), %rax
// 245: 48 85 c0                      testq   %rax, %rax
// 248: 7e 06                         jle     0x250 <_JIT_ENTRY+0x250>
// 24a: 85 c0                         testl   %eax, %eax
// 24c: 78 e2                         js      0x230 <_JIT_ENTRY+0x230>
// 24e: eb 26                         jmp     0x276 <_JIT_ENTRY+0x276>
// 250: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000252:  R_X86_64_64  .rodata.str1.1
// 25a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 25f: 4c 89 ea                      movq    %r13, %rdx
// 262: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000264:  R_X86_64_64  _Py_NegativeRefcount
// 26c: ff d0                         callq   *%rax
// 26e: 49 8b 45 00                   movq    (%r13), %rax
// 272: 85 c0                         testl   %eax, %eax
// 274: 78 ba                         js      0x230 <_JIT_ENTRY+0x230>
// 276: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000278:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 280: ff d0                         callq   *%rax
// 282: 49 ff 4d 00                   decq    (%r13)
// 286: 75 a8                         jne     0x230 <_JIT_ENTRY+0x230>
// 288: 4c 89 ef                      movq    %r13, %rdi
// 28b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028d:  R_X86_64_64  _Py_Dealloc
// 295: ff d0                         callq   *%rax
// 297: eb 97                         jmp     0x230 <_JIT_ENTRY+0x230>
// 299: 49 89 c6                      movq    %rax, %r14
// 29c: eb 24                         jmp     0x2c2 <_JIT_ENTRY+0x2c2>
// 29e: 49 8b 34 24                   movq    (%r12), %rsi
// 2a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a4:  R_X86_64_64  _JIT_OPARG
// 2ac: 0f b7 d0                      movzwl  %ax, %edx
// 2af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b1:  R_X86_64_64  _PyEval_FormatExcUnbound
// 2b9: 48 8b 3c 24                   movq    (%rsp), %rdi
// 2bd: ff d0                         callq   *%rax
// 2bf: 4c 89 e3                      movq    %r12, %rbx
// 2c2: 49 29 de                      subq    %rbx, %r14
// 2c5: 49 83 c6 b8                   addq    $-0x48, %r14
// 2c9: 49 c1 ee 03                   shrq    $0x3, %r14
// 2cd: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2d1: 31 c0                         xorl    %eax, %eax
// 2d3: e9 d8 fd ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 2d8: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_DEREF_code_body[729] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd7, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xdf, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xcf, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x78, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x20, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x14, 0x24, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0x13, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x2a, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x4d, 0x8d, 0x34, 0xcf, 0x48, 0x89, 0x10, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x24, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc3, 0x48, 0x49, 0x89, 0xdc, 0x48, 0x8b, 0x58, 0x10, 0x48, 0x85, 0xdb, 0x0f, 0x84, 0xde, 0x00, 0x00, 0x00, 0x8b, 0x03, 0xff, 0xc0, 0x74, 0x0e, 0x89, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x1c, 0xc7, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xdb, 0xeb, 0x14, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0xc7, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x49, 0x89, 0xc6, 0xeb, 0x24, 0x49, 0x8b, 0x34, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0xd0, 0x4c, 0x89, 0xe3, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xd8, 0xfd, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_DEREF_code_holes[20] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x278, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x28d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2a4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_DEREF_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_DEREF_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_FAST
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_FAST.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4f 8d 04 c6                   leaq    (%r14,%r8,8), %r8
// 79: 49 8b 38                      movq    (%r8), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 49 29 de                      subq    %rbx, %r14
// 8a: 49 83 c6 b8                   addq    $-0x48, %r14
// 8e: 49 c1 ee 03                   shrq    $0x3, %r14
// 92: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 96: 48 8b 03                      movq    (%rbx), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// c3: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// c8: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cd: 48 85 c0                      testq   %rax, %rax
// d0: 40 0f 94 c5                   sete    %bpl
// d4: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// d8: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// dd: 49 8d 70 08                   leaq    0x8(%r8), %rsi
// e1: 48 63 d0                      movslq  %eax, %rdx
// e4: ff 51 08                      callq   *0x8(%rcx)
// e7: 48 89 04 24                   movq    %rax, (%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 ae 00 00 00             je      0x1b2 <_JIT_ENTRY+0x1b2>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// 136: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 13b: 78 21                         js      0x15e <_JIT_ENTRY+0x15e>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 147: ff d0                         callq   *%rax
// 149: 49 ff 0c 24                   decq    (%r12)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_Dealloc
// 159: 4c 89 e7                      movq    %r12, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 162: 48 8b 0c 24                   movq    (%rsp), %rcx
// 166: 48 85 c9                      testq   %rcx, %rcx
// 169: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 16e: 74 2d                         je      0x19d <_JIT_ENTRY+0x19d>
// 170: 48 89 08                      movq    %rcx, (%rax)
// 173: 49 8b 45 10                   movq    0x10(%r13), %rax
// 177: 48 8b 00                      movq    (%rax), %rax
// 17a: 84 c0                         testb   %al, %al
// 17c: 0f 84 c7 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 182: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000184:  R_X86_64_64  _Py_HandlePending
// 18c: 4c 89 ef                      movq    %r13, %rdi
// 18f: ff d0                         callq   *%rax
// 191: 85 c0                         testl   %eax, %eax
// 193: 0f 84 b0 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 199: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 19d: 48 29 d8                      subq    %rbx, %rax
// 1a0: 48 83 c0 b8                   addq    $-0x48, %rax
// 1a4: 48 c1 e8 03                   shrq    $0x3, %rax
// 1a8: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1ab: 31 c0                         xorl    %eax, %eax
// 1ad: e9 fd fe ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 1b2: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1b6: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1bc: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1c0: 31 ed                         xorl    %ebp, %ebp
// 1c2: eb 18                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 1d0: 48 ff c5                      incq    %rbp
// 1d3: 49 39 ef                      cmpq    %rbp, %r15
// 1d6: 0f 84 28 ff ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 1dc: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 1e1: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 1e5: 49 8b 45 00                   movq    (%r13), %rax
// 1e9: 48 85 c0                      testq   %rax, %rax
// 1ec: 7e 12                         jle     0x200 <_JIT_ENTRY+0x200>
// 1ee: 85 c0                         testl   %eax, %eax
// 1f0: 78 de                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1f2: eb 32                         jmp     0x226 <_JIT_ENTRY+0x226>
// 1f4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 200: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1
// 20a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 20f: 4c 89 ea                      movq    %r13, %rdx
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: ff d0                         callq   *%rax
// 21e: 49 8b 45 00                   movq    (%r13), %rax
// 222: 85 c0                         testl   %eax, %eax
// 224: 78 aa                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 230: ff d0                         callq   *%rax
// 232: 49 ff 4d 00                   decq    (%r13)
// 236: 75 98                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: ff d0                         callq   *%rax
// 247: eb 87                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _JIT_OPARG
// 253: 0f b7 c0                      movzwl  %ax, %eax
// 256: 4c 8b 7c c3 48                movq    0x48(%rbx,%rax,8), %r15
// 25b: 41 8b 07                      movl    (%r15), %eax
// 25e: ff c0                         incl    %eax
// 260: 74 0f                         je      0x271 <_JIT_ENTRY+0x271>
// 262: 41 89 07                      movl    %eax, (%r15)
// 265: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000267:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 26f: ff d0                         callq   *%rax
// 271: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000273:  R_X86_64_64  _JIT_OPARG
// 27b: f7 d0                         notl    %eax
// 27d: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 282: 48 98                         cltq
// 284: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 288: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 28c: 48 83 c6 08                   addq    $0x8, %rsi
// 290: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000292:  R_X86_64_64  _JIT_CONTINUE
// 29a: 48 89 df                      movq    %rbx, %rdi
// 29d: 4c 89 ea                      movq    %r13, %rdx
// 2a0: 48 83 c4 28                   addq    $0x28, %rsp
// 2a4: 5b                            popq    %rbx
// 2a5: 41 5c                         popq    %r12
// 2a7: 41 5d                         popq    %r13
// 2a9: 41 5e                         popq    %r14
// 2ab: 41 5f                         popq    %r15
// 2ad: 5d                            popq    %rbp
// 2ae: ff e0                         jmpq    *%rax
// 2b0: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_FAST_code_body[689] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xce, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4f, 0x8d, 0x04, 0xc6, 0x49, 0x8b, 0x38, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x70, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xae, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x74, 0x2d, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xb0, 0x00, 0x00, 0x00, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xfd, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xed, 0xeb, 0x18, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xef, 0x0f, 0x84, 0x28, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4c, 0x8b, 0x7c, 0xc3, 0x48, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x3c, 0xc6, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_FAST_code_holes[18] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x267, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x273, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x292, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_FAST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_FAST_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_FAST_AND_CLEAR
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_FAST_AND_CLEAR.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4f 8d 04 c6                   leaq    (%r14,%r8,8), %r8
// 79: 49 8b 38                      movq    (%r8), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 49 29 de                      subq    %rbx, %r14
// 8a: 49 83 c6 b8                   addq    $-0x48, %r14
// 8e: 49 c1 ee 03                   shrq    $0x3, %r14
// 92: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 96: 48 8b 03                      movq    (%rbx), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c3: 4c 89 0c 24                   movq    %r9, (%rsp)
// c7: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cc: 48 85 c0                      testq   %rax, %rax
// cf: 40 0f 94 c5                   sete    %bpl
// d3: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// d7: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// dc: 49 8d 70 08                   leaq    0x8(%r8), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 ae 00 00 00             je      0x1b2 <_JIT_ENTRY+0x1b2>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 136: 78 21                         js      0x159 <_JIT_ENTRY+0x159>
// 138: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 142: ff d0                         callq   *%rax
// 144: 49 ff 0c 24                   decq    (%r12)
// 148: 75 0f                         jne     0x159 <_JIT_ENTRY+0x159>
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_Dealloc
// 154: 4c 89 e7                      movq    %r12, %rdi
// 157: ff d0                         callq   *%rax
// 159: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 15e: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 162: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 167: 48 85 c9                      testq   %rcx, %rcx
// 16a: 74 31                         je      0x19d <_JIT_ENTRY+0x19d>
// 16c: 48 89 08                      movq    %rcx, (%rax)
// 16f: 49 8b 47 10                   movq    0x10(%r15), %rax
// 173: 48 8b 00                      movq    (%rax), %rax
// 176: 84 c0                         testb   %al, %al
// 178: 0f 84 cb 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_HandlePending
// 188: 4c 89 ff                      movq    %r15, %rdi
// 18b: ff d0                         callq   *%rax
// 18d: 85 c0                         testl   %eax, %eax
// 18f: 0f 84 b4 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 195: 48 8b 04 24                   movq    (%rsp), %rax
// 199: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 19d: 48 29 d8                      subq    %rbx, %rax
// 1a0: 48 83 c0 b8                   addq    $-0x48, %rax
// 1a4: 48 c1 e8 03                   shrq    $0x3, %rax
// 1a8: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1ab: 31 c0                         xorl    %eax, %eax
// 1ad: e9 fd fe ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 1b2: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1b6: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1bc: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1c0: 31 ed                         xorl    %ebp, %ebp
// 1c2: eb 18                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 1d0: 48 ff c5                      incq    %rbp
// 1d3: 49 39 ef                      cmpq    %rbp, %r15
// 1d6: 0f 84 28 ff ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 1dc: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 1e1: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 1e5: 49 8b 45 00                   movq    (%r13), %rax
// 1e9: 48 85 c0                      testq   %rax, %rax
// 1ec: 7e 12                         jle     0x200 <_JIT_ENTRY+0x200>
// 1ee: 85 c0                         testl   %eax, %eax
// 1f0: 78 de                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1f2: eb 32                         jmp     0x226 <_JIT_ENTRY+0x226>
// 1f4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 200: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1
// 20a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 20f: 4c 89 ea                      movq    %r13, %rdx
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: ff d0                         callq   *%rax
// 21e: 49 8b 45 00                   movq    (%r13), %rax
// 222: 85 c0                         testl   %eax, %eax
// 224: 78 aa                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 230: ff d0                         callq   *%rax
// 232: 49 ff 4d 00                   decq    (%r13)
// 236: 75 98                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: ff d0                         callq   *%rax
// 247: eb 87                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _JIT_OPARG
// 253: 0f b7 c8                      movzwl  %ax, %ecx
// 256: 48 8b 54 cb 48                movq    0x48(%rbx,%rcx,8), %rdx
// 25b: 48 c7 44 cb 48 00 00 00 00    movq    $0x0, 0x48(%rbx,%rcx,8)
// 264: f7 d0                         notl    %eax
// 266: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 26b: 48 98                         cltq
// 26d: 49 89 14 c6                   movq    %rdx, (%r14,%rax,8)
// 271: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 275: 48 83 c6 08                   addq    $0x8, %rsi
// 279: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027b:  R_X86_64_64  _JIT_CONTINUE
// 283: 48 89 df                      movq    %rbx, %rdi
// 286: 4c 89 fa                      movq    %r15, %rdx
// 289: 48 83 c4 28                   addq    $0x28, %rsp
// 28d: 5b                            popq    %rbx
// 28e: 41 5c                         popq    %r12
// 290: 41 5d                         popq    %r13
// 292: 41 5e                         popq    %r14
// 294: 41 5f                         popq    %r15
// 296: 5d                            popq    %rbp
// 297: ff e0                         jmpq    *%rax
// 299: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_FAST_AND_CLEAR_code_body[666] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xce, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4f, 0x8d, 0x04, 0xc6, 0x49, 0x8b, 0x38, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x70, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xae, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x74, 0x31, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xcb, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xb4, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xfd, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xed, 0xeb, 0x18, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xef, 0x0f, 0x84, 0x28, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x48, 0x8b, 0x54, 0xcb, 0x48, 0x48, 0xc7, 0x44, 0xcb, 0x48, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x14, 0xc6, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_FAST_AND_CLEAR_code_holes[16] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x27b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_FAST_AND_CLEAR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_FAST_AND_CLEAR_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_FAST_CHECK
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_FAST_CHECK.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d7                   movq    (%r15,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 df                   movq    (%r15,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c cf                   leaq    (%r15,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 c7                      subq    %r8, %r15
// 8b: 49 83 c7 b8                   addq    $-0x48, %r15
// 8f: 49 c1 ef 03                   shrq    $0x3, %r15
// 93: 45 89 78 40                   movl    %r15d, 0x40(%r8)
// 97: 49 8b 00                      movq    (%r8), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 5c 24 20                movq    %r11, 0x20(%rsp)
// c4: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c9: 48 89 14 24                   movq    %rdx, (%rsp)
// cd: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 0f 01 00 00             je      0x212 <_JIT_ENTRY+0x212>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 135: 78 21                         js      0x158 <_JIT_ENTRY+0x158>
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 141: ff d0                         callq   *%rax
// 143: 49 ff 0c 24                   decq    (%r12)
// 147: 75 0f                         jne     0x158 <_JIT_ENTRY+0x158>
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_Dealloc
// 153: 4c 89 e7                      movq    %r12, %rdi
// 156: ff d0                         callq   *%rax
// 158: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 15d: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 161: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 166: 48 85 d2                      testq   %rdx, %rdx
// 169: 0f 84 2a 01 00 00             je      0x299 <_JIT_ENTRY+0x299>
// 16f: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 174: 4d 8d 34 cf                   leaq    (%r15,%rcx,8), %r14
// 178: 48 89 10                      movq    %rdx, (%rax)
// 17b: 48 8b 3c 24                   movq    (%rsp), %rdi
// 17f: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 183: 48 8b 00                      movq    (%rax), %rax
// 186: 84 c0                         testb   %al, %al
// 188: 74 14                         je      0x19e <_JIT_ENTRY+0x19e>
// 18a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018c:  R_X86_64_64  _Py_HandlePending
// 194: ff d0                         callq   *%rax
// 196: 85 c0                         testl   %eax, %eax
// 198: 0f 85 52 01 00 00             jne     0x2f0 <_JIT_ENTRY+0x2f0>
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  _JIT_OPARG
// 1a8: 0f b7 c0                      movzwl  %ax, %eax
// 1ab: 49 89 dc                      movq    %rbx, %r12
// 1ae: 48 8b 5c c3 48                movq    0x48(%rbx,%rax,8), %rbx
// 1b3: 48 85 db                      testq   %rbx, %rbx
// 1b6: 0f 84 e2 00 00 00             je      0x29e <_JIT_ENTRY+0x29e>
// 1bc: 8b 03                         movl    (%rbx), %eax
// 1be: ff c0                         incl    %eax
// 1c0: 74 0e                         je      0x1d0 <_JIT_ENTRY+0x1d0>
// 1c2: 89 03                         movl    %eax, (%rbx)
// 1c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c6:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1ce: ff d0                         callq   *%rax
// 1d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d2:  R_X86_64_64  _JIT_OPARG
// 1da: f7 d0                         notl    %eax
// 1dc: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1e1: 48 98                         cltq
// 1e3: 49 89 1c c7                   movq    %rbx, (%r15,%rax,8)
// 1e7: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 1eb: 48 83 c6 08                   addq    $0x8, %rsi
// 1ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f1:  R_X86_64_64  _JIT_CONTINUE
// 1f9: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1fe: 48 8b 14 24                   movq    (%rsp), %rdx
// 202: 48 83 c4 28                   addq    $0x28, %rsp
// 206: 5b                            popq    %rbx
// 207: 41 5c                         popq    %r12
// 209: 41 5d                         popq    %r13
// 20b: 41 5e                         popq    %r14
// 20d: 41 5f                         popq    %r15
// 20f: 5d                            popq    %rbp
// 210: ff e0                         jmpq    *%rax
// 212: 41 83 fd 02                   cmpl    $0x2, %r13d
// 216: 41 be 01 00 00 00             movl    $0x1, %r14d
// 21c: 45 0f 43 f5                   cmovael %r13d, %r14d
// 220: 31 db                         xorl    %ebx, %ebx
// 222: eb 18                         jmp     0x23c <_JIT_ENTRY+0x23c>
// 224: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 230: 48 ff c3                      incq    %rbx
// 233: 49 39 de                      cmpq    %rbx, %r14
// 236: 0f 84 c7 fe ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 23c: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 241: 49 8b 45 00                   movq    (%r13), %rax
// 245: 48 85 c0                      testq   %rax, %rax
// 248: 7e 06                         jle     0x250 <_JIT_ENTRY+0x250>
// 24a: 85 c0                         testl   %eax, %eax
// 24c: 78 e2                         js      0x230 <_JIT_ENTRY+0x230>
// 24e: eb 26                         jmp     0x276 <_JIT_ENTRY+0x276>
// 250: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000252:  R_X86_64_64  .rodata.str1.1
// 25a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 25f: 4c 89 ea                      movq    %r13, %rdx
// 262: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000264:  R_X86_64_64  _Py_NegativeRefcount
// 26c: ff d0                         callq   *%rax
// 26e: 49 8b 45 00                   movq    (%r13), %rax
// 272: 85 c0                         testl   %eax, %eax
// 274: 78 ba                         js      0x230 <_JIT_ENTRY+0x230>
// 276: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000278:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 280: ff d0                         callq   *%rax
// 282: 49 ff 4d 00                   decq    (%r13)
// 286: 75 a8                         jne     0x230 <_JIT_ENTRY+0x230>
// 288: 4c 89 ef                      movq    %r13, %rdi
// 28b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028d:  R_X86_64_64  _Py_Dealloc
// 295: ff d0                         callq   *%rax
// 297: eb 97                         jmp     0x230 <_JIT_ENTRY+0x230>
// 299: 49 89 c6                      movq    %rax, %r14
// 29c: eb 52                         jmp     0x2f0 <_JIT_ENTRY+0x2f0>
// 29e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a0:  R_X86_64_64  PyExc_UnboundLocalError
// 2a8: 4c 8b 38                      movq    (%rax), %r15
// 2ab: 49 8b 04 24                   movq    (%r12), %rax
// 2af: 48 8b 78 60                   movq    0x60(%rax), %rdi
// 2b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b5:  R_X86_64_64  _JIT_OPARG
// 2bd: 0f b7 f0                      movzwl  %ax, %esi
// 2c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c2:  R_X86_64_64  PyTuple_GetItem
// 2ca: ff d0                         callq   *%rax
// 2cc: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002ce:  R_X86_64_64  .rodata.str1.1+0x39
// 2d6: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000002d8:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 2e0: 48 8b 3c 24                   movq    (%rsp), %rdi
// 2e4: 4c 89 fe                      movq    %r15, %rsi
// 2e7: 48 89 c1                      movq    %rax, %rcx
// 2ea: 41 ff d0                      callq   *%r8
// 2ed: 4c 89 e3                      movq    %r12, %rbx
// 2f0: 49 29 de                      subq    %rbx, %r14
// 2f3: 49 83 c6 b8                   addq    $-0x48, %r14
// 2f7: 49 c1 ee 03                   shrq    $0x3, %r14
// 2fb: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2ff: 31 c0                         xorl    %eax, %eax
// 301: e9 aa fd ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 306: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_FAST_CHECK_code_body[775] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd7, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xdf, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xcf, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x78, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x20, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x14, 0x24, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0x0f, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x2a, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x4d, 0x8d, 0x34, 0xcf, 0x48, 0x89, 0x10, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x52, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x89, 0xdc, 0x48, 0x8b, 0x5c, 0xc3, 0x48, 0x48, 0x85, 0xdb, 0x0f, 0x84, 0xe2, 0x00, 0x00, 0x00, 0x8b, 0x03, 0xff, 0xc0, 0x74, 0x0e, 0x89, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x1c, 0xc7, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xdb, 0xeb, 0x18, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0xc7, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x49, 0x89, 0xc6, 0xeb, 0x52, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x38, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x78, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xfe, 0x48, 0x89, 0xc1, 0x41, 0xff, 0xd0, 0x4c, 0x89, 0xe3, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xaa, 0xfd, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_FAST_CHECK_code_holes[23] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f1, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x278, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x28d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_UnboundLocalError, 0x0},
    {0x2b5, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2c2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_GetItem, 0x0},
    {0x2ce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00cannot access local variable '%s' where it is not associated with a value\x00"
// 83: 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_FAST_CHECK_data_body[137] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x27, 0x25, 0x73, 0x27, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_FAST_CHECK_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_FROM_DICT_OR_DEREF
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_FROM_DICT_OR_DEREF.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 38                   subq    $0x38, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d7                   movq    (%r15,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 df                   movq    (%r15,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c cf                   leaq    (%r15,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 c7                      subq    %r8, %r15
// 8b: 49 83 c7 b8                   addq    $-0x48, %r15
// 8f: 49 c1 ef 03                   shrq    $0x3, %r15
// 93: 45 89 78 40                   movl    %r15d, 0x40(%r8)
// 97: 49 8b 00                      movq    (%r8), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 38                   addq    $0x38, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 5c 24 20                movq    %r11, 0x20(%rsp)
// c4: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c9: 48 89 54 24 28                movq    %rdx, 0x28(%rsp)
// ce: 4c 89 44 24 30                movq    %r8, 0x30(%rsp)
// d3: 48 85 c0                      testq   %rax, %rax
// d6: 0f 94 c3                      sete    %bl
// d9: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dd: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e1: 48 63 d0                      movslq  %eax, %rdx
// e4: ff 51 08                      callq   *0x8(%rcx)
// e7: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ee:  R_X86_64_64  _JIT_OPARG
// f6: 66 85 c0                      testw   %ax, %ax
// f9: 0f 94 c0                      sete    %al
// fc: 84 c3                         testb   %al, %bl
// fe: 0f 84 80 01 00 00             je      0x284 <_JIT_ENTRY+0x284>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 48 8b 5c 24 30                movq    0x30(%rsp), %rbx
// 136: 4c 8b 74 24 28                movq    0x28(%rsp), %r14
// 13b: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// 140: 78 21                         js      0x163 <_JIT_ENTRY+0x163>
// 142: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000144:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 14c: ff d0                         callq   *%rax
// 14e: 49 ff 0c 24                   decq    (%r12)
// 152: 75 0f                         jne     0x163 <_JIT_ENTRY+0x163>
// 154: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000156:  R_X86_64_64  _Py_Dealloc
// 15e: 4c 89 e7                      movq    %r12, %rdi
// 161: ff d0                         callq   *%rax
// 163: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 168: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 16c: 4d 85 ed                      testq   %r13, %r13
// 16f: 0f 84 94 01 00 00             je      0x309 <_JIT_ENTRY+0x309>
// 175: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 17a: 4d 8d 24 cf                   leaq    (%r15,%rcx,8), %r12
// 17e: 4c 89 28                      movq    %r13, (%rax)
// 181: 49 8b 46 10                   movq    0x10(%r14), %rax
// 185: 48 8b 00                      movq    (%rax), %rax
// 188: 84 c0                         testb   %al, %al
// 18a: 74 17                         je      0x1a3 <_JIT_ENTRY+0x1a3>
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _Py_HandlePending
// 196: 4c 89 f7                      movq    %r14, %rdi
// 199: ff d0                         callq   *%rax
// 19b: 85 c0                         testl   %eax, %eax
// 19d: 0f 85 69 01 00 00             jne     0x30c <_JIT_ENTRY+0x30c>
// 1a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a5:  R_X86_64_64  _JIT_OPARG
// 1ad: 0f b7 c8                      movzwl  %ax, %ecx
// 1b0: f7 d0                         notl    %eax
// 1b2: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1b7: 48 98                         cltq
// 1b9: 4d 8b 6c c7 f8                movq    -0x8(%r15,%rax,8), %r13
// 1be: 48 8b 03                      movq    (%rbx), %rax
// 1c1: 48 8b 40 60                   movq    0x60(%rax), %rax
// 1c5: 48 8b 74 c8 18                movq    0x18(%rax,%rcx,8), %rsi
// 1ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cc:  R_X86_64_64  PyMapping_GetOptionalItem
// 1d4: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 1d9: 4c 89 ef                      movq    %r13, %rdi
// 1dc: ff d0                         callq   *%rax
// 1de: 85 c0                         testl   %eax, %eax
// 1e0: 0f 88 26 01 00 00             js      0x30c <_JIT_ENTRY+0x30c>
// 1e6: 48 83 7c 24 08 00             cmpq    $0x0, 0x8(%rsp)
// 1ec: 0f 84 30 01 00 00             je      0x322 <_JIT_ENTRY+0x322>
// 1f2: 49 8b 45 00                   movq    (%r13), %rax
// 1f6: 48 85 c0                      testq   %rax, %rax
// 1f9: 7f 22                         jg      0x21d <_JIT_ENTRY+0x21d>
// 1fb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001fd:  R_X86_64_64  .rodata.str1.1
// 205: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000207:  R_X86_64_64  _Py_NegativeRefcount
// 20f: be dd 04 00 00                movl    $0x4dd, %esi            # imm = 0x4DD
// 214: 4c 89 ea                      movq    %r13, %rdx
// 217: ff d0                         callq   *%rax
// 219: 49 8b 45 00                   movq    (%r13), %rax
// 21d: 85 c0                         testl   %eax, %eax
// 21f: 78 21                         js      0x242 <_JIT_ENTRY+0x242>
// 221: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000223:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 22b: ff d0                         callq   *%rax
// 22d: 49 ff 4d 00                   decq    (%r13)
// 231: 75 0f                         jne     0x242 <_JIT_ENTRY+0x242>
// 233: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000235:  R_X86_64_64  _Py_Dealloc
// 23d: 4c 89 ef                      movq    %r13, %rdi
// 240: ff d0                         callq   *%rax
// 242: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 247: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000249:  R_X86_64_64  _JIT_OPARG
// 251: f7 d1                         notl    %ecx
// 253: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 259: 48 63 c9                      movslq  %ecx, %rcx
// 25c: 49 89 44 cf f8                movq    %rax, -0x8(%r15,%rcx,8)
// 261: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000263:  R_X86_64_64  _JIT_CONTINUE
// 26b: 48 89 df                      movq    %rbx, %rdi
// 26e: 4c 89 e6                      movq    %r12, %rsi
// 271: 4c 89 f2                      movq    %r14, %rdx
// 274: 48 83 c4 38                   addq    $0x38, %rsp
// 278: 5b                            popq    %rbx
// 279: 41 5c                         popq    %r12
// 27b: 41 5d                         popq    %r13
// 27d: 41 5e                         popq    %r14
// 27f: 41 5f                         popq    %r15
// 281: 5d                            popq    %rbp
// 282: ff e0                         jmpq    *%rax
// 284: 41 83 fd 02                   cmpl    $0x2, %r13d
// 288: bb 01 00 00 00                movl    $0x1, %ebx
// 28d: 41 0f 43 dd                   cmovael %r13d, %ebx
// 291: 45 31 f6                      xorl    %r14d, %r14d
// 294: eb 16                         jmp     0x2ac <_JIT_ENTRY+0x2ac>
// 296: 66 2e 0f 1f 84 00 00 00 00 00 nopw    %cs:(%rax,%rax)
// 2a0: 49 ff c6                      incq    %r14
// 2a3: 4c 39 f3                      cmpq    %r14, %rbx
// 2a6: 0f 84 58 fe ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 2ac: 4e 8b 6c f5 00                movq    (%rbp,%r14,8), %r13
// 2b1: 49 8b 45 00                   movq    (%r13), %rax
// 2b5: 48 85 c0                      testq   %rax, %rax
// 2b8: 7e 06                         jle     0x2c0 <_JIT_ENTRY+0x2c0>
// 2ba: 85 c0                         testl   %eax, %eax
// 2bc: 78 e2                         js      0x2a0 <_JIT_ENTRY+0x2a0>
// 2be: eb 26                         jmp     0x2e6 <_JIT_ENTRY+0x2e6>
// 2c0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002c2:  R_X86_64_64  .rodata.str1.1
// 2ca: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 2cf: 4c 89 ea                      movq    %r13, %rdx
// 2d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d4:  R_X86_64_64  _Py_NegativeRefcount
// 2dc: ff d0                         callq   *%rax
// 2de: 49 8b 45 00                   movq    (%r13), %rax
// 2e2: 85 c0                         testl   %eax, %eax
// 2e4: 78 ba                         js      0x2a0 <_JIT_ENTRY+0x2a0>
// 2e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2f0: ff d0                         callq   *%rax
// 2f2: 49 ff 4d 00                   decq    (%r13)
// 2f6: 75 a8                         jne     0x2a0 <_JIT_ENTRY+0x2a0>
// 2f8: 4c 89 ef                      movq    %r13, %rdi
// 2fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fd:  R_X86_64_64  _Py_Dealloc
// 305: ff d0                         callq   *%rax
// 307: eb 97                         jmp     0x2a0 <_JIT_ENTRY+0x2a0>
// 309: 49 89 c4                      movq    %rax, %r12
// 30c: 49 29 dc                      subq    %rbx, %r12
// 30f: 49 83 c4 b8                   addq    $-0x48, %r12
// 313: 49 c1 ec 03                   shrq    $0x3, %r12
// 317: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 31b: 31 c0                         xorl    %eax, %eax
// 31d: e9 8e fd ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 322: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000324:  R_X86_64_64  _JIT_OPARG
// 32c: 0f b7 c0                      movzwl  %ax, %eax
// 32f: 48 8b 44 c3 48                movq    0x48(%rbx,%rax,8), %rax
// 334: 48 8b 40 10                   movq    0x10(%rax), %rax
// 338: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 33d: 48 85 c0                      testq   %rax, %rax
// 340: 74 1d                         je      0x35f <_JIT_ENTRY+0x35f>
// 342: 8b 08                         movl    (%rax), %ecx
// 344: ff c1                         incl    %ecx
// 346: 0f 84 a6 fe ff ff             je      0x1f2 <_JIT_ENTRY+0x1f2>
// 34c: 89 08                         movl    %ecx, (%rax)
// 34e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000350:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 358: ff d0                         callq   *%rax
// 35a: e9 93 fe ff ff                jmp     0x1f2 <_JIT_ENTRY+0x1f2>
// 35f: 48 8b 33                      movq    (%rbx), %rsi
// 362: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000364:  R_X86_64_64  _JIT_OPARG
// 36c: 0f b7 d0                      movzwl  %ax, %edx
// 36f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000371:  R_X86_64_64  _PyEval_FormatExcUnbound
// 379: 4c 89 f7                      movq    %r14, %rdi
// 37c: ff d0                         callq   *%rax
// 37e: eb 8c                         jmp     0x30c <_JIT_ENTRY+0x30c>
// 380: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_FROM_DICT_OR_DEREF_code_body[897] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x38, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd7, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xdf, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xcf, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x78, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x20, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x28, 0x4c, 0x89, 0x44, 0x24, 0x30, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0x80, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x4c, 0x8b, 0x74, 0x24, 0x28, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x04, 0xc7, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x94, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x4d, 0x8d, 0x24, 0xcf, 0x4c, 0x89, 0x28, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x69, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x6c, 0xc7, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x60, 0x48, 0x8b, 0x74, 0xc8, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x88, 0x26, 0x01, 0x00, 0x00, 0x48, 0x83, 0x7c, 0x24, 0x08, 0x00, 0x0f, 0x84, 0x30, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x44, 0xcf, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x41, 0x83, 0xfd, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xdd, 0x45, 0x31, 0xf6, 0xeb, 0x16, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc6, 0x4c, 0x39, 0xf3, 0x0f, 0x84, 0x58, 0xfe, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xf5, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x49, 0x89, 0xc4, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x8e, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc3, 0x48, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x74, 0x1d, 0x8b, 0x08, 0xff, 0xc1, 0x0f, 0x84, 0xa6, 0xfe, 0xff, 0xff, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x93, 0xfe, 0xff, 0xff, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0xeb, 0x8c};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_FROM_DICT_OR_DEREF_code_holes[26] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xee, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1cc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x207, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x223, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x249, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x324, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x350, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x364, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x371, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_FROM_DICT_OR_DEREF_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_FROM_DICT_OR_DEREF_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_FROM_DICT_OR_GLOBALS
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_FROM_DICT_OR_GLOBALS.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 38                   subq    $0x38, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d7                   movq    (%r15,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 df                   movq    (%r15,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4b 8d 1c cf                   leaq    (%r15,%r9,8), %rbx
// 79: 48 8b 3b                      movq    (%rbx), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 4d 29 c7                      subq    %r8, %r15
// 8a: 49 83 c7 b8                   addq    $-0x48, %r15
// 8e: 49 c1 ef 03                   shrq    $0x3, %r15
// 92: 45 89 78 40                   movl    %r15d, 0x40(%r8)
// 96: 49 8b 00                      movq    (%r8), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 38                   addq    $0x38, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 5c 24 28                movq    %r11, 0x28(%rsp)
// c3: 4c 89 54 24 18                movq    %r10, 0x18(%rsp)
// c8: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// cd: 4c 89 44 24 30                movq    %r8, 0x30(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 40 0f 94 c5                   sete    %bpl
// d9: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dd: 48 8d 73 08                   leaq    0x8(%rbx), %rsi
// e1: 48 63 d0                      movslq  %eax, %rdx
// e4: ff 51 08                      callq   *0x8(%rcx)
// e7: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ee:  R_X86_64_64  _JIT_OPARG
// f6: 66 85 c0                      testw   %ax, %ax
// f9: 0f 94 c0                      sete    %al
// fc: 40 84 c5                      testb   %al, %bpl
// ff: 0f 84 88 01 00 00             je      0x28d <_JIT_ENTRY+0x28d>
// 105: 49 8b 04 24                   movq    (%r12), %rax
// 109: 48 85 c0                      testq   %rax, %rax
// 10c: 7f 22                         jg      0x130 <_JIT_ENTRY+0x130>
// 10e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000110:  R_X86_64_64  .rodata.str1.1
// 118: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011a:  R_X86_64_64  _Py_NegativeRefcount
// 122: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 127: 4c 89 e2                      movq    %r12, %rdx
// 12a: ff d0                         callq   *%rax
// 12c: 49 8b 04 24                   movq    (%r12), %rax
// 130: 85 c0                         testl   %eax, %eax
// 132: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 137: 4c 8b 74 24 28                movq    0x28(%rsp), %r14
// 13c: 4c 8b 6c 24 20                movq    0x20(%rsp), %r13
// 141: 78 21                         js      0x164 <_JIT_ENTRY+0x164>
// 143: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000145:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 14d: ff d0                         callq   *%rax
// 14f: 49 ff 0c 24                   decq    (%r12)
// 153: 75 0f                         jne     0x164 <_JIT_ENTRY+0x164>
// 155: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000157:  R_X86_64_64  _Py_Dealloc
// 15f: 4c 89 e7                      movq    %r12, %rdi
// 162: ff d0                         callq   *%rax
// 164: 4b 8d 04 f7                   leaq    (%r15,%r14,8), %rax
// 168: 4d 85 ed                      testq   %r13, %r13
// 16b: 4c 8b 74 24 30                movq    0x30(%rsp), %r14
// 170: 0f 84 93 01 00 00             je      0x309 <_JIT_ENTRY+0x309>
// 176: 48 8b 4c 24 18                movq    0x18(%rsp), %rcx
// 17b: 4d 8d 24 cf                   leaq    (%r15,%rcx,8), %r12
// 17f: 4c 89 28                      movq    %r13, (%rax)
// 182: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 186: 48 8b 00                      movq    (%rax), %rax
// 189: 84 c0                         testb   %al, %al
// 18b: 74 17                         je      0x1a4 <_JIT_ENTRY+0x1a4>
// 18d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018f:  R_X86_64_64  _Py_HandlePending
// 197: 48 89 df                      movq    %rbx, %rdi
// 19a: ff d0                         callq   *%rax
// 19c: 85 c0                         testl   %eax, %eax
// 19e: 0f 85 68 01 00 00             jne     0x30c <_JIT_ENTRY+0x30c>
// 1a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a6:  R_X86_64_64  _JIT_OPARG
// 1ae: 0f b7 c8                      movzwl  %ax, %ecx
// 1b1: f7 d0                         notl    %eax
// 1b3: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1b8: 48 98                         cltq
// 1ba: 4d 8b 6c c7 f8                movq    -0x8(%r15,%rax,8), %r13
// 1bf: 49 8b 06                      movq    (%r14), %rax
// 1c2: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1c6: 48 8b 6c c8 18                movq    0x18(%rax,%rcx,8), %rbp
// 1cb: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000001cd:  R_X86_64_64  PyMapping_GetOptionalItem
// 1d5: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 1da: 4c 89 ef                      movq    %r13, %rdi
// 1dd: 48 89 ee                      movq    %rbp, %rsi
// 1e0: ff d3                         callq   *%rbx
// 1e2: 85 c0                         testl   %eax, %eax
// 1e4: 0f 88 22 01 00 00             js      0x30c <_JIT_ENTRY+0x30c>
// 1ea: 48 83 7c 24 08 00             cmpq    $0x0, 0x8(%rsp)
// 1f0: 0f 84 2c 01 00 00             je      0x322 <_JIT_ENTRY+0x322>
// 1f6: 49 8b 45 00                   movq    (%r13), %rax
// 1fa: 48 85 c0                      testq   %rax, %rax
// 1fd: 7f 22                         jg      0x221 <_JIT_ENTRY+0x221>
// 1ff: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000201:  R_X86_64_64  .rodata.str1.1
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  _Py_NegativeRefcount
// 213: be 1b 04 00 00                movl    $0x41b, %esi            # imm = 0x41B
// 218: 4c 89 ea                      movq    %r13, %rdx
// 21b: ff d0                         callq   *%rax
// 21d: 49 8b 45 00                   movq    (%r13), %rax
// 221: 85 c0                         testl   %eax, %eax
// 223: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 228: 78 21                         js      0x24b <_JIT_ENTRY+0x24b>
// 22a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 234: ff d0                         callq   *%rax
// 236: 49 ff 4d 00                   decq    (%r13)
// 23a: 75 0f                         jne     0x24b <_JIT_ENTRY+0x24b>
// 23c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023e:  R_X86_64_64  _Py_Dealloc
// 246: 4c 89 ef                      movq    %r13, %rdi
// 249: ff d0                         callq   *%rax
// 24b: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 250: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000252:  R_X86_64_64  _JIT_OPARG
// 25a: f7 d1                         notl    %ecx
// 25c: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 262: 48 63 c9                      movslq  %ecx, %rcx
// 265: 49 89 44 cf f8                movq    %rax, -0x8(%r15,%rcx,8)
// 26a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026c:  R_X86_64_64  _JIT_CONTINUE
// 274: 4c 89 f7                      movq    %r14, %rdi
// 277: 4c 89 e6                      movq    %r12, %rsi
// 27a: 48 89 da                      movq    %rbx, %rdx
// 27d: 48 83 c4 38                   addq    $0x38, %rsp
// 281: 5b                            popq    %rbx
// 282: 41 5c                         popq    %r12
// 284: 41 5d                         popq    %r13
// 286: 41 5e                         popq    %r14
// 288: 41 5f                         popq    %r15
// 28a: 5d                            popq    %rbp
// 28b: ff e0                         jmpq    *%rax
// 28d: 41 83 fd 02                   cmpl    $0x2, %r13d
// 291: bd 01 00 00 00                movl    $0x1, %ebp
// 296: 41 0f 43 ed                   cmovael %r13d, %ebp
// 29a: 45 31 f6                      xorl    %r14d, %r14d
// 29d: eb 0d                         jmp     0x2ac <_JIT_ENTRY+0x2ac>
// 29f: 90                            nop
// 2a0: 49 ff c6                      incq    %r14
// 2a3: 4c 39 f5                      cmpq    %r14, %rbp
// 2a6: 0f 84 59 fe ff ff             je      0x105 <_JIT_ENTRY+0x105>
// 2ac: 4e 8b 2c f3                   movq    (%rbx,%r14,8), %r13
// 2b0: 49 8b 45 00                   movq    (%r13), %rax
// 2b4: 48 85 c0                      testq   %rax, %rax
// 2b7: 7e 07                         jle     0x2c0 <_JIT_ENTRY+0x2c0>
// 2b9: 85 c0                         testl   %eax, %eax
// 2bb: 78 e3                         js      0x2a0 <_JIT_ENTRY+0x2a0>
// 2bd: eb 27                         jmp     0x2e6 <_JIT_ENTRY+0x2e6>
// 2bf: 90                            nop
// 2c0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002c2:  R_X86_64_64  .rodata.str1.1
// 2ca: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 2cf: 4c 89 ea                      movq    %r13, %rdx
// 2d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d4:  R_X86_64_64  _Py_NegativeRefcount
// 2dc: ff d0                         callq   *%rax
// 2de: 49 8b 45 00                   movq    (%r13), %rax
// 2e2: 85 c0                         testl   %eax, %eax
// 2e4: 78 ba                         js      0x2a0 <_JIT_ENTRY+0x2a0>
// 2e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2f0: ff d0                         callq   *%rax
// 2f2: 49 ff 4d 00                   decq    (%r13)
// 2f6: 75 a8                         jne     0x2a0 <_JIT_ENTRY+0x2a0>
// 2f8: 4c 89 ef                      movq    %r13, %rdi
// 2fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fd:  R_X86_64_64  _Py_Dealloc
// 305: ff d0                         callq   *%rax
// 307: eb 97                         jmp     0x2a0 <_JIT_ENTRY+0x2a0>
// 309: 49 89 c4                      movq    %rax, %r12
// 30c: 4d 29 f4                      subq    %r14, %r12
// 30f: 49 83 c4 b8                   addq    $-0x48, %r12
// 313: 49 c1 ec 03                   shrq    $0x3, %r12
// 317: 45 89 66 40                   movl    %r12d, 0x40(%r14)
// 31b: 31 c0                         xorl    %eax, %eax
// 31d: e9 8d fd ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 322: 49 8b 7e 18                   movq    0x18(%r14), %rdi
// 326: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000328:  R_X86_64_64  PyDict_GetItemRef
// 330: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 335: 48 89 ee                      movq    %rbp, %rsi
// 338: ff d0                         callq   *%rax
// 33a: 85 c0                         testl   %eax, %eax
// 33c: 78 ce                         js      0x30c <_JIT_ENTRY+0x30c>
// 33e: 48 83 7c 24 08 00             cmpq    $0x0, 0x8(%rsp)
// 344: 0f 85 ac fe ff ff             jne     0x1f6 <_JIT_ENTRY+0x1f6>
// 34a: 49 8b 7e 20                   movq    0x20(%r14), %rdi
// 34e: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 353: 48 89 ee                      movq    %rbp, %rsi
// 356: ff d3                         callq   *%rbx
// 358: 85 c0                         testl   %eax, %eax
// 35a: 78 b0                         js      0x30c <_JIT_ENTRY+0x30c>
// 35c: 48 83 7c 24 08 00             cmpq    $0x0, 0x8(%rsp)
// 362: 0f 85 8e fe ff ff             jne     0x1f6 <_JIT_ENTRY+0x1f6>
// 368: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000036a:  R_X86_64_64  PyExc_NameError
// 372: 48 8b 30                      movq    (%rax), %rsi
// 375: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000377:  R_X86_64_64  .rodata.str1.1+0x39
// 37f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000381:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 389: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 38e: 48 89 e9                      movq    %rbp, %rcx
// 391: ff d0                         callq   *%rax
// 393: e9 74 ff ff ff                jmp     0x30c <_JIT_ENTRY+0x30c>
// 398: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_FROM_DICT_OR_GLOBALS_code_body[921] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x38, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd7, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xdf, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4b, 0x8d, 0x1c, 0xcf, 0x48, 0x8b, 0x3b, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x78, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x28, 0x4c, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x44, 0x24, 0x30, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x73, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0x88, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x74, 0x24, 0x28, 0x4c, 0x8b, 0x6c, 0x24, 0x20, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xf7, 0x4d, 0x85, 0xed, 0x4c, 0x8b, 0x74, 0x24, 0x30, 0x0f, 0x84, 0x93, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x18, 0x4d, 0x8d, 0x24, 0xcf, 0x4c, 0x89, 0x28, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x68, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x6c, 0xc7, 0xf8, 0x49, 0x8b, 0x06, 0x48, 0x8b, 0x40, 0x20, 0x48, 0x8b, 0x6c, 0xc8, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xee, 0xff, 0xd3, 0x85, 0xc0, 0x0f, 0x88, 0x22, 0x01, 0x00, 0x00, 0x48, 0x83, 0x7c, 0x24, 0x08, 0x00, 0x0f, 0x84, 0x2c, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x1b, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x44, 0xcf, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x41, 0x83, 0xfd, 0x02, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xed, 0x45, 0x31, 0xf6, 0xeb, 0x0d, 0x90, 0x49, 0xff, 0xc6, 0x4c, 0x39, 0xf5, 0x0f, 0x84, 0x59, 0xfe, 0xff, 0xff, 0x4e, 0x8b, 0x2c, 0xf3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x27, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x49, 0x89, 0xc4, 0x4d, 0x29, 0xf4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x45, 0x89, 0x66, 0x40, 0x31, 0xc0, 0xe9, 0x8d, 0xfd, 0xff, 0xff, 0x49, 0x8b, 0x7e, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0xce, 0x48, 0x83, 0x7c, 0x24, 0x08, 0x00, 0x0f, 0x85, 0xac, 0xfe, 0xff, 0xff, 0x49, 0x8b, 0x7e, 0x20, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x89, 0xee, 0xff, 0xd3, 0x85, 0xc0, 0x78, 0xb0, 0x48, 0x83, 0x7c, 0x24, 0x08, 0x00, 0x0f, 0x85, 0x8e, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x48, 0x89, 0xe9, 0xff, 0xd0, 0xe9, 0x74, 0xff, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_FROM_DICT_OR_GLOBALS_code_holes[26] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xee, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x11a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x157, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1a6, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1cd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x201, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x22c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x26c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x328, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_GetItemRef, 0x0},
    {0x36a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x377, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x381, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00name '%.200s' is not defined\x00"
// 56: 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_FROM_DICT_OR_GLOBALS_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_FROM_DICT_OR_GLOBALS_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_GLOBAL
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_GLOBAL.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 38                   subq    $0x38, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d7                   movq    (%r15,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 df                   movq    (%r15,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4b 8d 1c cf                   leaq    (%r15,%r9,8), %rbx
// 79: 48 8b 3b                      movq    (%rbx), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 4d 29 c7                      subq    %r8, %r15
// 8a: 49 83 c7 b8                   addq    $-0x48, %r15
// 8e: 49 c1 ef 03                   shrq    $0x3, %r15
// 92: 45 89 78 40                   movl    %r15d, 0x40(%r8)
// 96: 49 8b 00                      movq    (%r8), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 38                   addq    $0x38, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 5c 24 20                movq    %r11, 0x20(%rsp)
// c3: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c8: 48 89 54 24 28                movq    %rdx, 0x28(%rsp)
// cd: 4c 89 44 24 30                movq    %r8, 0x30(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 40 0f 94 c5                   sete    %bpl
// d9: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dd: 48 8d 73 08                   leaq    0x8(%rbx), %rsi
// e1: 48 63 d0                      movslq  %eax, %rdx
// e4: ff 51 08                      callq   *0x8(%rcx)
// e7: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ee:  R_X86_64_64  _JIT_OPARG
// f6: 66 85 c0                      testw   %ax, %ax
// f9: 0f 94 c0                      sete    %al
// fc: 40 84 c5                      testb   %al, %bpl
// ff: 0f 84 6e 01 00 00             je      0x273 <_JIT_ENTRY+0x273>
// 105: 49 8b 04 24                   movq    (%r12), %rax
// 109: 48 85 c0                      testq   %rax, %rax
// 10c: 7f 22                         jg      0x130 <_JIT_ENTRY+0x130>
// 10e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000110:  R_X86_64_64  .rodata.str1.1
// 118: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011a:  R_X86_64_64  _Py_NegativeRefcount
// 122: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 127: 4c 89 e2                      movq    %r12, %rdx
// 12a: ff d0                         callq   *%rax
// 12c: 49 8b 04 24                   movq    (%r12), %rax
// 130: 85 c0                         testl   %eax, %eax
// 132: 48 8b 6c 24 28                movq    0x28(%rsp), %rbp
// 137: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 13c: 78 21                         js      0x15f <_JIT_ENTRY+0x15f>
// 13e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000140:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 148: ff d0                         callq   *%rax
// 14a: 49 ff 0c 24                   decq    (%r12)
// 14e: 75 0f                         jne     0x15f <_JIT_ENTRY+0x15f>
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _Py_Dealloc
// 15a: 4c 89 e7                      movq    %r12, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 49 8d 04 df                   leaq    (%r15,%rbx,8), %rax
// 163: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 168: 48 85 d2                      testq   %rdx, %rdx
// 16b: 4c 8b 74 24 30                movq    0x30(%rsp), %r14
// 170: 0f 84 83 01 00 00             je      0x2f9 <_JIT_ENTRY+0x2f9>
// 176: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 17b: 4d 8d 2c cf                   leaq    (%r15,%rcx,8), %r13
// 17f: 48 89 10                      movq    %rdx, (%rax)
// 182: 48 8b 45 10                   movq    0x10(%rbp), %rax
// 186: 48 8b 00                      movq    (%rax), %rax
// 189: 84 c0                         testb   %al, %al
// 18b: 74 17                         je      0x1a4 <_JIT_ENTRY+0x1a4>
// 18d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018f:  R_X86_64_64  _Py_HandlePending
// 197: 48 89 ef                      movq    %rbp, %rdi
// 19a: ff d0                         callq   *%rax
// 19c: 85 c0                         testl   %eax, %eax
// 19e: 0f 85 58 01 00 00             jne     0x2fc <_JIT_ENTRY+0x2fc>
// 1a4: 49 8b 06                      movq    (%r14), %rax
// 1a7: 49 8b 7e 18                   movq    0x18(%r14), %rdi
// 1ab: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1af: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001b1:  R_X86_64_64  _JIT_OPARG
// 1b9: 81 e1 fe ff 00 00             andl    $0xfffe, %ecx           # imm = 0xFFFE
// 1bf: 4c 8b 64 88 18                movq    0x18(%rax,%rcx,4), %r12
// 1c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c6:  R_X86_64_64  PyDict_Type
// 1ce: 48 39 47 08                   cmpq    %rax, 0x8(%rdi)
// 1d2: 75 0e                         jne     0x1e2 <_JIT_ENTRY+0x1e2>
// 1d4: 49 8b 76 20                   movq    0x20(%r14), %rsi
// 1d8: 48 39 46 08                   cmpq    %rax, 0x8(%rsi)
// 1dc: 0f 84 52 01 00 00             je      0x334 <_JIT_ENTRY+0x334>
// 1e2: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000001e4:  R_X86_64_64  PyMapping_GetOptionalItem
// 1ec: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 1f1: 4c 89 e6                      movq    %r12, %rsi
// 1f4: ff d3                         callq   *%rbx
// 1f6: 85 c0                         testl   %eax, %eax
// 1f8: 0f 88 fe 00 00 00             js      0x2fc <_JIT_ENTRY+0x2fc>
// 1fe: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 203: 48 85 c0                      testq   %rax, %rax
// 206: 0f 84 06 01 00 00             je      0x312 <_JIT_ENTRY+0x312>
// 20c: 49 89 45 00                   movq    %rax, (%r13)
// 210: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000212:  R_X86_64_64  _JIT_OPARG
// 21a: a8 01                         testb   $0x1, %al
// 21c: 74 12                         je      0x230 <_JIT_ENTRY+0x230>
// 21e: f7 d0                         notl    %eax
// 220: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 225: 48 98                         cltq
// 227: 49 c7 44 c7 08 00 00 00 00    movq    $0x0, 0x8(%r15,%rax,8)
// 230: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000232:  R_X86_64_64  _JIT_OPARG
// 23a: 89 c1                         movl    %eax, %ecx
// 23c: f7 d1                         notl    %ecx
// 23e: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 244: 48 63 c9                      movslq  %ecx, %rcx
// 247: 83 e0 01                      andl    $0x1, %eax
// 24a: ff c0                         incl    %eax
// 24c: 48 01 c8                      addq    %rcx, %rax
// 24f: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 253: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000255:  R_X86_64_64  _JIT_CONTINUE
// 25d: 4c 89 f7                      movq    %r14, %rdi
// 260: 48 89 ea                      movq    %rbp, %rdx
// 263: 48 83 c4 38                   addq    $0x38, %rsp
// 267: 5b                            popq    %rbx
// 268: 41 5c                         popq    %r12
// 26a: 41 5d                         popq    %r13
// 26c: 41 5e                         popq    %r14
// 26e: 41 5f                         popq    %r15
// 270: 5d                            popq    %rbp
// 271: ff e0                         jmpq    *%rax
// 273: 41 83 fd 02                   cmpl    $0x2, %r13d
// 277: 41 be 01 00 00 00             movl    $0x1, %r14d
// 27d: 45 0f 43 f5                   cmovael %r13d, %r14d
// 281: 31 ed                         xorl    %ebp, %ebp
// 283: eb 17                         jmp     0x29c <_JIT_ENTRY+0x29c>
// 285: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// 290: 48 ff c5                      incq    %rbp
// 293: 49 39 ee                      cmpq    %rbp, %r14
// 296: 0f 84 69 fe ff ff             je      0x105 <_JIT_ENTRY+0x105>
// 29c: 4c 8b 2c eb                   movq    (%rbx,%rbp,8), %r13
// 2a0: 49 8b 45 00                   movq    (%r13), %rax
// 2a4: 48 85 c0                      testq   %rax, %rax
// 2a7: 7e 07                         jle     0x2b0 <_JIT_ENTRY+0x2b0>
// 2a9: 85 c0                         testl   %eax, %eax
// 2ab: 78 e3                         js      0x290 <_JIT_ENTRY+0x290>
// 2ad: eb 27                         jmp     0x2d6 <_JIT_ENTRY+0x2d6>
// 2af: 90                            nop
// 2b0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002b2:  R_X86_64_64  .rodata.str1.1
// 2ba: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 2bf: 4c 89 ea                      movq    %r13, %rdx
// 2c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c4:  R_X86_64_64  _Py_NegativeRefcount
// 2cc: ff d0                         callq   *%rax
// 2ce: 49 8b 45 00                   movq    (%r13), %rax
// 2d2: 85 c0                         testl   %eax, %eax
// 2d4: 78 ba                         js      0x290 <_JIT_ENTRY+0x290>
// 2d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2e0: ff d0                         callq   *%rax
// 2e2: 49 ff 4d 00                   decq    (%r13)
// 2e6: 75 a8                         jne     0x290 <_JIT_ENTRY+0x290>
// 2e8: 4c 89 ef                      movq    %r13, %rdi
// 2eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ed:  R_X86_64_64  _Py_Dealloc
// 2f5: ff d0                         callq   *%rax
// 2f7: eb 97                         jmp     0x290 <_JIT_ENTRY+0x290>
// 2f9: 49 89 c5                      movq    %rax, %r13
// 2fc: 4d 29 f5                      subq    %r14, %r13
// 2ff: 49 83 c5 b8                   addq    $-0x48, %r13
// 303: 49 c1 ed 03                   shrq    $0x3, %r13
// 307: 45 89 6e 40                   movl    %r13d, 0x40(%r14)
// 30b: 31 c0                         xorl    %eax, %eax
// 30d: e9 9d fd ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 312: 49 8b 7e 20                   movq    0x20(%r14), %rdi
// 316: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 31b: 4c 89 e6                      movq    %r12, %rsi
// 31e: ff d3                         callq   *%rbx
// 320: 85 c0                         testl   %eax, %eax
// 322: 78 d8                         js      0x2fc <_JIT_ENTRY+0x2fc>
// 324: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 329: 48 85 c0                      testq   %rax, %rax
// 32c: 0f 85 da fe ff ff             jne     0x20c <_JIT_ENTRY+0x20c>
// 332: eb 4f                         jmp     0x383 <_JIT_ENTRY+0x383>
// 334: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000336:  R_X86_64_64  _PyDict_LoadGlobal
// 33e: 4c 89 e2                      movq    %r12, %rdx
// 341: ff d0                         callq   *%rax
// 343: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 348: 48 85 c0                      testq   %rax, %rax
// 34b: 74 22                         je      0x36f <_JIT_ENTRY+0x36f>
// 34d: 8b 08                         movl    (%rax), %ecx
// 34f: ff c1                         incl    %ecx
// 351: 0f 84 b5 fe ff ff             je      0x20c <_JIT_ENTRY+0x20c>
// 357: 89 08                         movl    %ecx, (%rax)
// 359: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000035b:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 363: ff d0                         callq   *%rax
// 365: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 36a: e9 9d fe ff ff                jmp     0x20c <_JIT_ENTRY+0x20c>
// 36f: 48 8b 45 68                   movq    0x68(%rbp), %rax
// 373: 48 85 c0                      testq   %rax, %rax
// 376: 74 0b                         je      0x383 <_JIT_ENTRY+0x383>
// 378: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 37d: 0f 85 79 ff ff ff             jne     0x2fc <_JIT_ENTRY+0x2fc>
// 383: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000385:  R_X86_64_64  PyExc_NameError
// 38d: 48 8b 30                      movq    (%rax), %rsi
// 390: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000392:  R_X86_64_64  .rodata.str1.1+0x39
// 39a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000039c:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 3a4: 48 89 ef                      movq    %rbp, %rdi
// 3a7: 4c 89 e1                      movq    %r12, %rcx
// 3aa: ff d0                         callq   *%rax
// 3ac: e9 4b ff ff ff                jmp     0x2fc <_JIT_ENTRY+0x2fc>
// 3b1: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_GLOBAL_code_body[946] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x38, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd7, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xdf, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4b, 0x8d, 0x1c, 0xcf, 0x48, 0x8b, 0x3b, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x78, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x20, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x28, 0x4c, 0x89, 0x44, 0x24, 0x30, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x73, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0x6e, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x28, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x85, 0xd2, 0x4c, 0x8b, 0x74, 0x24, 0x30, 0x0f, 0x84, 0x83, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x4d, 0x8d, 0x2c, 0xcf, 0x48, 0x89, 0x10, 0x48, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x58, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x06, 0x49, 0x8b, 0x7e, 0x18, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfe, 0xff, 0x00, 0x00, 0x4c, 0x8b, 0x64, 0x88, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x47, 0x08, 0x75, 0x0e, 0x49, 0x8b, 0x76, 0x20, 0x48, 0x39, 0x46, 0x08, 0x0f, 0x84, 0x52, 0x01, 0x00, 0x00, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0xff, 0xd3, 0x85, 0xc0, 0x0f, 0x88, 0xfe, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x06, 0x01, 0x00, 0x00, 0x49, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x12, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0xc7, 0x44, 0xc7, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x83, 0xe0, 0x01, 0xff, 0xc0, 0x48, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xed, 0xeb, 0x17, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xee, 0x0f, 0x84, 0x69, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x2c, 0xeb, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x27, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x49, 0x89, 0xc5, 0x4d, 0x29, 0xf5, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x45, 0x89, 0x6e, 0x40, 0x31, 0xc0, 0xe9, 0x9d, 0xfd, 0xff, 0xff, 0x49, 0x8b, 0x7e, 0x20, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0xff, 0xd3, 0x85, 0xc0, 0x78, 0xd8, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x85, 0xda, 0xfe, 0xff, 0xff, 0xeb, 0x4f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x74, 0x22, 0x8b, 0x08, 0xff, 0xc1, 0x0f, 0x84, 0xb5, 0xfe, 0xff, 0xff, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0xe9, 0x9d, 0xfe, 0xff, 0xff, 0x48, 0x8b, 0x45, 0x68, 0x48, 0x85, 0xc0, 0x74, 0x0b, 0x48, 0x83, 0x78, 0x08, 0x00, 0x0f, 0x85, 0x79, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe1, 0xff, 0xd0, 0xe9, 0x4b, 0xff, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_GLOBAL_code_holes[25] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xee, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x11a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x140, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x1e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x232, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x255, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2b2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2c4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x336, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_LoadGlobal, 0x0},
    {0x35b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x385, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x392, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x39c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00name '%.200s' is not defined\x00"
// 56: 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_GLOBAL_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_GLOBAL_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_GLOBAL_BUILTINS
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_GLOBAL_BUILTINS.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d6                   movq    (%r14,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 de                   movq    (%r14,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c ce                   leaq    (%r14,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 c6                      subq    %r8, %r14
// 8b: 49 83 c6 b8                   addq    $-0x48, %r14
// 8f: 49 c1 ee 03                   shrq    $0x3, %r14
// 93: 45 89 70 40                   movl    %r14d, 0x40(%r8)
// 97: 49 8b 00                      movq    (%r8), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 5c 24 20                movq    %r11, 0x20(%rsp)
// c4: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c9: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// ce: 4c 89 04 24                   movq    %r8, (%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 b3 00 00 00             je      0x1b6 <_JIT_ENTRY+0x1b6>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 1c 24                   movq    (%rsp), %rbx
// 134: 78 21                         js      0x157 <_JIT_ENTRY+0x157>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 140: ff d0                         callq   *%rax
// 142: 49 ff 0c 24                   decq    (%r12)
// 146: 75 0f                         jne     0x157 <_JIT_ENTRY+0x157>
// 148: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014a:  R_X86_64_64  _Py_Dealloc
// 152: 4c 89 e7                      movq    %r12, %rdi
// 155: ff d0                         callq   *%rax
// 157: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 15c: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 160: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 165: 48 85 d2                      testq   %rdx, %rdx
// 168: 74 37                         je      0x1a1 <_JIT_ENTRY+0x1a1>
// 16a: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 16f: 4d 8d 3c ce                   leaq    (%r14,%rcx,8), %r15
// 173: 48 89 10                      movq    %rdx, (%rax)
// 176: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 17b: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 17f: 48 8b 00                      movq    (%rax), %rax
// 182: 84 c0                         testb   %al, %al
// 184: 0f 84 af 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 18a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018c:  R_X86_64_64  _Py_HandlePending
// 194: ff d0                         callq   *%rax
// 196: 85 c0                         testl   %eax, %eax
// 198: 0f 84 9b 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 19e: 4c 89 f8                      movq    %r15, %rax
// 1a1: 48 29 d8                      subq    %rbx, %rax
// 1a4: 48 83 c0 b8                   addq    $-0x48, %rax
// 1a8: 48 c1 e8 03                   shrq    $0x3, %rax
// 1ac: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1af: 31 c0                         xorl    %eax, %eax
// 1b1: e9 fa fe ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 1b6: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1ba: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1c0: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1c4: 31 db                         xorl    %ebx, %ebx
// 1c6: eb 14                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c8: 0f 1f 84 00 00 00 00 00       nopl    (%rax,%rax)
// 1d0: 48 ff c3                      incq    %rbx
// 1d3: 49 39 df                      cmpq    %rbx, %r15
// 1d6: 0f 84 27 ff ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 1dc: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1e1: 49 8b 45 00                   movq    (%r13), %rax
// 1e5: 48 85 c0                      testq   %rax, %rax
// 1e8: 7e 06                         jle     0x1f0 <_JIT_ENTRY+0x1f0>
// 1ea: 85 c0                         testl   %eax, %eax
// 1ec: 78 e2                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1ee: eb 26                         jmp     0x216 <_JIT_ENTRY+0x216>
// 1f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f2:  R_X86_64_64  .rodata.str1.1
// 1fa: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ff: 4c 89 ea                      movq    %r13, %rdx
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_NegativeRefcount
// 20c: ff d0                         callq   *%rax
// 20e: 49 8b 45 00                   movq    (%r13), %rax
// 212: 85 c0                         testl   %eax, %eax
// 214: 78 ba                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 220: ff d0                         callq   *%rax
// 222: 49 ff 4d 00                   decq    (%r13)
// 226: 75 a8                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 228: 4c 89 ef                      movq    %r13, %rdi
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_Dealloc
// 235: ff d0                         callq   *%rax
// 237: eb 97                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 239: 48 8b 43 20                   movq    0x20(%rbx), %rax
// 23d: 48 8b 40 20                   movq    0x20(%rax), %rax
// 241: 0f b6 48 09                   movzbl  0x9(%rax), %ecx
// 245: ba 01 00 00 00                movl    $0x1, %edx
// 24a: 48 d3 e2                      shlq    %cl, %rdx
// 24d: 48 01 c2                      addq    %rax, %rdx
// 250: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000252:  R_X86_64_64  _JIT_OPERAND
// 25a: 0f b7 c0                      movzwl  %ax, %eax
// 25d: 48 c1 e0 04                   shlq    $0x4, %rax
// 261: 48 8b 5c 10 28                movq    0x28(%rax,%rdx), %rbx
// 266: 48 85 db                      testq   %rbx, %rbx
// 269: 74 7d                         je      0x2e8 <_JIT_ENTRY+0x2e8>
// 26b: 8b 03                         movl    (%rbx), %eax
// 26d: ff c0                         incl    %eax
// 26f: 74 0e                         je      0x27f <_JIT_ENTRY+0x27f>
// 271: 89 03                         movl    %eax, (%rbx)
// 273: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000275:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 27d: ff d0                         callq   *%rax
// 27f: 49 89 1f                      movq    %rbx, (%r15)
// 282: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000284:  R_X86_64_64  _JIT_OPARG
// 28c: a8 01                         testb   $0x1, %al
// 28e: 74 12                         je      0x2a2 <_JIT_ENTRY+0x2a2>
// 290: f7 d0                         notl    %eax
// 292: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 297: 48 98                         cltq
// 299: 49 c7 44 c6 08 00 00 00 00    movq    $0x0, 0x8(%r14,%rax,8)
// 2a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a4:  R_X86_64_64  _JIT_OPARG
// 2ac: 89 c1                         movl    %eax, %ecx
// 2ae: f7 d1                         notl    %ecx
// 2b0: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 2b6: 48 63 c9                      movslq  %ecx, %rcx
// 2b9: 83 e0 01                      andl    $0x1, %eax
// 2bc: ff c0                         incl    %eax
// 2be: 48 01 c8                      addq    %rcx, %rax
// 2c1: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 2c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c7:  R_X86_64_64  _JIT_CONTINUE
// 2cf: 48 8b 3c 24                   movq    (%rsp), %rdi
// 2d3: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2d8: 48 83 c4 28                   addq    $0x28, %rsp
// 2dc: 5b                            popq    %rbx
// 2dd: 41 5c                         popq    %r12
// 2df: 41 5d                         popq    %r13
// 2e1: 41 5e                         popq    %r14
// 2e3: 41 5f                         popq    %r15
// 2e5: 5d                            popq    %rbp
// 2e6: ff e0                         jmpq    *%rax
// 2e8: 4d 89 fe                      movq    %r15, %r14
// 2eb: 4c 8b 04 24                   movq    (%rsp), %r8
// 2ef: e9 94 fd ff ff                jmp     0x88 <_JIT_ENTRY+0x88>
// 2f4: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_GLOBAL_BUILTINS_code_body[757] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd6, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xde, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xce, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc6, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x70, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x20, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xb3, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x85, 0xd2, 0x74, 0x37, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x4d, 0x8d, 0x3c, 0xce, 0x48, 0x89, 0x10, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xaf, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x9b, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xfa, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xdb, 0xeb, 0x14, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0x27, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0x8b, 0x43, 0x20, 0x48, 0x8b, 0x40, 0x20, 0x0f, 0xb6, 0x48, 0x09, 0xba, 0x01, 0x00, 0x00, 0x00, 0x48, 0xd3, 0xe2, 0x48, 0x01, 0xc2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x04, 0x48, 0x8b, 0x5c, 0x10, 0x28, 0x48, 0x85, 0xdb, 0x74, 0x7d, 0x8b, 0x03, 0xff, 0xc0, 0x74, 0x0e, 0x89, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x89, 0x1f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x12, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0xc7, 0x44, 0xc6, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x83, 0xe0, 0x01, 0xff, 0xc0, 0x48, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x89, 0xfe, 0x4c, 0x8b, 0x04, 0x24, 0xe9, 0x94, 0xfd, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_GLOBAL_BUILTINS_code_holes[19] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x275, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x284, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2a4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2c7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_GLOBAL_BUILTINS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_GLOBAL_BUILTINS_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_GLOBAL_MODULE
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_GLOBAL_MODULE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d6                   movq    (%r14,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 de                   movq    (%r14,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c ce                   leaq    (%r14,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 c6                      subq    %r8, %r14
// 8b: 49 83 c6 b8                   addq    $-0x48, %r14
// 8f: 49 c1 ee 03                   shrq    $0x3, %r14
// 93: 45 89 70 40                   movl    %r14d, 0x40(%r8)
// 97: 49 8b 00                      movq    (%r8), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 5c 24 20                movq    %r11, 0x20(%rsp)
// c4: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c9: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// ce: 4c 89 04 24                   movq    %r8, (%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 b3 00 00 00             je      0x1b6 <_JIT_ENTRY+0x1b6>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 1c 24                   movq    (%rsp), %rbx
// 134: 78 21                         js      0x157 <_JIT_ENTRY+0x157>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 140: ff d0                         callq   *%rax
// 142: 49 ff 0c 24                   decq    (%r12)
// 146: 75 0f                         jne     0x157 <_JIT_ENTRY+0x157>
// 148: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014a:  R_X86_64_64  _Py_Dealloc
// 152: 4c 89 e7                      movq    %r12, %rdi
// 155: ff d0                         callq   *%rax
// 157: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 15c: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 160: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 165: 48 85 d2                      testq   %rdx, %rdx
// 168: 74 37                         je      0x1a1 <_JIT_ENTRY+0x1a1>
// 16a: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 16f: 4d 8d 3c ce                   leaq    (%r14,%rcx,8), %r15
// 173: 48 89 10                      movq    %rdx, (%rax)
// 176: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 17b: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 17f: 48 8b 00                      movq    (%rax), %rax
// 182: 84 c0                         testb   %al, %al
// 184: 0f 84 af 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 18a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018c:  R_X86_64_64  _Py_HandlePending
// 194: ff d0                         callq   *%rax
// 196: 85 c0                         testl   %eax, %eax
// 198: 0f 84 9b 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 19e: 4c 89 f8                      movq    %r15, %rax
// 1a1: 48 29 d8                      subq    %rbx, %rax
// 1a4: 48 83 c0 b8                   addq    $-0x48, %rax
// 1a8: 48 c1 e8 03                   shrq    $0x3, %rax
// 1ac: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1af: 31 c0                         xorl    %eax, %eax
// 1b1: e9 fa fe ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 1b6: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1ba: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1c0: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1c4: 31 db                         xorl    %ebx, %ebx
// 1c6: eb 14                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c8: 0f 1f 84 00 00 00 00 00       nopl    (%rax,%rax)
// 1d0: 48 ff c3                      incq    %rbx
// 1d3: 49 39 df                      cmpq    %rbx, %r15
// 1d6: 0f 84 27 ff ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 1dc: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1e1: 49 8b 45 00                   movq    (%r13), %rax
// 1e5: 48 85 c0                      testq   %rax, %rax
// 1e8: 7e 06                         jle     0x1f0 <_JIT_ENTRY+0x1f0>
// 1ea: 85 c0                         testl   %eax, %eax
// 1ec: 78 e2                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1ee: eb 26                         jmp     0x216 <_JIT_ENTRY+0x216>
// 1f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f2:  R_X86_64_64  .rodata.str1.1
// 1fa: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ff: 4c 89 ea                      movq    %r13, %rdx
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_NegativeRefcount
// 20c: ff d0                         callq   *%rax
// 20e: 49 8b 45 00                   movq    (%r13), %rax
// 212: 85 c0                         testl   %eax, %eax
// 214: 78 ba                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 220: ff d0                         callq   *%rax
// 222: 49 ff 4d 00                   decq    (%r13)
// 226: 75 a8                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 228: 4c 89 ef                      movq    %r13, %rdi
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_Dealloc
// 235: ff d0                         callq   *%rax
// 237: eb 97                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 239: 48 8b 43 18                   movq    0x18(%rbx), %rax
// 23d: 48 8b 40 20                   movq    0x20(%rax), %rax
// 241: 0f b6 48 09                   movzbl  0x9(%rax), %ecx
// 245: ba 01 00 00 00                movl    $0x1, %edx
// 24a: 48 d3 e2                      shlq    %cl, %rdx
// 24d: 48 01 c2                      addq    %rax, %rdx
// 250: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000252:  R_X86_64_64  _JIT_OPERAND
// 25a: 0f b7 c0                      movzwl  %ax, %eax
// 25d: 48 c1 e0 04                   shlq    $0x4, %rax
// 261: 48 8b 5c 10 28                movq    0x28(%rax,%rdx), %rbx
// 266: 48 85 db                      testq   %rbx, %rbx
// 269: 74 7d                         je      0x2e8 <_JIT_ENTRY+0x2e8>
// 26b: 8b 03                         movl    (%rbx), %eax
// 26d: ff c0                         incl    %eax
// 26f: 74 0e                         je      0x27f <_JIT_ENTRY+0x27f>
// 271: 89 03                         movl    %eax, (%rbx)
// 273: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000275:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 27d: ff d0                         callq   *%rax
// 27f: 49 89 1f                      movq    %rbx, (%r15)
// 282: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000284:  R_X86_64_64  _JIT_OPARG
// 28c: a8 01                         testb   $0x1, %al
// 28e: 74 12                         je      0x2a2 <_JIT_ENTRY+0x2a2>
// 290: f7 d0                         notl    %eax
// 292: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 297: 48 98                         cltq
// 299: 49 c7 44 c6 08 00 00 00 00    movq    $0x0, 0x8(%r14,%rax,8)
// 2a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a4:  R_X86_64_64  _JIT_OPARG
// 2ac: 89 c1                         movl    %eax, %ecx
// 2ae: f7 d1                         notl    %ecx
// 2b0: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 2b6: 48 63 c9                      movslq  %ecx, %rcx
// 2b9: 83 e0 01                      andl    $0x1, %eax
// 2bc: ff c0                         incl    %eax
// 2be: 48 01 c8                      addq    %rcx, %rax
// 2c1: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 2c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c7:  R_X86_64_64  _JIT_CONTINUE
// 2cf: 48 8b 3c 24                   movq    (%rsp), %rdi
// 2d3: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2d8: 48 83 c4 28                   addq    $0x28, %rsp
// 2dc: 5b                            popq    %rbx
// 2dd: 41 5c                         popq    %r12
// 2df: 41 5d                         popq    %r13
// 2e1: 41 5e                         popq    %r14
// 2e3: 41 5f                         popq    %r15
// 2e5: 5d                            popq    %rbp
// 2e6: ff e0                         jmpq    *%rax
// 2e8: 4d 89 fe                      movq    %r15, %r14
// 2eb: 4c 8b 04 24                   movq    (%rsp), %r8
// 2ef: e9 94 fd ff ff                jmp     0x88 <_JIT_ENTRY+0x88>
// 2f4: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_GLOBAL_MODULE_code_body[757] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd6, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xde, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xce, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc6, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x70, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x20, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xb3, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x85, 0xd2, 0x74, 0x37, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x4d, 0x8d, 0x3c, 0xce, 0x48, 0x89, 0x10, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xaf, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x9b, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xfa, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xdb, 0xeb, 0x14, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0x27, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0x8b, 0x43, 0x18, 0x48, 0x8b, 0x40, 0x20, 0x0f, 0xb6, 0x48, 0x09, 0xba, 0x01, 0x00, 0x00, 0x00, 0x48, 0xd3, 0xe2, 0x48, 0x01, 0xc2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x04, 0x48, 0x8b, 0x5c, 0x10, 0x28, 0x48, 0x85, 0xdb, 0x74, 0x7d, 0x8b, 0x03, 0xff, 0xc0, 0x74, 0x0e, 0x89, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x89, 0x1f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x12, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0xc7, 0x44, 0xc6, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x83, 0xe0, 0x01, 0xff, 0xc0, 0x48, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x89, 0xfe, 0x4c, 0x8b, 0x04, 0x24, 0xe9, 0x94, 0xfd, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_GLOBAL_MODULE_code_holes[19] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x275, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x284, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2a4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2c7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_GLOBAL_MODULE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_GLOBAL_MODULE_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_LOCALS
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_LOCALS.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 cf                   movq    (%r15,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d7                   movq    (%r15,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4f 8d 04 c7                   leaq    (%r15,%r8,8), %r8
// 79: 49 8b 38                      movq    (%r8), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 49 29 df                      subq    %rbx, %r15
// 8a: 49 83 c7 b8                   addq    $-0x48, %r15
// 8e: 49 c1 ef 03                   shrq    $0x3, %r15
// 92: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 96: 48 8b 03                      movq    (%rbx), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// c3: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// c8: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cd: 48 85 c0                      testq   %rax, %rax
// d0: 40 0f 94 c5                   sete    %bpl
// d4: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// d8: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// dd: 49 8d 70 08                   leaq    0x8(%r8), %rsi
// e1: 48 63 d0                      movslq  %eax, %rdx
// e4: ff 51 08                      callq   *0x8(%rcx)
// e7: 48 89 04 24                   movq    %rax, (%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 fd 00 00 00             je      0x201 <_JIT_ENTRY+0x201>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// 136: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 13b: 78 21                         js      0x15e <_JIT_ENTRY+0x15e>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 147: ff d0                         callq   *%rax
// 149: 49 ff 0c 24                   decq    (%r12)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_Dealloc
// 159: 4c 89 e7                      movq    %r12, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 163: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 167: 48 8b 0c 24                   movq    (%rsp), %rcx
// 16b: 48 85 c9                      testq   %rcx, %rcx
// 16e: 0f 84 25 01 00 00             je      0x299 <_JIT_ENTRY+0x299>
// 174: 4f 8d 34 f7                   leaq    (%r15,%r14,8), %r14
// 178: 48 89 08                      movq    %rcx, (%rax)
// 17b: 49 8b 45 10                   movq    0x10(%r13), %rax
// 17f: 48 8b 00                      movq    (%rax), %rax
// 182: 84 c0                         testb   %al, %al
// 184: 74 17                         je      0x19d <_JIT_ENTRY+0x19d>
// 186: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000188:  R_X86_64_64  _Py_HandlePending
// 190: 4c 89 ef                      movq    %r13, %rdi
// 193: ff d0                         callq   *%rax
// 195: 85 c0                         testl   %eax, %eax
// 197: 0f 85 27 01 00 00             jne     0x2c4 <_JIT_ENTRY+0x2c4>
// 19d: 4c 8b 63 28                   movq    0x28(%rbx), %r12
// 1a1: 4d 85 e4                      testq   %r12, %r12
// 1a4: 0f 84 f4 00 00 00             je      0x29e <_JIT_ENTRY+0x29e>
// 1aa: 41 8b 04 24                   movl    (%r12), %eax
// 1ae: ff c0                         incl    %eax
// 1b0: 74 10                         je      0x1c2 <_JIT_ENTRY+0x1c2>
// 1b2: 41 89 04 24                   movl    %eax, (%r12)
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c4:  R_X86_64_64  _JIT_OPARG
// 1cc: f7 d0                         notl    %eax
// 1ce: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1d3: 48 98                         cltq
// 1d5: 4d 89 24 c7                   movq    %r12, (%r15,%rax,8)
// 1d9: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 1dd: 48 83 c6 08                   addq    $0x8, %rsi
// 1e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e3:  R_X86_64_64  _JIT_CONTINUE
// 1eb: 48 89 df                      movq    %rbx, %rdi
// 1ee: 4c 89 ea                      movq    %r13, %rdx
// 1f1: 48 83 c4 28                   addq    $0x28, %rsp
// 1f5: 5b                            popq    %rbx
// 1f6: 41 5c                         popq    %r12
// 1f8: 41 5d                         popq    %r13
// 1fa: 41 5e                         popq    %r14
// 1fc: 41 5f                         popq    %r15
// 1fe: 5d                            popq    %rbp
// 1ff: ff e0                         jmpq    *%rax
// 201: 41 83 fd 02                   cmpl    $0x2, %r13d
// 205: 41 be 01 00 00 00             movl    $0x1, %r14d
// 20b: 45 0f 43 f5                   cmovael %r13d, %r14d
// 20f: 31 ed                         xorl    %ebp, %ebp
// 211: eb 19                         jmp     0x22c <_JIT_ENTRY+0x22c>
// 213: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// 220: 48 ff c5                      incq    %rbp
// 223: 49 39 ee                      cmpq    %rbp, %r14
// 226: 0f 84 d8 fe ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 22c: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 231: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 235: 49 8b 45 00                   movq    (%r13), %rax
// 239: 48 85 c0                      testq   %rax, %rax
// 23c: 7e 12                         jle     0x250 <_JIT_ENTRY+0x250>
// 23e: 85 c0                         testl   %eax, %eax
// 240: 78 de                         js      0x220 <_JIT_ENTRY+0x220>
// 242: eb 32                         jmp     0x276 <_JIT_ENTRY+0x276>
// 244: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 250: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000252:  R_X86_64_64  .rodata.str1.1
// 25a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 25f: 4c 89 ea                      movq    %r13, %rdx
// 262: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000264:  R_X86_64_64  _Py_NegativeRefcount
// 26c: ff d0                         callq   *%rax
// 26e: 49 8b 45 00                   movq    (%r13), %rax
// 272: 85 c0                         testl   %eax, %eax
// 274: 78 aa                         js      0x220 <_JIT_ENTRY+0x220>
// 276: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000278:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 280: ff d0                         callq   *%rax
// 282: 49 ff 4d 00                   decq    (%r13)
// 286: 75 98                         jne     0x220 <_JIT_ENTRY+0x220>
// 288: 4c 89 ef                      movq    %r13, %rdi
// 28b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028d:  R_X86_64_64  _Py_Dealloc
// 295: ff d0                         callq   *%rax
// 297: eb 87                         jmp     0x220 <_JIT_ENTRY+0x220>
// 299: 49 89 c6                      movq    %rax, %r14
// 29c: eb 26                         jmp     0x2c4 <_JIT_ENTRY+0x2c4>
// 29e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a0:  R_X86_64_64  PyExc_SystemError
// 2a8: 48 8b 30                      movq    (%rax), %rsi
// 2ab: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002ad:  R_X86_64_64  .rodata.str1.1+0x39
// 2b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b7:  R_X86_64_64  _PyErr_SetString
// 2bf: 4c 89 ef                      movq    %r13, %rdi
// 2c2: ff d0                         callq   *%rax
// 2c4: 49 29 de                      subq    %rbx, %r14
// 2c7: 49 83 c6 b8                   addq    $-0x48, %r14
// 2cb: 49 c1 ee 03                   shrq    $0x3, %r14
// 2cf: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2d3: 31 c0                         xorl    %eax, %eax
// 2d5: e9 d5 fd ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 2da: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_LOCALS_code_body[731] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xcf, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4f, 0x8d, 0x04, 0xc7, 0x49, 0x8b, 0x38, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x70, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xfd, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x25, 0x01, 0x00, 0x00, 0x4f, 0x8d, 0x34, 0xf7, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x27, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0x28, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0xf4, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x24, 0xc7, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xed, 0xeb, 0x19, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xee, 0x0f, 0x84, 0xd8, 0xfe, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x49, 0x89, 0xc6, 0xeb, 0x26, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xd5, 0xfd, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_LOCALS_code_holes[20] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1c4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x278, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x28d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x2ad, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2b7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00no locals found\x00'
// 49: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_LOCALS_data_body[81] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_LOCALS_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_NAME
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_NAME.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 38                   subq    $0x38, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d7                   movq    (%r15,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 df                   movq    (%r15,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c cf                   leaq    (%r15,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 c7                      subq    %r8, %r15
// 8b: 49 83 c7 b8                   addq    $-0x48, %r15
// 8f: 49 c1 ef 03                   shrq    $0x3, %r15
// 93: 45 89 78 40                   movl    %r15d, 0x40(%r8)
// 97: 49 8b 00                      movq    (%r8), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 38                   addq    $0x38, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 5c 24 30                movq    %r11, 0x30(%rsp)
// c4: 4c 89 54 24 20                movq    %r10, 0x20(%rsp)
// c9: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// ce: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// d3: 48 85 c0                      testq   %rax, %rax
// d6: 0f 94 c3                      sete    %bl
// d9: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dd: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e1: 48 63 d0                      movslq  %eax, %rdx
// e4: ff 51 08                      callq   *0x8(%rcx)
// e7: 48 89 44 24 28                movq    %rax, 0x28(%rsp)
// ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ee:  R_X86_64_64  _JIT_OPARG
// f6: 66 85 c0                      testw   %ax, %ax
// f9: 0f 94 c0                      sete    %al
// fc: 84 c3                         testb   %al, %bl
// fe: 0f 84 31 01 00 00             je      0x235 <_JIT_ENTRY+0x235>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 136: 78 21                         js      0x159 <_JIT_ENTRY+0x159>
// 138: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 142: ff d0                         callq   *%rax
// 144: 49 ff 0c 24                   decq    (%r12)
// 148: 75 0f                         jne     0x159 <_JIT_ENTRY+0x159>
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_Dealloc
// 154: 4c 89 e7                      movq    %r12, %rdi
// 157: ff d0                         callq   *%rax
// 159: 48 8b 44 24 30                movq    0x30(%rsp), %rax
// 15e: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 162: 48 8b 54 24 28                movq    0x28(%rsp), %rdx
// 167: 48 85 d2                      testq   %rdx, %rdx
// 16a: 0f 84 49 01 00 00             je      0x2b9 <_JIT_ENTRY+0x2b9>
// 170: 48 8b 4c 24 20                movq    0x20(%rsp), %rcx
// 175: 4d 8d 34 cf                   leaq    (%r15,%rcx,8), %r14
// 179: 48 89 10                      movq    %rdx, (%rax)
// 17c: 48 8b 7c 24 18                movq    0x18(%rsp), %rdi
// 181: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 185: 48 8b 00                      movq    (%rax), %rax
// 188: 84 c0                         testb   %al, %al
// 18a: 74 14                         je      0x1a0 <_JIT_ENTRY+0x1a0>
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _Py_HandlePending
// 196: ff d0                         callq   *%rax
// 198: 85 c0                         testl   %eax, %eax
// 19a: 0f 85 4b 01 00 00             jne     0x2eb <_JIT_ENTRY+0x2eb>
// 1a0: 48 8b 7b 28                   movq    0x28(%rbx), %rdi
// 1a4: 48 85 ff                      testq   %rdi, %rdi
// 1a7: 0f 84 11 01 00 00             je      0x2be <_JIT_ENTRY+0x2be>
// 1ad: 48 8b 03                      movq    (%rbx), %rax
// 1b0: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1b4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001b6:  R_X86_64_64  _JIT_OPARG
// 1be: 0f b7 c9                      movzwl  %cx, %ecx
// 1c1: 4c 8b 64 c8 18                movq    0x18(%rax,%rcx,8), %r12
// 1c6: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000001c8:  R_X86_64_64  PyMapping_GetOptionalItem
// 1d0: 48 8d 54 24 10                leaq    0x10(%rsp), %rdx
// 1d5: 4c 89 e6                      movq    %r12, %rsi
// 1d8: ff d3                         callq   *%rbx
// 1da: 85 c0                         testl   %eax, %eax
// 1dc: 0f 88 04 01 00 00             js      0x2e6 <_JIT_ENTRY+0x2e6>
// 1e2: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1e7: 48 85 c0                      testq   %rax, %rax
// 1ea: 0f 84 11 01 00 00             je      0x301 <_JIT_ENTRY+0x301>
// 1f0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001f2:  R_X86_64_64  _JIT_OPARG
// 1fa: f7 d1                         notl    %ecx
// 1fc: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 202: 48 63 c9                      movslq  %ecx, %rcx
// 205: 49 89 04 cf                   movq    %rax, (%r15,%rcx,8)
// 209: 49 8d 34 cf                   leaq    (%r15,%rcx,8), %rsi
// 20d: 48 83 c6 08                   addq    $0x8, %rsi
// 211: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000213:  R_X86_64_64  _JIT_CONTINUE
// 21b: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 220: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 225: 48 83 c4 38                   addq    $0x38, %rsp
// 229: 5b                            popq    %rbx
// 22a: 41 5c                         popq    %r12
// 22c: 41 5d                         popq    %r13
// 22e: 41 5e                         popq    %r14
// 230: 41 5f                         popq    %r15
// 232: 5d                            popq    %rbp
// 233: ff e0                         jmpq    *%rax
// 235: 41 83 fd 02                   cmpl    $0x2, %r13d
// 239: bb 01 00 00 00                movl    $0x1, %ebx
// 23e: 41 0f 43 dd                   cmovael %r13d, %ebx
// 242: 45 31 f6                      xorl    %r14d, %r14d
// 245: eb 15                         jmp     0x25c <_JIT_ENTRY+0x25c>
// 247: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 250: 49 ff c6                      incq    %r14
// 253: 4c 39 f3                      cmpq    %r14, %rbx
// 256: 0f 84 a8 fe ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 25c: 4e 8b 6c f5 00                movq    (%rbp,%r14,8), %r13
// 261: 49 8b 45 00                   movq    (%r13), %rax
// 265: 48 85 c0                      testq   %rax, %rax
// 268: 7e 06                         jle     0x270 <_JIT_ENTRY+0x270>
// 26a: 85 c0                         testl   %eax, %eax
// 26c: 78 e2                         js      0x250 <_JIT_ENTRY+0x250>
// 26e: eb 26                         jmp     0x296 <_JIT_ENTRY+0x296>
// 270: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000272:  R_X86_64_64  .rodata.str1.1
// 27a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 27f: 4c 89 ea                      movq    %r13, %rdx
// 282: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000284:  R_X86_64_64  _Py_NegativeRefcount
// 28c: ff d0                         callq   *%rax
// 28e: 49 8b 45 00                   movq    (%r13), %rax
// 292: 85 c0                         testl   %eax, %eax
// 294: 78 ba                         js      0x250 <_JIT_ENTRY+0x250>
// 296: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000298:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a0: ff d0                         callq   *%rax
// 2a2: 49 ff 4d 00                   decq    (%r13)
// 2a6: 75 a8                         jne     0x250 <_JIT_ENTRY+0x250>
// 2a8: 4c 89 ef                      movq    %r13, %rdi
// 2ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ad:  R_X86_64_64  _Py_Dealloc
// 2b5: ff d0                         callq   *%rax
// 2b7: eb 97                         jmp     0x250 <_JIT_ENTRY+0x250>
// 2b9: 49 89 c6                      movq    %rax, %r14
// 2bc: eb 2d                         jmp     0x2eb <_JIT_ENTRY+0x2eb>
// 2be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c0:  R_X86_64_64  PyExc_SystemError
// 2c8: 48 8b 30                      movq    (%rax), %rsi
// 2cb: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002cd:  R_X86_64_64  .rodata.str1.1+0x56
// 2d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d7:  R_X86_64_64  _PyErr_SetString
// 2df: 48 8b 7c 24 18                movq    0x18(%rsp), %rdi
// 2e4: ff d0                         callq   *%rax
// 2e6: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 2eb: 49 29 de                      subq    %rbx, %r14
// 2ee: 49 83 c6 b8                   addq    $-0x48, %r14
// 2f2: 49 c1 ee 03                   shrq    $0x3, %r14
// 2f6: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2fa: 31 c0                         xorl    %eax, %eax
// 2fc: e9 af fd ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 301: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 306: 48 8b 78 18                   movq    0x18(%rax), %rdi
// 30a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030c:  R_X86_64_64  PyDict_GetItemRef
// 314: 48 8d 54 24 10                leaq    0x10(%rsp), %rdx
// 319: 4c 89 e6                      movq    %r12, %rsi
// 31c: ff d0                         callq   *%rax
// 31e: 85 c0                         testl   %eax, %eax
// 320: 78 c4                         js      0x2e6 <_JIT_ENTRY+0x2e6>
// 322: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 327: 48 85 c0                      testq   %rax, %rax
// 32a: 0f 85 c0 fe ff ff             jne     0x1f0 <_JIT_ENTRY+0x1f0>
// 330: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 335: 48 8b 78 20                   movq    0x20(%rax), %rdi
// 339: 48 8d 54 24 10                leaq    0x10(%rsp), %rdx
// 33e: 4c 89 e6                      movq    %r12, %rsi
// 341: ff d3                         callq   *%rbx
// 343: 85 c0                         testl   %eax, %eax
// 345: 78 9f                         js      0x2e6 <_JIT_ENTRY+0x2e6>
// 347: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 34c: 48 85 c0                      testq   %rax, %rax
// 34f: 0f 85 9b fe ff ff             jne     0x1f0 <_JIT_ENTRY+0x1f0>
// 355: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000357:  R_X86_64_64  PyExc_NameError
// 35f: 48 8b 30                      movq    (%rax), %rsi
// 362: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000364:  R_X86_64_64  .rodata.str1.1+0x39
// 36c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000036e:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 376: 48 8b 7c 24 18                movq    0x18(%rsp), %rdi
// 37b: 4c 89 e1                      movq    %r12, %rcx
// 37e: ff d0                         callq   *%rax
// 380: e9 61 ff ff ff                jmp     0x2e6 <_JIT_ENTRY+0x2e6>
// 385: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_NAME_code_body[902] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x38, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd7, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xdf, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xcf, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x78, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x30, 0x4c, 0x89, 0x54, 0x24, 0x20, 0x48, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0x31, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x30, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x54, 0x24, 0x28, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x49, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x20, 0x4d, 0x8d, 0x34, 0xcf, 0x48, 0x89, 0x10, 0x48, 0x8b, 0x7c, 0x24, 0x18, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x4b, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7b, 0x28, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x11, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x64, 0xc8, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x10, 0x4c, 0x89, 0xe6, 0xff, 0xd3, 0x85, 0xc0, 0x0f, 0x88, 0x04, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x11, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x04, 0xcf, 0x49, 0x8d, 0x34, 0xcf, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x41, 0x83, 0xfd, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xdd, 0x45, 0x31, 0xf6, 0xeb, 0x15, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc6, 0x4c, 0x39, 0xf3, 0x0f, 0x84, 0xa8, 0xfe, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xf5, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x49, 0x89, 0xc6, 0xeb, 0x2d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x18, 0xff, 0xd0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xaf, 0xfd, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x78, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x10, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0xc4, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x0f, 0x85, 0xc0, 0xfe, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x78, 0x20, 0x48, 0x8d, 0x54, 0x24, 0x10, 0x4c, 0x89, 0xe6, 0xff, 0xd3, 0x85, 0xc0, 0x78, 0x9f, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x0f, 0x85, 0x9b, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x18, 0x4c, 0x89, 0xe1, 0xff, 0xd0, 0xe9, 0x61, 0xff, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_NAME_code_holes[25] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xee, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1b6, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x272, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x284, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x298, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x2cd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x56},
    {0x2d7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x30c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_GetItemRef, 0x0},
    {0x357, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x364, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x36e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00name '%.200s' is not defined\x00no locals found\x00"
// 66: 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_NAME_data_body[105] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_NAME_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_SUPER_ATTR_ATTR
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_SUPER_ATTR_ATTR.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 ff                      movq    %rdi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 30: 44 29 cf                      subl    %r9d, %edi
// 33: 45 8d 69 01                   leal    0x1(%r9), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 45 0f 44 e9                   cmovel  %r9d, %r13d
// 48: 48 63 ef                      movslq  %edi, %rbp
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4c 8b 24 ee                   movq    (%rsi,%rbp,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4a 8d 1c c6                   leaq    (%rsi,%r8,8), %rbx
// 79: 48 8b 3b                      movq    (%rbx), %rdi
// 7c: 4c 8b 47 08                   movq    0x8(%rdi), %r8
// 80: 4d 3b 44 24 10                cmpq    0x10(%r12), %r8
// 85: 74 3a                         je      0xc1 <_JIT_ENTRY+0xc1>
// 87: 48 89 f3                      movq    %rsi, %rbx
// 8a: 4c 29 fb                      subq    %r15, %rbx
// 8d: 48 83 c3 b8                   addq    $-0x48, %rbx
// 91: 48 c1 eb 03                   shrq    $0x3, %rbx
// 95: 41 89 5f 40                   movl    %ebx, 0x40(%r15)
// 99: 49 8b 07                      movq    (%r15), %rax
// 9c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009e:  R_X86_64_64  _JIT_TARGET
// a6: 89 c9                         movl    %ecx, %ecx
// a8: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// ac: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b2: 48 83 c4 28                   addq    $0x28, %rsp
// b6: 5b                            popq    %rbx
// b7: 41 5c                         popq    %r12
// b9: 41 5d                         popq    %r13
// bb: 41 5e                         popq    %r14
// bd: 41 5f                         popq    %r15
// bf: 5d                            popq    %rbp
// c0: c3                            retq
// c1: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c6: 48 89 34 24                   movq    %rsi, (%rsp)
// ca: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// cf: 4c 89 7c 24 20                movq    %r15, 0x20(%rsp)
// d4: 48 85 c0                      testq   %rax, %rax
// d7: 41 0f 94 c6                   sete    %r14b
// db: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// df: 48 8d 73 08                   leaq    0x8(%rbx), %rsi
// e3: 48 63 d0                      movslq  %eax, %rdx
// e6: ff 51 08                      callq   *0x8(%rcx)
// e9: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _JIT_OPARG
// f8: 66 85 c0                      testw   %ax, %ax
// fb: 0f 94 c0                      sete    %al
// fe: 41 84 c6                      testb   %al, %r14b
// 101: 0f 84 c7 00 00 00             je      0x1ce <_JIT_ENTRY+0x1ce>
// 107: 49 8b 04 24                   movq    (%r12), %rax
// 10b: 48 85 c0                      testq   %rax, %rax
// 10e: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 113: 48 8b 0c 24                   movq    (%rsp), %rcx
// 117: 7f 26                         jg      0x13f <_JIT_ENTRY+0x13f>
// 119: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011b:  R_X86_64_64  .rodata.str1.1
// 123: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000125:  R_X86_64_64  _Py_NegativeRefcount
// 12d: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 132: 4c 89 e2                      movq    %r12, %rdx
// 135: ff d0                         callq   *%rax
// 137: 48 8b 0c 24                   movq    (%rsp), %rcx
// 13b: 49 8b 04 24                   movq    (%r12), %rax
// 13f: 85 c0                         testl   %eax, %eax
// 141: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// 146: 78 29                         js      0x171 <_JIT_ENTRY+0x171>
// 148: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 152: ff d0                         callq   *%rax
// 154: 48 8b 0c 24                   movq    (%rsp), %rcx
// 158: 49 ff 0c 24                   decq    (%r12)
// 15c: 75 13                         jne     0x171 <_JIT_ENTRY+0x171>
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_Dealloc
// 168: 4c 89 e7                      movq    %r12, %rdi
// 16b: ff d0                         callq   *%rax
// 16d: 48 8b 0c 24                   movq    (%rsp), %rcx
// 171: 48 8d 04 e9                   leaq    (%rcx,%rbp,8), %rax
// 175: 48 8b 74 24 18                movq    0x18(%rsp), %rsi
// 17a: 48 85 f6                      testq   %rsi, %rsi
// 17d: 74 39                         je      0x1b8 <_JIT_ENTRY+0x1b8>
// 17f: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 184: 48 8d 1c d1                   leaq    (%rcx,%rdx,8), %rbx
// 188: 48 89 30                      movq    %rsi, (%rax)
// 18b: 49 8b 46 10                   movq    0x10(%r14), %rax
// 18f: 48 8b 00                      movq    (%rax), %rax
// 192: 84 c0                         testb   %al, %al
// 194: 0f 84 bf 00 00 00             je      0x259 <_JIT_ENTRY+0x259>
// 19a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019c:  R_X86_64_64  _Py_HandlePending
// 1a4: 4c 89 f7                      movq    %r14, %rdi
// 1a7: ff d0                         callq   *%rax
// 1a9: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 0f 84 a4 00 00 00             je      0x259 <_JIT_ENTRY+0x259>
// 1b5: 48 89 d8                      movq    %rbx, %rax
// 1b8: 4c 29 f8                      subq    %r15, %rax
// 1bb: 48 83 c0 b8                   addq    $-0x48, %rax
// 1bf: 48 c1 e8 03                   shrq    $0x3, %rax
// 1c3: 41 89 47 40                   movl    %eax, 0x40(%r15)
// 1c7: 31 c0                         xorl    %eax, %eax
// 1c9: e9 e4 fe ff ff                jmp     0xb2 <_JIT_ENTRY+0xb2>
// 1ce: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1d2: 41 be 01 00 00 00             movl    $0x1, %r14d
// 1d8: 45 0f 43 f5                   cmovael %r13d, %r14d
// 1dc: 45 31 ff                      xorl    %r15d, %r15d
// 1df: eb 1b                         jmp     0x1fc <_JIT_ENTRY+0x1fc>
// 1e1: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// 1f0: 49 ff c7                      incq    %r15
// 1f3: 4d 39 fe                      cmpq    %r15, %r14
// 1f6: 0f 84 0b ff ff ff             je      0x107 <_JIT_ENTRY+0x107>
// 1fc: 4e 8b 2c fb                   movq    (%rbx,%r15,8), %r13
// 200: 49 8b 45 00                   movq    (%r13), %rax
// 204: 48 85 c0                      testq   %rax, %rax
// 207: 7e 07                         jle     0x210 <_JIT_ENTRY+0x210>
// 209: 85 c0                         testl   %eax, %eax
// 20b: 78 e3                         js      0x1f0 <_JIT_ENTRY+0x1f0>
// 20d: eb 27                         jmp     0x236 <_JIT_ENTRY+0x236>
// 20f: 90                            nop
// 210: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000212:  R_X86_64_64  .rodata.str1.1
// 21a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 21f: 4c 89 ea                      movq    %r13, %rdx
// 222: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000224:  R_X86_64_64  _Py_NegativeRefcount
// 22c: ff d0                         callq   *%rax
// 22e: 49 8b 45 00                   movq    (%r13), %rax
// 232: 85 c0                         testl   %eax, %eax
// 234: 78 ba                         js      0x1f0 <_JIT_ENTRY+0x1f0>
// 236: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000238:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 240: ff d0                         callq   *%rax
// 242: 49 ff 4d 00                   decq    (%r13)
// 246: 75 a8                         jne     0x1f0 <_JIT_ENTRY+0x1f0>
// 248: 4c 89 ef                      movq    %r13, %rdi
// 24b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024d:  R_X86_64_64  _Py_Dealloc
// 255: ff d0                         callq   *%rax
// 257: eb 97                         jmp     0x1f0 <_JIT_ENTRY+0x1f0>
// 259: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025b:  R_X86_64_64  _JIT_OPARG
// 263: f7 d0                         notl    %eax
// 265: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 26a: 4c 63 f0                      movslq  %eax, %r14
// 26d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000026f:  R_X86_64_64  PySuper_Type
// 277: 4e 39 6c f1 e8                cmpq    %r13, -0x18(%rcx,%r14,8)
// 27c: 0f 85 08 fe ff ff             jne     0x8a <_JIT_ENTRY+0x8a>
// 282: 4a 8b 6c f1 f0                movq    -0x10(%rcx,%r14,8), %rbp
// 287: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 28b: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 292: 0f 84 f2 fd ff ff             je      0x8a <_JIT_ENTRY+0x8a>
// 298: 4e 8b 64 f1 f8                movq    -0x8(%rcx,%r14,8), %r12
// 29d: 49 8b 07                      movq    (%r15), %rax
// 2a0: 48 8b 40 20                   movq    0x20(%rax), %rax
// 2a4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002a6:  R_X86_64_64  _JIT_OPARG
// 2ae: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 2b4: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 2b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bb:  R_X86_64_64  _PySuper_Lookup
// 2c3: 48 89 ef                      movq    %rbp, %rdi
// 2c6: 4c 89 e6                      movq    %r12, %rsi
// 2c9: 31 c9                         xorl    %ecx, %ecx
// 2cb: ff d0                         callq   *%rax
// 2cd: 48 89 c3                      movq    %rax, %rbx
// 2d0: 49 8b 45 00                   movq    (%r13), %rax
// 2d4: 48 85 c0                      testq   %rax, %rax
// 2d7: 7f 22                         jg      0x2fb <_JIT_ENTRY+0x2fb>
// 2d9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002db:  R_X86_64_64  .rodata.str1.1
// 2e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e5:  R_X86_64_64  _Py_NegativeRefcount
// 2ed: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// 2f2: 4c 89 ea                      movq    %r13, %rdx
// 2f5: ff d0                         callq   *%rax
// 2f7: 49 8b 45 00                   movq    (%r13), %rax
// 2fb: 85 c0                         testl   %eax, %eax
// 2fd: 78 28                         js      0x327 <_JIT_ENTRY+0x327>
// 2ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000301:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 309: ff d0                         callq   *%rax
// 30b: 49 ff 4d 00                   decq    (%r13)
// 30f: 75 16                         jne     0x327 <_JIT_ENTRY+0x327>
// 311: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000313:  R_X86_64_64  PySuper_Type
// 31b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031d:  R_X86_64_64  _Py_Dealloc
// 325: ff d0                         callq   *%rax
// 327: 48 8b 45 00                   movq    (%rbp), %rax
// 32b: 48 85 c0                      testq   %rax, %rax
// 32e: 7f 22                         jg      0x352 <_JIT_ENTRY+0x352>
// 330: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000332:  R_X86_64_64  .rodata.str1.1
// 33a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033c:  R_X86_64_64  _Py_NegativeRefcount
// 344: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 349: 48 89 ea                      movq    %rbp, %rdx
// 34c: ff d0                         callq   *%rax
// 34e: 48 8b 45 00                   movq    (%rbp), %rax
// 352: 85 c0                         testl   %eax, %eax
// 354: 78 21                         js      0x377 <_JIT_ENTRY+0x377>
// 356: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000358:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 360: ff d0                         callq   *%rax
// 362: 48 ff 4d 00                   decq    (%rbp)
// 366: 75 0f                         jne     0x377 <_JIT_ENTRY+0x377>
// 368: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000036a:  R_X86_64_64  _Py_Dealloc
// 372: 48 89 ef                      movq    %rbp, %rdi
// 375: ff d0                         callq   *%rax
// 377: 49 8b 04 24                   movq    (%r12), %rax
// 37b: 48 85 c0                      testq   %rax, %rax
// 37e: 7f 22                         jg      0x3a2 <_JIT_ENTRY+0x3a2>
// 380: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000382:  R_X86_64_64  .rodata.str1.1
// 38a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000038c:  R_X86_64_64  _Py_NegativeRefcount
// 394: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 399: 4c 89 e2                      movq    %r12, %rdx
// 39c: ff d0                         callq   *%rax
// 39e: 49 8b 04 24                   movq    (%r12), %rax
// 3a2: 85 c0                         testl   %eax, %eax
// 3a4: 78 21                         js      0x3c7 <_JIT_ENTRY+0x3c7>
// 3a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3b0: ff d0                         callq   *%rax
// 3b2: 49 ff 0c 24                   decq    (%r12)
// 3b6: 75 0f                         jne     0x3c7 <_JIT_ENTRY+0x3c7>
// 3b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003ba:  R_X86_64_64  _Py_Dealloc
// 3c2: 4c 89 e7                      movq    %r12, %rdi
// 3c5: ff d0                         callq   *%rax
// 3c7: 48 8b 0c 24                   movq    (%rsp), %rcx
// 3cb: 4a 8d 04 f1                   leaq    (%rcx,%r14,8), %rax
// 3cf: 48 83 c0 e8                   addq    $-0x18, %rax
// 3d3: 48 85 db                      testq   %rbx, %rbx
// 3d6: 0f 84 dc fd ff ff             je      0x1b8 <_JIT_ENTRY+0x1b8>
// 3dc: 4a 8d 34 f1                   leaq    (%rcx,%r14,8), %rsi
// 3e0: 48 83 c6 f0                   addq    $-0x10, %rsi
// 3e4: 48 89 18                      movq    %rbx, (%rax)
// 3e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003e9:  R_X86_64_64  _JIT_CONTINUE
// 3f1: 4c 89 ff                      movq    %r15, %rdi
// 3f4: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 3f9: 48 83 c4 28                   addq    $0x28, %rsp
// 3fd: 5b                            popq    %rbx
// 3fe: 41 5c                         popq    %r12
// 400: 41 5d                         popq    %r13
// 402: 41 5e                         popq    %r14
// 404: 41 5f                         popq    %r15
// 406: 5d                            popq    %rbp
// 407: ff e0                         jmpq    *%rax
// 409: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_SUPER_ATTR_ATTR_code_body[1034] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xff, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xcf, 0x45, 0x8d, 0x69, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe9, 0x48, 0x63, 0xef, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4c, 0x8b, 0x24, 0xee, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4a, 0x8d, 0x1c, 0xc6, 0x48, 0x8b, 0x3b, 0x4c, 0x8b, 0x47, 0x08, 0x4d, 0x3b, 0x44, 0x24, 0x10, 0x74, 0x3a, 0x48, 0x89, 0xf3, 0x4c, 0x29, 0xfb, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5f, 0x40, 0x49, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x34, 0x24, 0x48, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x7c, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc6, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x73, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc6, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x48, 0x8b, 0x0c, 0x24, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x8d, 0x04, 0xe9, 0x48, 0x8b, 0x74, 0x24, 0x18, 0x48, 0x85, 0xf6, 0x74, 0x39, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x8d, 0x1c, 0xd1, 0x48, 0x89, 0x30, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xbf, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x85, 0xc0, 0x0f, 0x84, 0xa4, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd8, 0x4c, 0x29, 0xf8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x47, 0x40, 0x31, 0xc0, 0xe9, 0xe4, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x45, 0x31, 0xff, 0xeb, 0x1b, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc7, 0x4d, 0x39, 0xfe, 0x0f, 0x84, 0x0b, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x2c, 0xfb, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x27, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xf0, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4e, 0x39, 0x6c, 0xf1, 0xe8, 0x0f, 0x85, 0x08, 0xfe, 0xff, 0xff, 0x4a, 0x8b, 0x6c, 0xf1, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xf2, 0xfd, 0xff, 0xff, 0x4e, 0x8b, 0x64, 0xf1, 0xf8, 0x49, 0x8b, 0x07, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x4a, 0x8d, 0x04, 0xf1, 0x48, 0x83, 0xc0, 0xe8, 0x48, 0x85, 0xdb, 0x0f, 0x84, 0xdc, 0xfd, 0xff, 0xff, 0x4a, 0x8d, 0x34, 0xf1, 0x48, 0x83, 0xc6, 0xf0, 0x48, 0x89, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_SUPER_ATTR_ATTR_code_holes[32] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9e, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x11b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x125, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x224, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x238, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x24d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x25b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x26f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x2a6, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x2db, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2e5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x301, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x313, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x31d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x332, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x33c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x358, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x36a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x382, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x38c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3a8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3ba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3e9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_SUPER_ATTR_ATTR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_SUPER_ATTR_ATTR_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_SUPER_ATTR_METHOD
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_SUPER_ATTR_METHOD.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 38                   subq    $0x38, %rsp
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c1                   movzwl  %cx, %r8d
// 1f: 44 89 c0                      movl    %r8d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 30: 44 29 c7                      subl    %r8d, %edi
// 33: 45 8d 68 01                   leal    0x1(%r8), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 45 0f 44 e8                   cmovel  %r8d, %r13d
// 48: 48 63 ef                      movslq  %edi, %rbp
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4c 8b 24 ee                   movq    (%rsi,%rbp,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4a 8d 1c ce                   leaq    (%rsi,%r9,8), %rbx
// 79: 48 8b 3b                      movq    (%rbx), %rdi
// 7c: 4c 8b 47 08                   movq    0x8(%rdi), %r8
// 80: 4d 3b 44 24 10                cmpq    0x10(%r12), %r8
// 85: 74 3a                         je      0xc1 <_JIT_ENTRY+0xc1>
// 87: 48 89 f3                      movq    %rsi, %rbx
// 8a: 4c 29 f3                      subq    %r14, %rbx
// 8d: 48 83 c3 b8                   addq    $-0x48, %rbx
// 91: 48 c1 eb 03                   shrq    $0x3, %rbx
// 95: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 99: 49 8b 06                      movq    (%r14), %rax
// 9c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009e:  R_X86_64_64  _JIT_TARGET
// a6: 89 c9                         movl    %ecx, %ecx
// a8: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// ac: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b2: 48 83 c4 38                   addq    $0x38, %rsp
// b6: 5b                            popq    %rbx
// b7: 41 5c                         popq    %r12
// b9: 41 5d                         popq    %r13
// bb: 41 5e                         popq    %r14
// bd: 41 5f                         popq    %r15
// bf: 5d                            popq    %rbp
// c0: c3                            retq
// c1: 4c 89 54 24 20                movq    %r10, 0x20(%rsp)
// c6: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cb: 48 89 74 24 28                movq    %rsi, 0x28(%rsp)
// d0: 4c 89 74 24 30                movq    %r14, 0x30(%rsp)
// d5: 48 85 c0                      testq   %rax, %rax
// d8: 41 0f 94 c6                   sete    %r14b
// dc: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// e0: 48 8d 73 08                   leaq    0x8(%rbx), %rsi
// e4: 48 63 d0                      movslq  %eax, %rdx
// e7: ff 51 08                      callq   *0x8(%rcx)
// ea: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _JIT_OPARG
// f9: 66 85 c0                      testw   %ax, %ax
// fc: 0f 94 c0                      sete    %al
// ff: 41 84 c6                      testb   %al, %r14b
// 102: 0f 84 b5 00 00 00             je      0x1bd <_JIT_ENTRY+0x1bd>
// 108: 49 8b 04 24                   movq    (%r12), %rax
// 10c: 48 85 c0                      testq   %rax, %rax
// 10f: 7f 22                         jg      0x133 <_JIT_ENTRY+0x133>
// 111: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000113:  R_X86_64_64  .rodata.str1.1
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  _Py_NegativeRefcount
// 125: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 12a: 4c 89 e2                      movq    %r12, %rdx
// 12d: ff d0                         callq   *%rax
// 12f: 49 8b 04 24                   movq    (%r12), %rax
// 133: 85 c0                         testl   %eax, %eax
// 135: 4c 8b 74 24 30                movq    0x30(%rsp), %r14
// 13a: 4c 8b 7c 24 28                movq    0x28(%rsp), %r15
// 13f: 78 21                         js      0x162 <_JIT_ENTRY+0x162>
// 141: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000143:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 14b: ff d0                         callq   *%rax
// 14d: 49 ff 0c 24                   decq    (%r12)
// 151: 75 0f                         jne     0x162 <_JIT_ENTRY+0x162>
// 153: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000155:  R_X86_64_64  _Py_Dealloc
// 15d: 4c 89 e7                      movq    %r12, %rdi
// 160: ff d0                         callq   *%rax
// 162: 49 8d 04 ef                   leaq    (%r15,%rbp,8), %rax
// 166: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 16b: 48 85 d2                      testq   %rdx, %rdx
// 16e: 74 37                         je      0x1a7 <_JIT_ENTRY+0x1a7>
// 170: 48 8b 4c 24 20                movq    0x20(%rsp), %rcx
// 175: 49 8d 1c cf                   leaq    (%r15,%rcx,8), %rbx
// 179: 48 89 10                      movq    %rdx, (%rax)
// 17c: 48 8b 7c 24 18                movq    0x18(%rsp), %rdi
// 181: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 185: 48 8b 00                      movq    (%rax), %rax
// 188: 84 c0                         testb   %al, %al
// 18a: 0f 84 a9 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_HandlePending
// 19a: ff d0                         callq   *%rax
// 19c: 85 c0                         testl   %eax, %eax
// 19e: 0f 84 95 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 1a4: 48 89 d8                      movq    %rbx, %rax
// 1a7: 4c 29 f0                      subq    %r14, %rax
// 1aa: 48 83 c0 b8                   addq    $-0x48, %rax
// 1ae: 48 c1 e8 03                   shrq    $0x3, %rax
// 1b2: 41 89 46 40                   movl    %eax, 0x40(%r14)
// 1b6: 31 c0                         xorl    %eax, %eax
// 1b8: e9 f5 fe ff ff                jmp     0xb2 <_JIT_ENTRY+0xb2>
// 1bd: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1c1: 41 be 01 00 00 00             movl    $0x1, %r14d
// 1c7: 45 0f 43 f5                   cmovael %r13d, %r14d
// 1cb: 45 31 ff                      xorl    %r15d, %r15d
// 1ce: eb 0c                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1d0: 49 ff c7                      incq    %r15
// 1d3: 4d 39 fe                      cmpq    %r15, %r14
// 1d6: 0f 84 2c ff ff ff             je      0x108 <_JIT_ENTRY+0x108>
// 1dc: 4e 8b 2c fb                   movq    (%rbx,%r15,8), %r13
// 1e0: 49 8b 45 00                   movq    (%r13), %rax
// 1e4: 48 85 c0                      testq   %rax, %rax
// 1e7: 7e 07                         jle     0x1f0 <_JIT_ENTRY+0x1f0>
// 1e9: 85 c0                         testl   %eax, %eax
// 1eb: 78 e3                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1ed: eb 27                         jmp     0x216 <_JIT_ENTRY+0x216>
// 1ef: 90                            nop
// 1f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f2:  R_X86_64_64  .rodata.str1.1
// 1fa: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ff: 4c 89 ea                      movq    %r13, %rdx
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_NegativeRefcount
// 20c: ff d0                         callq   *%rax
// 20e: 49 8b 45 00                   movq    (%r13), %rax
// 212: 85 c0                         testl   %eax, %eax
// 214: 78 ba                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 220: ff d0                         callq   *%rax
// 222: 49 ff 4d 00                   decq    (%r13)
// 226: 75 a8                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 228: 4c 89 ef                      movq    %r13, %rdi
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_Dealloc
// 235: ff d0                         callq   *%rax
// 237: eb 97                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _JIT_OPARG
// 243: f7 d0                         notl    %eax
// 245: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 24a: 4c 63 e0                      movslq  %eax, %r12
// 24d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000024f:  R_X86_64_64  PySuper_Type
// 257: 4f 39 6c e7 e8                cmpq    %r13, -0x18(%r15,%r12,8)
// 25c: 0f 85 28 fe ff ff             jne     0x8a <_JIT_ENTRY+0x8a>
// 262: 4b 8b 6c e7 f0                movq    -0x10(%r15,%r12,8), %rbp
// 267: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 26b: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 272: 0f 84 12 fe ff ff             je      0x8a <_JIT_ENTRY+0x8a>
// 278: 4b 8b 5c e7 f8                movq    -0x8(%r15,%r12,8), %rbx
// 27d: 49 8b 06                      movq    (%r14), %rax
// 280: 48 8b 40 20                   movq    0x20(%rax), %rax
// 284: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000286:  R_X86_64_64  _JIT_OPARG
// 28e: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 294: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 299: c7 44 24 0c 00 00 00 00       movl    $0x0, 0xc(%rsp)
// 2a1: 48 8b 43 08                   movq    0x8(%rbx), %rax
// 2a5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002a7:  R_X86_64_64  PyObject_GenericGetAttr
// 2af: 31 f6                         xorl    %esi, %esi
// 2b1: 48 39 88 90 00 00 00          cmpq    %rcx, 0x90(%rax)
// 2b8: 48 8d 4c 24 0c                leaq    0xc(%rsp), %rcx
// 2bd: 48 0f 45 ce                   cmovneq %rsi, %rcx
// 2c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c3:  R_X86_64_64  _PySuper_Lookup
// 2cb: 48 89 ef                      movq    %rbp, %rdi
// 2ce: 48 89 de                      movq    %rbx, %rsi
// 2d1: ff d0                         callq   *%rax
// 2d3: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 2d8: 49 8b 45 00                   movq    (%r13), %rax
// 2dc: 48 85 c0                      testq   %rax, %rax
// 2df: 7f 22                         jg      0x303 <_JIT_ENTRY+0x303>
// 2e1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002e3:  R_X86_64_64  .rodata.str1.1
// 2eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ed:  R_X86_64_64  _Py_NegativeRefcount
// 2f5: be 18 06 00 00                movl    $0x618, %esi            # imm = 0x618
// 2fa: 4c 89 ea                      movq    %r13, %rdx
// 2fd: ff d0                         callq   *%rax
// 2ff: 49 8b 45 00                   movq    (%r13), %rax
// 303: 85 c0                         testl   %eax, %eax
// 305: 78 28                         js      0x32f <_JIT_ENTRY+0x32f>
// 307: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000309:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 311: ff d0                         callq   *%rax
// 313: 49 ff 4d 00                   decq    (%r13)
// 317: 75 16                         jne     0x32f <_JIT_ENTRY+0x32f>
// 319: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000031b:  R_X86_64_64  PySuper_Type
// 323: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000325:  R_X86_64_64  _Py_Dealloc
// 32d: ff d0                         callq   *%rax
// 32f: 48 8b 45 00                   movq    (%rbp), %rax
// 333: 48 85 c0                      testq   %rax, %rax
// 336: 7f 22                         jg      0x35a <_JIT_ENTRY+0x35a>
// 338: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000033a:  R_X86_64_64  .rodata.str1.1
// 342: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000344:  R_X86_64_64  _Py_NegativeRefcount
// 34c: be 19 06 00 00                movl    $0x619, %esi            # imm = 0x619
// 351: 48 89 ea                      movq    %rbp, %rdx
// 354: ff d0                         callq   *%rax
// 356: 48 8b 45 00                   movq    (%rbp), %rax
// 35a: 85 c0                         testl   %eax, %eax
// 35c: 78 21                         js      0x37f <_JIT_ENTRY+0x37f>
// 35e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000360:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 368: ff d0                         callq   *%rax
// 36a: 48 ff 4d 00                   decq    (%rbp)
// 36e: 75 0f                         jne     0x37f <_JIT_ENTRY+0x37f>
// 370: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000372:  R_X86_64_64  _Py_Dealloc
// 37a: 48 89 ef                      movq    %rbp, %rdi
// 37d: ff d0                         callq   *%rax
// 37f: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 384: 48 85 ed                      testq   %rbp, %rbp
// 387: 74 67                         je      0x3f0 <_JIT_ENTRY+0x3f0>
// 389: 4f 8d 2c e7                   leaq    (%r15,%r12,8), %r13
// 38d: 49 83 c5 f8                   addq    $-0x8, %r13
// 391: 83 7c 24 0c 00                cmpl    $0x0, 0xc(%rsp)
// 396: 75 16                         jne     0x3ae <_JIT_ENTRY+0x3ae>
// 398: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000039a:  R_X86_64_64  .text+0x450
// 3a2: bf 21 06 00 00                movl    $0x621, %edi            # imm = 0x621
// 3a7: 48 89 de                      movq    %rbx, %rsi
// 3aa: ff d0                         callq   *%rax
// 3ac: 31 db                         xorl    %ebx, %ebx
// 3ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003b0:  R_X86_64_64  _JIT_OPARG
// 3b8: f7 d0                         notl    %eax
// 3ba: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 3bf: 48 98                         cltq
// 3c1: 49 89 6c c7 e8                movq    %rbp, -0x18(%r15,%rax,8)
// 3c6: 49 89 5c c7 f0                movq    %rbx, -0x10(%r15,%rax,8)
// 3cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003cd:  R_X86_64_64  _JIT_CONTINUE
// 3d5: 4c 89 f7                      movq    %r14, %rdi
// 3d8: 4c 89 ee                      movq    %r13, %rsi
// 3db: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 3e0: 48 83 c4 38                   addq    $0x38, %rsp
// 3e4: 5b                            popq    %rbx
// 3e5: 41 5c                         popq    %r12
// 3e7: 41 5d                         popq    %r13
// 3e9: 41 5e                         popq    %r14
// 3eb: 41 5f                         popq    %r15
// 3ed: 5d                            popq    %rbp
// 3ee: ff e0                         jmpq    *%rax
// 3f0: 48 8b 03                      movq    (%rbx), %rax
// 3f3: 48 85 c0                      testq   %rax, %rax
// 3f6: 7f 21                         jg      0x419 <_JIT_ENTRY+0x419>
// 3f8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003fa:  R_X86_64_64  .rodata.str1.1
// 402: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000404:  R_X86_64_64  _Py_NegativeRefcount
// 40c: be 1b 06 00 00                movl    $0x61b, %esi            # imm = 0x61B
// 411: 48 89 da                      movq    %rbx, %rdx
// 414: ff d0                         callq   *%rax
// 416: 48 8b 03                      movq    (%rbx), %rax
// 419: 85 c0                         testl   %eax, %eax
// 41b: 78 20                         js      0x43d <_JIT_ENTRY+0x43d>
// 41d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000041f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 427: ff d0                         callq   *%rax
// 429: 48 ff 0b                      decq    (%rbx)
// 42c: 75 0f                         jne     0x43d <_JIT_ENTRY+0x43d>
// 42e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000430:  R_X86_64_64  _Py_Dealloc
// 438: 48 89 df                      movq    %rbx, %rdi
// 43b: ff d0                         callq   *%rax
// 43d: 4b 8d 04 e7                   leaq    (%r15,%r12,8), %rax
// 441: 48 83 c0 e8                   addq    $-0x18, %rax
// 445: e9 5d fd ff ff                jmp     0x1a7 <_JIT_ENTRY+0x1a7>
// 44a: 66 0f 1f 44 00 00             nopw    (%rax,%rax)
// 
// 0000000000000450 <Py_DECREF>:
// 450: 53                            pushq   %rbx
// 451: 48 89 f3                      movq    %rsi, %rbx
// 454: 48 8b 06                      movq    (%rsi), %rax
// 457: 48 85 c0                      testq   %rax, %rax
// 45a: 7e 06                         jle     0x462 <Py_DECREF+0x12>
// 45c: 85 c0                         testl   %eax, %eax
// 45e: 79 24                         jns     0x484 <Py_DECREF+0x34>
// 460: eb 33                         jmp     0x495 <Py_DECREF+0x45>
// 462: 89 fe                         movl    %edi, %esi
// 464: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000466:  R_X86_64_64  .rodata.str1.1
// 46e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000470:  R_X86_64_64  _Py_NegativeRefcount
// 478: 48 89 da                      movq    %rbx, %rdx
// 47b: ff d0                         callq   *%rax
// 47d: 48 8b 03                      movq    (%rbx), %rax
// 480: 85 c0                         testl   %eax, %eax
// 482: 78 11                         js      0x495 <Py_DECREF+0x45>
// 484: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000486:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 48e: ff d0                         callq   *%rax
// 490: 48 ff 0b                      decq    (%rbx)
// 493: 74 02                         je      0x497 <Py_DECREF+0x47>
// 495: 5b                            popq    %rbx
// 496: c3                            retq
// 497: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000499:  R_X86_64_64  _Py_Dealloc
// 4a1: 48 89 df                      movq    %rbx, %rdi
// 4a4: 5b                            popq    %rbx
// 4a5: ff e0                         jmpq    *%rax
// 4a7: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_SUPER_ATTR_METHOD_code_body[1192] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x38, 0x49, 0x89, 0xfe, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0x44, 0x89, 0xc0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xc7, 0x45, 0x8d, 0x68, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x45, 0x0f, 0x44, 0xe8, 0x48, 0x63, 0xef, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4c, 0x8b, 0x24, 0xee, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4a, 0x8d, 0x1c, 0xce, 0x48, 0x8b, 0x3b, 0x4c, 0x8b, 0x47, 0x08, 0x4d, 0x3b, 0x44, 0x24, 0x10, 0x74, 0x3a, 0x48, 0x89, 0xf3, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x20, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x74, 0x24, 0x28, 0x4c, 0x89, 0x74, 0x24, 0x30, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc6, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x73, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc6, 0x0f, 0x84, 0xb5, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x30, 0x4c, 0x8b, 0x7c, 0x24, 0x28, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xef, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x85, 0xd2, 0x74, 0x37, 0x48, 0x8b, 0x4c, 0x24, 0x20, 0x49, 0x8d, 0x1c, 0xcf, 0x48, 0x89, 0x10, 0x48, 0x8b, 0x7c, 0x24, 0x18, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xa9, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x95, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd8, 0x4c, 0x29, 0xf0, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x46, 0x40, 0x31, 0xc0, 0xe9, 0xf5, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x45, 0x31, 0xff, 0xeb, 0x0c, 0x49, 0xff, 0xc7, 0x4d, 0x39, 0xfe, 0x0f, 0x84, 0x2c, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x2c, 0xfb, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x27, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xe0, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4f, 0x39, 0x6c, 0xe7, 0xe8, 0x0f, 0x85, 0x28, 0xfe, 0xff, 0xff, 0x4b, 0x8b, 0x6c, 0xe7, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x12, 0xfe, 0xff, 0xff, 0x4b, 0x8b, 0x5c, 0xe7, 0xf8, 0x49, 0x8b, 0x06, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0xc7, 0x44, 0x24, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x43, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xf6, 0x48, 0x39, 0x88, 0x90, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x4c, 0x24, 0x0c, 0x48, 0x0f, 0x45, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x48, 0x89, 0xde, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x18, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x19, 0x06, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x85, 0xed, 0x74, 0x67, 0x4f, 0x8d, 0x2c, 0xe7, 0x49, 0x83, 0xc5, 0xf8, 0x83, 0x7c, 0x24, 0x0c, 0x00, 0x75, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x21, 0x06, 0x00, 0x00, 0x48, 0x89, 0xde, 0xff, 0xd0, 0x31, 0xdb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x6c, 0xc7, 0xe8, 0x49, 0x89, 0x5c, 0xc7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xee, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x1b, 0x06, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xe7, 0x48, 0x83, 0xc0, 0xe8, 0xe9, 0x5d, 0xfd, 0xff, 0xff, 0x66, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x53, 0x48, 0x89, 0xf3, 0x48, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x24, 0xeb, 0x33, 0x89, 0xfe, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x74, 0x02, 0x5b, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x5b, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_SUPER_ATTR_METHOD_code_holes[39] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9e, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x113, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x143, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x155, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x24f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x286, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GenericGetAttr, 0x0},
    {0x2c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x2e3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x309, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x31b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x325, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x33a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x344, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x360, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x372, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x39a, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x450},
    {0x3b0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3cd, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x3fa, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x404, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x41f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x430, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x466, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x470, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x486, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x499, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_SUPER_ATTR_METHOD_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_SUPER_ATTR_METHOD_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_MAKE_CELL
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_MAKE_CELL.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d7                   movq    (%r15,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 df                   movq    (%r15,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c cf                   leaq    (%r15,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 c7                      subq    %r8, %r15
// 8b: 49 83 c7 b8                   addq    $-0x48, %r15
// 8f: 49 c1 ef 03                   shrq    $0x3, %r15
// 93: 45 89 78 40                   movl    %r15d, 0x40(%r8)
// 97: 49 8b 00                      movq    (%r8), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 5c 24 10                movq    %r11, 0x10(%rsp)
// c4: 4c 89 14 24                   movq    %r10, (%rsp)
// c8: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cd: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 54 01 00 00             je      0x257 <_JIT_ENTRY+0x257>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 135: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// 13a: 78 21                         js      0x15d <_JIT_ENTRY+0x15d>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 146: ff d0                         callq   *%rax
// 148: 49 ff 0c 24                   decq    (%r12)
// 14c: 75 0f                         jne     0x15d <_JIT_ENTRY+0x15d>
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _Py_Dealloc
// 158: 4c 89 e7                      movq    %r12, %rdi
// 15b: ff d0                         callq   *%rax
// 15d: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 162: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 166: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 16b: 48 85 d2                      testq   %rdx, %rdx
// 16e: 0f 84 68 01 00 00             je      0x2dc <_JIT_ENTRY+0x2dc>
// 174: 48 8b 0c 24                   movq    (%rsp), %rcx
// 178: 4d 8d 3c cf                   leaq    (%r15,%rcx,8), %r15
// 17c: 48 89 10                      movq    %rdx, (%rax)
// 17f: 49 8b 46 10                   movq    0x10(%r14), %rax
// 183: 48 8b 00                      movq    (%rax), %rax
// 186: 84 c0                         testb   %al, %al
// 188: 74 17                         je      0x1a1 <_JIT_ENTRY+0x1a1>
// 18a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018c:  R_X86_64_64  _Py_HandlePending
// 194: 4c 89 f7                      movq    %r14, %rdi
// 197: ff d0                         callq   *%rax
// 199: 85 c0                         testl   %eax, %eax
// 19b: 0f 85 38 01 00 00             jne     0x2d9 <_JIT_ENTRY+0x2d9>
// 1a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a3:  R_X86_64_64  _JIT_OPARG
// 1ab: 0f b7 c0                      movzwl  %ax, %eax
// 1ae: 48 8b 7c c3 48                movq    0x48(%rbx,%rax,8), %rdi
// 1b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b5:  R_X86_64_64  PyCell_New
// 1bd: ff d0                         callq   *%rax
// 1bf: 48 85 c0                      testq   %rax, %rax
// 1c2: 0f 84 11 01 00 00             je      0x2d9 <_JIT_ENTRY+0x2d9>
// 1c8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ca:  R_X86_64_64  _JIT_OPARG
// 1d2: 0f b7 c9                      movzwl  %cx, %ecx
// 1d5: 4c 8b 64 cb 48                movq    0x48(%rbx,%rcx,8), %r12
// 1da: 48 89 44 cb 48                movq    %rax, 0x48(%rbx,%rcx,8)
// 1df: 4d 85 e4                      testq   %r12, %r12
// 1e2: 74 50                         je      0x234 <_JIT_ENTRY+0x234>
// 1e4: 49 8b 04 24                   movq    (%r12), %rax
// 1e8: 48 85 c0                      testq   %rax, %rax
// 1eb: 7f 22                         jg      0x20f <_JIT_ENTRY+0x20f>
// 1ed: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ef:  R_X86_64_64  .rodata.str1.1+0x39
// 1f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f9:  R_X86_64_64  _Py_NegativeRefcount
// 201: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 206: 4c 89 e2                      movq    %r12, %rdx
// 209: ff d0                         callq   *%rax
// 20b: 49 8b 04 24                   movq    (%r12), %rax
// 20f: 85 c0                         testl   %eax, %eax
// 211: 78 21                         js      0x234 <_JIT_ENTRY+0x234>
// 213: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000215:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 21d: ff d0                         callq   *%rax
// 21f: 49 ff 0c 24                   decq    (%r12)
// 223: 75 0f                         jne     0x234 <_JIT_ENTRY+0x234>
// 225: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000227:  R_X86_64_64  _Py_Dealloc
// 22f: 4c 89 e7                      movq    %r12, %rdi
// 232: ff d0                         callq   *%rax
// 234: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000236:  R_X86_64_64  _JIT_CONTINUE
// 23e: 48 89 df                      movq    %rbx, %rdi
// 241: 4c 89 fe                      movq    %r15, %rsi
// 244: 4c 89 f2                      movq    %r14, %rdx
// 247: 48 83 c4 28                   addq    $0x28, %rsp
// 24b: 5b                            popq    %rbx
// 24c: 41 5c                         popq    %r12
// 24e: 41 5d                         popq    %r13
// 250: 41 5e                         popq    %r14
// 252: 41 5f                         popq    %r15
// 254: 5d                            popq    %rbp
// 255: ff e0                         jmpq    *%rax
// 257: 41 83 fd 02                   cmpl    $0x2, %r13d
// 25b: 41 be 01 00 00 00             movl    $0x1, %r14d
// 261: 45 0f 43 f5                   cmovael %r13d, %r14d
// 265: 31 db                         xorl    %ebx, %ebx
// 267: eb 13                         jmp     0x27c <_JIT_ENTRY+0x27c>
// 269: 0f 1f 80 00 00 00 00          nopl    (%rax)
// 270: 48 ff c3                      incq    %rbx
// 273: 49 39 de                      cmpq    %rbx, %r14
// 276: 0f 84 87 fe ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 27c: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 281: 49 8b 45 00                   movq    (%r13), %rax
// 285: 48 85 c0                      testq   %rax, %rax
// 288: 7e 06                         jle     0x290 <_JIT_ENTRY+0x290>
// 28a: 85 c0                         testl   %eax, %eax
// 28c: 78 e2                         js      0x270 <_JIT_ENTRY+0x270>
// 28e: eb 26                         jmp     0x2b6 <_JIT_ENTRY+0x2b6>
// 290: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000292:  R_X86_64_64  .rodata.str1.1
// 29a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 29f: 4c 89 ea                      movq    %r13, %rdx
// 2a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a4:  R_X86_64_64  _Py_NegativeRefcount
// 2ac: ff d0                         callq   *%rax
// 2ae: 49 8b 45 00                   movq    (%r13), %rax
// 2b2: 85 c0                         testl   %eax, %eax
// 2b4: 78 ba                         js      0x270 <_JIT_ENTRY+0x270>
// 2b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2c0: ff d0                         callq   *%rax
// 2c2: 49 ff 4d 00                   decq    (%r13)
// 2c6: 75 a8                         jne     0x270 <_JIT_ENTRY+0x270>
// 2c8: 4c 89 ef                      movq    %r13, %rdi
// 2cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cd:  R_X86_64_64  _Py_Dealloc
// 2d5: ff d0                         callq   *%rax
// 2d7: eb 97                         jmp     0x270 <_JIT_ENTRY+0x270>
// 2d9: 4c 89 f8                      movq    %r15, %rax
// 2dc: 48 29 d8                      subq    %rbx, %rax
// 2df: 48 83 c0 b8                   addq    $-0x48, %rax
// 2e3: 48 c1 e8 03                   shrq    $0x3, %rax
// 2e7: 89 43 40                      movl    %eax, 0x40(%rbx)
// 2ea: 31 c0                         xorl    %eax, %eax
// 2ec: e9 bf fd ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 2f1: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_MAKE_CELL_code_body[754] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd7, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xdf, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xcf, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x78, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0x54, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x68, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x3c, 0xcf, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x38, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x7c, 0xc3, 0x48, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x11, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x64, 0xcb, 0x48, 0x48, 0x89, 0x44, 0xcb, 0x48, 0x4d, 0x85, 0xe4, 0x74, 0x50, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xdb, 0xeb, 0x13, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x87, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xbf, 0xfd, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_MAKE_CELL_code_holes[22] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCell_New, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ef, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1f9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x215, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x227, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x236, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x292, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2a4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2cd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_MAKE_CELL_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_MAKE_CELL_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_MAKE_FUNCTION
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_MAKE_FUNCTION.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d6                   movq    (%r14,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 de                   movq    (%r14,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c ce                   leaq    (%r14,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 c6                      subq    %r8, %r14
// 8b: 49 83 c6 b8                   addq    $-0x48, %r14
// 8f: 49 c1 ee 03                   shrq    $0x3, %r14
// 93: 45 89 70 40                   movl    %r14d, 0x40(%r8)
// 97: 49 8b 00                      movq    (%r8), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 5c 24 10                movq    %r11, 0x10(%rsp)
// c4: 4c 89 14 24                   movq    %r10, (%rsp)
// c8: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cd: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 72 01 00 00             je      0x275 <_JIT_ENTRY+0x275>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 135: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 13a: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 13f: 78 21                         js      0x162 <_JIT_ENTRY+0x162>
// 141: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000143:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 14b: ff d0                         callq   *%rax
// 14d: 49 ff 0c 24                   decq    (%r12)
// 151: 75 0f                         jne     0x162 <_JIT_ENTRY+0x162>
// 153: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000155:  R_X86_64_64  _Py_Dealloc
// 15d: 4c 89 e7                      movq    %r12, %rdi
// 160: ff d0                         callq   *%rax
// 162: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 167: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 16b: 4d 85 ed                      testq   %r13, %r13
// 16e: 0f 84 88 01 00 00             je      0x2fc <_JIT_ENTRY+0x2fc>
// 174: 48 8b 0c 24                   movq    (%rsp), %rcx
// 178: 4d 8d 24 ce                   leaq    (%r14,%rcx,8), %r12
// 17c: 4c 89 28                      movq    %r13, (%rax)
// 17f: 49 8b 47 10                   movq    0x10(%r15), %rax
// 183: 48 8b 00                      movq    (%rax), %rax
// 186: 84 c0                         testb   %al, %al
// 188: 74 17                         je      0x1a1 <_JIT_ENTRY+0x1a1>
// 18a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018c:  R_X86_64_64  _Py_HandlePending
// 194: 4c 89 ff                      movq    %r15, %rdi
// 197: ff d0                         callq   *%rax
// 199: 85 c0                         testl   %eax, %eax
// 19b: 0f 85 58 01 00 00             jne     0x2f9 <_JIT_ENTRY+0x2f9>
// 1a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a3:  R_X86_64_64  _JIT_OPARG
// 1ab: f7 d0                         notl    %eax
// 1ad: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1b2: 48 98                         cltq
// 1b4: 49 8b 6c c6 f8                movq    -0x8(%r14,%rax,8), %rbp
// 1b9: 48 8b 73 18                   movq    0x18(%rbx), %rsi
// 1bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bf:  R_X86_64_64  PyFunction_New
// 1c7: 48 89 ef                      movq    %rbp, %rdi
// 1ca: ff d0                         callq   *%rax
// 1cc: 49 89 c5                      movq    %rax, %r13
// 1cf: 48 8b 45 00                   movq    (%rbp), %rax
// 1d3: 48 85 c0                      testq   %rax, %rax
// 1d6: 7f 22                         jg      0x1fa <_JIT_ENTRY+0x1fa>
// 1d8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001da:  R_X86_64_64  .rodata.str1.1
// 1e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e4:  R_X86_64_64  _Py_NegativeRefcount
// 1ec: be 4e 0c 00 00                movl    $0xc4e, %esi            # imm = 0xC4E
// 1f1: 48 89 ea                      movq    %rbp, %rdx
// 1f4: ff d0                         callq   *%rax
// 1f6: 48 8b 45 00                   movq    (%rbp), %rax
// 1fa: 85 c0                         testl   %eax, %eax
// 1fc: 78 21                         js      0x21f <_JIT_ENTRY+0x21f>
// 1fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000200:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 208: ff d0                         callq   *%rax
// 20a: 48 ff 4d 00                   decq    (%rbp)
// 20e: 75 0f                         jne     0x21f <_JIT_ENTRY+0x21f>
// 210: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000212:  R_X86_64_64  _Py_Dealloc
// 21a: 48 89 ef                      movq    %rbp, %rdi
// 21d: ff d0                         callq   *%rax
// 21f: 4d 85 ed                      testq   %r13, %r13
// 222: 0f 84 d1 00 00 00             je      0x2f9 <_JIT_ENTRY+0x2f9>
// 228: 8b 75 5c                      movl    0x5c(%rbp), %esi
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _PyFunction_SetVersion
// 235: 4c 89 ef                      movq    %r13, %rdi
// 238: ff d0                         callq   *%rax
// 23a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023c:  R_X86_64_64  _JIT_OPARG
// 244: f7 d0                         notl    %eax
// 246: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 24b: 48 98                         cltq
// 24d: 4d 89 6c c6 f8                movq    %r13, -0x8(%r14,%rax,8)
// 252: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000254:  R_X86_64_64  _JIT_CONTINUE
// 25c: 48 89 df                      movq    %rbx, %rdi
// 25f: 4c 89 e6                      movq    %r12, %rsi
// 262: 4c 89 fa                      movq    %r15, %rdx
// 265: 48 83 c4 28                   addq    $0x28, %rsp
// 269: 5b                            popq    %rbx
// 26a: 41 5c                         popq    %r12
// 26c: 41 5d                         popq    %r13
// 26e: 41 5e                         popq    %r14
// 270: 41 5f                         popq    %r15
// 272: 5d                            popq    %rbp
// 273: ff e0                         jmpq    *%rax
// 275: 41 83 fd 02                   cmpl    $0x2, %r13d
// 279: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 27f: 45 0f 43 fd                   cmovael %r13d, %r15d
// 283: 31 db                         xorl    %ebx, %ebx
// 285: eb 15                         jmp     0x29c <_JIT_ENTRY+0x29c>
// 287: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 290: 48 ff c3                      incq    %rbx
// 293: 49 39 df                      cmpq    %rbx, %r15
// 296: 0f 84 67 fe ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 29c: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 2a1: 49 8b 45 00                   movq    (%r13), %rax
// 2a5: 48 85 c0                      testq   %rax, %rax
// 2a8: 7e 06                         jle     0x2b0 <_JIT_ENTRY+0x2b0>
// 2aa: 85 c0                         testl   %eax, %eax
// 2ac: 78 e2                         js      0x290 <_JIT_ENTRY+0x290>
// 2ae: eb 26                         jmp     0x2d6 <_JIT_ENTRY+0x2d6>
// 2b0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002b2:  R_X86_64_64  .rodata.str1.1
// 2ba: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 2bf: 4c 89 ea                      movq    %r13, %rdx
// 2c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c4:  R_X86_64_64  _Py_NegativeRefcount
// 2cc: ff d0                         callq   *%rax
// 2ce: 49 8b 45 00                   movq    (%r13), %rax
// 2d2: 85 c0                         testl   %eax, %eax
// 2d4: 78 ba                         js      0x290 <_JIT_ENTRY+0x290>
// 2d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2e0: ff d0                         callq   *%rax
// 2e2: 49 ff 4d 00                   decq    (%r13)
// 2e6: 75 a8                         jne     0x290 <_JIT_ENTRY+0x290>
// 2e8: 4c 89 ef                      movq    %r13, %rdi
// 2eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ed:  R_X86_64_64  _Py_Dealloc
// 2f5: ff d0                         callq   *%rax
// 2f7: eb 97                         jmp     0x290 <_JIT_ENTRY+0x290>
// 2f9: 4c 89 e0                      movq    %r12, %rax
// 2fc: 48 29 d8                      subq    %rbx, %rax
// 2ff: 48 83 c0 b8                   addq    $-0x48, %rax
// 303: 48 c1 e8 03                   shrq    $0x3, %rax
// 307: 89 43 40                      movl    %eax, 0x40(%rbx)
// 30a: 31 c0                         xorl    %eax, %eax
// 30c: e9 9f fd ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 311: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_MAKE_FUNCTION_code_body[786] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd6, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xde, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xce, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc6, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x70, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0x72, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x88, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x24, 0xce, 0x4c, 0x89, 0x28, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x58, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x6c, 0xc6, 0xf8, 0x48, 0x8b, 0x73, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4e, 0x0c, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xd1, 0x00, 0x00, 0x00, 0x8b, 0x75, 0x5c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x6c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xdb, 0xeb, 0x15, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0x67, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x4c, 0x89, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x9f, 0xfd, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_MAKE_FUNCTION_code_holes[23] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x143, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x155, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1bf, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFunction_New, 0x0},
    {0x1da, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x200, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFunction_SetVersion, 0x0},
    {0x23c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x254, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2b2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2c4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_MAKE_FUNCTION_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_MAKE_FUNCTION_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_MAP_ADD
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_MAP_ADD.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 cf                   movq    (%r15,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d7                   movq    (%r15,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4f 8d 04 c7                   leaq    (%r15,%r8,8), %r8
// 79: 49 8b 38                      movq    (%r8), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 49 29 df                      subq    %rbx, %r15
// 8a: 49 83 c7 b8                   addq    $-0x48, %r15
// 8e: 49 c1 ef 03                   shrq    $0x3, %r15
// 92: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 96: 48 8b 03                      movq    (%rbx), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// c3: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// c8: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cd: 48 85 c0                      testq   %rax, %rax
// d0: 40 0f 94 c5                   sete    %bpl
// d4: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// d8: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// dd: 49 8d 70 08                   leaq    0x8(%r8), %rsi
// e1: 48 63 d0                      movslq  %eax, %rdx
// e4: ff 51 08                      callq   *0x8(%rcx)
// e7: 48 89 04 24                   movq    %rax, (%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 f9 00 00 00             je      0x1fd <_JIT_ENTRY+0x1fd>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// 136: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 13b: 48 8b 2c 24                   movq    (%rsp), %rbp
// 13f: 78 21                         js      0x162 <_JIT_ENTRY+0x162>
// 141: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000143:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 14b: ff d0                         callq   *%rax
// 14d: 49 ff 0c 24                   decq    (%r12)
// 151: 75 0f                         jne     0x162 <_JIT_ENTRY+0x162>
// 153: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000155:  R_X86_64_64  _Py_Dealloc
// 15d: 4c 89 e7                      movq    %r12, %rdi
// 160: ff d0                         callq   *%rax
// 162: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 167: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 16b: 48 85 ed                      testq   %rbp, %rbp
// 16e: 74 78                         je      0x1e8 <_JIT_ENTRY+0x1e8>
// 170: 4f 8d 24 f7                   leaq    (%r15,%r14,8), %r12
// 174: 48 89 28                      movq    %rbp, (%rax)
// 177: 49 8b 45 10                   movq    0x10(%r13), %rax
// 17b: 48 8b 00                      movq    (%rax), %rax
// 17e: 84 c0                         testb   %al, %al
// 180: 74 13                         je      0x195 <_JIT_ENTRY+0x195>
// 182: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000184:  R_X86_64_64  _Py_HandlePending
// 18c: 4c 89 ef                      movq    %r13, %rdi
// 18f: ff d0                         callq   *%rax
// 191: 85 c0                         testl   %eax, %eax
// 193: 75 50                         jne     0x1e5 <_JIT_ENTRY+0x1e5>
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _JIT_OPARG
// 19f: 0f b7 c0                      movzwl  %ax, %eax
// 1a2: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1a7: 29 c1                         subl    %eax, %ecx
// 1a9: f7 d0                         notl    %eax
// 1ab: 48 98                         cltq
// 1ad: 49 8b 74 c7 f0                movq    -0x10(%r15,%rax,8), %rsi
// 1b2: 49 8b 54 c7 f8                movq    -0x8(%r15,%rax,8), %rdx
// 1b7: 4d 8d 34 c7                   leaq    (%r15,%rax,8), %r14
// 1bb: 49 83 c6 f0                   addq    $-0x10, %r14
// 1bf: 48 63 c9                      movslq  %ecx, %rcx
// 1c2: 48 01 c1                      addq    %rax, %rcx
// 1c5: 49 8b 3c cf                   movq    (%r15,%rcx,8), %rdi
// 1c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cb:  R_X86_64_64  _PyDict_SetItem_Take2
// 1d3: ff d0                         callq   *%rax
// 1d5: 85 c0                         testl   %eax, %eax
// 1d7: 4d 0f 44 e6                   cmoveq  %r14, %r12
// 1db: 0f 84 a8 00 00 00             je      0x289 <_JIT_ENTRY+0x289>
// 1e1: 49 83 c4 f0                   addq    $-0x10, %r12
// 1e5: 4c 89 e0                      movq    %r12, %rax
// 1e8: 48 29 d8                      subq    %rbx, %rax
// 1eb: 48 83 c0 b8                   addq    $-0x48, %rax
// 1ef: 48 c1 e8 03                   shrq    $0x3, %rax
// 1f3: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1f6: 31 c0                         xorl    %eax, %eax
// 1f8: e9 b2 fe ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 1fd: 41 83 fd 02                   cmpl    $0x2, %r13d
// 201: 41 be 01 00 00 00             movl    $0x1, %r14d
// 207: 45 0f 43 f5                   cmovael %r13d, %r14d
// 20b: 31 ed                         xorl    %ebp, %ebp
// 20d: eb 0d                         jmp     0x21c <_JIT_ENTRY+0x21c>
// 20f: 90                            nop
// 210: 48 ff c5                      incq    %rbp
// 213: 49 39 ee                      cmpq    %rbp, %r14
// 216: 0f 84 e8 fe ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 21c: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 221: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 225: 49 8b 45 00                   movq    (%r13), %rax
// 229: 48 85 c0                      testq   %rax, %rax
// 22c: 7e 12                         jle     0x240 <_JIT_ENTRY+0x240>
// 22e: 85 c0                         testl   %eax, %eax
// 230: 78 de                         js      0x210 <_JIT_ENTRY+0x210>
// 232: eb 32                         jmp     0x266 <_JIT_ENTRY+0x266>
// 234: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 240: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000242:  R_X86_64_64  .rodata.str1.1
// 24a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 24f: 4c 89 ea                      movq    %r13, %rdx
// 252: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000254:  R_X86_64_64  _Py_NegativeRefcount
// 25c: ff d0                         callq   *%rax
// 25e: 49 8b 45 00                   movq    (%r13), %rax
// 262: 85 c0                         testl   %eax, %eax
// 264: 78 aa                         js      0x210 <_JIT_ENTRY+0x210>
// 266: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000268:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 270: ff d0                         callq   *%rax
// 272: 49 ff 4d 00                   decq    (%r13)
// 276: 75 98                         jne     0x210 <_JIT_ENTRY+0x210>
// 278: 4c 89 ef                      movq    %r13, %rdi
// 27b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027d:  R_X86_64_64  _Py_Dealloc
// 285: ff d0                         callq   *%rax
// 287: eb 87                         jmp     0x210 <_JIT_ENTRY+0x210>
// 289: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028b:  R_X86_64_64  _JIT_CONTINUE
// 293: 48 89 df                      movq    %rbx, %rdi
// 296: 4c 89 e6                      movq    %r12, %rsi
// 299: 4c 89 ea                      movq    %r13, %rdx
// 29c: 48 83 c4 28                   addq    $0x28, %rsp
// 2a0: 5b                            popq    %rbx
// 2a1: 41 5c                         popq    %r12
// 2a3: 41 5d                         popq    %r13
// 2a5: 41 5e                         popq    %r14
// 2a7: 41 5f                         popq    %r15
// 2a9: 5d                            popq    %rbp
// 2aa: ff e0                         jmpq    *%rax
// 2ac: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_MAP_ADD_code_body[685] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xcf, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4f, 0x8d, 0x04, 0xc7, 0x49, 0x8b, 0x38, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x70, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xf9, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x48, 0x8b, 0x2c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x85, 0xed, 0x74, 0x78, 0x4f, 0x8d, 0x24, 0xf7, 0x48, 0x89, 0x28, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x75, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0xf7, 0xd0, 0x48, 0x98, 0x49, 0x8b, 0x74, 0xc7, 0xf0, 0x49, 0x8b, 0x54, 0xc7, 0xf8, 0x4d, 0x8d, 0x34, 0xc7, 0x49, 0x83, 0xc6, 0xf0, 0x48, 0x63, 0xc9, 0x48, 0x01, 0xc1, 0x49, 0x8b, 0x3c, 0xcf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x4d, 0x0f, 0x44, 0xe6, 0x0f, 0x84, 0xa8, 0x00, 0x00, 0x00, 0x49, 0x83, 0xc4, 0xf0, 0x4c, 0x89, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xb2, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xee, 0x0f, 0x84, 0xe8, 0xfe, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_MAP_ADD_code_holes[17] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x143, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x155, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_SetItem_Take2, 0x0},
    {0x242, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x254, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x268, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x27d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x28b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_MAP_ADD_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_MAP_ADD_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_MATCH_CLASS
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_MATCH_CLASS.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d6                   movq    (%r14,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 de                   movq    (%r14,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4b 8d 1c ce                   leaq    (%r14,%r9,8), %rbx
// 79: 48 8b 3b                      movq    (%rbx), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 4d 29 c6                      subq    %r8, %r14
// 8a: 49 83 c6 b8                   addq    $-0x48, %r14
// 8e: 49 c1 ee 03                   shrq    $0x3, %r14
// 92: 45 89 70 40                   movl    %r14d, 0x40(%r8)
// 96: 49 8b 00                      movq    (%r8), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 5c 24 20                movq    %r11, 0x20(%rsp)
// c3: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c8: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// cd: 4c 89 04 24                   movq    %r8, (%rsp)
// d1: 48 85 c0                      testq   %rax, %rax
// d4: 40 0f 94 c5                   sete    %bpl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 73 08                   leaq    0x8(%rbx), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 b3 00 00 00             je      0x1b7 <_JIT_ENTRY+0x1b7>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 136: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 13b: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 140: 78 21                         js      0x163 <_JIT_ENTRY+0x163>
// 142: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000144:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 14c: ff d0                         callq   *%rax
// 14e: 49 ff 0c 24                   decq    (%r12)
// 152: 75 0f                         jne     0x163 <_JIT_ENTRY+0x163>
// 154: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000156:  R_X86_64_64  _Py_Dealloc
// 15e: 4c 89 e7                      movq    %r12, %rdi
// 161: ff d0                         callq   *%rax
// 163: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 167: 4d 85 ff                      testq   %r15, %r15
// 16a: 48 8b 1c 24                   movq    (%rsp), %rbx
// 16e: 74 32                         je      0x1a2 <_JIT_ENTRY+0x1a2>
// 170: 4c 89 38                      movq    %r15, (%rax)
// 173: 48 8b 45 10                   movq    0x10(%rbp), %rax
// 177: 48 8b 00                      movq    (%rax), %rax
// 17a: 84 c0                         testb   %al, %al
// 17c: 0f 84 b7 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 182: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000184:  R_X86_64_64  _Py_HandlePending
// 18c: 48 89 ef                      movq    %rbp, %rdi
// 18f: ff d0                         callq   *%rax
// 191: 85 c0                         testl   %eax, %eax
// 193: 0f 84 a0 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 199: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 19e: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 1a2: 48 29 d8                      subq    %rbx, %rax
// 1a5: 48 83 c0 b8                   addq    $-0x48, %rax
// 1a9: 48 c1 e8 03                   shrq    $0x3, %rax
// 1ad: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1b0: 31 c0                         xorl    %eax, %eax
// 1b2: e9 f8 fe ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 1b7: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1bb: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1c1: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1c5: 31 ed                         xorl    %ebp, %ebp
// 1c7: eb 13                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c9: 0f 1f 80 00 00 00 00          nopl    (%rax)
// 1d0: 48 ff c5                      incq    %rbp
// 1d3: 49 39 ef                      cmpq    %rbp, %r15
// 1d6: 0f 84 28 ff ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 1dc: 4c 8b 2c eb                   movq    (%rbx,%rbp,8), %r13
// 1e0: 49 8b 45 00                   movq    (%r13), %rax
// 1e4: 48 85 c0                      testq   %rax, %rax
// 1e7: 7e 07                         jle     0x1f0 <_JIT_ENTRY+0x1f0>
// 1e9: 85 c0                         testl   %eax, %eax
// 1eb: 78 e3                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1ed: eb 27                         jmp     0x216 <_JIT_ENTRY+0x216>
// 1ef: 90                            nop
// 1f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f2:  R_X86_64_64  .rodata.str1.1
// 1fa: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ff: 4c 89 ea                      movq    %r13, %rdx
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_NegativeRefcount
// 20c: ff d0                         callq   *%rax
// 20e: 49 8b 45 00                   movq    (%r13), %rax
// 212: 85 c0                         testl   %eax, %eax
// 214: 78 ba                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 220: ff d0                         callq   *%rax
// 222: 49 ff 4d 00                   decq    (%r13)
// 226: 75 a8                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 228: 4c 89 ef                      movq    %r13, %rdi
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_Dealloc
// 235: ff d0                         callq   *%rax
// 237: eb 97                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _JIT_OPARG
// 243: 89 c1                         movl    %eax, %ecx
// 245: f7 d1                         notl    %ecx
// 247: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 24d: 4c 63 f9                      movslq  %ecx, %r15
// 250: 4f 8b 6c fe f8                movq    -0x8(%r14,%r15,8), %r13
// 255: 4f 8b 64 fe e8                movq    -0x18(%r14,%r15,8), %r12
// 25a: 48 89 ef                      movq    %rbp, %rdi
// 25d: 4b 8b 6c fe f0                movq    -0x10(%r14,%r15,8), %rbp
// 262: 0f b7 c8                      movzwl  %ax, %ecx
// 265: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000267:  R_X86_64_64  _PyEval_MatchClass
// 26f: 4c 89 e6                      movq    %r12, %rsi
// 272: 48 89 ea                      movq    %rbp, %rdx
// 275: 4d 89 e8                      movq    %r13, %r8
// 278: ff d0                         callq   *%rax
// 27a: 48 89 c3                      movq    %rax, %rbx
// 27d: 49 8b 04 24                   movq    (%r12), %rax
// 281: 48 85 c0                      testq   %rax, %rax
// 284: 7f 22                         jg      0x2a8 <_JIT_ENTRY+0x2a8>
// 286: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000288:  R_X86_64_64  .rodata.str1.1
// 290: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000292:  R_X86_64_64  _Py_NegativeRefcount
// 29a: be 10 08 00 00                movl    $0x810, %esi            # imm = 0x810
// 29f: 4c 89 e2                      movq    %r12, %rdx
// 2a2: ff d0                         callq   *%rax
// 2a4: 49 8b 04 24                   movq    (%r12), %rax
// 2a8: 85 c0                         testl   %eax, %eax
// 2aa: 78 21                         js      0x2cd <_JIT_ENTRY+0x2cd>
// 2ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2b6: ff d0                         callq   *%rax
// 2b8: 49 ff 0c 24                   decq    (%r12)
// 2bc: 75 0f                         jne     0x2cd <_JIT_ENTRY+0x2cd>
// 2be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c0:  R_X86_64_64  _Py_Dealloc
// 2c8: 4c 89 e7                      movq    %r12, %rdi
// 2cb: ff d0                         callq   *%rax
// 2cd: 48 8b 45 00                   movq    (%rbp), %rax
// 2d1: 48 85 c0                      testq   %rax, %rax
// 2d4: 7f 22                         jg      0x2f8 <_JIT_ENTRY+0x2f8>
// 2d6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002d8:  R_X86_64_64  .rodata.str1.1
// 2e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e2:  R_X86_64_64  _Py_NegativeRefcount
// 2ea: be 11 08 00 00                movl    $0x811, %esi            # imm = 0x811
// 2ef: 48 89 ea                      movq    %rbp, %rdx
// 2f2: ff d0                         callq   *%rax
// 2f4: 48 8b 45 00                   movq    (%rbp), %rax
// 2f8: 85 c0                         testl   %eax, %eax
// 2fa: 49 89 dc                      movq    %rbx, %r12
// 2fd: 78 21                         js      0x320 <_JIT_ENTRY+0x320>
// 2ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000301:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 309: ff d0                         callq   *%rax
// 30b: 48 ff 4d 00                   decq    (%rbp)
// 30f: 75 0f                         jne     0x320 <_JIT_ENTRY+0x320>
// 311: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000313:  R_X86_64_64  _Py_Dealloc
// 31b: 48 89 ef                      movq    %rbp, %rdi
// 31e: ff d0                         callq   *%rax
// 320: 49 8b 45 00                   movq    (%r13), %rax
// 324: 48 85 c0                      testq   %rax, %rax
// 327: 7f 22                         jg      0x34b <_JIT_ENTRY+0x34b>
// 329: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000032b:  R_X86_64_64  .rodata.str1.1
// 333: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000335:  R_X86_64_64  _Py_NegativeRefcount
// 33d: be 12 08 00 00                movl    $0x812, %esi            # imm = 0x812
// 342: 4c 89 ea                      movq    %r13, %rdx
// 345: ff d0                         callq   *%rax
// 347: 49 8b 45 00                   movq    (%r13), %rax
// 34b: 85 c0                         testl   %eax, %eax
// 34d: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 352: 78 21                         js      0x375 <_JIT_ENTRY+0x375>
// 354: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000356:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 35e: ff d0                         callq   *%rax
// 360: 49 ff 4d 00                   decq    (%r13)
// 364: 75 0f                         jne     0x375 <_JIT_ENTRY+0x375>
// 366: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000368:  R_X86_64_64  _Py_Dealloc
// 370: 4c 89 ef                      movq    %r13, %rdi
// 373: ff d0                         callq   *%rax
// 375: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 379: 48 83 c0 e8                   addq    $-0x18, %rax
// 37d: 4d 85 e4                      testq   %r12, %r12
// 380: 74 2c                         je      0x3ae <_JIT_ENTRY+0x3ae>
// 382: 4b 8d 34 fe                   leaq    (%r14,%r15,8), %rsi
// 386: 48 83 c6 f0                   addq    $-0x10, %rsi
// 38a: 4c 89 20                      movq    %r12, (%rax)
// 38d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000038f:  R_X86_64_64  _JIT_CONTINUE
// 397: 48 8b 3c 24                   movq    (%rsp), %rdi
// 39b: 48 89 da                      movq    %rbx, %rdx
// 39e: 48 83 c4 28                   addq    $0x28, %rsp
// 3a2: 5b                            popq    %rbx
// 3a3: 41 5c                         popq    %r12
// 3a5: 41 5d                         popq    %r13
// 3a7: 41 5e                         popq    %r14
// 3a9: 41 5f                         popq    %r15
// 3ab: 5d                            popq    %rbp
// 3ac: ff e0                         jmpq    *%rax
// 3ae: 48 8b 4b 68                   movq    0x68(%rbx), %rcx
// 3b2: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 00000000000003b4:  R_X86_64_64  _Py_NoneStruct
// 3bc: 48 85 c9                      testq   %rcx, %rcx
// 3bf: 74 c1                         je      0x382 <_JIT_ENTRY+0x382>
// 3c1: 48 83 79 08 00                cmpq    $0x0, 0x8(%rcx)
// 3c6: 74 ba                         je      0x382 <_JIT_ENTRY+0x382>
// 3c8: 48 8b 1c 24                   movq    (%rsp), %rbx
// 3cc: e9 d1 fd ff ff                jmp     0x1a2 <_JIT_ENTRY+0x1a2>
// 3d1: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_MATCH_CLASS_code_body[978] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd6, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xde, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4b, 0x8d, 0x1c, 0xce, 0x48, 0x8b, 0x3b, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc6, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x70, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x20, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x73, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xb3, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xde, 0x4d, 0x85, 0xff, 0x48, 0x8b, 0x1c, 0x24, 0x74, 0x32, 0x4c, 0x89, 0x38, 0x48, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xb7, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xa0, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xf8, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xed, 0xeb, 0x13, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xef, 0x0f, 0x84, 0x28, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x2c, 0xeb, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x27, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xf9, 0x4f, 0x8b, 0x6c, 0xfe, 0xf8, 0x4f, 0x8b, 0x64, 0xfe, 0xe8, 0x48, 0x89, 0xef, 0x4b, 0x8b, 0x6c, 0xfe, 0xf0, 0x0f, 0xb7, 0xc8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xea, 0x4d, 0x89, 0xe8, 0xff, 0xd0, 0x48, 0x89, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x10, 0x08, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x11, 0x08, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x49, 0x89, 0xdc, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x12, 0x08, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x83, 0xc0, 0xe8, 0x4d, 0x85, 0xe4, 0x74, 0x2c, 0x4b, 0x8d, 0x34, 0xfe, 0x48, 0x83, 0xc6, 0xf0, 0x4c, 0x89, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x4b, 0x68, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc9, 0x74, 0xc1, 0x48, 0x83, 0x79, 0x08, 0x00, 0x74, 0xba, 0x48, 0x8b, 0x1c, 0x24, 0xe9, 0xd1, 0xfd, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_MATCH_CLASS_code_holes[30] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x267, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_MatchClass, 0x0},
    {0x288, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x292, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2ae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2d8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2e2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x301, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x313, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x32b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x335, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x356, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x368, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x38f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x3b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_MATCH_CLASS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_MATCH_CLASS_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_MATCH_KEYS
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_MATCH_KEYS.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4f 8d 04 c6                   leaq    (%r14,%r8,8), %r8
// 79: 49 8b 38                      movq    (%r8), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 49 29 de                      subq    %rbx, %r14
// 8a: 49 83 c6 b8                   addq    $-0x48, %r14
// 8e: 49 c1 ee 03                   shrq    $0x3, %r14
// 92: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 96: 48 8b 03                      movq    (%rbx), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// c3: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// c8: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cd: 48 85 c0                      testq   %rax, %rax
// d0: 40 0f 94 c5                   sete    %bpl
// d4: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// d8: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// dd: 49 8d 70 08                   leaq    0x8(%r8), %rsi
// e1: 48 63 d0                      movslq  %eax, %rdx
// e4: ff 51 08                      callq   *0x8(%rcx)
// e7: 48 89 04 24                   movq    %rax, (%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 0f 01 00 00             je      0x213 <_JIT_ENTRY+0x213>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// 136: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 13b: 78 21                         js      0x15e <_JIT_ENTRY+0x15e>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 147: ff d0                         callq   *%rax
// 149: 49 ff 0c 24                   decq    (%r12)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_Dealloc
// 159: 4c 89 e7                      movq    %r12, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 163: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 167: 48 8b 0c 24                   movq    (%rsp), %rcx
// 16b: 48 85 c9                      testq   %rcx, %rcx
// 16e: 0f 84 35 01 00 00             je      0x2a9 <_JIT_ENTRY+0x2a9>
// 174: 4f 8d 3c fe                   leaq    (%r14,%r15,8), %r15
// 178: 48 89 08                      movq    %rcx, (%rax)
// 17b: 49 8b 45 10                   movq    0x10(%r13), %rax
// 17f: 48 8b 00                      movq    (%rax), %rax
// 182: 84 c0                         testb   %al, %al
// 184: 74 17                         je      0x19d <_JIT_ENTRY+0x19d>
// 186: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000188:  R_X86_64_64  _Py_HandlePending
// 190: 4c 89 ef                      movq    %r13, %rdi
// 193: ff d0                         callq   *%rax
// 195: 85 c0                         testl   %eax, %eax
// 197: 0f 85 0f 01 00 00             jne     0x2ac <_JIT_ENTRY+0x2ac>
// 19d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019f:  R_X86_64_64  _JIT_OPARG
// 1a7: f7 d0                         notl    %eax
// 1a9: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1ae: 48 98                         cltq
// 1b0: 49 8b 74 c6 f0                movq    -0x10(%r14,%rax,8), %rsi
// 1b5: 49 8b 54 c6 f8                movq    -0x8(%r14,%rax,8), %rdx
// 1ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bc:  R_X86_64_64  _PyEval_MatchKeys
// 1c4: 4c 89 ef                      movq    %r13, %rdi
// 1c7: ff d0                         callq   *%rax
// 1c9: 48 85 c0                      testq   %rax, %rax
// 1cc: 0f 84 da 00 00 00             je      0x2ac <_JIT_ENTRY+0x2ac>
// 1d2: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d4:  R_X86_64_64  _JIT_OPARG
// 1dc: f7 d1                         notl    %ecx
// 1de: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 1e4: 48 63 c9                      movslq  %ecx, %rcx
// 1e7: 49 89 04 ce                   movq    %rax, (%r14,%rcx,8)
// 1eb: 49 8d 34 ce                   leaq    (%r14,%rcx,8), %rsi
// 1ef: 48 83 c6 08                   addq    $0x8, %rsi
// 1f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f5:  R_X86_64_64  _JIT_CONTINUE
// 1fd: 48 89 df                      movq    %rbx, %rdi
// 200: 4c 89 ea                      movq    %r13, %rdx
// 203: 48 83 c4 28                   addq    $0x28, %rsp
// 207: 5b                            popq    %rbx
// 208: 41 5c                         popq    %r12
// 20a: 41 5d                         popq    %r13
// 20c: 41 5e                         popq    %r14
// 20e: 41 5f                         popq    %r15
// 210: 5d                            popq    %rbp
// 211: ff e0                         jmpq    *%rax
// 213: 41 83 fd 02                   cmpl    $0x2, %r13d
// 217: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 21d: 45 0f 43 fd                   cmovael %r13d, %r15d
// 221: 31 ed                         xorl    %ebp, %ebp
// 223: eb 17                         jmp     0x23c <_JIT_ENTRY+0x23c>
// 225: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// 230: 48 ff c5                      incq    %rbp
// 233: 49 39 ef                      cmpq    %rbp, %r15
// 236: 0f 84 c8 fe ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 23c: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 241: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 245: 49 8b 45 00                   movq    (%r13), %rax
// 249: 48 85 c0                      testq   %rax, %rax
// 24c: 7e 12                         jle     0x260 <_JIT_ENTRY+0x260>
// 24e: 85 c0                         testl   %eax, %eax
// 250: 78 de                         js      0x230 <_JIT_ENTRY+0x230>
// 252: eb 32                         jmp     0x286 <_JIT_ENTRY+0x286>
// 254: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 260: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000262:  R_X86_64_64  .rodata.str1.1
// 26a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 26f: 4c 89 ea                      movq    %r13, %rdx
// 272: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000274:  R_X86_64_64  _Py_NegativeRefcount
// 27c: ff d0                         callq   *%rax
// 27e: 49 8b 45 00                   movq    (%r13), %rax
// 282: 85 c0                         testl   %eax, %eax
// 284: 78 aa                         js      0x230 <_JIT_ENTRY+0x230>
// 286: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000288:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 290: ff d0                         callq   *%rax
// 292: 49 ff 4d 00                   decq    (%r13)
// 296: 75 98                         jne     0x230 <_JIT_ENTRY+0x230>
// 298: 4c 89 ef                      movq    %r13, %rdi
// 29b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029d:  R_X86_64_64  _Py_Dealloc
// 2a5: ff d0                         callq   *%rax
// 2a7: eb 87                         jmp     0x230 <_JIT_ENTRY+0x230>
// 2a9: 49 89 c7                      movq    %rax, %r15
// 2ac: 49 29 df                      subq    %rbx, %r15
// 2af: 49 83 c7 b8                   addq    $-0x48, %r15
// 2b3: 49 c1 ef 03                   shrq    $0x3, %r15
// 2b7: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 2bb: 31 c0                         xorl    %eax, %eax
// 2bd: e9 ed fd ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 2c2: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_MATCH_KEYS_code_body[707] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xce, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4f, 0x8d, 0x04, 0xc6, 0x49, 0x8b, 0x38, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x70, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0x0f, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x35, 0x01, 0x00, 0x00, 0x4f, 0x8d, 0x3c, 0xfe, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x0f, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x74, 0xc6, 0xf0, 0x49, 0x8b, 0x54, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xda, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x04, 0xce, 0x49, 0x8d, 0x34, 0xce, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xed, 0xeb, 0x17, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xef, 0x0f, 0x84, 0xc8, 0xfe, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x49, 0x89, 0xc7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0xe9, 0xed, 0xfd, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_MATCH_KEYS_code_holes[18] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x19f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_MatchKeys, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x262, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x274, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x288, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x29d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_MATCH_KEYS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_MATCH_KEYS_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_MATCH_MAPPING
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_MATCH_MAPPING.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4f 8d 04 c6                   leaq    (%r14,%r8,8), %r8
// 79: 49 8b 38                      movq    (%r8), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 49 29 de                      subq    %rbx, %r14
// 8a: 49 83 c6 b8                   addq    $-0x48, %r14
// 8e: 49 c1 ee 03                   shrq    $0x3, %r14
// 92: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 96: 48 8b 03                      movq    (%rbx), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c3: 4c 89 0c 24                   movq    %r9, (%rsp)
// c7: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cc: 48 85 c0                      testq   %rax, %rax
// cf: 40 0f 94 c5                   sete    %bpl
// d3: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// d7: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// dc: 49 8d 70 08                   leaq    0x8(%r8), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 ae 00 00 00             je      0x1b2 <_JIT_ENTRY+0x1b2>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 136: 78 21                         js      0x159 <_JIT_ENTRY+0x159>
// 138: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 142: ff d0                         callq   *%rax
// 144: 49 ff 0c 24                   decq    (%r12)
// 148: 75 0f                         jne     0x159 <_JIT_ENTRY+0x159>
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_Dealloc
// 154: 4c 89 e7                      movq    %r12, %rdi
// 157: ff d0                         callq   *%rax
// 159: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 15e: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 162: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 167: 48 85 c9                      testq   %rcx, %rcx
// 16a: 74 31                         je      0x19d <_JIT_ENTRY+0x19d>
// 16c: 48 89 08                      movq    %rcx, (%rax)
// 16f: 49 8b 47 10                   movq    0x10(%r15), %rax
// 173: 48 8b 00                      movq    (%rax), %rax
// 176: 84 c0                         testb   %al, %al
// 178: 0f 84 cb 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_HandlePending
// 188: 4c 89 ff                      movq    %r15, %rdi
// 18b: ff d0                         callq   *%rax
// 18d: 85 c0                         testl   %eax, %eax
// 18f: 0f 84 b4 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 195: 48 8b 04 24                   movq    (%rsp), %rax
// 199: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 19d: 48 29 d8                      subq    %rbx, %rax
// 1a0: 48 83 c0 b8                   addq    $-0x48, %rax
// 1a4: 48 c1 e8 03                   shrq    $0x3, %rax
// 1a8: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1ab: 31 c0                         xorl    %eax, %eax
// 1ad: e9 fd fe ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 1b2: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1b6: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1bc: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1c0: 31 ed                         xorl    %ebp, %ebp
// 1c2: eb 18                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 1d0: 48 ff c5                      incq    %rbp
// 1d3: 49 39 ef                      cmpq    %rbp, %r15
// 1d6: 0f 84 28 ff ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 1dc: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 1e1: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 1e5: 49 8b 45 00                   movq    (%r13), %rax
// 1e9: 48 85 c0                      testq   %rax, %rax
// 1ec: 7e 12                         jle     0x200 <_JIT_ENTRY+0x200>
// 1ee: 85 c0                         testl   %eax, %eax
// 1f0: 78 de                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1f2: eb 32                         jmp     0x226 <_JIT_ENTRY+0x226>
// 1f4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 200: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1
// 20a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 20f: 4c 89 ea                      movq    %r13, %rdx
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: ff d0                         callq   *%rax
// 21e: 49 8b 45 00                   movq    (%r13), %rax
// 222: 85 c0                         testl   %eax, %eax
// 224: 78 aa                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 230: ff d0                         callq   *%rax
// 232: 49 ff 4d 00                   decq    (%r13)
// 236: 75 98                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: ff d0                         callq   *%rax
// 247: eb 87                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _JIT_OPARG
// 253: f7 d0                         notl    %eax
// 255: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 25a: 48 98                         cltq
// 25c: 49 8b 4c c6 f8                movq    -0x8(%r14,%rax,8), %rcx
// 261: 48 8b 49 08                   movq    0x8(%rcx), %rcx
// 265: f6 81 a8 00 00 00 40          testb   $0x40, 0xa8(%rcx)
// 26c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000026e:  R_X86_64_64  _Py_FalseStruct
// 276: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000278:  R_X86_64_64  _Py_TrueStruct
// 280: 48 0f 44 d1                   cmoveq  %rcx, %rdx
// 284: 49 89 14 c6                   movq    %rdx, (%r14,%rax,8)
// 288: 49 8d 74 c6 08                leaq    0x8(%r14,%rax,8), %rsi
// 28d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028f:  R_X86_64_64  _JIT_CONTINUE
// 297: 48 89 df                      movq    %rbx, %rdi
// 29a: 4c 89 fa                      movq    %r15, %rdx
// 29d: 48 83 c4 28                   addq    $0x28, %rsp
// 2a1: 5b                            popq    %rbx
// 2a2: 41 5c                         popq    %r12
// 2a4: 41 5d                         popq    %r13
// 2a6: 41 5e                         popq    %r14
// 2a8: 41 5f                         popq    %r15
// 2aa: 5d                            popq    %rbp
// 2ab: ff e0                         jmpq    *%rax
// 2ad: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_MATCH_MAPPING_code_body[686] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xce, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4f, 0x8d, 0x04, 0xc6, 0x49, 0x8b, 0x38, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x70, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xae, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x74, 0x31, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xcb, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xb4, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xfd, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xed, 0xeb, 0x18, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xef, 0x0f, 0x84, 0x28, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x4c, 0xc6, 0xf8, 0x48, 0x8b, 0x49, 0x08, 0xf6, 0x81, 0xa8, 0x00, 0x00, 0x00, 0x40, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xd1, 0x49, 0x89, 0x14, 0xc6, 0x49, 0x8d, 0x74, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_MATCH_MAPPING_code_holes[18] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x26e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x278, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x28f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_MATCH_MAPPING_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_MATCH_MAPPING_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_MATCH_SEQUENCE
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_MATCH_SEQUENCE.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4f 8d 04 c6                   leaq    (%r14,%r8,8), %r8
// 79: 49 8b 38                      movq    (%r8), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 49 29 de                      subq    %rbx, %r14
// 8a: 49 83 c6 b8                   addq    $-0x48, %r14
// 8e: 49 c1 ee 03                   shrq    $0x3, %r14
// 92: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 96: 48 8b 03                      movq    (%rbx), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c3: 4c 89 0c 24                   movq    %r9, (%rsp)
// c7: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cc: 48 85 c0                      testq   %rax, %rax
// cf: 40 0f 94 c5                   sete    %bpl
// d3: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// d7: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// dc: 49 8d 70 08                   leaq    0x8(%r8), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 ae 00 00 00             je      0x1b2 <_JIT_ENTRY+0x1b2>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 136: 78 21                         js      0x159 <_JIT_ENTRY+0x159>
// 138: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 142: ff d0                         callq   *%rax
// 144: 49 ff 0c 24                   decq    (%r12)
// 148: 75 0f                         jne     0x159 <_JIT_ENTRY+0x159>
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_Dealloc
// 154: 4c 89 e7                      movq    %r12, %rdi
// 157: ff d0                         callq   *%rax
// 159: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 15e: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 162: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 167: 48 85 c9                      testq   %rcx, %rcx
// 16a: 74 31                         je      0x19d <_JIT_ENTRY+0x19d>
// 16c: 48 89 08                      movq    %rcx, (%rax)
// 16f: 49 8b 47 10                   movq    0x10(%r15), %rax
// 173: 48 8b 00                      movq    (%rax), %rax
// 176: 84 c0                         testb   %al, %al
// 178: 0f 84 cb 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_HandlePending
// 188: 4c 89 ff                      movq    %r15, %rdi
// 18b: ff d0                         callq   *%rax
// 18d: 85 c0                         testl   %eax, %eax
// 18f: 0f 84 b4 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 195: 48 8b 04 24                   movq    (%rsp), %rax
// 199: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 19d: 48 29 d8                      subq    %rbx, %rax
// 1a0: 48 83 c0 b8                   addq    $-0x48, %rax
// 1a4: 48 c1 e8 03                   shrq    $0x3, %rax
// 1a8: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1ab: 31 c0                         xorl    %eax, %eax
// 1ad: e9 fd fe ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 1b2: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1b6: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1bc: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1c0: 31 ed                         xorl    %ebp, %ebp
// 1c2: eb 18                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 1d0: 48 ff c5                      incq    %rbp
// 1d3: 49 39 ef                      cmpq    %rbp, %r15
// 1d6: 0f 84 28 ff ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 1dc: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 1e1: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 1e5: 49 8b 45 00                   movq    (%r13), %rax
// 1e9: 48 85 c0                      testq   %rax, %rax
// 1ec: 7e 12                         jle     0x200 <_JIT_ENTRY+0x200>
// 1ee: 85 c0                         testl   %eax, %eax
// 1f0: 78 de                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1f2: eb 32                         jmp     0x226 <_JIT_ENTRY+0x226>
// 1f4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 200: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1
// 20a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 20f: 4c 89 ea                      movq    %r13, %rdx
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: ff d0                         callq   *%rax
// 21e: 49 8b 45 00                   movq    (%r13), %rax
// 222: 85 c0                         testl   %eax, %eax
// 224: 78 aa                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 230: ff d0                         callq   *%rax
// 232: 49 ff 4d 00                   decq    (%r13)
// 236: 75 98                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: ff d0                         callq   *%rax
// 247: eb 87                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _JIT_OPARG
// 253: f7 d0                         notl    %eax
// 255: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 25a: 48 98                         cltq
// 25c: 49 8b 4c c6 f8                movq    -0x8(%r14,%rax,8), %rcx
// 261: 48 8b 49 08                   movq    0x8(%rcx), %rcx
// 265: f6 81 a8 00 00 00 20          testb   $0x20, 0xa8(%rcx)
// 26c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000026e:  R_X86_64_64  _Py_FalseStruct
// 276: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000278:  R_X86_64_64  _Py_TrueStruct
// 280: 48 0f 44 d1                   cmoveq  %rcx, %rdx
// 284: 49 89 14 c6                   movq    %rdx, (%r14,%rax,8)
// 288: 49 8d 74 c6 08                leaq    0x8(%r14,%rax,8), %rsi
// 28d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028f:  R_X86_64_64  _JIT_CONTINUE
// 297: 48 89 df                      movq    %rbx, %rdi
// 29a: 4c 89 fa                      movq    %r15, %rdx
// 29d: 48 83 c4 28                   addq    $0x28, %rsp
// 2a1: 5b                            popq    %rbx
// 2a2: 41 5c                         popq    %r12
// 2a4: 41 5d                         popq    %r13
// 2a6: 41 5e                         popq    %r14
// 2a8: 41 5f                         popq    %r15
// 2aa: 5d                            popq    %rbp
// 2ab: ff e0                         jmpq    *%rax
// 2ad: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_MATCH_SEQUENCE_code_body[686] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xce, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4f, 0x8d, 0x04, 0xc6, 0x49, 0x8b, 0x38, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x70, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xae, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x74, 0x31, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xcb, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xb4, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xfd, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xed, 0xeb, 0x18, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xef, 0x0f, 0x84, 0x28, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x4c, 0xc6, 0xf8, 0x48, 0x8b, 0x49, 0x08, 0xf6, 0x81, 0xa8, 0x00, 0x00, 0x00, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xd1, 0x49, 0x89, 0x14, 0xc6, 0x49, 0x8d, 0x74, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_MATCH_SEQUENCE_code_holes[18] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x26e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x278, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x28f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_MATCH_SEQUENCE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_MATCH_SEQUENCE_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_NOP
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_NOP.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 cf                   movq    (%r15,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d7                   movq    (%r15,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4f 8d 04 c7                   leaq    (%r15,%r8,8), %r8
// 79: 49 8b 38                      movq    (%r8), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 49 29 df                      subq    %rbx, %r15
// 8a: 49 83 c7 b8                   addq    $-0x48, %r15
// 8e: 49 c1 ef 03                   shrq    $0x3, %r15
// 92: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 96: 48 8b 03                      movq    (%rbx), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c3: 4c 89 0c 24                   movq    %r9, (%rsp)
// c7: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cc: 48 85 c0                      testq   %rax, %rax
// cf: 40 0f 94 c5                   sete    %bpl
// d3: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// d7: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// dc: 49 8d 70 08                   leaq    0x8(%r8), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 b1 00 00 00             je      0x1b5 <_JIT_ENTRY+0x1b5>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// 136: 78 21                         js      0x159 <_JIT_ENTRY+0x159>
// 138: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 142: ff d0                         callq   *%rax
// 144: 49 ff 0c 24                   decq    (%r12)
// 148: 75 0f                         jne     0x159 <_JIT_ENTRY+0x159>
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_Dealloc
// 154: 4c 89 e7                      movq    %r12, %rdi
// 157: ff d0                         callq   *%rax
// 159: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 15e: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 162: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 167: 48 85 d2                      testq   %rdx, %rdx
// 16a: 74 34                         je      0x1a0 <_JIT_ENTRY+0x1a0>
// 16c: 48 8b 0c 24                   movq    (%rsp), %rcx
// 170: 4d 8d 3c cf                   leaq    (%r15,%rcx,8), %r15
// 174: 48 89 10                      movq    %rdx, (%rax)
// 177: 49 8b 46 10                   movq    0x10(%r14), %rax
// 17b: 48 8b 00                      movq    (%rax), %rax
// 17e: 84 c0                         testb   %al, %al
// 180: 0f 84 c3 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 186: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000188:  R_X86_64_64  _Py_HandlePending
// 190: 4c 89 f7                      movq    %r14, %rdi
// 193: ff d0                         callq   *%rax
// 195: 85 c0                         testl   %eax, %eax
// 197: 0f 84 ac 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 19d: 4c 89 f8                      movq    %r15, %rax
// 1a0: 48 29 d8                      subq    %rbx, %rax
// 1a3: 48 83 c0 b8                   addq    $-0x48, %rax
// 1a7: 48 c1 e8 03                   shrq    $0x3, %rax
// 1ab: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1ae: 31 c0                         xorl    %eax, %eax
// 1b0: e9 fa fe ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 1b5: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1b9: 41 be 01 00 00 00             movl    $0x1, %r14d
// 1bf: 45 0f 43 f5                   cmovael %r13d, %r14d
// 1c3: 31 ed                         xorl    %ebp, %ebp
// 1c5: eb 15                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c7: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 1d0: 48 ff c5                      incq    %rbp
// 1d3: 49 39 ee                      cmpq    %rbp, %r14
// 1d6: 0f 84 28 ff ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 1dc: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 1e1: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 1e5: 49 8b 45 00                   movq    (%r13), %rax
// 1e9: 48 85 c0                      testq   %rax, %rax
// 1ec: 7e 12                         jle     0x200 <_JIT_ENTRY+0x200>
// 1ee: 85 c0                         testl   %eax, %eax
// 1f0: 78 de                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1f2: eb 32                         jmp     0x226 <_JIT_ENTRY+0x226>
// 1f4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 200: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1
// 20a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 20f: 4c 89 ea                      movq    %r13, %rdx
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: ff d0                         callq   *%rax
// 21e: 49 8b 45 00                   movq    (%r13), %rax
// 222: 85 c0                         testl   %eax, %eax
// 224: 78 aa                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 230: ff d0                         callq   *%rax
// 232: 49 ff 4d 00                   decq    (%r13)
// 236: 75 98                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: ff d0                         callq   *%rax
// 247: eb 87                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _JIT_CONTINUE
// 253: 48 89 df                      movq    %rbx, %rdi
// 256: 4c 89 fe                      movq    %r15, %rsi
// 259: 4c 89 f2                      movq    %r14, %rdx
// 25c: 48 83 c4 28                   addq    $0x28, %rsp
// 260: 5b                            popq    %rbx
// 261: 41 5c                         popq    %r12
// 263: 41 5d                         popq    %r13
// 265: 41 5e                         popq    %r14
// 267: 41 5f                         popq    %r15
// 269: 5d                            popq    %rbp
// 26a: ff e0                         jmpq    *%rax
// 26c: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_NOP_code_body[621] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xcf, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4f, 0x8d, 0x04, 0xc7, 0x49, 0x8b, 0x38, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x70, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xb1, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x74, 0x34, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x3c, 0xcf, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xac, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xfa, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xed, 0xeb, 0x15, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xee, 0x0f, 0x84, 0x28, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_NOP_code_holes[15] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_NOP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_NOP_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_POP_EXCEPT
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_POP_EXCEPT.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d7                   movq    (%r15,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 df                   movq    (%r15,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c cf                   leaq    (%r15,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 c7                      subq    %r8, %r15
// 8b: 49 83 c7 b8                   addq    $-0x48, %r15
// 8f: 49 c1 ef 03                   shrq    $0x3, %r15
// 93: 45 89 78 40                   movl    %r15d, 0x40(%r8)
// 97: 49 8b 00                      movq    (%r8), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 5c 24 10                movq    %r11, 0x10(%rsp)
// c4: 4c 89 14 24                   movq    %r10, (%rsp)
// c8: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cd: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 b3 00 00 00             je      0x1b6 <_JIT_ENTRY+0x1b6>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 135: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// 13a: 78 21                         js      0x15d <_JIT_ENTRY+0x15d>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 146: ff d0                         callq   *%rax
// 148: 49 ff 0c 24                   decq    (%r12)
// 14c: 75 0f                         jne     0x15d <_JIT_ENTRY+0x15d>
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _Py_Dealloc
// 158: 4c 89 e7                      movq    %r12, %rdi
// 15b: ff d0                         callq   *%rax
// 15d: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 162: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 166: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 16b: 48 85 c9                      testq   %rcx, %rcx
// 16e: 74 31                         je      0x1a1 <_JIT_ENTRY+0x1a1>
// 170: 48 89 08                      movq    %rcx, (%rax)
// 173: 49 8b 46 10                   movq    0x10(%r14), %rax
// 177: 48 8b 00                      movq    (%rax), %rax
// 17a: 84 c0                         testb   %al, %al
// 17c: 0f 84 b7 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 182: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000184:  R_X86_64_64  _Py_HandlePending
// 18c: 4c 89 f7                      movq    %r14, %rdi
// 18f: ff d0                         callq   *%rax
// 191: 85 c0                         testl   %eax, %eax
// 193: 0f 84 a0 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 199: 48 8b 04 24                   movq    (%rsp), %rax
// 19d: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 1a1: 48 29 d8                      subq    %rbx, %rax
// 1a4: 48 83 c0 b8                   addq    $-0x48, %rax
// 1a8: 48 c1 e8 03                   shrq    $0x3, %rax
// 1ac: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1af: 31 c0                         xorl    %eax, %eax
// 1b1: e9 fa fe ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 1b6: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1ba: 41 be 01 00 00 00             movl    $0x1, %r14d
// 1c0: 45 0f 43 f5                   cmovael %r13d, %r14d
// 1c4: 31 db                         xorl    %ebx, %ebx
// 1c6: eb 14                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c8: 0f 1f 84 00 00 00 00 00       nopl    (%rax,%rax)
// 1d0: 48 ff c3                      incq    %rbx
// 1d3: 49 39 de                      cmpq    %rbx, %r14
// 1d6: 0f 84 27 ff ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 1dc: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1e1: 49 8b 45 00                   movq    (%r13), %rax
// 1e5: 48 85 c0                      testq   %rax, %rax
// 1e8: 7e 06                         jle     0x1f0 <_JIT_ENTRY+0x1f0>
// 1ea: 85 c0                         testl   %eax, %eax
// 1ec: 78 e2                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1ee: eb 26                         jmp     0x216 <_JIT_ENTRY+0x216>
// 1f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f2:  R_X86_64_64  .rodata.str1.1
// 1fa: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ff: 4c 89 ea                      movq    %r13, %rdx
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_NegativeRefcount
// 20c: ff d0                         callq   *%rax
// 20e: 49 8b 45 00                   movq    (%r13), %rax
// 212: 85 c0                         testl   %eax, %eax
// 214: 78 ba                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 220: ff d0                         callq   *%rax
// 222: 49 ff 4d 00                   decq    (%r13)
// 226: 75 a8                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 228: 4c 89 ef                      movq    %r13, %rdi
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_Dealloc
// 235: ff d0                         callq   *%rax
// 237: eb 97                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _JIT_OPARG
// 243: f7 d0                         notl    %eax
// 245: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 24a: 48 98                         cltq
// 24c: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 250: 49 83 c4 f8                   addq    $-0x8, %r12
// 254: 49 8b 44 c7 f8                movq    -0x8(%r15,%rax,8), %rax
// 259: 49 8b 4e 70                   movq    0x70(%r14), %rcx
// 25d: 4c 8b 39                      movq    (%rcx), %r15
// 260: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000262:  R_X86_64_64  _Py_NoneStruct
// 26a: 31 f6                         xorl    %esi, %esi
// 26c: 48 39 d0                      cmpq    %rdx, %rax
// 26f: 48 0f 45 f0                   cmovneq %rax, %rsi
// 273: 48 89 31                      movq    %rsi, (%rcx)
// 276: 4d 85 ff                      testq   %r15, %r15
// 279: 74 4d                         je      0x2c8 <_JIT_ENTRY+0x2c8>
// 27b: 49 8b 07                      movq    (%r15), %rax
// 27e: 48 85 c0                      testq   %rax, %rax
// 281: 7f 21                         jg      0x2a4 <_JIT_ENTRY+0x2a4>
// 283: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000285:  R_X86_64_64  .rodata.str1.1+0x39
// 28d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028f:  R_X86_64_64  _Py_NegativeRefcount
// 297: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 29c: 4c 89 fa                      movq    %r15, %rdx
// 29f: ff d0                         callq   *%rax
// 2a1: 49 8b 07                      movq    (%r15), %rax
// 2a4: 85 c0                         testl   %eax, %eax
// 2a6: 78 20                         js      0x2c8 <_JIT_ENTRY+0x2c8>
// 2a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002aa:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2b2: ff d0                         callq   *%rax
// 2b4: 49 ff 0f                      decq    (%r15)
// 2b7: 75 0f                         jne     0x2c8 <_JIT_ENTRY+0x2c8>
// 2b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bb:  R_X86_64_64  _Py_Dealloc
// 2c3: 4c 89 ff                      movq    %r15, %rdi
// 2c6: ff d0                         callq   *%rax
// 2c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ca:  R_X86_64_64  _JIT_CONTINUE
// 2d2: 48 89 df                      movq    %rbx, %rdi
// 2d5: 4c 89 e6                      movq    %r12, %rsi
// 2d8: 4c 89 f2                      movq    %r14, %rdx
// 2db: 48 83 c4 28                   addq    $0x28, %rsp
// 2df: 5b                            popq    %rbx
// 2e0: 41 5c                         popq    %r12
// 2e2: 41 5d                         popq    %r13
// 2e4: 41 5e                         popq    %r14
// 2e6: 41 5f                         popq    %r15
// 2e8: 5d                            popq    %rbp
// 2e9: ff e0                         jmpq    *%rax
// 2eb: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_POP_EXCEPT_code_body[748] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd7, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xdf, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xcf, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x78, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xb3, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x74, 0x31, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xb7, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xa0, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xfa, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xdb, 0xeb, 0x14, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x27, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x83, 0xc4, 0xf8, 0x49, 0x8b, 0x44, 0xc7, 0xf8, 0x49, 0x8b, 0x4e, 0x70, 0x4c, 0x8b, 0x39, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xf6, 0x48, 0x39, 0xd0, 0x48, 0x0f, 0x45, 0xf0, 0x48, 0x89, 0x31, 0x4d, 0x85, 0xff, 0x74, 0x4d, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_POP_EXCEPT_code_holes[21] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x262, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x285, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x28f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2aa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2ca, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_POP_EXCEPT_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_POP_EXCEPT_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_POP_FRAME
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_POP_FRAME.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 cf                   movq    (%r15,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d7                   movq    (%r15,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4f 8d 04 c7                   leaq    (%r15,%r8,8), %r8
// 79: 49 8b 38                      movq    (%r8), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 49 29 df                      subq    %rbx, %r15
// 8a: 49 83 c7 b8                   addq    $-0x48, %r15
// 8e: 49 c1 ef 03                   shrq    $0x3, %r15
// 92: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 96: 48 8b 03                      movq    (%rbx), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// c3: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// c8: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cd: 48 85 c0                      testq   %rax, %rax
// d0: 40 0f 94 c5                   sete    %bpl
// d4: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// d8: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// dd: 49 8d 70 08                   leaq    0x8(%r8), %rsi
// e1: 48 63 d0                      movslq  %eax, %rdx
// e4: ff 51 08                      callq   *0x8(%rcx)
// e7: 48 89 04 24                   movq    %rax, (%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 ae 00 00 00             je      0x1b2 <_JIT_ENTRY+0x1b2>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// 136: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 13b: 78 21                         js      0x15e <_JIT_ENTRY+0x15e>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 147: ff d0                         callq   *%rax
// 149: 49 ff 0c 24                   decq    (%r12)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_Dealloc
// 159: 4c 89 e7                      movq    %r12, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 4b 8d 04 f7                   leaq    (%r15,%r14,8), %rax
// 162: 48 8b 0c 24                   movq    (%rsp), %rcx
// 166: 48 85 c9                      testq   %rcx, %rcx
// 169: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 16e: 74 2d                         je      0x19d <_JIT_ENTRY+0x19d>
// 170: 48 89 08                      movq    %rcx, (%rax)
// 173: 49 8b 45 10                   movq    0x10(%r13), %rax
// 177: 48 8b 00                      movq    (%rax), %rax
// 17a: 84 c0                         testb   %al, %al
// 17c: 0f 84 c7 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 182: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000184:  R_X86_64_64  _Py_HandlePending
// 18c: 4c 89 ef                      movq    %r13, %rdi
// 18f: ff d0                         callq   *%rax
// 191: 85 c0                         testl   %eax, %eax
// 193: 0f 84 b0 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 199: 4b 8d 04 f7                   leaq    (%r15,%r14,8), %rax
// 19d: 48 29 d8                      subq    %rbx, %rax
// 1a0: 48 83 c0 b8                   addq    $-0x48, %rax
// 1a4: 48 c1 e8 03                   shrq    $0x3, %rax
// 1a8: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1ab: 31 c0                         xorl    %eax, %eax
// 1ad: e9 fd fe ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 1b2: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1b6: 41 be 01 00 00 00             movl    $0x1, %r14d
// 1bc: 45 0f 43 f5                   cmovael %r13d, %r14d
// 1c0: 31 ed                         xorl    %ebp, %ebp
// 1c2: eb 18                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 1d0: 48 ff c5                      incq    %rbp
// 1d3: 49 39 ee                      cmpq    %rbp, %r14
// 1d6: 0f 84 28 ff ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 1dc: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 1e1: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 1e5: 49 8b 45 00                   movq    (%r13), %rax
// 1e9: 48 85 c0                      testq   %rax, %rax
// 1ec: 7e 12                         jle     0x200 <_JIT_ENTRY+0x200>
// 1ee: 85 c0                         testl   %eax, %eax
// 1f0: 78 de                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1f2: eb 32                         jmp     0x226 <_JIT_ENTRY+0x226>
// 1f4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 200: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1
// 20a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 20f: 4c 89 ea                      movq    %r13, %rdx
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: ff d0                         callq   *%rax
// 21e: 49 8b 45 00                   movq    (%r13), %rax
// 222: 85 c0                         testl   %eax, %eax
// 224: 78 aa                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 230: ff d0                         callq   *%rax
// 232: 49 ff 4d 00                   decq    (%r13)
// 236: 75 98                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: ff d0                         callq   *%rax
// 247: eb 87                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _JIT_OPARG
// 253: f7 d0                         notl    %eax
// 255: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 25a: 48 98                         cltq
// 25c: 49 8d 0c c7                   leaq    (%r15,%rax,8), %rcx
// 260: 48 83 c1 f8                   addq    $-0x8, %rcx
// 264: 4d 8b 74 c7 f8                movq    -0x8(%r15,%rax,8), %r14
// 269: 48 29 d9                      subq    %rbx, %rcx
// 26c: 48 83 c1 b8                   addq    $-0x48, %rcx
// 270: 48 c1 e9 03                   shrq    $0x3, %rcx
// 274: 89 4b 40                      movl    %ecx, 0x40(%rbx)
// 277: 41 ff 45 24                   incl    0x24(%r13)
// 27b: 4c 8b 7b 08                   movq    0x8(%rbx), %r15
// 27f: 4d 89 7d 40                   movq    %r15, 0x40(%r13)
// 283: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000285:  R_X86_64_64  _PyEval_FrameClearAndPop
// 28d: 4c 89 ef                      movq    %r13, %rdi
// 290: 48 89 de                      movq    %rbx, %rsi
// 293: ff d0                         callq   *%rax
// 295: 49 63 47 40                   movslq  0x40(%r15), %rax
// 299: 4d 89 74 c7 48                movq    %r14, 0x48(%r15,%rax,8)
// 29e: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 2a2: 48 83 c6 50                   addq    $0x50, %rsi
// 2a6: 41 c7 47 40 ff ff ff ff       movl    $0xffffffff, 0x40(%r15) # imm = 0xFFFFFFFF
// 2ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b0:  R_X86_64_64  _JIT_CONTINUE
// 2b8: 4c 89 ff                      movq    %r15, %rdi
// 2bb: 4c 89 ea                      movq    %r13, %rdx
// 2be: 48 83 c4 28                   addq    $0x28, %rsp
// 2c2: 5b                            popq    %rbx
// 2c3: 41 5c                         popq    %r12
// 2c5: 41 5d                         popq    %r13
// 2c7: 41 5e                         popq    %r14
// 2c9: 41 5f                         popq    %r15
// 2cb: 5d                            popq    %rbp
// 2cc: ff e0                         jmpq    *%rax
// 2ce: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_POP_FRAME_code_body[719] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xcf, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4f, 0x8d, 0x04, 0xc7, 0x49, 0x8b, 0x38, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x70, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xae, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xf7, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x74, 0x2d, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xb0, 0x00, 0x00, 0x00, 0x4b, 0x8d, 0x04, 0xf7, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xfd, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xed, 0xeb, 0x18, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xee, 0x0f, 0x84, 0x28, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8d, 0x0c, 0xc7, 0x48, 0x83, 0xc1, 0xf8, 0x4d, 0x8b, 0x74, 0xc7, 0xf8, 0x48, 0x29, 0xd9, 0x48, 0x83, 0xc1, 0xb8, 0x48, 0xc1, 0xe9, 0x03, 0x89, 0x4b, 0x40, 0x41, 0xff, 0x45, 0x24, 0x4c, 0x8b, 0x7b, 0x08, 0x4d, 0x89, 0x7d, 0x40, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xde, 0xff, 0xd0, 0x49, 0x63, 0x47, 0x40, 0x4d, 0x89, 0x74, 0xc7, 0x48, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0x50, 0x41, 0xc7, 0x47, 0x40, 0xff, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_POP_FRAME_code_holes[17] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x285, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FrameClearAndPop, 0x0},
    {0x2b0, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_POP_FRAME_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_POP_FRAME_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_POP_TOP
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_POP_TOP.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d7                   movq    (%r15,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 df                   movq    (%r15,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c cf                   leaq    (%r15,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 c7                      subq    %r8, %r15
// 8b: 49 83 c7 b8                   addq    $-0x48, %r15
// 8f: 49 c1 ef 03                   shrq    $0x3, %r15
// 93: 45 89 78 40                   movl    %r15d, 0x40(%r8)
// 97: 49 8b 00                      movq    (%r8), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 5c 24 18                movq    %r11, 0x18(%rsp)
// c4: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// c9: 48 89 14 24                   movq    %rdx, (%rsp)
// cd: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 b4 00 00 00             je      0x1b7 <_JIT_ENTRY+0x1b7>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 1c 24                   movq    (%rsp), %rbx
// 134: 78 21                         js      0x157 <_JIT_ENTRY+0x157>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 140: ff d0                         callq   *%rax
// 142: 49 ff 0c 24                   decq    (%r12)
// 146: 75 0f                         jne     0x157 <_JIT_ENTRY+0x157>
// 148: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014a:  R_X86_64_64  _Py_Dealloc
// 152: 4c 89 e7                      movq    %r12, %rdi
// 155: ff d0                         callq   *%rax
// 157: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 15c: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 160: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 165: 48 85 c9                      testq   %rcx, %rcx
// 168: 4c 8b 74 24 20                movq    0x20(%rsp), %r14
// 16d: 74 32                         je      0x1a1 <_JIT_ENTRY+0x1a1>
// 16f: 48 89 08                      movq    %rcx, (%rax)
// 172: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 176: 48 8b 00                      movq    (%rax), %rax
// 179: 84 c0                         testb   %al, %al
// 17b: 0f 84 b8 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  _Py_HandlePending
// 18b: 48 89 df                      movq    %rbx, %rdi
// 18e: ff d0                         callq   *%rax
// 190: 85 c0                         testl   %eax, %eax
// 192: 0f 84 a1 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 198: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 19d: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 1a1: 4c 29 f0                      subq    %r14, %rax
// 1a4: 48 83 c0 b8                   addq    $-0x48, %rax
// 1a8: 48 c1 e8 03                   shrq    $0x3, %rax
// 1ac: 41 89 46 40                   movl    %eax, 0x40(%r14)
// 1b0: 31 c0                         xorl    %eax, %eax
// 1b2: e9 f9 fe ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 1b7: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1bb: 41 be 01 00 00 00             movl    $0x1, %r14d
// 1c1: 45 0f 43 f5                   cmovael %r13d, %r14d
// 1c5: 31 db                         xorl    %ebx, %ebx
// 1c7: eb 13                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c9: 0f 1f 80 00 00 00 00          nopl    (%rax)
// 1d0: 48 ff c3                      incq    %rbx
// 1d3: 49 39 de                      cmpq    %rbx, %r14
// 1d6: 0f 84 27 ff ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 1dc: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1e1: 49 8b 45 00                   movq    (%r13), %rax
// 1e5: 48 85 c0                      testq   %rax, %rax
// 1e8: 7e 06                         jle     0x1f0 <_JIT_ENTRY+0x1f0>
// 1ea: 85 c0                         testl   %eax, %eax
// 1ec: 78 e2                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1ee: eb 26                         jmp     0x216 <_JIT_ENTRY+0x216>
// 1f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f2:  R_X86_64_64  .rodata.str1.1
// 1fa: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ff: 4c 89 ea                      movq    %r13, %rdx
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_NegativeRefcount
// 20c: ff d0                         callq   *%rax
// 20e: 49 8b 45 00                   movq    (%r13), %rax
// 212: 85 c0                         testl   %eax, %eax
// 214: 78 ba                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 220: ff d0                         callq   *%rax
// 222: 49 ff 4d 00                   decq    (%r13)
// 226: 75 a8                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 228: 4c 89 ef                      movq    %r13, %rdi
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_Dealloc
// 235: ff d0                         callq   *%rax
// 237: eb 97                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _JIT_OPARG
// 243: f7 d0                         notl    %eax
// 245: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 24a: 48 63 d8                      movslq  %eax, %rbx
// 24d: 4d 8b 64 df f8                movq    -0x8(%r15,%rbx,8), %r12
// 252: 49 8b 04 24                   movq    (%r12), %rax
// 256: 48 85 c0                      testq   %rax, %rax
// 259: 7f 22                         jg      0x27d <_JIT_ENTRY+0x27d>
// 25b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000025d:  R_X86_64_64  .rodata.str1.1
// 265: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000267:  R_X86_64_64  _Py_NegativeRefcount
// 26f: be 54 00 00 00                movl    $0x54, %esi
// 274: 4c 89 e2                      movq    %r12, %rdx
// 277: ff d0                         callq   *%rax
// 279: 49 8b 04 24                   movq    (%r12), %rax
// 27d: 4d 8d 3c df                   leaq    (%r15,%rbx,8), %r15
// 281: 49 83 c7 f8                   addq    $-0x8, %r15
// 285: 85 c0                         testl   %eax, %eax
// 287: 78 21                         js      0x2aa <_JIT_ENTRY+0x2aa>
// 289: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 293: ff d0                         callq   *%rax
// 295: 49 ff 0c 24                   decq    (%r12)
// 299: 75 0f                         jne     0x2aa <_JIT_ENTRY+0x2aa>
// 29b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029d:  R_X86_64_64  _Py_Dealloc
// 2a5: 4c 89 e7                      movq    %r12, %rdi
// 2a8: ff d0                         callq   *%rax
// 2aa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ac:  R_X86_64_64  _JIT_CONTINUE
// 2b4: 4c 89 f7                      movq    %r14, %rdi
// 2b7: 4c 89 fe                      movq    %r15, %rsi
// 2ba: 48 8b 14 24                   movq    (%rsp), %rdx
// 2be: 48 83 c4 28                   addq    $0x28, %rsp
// 2c2: 5b                            popq    %rbx
// 2c3: 41 5c                         popq    %r12
// 2c5: 41 5d                         popq    %r13
// 2c7: 41 5e                         popq    %r14
// 2c9: 41 5f                         popq    %r15
// 2cb: 5d                            popq    %rbp
// 2cc: ff e0                         jmpq    *%rax
// 2ce: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_POP_TOP_code_body[719] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd7, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xdf, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xcf, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x78, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x18, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x14, 0x24, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xb4, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x4c, 0x8b, 0x74, 0x24, 0x20, 0x74, 0x32, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xb8, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xa1, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc7, 0x4c, 0x29, 0xf0, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x46, 0x40, 0x31, 0xc0, 0xe9, 0xf9, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xdb, 0xeb, 0x13, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x27, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xd8, 0x4d, 0x8b, 0x64, 0xdf, 0xf8, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x54, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x3c, 0xdf, 0x49, 0x83, 0xc7, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_POP_TOP_code_holes[20] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x267, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x28b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x29d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2ac, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_POP_TOP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_POP_TOP_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_PUSH_EXC_INFO
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_PUSH_EXC_INFO.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4f 8d 04 c6                   leaq    (%r14,%r8,8), %r8
// 79: 49 8b 38                      movq    (%r8), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 49 29 de                      subq    %rbx, %r14
// 8a: 49 83 c6 b8                   addq    $-0x48, %r14
// 8e: 49 c1 ee 03                   shrq    $0x3, %r14
// 92: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 96: 48 8b 03                      movq    (%rbx), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c3: 4c 89 0c 24                   movq    %r9, (%rsp)
// c7: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cc: 48 85 c0                      testq   %rax, %rax
// cf: 40 0f 94 c5                   sete    %bpl
// d3: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// d7: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// dc: 49 8d 70 08                   leaq    0x8(%r8), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 ae 00 00 00             je      0x1b2 <_JIT_ENTRY+0x1b2>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 48 8b 6c 24 18                movq    0x18(%rsp), %rbp
// 136: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 13b: 78 21                         js      0x15e <_JIT_ENTRY+0x15e>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 147: ff d0                         callq   *%rax
// 149: 49 ff 0c 24                   decq    (%r12)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_Dealloc
// 159: 4c 89 e7                      movq    %r12, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 162: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 167: 48 85 c9                      testq   %rcx, %rcx
// 16a: 74 31                         je      0x19d <_JIT_ENTRY+0x19d>
// 16c: 48 89 08                      movq    %rcx, (%rax)
// 16f: 48 8b 45 10                   movq    0x10(%rbp), %rax
// 173: 48 8b 00                      movq    (%rax), %rax
// 176: 84 c0                         testb   %al, %al
// 178: 0f 84 cb 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_HandlePending
// 188: 48 89 ef                      movq    %rbp, %rdi
// 18b: ff d0                         callq   *%rax
// 18d: 85 c0                         testl   %eax, %eax
// 18f: 0f 84 b4 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 195: 48 8b 04 24                   movq    (%rsp), %rax
// 199: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 19d: 48 29 d8                      subq    %rbx, %rax
// 1a0: 48 83 c0 b8                   addq    $-0x48, %rax
// 1a4: 48 c1 e8 03                   shrq    $0x3, %rax
// 1a8: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1ab: 31 c0                         xorl    %eax, %eax
// 1ad: e9 fd fe ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 1b2: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1b6: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1bc: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1c0: 31 ed                         xorl    %ebp, %ebp
// 1c2: eb 18                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 1d0: 48 ff c5                      incq    %rbp
// 1d3: 49 39 ef                      cmpq    %rbp, %r15
// 1d6: 0f 84 28 ff ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 1dc: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 1e1: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 1e5: 49 8b 45 00                   movq    (%r13), %rax
// 1e9: 48 85 c0                      testq   %rax, %rax
// 1ec: 7e 12                         jle     0x200 <_JIT_ENTRY+0x200>
// 1ee: 85 c0                         testl   %eax, %eax
// 1f0: 78 de                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1f2: eb 32                         jmp     0x226 <_JIT_ENTRY+0x226>
// 1f4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 200: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1
// 20a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 20f: 4c 89 ea                      movq    %r13, %rdx
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: ff d0                         callq   *%rax
// 21e: 49 8b 45 00                   movq    (%r13), %rax
// 222: 85 c0                         testl   %eax, %eax
// 224: 78 aa                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 230: ff d0                         callq   *%rax
// 232: 49 ff 4d 00                   decq    (%r13)
// 236: 75 98                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: ff d0                         callq   *%rax
// 247: eb 87                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _JIT_OPARG
// 253: f7 d0                         notl    %eax
// 255: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 25a: 48 98                         cltq
// 25c: 4d 8b 7c c6 f8                movq    -0x8(%r14,%rax,8), %r15
// 261: 4c 8b 65 70                   movq    0x70(%rbp), %r12
// 265: 4d 8b 2c 24                   movq    (%r12), %r13
// 269: 41 8b 07                      movl    (%r15), %eax
// 26c: ff c0                         incl    %eax
// 26e: 74 0f                         je      0x27f <_JIT_ENTRY+0x27f>
// 270: 41 89 07                      movl    %eax, (%r15)
// 273: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000275:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 27d: ff d0                         callq   *%rax
// 27f: 4d 85 ed                      testq   %r13, %r13
// 282: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000284:  R_X86_64_64  _Py_NoneStruct
// 28c: 49 0f 45 c5                   cmovneq %r13, %rax
// 290: 4d 89 3c 24                   movq    %r15, (%r12)
// 294: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000296:  R_X86_64_64  _JIT_OPARG
// 29e: f7 d1                         notl    %ecx
// 2a0: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 2a6: 48 63 c9                      movslq  %ecx, %rcx
// 2a9: 49 89 44 ce f8                movq    %rax, -0x8(%r14,%rcx,8)
// 2ae: 4d 89 3c ce                   movq    %r15, (%r14,%rcx,8)
// 2b2: 49 8d 34 ce                   leaq    (%r14,%rcx,8), %rsi
// 2b6: 48 83 c6 08                   addq    $0x8, %rsi
// 2ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bc:  R_X86_64_64  _JIT_CONTINUE
// 2c4: 48 89 df                      movq    %rbx, %rdi
// 2c7: 48 89 ea                      movq    %rbp, %rdx
// 2ca: 48 83 c4 28                   addq    $0x28, %rsp
// 2ce: 5b                            popq    %rbx
// 2cf: 41 5c                         popq    %r12
// 2d1: 41 5d                         popq    %r13
// 2d3: 41 5e                         popq    %r14
// 2d5: 41 5f                         popq    %r15
// 2d7: 5d                            popq    %rbp
// 2d8: ff e0                         jmpq    *%rax
// 2da: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_PUSH_EXC_INFO_code_body[731] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xce, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4f, 0x8d, 0x04, 0xc6, 0x49, 0x8b, 0x38, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x70, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xae, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x18, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x74, 0x31, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xcb, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xb4, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xfd, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xed, 0xeb, 0x18, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xef, 0x0f, 0x84, 0x28, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x7c, 0xc6, 0xf8, 0x4c, 0x8b, 0x65, 0x70, 0x4d, 0x8b, 0x2c, 0x24, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x0f, 0x45, 0xc5, 0x4d, 0x89, 0x3c, 0x24, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x44, 0xce, 0xf8, 0x4d, 0x89, 0x3c, 0xce, 0x49, 0x8d, 0x34, 0xce, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_PUSH_EXC_INFO_code_holes[19] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x275, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x284, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x296, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2bc, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_PUSH_EXC_INFO_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_PUSH_EXC_INFO_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_PUSH_FRAME
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_PUSH_FRAME.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 cf                   movq    (%r15,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d7                   movq    (%r15,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4f 8d 04 c7                   leaq    (%r15,%r8,8), %r8
// 79: 49 8b 38                      movq    (%r8), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 49 29 df                      subq    %rbx, %r15
// 8a: 49 83 c7 b8                   addq    $-0x48, %r15
// 8e: 49 c1 ef 03                   shrq    $0x3, %r15
// 92: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 96: 48 8b 03                      movq    (%rbx), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c3: 4c 89 0c 24                   movq    %r9, (%rsp)
// c7: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cc: 48 85 c0                      testq   %rax, %rax
// cf: 40 0f 94 c5                   sete    %bpl
// d3: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// d7: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// dc: 49 8d 70 08                   leaq    0x8(%r8), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 ae 00 00 00             je      0x1b2 <_JIT_ENTRY+0x1b2>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// 136: 78 21                         js      0x159 <_JIT_ENTRY+0x159>
// 138: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 142: ff d0                         callq   *%rax
// 144: 49 ff 0c 24                   decq    (%r12)
// 148: 75 0f                         jne     0x159 <_JIT_ENTRY+0x159>
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_Dealloc
// 154: 4c 89 e7                      movq    %r12, %rdi
// 157: ff d0                         callq   *%rax
// 159: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 15e: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 162: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 167: 48 85 c9                      testq   %rcx, %rcx
// 16a: 74 31                         je      0x19d <_JIT_ENTRY+0x19d>
// 16c: 48 89 08                      movq    %rcx, (%rax)
// 16f: 49 8b 46 10                   movq    0x10(%r14), %rax
// 173: 48 8b 00                      movq    (%rax), %rax
// 176: 84 c0                         testb   %al, %al
// 178: 0f 84 cb 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_HandlePending
// 188: 4c 89 f7                      movq    %r14, %rdi
// 18b: ff d0                         callq   *%rax
// 18d: 85 c0                         testl   %eax, %eax
// 18f: 0f 84 b4 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 195: 48 8b 04 24                   movq    (%rsp), %rax
// 199: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 19d: 48 29 d8                      subq    %rbx, %rax
// 1a0: 48 83 c0 b8                   addq    $-0x48, %rax
// 1a4: 48 c1 e8 03                   shrq    $0x3, %rax
// 1a8: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1ab: 31 c0                         xorl    %eax, %eax
// 1ad: e9 fd fe ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 1b2: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1b6: 41 be 01 00 00 00             movl    $0x1, %r14d
// 1bc: 45 0f 43 f5                   cmovael %r13d, %r14d
// 1c0: 31 ed                         xorl    %ebp, %ebp
// 1c2: eb 18                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 1d0: 48 ff c5                      incq    %rbp
// 1d3: 49 39 ee                      cmpq    %rbp, %r14
// 1d6: 0f 84 28 ff ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 1dc: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 1e1: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 1e5: 49 8b 45 00                   movq    (%r13), %rax
// 1e9: 48 85 c0                      testq   %rax, %rax
// 1ec: 7e 12                         jle     0x200 <_JIT_ENTRY+0x200>
// 1ee: 85 c0                         testl   %eax, %eax
// 1f0: 78 de                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1f2: eb 32                         jmp     0x226 <_JIT_ENTRY+0x226>
// 1f4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 200: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1
// 20a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 20f: 4c 89 ea                      movq    %r13, %rdx
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: ff d0                         callq   *%rax
// 21e: 49 8b 45 00                   movq    (%r13), %rax
// 222: 85 c0                         testl   %eax, %eax
// 224: 78 aa                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 230: ff d0                         callq   *%rax
// 232: 49 ff 4d 00                   decq    (%r13)
// 236: 75 98                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: ff d0                         callq   *%rax
// 247: eb 87                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _JIT_OPARG
// 253: f7 d0                         notl    %eax
// 255: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 25a: 48 98                         cltq
// 25c: 49 8d 0c c7                   leaq    (%r15,%rax,8), %rcx
// 260: 48 83 c1 f8                   addq    $-0x8, %rcx
// 264: 49 8b 7c c7 f8                movq    -0x8(%r15,%rax,8), %rdi
// 269: 48 29 d9                      subq    %rbx, %rcx
// 26c: 48 83 c1 b8                   addq    $-0x48, %rcx
// 270: 48 c1 e9 03                   shrq    $0x3, %rcx
// 274: 89 4b 40                      movl    %ecx, 0x40(%rbx)
// 277: 48 89 5f 08                   movq    %rbx, 0x8(%rdi)
// 27b: 49 89 7e 40                   movq    %rdi, 0x40(%r14)
// 27f: 41 ff 4e 24                   decl    0x24(%r14)
// 283: 48 63 47 40                   movslq  0x40(%rdi), %rax
// 287: 48 8d 34 c7                   leaq    (%rdi,%rax,8), %rsi
// 28b: 48 83 c6 48                   addq    $0x48, %rsi
// 28f: c7 47 40 ff ff ff ff          movl    $0xffffffff, 0x40(%rdi) # imm = 0xFFFFFFFF
// 296: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000298:  R_X86_64_64  _JIT_CONTINUE
// 2a0: 4c 89 f2                      movq    %r14, %rdx
// 2a3: 48 83 c4 28                   addq    $0x28, %rsp
// 2a7: 5b                            popq    %rbx
// 2a8: 41 5c                         popq    %r12
// 2aa: 41 5d                         popq    %r13
// 2ac: 41 5e                         popq    %r14
// 2ae: 41 5f                         popq    %r15
// 2b0: 5d                            popq    %rbp
// 2b1: ff e0                         jmpq    *%rax
// 2b3: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_PUSH_FRAME_code_body[692] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xcf, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4f, 0x8d, 0x04, 0xc7, 0x49, 0x8b, 0x38, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x70, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xae, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x74, 0x31, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xcb, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xb4, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xfd, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xed, 0xeb, 0x18, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xee, 0x0f, 0x84, 0x28, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8d, 0x0c, 0xc7, 0x48, 0x83, 0xc1, 0xf8, 0x49, 0x8b, 0x7c, 0xc7, 0xf8, 0x48, 0x29, 0xd9, 0x48, 0x83, 0xc1, 0xb8, 0x48, 0xc1, 0xe9, 0x03, 0x89, 0x4b, 0x40, 0x48, 0x89, 0x5f, 0x08, 0x49, 0x89, 0x7e, 0x40, 0x41, 0xff, 0x4e, 0x24, 0x48, 0x63, 0x47, 0x40, 0x48, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0x48, 0xc7, 0x47, 0x40, 0xff, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_PUSH_FRAME_code_holes[16] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x298, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_PUSH_FRAME_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_PUSH_FRAME_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_PUSH_NULL
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_PUSH_NULL.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4f 8d 04 c6                   leaq    (%r14,%r8,8), %r8
// 79: 49 8b 38                      movq    (%r8), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 49 29 de                      subq    %rbx, %r14
// 8a: 49 83 c6 b8                   addq    $-0x48, %r14
// 8e: 49 c1 ee 03                   shrq    $0x3, %r14
// 92: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 96: 48 8b 03                      movq    (%rbx), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c3: 4c 89 0c 24                   movq    %r9, (%rsp)
// c7: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cc: 48 85 c0                      testq   %rax, %rax
// cf: 40 0f 94 c5                   sete    %bpl
// d3: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// d7: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// dc: 49 8d 70 08                   leaq    0x8(%r8), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 ae 00 00 00             je      0x1b2 <_JIT_ENTRY+0x1b2>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 136: 78 21                         js      0x159 <_JIT_ENTRY+0x159>
// 138: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 142: ff d0                         callq   *%rax
// 144: 49 ff 0c 24                   decq    (%r12)
// 148: 75 0f                         jne     0x159 <_JIT_ENTRY+0x159>
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_Dealloc
// 154: 4c 89 e7                      movq    %r12, %rdi
// 157: ff d0                         callq   *%rax
// 159: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 15e: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 162: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 167: 48 85 c9                      testq   %rcx, %rcx
// 16a: 74 31                         je      0x19d <_JIT_ENTRY+0x19d>
// 16c: 48 89 08                      movq    %rcx, (%rax)
// 16f: 49 8b 47 10                   movq    0x10(%r15), %rax
// 173: 48 8b 00                      movq    (%rax), %rax
// 176: 84 c0                         testb   %al, %al
// 178: 0f 84 cb 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_HandlePending
// 188: 4c 89 ff                      movq    %r15, %rdi
// 18b: ff d0                         callq   *%rax
// 18d: 85 c0                         testl   %eax, %eax
// 18f: 0f 84 b4 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 195: 48 8b 04 24                   movq    (%rsp), %rax
// 199: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 19d: 48 29 d8                      subq    %rbx, %rax
// 1a0: 48 83 c0 b8                   addq    $-0x48, %rax
// 1a4: 48 c1 e8 03                   shrq    $0x3, %rax
// 1a8: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1ab: 31 c0                         xorl    %eax, %eax
// 1ad: e9 fd fe ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 1b2: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1b6: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1bc: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1c0: 31 ed                         xorl    %ebp, %ebp
// 1c2: eb 18                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 1d0: 48 ff c5                      incq    %rbp
// 1d3: 49 39 ef                      cmpq    %rbp, %r15
// 1d6: 0f 84 28 ff ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 1dc: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 1e1: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 1e5: 49 8b 45 00                   movq    (%r13), %rax
// 1e9: 48 85 c0                      testq   %rax, %rax
// 1ec: 7e 12                         jle     0x200 <_JIT_ENTRY+0x200>
// 1ee: 85 c0                         testl   %eax, %eax
// 1f0: 78 de                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1f2: eb 32                         jmp     0x226 <_JIT_ENTRY+0x226>
// 1f4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 200: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1
// 20a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 20f: 4c 89 ea                      movq    %r13, %rdx
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: ff d0                         callq   *%rax
// 21e: 49 8b 45 00                   movq    (%r13), %rax
// 222: 85 c0                         testl   %eax, %eax
// 224: 78 aa                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 230: ff d0                         callq   *%rax
// 232: 49 ff 4d 00                   decq    (%r13)
// 236: 75 98                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: ff d0                         callq   *%rax
// 247: eb 87                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _JIT_OPARG
// 253: f7 d0                         notl    %eax
// 255: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 25a: 48 98                         cltq
// 25c: 49 c7 04 c6 00 00 00 00       movq    $0x0, (%r14,%rax,8)
// 264: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 268: 48 83 c6 08                   addq    $0x8, %rsi
// 26c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026e:  R_X86_64_64  _JIT_CONTINUE
// 276: 48 89 df                      movq    %rbx, %rdi
// 279: 4c 89 fa                      movq    %r15, %rdx
// 27c: 48 83 c4 28                   addq    $0x28, %rsp
// 280: 5b                            popq    %rbx
// 281: 41 5c                         popq    %r12
// 283: 41 5d                         popq    %r13
// 285: 41 5e                         popq    %r14
// 287: 41 5f                         popq    %r15
// 289: 5d                            popq    %rbp
// 28a: ff e0                         jmpq    *%rax
// 28c: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_PUSH_NULL_code_body[653] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xce, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4f, 0x8d, 0x04, 0xc6, 0x49, 0x8b, 0x38, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x70, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xae, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x74, 0x31, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xcb, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xb4, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xfd, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xed, 0xeb, 0x18, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xef, 0x0f, 0x84, 0x28, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0xc7, 0x04, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_PUSH_NULL_code_holes[16] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x26e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_PUSH_NULL_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_PUSH_NULL_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_RESUME_CHECK
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_RESUME_CHECK.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4f 8d 04 c6                   leaq    (%r14,%r8,8), %r8
// 79: 49 8b 38                      movq    (%r8), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 49 29 de                      subq    %rbx, %r14
// 8a: 49 83 c6 b8                   addq    $-0x48, %r14
// 8e: 49 c1 ee 03                   shrq    $0x3, %r14
// 92: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 96: 48 8b 03                      movq    (%rbx), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c3: 4c 89 0c 24                   movq    %r9, (%rsp)
// c7: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cc: 48 85 c0                      testq   %rax, %rax
// cf: 40 0f 94 c5                   sete    %bpl
// d3: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// d7: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// dc: 49 8d 70 08                   leaq    0x8(%r8), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 b1 00 00 00             je      0x1b5 <_JIT_ENTRY+0x1b5>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 136: 78 21                         js      0x159 <_JIT_ENTRY+0x159>
// 138: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 142: ff d0                         callq   *%rax
// 144: 49 ff 0c 24                   decq    (%r12)
// 148: 75 0f                         jne     0x159 <_JIT_ENTRY+0x159>
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_Dealloc
// 154: 4c 89 e7                      movq    %r12, %rdi
// 157: ff d0                         callq   *%rax
// 159: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 15e: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 162: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 167: 48 85 d2                      testq   %rdx, %rdx
// 16a: 74 34                         je      0x1a0 <_JIT_ENTRY+0x1a0>
// 16c: 48 8b 0c 24                   movq    (%rsp), %rcx
// 170: 4d 8d 34 ce                   leaq    (%r14,%rcx,8), %r14
// 174: 48 89 10                      movq    %rdx, (%rax)
// 177: 49 8b 47 10                   movq    0x10(%r15), %rax
// 17b: 48 8b 08                      movq    (%rax), %rcx
// 17e: 84 c9                         testb   %cl, %cl
// 180: 0f 84 c7 00 00 00             je      0x24d <_JIT_ENTRY+0x24d>
// 186: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000188:  R_X86_64_64  _Py_HandlePending
// 190: 4c 89 ff                      movq    %r15, %rdi
// 193: ff d0                         callq   *%rax
// 195: 85 c0                         testl   %eax, %eax
// 197: 0f 84 ac 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 19d: 4c 89 f0                      movq    %r14, %rax
// 1a0: 48 29 d8                      subq    %rbx, %rax
// 1a3: 48 83 c0 b8                   addq    $-0x48, %rax
// 1a7: 48 c1 e8 03                   shrq    $0x3, %rax
// 1ab: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1ae: 31 c0                         xorl    %eax, %eax
// 1b0: e9 fa fe ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 1b5: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1b9: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1bf: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1c3: 31 ed                         xorl    %ebp, %ebp
// 1c5: eb 15                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c7: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 1d0: 48 ff c5                      incq    %rbp
// 1d3: 49 39 ef                      cmpq    %rbp, %r15
// 1d6: 0f 84 28 ff ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 1dc: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 1e1: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 1e5: 49 8b 45 00                   movq    (%r13), %rax
// 1e9: 48 85 c0                      testq   %rax, %rax
// 1ec: 7e 12                         jle     0x200 <_JIT_ENTRY+0x200>
// 1ee: 85 c0                         testl   %eax, %eax
// 1f0: 78 de                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1f2: eb 32                         jmp     0x226 <_JIT_ENTRY+0x226>
// 1f4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 200: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1
// 20a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 20f: 4c 89 ea                      movq    %r13, %rdx
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: ff d0                         callq   *%rax
// 21e: 49 8b 45 00                   movq    (%r13), %rax
// 222: 85 c0                         testl   %eax, %eax
// 224: 78 aa                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 230: ff d0                         callq   *%rax
// 232: 49 ff 4d 00                   decq    (%r13)
// 236: 75 98                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: ff d0                         callq   *%rax
// 247: eb 87                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 249: 49 8b 47 10                   movq    0x10(%r15), %rax
// 24d: 48 8b 00                      movq    (%rax), %rax
// 250: 48 8b 0b                      movq    (%rbx), %rcx
// 253: 48 3b 81 a8 00 00 00          cmpq    0xa8(%rcx), %rax
// 25a: 0f 85 27 fe ff ff             jne     0x87 <_JIT_ENTRY+0x87>
// 260: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000262:  R_X86_64_64  _JIT_CONTINUE
// 26a: 48 89 df                      movq    %rbx, %rdi
// 26d: 4c 89 f6                      movq    %r14, %rsi
// 270: 4c 89 fa                      movq    %r15, %rdx
// 273: 48 83 c4 28                   addq    $0x28, %rsp
// 277: 5b                            popq    %rbx
// 278: 41 5c                         popq    %r12
// 27a: 41 5d                         popq    %r13
// 27c: 41 5e                         popq    %r14
// 27e: 41 5f                         popq    %r15
// 280: 5d                            popq    %rbp
// 281: ff e0                         jmpq    *%rax
// 283: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_RESUME_CHECK_code_body[644] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xce, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4f, 0x8d, 0x04, 0xc6, 0x49, 0x8b, 0x38, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x70, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xb1, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x74, 0x34, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x34, 0xce, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x08, 0x84, 0xc9, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xac, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xfa, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xed, 0xeb, 0x15, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xef, 0x0f, 0x84, 0x28, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x48, 0x8b, 0x0b, 0x48, 0x3b, 0x81, 0xa8, 0x00, 0x00, 0x00, 0x0f, 0x85, 0x27, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_RESUME_CHECK_code_holes[15] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x262, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_RESUME_CHECK_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_RESUME_CHECK_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_SAVE_RETURN_OFFSET
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_SAVE_RETURN_OFFSET.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 cf                   movq    (%r15,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d7                   movq    (%r15,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4f 8d 04 c7                   leaq    (%r15,%r8,8), %r8
// 79: 49 8b 38                      movq    (%r8), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 49 29 df                      subq    %rbx, %r15
// 8a: 49 83 c7 b8                   addq    $-0x48, %r15
// 8e: 49 c1 ef 03                   shrq    $0x3, %r15
// 92: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 96: 48 8b 03                      movq    (%rbx), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c3: 4c 89 0c 24                   movq    %r9, (%rsp)
// c7: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cc: 48 85 c0                      testq   %rax, %rax
// cf: 40 0f 94 c5                   sete    %bpl
// d3: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// d7: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// dc: 49 8d 70 08                   leaq    0x8(%r8), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 b1 00 00 00             je      0x1b5 <_JIT_ENTRY+0x1b5>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// 136: 78 21                         js      0x159 <_JIT_ENTRY+0x159>
// 138: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 142: ff d0                         callq   *%rax
// 144: 49 ff 0c 24                   decq    (%r12)
// 148: 75 0f                         jne     0x159 <_JIT_ENTRY+0x159>
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_Dealloc
// 154: 4c 89 e7                      movq    %r12, %rdi
// 157: ff d0                         callq   *%rax
// 159: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 15e: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 162: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 167: 48 85 d2                      testq   %rdx, %rdx
// 16a: 74 34                         je      0x1a0 <_JIT_ENTRY+0x1a0>
// 16c: 48 8b 0c 24                   movq    (%rsp), %rcx
// 170: 4d 8d 3c cf                   leaq    (%r15,%rcx,8), %r15
// 174: 48 89 10                      movq    %rdx, (%rax)
// 177: 49 8b 46 10                   movq    0x10(%r14), %rax
// 17b: 48 8b 00                      movq    (%rax), %rax
// 17e: 84 c0                         testb   %al, %al
// 180: 0f 84 c3 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 186: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000188:  R_X86_64_64  _Py_HandlePending
// 190: 4c 89 f7                      movq    %r14, %rdi
// 193: ff d0                         callq   *%rax
// 195: 85 c0                         testl   %eax, %eax
// 197: 0f 84 ac 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 19d: 4c 89 f8                      movq    %r15, %rax
// 1a0: 48 29 d8                      subq    %rbx, %rax
// 1a3: 48 83 c0 b8                   addq    $-0x48, %rax
// 1a7: 48 c1 e8 03                   shrq    $0x3, %rax
// 1ab: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1ae: 31 c0                         xorl    %eax, %eax
// 1b0: e9 fa fe ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 1b5: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1b9: 41 be 01 00 00 00             movl    $0x1, %r14d
// 1bf: 45 0f 43 f5                   cmovael %r13d, %r14d
// 1c3: 31 ed                         xorl    %ebp, %ebp
// 1c5: eb 15                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c7: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 1d0: 48 ff c5                      incq    %rbp
// 1d3: 49 39 ee                      cmpq    %rbp, %r14
// 1d6: 0f 84 28 ff ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 1dc: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 1e1: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 1e5: 49 8b 45 00                   movq    (%r13), %rax
// 1e9: 48 85 c0                      testq   %rax, %rax
// 1ec: 7e 12                         jle     0x200 <_JIT_ENTRY+0x200>
// 1ee: 85 c0                         testl   %eax, %eax
// 1f0: 78 de                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1f2: eb 32                         jmp     0x226 <_JIT_ENTRY+0x226>
// 1f4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 200: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1
// 20a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 20f: 4c 89 ea                      movq    %r13, %rdx
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: ff d0                         callq   *%rax
// 21e: 49 8b 45 00                   movq    (%r13), %rax
// 222: 85 c0                         testl   %eax, %eax
// 224: 78 aa                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 230: ff d0                         callq   *%rax
// 232: 49 ff 4d 00                   decq    (%r13)
// 236: 75 98                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: ff d0                         callq   *%rax
// 247: eb 87                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _JIT_OPARG
// 253: 66 89 43 44                   movw    %ax, 0x44(%rbx)
// 257: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000259:  R_X86_64_64  _JIT_CONTINUE
// 261: 48 89 df                      movq    %rbx, %rdi
// 264: 4c 89 fe                      movq    %r15, %rsi
// 267: 4c 89 f2                      movq    %r14, %rdx
// 26a: 48 83 c4 28                   addq    $0x28, %rsp
// 26e: 5b                            popq    %rbx
// 26f: 41 5c                         popq    %r12
// 271: 41 5d                         popq    %r13
// 273: 41 5e                         popq    %r14
// 275: 41 5f                         popq    %r15
// 277: 5d                            popq    %rbp
// 278: ff e0                         jmpq    *%rax
// 27a: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_SAVE_RETURN_OFFSET_code_body[635] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xcf, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4f, 0x8d, 0x04, 0xc7, 0x49, 0x8b, 0x38, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x70, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xb1, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x74, 0x34, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x3c, 0xcf, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xac, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xfa, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xed, 0xeb, 0x15, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xee, 0x0f, 0x84, 0x28, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x89, 0x43, 0x44, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_SAVE_RETURN_OFFSET_code_holes[16] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x259, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_SAVE_RETURN_OFFSET_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_SAVE_RETURN_OFFSET_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_SETUP_ANNOTATIONS
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_SETUP_ANNOTATIONS.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 38                   subq    $0x38, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d7                   movq    (%r15,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 df                   movq    (%r15,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4b 8d 1c cf                   leaq    (%r15,%r9,8), %rbx
// 79: 48 8b 3b                      movq    (%rbx), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 4d 29 c7                      subq    %r8, %r15
// 8a: 49 83 c7 b8                   addq    $-0x48, %r15
// 8e: 49 c1 ef 03                   shrq    $0x3, %r15
// 92: 45 89 78 40                   movl    %r15d, 0x40(%r8)
// 96: 49 8b 00                      movq    (%r8), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 38                   addq    $0x38, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 5c 24 20                movq    %r11, 0x20(%rsp)
// c3: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c8: 48 89 54 24 28                movq    %rdx, 0x28(%rsp)
// cd: 4c 89 44 24 30                movq    %r8, 0x30(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 40 0f 94 c5                   sete    %bpl
// d9: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dd: 48 8d 73 08                   leaq    0x8(%rbx), %rsi
// e1: 48 63 d0                      movslq  %eax, %rdx
// e4: ff 51 08                      callq   *0x8(%rcx)
// e7: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ee:  R_X86_64_64  _JIT_OPARG
// f6: 66 85 c0                      testw   %ax, %ax
// f9: 0f 94 c0                      sete    %al
// fc: 40 84 c5                      testb   %al, %bpl
// ff: 0f 84 44 01 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 105: 49 8b 04 24                   movq    (%r12), %rax
// 109: 48 85 c0                      testq   %rax, %rax
// 10c: 7f 22                         jg      0x130 <_JIT_ENTRY+0x130>
// 10e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000110:  R_X86_64_64  .rodata.str1.1
// 118: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011a:  R_X86_64_64  _Py_NegativeRefcount
// 122: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 127: 4c 89 e2                      movq    %r12, %rdx
// 12a: ff d0                         callq   *%rax
// 12c: 49 8b 04 24                   movq    (%r12), %rax
// 130: 85 c0                         testl   %eax, %eax
// 132: 4c 8b 74 24 28                movq    0x28(%rsp), %r14
// 137: 78 21                         js      0x15a <_JIT_ENTRY+0x15a>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 143: ff d0                         callq   *%rax
// 145: 49 ff 0c 24                   decq    (%r12)
// 149: 75 0f                         jne     0x15a <_JIT_ENTRY+0x15a>
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_Dealloc
// 155: 4c 89 e7                      movq    %r12, %rdi
// 158: ff d0                         callq   *%rax
// 15a: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 15f: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 163: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 168: 48 85 d2                      testq   %rdx, %rdx
// 16b: 48 8b 5c 24 30                movq    0x30(%rsp), %rbx
// 170: 0f 84 53 01 00 00             je      0x2c9 <_JIT_ENTRY+0x2c9>
// 176: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 17b: 4d 8d 3c cf                   leaq    (%r15,%rcx,8), %r15
// 17f: 48 89 10                      movq    %rdx, (%rax)
// 182: 49 8b 46 10                   movq    0x10(%r14), %rax
// 186: 48 8b 00                      movq    (%rax), %rax
// 189: 84 c0                         testb   %al, %al
// 18b: 74 17                         je      0x1a4 <_JIT_ENTRY+0x1a4>
// 18d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018f:  R_X86_64_64  _Py_HandlePending
// 197: 4c 89 f7                      movq    %r14, %rdi
// 19a: ff d0                         callq   *%rax
// 19c: 85 c0                         testl   %eax, %eax
// 19e: 0f 85 52 01 00 00             jne     0x2f6 <_JIT_ENTRY+0x2f6>
// 1a4: 48 8b 7b 28                   movq    0x28(%rbx), %rdi
// 1a8: 48 85 ff                      testq   %rdi, %rdi
// 1ab: 0f 84 1d 01 00 00             je      0x2ce <_JIT_ENTRY+0x2ce>
// 1b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b3:  R_X86_64_64  PyMapping_GetOptionalItem
// 1bb: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000001bd:  R_X86_64_64  _PyRuntime
// 1c5: 49 81 c5 a8 a7 00 00          addq    $0xa7a8, %r13           # imm = 0xA7A8
// 1cc: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 1d1: 4c 89 ee                      movq    %r13, %rsi
// 1d4: ff d0                         callq   *%rax
// 1d6: 85 c0                         testl   %eax, %eax
// 1d8: 0f 88 18 01 00 00             js      0x2f6 <_JIT_ENTRY+0x2f6>
// 1de: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 1e3: 4d 85 e4                      testq   %r12, %r12
// 1e6: 0f 84 20 01 00 00             je      0x30c <_JIT_ENTRY+0x30c>
// 1ec: 49 8b 04 24                   movq    (%r12), %rax
// 1f0: 48 85 c0                      testq   %rax, %rax
// 1f3: 7f 22                         jg      0x217 <_JIT_ENTRY+0x217>
// 1f5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f7:  R_X86_64_64  .rodata.str1.1
// 1ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000201:  R_X86_64_64  _Py_NegativeRefcount
// 209: be 96 05 00 00                movl    $0x596, %esi            # imm = 0x596
// 20e: 4c 89 e2                      movq    %r12, %rdx
// 211: ff d0                         callq   *%rax
// 213: 49 8b 04 24                   movq    (%r12), %rax
// 217: 85 c0                         testl   %eax, %eax
// 219: 0f 88 78 01 00 00             js      0x397 <_JIT_ENTRY+0x397>
// 21f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000221:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 229: ff d0                         callq   *%rax
// 22b: 49 ff 0c 24                   decq    (%r12)
// 22f: 0f 85 62 01 00 00             jne     0x397 <_JIT_ENTRY+0x397>
// 235: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000237:  R_X86_64_64  _Py_Dealloc
// 23f: 4c 89 e7                      movq    %r12, %rdi
// 242: ff d0                         callq   *%rax
// 244: e9 4e 01 00 00                jmp     0x397 <_JIT_ENTRY+0x397>
// 249: 41 83 fd 02                   cmpl    $0x2, %r13d
// 24d: bd 01 00 00 00                movl    $0x1, %ebp
// 252: 41 0f 43 ed                   cmovael %r13d, %ebp
// 256: 45 31 f6                      xorl    %r14d, %r14d
// 259: eb 11                         jmp     0x26c <_JIT_ENTRY+0x26c>
// 25b: 0f 1f 44 00 00                nopl    (%rax,%rax)
// 260: 49 ff c6                      incq    %r14
// 263: 4c 39 f5                      cmpq    %r14, %rbp
// 266: 0f 84 99 fe ff ff             je      0x105 <_JIT_ENTRY+0x105>
// 26c: 4e 8b 2c f3                   movq    (%rbx,%r14,8), %r13
// 270: 49 8b 45 00                   movq    (%r13), %rax
// 274: 48 85 c0                      testq   %rax, %rax
// 277: 7e 07                         jle     0x280 <_JIT_ENTRY+0x280>
// 279: 85 c0                         testl   %eax, %eax
// 27b: 78 e3                         js      0x260 <_JIT_ENTRY+0x260>
// 27d: eb 27                         jmp     0x2a6 <_JIT_ENTRY+0x2a6>
// 27f: 90                            nop
// 280: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000282:  R_X86_64_64  .rodata.str1.1
// 28a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 28f: 4c 89 ea                      movq    %r13, %rdx
// 292: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000294:  R_X86_64_64  _Py_NegativeRefcount
// 29c: ff d0                         callq   *%rax
// 29e: 49 8b 45 00                   movq    (%r13), %rax
// 2a2: 85 c0                         testl   %eax, %eax
// 2a4: 78 ba                         js      0x260 <_JIT_ENTRY+0x260>
// 2a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2b0: ff d0                         callq   *%rax
// 2b2: 49 ff 4d 00                   decq    (%r13)
// 2b6: 75 a8                         jne     0x260 <_JIT_ENTRY+0x260>
// 2b8: 4c 89 ef                      movq    %r13, %rdi
// 2bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bd:  R_X86_64_64  _Py_Dealloc
// 2c5: ff d0                         callq   *%rax
// 2c7: eb 97                         jmp     0x260 <_JIT_ENTRY+0x260>
// 2c9: 49 89 c7                      movq    %rax, %r15
// 2cc: eb 28                         jmp     0x2f6 <_JIT_ENTRY+0x2f6>
// 2ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d0:  R_X86_64_64  PyExc_SystemError
// 2d8: 48 8b 30                      movq    (%rax), %rsi
// 2db: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002dd:  R_X86_64_64  .rodata.str1.1+0x39
// 2e5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002e7:  R_X86_64_64  _PyErr_Format
// 2ef: 4c 89 f7                      movq    %r14, %rdi
// 2f2: 31 c0                         xorl    %eax, %eax
// 2f4: ff d1                         callq   *%rcx
// 2f6: 49 29 df                      subq    %rbx, %r15
// 2f9: 49 83 c7 b8                   addq    $-0x48, %r15
// 2fd: 49 c1 ef 03                   shrq    $0x3, %r15
// 301: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 305: 31 c0                         xorl    %eax, %eax
// 307: e9 a3 fd ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 30c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030e:  R_X86_64_64  PyDict_New
// 316: ff d0                         callq   *%rax
// 318: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 31d: 48 85 c0                      testq   %rax, %rax
// 320: 74 d4                         je      0x2f6 <_JIT_ENTRY+0x2f6>
// 322: 48 8b 7b 28                   movq    0x28(%rbx), %rdi
// 326: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000328:  R_X86_64_64  PyObject_SetItem
// 330: 4c 89 ee                      movq    %r13, %rsi
// 333: 48 89 c2                      movq    %rax, %rdx
// 336: ff d1                         callq   *%rcx
// 338: 89 c5                         movl    %eax, %ebp
// 33a: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 33f: 49 8b 04 24                   movq    (%r12), %rax
// 343: 48 85 c0                      testq   %rax, %rax
// 346: 7f 22                         jg      0x36a <_JIT_ENTRY+0x36a>
// 348: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000034a:  R_X86_64_64  .rodata.str1.1
// 352: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000354:  R_X86_64_64  _Py_NegativeRefcount
// 35c: be 92 05 00 00                movl    $0x592, %esi            # imm = 0x592
// 361: 4c 89 e2                      movq    %r12, %rdx
// 364: ff d0                         callq   *%rax
// 366: 49 8b 04 24                   movq    (%r12), %rax
// 36a: 85 c0                         testl   %eax, %eax
// 36c: 78 21                         js      0x38f <_JIT_ENTRY+0x38f>
// 36e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000370:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 378: ff d0                         callq   *%rax
// 37a: 49 ff 0c 24                   decq    (%r12)
// 37e: 75 0f                         jne     0x38f <_JIT_ENTRY+0x38f>
// 380: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000382:  R_X86_64_64  _Py_Dealloc
// 38a: 4c 89 e7                      movq    %r12, %rdi
// 38d: ff d0                         callq   *%rax
// 38f: 85 ed                         testl   %ebp, %ebp
// 391: 0f 85 5f ff ff ff             jne     0x2f6 <_JIT_ENTRY+0x2f6>
// 397: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000399:  R_X86_64_64  _JIT_CONTINUE
// 3a1: 48 89 df                      movq    %rbx, %rdi
// 3a4: 4c 89 fe                      movq    %r15, %rsi
// 3a7: 4c 89 f2                      movq    %r14, %rdx
// 3aa: 48 83 c4 38                   addq    $0x38, %rsp
// 3ae: 5b                            popq    %rbx
// 3af: 41 5c                         popq    %r12
// 3b1: 41 5d                         popq    %r13
// 3b3: 41 5e                         popq    %r14
// 3b5: 41 5f                         popq    %r15
// 3b7: 5d                            popq    %rbp
// 3b8: ff e0                         jmpq    *%rax
// 3ba: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_SETUP_ANNOTATIONS_code_body[955] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x38, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd7, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xdf, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4b, 0x8d, 0x1c, 0xcf, 0x48, 0x8b, 0x3b, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x78, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x20, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x28, 0x4c, 0x89, 0x44, 0x24, 0x30, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x73, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0x44, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x28, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x85, 0xd2, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x0f, 0x84, 0x53, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x4d, 0x8d, 0x3c, 0xcf, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x52, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7b, 0x28, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x1d, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x81, 0xc5, 0xa8, 0xa7, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x88, 0x18, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0x20, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x96, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x78, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x62, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0x4e, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xed, 0x45, 0x31, 0xf6, 0xeb, 0x11, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x49, 0xff, 0xc6, 0x4c, 0x39, 0xf5, 0x0f, 0x84, 0x99, 0xfe, 0xff, 0xff, 0x4e, 0x8b, 0x2c, 0xf3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x27, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x49, 0x89, 0xc7, 0xeb, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x31, 0xc0, 0xff, 0xd1, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0xe9, 0xa3, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x74, 0xd4, 0x48, 0x8b, 0x7b, 0x28, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xee, 0x48, 0x89, 0xc2, 0xff, 0xd1, 0x89, 0xc5, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x92, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x85, 0x5f, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_SETUP_ANNOTATIONS_code_holes[30] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xee, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x11a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x1bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x1f7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x201, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x237, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x282, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x294, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2a8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x2dd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2e7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x30e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_New, 0x0},
    {0x328, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x34a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x354, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x370, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x382, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x399, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00no locals found when setting up annotations\x00'
// 65: 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_SETUP_ANNOTATIONS_data_body[105] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x70, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_SETUP_ANNOTATIONS_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_SET_ADD
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_SET_ADD.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d7                   movq    (%r15,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 df                   movq    (%r15,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c cf                   leaq    (%r15,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 c7                      subq    %r8, %r15
// 8b: 49 83 c7 b8                   addq    $-0x48, %r15
// 8f: 49 c1 ef 03                   shrq    $0x3, %r15
// 93: 45 89 78 40                   movl    %r15d, 0x40(%r8)
// 97: 49 8b 00                      movq    (%r8), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 5c 24 18                movq    %r11, 0x18(%rsp)
// c4: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// c9: 48 89 14 24                   movq    %rdx, (%rsp)
// cd: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 51 01 00 00             je      0x254 <_JIT_ENTRY+0x254>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 1c 24                   movq    (%rsp), %rbx
// 134: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 139: 78 21                         js      0x15c <_JIT_ENTRY+0x15c>
// 13b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 145: ff d0                         callq   *%rax
// 147: 49 ff 0c 24                   decq    (%r12)
// 14b: 75 0f                         jne     0x15c <_JIT_ENTRY+0x15c>
// 14d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014f:  R_X86_64_64  _Py_Dealloc
// 157: 4c 89 e7                      movq    %r12, %rdi
// 15a: ff d0                         callq   *%rax
// 15c: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 161: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 165: 4d 85 ed                      testq   %r13, %r13
// 168: 4c 8b 74 24 20                movq    0x20(%rsp), %r14
// 16d: 0f 84 cb 00 00 00             je      0x23e <_JIT_ENTRY+0x23e>
// 173: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 178: 4d 8d 24 cf                   leaq    (%r15,%rcx,8), %r12
// 17c: 4c 89 28                      movq    %r13, (%rax)
// 17f: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 183: 48 8b 00                      movq    (%rax), %rax
// 186: 84 c0                         testb   %al, %al
// 188: 74 17                         je      0x1a1 <_JIT_ENTRY+0x1a1>
// 18a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018c:  R_X86_64_64  _Py_HandlePending
// 194: 48 89 df                      movq    %rbx, %rdi
// 197: ff d0                         callq   *%rax
// 199: 85 c0                         testl   %eax, %eax
// 19b: 0f 85 9a 00 00 00             jne     0x23b <_JIT_ENTRY+0x23b>
// 1a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a3:  R_X86_64_64  _JIT_OPARG
// 1ab: f7 d0                         notl    %eax
// 1ad: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1b2: 48 63 d8                      movslq  %eax, %rbx
// 1b5: 4d 8b 6c df f8                movq    -0x8(%r15,%rbx,8), %r13
// 1ba: 48 8d 04 1b                   leaq    (%rbx,%rbx), %rax
// 1be: 49 8b 3c c7                   movq    (%r15,%rax,8), %rdi
// 1c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c4:  R_X86_64_64  PySet_Add
// 1cc: 4c 89 ee                      movq    %r13, %rsi
// 1cf: ff d0                         callq   *%rax
// 1d1: 89 c5                         movl    %eax, %ebp
// 1d3: 49 8b 45 00                   movq    (%r13), %rax
// 1d7: 48 85 c0                      testq   %rax, %rax
// 1da: 7f 22                         jg      0x1fe <_JIT_ENTRY+0x1fe>
// 1dc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001de:  R_X86_64_64  .rodata.str1.1
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _Py_NegativeRefcount
// 1f0: be 29 02 00 00                movl    $0x229, %esi            # imm = 0x229
// 1f5: 4c 89 ea                      movq    %r13, %rdx
// 1f8: ff d0                         callq   *%rax
// 1fa: 49 8b 45 00                   movq    (%r13), %rax
// 1fe: 49 8d 1c df                   leaq    (%r15,%rbx,8), %rbx
// 202: 48 83 c3 f8                   addq    $-0x8, %rbx
// 206: 85 c0                         testl   %eax, %eax
// 208: 78 21                         js      0x22b <_JIT_ENTRY+0x22b>
// 20a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 214: ff d0                         callq   *%rax
// 216: 49 ff 4d 00                   decq    (%r13)
// 21a: 75 0f                         jne     0x22b <_JIT_ENTRY+0x22b>
// 21c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021e:  R_X86_64_64  _Py_Dealloc
// 226: 4c 89 ef                      movq    %r13, %rdi
// 229: ff d0                         callq   *%rax
// 22b: 85 ed                         testl   %ebp, %ebp
// 22d: 4c 0f 44 e3                   cmoveq  %rbx, %r12
// 231: 0f 84 a2 00 00 00             je      0x2d9 <_JIT_ENTRY+0x2d9>
// 237: 49 83 c4 f8                   addq    $-0x8, %r12
// 23b: 4c 89 e0                      movq    %r12, %rax
// 23e: 4c 29 f0                      subq    %r14, %rax
// 241: 48 83 c0 b8                   addq    $-0x48, %rax
// 245: 48 c1 e8 03                   shrq    $0x3, %rax
// 249: 41 89 46 40                   movl    %eax, 0x40(%r14)
// 24d: 31 c0                         xorl    %eax, %eax
// 24f: e9 5c fe ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 254: 41 83 fd 02                   cmpl    $0x2, %r13d
// 258: 41 be 01 00 00 00             movl    $0x1, %r14d
// 25e: 45 0f 43 f5                   cmovael %r13d, %r14d
// 262: 31 db                         xorl    %ebx, %ebx
// 264: eb 16                         jmp     0x27c <_JIT_ENTRY+0x27c>
// 266: 66 2e 0f 1f 84 00 00 00 00 00 nopw    %cs:(%rax,%rax)
// 270: 48 ff c3                      incq    %rbx
// 273: 49 39 de                      cmpq    %rbx, %r14
// 276: 0f 84 87 fe ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 27c: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 281: 49 8b 45 00                   movq    (%r13), %rax
// 285: 48 85 c0                      testq   %rax, %rax
// 288: 7e 06                         jle     0x290 <_JIT_ENTRY+0x290>
// 28a: 85 c0                         testl   %eax, %eax
// 28c: 78 e2                         js      0x270 <_JIT_ENTRY+0x270>
// 28e: eb 26                         jmp     0x2b6 <_JIT_ENTRY+0x2b6>
// 290: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000292:  R_X86_64_64  .rodata.str1.1
// 29a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 29f: 4c 89 ea                      movq    %r13, %rdx
// 2a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a4:  R_X86_64_64  _Py_NegativeRefcount
// 2ac: ff d0                         callq   *%rax
// 2ae: 49 8b 45 00                   movq    (%r13), %rax
// 2b2: 85 c0                         testl   %eax, %eax
// 2b4: 78 ba                         js      0x270 <_JIT_ENTRY+0x270>
// 2b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2c0: ff d0                         callq   *%rax
// 2c2: 49 ff 4d 00                   decq    (%r13)
// 2c6: 75 a8                         jne     0x270 <_JIT_ENTRY+0x270>
// 2c8: 4c 89 ef                      movq    %r13, %rdi
// 2cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cd:  R_X86_64_64  _Py_Dealloc
// 2d5: ff d0                         callq   *%rax
// 2d7: eb 97                         jmp     0x270 <_JIT_ENTRY+0x270>
// 2d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002db:  R_X86_64_64  _JIT_CONTINUE
// 2e3: 4c 89 f7                      movq    %r14, %rdi
// 2e6: 4c 89 e6                      movq    %r12, %rsi
// 2e9: 48 8b 14 24                   movq    (%rsp), %rdx
// 2ed: 48 83 c4 28                   addq    $0x28, %rsp
// 2f1: 5b                            popq    %rbx
// 2f2: 41 5c                         popq    %r12
// 2f4: 41 5d                         popq    %r13
// 2f6: 41 5e                         popq    %r14
// 2f8: 41 5f                         popq    %r15
// 2fa: 5d                            popq    %rbp
// 2fb: ff e0                         jmpq    *%rax
// 2fd: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_SET_ADD_code_body[766] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd7, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xdf, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xcf, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x78, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x18, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x14, 0x24, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0x51, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x04, 0xc7, 0x4d, 0x85, 0xed, 0x4c, 0x8b, 0x74, 0x24, 0x20, 0x0f, 0x84, 0xcb, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x4d, 0x8d, 0x24, 0xcf, 0x4c, 0x89, 0x28, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x9a, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xd8, 0x4d, 0x8b, 0x6c, 0xdf, 0xf8, 0x48, 0x8d, 0x04, 0x1b, 0x49, 0x8b, 0x3c, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x29, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x49, 0x8d, 0x1c, 0xdf, 0x48, 0x83, 0xc3, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xed, 0x4c, 0x0f, 0x44, 0xe3, 0x0f, 0x84, 0xa2, 0x00, 0x00, 0x00, 0x49, 0x83, 0xc4, 0xf8, 0x4c, 0x89, 0xe0, 0x4c, 0x29, 0xf0, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x46, 0x40, 0x31, 0xc0, 0xe9, 0x5c, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xdb, 0xeb, 0x16, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x87, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_SET_ADD_code_holes[21] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x21e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x292, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2a4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2cd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2db, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_SET_ADD_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_SET_ADD_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_SET_FUNCTION_ATTRIBUTE
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_SET_FUNCTION_ATTRIBUTE.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d6                   movq    (%r14,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 de                   movq    (%r14,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c ce                   leaq    (%r14,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 c6                      subq    %r8, %r14
// 8b: 49 83 c6 b8                   addq    $-0x48, %r14
// 8f: 49 c1 ee 03                   shrq    $0x3, %r14
// 93: 45 89 70 40                   movl    %r14d, 0x40(%r8)
// 97: 49 8b 00                      movq    (%r8), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 5c 24 10                movq    %r11, 0x10(%rsp)
// c4: 4c 89 14 24                   movq    %r10, (%rsp)
// c8: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cd: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 b3 00 00 00             je      0x1b6 <_JIT_ENTRY+0x1b6>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 135: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 13a: 78 21                         js      0x15d <_JIT_ENTRY+0x15d>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 146: ff d0                         callq   *%rax
// 148: 49 ff 0c 24                   decq    (%r12)
// 14c: 75 0f                         jne     0x15d <_JIT_ENTRY+0x15d>
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _Py_Dealloc
// 158: 4c 89 e7                      movq    %r12, %rdi
// 15b: ff d0                         callq   *%rax
// 15d: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 162: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 166: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 16b: 48 85 c9                      testq   %rcx, %rcx
// 16e: 74 31                         je      0x1a1 <_JIT_ENTRY+0x1a1>
// 170: 48 89 08                      movq    %rcx, (%rax)
// 173: 49 8b 47 10                   movq    0x10(%r15), %rax
// 177: 48 8b 00                      movq    (%rax), %rax
// 17a: 84 c0                         testb   %al, %al
// 17c: 0f 84 b7 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 182: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000184:  R_X86_64_64  _Py_HandlePending
// 18c: 4c 89 ff                      movq    %r15, %rdi
// 18f: ff d0                         callq   *%rax
// 191: 85 c0                         testl   %eax, %eax
// 193: 0f 84 a0 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 199: 48 8b 04 24                   movq    (%rsp), %rax
// 19d: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 1a1: 48 29 d8                      subq    %rbx, %rax
// 1a4: 48 83 c0 b8                   addq    $-0x48, %rax
// 1a8: 48 c1 e8 03                   shrq    $0x3, %rax
// 1ac: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1af: 31 c0                         xorl    %eax, %eax
// 1b1: e9 fa fe ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 1b6: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1ba: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1c0: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1c4: 31 db                         xorl    %ebx, %ebx
// 1c6: eb 14                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c8: 0f 1f 84 00 00 00 00 00       nopl    (%rax,%rax)
// 1d0: 48 ff c3                      incq    %rbx
// 1d3: 49 39 df                      cmpq    %rbx, %r15
// 1d6: 0f 84 27 ff ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 1dc: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1e1: 49 8b 45 00                   movq    (%r13), %rax
// 1e5: 48 85 c0                      testq   %rax, %rax
// 1e8: 7e 06                         jle     0x1f0 <_JIT_ENTRY+0x1f0>
// 1ea: 85 c0                         testl   %eax, %eax
// 1ec: 78 e2                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1ee: eb 26                         jmp     0x216 <_JIT_ENTRY+0x216>
// 1f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f2:  R_X86_64_64  .rodata.str1.1
// 1fa: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ff: 4c 89 ea                      movq    %r13, %rdx
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_NegativeRefcount
// 20c: ff d0                         callq   *%rax
// 20e: 49 8b 45 00                   movq    (%r13), %rax
// 212: 85 c0                         testl   %eax, %eax
// 214: 78 ba                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 220: ff d0                         callq   *%rax
// 222: 49 ff 4d 00                   decq    (%r13)
// 226: 75 a8                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 228: 4c 89 ef                      movq    %r13, %rdi
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_Dealloc
// 235: ff d0                         callq   *%rax
// 237: eb 97                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _JIT_OPARG
// 243: 0f b7 f0                      movzwl  %ax, %esi
// 246: 89 f0                         movl    %esi, %eax
// 248: f7 d0                         notl    %eax
// 24a: 48 63 d0                      movslq  %eax, %rdx
// 24d: 49 8b 4c d6 f0                movq    -0x10(%r14,%rdx,8), %rcx
// 252: 49 8b 44 d6 f8                movq    -0x8(%r14,%rdx,8), %rax
// 257: 83 fe 03                      cmpl    $0x3, %esi
// 25a: 7f 10                         jg      0x26c <_JIT_ENTRY+0x26c>
// 25c: 83 fe 01                      cmpl    $0x1, %esi
// 25f: 74 1b                         je      0x27c <_JIT_ENTRY+0x27c>
// 261: 83 fe 02                      cmpl    $0x2, %esi
// 264: 75 65                         jne     0x2cb <_JIT_ENTRY+0x2cb>
// 266: 48 8d 78 40                   leaq    0x40(%rax), %rdi
// 26a: eb 1a                         jmp     0x286 <_JIT_ENTRY+0x286>
// 26c: 83 fe 04                      cmpl    $0x4, %esi
// 26f: 74 11                         je      0x282 <_JIT_ENTRY+0x282>
// 271: 83 fe 08                      cmpl    $0x8, %esi
// 274: 75 55                         jne     0x2cb <_JIT_ENTRY+0x2cb>
// 276: 48 8d 78 48                   leaq    0x48(%rax), %rdi
// 27a: eb 0a                         jmp     0x286 <_JIT_ENTRY+0x286>
// 27c: 48 8d 78 38                   leaq    0x38(%rax), %rdi
// 280: eb 04                         jmp     0x286 <_JIT_ENTRY+0x286>
// 282: 48 8d 78 70                   leaq    0x70(%rax), %rdi
// 286: 49 8d 34 d6                   leaq    (%r14,%rdx,8), %rsi
// 28a: 48 83 c6 f8                   addq    $-0x8, %rsi
// 28e: 48 89 0f                      movq    %rcx, (%rdi)
// 291: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000293:  R_X86_64_64  _JIT_OPARG
// 29b: f7 d1                         notl    %ecx
// 29d: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 2a3: 48 63 c9                      movslq  %ecx, %rcx
// 2a6: 49 89 44 ce f0                movq    %rax, -0x10(%r14,%rcx,8)
// 2ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ad:  R_X86_64_64  _JIT_CONTINUE
// 2b5: 48 89 df                      movq    %rbx, %rdi
// 2b8: 4c 89 fa                      movq    %r15, %rdx
// 2bb: 48 83 c4 28                   addq    $0x28, %rsp
// 2bf: 5b                            popq    %rbx
// 2c0: 41 5c                         popq    %r12
// 2c2: 41 5d                         popq    %r13
// 2c4: 41 5e                         popq    %r14
// 2c6: 41 5f                         popq    %r15
// 2c8: 5d                            popq    %rbp
// 2c9: ff e0                         jmpq    *%rax
// 2cb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002cd:  R_X86_64_64  .rodata.str1.1+0x39
// 2d5: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002d7:  R_X86_64_64  .rodata.str1.1+0x44
// 2df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e1:  R_X86_64_64  _Py_FatalErrorFunc
// 2e9: ff d0                         callq   *%rax
// 2eb: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_SET_FUNCTION_ATTRIBUTE_code_body[748] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd6, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xde, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xce, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc6, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x70, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xb3, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x74, 0x31, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xb7, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xa0, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xfa, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xdb, 0xeb, 0x14, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0x27, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0x89, 0xf0, 0xf7, 0xd0, 0x48, 0x63, 0xd0, 0x49, 0x8b, 0x4c, 0xd6, 0xf0, 0x49, 0x8b, 0x44, 0xd6, 0xf8, 0x83, 0xfe, 0x03, 0x7f, 0x10, 0x83, 0xfe, 0x01, 0x74, 0x1b, 0x83, 0xfe, 0x02, 0x75, 0x65, 0x48, 0x8d, 0x78, 0x40, 0xeb, 0x1a, 0x83, 0xfe, 0x04, 0x74, 0x11, 0x83, 0xfe, 0x08, 0x75, 0x55, 0x48, 0x8d, 0x78, 0x48, 0xeb, 0x0a, 0x48, 0x8d, 0x78, 0x38, 0xeb, 0x04, 0x48, 0x8d, 0x78, 0x70, 0x49, 0x8d, 0x34, 0xd6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0x89, 0x0f, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x44, 0xce, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_SET_FUNCTION_ATTRIBUTE_code_holes[20] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x293, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2ad, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2cd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2d7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x44},
    {0x2e1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FatalErrorFunc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_JIT_ENTRY\x00We've reached an unreachable state. Anything is possible.\nThe limits were in our heads all along. Follow your dreams.\nhttps://xkcd.com/2200\x00"
// d0: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_SET_FUNCTION_ATTRIBUTE_data_body[209] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x00, 0x57, 0x65, 0x27, 0x76, 0x65, 0x20, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x20, 0x41, 0x6e, 0x79, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x73, 0x20, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x2e, 0x0a, 0x54, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x20, 0x77, 0x65, 0x72, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x6f, 0x75, 0x72, 0x20, 0x68, 0x65, 0x61, 0x64, 0x73, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x61, 0x6c, 0x6f, 0x6e, 0x67, 0x2e, 0x20, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x64, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x78, 0x6b, 0x63, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x32, 0x32, 0x30, 0x30, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_SET_FUNCTION_ATTRIBUTE_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_SET_IP
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_SET_IP.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 cf                   movq    (%r15,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d7                   movq    (%r15,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4f 8d 04 c7                   leaq    (%r15,%r8,8), %r8
// 79: 49 8b 38                      movq    (%r8), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 49 29 df                      subq    %rbx, %r15
// 8a: 49 83 c7 b8                   addq    $-0x48, %r15
// 8e: 49 c1 ef 03                   shrq    $0x3, %r15
// 92: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 96: 48 8b 03                      movq    (%rbx), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c3: 4c 89 0c 24                   movq    %r9, (%rsp)
// c7: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cc: 48 85 c0                      testq   %rax, %rax
// cf: 40 0f 94 c5                   sete    %bpl
// d3: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// d7: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// dc: 49 8d 70 08                   leaq    0x8(%r8), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 b1 00 00 00             je      0x1b5 <_JIT_ENTRY+0x1b5>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// 136: 78 21                         js      0x159 <_JIT_ENTRY+0x159>
// 138: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 142: ff d0                         callq   *%rax
// 144: 49 ff 0c 24                   decq    (%r12)
// 148: 75 0f                         jne     0x159 <_JIT_ENTRY+0x159>
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_Dealloc
// 154: 4c 89 e7                      movq    %r12, %rdi
// 157: ff d0                         callq   *%rax
// 159: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 15e: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 162: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 167: 48 85 d2                      testq   %rdx, %rdx
// 16a: 74 34                         je      0x1a0 <_JIT_ENTRY+0x1a0>
// 16c: 48 8b 0c 24                   movq    (%rsp), %rcx
// 170: 4d 8d 3c cf                   leaq    (%r15,%rcx,8), %r15
// 174: 48 89 10                      movq    %rdx, (%rax)
// 177: 49 8b 46 10                   movq    0x10(%r14), %rax
// 17b: 48 8b 00                      movq    (%rax), %rax
// 17e: 84 c0                         testb   %al, %al
// 180: 0f 84 c3 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 186: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000188:  R_X86_64_64  _Py_HandlePending
// 190: 4c 89 f7                      movq    %r14, %rdi
// 193: ff d0                         callq   *%rax
// 195: 85 c0                         testl   %eax, %eax
// 197: 0f 84 ac 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 19d: 4c 89 f8                      movq    %r15, %rax
// 1a0: 48 29 d8                      subq    %rbx, %rax
// 1a3: 48 83 c0 b8                   addq    $-0x48, %rax
// 1a7: 48 c1 e8 03                   shrq    $0x3, %rax
// 1ab: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1ae: 31 c0                         xorl    %eax, %eax
// 1b0: e9 fa fe ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 1b5: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1b9: 41 be 01 00 00 00             movl    $0x1, %r14d
// 1bf: 45 0f 43 f5                   cmovael %r13d, %r14d
// 1c3: 31 ed                         xorl    %ebp, %ebp
// 1c5: eb 15                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c7: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 1d0: 48 ff c5                      incq    %rbp
// 1d3: 49 39 ee                      cmpq    %rbp, %r14
// 1d6: 0f 84 28 ff ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 1dc: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 1e1: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 1e5: 49 8b 45 00                   movq    (%r13), %rax
// 1e9: 48 85 c0                      testq   %rax, %rax
// 1ec: 7e 12                         jle     0x200 <_JIT_ENTRY+0x200>
// 1ee: 85 c0                         testl   %eax, %eax
// 1f0: 78 de                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1f2: eb 32                         jmp     0x226 <_JIT_ENTRY+0x226>
// 1f4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 200: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1
// 20a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 20f: 4c 89 ea                      movq    %r13, %rdx
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: ff d0                         callq   *%rax
// 21e: 49 8b 45 00                   movq    (%r13), %rax
// 222: 85 c0                         testl   %eax, %eax
// 224: 78 aa                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 230: ff d0                         callq   *%rax
// 232: 49 ff 4d 00                   decq    (%r13)
// 236: 75 98                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: ff d0                         callq   *%rax
// 247: eb 87                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 249: 48 8b 03                      movq    (%rbx), %rax
// 24c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000024e:  R_X86_64_64  _JIT_OPARG
// 256: 0f b7 c9                      movzwl  %cx, %ecx
// 259: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 25d: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 263: 48 89 43 38                   movq    %rax, 0x38(%rbx)
// 267: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000269:  R_X86_64_64  _JIT_CONTINUE
// 271: 48 89 df                      movq    %rbx, %rdi
// 274: 4c 89 fe                      movq    %r15, %rsi
// 277: 4c 89 f2                      movq    %r14, %rdx
// 27a: 48 83 c4 28                   addq    $0x28, %rsp
// 27e: 5b                            popq    %rbx
// 27f: 41 5c                         popq    %r12
// 281: 41 5d                         popq    %r13
// 283: 41 5e                         popq    %r14
// 285: 41 5f                         popq    %r15
// 287: 5d                            popq    %rbp
// 288: ff e0                         jmpq    *%rax
// 28a: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_SET_IP_code_body[651] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xcf, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4f, 0x8d, 0x04, 0xc7, 0x49, 0x8b, 0x38, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x70, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xb1, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x74, 0x34, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x3c, 0xcf, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xac, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xfa, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xed, 0xeb, 0x15, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xee, 0x0f, 0x84, 0x28, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x89, 0x43, 0x38, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_SET_IP_code_holes[16] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x269, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_SET_IP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_SET_IP_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_SET_UPDATE
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_SET_UPDATE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d7                   movq    (%r15,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 df                   movq    (%r15,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c cf                   leaq    (%r15,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 c7                      subq    %r8, %r15
// 8b: 49 83 c7 b8                   addq    $-0x48, %r15
// 8f: 49 c1 ef 03                   shrq    $0x3, %r15
// 93: 45 89 78 40                   movl    %r15d, 0x40(%r8)
// 97: 49 8b 00                      movq    (%r8), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 5c 24 20                movq    %r11, 0x20(%rsp)
// c4: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c9: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// ce: 4c 89 04 24                   movq    %r8, (%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 a7 00 00 00             je      0x1aa <_JIT_ENTRY+0x1aa>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 135: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// 13a: 78 21                         js      0x15d <_JIT_ENTRY+0x15d>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 146: ff d0                         callq   *%rax
// 148: 49 ff 0c 24                   decq    (%r12)
// 14c: 75 0f                         jne     0x15d <_JIT_ENTRY+0x15d>
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _Py_Dealloc
// 158: 4c 89 e7                      movq    %r12, %rdi
// 15b: ff d0                         callq   *%rax
// 15d: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 162: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 166: 4d 85 ed                      testq   %r13, %r13
// 169: 0f 84 76 01 00 00             je      0x2e5 <_JIT_ENTRY+0x2e5>
// 16f: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 174: 4d 8d 34 c7                   leaq    (%r15,%rax,8), %r14
// 178: 4d 89 2c 24                   movq    %r13, (%r12)
// 17c: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 180: 48 8b 00                      movq    (%rax), %rax
// 183: 84 c0                         testb   %al, %al
// 185: 0f 84 9e 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_HandlePending
// 195: 48 89 df                      movq    %rbx, %rdi
// 198: ff d0                         callq   *%rax
// 19a: 85 c0                         testl   %eax, %eax
// 19c: 0f 84 87 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 1a2: 4d 89 f4                      movq    %r14, %r12
// 1a5: e9 3b 01 00 00                jmp     0x2e5 <_JIT_ENTRY+0x2e5>
// 1aa: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1ae: 41 be 01 00 00 00             movl    $0x1, %r14d
// 1b4: 45 0f 43 f5                   cmovael %r13d, %r14d
// 1b8: 31 db                         xorl    %ebx, %ebx
// 1ba: eb 10                         jmp     0x1cc <_JIT_ENTRY+0x1cc>
// 1bc: 0f 1f 40 00                   nopl    (%rax)
// 1c0: 48 ff c3                      incq    %rbx
// 1c3: 49 39 de                      cmpq    %rbx, %r14
// 1c6: 0f 84 37 ff ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 1cc: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1d1: 49 8b 45 00                   movq    (%r13), %rax
// 1d5: 48 85 c0                      testq   %rax, %rax
// 1d8: 7e 06                         jle     0x1e0 <_JIT_ENTRY+0x1e0>
// 1da: 85 c0                         testl   %eax, %eax
// 1dc: 78 e2                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 1de: eb 26                         jmp     0x206 <_JIT_ENTRY+0x206>
// 1e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e2:  R_X86_64_64  .rodata.str1.1
// 1ea: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ef: 4c 89 ea                      movq    %r13, %rdx
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _Py_NegativeRefcount
// 1fc: ff d0                         callq   *%rax
// 1fe: 49 8b 45 00                   movq    (%r13), %rax
// 202: 85 c0                         testl   %eax, %eax
// 204: 78 ba                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 210: ff d0                         callq   *%rax
// 212: 49 ff 4d 00                   decq    (%r13)
// 216: 75 a8                         jne     0x1c0 <_JIT_ENTRY+0x1c0>
// 218: 4c 89 ef                      movq    %r13, %rdi
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_Dealloc
// 225: ff d0                         callq   *%rax
// 227: eb 97                         jmp     0x1c0 <_JIT_ENTRY+0x1c0>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _JIT_OPARG
// 233: f7 d0                         notl    %eax
// 235: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 23a: 48 63 d8                      movslq  %eax, %rbx
// 23d: 4d 8b 6c df f8                movq    -0x8(%r15,%rbx,8), %r13
// 242: 48 8d 04 1b                   leaq    (%rbx,%rbx), %rax
// 246: 49 8b 3c c7                   movq    (%r15,%rax,8), %rdi
// 24a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024c:  R_X86_64_64  _PySet_Update
// 254: 4c 89 ee                      movq    %r13, %rsi
// 257: ff d0                         callq   *%rax
// 259: 89 c5                         movl    %eax, %ebp
// 25b: 49 8b 45 00                   movq    (%r13), %rax
// 25f: 48 85 c0                      testq   %rax, %rax
// 262: 7f 22                         jg      0x286 <_JIT_ENTRY+0x286>
// 264: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000266:  R_X86_64_64  .rodata.str1.1
// 26e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000270:  R_X86_64_64  _Py_NegativeRefcount
// 278: be 53 05 00 00                movl    $0x553, %esi            # imm = 0x553
// 27d: 4c 89 ea                      movq    %r13, %rdx
// 280: ff d0                         callq   *%rax
// 282: 49 8b 45 00                   movq    (%r13), %rax
// 286: 4d 8d 24 df                   leaq    (%r15,%rbx,8), %r12
// 28a: 49 83 c4 f8                   addq    $-0x8, %r12
// 28e: 85 c0                         testl   %eax, %eax
// 290: 78 21                         js      0x2b3 <_JIT_ENTRY+0x2b3>
// 292: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000294:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 29c: ff d0                         callq   *%rax
// 29e: 49 ff 4d 00                   decq    (%r13)
// 2a2: 75 0f                         jne     0x2b3 <_JIT_ENTRY+0x2b3>
// 2a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a6:  R_X86_64_64  _Py_Dealloc
// 2ae: 4c 89 ef                      movq    %r13, %rdi
// 2b1: ff d0                         callq   *%rax
// 2b3: 85 ed                         testl   %ebp, %ebp
// 2b5: 4d 0f 48 e6                   cmovsq  %r14, %r12
// 2b9: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2be: 78 21                         js      0x2e1 <_JIT_ENTRY+0x2e1>
// 2c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c2:  R_X86_64_64  _JIT_CONTINUE
// 2ca: 48 8b 3c 24                   movq    (%rsp), %rdi
// 2ce: 4c 89 e6                      movq    %r12, %rsi
// 2d1: 48 83 c4 28                   addq    $0x28, %rsp
// 2d5: 5b                            popq    %rbx
// 2d6: 41 5c                         popq    %r12
// 2d8: 41 5d                         popq    %r13
// 2da: 41 5e                         popq    %r14
// 2dc: 41 5f                         popq    %r15
// 2de: 5d                            popq    %rbp
// 2df: ff e0                         jmpq    *%rax
// 2e1: 49 83 c4 f8                   addq    $-0x8, %r12
// 2e5: 48 8b 04 24                   movq    (%rsp), %rax
// 2e9: 49 29 c4                      subq    %rax, %r12
// 2ec: 49 83 c4 b8                   addq    $-0x48, %r12
// 2f0: 49 c1 ec 03                   shrq    $0x3, %r12
// 2f4: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 2f8: 31 c0                         xorl    %eax, %eax
// 2fa: e9 b1 fd ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 2ff: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_SET_UPDATE_code_body[768] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd7, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xdf, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xcf, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x78, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x20, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xa7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4d, 0x8d, 0x24, 0xc7, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x76, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x4d, 0x8d, 0x34, 0xc7, 0x4d, 0x89, 0x2c, 0x24, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0x9e, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x87, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xf4, 0xe9, 0x3b, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xdb, 0xeb, 0x10, 0x0f, 0x1f, 0x40, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x37, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xd8, 0x4d, 0x8b, 0x6c, 0xdf, 0xf8, 0x48, 0x8d, 0x04, 0x1b, 0x49, 0x8b, 0x3c, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x53, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x4d, 0x8d, 0x24, 0xdf, 0x49, 0x83, 0xc4, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x48, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xe6, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x83, 0xc4, 0xf8, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0xe9, 0xb1, 0xfd, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_SET_UPDATE_code_holes[21] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x24c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySet_Update, 0x0},
    {0x266, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x270, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x294, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2a6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2c2, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_SET_UPDATE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_SET_UPDATE_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_STORE_ATTR
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_STORE_ATTR.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d7                   movq    (%r15,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 df                   movq    (%r15,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c cf                   leaq    (%r15,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 c7                      subq    %r8, %r15
// 8b: 49 83 c7 b8                   addq    $-0x48, %r15
// 8f: 49 c1 ef 03                   shrq    $0x3, %r15
// 93: 45 89 78 40                   movl    %r15d, 0x40(%r8)
// 97: 49 8b 00                      movq    (%r8), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 1c 24                   movq    %r11, (%rsp)
// c3: 4c 89 54 24 18                movq    %r10, 0x18(%rsp)
// c8: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// cd: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 aa 00 00 00             je      0x1ad <_JIT_ENTRY+0x1ad>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 135: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 13a: 4c 8b 6c 24 20                movq    0x20(%rsp), %r13
// 13f: 78 21                         js      0x162 <_JIT_ENTRY+0x162>
// 141: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000143:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 14b: ff d0                         callq   *%rax
// 14d: 49 ff 0c 24                   decq    (%r12)
// 151: 75 0f                         jne     0x162 <_JIT_ENTRY+0x162>
// 153: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000155:  R_X86_64_64  _Py_Dealloc
// 15d: 4c 89 e7                      movq    %r12, %rdi
// 160: ff d0                         callq   *%rax
// 162: 48 8b 04 24                   movq    (%rsp), %rax
// 166: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 16a: 4d 85 ed                      testq   %r13, %r13
// 16d: 0f 84 bb 01 00 00             je      0x32e <_JIT_ENTRY+0x32e>
// 173: 48 8b 4c 24 18                movq    0x18(%rsp), %rcx
// 178: 4d 8d 24 cf                   leaq    (%r15,%rcx,8), %r12
// 17c: 4c 89 28                      movq    %r13, (%rax)
// 17f: 49 8b 46 10                   movq    0x10(%r14), %rax
// 183: 48 8b 00                      movq    (%rax), %rax
// 186: 84 c0                         testb   %al, %al
// 188: 0f 84 9b 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_HandlePending
// 198: 4c 89 f7                      movq    %r14, %rdi
// 19b: ff d0                         callq   *%rax
// 19d: 85 c0                         testl   %eax, %eax
// 19f: 0f 84 84 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 1a5: 4c 89 e0                      movq    %r12, %rax
// 1a8: e9 81 01 00 00                jmp     0x32e <_JIT_ENTRY+0x32e>
// 1ad: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1b1: bb 01 00 00 00                movl    $0x1, %ebx
// 1b6: 41 0f 43 dd                   cmovael %r13d, %ebx
// 1ba: 45 31 f6                      xorl    %r14d, %r14d
// 1bd: eb 0d                         jmp     0x1cc <_JIT_ENTRY+0x1cc>
// 1bf: 90                            nop
// 1c0: 49 ff c6                      incq    %r14
// 1c3: 4c 39 f3                      cmpq    %r14, %rbx
// 1c6: 0f 84 37 ff ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 1cc: 4e 8b 6c f5 00                movq    (%rbp,%r14,8), %r13
// 1d1: 49 8b 45 00                   movq    (%r13), %rax
// 1d5: 48 85 c0                      testq   %rax, %rax
// 1d8: 7e 06                         jle     0x1e0 <_JIT_ENTRY+0x1e0>
// 1da: 85 c0                         testl   %eax, %eax
// 1dc: 78 e2                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 1de: eb 26                         jmp     0x206 <_JIT_ENTRY+0x206>
// 1e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e2:  R_X86_64_64  .rodata.str1.1
// 1ea: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ef: 4c 89 ea                      movq    %r13, %rdx
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _Py_NegativeRefcount
// 1fc: ff d0                         callq   *%rax
// 1fe: 49 8b 45 00                   movq    (%r13), %rax
// 202: 85 c0                         testl   %eax, %eax
// 204: 78 ba                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 210: ff d0                         callq   *%rax
// 212: 49 ff 4d 00                   decq    (%r13)
// 216: 75 a8                         jne     0x1c0 <_JIT_ENTRY+0x1c0>
// 218: 4c 89 ef                      movq    %r13, %rdi
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_Dealloc
// 225: ff d0                         callq   *%rax
// 227: eb 97                         jmp     0x1c0 <_JIT_ENTRY+0x1c0>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _JIT_OPARG
// 233: 0f b7 c8                      movzwl  %ax, %ecx
// 236: f7 d0                         notl    %eax
// 238: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 23d: 4c 63 f0                      movslq  %eax, %r14
// 240: 4b 8b 6c f7 f0                movq    -0x10(%r15,%r14,8), %rbp
// 245: 4f 8b 6c f7 f8                movq    -0x8(%r15,%r14,8), %r13
// 24a: 48 8b 03                      movq    (%rbx), %rax
// 24d: 48 8b 40 20                   movq    0x20(%rax), %rax
// 251: 48 8b 74 c8 18                movq    0x18(%rax,%rcx,8), %rsi
// 256: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000258:  R_X86_64_64  PyObject_SetAttr
// 260: 4c 89 ef                      movq    %r13, %rdi
// 263: 48 89 ea                      movq    %rbp, %rdx
// 266: ff d0                         callq   *%rax
// 268: 89 04 24                      movl    %eax, (%rsp)
// 26b: 48 8b 45 00                   movq    (%rbp), %rax
// 26f: 48 85 c0                      testq   %rax, %rax
// 272: 7f 22                         jg      0x296 <_JIT_ENTRY+0x296>
// 274: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000276:  R_X86_64_64  .rodata.str1.1
// 27e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000280:  R_X86_64_64  _Py_NegativeRefcount
// 288: be c5 03 00 00                movl    $0x3c5, %esi            # imm = 0x3C5
// 28d: 48 89 ea                      movq    %rbp, %rdx
// 290: ff d0                         callq   *%rax
// 292: 48 8b 45 00                   movq    (%rbp), %rax
// 296: 85 c0                         testl   %eax, %eax
// 298: 78 21                         js      0x2bb <_JIT_ENTRY+0x2bb>
// 29a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a4: ff d0                         callq   *%rax
// 2a6: 48 ff 4d 00                   decq    (%rbp)
// 2aa: 75 0f                         jne     0x2bb <_JIT_ENTRY+0x2bb>
// 2ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ae:  R_X86_64_64  _Py_Dealloc
// 2b6: 48 89 ef                      movq    %rbp, %rdi
// 2b9: ff d0                         callq   *%rax
// 2bb: 49 8b 45 00                   movq    (%r13), %rax
// 2bf: 48 85 c0                      testq   %rax, %rax
// 2c2: 7f 22                         jg      0x2e6 <_JIT_ENTRY+0x2e6>
// 2c4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002c6:  R_X86_64_64  .rodata.str1.1
// 2ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d0:  R_X86_64_64  _Py_NegativeRefcount
// 2d8: be c6 03 00 00                movl    $0x3c6, %esi            # imm = 0x3C6
// 2dd: 4c 89 ea                      movq    %r13, %rdx
// 2e0: ff d0                         callq   *%rax
// 2e2: 49 8b 45 00                   movq    (%r13), %rax
// 2e6: 4b 8d 1c f7                   leaq    (%r15,%r14,8), %rbx
// 2ea: 48 83 c3 f0                   addq    $-0x10, %rbx
// 2ee: 85 c0                         testl   %eax, %eax
// 2f0: 78 21                         js      0x313 <_JIT_ENTRY+0x313>
// 2f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2fc: ff d0                         callq   *%rax
// 2fe: 49 ff 4d 00                   decq    (%r13)
// 302: 75 0f                         jne     0x313 <_JIT_ENTRY+0x313>
// 304: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000306:  R_X86_64_64  _Py_Dealloc
// 30e: 4c 89 ef                      movq    %r13, %rdi
// 311: ff d0                         callq   *%rax
// 313: 83 3c 24 00                   cmpl    $0x0, (%rsp)
// 317: 4c 0f 44 e3                   cmoveq  %rbx, %r12
// 31b: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 320: 74 21                         je      0x343 <_JIT_ENTRY+0x343>
// 322: 49 83 c4 f0                   addq    $-0x10, %r12
// 326: 4c 89 e0                      movq    %r12, %rax
// 329: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 32e: 48 29 d8                      subq    %rbx, %rax
// 331: 48 83 c0 b8                   addq    $-0x48, %rax
// 335: 48 c1 e8 03                   shrq    $0x3, %rax
// 339: 89 43 40                      movl    %eax, 0x40(%rbx)
// 33c: 31 c0                         xorl    %eax, %eax
// 33e: e9 6d fd ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 343: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000345:  R_X86_64_64  _JIT_CONTINUE
// 34d: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 352: 4c 89 e6                      movq    %r12, %rsi
// 355: 48 83 c4 28                   addq    $0x28, %rsp
// 359: 5b                            popq    %rbx
// 35a: 41 5c                         popq    %r12
// 35c: 41 5d                         popq    %r13
// 35e: 41 5e                         popq    %r14
// 360: 41 5f                         popq    %r15
// 362: 5d                            popq    %rbp
// 363: ff e0                         jmpq    *%rax
// 365: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_STORE_ATTR_code_body[870] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd7, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xdf, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xcf, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x78, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x1c, 0x24, 0x4c, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xaa, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x4c, 0x8b, 0x6c, 0x24, 0x20, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xc7, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xbb, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x18, 0x4d, 0x8d, 0x24, 0xcf, 0x4c, 0x89, 0x28, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0x9b, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x84, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0xe9, 0x81, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xdd, 0x45, 0x31, 0xf6, 0xeb, 0x0d, 0x90, 0x49, 0xff, 0xc6, 0x4c, 0x39, 0xf3, 0x0f, 0x84, 0x37, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xf5, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xf0, 0x4b, 0x8b, 0x6c, 0xf7, 0xf0, 0x4f, 0x8b, 0x6c, 0xf7, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0x8b, 0x74, 0xc8, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc5, 0x03, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc6, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x4b, 0x8d, 0x1c, 0xf7, 0x48, 0x83, 0xc3, 0xf0, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x83, 0x3c, 0x24, 0x00, 0x4c, 0x0f, 0x44, 0xe3, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x74, 0x21, 0x49, 0x83, 0xc4, 0xf0, 0x4c, 0x89, 0xe0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x6d, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_STORE_ATTR_code_holes[25] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x143, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x155, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x258, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetAttr, 0x0},
    {0x276, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x280, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x29c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2c6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x306, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x345, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_STORE_ATTR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_STORE_ATTR_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_STORE_ATTR_INSTANCE_VALUE
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_STORE_ATTR_INSTANCE_VALUE.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d7                   movq    (%r15,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 df                   movq    (%r15,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c cf                   leaq    (%r15,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 c7                      subq    %r8, %r15
// 8b: 49 83 c7 b8                   addq    $-0x48, %r15
// 8f: 49 c1 ef 03                   shrq    $0x3, %r15
// 93: 45 89 78 40                   movl    %r15d, 0x40(%r8)
// 97: 49 8b 00                      movq    (%r8), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 5c 24 18                movq    %r11, 0x18(%rsp)
// c4: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// c9: 48 89 14 24                   movq    %rdx, (%rsp)
// cd: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 b3 00 00 00             je      0x1b6 <_JIT_ENTRY+0x1b6>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 135: 4c 8b 34 24                   movq    (%rsp), %r14
// 139: 78 21                         js      0x15c <_JIT_ENTRY+0x15c>
// 13b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 145: ff d0                         callq   *%rax
// 147: 49 ff 0c 24                   decq    (%r12)
// 14b: 75 0f                         jne     0x15c <_JIT_ENTRY+0x15c>
// 14d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014f:  R_X86_64_64  _Py_Dealloc
// 157: 4c 89 e7                      movq    %r12, %rdi
// 15a: ff d0                         callq   *%rax
// 15c: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 161: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 165: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 16a: 48 85 c9                      testq   %rcx, %rcx
// 16d: 74 32                         je      0x1a1 <_JIT_ENTRY+0x1a1>
// 16f: 48 89 08                      movq    %rcx, (%rax)
// 172: 49 8b 46 10                   movq    0x10(%r14), %rax
// 176: 48 8b 00                      movq    (%rax), %rax
// 179: 84 c0                         testb   %al, %al
// 17b: 0f 84 b8 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  _Py_HandlePending
// 18b: 4c 89 f7                      movq    %r14, %rdi
// 18e: ff d0                         callq   *%rax
// 190: 85 c0                         testl   %eax, %eax
// 192: 0f 84 a1 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 198: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 19d: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 1a1: 48 29 d8                      subq    %rbx, %rax
// 1a4: 48 83 c0 b8                   addq    $-0x48, %rax
// 1a8: 48 c1 e8 03                   shrq    $0x3, %rax
// 1ac: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1af: 31 c0                         xorl    %eax, %eax
// 1b1: e9 fa fe ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 1b6: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1ba: bb 01 00 00 00                movl    $0x1, %ebx
// 1bf: 41 0f 43 dd                   cmovael %r13d, %ebx
// 1c3: 45 31 f6                      xorl    %r14d, %r14d
// 1c6: eb 14                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c8: 0f 1f 84 00 00 00 00 00       nopl    (%rax,%rax)
// 1d0: 49 ff c6                      incq    %r14
// 1d3: 4c 39 f3                      cmpq    %r14, %rbx
// 1d6: 0f 84 27 ff ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 1dc: 4e 8b 6c f5 00                movq    (%rbp,%r14,8), %r13
// 1e1: 49 8b 45 00                   movq    (%r13), %rax
// 1e5: 48 85 c0                      testq   %rax, %rax
// 1e8: 7e 06                         jle     0x1f0 <_JIT_ENTRY+0x1f0>
// 1ea: 85 c0                         testl   %eax, %eax
// 1ec: 78 e2                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1ee: eb 26                         jmp     0x216 <_JIT_ENTRY+0x216>
// 1f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f2:  R_X86_64_64  .rodata.str1.1
// 1fa: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ff: 4c 89 ea                      movq    %r13, %rdx
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_NegativeRefcount
// 20c: ff d0                         callq   *%rax
// 20e: 49 8b 45 00                   movq    (%r13), %rax
// 212: 85 c0                         testl   %eax, %eax
// 214: 78 ba                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 220: ff d0                         callq   *%rax
// 222: 49 ff 4d 00                   decq    (%r13)
// 226: 75 a8                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 228: 4c 89 ef                      movq    %r13, %rdi
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_Dealloc
// 235: ff d0                         callq   *%rax
// 237: eb 97                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _JIT_OPARG
// 243: f7 d0                         notl    %eax
// 245: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 24a: 4c 63 f0                      movslq  %eax, %r14
// 24d: 4b 8b 4c f7 f0                movq    -0x10(%r15,%r14,8), %rcx
// 252: 4f 8b 64 f7 f8                movq    -0x8(%r15,%r14,8), %r12
// 257: 49 8b 44 24 e8                movq    -0x18(%r12), %rax
// 25c: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000025e:  R_X86_64_64  _JIT_OPERAND
// 266: 0f b7 d2                      movzwl  %dx, %edx
// 269: 4c 8b 6c d0 01                movq    0x1(%rax,%rdx,8), %r13
// 26e: 48 89 4c d0 01                movq    %rcx, 0x1(%rax,%rdx,8)
// 273: 4d 85 ed                      testq   %r13, %r13
// 276: 74 52                         je      0x2ca <_JIT_ENTRY+0x2ca>
// 278: 49 8b 45 00                   movq    (%r13), %rax
// 27c: 48 85 c0                      testq   %rax, %rax
// 27f: 7f 22                         jg      0x2a3 <_JIT_ENTRY+0x2a3>
// 281: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000283:  R_X86_64_64  .rodata.str1.1
// 28b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028d:  R_X86_64_64  _Py_NegativeRefcount
// 295: be 16 07 00 00                movl    $0x716, %esi            # imm = 0x716
// 29a: 4c 89 ea                      movq    %r13, %rdx
// 29d: ff d0                         callq   *%rax
// 29f: 49 8b 45 00                   movq    (%r13), %rax
// 2a3: 85 c0                         testl   %eax, %eax
// 2a5: 78 3f                         js      0x2e6 <_JIT_ENTRY+0x2e6>
// 2a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2b1: ff d0                         callq   *%rax
// 2b3: 49 ff 4d 00                   decq    (%r13)
// 2b7: 75 2d                         jne     0x2e6 <_JIT_ENTRY+0x2e6>
// 2b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bb:  R_X86_64_64  _Py_Dealloc
// 2c3: 4c 89 ef                      movq    %r13, %rdi
// 2c6: ff d0                         callq   *%rax
// 2c8: eb 1c                         jmp     0x2e6 <_JIT_ENTRY+0x2e6>
// 2ca: 0f b6 48 ff                   movzbl  -0x1(%rax), %ecx
// 2ce: 8d 51 01                      leal    0x1(%rcx), %edx
// 2d1: 48 f7 d1                      notq    %rcx
// 2d4: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002d6:  R_X86_64_64  _JIT_OPERAND
// 2de: 40 88 74 08 ff                movb    %sil, -0x1(%rax,%rcx)
// 2e3: 88 50 ff                      movb    %dl, -0x1(%rax)
// 2e6: 49 8b 04 24                   movq    (%r12), %rax
// 2ea: 48 85 c0                      testq   %rax, %rax
// 2ed: 7f 22                         jg      0x311 <_JIT_ENTRY+0x311>
// 2ef: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002f1:  R_X86_64_64  .rodata.str1.1
// 2f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fb:  R_X86_64_64  _Py_NegativeRefcount
// 303: be 18 07 00 00                movl    $0x718, %esi            # imm = 0x718
// 308: 4c 89 e2                      movq    %r12, %rdx
// 30b: ff d0                         callq   *%rax
// 30d: 49 8b 04 24                   movq    (%r12), %rax
// 311: 4f 8d 3c f7                   leaq    (%r15,%r14,8), %r15
// 315: 49 83 c7 f0                   addq    $-0x10, %r15
// 319: 85 c0                         testl   %eax, %eax
// 31b: 78 21                         js      0x33e <_JIT_ENTRY+0x33e>
// 31d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 327: ff d0                         callq   *%rax
// 329: 49 ff 0c 24                   decq    (%r12)
// 32d: 75 0f                         jne     0x33e <_JIT_ENTRY+0x33e>
// 32f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000331:  R_X86_64_64  _Py_Dealloc
// 339: 4c 89 e7                      movq    %r12, %rdi
// 33c: ff d0                         callq   *%rax
// 33e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000340:  R_X86_64_64  _JIT_CONTINUE
// 348: 48 89 df                      movq    %rbx, %rdi
// 34b: 4c 89 fe                      movq    %r15, %rsi
// 34e: 48 8b 14 24                   movq    (%rsp), %rdx
// 352: 48 83 c4 28                   addq    $0x28, %rsp
// 356: 5b                            popq    %rbx
// 357: 41 5c                         popq    %r12
// 359: 41 5d                         popq    %r13
// 35b: 41 5e                         popq    %r14
// 35d: 41 5f                         popq    %r15
// 35f: 5d                            popq    %rbp
// 360: ff e0                         jmpq    *%rax
// 362: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_STORE_ATTR_INSTANCE_VALUE_code_body[867] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd7, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xdf, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xcf, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x78, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x18, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x14, 0x24, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xb3, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x34, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x32, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xb8, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xa1, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xfa, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xdd, 0x45, 0x31, 0xf6, 0xeb, 0x14, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc6, 0x4c, 0x39, 0xf3, 0x0f, 0x84, 0x27, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xf5, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xf0, 0x4b, 0x8b, 0x4c, 0xf7, 0xf0, 0x4f, 0x8b, 0x64, 0xf7, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0xe8, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x4c, 0x8b, 0x6c, 0xd0, 0x01, 0x48, 0x89, 0x4c, 0xd0, 0x01, 0x4d, 0x85, 0xed, 0x74, 0x52, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x16, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x2d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0xeb, 0x1c, 0x0f, 0xb6, 0x48, 0xff, 0x8d, 0x51, 0x01, 0x48, 0xf7, 0xd1, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x88, 0x74, 0x08, 0xff, 0x88, 0x50, 0xff, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x18, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4f, 0x8d, 0x3c, 0xf7, 0x49, 0x83, 0xc7, 0xf0, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_STORE_ATTR_INSTANCE_VALUE_code_holes[26] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x25e, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x283, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x28d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2a9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2d6, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x2f1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x31f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x331, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x340, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_STORE_ATTR_INSTANCE_VALUE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_STORE_ATTR_INSTANCE_VALUE_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_STORE_ATTR_SLOT
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_STORE_ATTR_SLOT.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d7                   movq    (%r15,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 df                   movq    (%r15,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c cf                   leaq    (%r15,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 c7                      subq    %r8, %r15
// 8b: 49 83 c7 b8                   addq    $-0x48, %r15
// 8f: 49 c1 ef 03                   shrq    $0x3, %r15
// 93: 45 89 78 40                   movl    %r15d, 0x40(%r8)
// 97: 49 8b 00                      movq    (%r8), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 5c 24 18                movq    %r11, 0x18(%rsp)
// c4: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// c9: 48 89 14 24                   movq    %rdx, (%rsp)
// cd: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 b3 00 00 00             je      0x1b6 <_JIT_ENTRY+0x1b6>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 135: 4c 8b 34 24                   movq    (%rsp), %r14
// 139: 78 21                         js      0x15c <_JIT_ENTRY+0x15c>
// 13b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 145: ff d0                         callq   *%rax
// 147: 49 ff 0c 24                   decq    (%r12)
// 14b: 75 0f                         jne     0x15c <_JIT_ENTRY+0x15c>
// 14d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014f:  R_X86_64_64  _Py_Dealloc
// 157: 4c 89 e7                      movq    %r12, %rdi
// 15a: ff d0                         callq   *%rax
// 15c: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 161: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 165: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 16a: 48 85 c9                      testq   %rcx, %rcx
// 16d: 74 32                         je      0x1a1 <_JIT_ENTRY+0x1a1>
// 16f: 48 89 08                      movq    %rcx, (%rax)
// 172: 49 8b 46 10                   movq    0x10(%r14), %rax
// 176: 48 8b 00                      movq    (%rax), %rax
// 179: 84 c0                         testb   %al, %al
// 17b: 0f 84 b8 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  _Py_HandlePending
// 18b: 4c 89 f7                      movq    %r14, %rdi
// 18e: ff d0                         callq   *%rax
// 190: 85 c0                         testl   %eax, %eax
// 192: 0f 84 a1 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 198: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 19d: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 1a1: 48 29 d8                      subq    %rbx, %rax
// 1a4: 48 83 c0 b8                   addq    $-0x48, %rax
// 1a8: 48 c1 e8 03                   shrq    $0x3, %rax
// 1ac: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1af: 31 c0                         xorl    %eax, %eax
// 1b1: e9 fa fe ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 1b6: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1ba: bb 01 00 00 00                movl    $0x1, %ebx
// 1bf: 41 0f 43 dd                   cmovael %r13d, %ebx
// 1c3: 45 31 f6                      xorl    %r14d, %r14d
// 1c6: eb 14                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c8: 0f 1f 84 00 00 00 00 00       nopl    (%rax,%rax)
// 1d0: 49 ff c6                      incq    %r14
// 1d3: 4c 39 f3                      cmpq    %r14, %rbx
// 1d6: 0f 84 27 ff ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 1dc: 4e 8b 6c f5 00                movq    (%rbp,%r14,8), %r13
// 1e1: 49 8b 45 00                   movq    (%r13), %rax
// 1e5: 48 85 c0                      testq   %rax, %rax
// 1e8: 7e 06                         jle     0x1f0 <_JIT_ENTRY+0x1f0>
// 1ea: 85 c0                         testl   %eax, %eax
// 1ec: 78 e2                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1ee: eb 26                         jmp     0x216 <_JIT_ENTRY+0x216>
// 1f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f2:  R_X86_64_64  .rodata.str1.1
// 1fa: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ff: 4c 89 ea                      movq    %r13, %rdx
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_NegativeRefcount
// 20c: ff d0                         callq   *%rax
// 20e: 49 8b 45 00                   movq    (%r13), %rax
// 212: 85 c0                         testl   %eax, %eax
// 214: 78 ba                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 220: ff d0                         callq   *%rax
// 222: 49 ff 4d 00                   decq    (%r13)
// 226: 75 a8                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 228: 4c 89 ef                      movq    %r13, %rdi
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_Dealloc
// 235: ff d0                         callq   *%rax
// 237: eb 97                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _JIT_OPARG
// 243: f7 d0                         notl    %eax
// 245: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 24a: 4c 63 f0                      movslq  %eax, %r14
// 24d: 4b 8b 44 f7 f0                movq    -0x10(%r15,%r14,8), %rax
// 252: 4f 8b 64 f7 f8                movq    -0x8(%r15,%r14,8), %r12
// 257: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000259:  R_X86_64_64  _JIT_OPERAND
// 261: 0f b7 c9                      movzwl  %cx, %ecx
// 264: 4d 8b 2c 0c                   movq    (%r12,%rcx), %r13
// 268: 49 89 04 0c                   movq    %rax, (%r12,%rcx)
// 26c: 4d 85 ed                      testq   %r13, %r13
// 26f: 74 50                         je      0x2c1 <_JIT_ENTRY+0x2c1>
// 271: 49 8b 45 00                   movq    (%r13), %rax
// 275: 48 85 c0                      testq   %rax, %rax
// 278: 7f 22                         jg      0x29c <_JIT_ENTRY+0x29c>
// 27a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000027c:  R_X86_64_64  .rodata.str1.1+0x39
// 284: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000286:  R_X86_64_64  _Py_NegativeRefcount
// 28e: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 293: 4c 89 ea                      movq    %r13, %rdx
// 296: ff d0                         callq   *%rax
// 298: 49 8b 45 00                   movq    (%r13), %rax
// 29c: 85 c0                         testl   %eax, %eax
// 29e: 78 21                         js      0x2c1 <_JIT_ENTRY+0x2c1>
// 2a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2aa: ff d0                         callq   *%rax
// 2ac: 49 ff 4d 00                   decq    (%r13)
// 2b0: 75 0f                         jne     0x2c1 <_JIT_ENTRY+0x2c1>
// 2b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b4:  R_X86_64_64  _Py_Dealloc
// 2bc: 4c 89 ef                      movq    %r13, %rdi
// 2bf: ff d0                         callq   *%rax
// 2c1: 49 8b 04 24                   movq    (%r12), %rax
// 2c5: 48 85 c0                      testq   %rax, %rax
// 2c8: 7f 22                         jg      0x2ec <_JIT_ENTRY+0x2ec>
// 2ca: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002cc:  R_X86_64_64  .rodata.str1.1
// 2d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d6:  R_X86_64_64  _Py_NegativeRefcount
// 2de: be 2a 07 00 00                movl    $0x72a, %esi            # imm = 0x72A
// 2e3: 4c 89 e2                      movq    %r12, %rdx
// 2e6: ff d0                         callq   *%rax
// 2e8: 49 8b 04 24                   movq    (%r12), %rax
// 2ec: 4f 8d 3c f7                   leaq    (%r15,%r14,8), %r15
// 2f0: 49 83 c7 f0                   addq    $-0x10, %r15
// 2f4: 85 c0                         testl   %eax, %eax
// 2f6: 78 21                         js      0x319 <_JIT_ENTRY+0x319>
// 2f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fa:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 302: ff d0                         callq   *%rax
// 304: 49 ff 0c 24                   decq    (%r12)
// 308: 75 0f                         jne     0x319 <_JIT_ENTRY+0x319>
// 30a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030c:  R_X86_64_64  _Py_Dealloc
// 314: 4c 89 e7                      movq    %r12, %rdi
// 317: ff d0                         callq   *%rax
// 319: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031b:  R_X86_64_64  _JIT_CONTINUE
// 323: 48 89 df                      movq    %rbx, %rdi
// 326: 4c 89 fe                      movq    %r15, %rsi
// 329: 48 8b 14 24                   movq    (%rsp), %rdx
// 32d: 48 83 c4 28                   addq    $0x28, %rsp
// 331: 5b                            popq    %rbx
// 332: 41 5c                         popq    %r12
// 334: 41 5d                         popq    %r13
// 336: 41 5e                         popq    %r14
// 338: 41 5f                         popq    %r15
// 33a: 5d                            popq    %rbp
// 33b: ff e0                         jmpq    *%rax
// 33d: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_STORE_ATTR_SLOT_code_body[830] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd7, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xdf, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xcf, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x78, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x18, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x14, 0x24, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xb3, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x34, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x32, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xb8, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xa1, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xfa, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xdd, 0x45, 0x31, 0xf6, 0xeb, 0x14, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc6, 0x4c, 0x39, 0xf3, 0x0f, 0x84, 0x27, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xf5, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xf0, 0x4b, 0x8b, 0x44, 0xf7, 0xf0, 0x4f, 0x8b, 0x64, 0xf7, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4d, 0x8b, 0x2c, 0x0c, 0x49, 0x89, 0x04, 0x0c, 0x4d, 0x85, 0xed, 0x74, 0x50, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x2a, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4f, 0x8d, 0x3c, 0xf7, 0x49, 0x83, 0xc7, 0xf0, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_STORE_ATTR_SLOT_code_holes[25] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x259, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x27c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x286, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2a2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2cc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2d6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2fa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x30c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x31b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_STORE_ATTR_SLOT_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_STORE_ATTR_SLOT_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_STORE_DEREF
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_STORE_DEREF.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d7                   movq    (%r15,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 df                   movq    (%r15,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c cf                   leaq    (%r15,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 c7                      subq    %r8, %r15
// 8b: 49 83 c7 b8                   addq    $-0x48, %r15
// 8f: 49 c1 ef 03                   shrq    $0x3, %r15
// 93: 45 89 78 40                   movl    %r15d, 0x40(%r8)
// 97: 49 8b 00                      movq    (%r8), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 5c 24 10                movq    %r11, 0x10(%rsp)
// c4: 4c 89 14 24                   movq    %r10, (%rsp)
// c8: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cd: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 b3 00 00 00             je      0x1b6 <_JIT_ENTRY+0x1b6>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 135: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// 13a: 78 21                         js      0x15d <_JIT_ENTRY+0x15d>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 146: ff d0                         callq   *%rax
// 148: 49 ff 0c 24                   decq    (%r12)
// 14c: 75 0f                         jne     0x15d <_JIT_ENTRY+0x15d>
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _Py_Dealloc
// 158: 4c 89 e7                      movq    %r12, %rdi
// 15b: ff d0                         callq   *%rax
// 15d: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 162: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 166: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 16b: 48 85 c9                      testq   %rcx, %rcx
// 16e: 74 31                         je      0x1a1 <_JIT_ENTRY+0x1a1>
// 170: 48 89 08                      movq    %rcx, (%rax)
// 173: 49 8b 46 10                   movq    0x10(%r14), %rax
// 177: 48 8b 00                      movq    (%rax), %rax
// 17a: 84 c0                         testb   %al, %al
// 17c: 0f 84 b7 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 182: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000184:  R_X86_64_64  _Py_HandlePending
// 18c: 4c 89 f7                      movq    %r14, %rdi
// 18f: ff d0                         callq   *%rax
// 191: 85 c0                         testl   %eax, %eax
// 193: 0f 84 a0 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 199: 48 8b 04 24                   movq    (%rsp), %rax
// 19d: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 1a1: 48 29 d8                      subq    %rbx, %rax
// 1a4: 48 83 c0 b8                   addq    $-0x48, %rax
// 1a8: 48 c1 e8 03                   shrq    $0x3, %rax
// 1ac: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1af: 31 c0                         xorl    %eax, %eax
// 1b1: e9 fa fe ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 1b6: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1ba: 41 be 01 00 00 00             movl    $0x1, %r14d
// 1c0: 45 0f 43 f5                   cmovael %r13d, %r14d
// 1c4: 31 db                         xorl    %ebx, %ebx
// 1c6: eb 14                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c8: 0f 1f 84 00 00 00 00 00       nopl    (%rax,%rax)
// 1d0: 48 ff c3                      incq    %rbx
// 1d3: 49 39 de                      cmpq    %rbx, %r14
// 1d6: 0f 84 27 ff ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 1dc: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1e1: 49 8b 45 00                   movq    (%r13), %rax
// 1e5: 48 85 c0                      testq   %rax, %rax
// 1e8: 7e 06                         jle     0x1f0 <_JIT_ENTRY+0x1f0>
// 1ea: 85 c0                         testl   %eax, %eax
// 1ec: 78 e2                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1ee: eb 26                         jmp     0x216 <_JIT_ENTRY+0x216>
// 1f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f2:  R_X86_64_64  .rodata.str1.1
// 1fa: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ff: 4c 89 ea                      movq    %r13, %rdx
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_NegativeRefcount
// 20c: ff d0                         callq   *%rax
// 20e: 49 8b 45 00                   movq    (%r13), %rax
// 212: 85 c0                         testl   %eax, %eax
// 214: 78 ba                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 220: ff d0                         callq   *%rax
// 222: 49 ff 4d 00                   decq    (%r13)
// 226: 75 a8                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 228: 4c 89 ef                      movq    %r13, %rdi
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_Dealloc
// 235: ff d0                         callq   *%rax
// 237: eb 97                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _JIT_OPARG
// 243: 0f b7 c8                      movzwl  %ax, %ecx
// 246: f7 d0                         notl    %eax
// 248: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 24d: 48 98                         cltq
// 24f: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 253: 49 83 c4 f8                   addq    $-0x8, %r12
// 257: 49 8b 44 c7 f8                movq    -0x8(%r15,%rax,8), %rax
// 25c: 48 8b 4c cb 48                movq    0x48(%rbx,%rcx,8), %rcx
// 261: 4c 8b 79 10                   movq    0x10(%rcx), %r15
// 265: 48 89 41 10                   movq    %rax, 0x10(%rcx)
// 269: 4d 85 ff                      testq   %r15, %r15
// 26c: 74 4d                         je      0x2bb <_JIT_ENTRY+0x2bb>
// 26e: 49 8b 07                      movq    (%r15), %rax
// 271: 48 85 c0                      testq   %rax, %rax
// 274: 7f 21                         jg      0x297 <_JIT_ENTRY+0x297>
// 276: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000278:  R_X86_64_64  .rodata.str1.1+0x39
// 280: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000282:  R_X86_64_64  _Py_NegativeRefcount
// 28a: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 28f: 4c 89 fa                      movq    %r15, %rdx
// 292: ff d0                         callq   *%rax
// 294: 49 8b 07                      movq    (%r15), %rax
// 297: 85 c0                         testl   %eax, %eax
// 299: 78 20                         js      0x2bb <_JIT_ENTRY+0x2bb>
// 29b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a5: ff d0                         callq   *%rax
// 2a7: 49 ff 0f                      decq    (%r15)
// 2aa: 75 0f                         jne     0x2bb <_JIT_ENTRY+0x2bb>
// 2ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ae:  R_X86_64_64  _Py_Dealloc
// 2b6: 4c 89 ff                      movq    %r15, %rdi
// 2b9: ff d0                         callq   *%rax
// 2bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bd:  R_X86_64_64  _JIT_CONTINUE
// 2c5: 48 89 df                      movq    %rbx, %rdi
// 2c8: 4c 89 e6                      movq    %r12, %rsi
// 2cb: 4c 89 f2                      movq    %r14, %rdx
// 2ce: 48 83 c4 28                   addq    $0x28, %rsp
// 2d2: 5b                            popq    %rbx
// 2d3: 41 5c                         popq    %r12
// 2d5: 41 5d                         popq    %r13
// 2d7: 41 5e                         popq    %r14
// 2d9: 41 5f                         popq    %r15
// 2db: 5d                            popq    %rbp
// 2dc: ff e0                         jmpq    *%rax
// 2de: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_STORE_DEREF_code_body[735] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd7, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xdf, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xcf, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x78, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xb3, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x74, 0x31, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xb7, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xa0, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xfa, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xdb, 0xeb, 0x14, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x27, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x83, 0xc4, 0xf8, 0x49, 0x8b, 0x44, 0xc7, 0xf8, 0x48, 0x8b, 0x4c, 0xcb, 0x48, 0x4c, 0x8b, 0x79, 0x10, 0x48, 0x89, 0x41, 0x10, 0x4d, 0x85, 0xff, 0x74, 0x4d, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_STORE_DEREF_code_holes[20] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x278, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x282, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x29d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2bd, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_STORE_DEREF_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_STORE_DEREF_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_STORE_FAST
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_STORE_FAST.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d7                   movq    (%r15,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 df                   movq    (%r15,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c cf                   leaq    (%r15,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 c7                      subq    %r8, %r15
// 8b: 49 83 c7 b8                   addq    $-0x48, %r15
// 8f: 49 c1 ef 03                   shrq    $0x3, %r15
// 93: 45 89 78 40                   movl    %r15d, 0x40(%r8)
// 97: 49 8b 00                      movq    (%r8), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 5c 24 10                movq    %r11, 0x10(%rsp)
// c4: 4c 89 14 24                   movq    %r10, (%rsp)
// c8: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cd: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 b3 00 00 00             je      0x1b6 <_JIT_ENTRY+0x1b6>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 135: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// 13a: 78 21                         js      0x15d <_JIT_ENTRY+0x15d>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 146: ff d0                         callq   *%rax
// 148: 49 ff 0c 24                   decq    (%r12)
// 14c: 75 0f                         jne     0x15d <_JIT_ENTRY+0x15d>
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _Py_Dealloc
// 158: 4c 89 e7                      movq    %r12, %rdi
// 15b: ff d0                         callq   *%rax
// 15d: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 162: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 166: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 16b: 48 85 c9                      testq   %rcx, %rcx
// 16e: 74 31                         je      0x1a1 <_JIT_ENTRY+0x1a1>
// 170: 48 89 08                      movq    %rcx, (%rax)
// 173: 49 8b 46 10                   movq    0x10(%r14), %rax
// 177: 48 8b 00                      movq    (%rax), %rax
// 17a: 84 c0                         testb   %al, %al
// 17c: 0f 84 b7 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 182: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000184:  R_X86_64_64  _Py_HandlePending
// 18c: 4c 89 f7                      movq    %r14, %rdi
// 18f: ff d0                         callq   *%rax
// 191: 85 c0                         testl   %eax, %eax
// 193: 0f 84 a0 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 199: 48 8b 04 24                   movq    (%rsp), %rax
// 19d: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 1a1: 48 29 d8                      subq    %rbx, %rax
// 1a4: 48 83 c0 b8                   addq    $-0x48, %rax
// 1a8: 48 c1 e8 03                   shrq    $0x3, %rax
// 1ac: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1af: 31 c0                         xorl    %eax, %eax
// 1b1: e9 fa fe ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 1b6: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1ba: 41 be 01 00 00 00             movl    $0x1, %r14d
// 1c0: 45 0f 43 f5                   cmovael %r13d, %r14d
// 1c4: 31 db                         xorl    %ebx, %ebx
// 1c6: eb 14                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c8: 0f 1f 84 00 00 00 00 00       nopl    (%rax,%rax)
// 1d0: 48 ff c3                      incq    %rbx
// 1d3: 49 39 de                      cmpq    %rbx, %r14
// 1d6: 0f 84 27 ff ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 1dc: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1e1: 49 8b 45 00                   movq    (%r13), %rax
// 1e5: 48 85 c0                      testq   %rax, %rax
// 1e8: 7e 06                         jle     0x1f0 <_JIT_ENTRY+0x1f0>
// 1ea: 85 c0                         testl   %eax, %eax
// 1ec: 78 e2                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1ee: eb 26                         jmp     0x216 <_JIT_ENTRY+0x216>
// 1f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f2:  R_X86_64_64  .rodata.str1.1
// 1fa: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ff: 4c 89 ea                      movq    %r13, %rdx
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_NegativeRefcount
// 20c: ff d0                         callq   *%rax
// 20e: 49 8b 45 00                   movq    (%r13), %rax
// 212: 85 c0                         testl   %eax, %eax
// 214: 78 ba                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 220: ff d0                         callq   *%rax
// 222: 49 ff 4d 00                   decq    (%r13)
// 226: 75 a8                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 228: 4c 89 ef                      movq    %r13, %rdi
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_Dealloc
// 235: ff d0                         callq   *%rax
// 237: eb 97                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _JIT_OPARG
// 243: 0f b7 c8                      movzwl  %ax, %ecx
// 246: f7 d0                         notl    %eax
// 248: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 24d: 48 98                         cltq
// 24f: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 253: 49 83 c4 f8                   addq    $-0x8, %r12
// 257: 49 8b 44 c7 f8                movq    -0x8(%r15,%rax,8), %rax
// 25c: 4c 8b 7c cb 48                movq    0x48(%rbx,%rcx,8), %r15
// 261: 48 89 44 cb 48                movq    %rax, 0x48(%rbx,%rcx,8)
// 266: 4d 85 ff                      testq   %r15, %r15
// 269: 74 4d                         je      0x2b8 <_JIT_ENTRY+0x2b8>
// 26b: 49 8b 07                      movq    (%r15), %rax
// 26e: 48 85 c0                      testq   %rax, %rax
// 271: 7f 21                         jg      0x294 <_JIT_ENTRY+0x294>
// 273: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000275:  R_X86_64_64  .rodata.str1.1+0x39
// 27d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027f:  R_X86_64_64  _Py_NegativeRefcount
// 287: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 28c: 4c 89 fa                      movq    %r15, %rdx
// 28f: ff d0                         callq   *%rax
// 291: 49 8b 07                      movq    (%r15), %rax
// 294: 85 c0                         testl   %eax, %eax
// 296: 78 20                         js      0x2b8 <_JIT_ENTRY+0x2b8>
// 298: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a2: ff d0                         callq   *%rax
// 2a4: 49 ff 0f                      decq    (%r15)
// 2a7: 75 0f                         jne     0x2b8 <_JIT_ENTRY+0x2b8>
// 2a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ab:  R_X86_64_64  _Py_Dealloc
// 2b3: 4c 89 ff                      movq    %r15, %rdi
// 2b6: ff d0                         callq   *%rax
// 2b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ba:  R_X86_64_64  _JIT_CONTINUE
// 2c2: 48 89 df                      movq    %rbx, %rdi
// 2c5: 4c 89 e6                      movq    %r12, %rsi
// 2c8: 4c 89 f2                      movq    %r14, %rdx
// 2cb: 48 83 c4 28                   addq    $0x28, %rsp
// 2cf: 5b                            popq    %rbx
// 2d0: 41 5c                         popq    %r12
// 2d2: 41 5d                         popq    %r13
// 2d4: 41 5e                         popq    %r14
// 2d6: 41 5f                         popq    %r15
// 2d8: 5d                            popq    %rbp
// 2d9: ff e0                         jmpq    *%rax
// 2db: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_STORE_FAST_code_body[732] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd7, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xdf, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xcf, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x78, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xb3, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x74, 0x31, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xb7, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xa0, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xfa, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xdb, 0xeb, 0x14, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x27, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x83, 0xc4, 0xf8, 0x49, 0x8b, 0x44, 0xc7, 0xf8, 0x4c, 0x8b, 0x7c, 0xcb, 0x48, 0x48, 0x89, 0x44, 0xcb, 0x48, 0x4d, 0x85, 0xff, 0x74, 0x4d, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_STORE_FAST_code_holes[20] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x275, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x27f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x29a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2ba, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_STORE_FAST_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_STORE_FAST_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_STORE_GLOBAL
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_STORE_GLOBAL.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d7                   movq    (%r15,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 df                   movq    (%r15,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c cf                   leaq    (%r15,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 c7                      subq    %r8, %r15
// 8b: 49 83 c7 b8                   addq    $-0x48, %r15
// 8f: 49 c1 ef 03                   shrq    $0x3, %r15
// 93: 45 89 78 40                   movl    %r15d, 0x40(%r8)
// 97: 49 8b 00                      movq    (%r8), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 5c 24 18                movq    %r11, 0x18(%rsp)
// c4: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// c9: 48 89 14 24                   movq    %rdx, (%rsp)
// cd: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 5c 01 00 00             je      0x25f <_JIT_ENTRY+0x25f>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 1c 24                   movq    (%rsp), %rbx
// 134: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 139: 78 21                         js      0x15c <_JIT_ENTRY+0x15c>
// 13b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 145: ff d0                         callq   *%rax
// 147: 49 ff 0c 24                   decq    (%r12)
// 14b: 75 0f                         jne     0x15c <_JIT_ENTRY+0x15c>
// 14d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014f:  R_X86_64_64  _Py_Dealloc
// 157: 4c 89 e7                      movq    %r12, %rdi
// 15a: ff d0                         callq   *%rax
// 15c: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 161: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 165: 4d 85 ed                      testq   %r13, %r13
// 168: 4c 8b 74 24 20                movq    0x20(%rsp), %r14
// 16d: 0f 84 d6 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 173: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 178: 4d 8d 24 cf                   leaq    (%r15,%rcx,8), %r12
// 17c: 4c 89 28                      movq    %r13, (%rax)
// 17f: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 183: 48 8b 00                      movq    (%rax), %rax
// 186: 84 c0                         testb   %al, %al
// 188: 74 17                         je      0x1a1 <_JIT_ENTRY+0x1a1>
// 18a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018c:  R_X86_64_64  _Py_HandlePending
// 194: 48 89 df                      movq    %rbx, %rdi
// 197: ff d0                         callq   *%rax
// 199: 85 c0                         testl   %eax, %eax
// 19b: 0f 85 a5 00 00 00             jne     0x246 <_JIT_ENTRY+0x246>
// 1a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a3:  R_X86_64_64  _JIT_OPARG
// 1ab: 0f b7 c8                      movzwl  %ax, %ecx
// 1ae: f7 d0                         notl    %eax
// 1b0: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1b5: 48 63 d8                      movslq  %eax, %rbx
// 1b8: 4d 8b 6c df f8                movq    -0x8(%r15,%rbx,8), %r13
// 1bd: 49 8b 06                      movq    (%r14), %rax
// 1c0: 49 8b 7e 18                   movq    0x18(%r14), %rdi
// 1c4: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1c8: 48 8b 74 c8 18                movq    0x18(%rax,%rcx,8), %rsi
// 1cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cf:  R_X86_64_64  PyDict_SetItem
// 1d7: 4c 89 ea                      movq    %r13, %rdx
// 1da: ff d0                         callq   *%rax
// 1dc: 89 c5                         movl    %eax, %ebp
// 1de: 49 8b 45 00                   movq    (%r13), %rax
// 1e2: 48 85 c0                      testq   %rax, %rax
// 1e5: 7f 22                         jg      0x209 <_JIT_ENTRY+0x209>
// 1e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e9:  R_X86_64_64  .rodata.str1.1
// 1f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f3:  R_X86_64_64  _Py_NegativeRefcount
// 1fb: be de 03 00 00                movl    $0x3de, %esi            # imm = 0x3DE
// 200: 4c 89 ea                      movq    %r13, %rdx
// 203: ff d0                         callq   *%rax
// 205: 49 8b 45 00                   movq    (%r13), %rax
// 209: 49 8d 1c df                   leaq    (%r15,%rbx,8), %rbx
// 20d: 48 83 c3 f8                   addq    $-0x8, %rbx
// 211: 85 c0                         testl   %eax, %eax
// 213: 78 21                         js      0x236 <_JIT_ENTRY+0x236>
// 215: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000217:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 21f: ff d0                         callq   *%rax
// 221: 49 ff 4d 00                   decq    (%r13)
// 225: 75 0f                         jne     0x236 <_JIT_ENTRY+0x236>
// 227: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000229:  R_X86_64_64  _Py_Dealloc
// 231: 4c 89 ef                      movq    %r13, %rdi
// 234: ff d0                         callq   *%rax
// 236: 85 ed                         testl   %ebp, %ebp
// 238: 4c 0f 44 e3                   cmoveq  %rbx, %r12
// 23c: 0f 84 a7 00 00 00             je      0x2e9 <_JIT_ENTRY+0x2e9>
// 242: 49 83 c4 f8                   addq    $-0x8, %r12
// 246: 4c 89 e0                      movq    %r12, %rax
// 249: 4c 29 f0                      subq    %r14, %rax
// 24c: 48 83 c0 b8                   addq    $-0x48, %rax
// 250: 48 c1 e8 03                   shrq    $0x3, %rax
// 254: 41 89 46 40                   movl    %eax, 0x40(%r14)
// 258: 31 c0                         xorl    %eax, %eax
// 25a: e9 51 fe ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 25f: 41 83 fd 02                   cmpl    $0x2, %r13d
// 263: 41 be 01 00 00 00             movl    $0x1, %r14d
// 269: 45 0f 43 f5                   cmovael %r13d, %r14d
// 26d: 31 db                         xorl    %ebx, %ebx
// 26f: eb 1b                         jmp     0x28c <_JIT_ENTRY+0x28c>
// 271: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// 280: 48 ff c3                      incq    %rbx
// 283: 49 39 de                      cmpq    %rbx, %r14
// 286: 0f 84 77 fe ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 28c: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 291: 49 8b 45 00                   movq    (%r13), %rax
// 295: 48 85 c0                      testq   %rax, %rax
// 298: 7e 06                         jle     0x2a0 <_JIT_ENTRY+0x2a0>
// 29a: 85 c0                         testl   %eax, %eax
// 29c: 78 e2                         js      0x280 <_JIT_ENTRY+0x280>
// 29e: eb 26                         jmp     0x2c6 <_JIT_ENTRY+0x2c6>
// 2a0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002a2:  R_X86_64_64  .rodata.str1.1
// 2aa: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 2af: 4c 89 ea                      movq    %r13, %rdx
// 2b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b4:  R_X86_64_64  _Py_NegativeRefcount
// 2bc: ff d0                         callq   *%rax
// 2be: 49 8b 45 00                   movq    (%r13), %rax
// 2c2: 85 c0                         testl   %eax, %eax
// 2c4: 78 ba                         js      0x280 <_JIT_ENTRY+0x280>
// 2c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2d0: ff d0                         callq   *%rax
// 2d2: 49 ff 4d 00                   decq    (%r13)
// 2d6: 75 a8                         jne     0x280 <_JIT_ENTRY+0x280>
// 2d8: 4c 89 ef                      movq    %r13, %rdi
// 2db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002dd:  R_X86_64_64  _Py_Dealloc
// 2e5: ff d0                         callq   *%rax
// 2e7: eb 97                         jmp     0x280 <_JIT_ENTRY+0x280>
// 2e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002eb:  R_X86_64_64  _JIT_CONTINUE
// 2f3: 4c 89 f7                      movq    %r14, %rdi
// 2f6: 4c 89 e6                      movq    %r12, %rsi
// 2f9: 48 8b 14 24                   movq    (%rsp), %rdx
// 2fd: 48 83 c4 28                   addq    $0x28, %rsp
// 301: 5b                            popq    %rbx
// 302: 41 5c                         popq    %r12
// 304: 41 5d                         popq    %r13
// 306: 41 5e                         popq    %r14
// 308: 41 5f                         popq    %r15
// 30a: 5d                            popq    %rbp
// 30b: ff e0                         jmpq    *%rax
// 30d: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_STORE_GLOBAL_code_body[782] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd7, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xdf, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xcf, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x78, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x18, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x14, 0x24, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0x5c, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x04, 0xc7, 0x4d, 0x85, 0xed, 0x4c, 0x8b, 0x74, 0x24, 0x20, 0x0f, 0x84, 0xd6, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x4d, 0x8d, 0x24, 0xcf, 0x4c, 0x89, 0x28, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xa5, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xd8, 0x4d, 0x8b, 0x6c, 0xdf, 0xf8, 0x49, 0x8b, 0x06, 0x49, 0x8b, 0x7e, 0x18, 0x48, 0x8b, 0x40, 0x20, 0x48, 0x8b, 0x74, 0xc8, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xde, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x49, 0x8d, 0x1c, 0xdf, 0x48, 0x83, 0xc3, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xed, 0x4c, 0x0f, 0x44, 0xe3, 0x0f, 0x84, 0xa7, 0x00, 0x00, 0x00, 0x49, 0x83, 0xc4, 0xf8, 0x4c, 0x89, 0xe0, 0x4c, 0x29, 0xf0, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x46, 0x40, 0x31, 0xc0, 0xe9, 0x51, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xdb, 0xeb, 0x1b, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x77, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_STORE_GLOBAL_code_holes[21] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1cf, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_SetItem, 0x0},
    {0x1e9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x217, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x229, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2a2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2eb, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_STORE_GLOBAL_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_STORE_GLOBAL_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_STORE_NAME
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_STORE_NAME.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d7                   movq    (%r15,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 df                   movq    (%r15,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c cf                   leaq    (%r15,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 c7                      subq    %r8, %r15
// 8b: 49 83 c7 b8                   addq    $-0x48, %r15
// 8f: 49 c1 ef 03                   shrq    $0x3, %r15
// 93: 45 89 78 40                   movl    %r15d, 0x40(%r8)
// 97: 49 8b 00                      movq    (%r8), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 5c 24 10                movq    %r11, 0x10(%rsp)
// c4: 4c 89 14 24                   movq    %r10, (%rsp)
// c8: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cd: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 a8 00 00 00             je      0x1ab <_JIT_ENTRY+0x1ab>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 135: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// 13a: 78 21                         js      0x15d <_JIT_ENTRY+0x15d>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 146: ff d0                         callq   *%rax
// 148: 49 ff 0c 24                   decq    (%r12)
// 14c: 75 0f                         jne     0x15d <_JIT_ENTRY+0x15d>
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _Py_Dealloc
// 158: 4c 89 e7                      movq    %r12, %rdi
// 15b: ff d0                         callq   *%rax
// 15d: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 162: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 166: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 16b: 48 85 c0                      testq   %rax, %rax
// 16e: 0f 84 f1 01 00 00             je      0x365 <_JIT_ENTRY+0x365>
// 174: 49 89 04 24                   movq    %rax, (%r12)
// 178: 49 8b 46 10                   movq    0x10(%r14), %rax
// 17c: 48 8b 00                      movq    (%rax), %rax
// 17f: 84 c0                         testb   %al, %al
// 181: 0f 84 a2 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _Py_HandlePending
// 191: 4c 89 f7                      movq    %r14, %rdi
// 194: ff d0                         callq   *%rax
// 196: 85 c0                         testl   %eax, %eax
// 198: 0f 84 8b 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 19e: 48 8b 04 24                   movq    (%rsp), %rax
// 1a2: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 1a6: e9 ba 01 00 00                jmp     0x365 <_JIT_ENTRY+0x365>
// 1ab: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1af: bb 01 00 00 00                movl    $0x1, %ebx
// 1b4: 41 0f 43 dd                   cmovael %r13d, %ebx
// 1b8: 45 31 f6                      xorl    %r14d, %r14d
// 1bb: eb 0f                         jmp     0x1cc <_JIT_ENTRY+0x1cc>
// 1bd: 0f 1f 00                      nopl    (%rax)
// 1c0: 49 ff c6                      incq    %r14
// 1c3: 4c 39 f3                      cmpq    %r14, %rbx
// 1c6: 0f 84 37 ff ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 1cc: 4e 8b 6c f5 00                movq    (%rbp,%r14,8), %r13
// 1d1: 49 8b 45 00                   movq    (%r13), %rax
// 1d5: 48 85 c0                      testq   %rax, %rax
// 1d8: 7e 06                         jle     0x1e0 <_JIT_ENTRY+0x1e0>
// 1da: 85 c0                         testl   %eax, %eax
// 1dc: 78 e2                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 1de: eb 26                         jmp     0x206 <_JIT_ENTRY+0x206>
// 1e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e2:  R_X86_64_64  .rodata.str1.1
// 1ea: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ef: 4c 89 ea                      movq    %r13, %rdx
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _Py_NegativeRefcount
// 1fc: ff d0                         callq   *%rax
// 1fe: 49 8b 45 00                   movq    (%r13), %rax
// 202: 85 c0                         testl   %eax, %eax
// 204: 78 ba                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 210: ff d0                         callq   *%rax
// 212: 49 ff 4d 00                   decq    (%r13)
// 216: 75 a8                         jne     0x1c0 <_JIT_ENTRY+0x1c0>
// 218: 4c 89 ef                      movq    %r13, %rdi
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_Dealloc
// 225: ff d0                         callq   *%rax
// 227: eb 97                         jmp     0x1c0 <_JIT_ENTRY+0x1c0>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _JIT_OPARG
// 233: 0f b7 c8                      movzwl  %ax, %ecx
// 236: f7 d0                         notl    %eax
// 238: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 23d: 48 98                         cltq
// 23f: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 243: 49 83 c4 f8                   addq    $-0x8, %r12
// 247: 4d 8b 7c c7 f8                movq    -0x8(%r15,%rax,8), %r15
// 24c: 48 8b 03                      movq    (%rbx), %rax
// 24f: 48 8b 7b 28                   movq    0x28(%rbx), %rdi
// 253: 48 8b 40 20                   movq    0x20(%rax), %rax
// 257: 48 8b 4c c8 18                movq    0x18(%rax,%rcx,8), %rcx
// 25c: 48 85 ff                      testq   %rdi, %rdi
// 25f: 74 23                         je      0x284 <_JIT_ENTRY+0x284>
// 261: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000263:  R_X86_64_64  PyDict_Type
// 26b: 48 39 47 08                   cmpq    %rax, 0x8(%rdi)
// 26f: 0f 84 8b 00 00 00             je      0x300 <_JIT_ENTRY+0x300>
// 275: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000277:  R_X86_64_64  PyObject_SetItem
// 27f: e9 86 00 00 00                jmp     0x30a <_JIT_ENTRY+0x30a>
// 284: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000286:  R_X86_64_64  PyExc_SystemError
// 28e: 48 8b 30                      movq    (%rax), %rsi
// 291: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000293:  R_X86_64_64  .rodata.str1.1+0x39
// 29b: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000029d:  R_X86_64_64  _PyErr_Format
// 2a5: 4c 89 f7                      movq    %r14, %rdi
// 2a8: 31 c0                         xorl    %eax, %eax
// 2aa: 41 ff d0                      callq   *%r8
// 2ad: 49 8b 07                      movq    (%r15), %rax
// 2b0: 48 85 c0                      testq   %rax, %rax
// 2b3: 7f 21                         jg      0x2d6 <_JIT_ENTRY+0x2d6>
// 2b5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002b7:  R_X86_64_64  .rodata.str1.1
// 2bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c1:  R_X86_64_64  _Py_NegativeRefcount
// 2c9: be 4d 03 00 00                movl    $0x34d, %esi            # imm = 0x34D
// 2ce: 4c 89 fa                      movq    %r15, %rdx
// 2d1: ff d0                         callq   *%rax
// 2d3: 49 8b 07                      movq    (%r15), %rax
// 2d6: 85 c0                         testl   %eax, %eax
// 2d8: 0f 88 87 00 00 00             js      0x365 <_JIT_ENTRY+0x365>
// 2de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2e8: ff d0                         callq   *%rax
// 2ea: 49 ff 0f                      decq    (%r15)
// 2ed: 75 76                         jne     0x365 <_JIT_ENTRY+0x365>
// 2ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f1:  R_X86_64_64  _Py_Dealloc
// 2f9: 4c 89 ff                      movq    %r15, %rdi
// 2fc: ff d0                         callq   *%rax
// 2fe: eb 65                         jmp     0x365 <_JIT_ENTRY+0x365>
// 300: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000302:  R_X86_64_64  PyDict_SetItem
// 30a: 48 89 ce                      movq    %rcx, %rsi
// 30d: 4c 89 fa                      movq    %r15, %rdx
// 310: ff d0                         callq   *%rax
// 312: 89 c5                         movl    %eax, %ebp
// 314: 49 8b 07                      movq    (%r15), %rax
// 317: 48 85 c0                      testq   %rax, %rax
// 31a: 7f 21                         jg      0x33d <_JIT_ENTRY+0x33d>
// 31c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000031e:  R_X86_64_64  .rodata.str1.1
// 326: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000328:  R_X86_64_64  _Py_NegativeRefcount
// 330: be 54 03 00 00                movl    $0x354, %esi            # imm = 0x354
// 335: 4c 89 fa                      movq    %r15, %rdx
// 338: ff d0                         callq   *%rax
// 33a: 49 8b 07                      movq    (%r15), %rax
// 33d: 85 c0                         testl   %eax, %eax
// 33f: 78 20                         js      0x361 <_JIT_ENTRY+0x361>
// 341: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000343:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 34b: ff d0                         callq   *%rax
// 34d: 49 ff 0f                      decq    (%r15)
// 350: 75 0f                         jne     0x361 <_JIT_ENTRY+0x361>
// 352: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000354:  R_X86_64_64  _Py_Dealloc
// 35c: 4c 89 ff                      movq    %r15, %rdi
// 35f: ff d0                         callq   *%rax
// 361: 85 ed                         testl   %ebp, %ebp
// 363: 74 16                         je      0x37b <_JIT_ENTRY+0x37b>
// 365: 49 29 dc                      subq    %rbx, %r12
// 368: 49 83 c4 b8                   addq    $-0x48, %r12
// 36c: 49 c1 ec 03                   shrq    $0x3, %r12
// 370: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 374: 31 c0                         xorl    %eax, %eax
// 376: e9 35 fd ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 37b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000037d:  R_X86_64_64  _JIT_CONTINUE
// 385: 48 89 df                      movq    %rbx, %rdi
// 388: 4c 89 e6                      movq    %r12, %rsi
// 38b: 4c 89 f2                      movq    %r14, %rdx
// 38e: 48 83 c4 28                   addq    $0x28, %rsp
// 392: 5b                            popq    %rbx
// 393: 41 5c                         popq    %r12
// 395: 41 5d                         popq    %r13
// 397: 41 5e                         popq    %r14
// 399: 41 5f                         popq    %r15
// 39b: 5d                            popq    %rbp
// 39c: ff e0                         jmpq    *%rax
// 39e: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_STORE_NAME_code_body[927] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd7, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xdf, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xcf, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x78, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xa8, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x4d, 0x8d, 0x24, 0xc7, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xf1, 0x01, 0x00, 0x00, 0x49, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xa2, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x8b, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x24, 0xc7, 0xe9, 0xba, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xdd, 0x45, 0x31, 0xf6, 0xeb, 0x0f, 0x0f, 0x1f, 0x00, 0x49, 0xff, 0xc6, 0x4c, 0x39, 0xf3, 0x0f, 0x84, 0x37, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xf5, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x83, 0xc4, 0xf8, 0x4d, 0x8b, 0x7c, 0xc7, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x7b, 0x28, 0x48, 0x8b, 0x40, 0x20, 0x48, 0x8b, 0x4c, 0xc8, 0x18, 0x48, 0x85, 0xff, 0x74, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x47, 0x08, 0x0f, 0x84, 0x8b, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x86, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4d, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x0f, 0x88, 0x87, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x76, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xeb, 0x65, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xce, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x54, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x74, 0x16, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x35, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_STORE_NAME_code_holes[30] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x277, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x286, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x293, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x29d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x2b7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2f1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x302, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_SetItem, 0x0},
    {0x31e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x328, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x343, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x354, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x37d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00no locals found when storing %R\x00'
// 59: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_STORE_NAME_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x25, 0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_STORE_NAME_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_STORE_SLICE
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_STORE_SLICE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d7                   movq    (%r15,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 df                   movq    (%r15,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4b 8d 1c cf                   leaq    (%r15,%r9,8), %rbx
// 79: 48 8b 3b                      movq    (%rbx), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 4d 29 c7                      subq    %r8, %r15
// 8a: 49 83 c7 b8                   addq    $-0x48, %r15
// 8e: 49 c1 ef 03                   shrq    $0x3, %r15
// 92: 45 89 78 40                   movl    %r15d, 0x40(%r8)
// 96: 49 8b 00                      movq    (%r8), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 1c 24                   movq    %r11, (%rsp)
// c2: 4c 89 54 24 18                movq    %r10, 0x18(%rsp)
// c7: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// cc: 4c 89 44 24 10                movq    %r8, 0x10(%rsp)
// d1: 48 85 c0                      testq   %rax, %rax
// d4: 40 0f 94 c5                   sete    %bpl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 73 08                   leaq    0x8(%rbx), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 53 01 00 00             je      0x257 <_JIT_ENTRY+0x257>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 136: 4c 8b 6c 24 20                movq    0x20(%rsp), %r13
// 13b: 78 21                         js      0x15e <_JIT_ENTRY+0x15e>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 147: ff d0                         callq   *%rax
// 149: 49 ff 0c 24                   decq    (%r12)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_Dealloc
// 159: 4c 89 e7                      movq    %r12, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 04 24                   movq    (%rsp), %rax
// 162: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 166: 4d 85 ed                      testq   %r13, %r13
// 169: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 16e: 0f 84 4b 02 00 00             je      0x3bf <_JIT_ENTRY+0x3bf>
// 174: 48 8b 4c 24 18                movq    0x18(%rsp), %rcx
// 179: 4d 8d 24 cf                   leaq    (%r15,%rcx,8), %r12
// 17d: 4c 89 28                      movq    %r13, (%rax)
// 180: 49 8b 46 10                   movq    0x10(%r14), %rax
// 184: 48 8b 00                      movq    (%rax), %rax
// 187: 84 c0                         testb   %al, %al
// 189: 74 17                         je      0x1a2 <_JIT_ENTRY+0x1a2>
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_HandlePending
// 195: 4c 89 f7                      movq    %r14, %rdi
// 198: ff d0                         callq   *%rax
// 19a: 85 c0                         testl   %eax, %eax
// 19c: 0f 85 1a 02 00 00             jne     0x3bc <_JIT_ENTRY+0x3bc>
// 1a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a4:  R_X86_64_64  _JIT_OPARG
// 1ac: f7 d0                         notl    %eax
// 1ae: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1b3: 4c 63 f0                      movslq  %eax, %r14
// 1b6: 4b 8b 74 f7 f8                movq    -0x8(%r15,%r14,8), %rsi
// 1bb: 4b 8b 7c f7 f0                movq    -0x10(%r15,%r14,8), %rdi
// 1c0: 4b 8b 6c f7 e0                movq    -0x20(%r15,%r14,8), %rbp
// 1c5: 4b 8b 5c f7 e8                movq    -0x18(%r15,%r14,8), %rbx
// 1ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cc:  R_X86_64_64  _PyBuildSlice_ConsumeRefs
// 1d4: ff d0                         callq   *%rax
// 1d6: 48 85 c0                      testq   %rax, %rax
// 1d9: 0f 84 fa 00 00 00             je      0x2d9 <_JIT_ENTRY+0x2d9>
// 1df: 49 89 c5                      movq    %rax, %r13
// 1e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e4:  R_X86_64_64  PyObject_SetItem
// 1ec: 48 89 df                      movq    %rbx, %rdi
// 1ef: 4c 89 ee                      movq    %r13, %rsi
// 1f2: 48 89 ea                      movq    %rbp, %rdx
// 1f5: ff d0                         callq   *%rax
// 1f7: 89 04 24                      movl    %eax, (%rsp)
// 1fa: 49 8b 45 00                   movq    (%r13), %rax
// 1fe: 48 85 c0                      testq   %rax, %rax
// 201: 7f 22                         jg      0x225 <_JIT_ENTRY+0x225>
// 203: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000205:  R_X86_64_64  .rodata.str1.1
// 20d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020f:  R_X86_64_64  _Py_NegativeRefcount
// 217: be b2 01 00 00                movl    $0x1b2, %esi            # imm = 0x1B2
// 21c: 4c 89 ea                      movq    %r13, %rdx
// 21f: ff d0                         callq   *%rax
// 221: 49 8b 45 00                   movq    (%r13), %rax
// 225: 85 c0                         testl   %eax, %eax
// 227: 78 21                         js      0x24a <_JIT_ENTRY+0x24a>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 233: ff d0                         callq   *%rax
// 235: 49 ff 4d 00                   decq    (%r13)
// 239: 75 0f                         jne     0x24a <_JIT_ENTRY+0x24a>
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: 4c 89 ef                      movq    %r13, %rdi
// 248: ff d0                         callq   *%rax
// 24a: 83 3c 24 00                   cmpl    $0x0, (%rsp)
// 24e: 41 0f 94 c5                   sete    %r13b
// 252: e9 85 00 00 00                jmp     0x2dc <_JIT_ENTRY+0x2dc>
// 257: 41 83 fd 02                   cmpl    $0x2, %r13d
// 25b: 41 be 01 00 00 00             movl    $0x1, %r14d
// 261: 45 0f 43 f5                   cmovael %r13d, %r14d
// 265: 31 ed                         xorl    %ebp, %ebp
// 267: eb 13                         jmp     0x27c <_JIT_ENTRY+0x27c>
// 269: 0f 1f 80 00 00 00 00          nopl    (%rax)
// 270: 48 ff c5                      incq    %rbp
// 273: 49 39 ee                      cmpq    %rbp, %r14
// 276: 0f 84 88 fe ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 27c: 4c 8b 2c eb                   movq    (%rbx,%rbp,8), %r13
// 280: 49 8b 45 00                   movq    (%r13), %rax
// 284: 48 85 c0                      testq   %rax, %rax
// 287: 7e 07                         jle     0x290 <_JIT_ENTRY+0x290>
// 289: 85 c0                         testl   %eax, %eax
// 28b: 78 e3                         js      0x270 <_JIT_ENTRY+0x270>
// 28d: eb 27                         jmp     0x2b6 <_JIT_ENTRY+0x2b6>
// 28f: 90                            nop
// 290: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000292:  R_X86_64_64  .rodata.str1.1
// 29a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 29f: 4c 89 ea                      movq    %r13, %rdx
// 2a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a4:  R_X86_64_64  _Py_NegativeRefcount
// 2ac: ff d0                         callq   *%rax
// 2ae: 49 8b 45 00                   movq    (%r13), %rax
// 2b2: 85 c0                         testl   %eax, %eax
// 2b4: 78 ba                         js      0x270 <_JIT_ENTRY+0x270>
// 2b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2c0: ff d0                         callq   *%rax
// 2c2: 49 ff 4d 00                   decq    (%r13)
// 2c6: 75 a8                         jne     0x270 <_JIT_ENTRY+0x270>
// 2c8: 4c 89 ef                      movq    %r13, %rdi
// 2cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cd:  R_X86_64_64  _Py_Dealloc
// 2d5: ff d0                         callq   *%rax
// 2d7: eb 97                         jmp     0x270 <_JIT_ENTRY+0x270>
// 2d9: 45 31 ed                      xorl    %r13d, %r13d
// 2dc: 48 8b 45 00                   movq    (%rbp), %rax
// 2e0: 48 85 c0                      testq   %rax, %rax
// 2e3: 7f 22                         jg      0x307 <_JIT_ENTRY+0x307>
// 2e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002e7:  R_X86_64_64  .rodata.str1.1
// 2ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f1:  R_X86_64_64  _Py_NegativeRefcount
// 2f9: be b4 01 00 00                movl    $0x1b4, %esi            # imm = 0x1B4
// 2fe: 48 89 ea                      movq    %rbp, %rdx
// 301: ff d0                         callq   *%rax
// 303: 48 8b 45 00                   movq    (%rbp), %rax
// 307: 85 c0                         testl   %eax, %eax
// 309: 78 21                         js      0x32c <_JIT_ENTRY+0x32c>
// 30b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 315: ff d0                         callq   *%rax
// 317: 48 ff 4d 00                   decq    (%rbp)
// 31b: 75 0f                         jne     0x32c <_JIT_ENTRY+0x32c>
// 31d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031f:  R_X86_64_64  _Py_Dealloc
// 327: 48 89 ef                      movq    %rbp, %rdi
// 32a: ff d0                         callq   *%rax
// 32c: 48 8b 03                      movq    (%rbx), %rax
// 32f: 48 85 c0                      testq   %rax, %rax
// 332: 7f 21                         jg      0x355 <_JIT_ENTRY+0x355>
// 334: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000336:  R_X86_64_64  .rodata.str1.1
// 33e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000340:  R_X86_64_64  _Py_NegativeRefcount
// 348: be b5 01 00 00                movl    $0x1b5, %esi            # imm = 0x1B5
// 34d: 48 89 da                      movq    %rbx, %rdx
// 350: ff d0                         callq   *%rax
// 352: 48 8b 03                      movq    (%rbx), %rax
// 355: 48 89 dd                      movq    %rbx, %rbp
// 358: 4b 8d 1c f7                   leaq    (%r15,%r14,8), %rbx
// 35c: 48 83 c3 e0                   addq    $-0x20, %rbx
// 360: 85 c0                         testl   %eax, %eax
// 362: 78 21                         js      0x385 <_JIT_ENTRY+0x385>
// 364: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000366:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 36e: ff d0                         callq   *%rax
// 370: 48 ff 4d 00                   decq    (%rbp)
// 374: 75 0f                         jne     0x385 <_JIT_ENTRY+0x385>
// 376: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000378:  R_X86_64_64  _Py_Dealloc
// 380: 48 89 ef                      movq    %rbp, %rdi
// 383: ff d0                         callq   *%rax
// 385: 45 84 ed                      testb   %r13b, %r13b
// 388: 4c 0f 45 e3                   cmovneq %rbx, %r12
// 38c: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 391: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 396: 74 20                         je      0x3b8 <_JIT_ENTRY+0x3b8>
// 398: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000039a:  R_X86_64_64  _JIT_CONTINUE
// 3a2: 48 89 df                      movq    %rbx, %rdi
// 3a5: 4c 89 e6                      movq    %r12, %rsi
// 3a8: 48 83 c4 28                   addq    $0x28, %rsp
// 3ac: 5b                            popq    %rbx
// 3ad: 41 5c                         popq    %r12
// 3af: 41 5d                         popq    %r13
// 3b1: 41 5e                         popq    %r14
// 3b3: 41 5f                         popq    %r15
// 3b5: 5d                            popq    %rbp
// 3b6: ff e0                         jmpq    *%rax
// 3b8: 49 83 c4 e0                   addq    $-0x20, %r12
// 3bc: 4c 89 e0                      movq    %r12, %rax
// 3bf: 48 29 d8                      subq    %rbx, %rax
// 3c2: 48 83 c0 b8                   addq    $-0x48, %rax
// 3c6: 48 c1 e8 03                   shrq    $0x3, %rax
// 3ca: 89 43 40                      movl    %eax, 0x40(%rbx)
// 3cd: 31 c0                         xorl    %eax, %eax
// 3cf: e9 db fc ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 3d4: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_STORE_SLICE_code_body[981] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd7, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xdf, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4b, 0x8d, 0x1c, 0xcf, 0x48, 0x8b, 0x3b, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x78, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x1c, 0x24, 0x4c, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x44, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x73, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0x53, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x8b, 0x6c, 0x24, 0x20, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xc7, 0x4d, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x0f, 0x84, 0x4b, 0x02, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x18, 0x4d, 0x8d, 0x24, 0xcf, 0x4c, 0x89, 0x28, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x1a, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xf0, 0x4b, 0x8b, 0x74, 0xf7, 0xf8, 0x4b, 0x8b, 0x7c, 0xf7, 0xf0, 0x4b, 0x8b, 0x6c, 0xf7, 0xe0, 0x4b, 0x8b, 0x5c, 0xf7, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xfa, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb2, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x83, 0x3c, 0x24, 0x00, 0x41, 0x0f, 0x94, 0xc5, 0xe9, 0x85, 0x00, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xed, 0xeb, 0x13, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xee, 0x0f, 0x84, 0x88, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x2c, 0xeb, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x27, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x45, 0x31, 0xed, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb4, 0x01, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb5, 0x01, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x48, 0x89, 0xdd, 0x4b, 0x8d, 0x1c, 0xf7, 0x48, 0x83, 0xc3, 0xe0, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x45, 0x84, 0xed, 0x4c, 0x0f, 0x45, 0xe3, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x74, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x83, 0xc4, 0xe0, 0x4c, 0x89, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xdb, 0xfc, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_STORE_SLICE_code_holes[30] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1a4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1cc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyBuildSlice_ConsumeRefs, 0x0},
    {0x1e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x205, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x20f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x292, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2a4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2cd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2e7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2f1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x30d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x31f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x336, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x340, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x366, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x378, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x39a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_STORE_SLICE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_STORE_SLICE_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_STORE_SUBSCR
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_STORE_SUBSCR.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d7                   movq    (%r15,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 df                   movq    (%r15,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4b 8d 1c cf                   leaq    (%r15,%r9,8), %rbx
// 79: 48 8b 3b                      movq    (%rbx), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 4d 29 c7                      subq    %r8, %r15
// 8a: 49 83 c7 b8                   addq    $-0x48, %r15
// 8e: 49 c1 ef 03                   shrq    $0x3, %r15
// 92: 45 89 78 40                   movl    %r15d, 0x40(%r8)
// 96: 49 8b 00                      movq    (%r8), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 1c 24                   movq    %r11, (%rsp)
// c2: 4c 89 54 24 18                movq    %r10, 0x18(%rsp)
// c7: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// cc: 4c 89 44 24 10                movq    %r8, 0x10(%rsp)
// d1: 48 85 c0                      testq   %rax, %rax
// d4: 40 0f 94 c5                   sete    %bpl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 73 08                   leaq    0x8(%rbx), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 08 02 00 00             je      0x30c <_JIT_ENTRY+0x30c>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 136: 4c 8b 6c 24 20                movq    0x20(%rsp), %r13
// 13b: 78 21                         js      0x15e <_JIT_ENTRY+0x15e>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 147: ff d0                         callq   *%rax
// 149: 49 ff 0c 24                   decq    (%r12)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_Dealloc
// 159: 4c 89 e7                      movq    %r12, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 04 24                   movq    (%rsp), %rax
// 162: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 166: 4d 85 ed                      testq   %r13, %r13
// 169: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 16e: 0f 84 83 01 00 00             je      0x2f7 <_JIT_ENTRY+0x2f7>
// 174: 48 8b 4c 24 18                movq    0x18(%rsp), %rcx
// 179: 4d 8d 24 cf                   leaq    (%r15,%rcx,8), %r12
// 17d: 4c 89 28                      movq    %r13, (%rax)
// 180: 49 8b 46 10                   movq    0x10(%r14), %rax
// 184: 48 8b 00                      movq    (%rax), %rax
// 187: 84 c0                         testb   %al, %al
// 189: 74 17                         je      0x1a2 <_JIT_ENTRY+0x1a2>
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_HandlePending
// 195: 4c 89 f7                      movq    %r14, %rdi
// 198: ff d0                         callq   *%rax
// 19a: 85 c0                         testl   %eax, %eax
// 19c: 0f 85 52 01 00 00             jne     0x2f4 <_JIT_ENTRY+0x2f4>
// 1a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a4:  R_X86_64_64  _JIT_OPARG
// 1ac: f7 d0                         notl    %eax
// 1ae: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1b3: 4c 63 f0                      movslq  %eax, %r14
// 1b6: 4b 8b 74 f7 f8                movq    -0x8(%r15,%r14,8), %rsi
// 1bb: 4f 8b 6c f7 e8                movq    -0x18(%r15,%r14,8), %r13
// 1c0: 4b 8b 6c f7 f0                movq    -0x10(%r15,%r14,8), %rbp
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  PyObject_SetItem
// 1cf: 48 89 ef                      movq    %rbp, %rdi
// 1d2: 48 89 f3                      movq    %rsi, %rbx
// 1d5: 4c 89 ea                      movq    %r13, %rdx
// 1d8: ff d0                         callq   *%rax
// 1da: 89 04 24                      movl    %eax, (%rsp)
// 1dd: 49 8b 45 00                   movq    (%r13), %rax
// 1e1: 48 85 c0                      testq   %rax, %rax
// 1e4: 7f 22                         jg      0x208 <_JIT_ENTRY+0x208>
// 1e6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e8:  R_X86_64_64  .rodata.str1.1
// 1f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f2:  R_X86_64_64  _Py_NegativeRefcount
// 1fa: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 1ff: 4c 89 ea                      movq    %r13, %rdx
// 202: ff d0                         callq   *%rax
// 204: 49 8b 45 00                   movq    (%r13), %rax
// 208: 85 c0                         testl   %eax, %eax
// 20a: 78 21                         js      0x22d <_JIT_ENTRY+0x22d>
// 20c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 216: ff d0                         callq   *%rax
// 218: 49 ff 4d 00                   decq    (%r13)
// 21c: 75 0f                         jne     0x22d <_JIT_ENTRY+0x22d>
// 21e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000220:  R_X86_64_64  _Py_Dealloc
// 228: 4c 89 ef                      movq    %r13, %rdi
// 22b: ff d0                         callq   *%rax
// 22d: 48 8b 45 00                   movq    (%rbp), %rax
// 231: 48 85 c0                      testq   %rax, %rax
// 234: 7f 22                         jg      0x258 <_JIT_ENTRY+0x258>
// 236: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000238:  R_X86_64_64  .rodata.str1.1
// 240: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000242:  R_X86_64_64  _Py_NegativeRefcount
// 24a: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// 24f: 48 89 ea                      movq    %rbp, %rdx
// 252: ff d0                         callq   *%rax
// 254: 48 8b 45 00                   movq    (%rbp), %rax
// 258: 85 c0                         testl   %eax, %eax
// 25a: 49 89 dd                      movq    %rbx, %r13
// 25d: 78 21                         js      0x280 <_JIT_ENTRY+0x280>
// 25f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000261:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 269: ff d0                         callq   *%rax
// 26b: 48 ff 4d 00                   decq    (%rbp)
// 26f: 75 0f                         jne     0x280 <_JIT_ENTRY+0x280>
// 271: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000273:  R_X86_64_64  _Py_Dealloc
// 27b: 48 89 ef                      movq    %rbp, %rdi
// 27e: ff d0                         callq   *%rax
// 280: 49 8b 45 00                   movq    (%r13), %rax
// 284: 48 85 c0                      testq   %rax, %rax
// 287: 7f 22                         jg      0x2ab <_JIT_ENTRY+0x2ab>
// 289: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000028b:  R_X86_64_64  .rodata.str1.1
// 293: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000295:  R_X86_64_64  _Py_NegativeRefcount
// 29d: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 2a2: 4c 89 ea                      movq    %r13, %rdx
// 2a5: ff d0                         callq   *%rax
// 2a7: 49 8b 45 00                   movq    (%r13), %rax
// 2ab: 4b 8d 1c f7                   leaq    (%r15,%r14,8), %rbx
// 2af: 48 83 c3 e8                   addq    $-0x18, %rbx
// 2b3: 85 c0                         testl   %eax, %eax
// 2b5: 78 21                         js      0x2d8 <_JIT_ENTRY+0x2d8>
// 2b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2c1: ff d0                         callq   *%rax
// 2c3: 49 ff 4d 00                   decq    (%r13)
// 2c7: 75 0f                         jne     0x2d8 <_JIT_ENTRY+0x2d8>
// 2c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cb:  R_X86_64_64  _Py_Dealloc
// 2d3: 4c 89 ef                      movq    %r13, %rdi
// 2d6: ff d0                         callq   *%rax
// 2d8: 83 3c 24 00                   cmpl    $0x0, (%rsp)
// 2dc: 4c 0f 44 e3                   cmoveq  %rbx, %r12
// 2e0: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 2e5: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2ea: 0f 84 99 00 00 00             je      0x389 <_JIT_ENTRY+0x389>
// 2f0: 49 83 c4 e8                   addq    $-0x18, %r12
// 2f4: 4c 89 e0                      movq    %r12, %rax
// 2f7: 48 29 d8                      subq    %rbx, %rax
// 2fa: 48 83 c0 b8                   addq    $-0x48, %rax
// 2fe: 48 c1 e8 03                   shrq    $0x3, %rax
// 302: 89 43 40                      movl    %eax, 0x40(%rbx)
// 305: 31 c0                         xorl    %eax, %eax
// 307: e9 a3 fd ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 30c: 41 83 fd 02                   cmpl    $0x2, %r13d
// 310: 41 be 01 00 00 00             movl    $0x1, %r14d
// 316: 45 0f 43 f5                   cmovael %r13d, %r14d
// 31a: 31 ed                         xorl    %ebp, %ebp
// 31c: eb 0e                         jmp     0x32c <_JIT_ENTRY+0x32c>
// 31e: 66 90                         nop
// 320: 48 ff c5                      incq    %rbp
// 323: 49 39 ee                      cmpq    %rbp, %r14
// 326: 0f 84 d8 fd ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 32c: 4c 8b 2c eb                   movq    (%rbx,%rbp,8), %r13
// 330: 49 8b 45 00                   movq    (%r13), %rax
// 334: 48 85 c0                      testq   %rax, %rax
// 337: 7e 07                         jle     0x340 <_JIT_ENTRY+0x340>
// 339: 85 c0                         testl   %eax, %eax
// 33b: 78 e3                         js      0x320 <_JIT_ENTRY+0x320>
// 33d: eb 27                         jmp     0x366 <_JIT_ENTRY+0x366>
// 33f: 90                            nop
// 340: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000342:  R_X86_64_64  .rodata.str1.1
// 34a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 34f: 4c 89 ea                      movq    %r13, %rdx
// 352: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000354:  R_X86_64_64  _Py_NegativeRefcount
// 35c: ff d0                         callq   *%rax
// 35e: 49 8b 45 00                   movq    (%r13), %rax
// 362: 85 c0                         testl   %eax, %eax
// 364: 78 ba                         js      0x320 <_JIT_ENTRY+0x320>
// 366: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000368:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 370: ff d0                         callq   *%rax
// 372: 49 ff 4d 00                   decq    (%r13)
// 376: 75 a8                         jne     0x320 <_JIT_ENTRY+0x320>
// 378: 4c 89 ef                      movq    %r13, %rdi
// 37b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000037d:  R_X86_64_64  _Py_Dealloc
// 385: ff d0                         callq   *%rax
// 387: eb 97                         jmp     0x320 <_JIT_ENTRY+0x320>
// 389: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000038b:  R_X86_64_64  _JIT_CONTINUE
// 393: 48 89 df                      movq    %rbx, %rdi
// 396: 4c 89 e6                      movq    %r12, %rsi
// 399: 48 83 c4 28                   addq    $0x28, %rsp
// 39d: 5b                            popq    %rbx
// 39e: 41 5c                         popq    %r12
// 3a0: 41 5d                         popq    %r13
// 3a2: 41 5e                         popq    %r14
// 3a4: 41 5f                         popq    %r15
// 3a6: 5d                            popq    %rbp
// 3a7: ff e0                         jmpq    *%rax
// 3a9: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_STORE_SUBSCR_code_body[938] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd7, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xdf, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4b, 0x8d, 0x1c, 0xcf, 0x48, 0x8b, 0x3b, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x78, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x1c, 0x24, 0x4c, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x44, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x73, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0x08, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x8b, 0x6c, 0x24, 0x20, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x04, 0xc7, 0x4d, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x0f, 0x84, 0x83, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x18, 0x4d, 0x8d, 0x24, 0xcf, 0x4c, 0x89, 0x28, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x52, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xf0, 0x4b, 0x8b, 0x74, 0xf7, 0xf8, 0x4f, 0x8b, 0x6c, 0xf7, 0xe8, 0x4b, 0x8b, 0x6c, 0xf7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x48, 0x89, 0xf3, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x49, 0x89, 0xdd, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x4b, 0x8d, 0x1c, 0xf7, 0x48, 0x83, 0xc3, 0xe8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x83, 0x3c, 0x24, 0x00, 0x4c, 0x0f, 0x44, 0xe3, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x0f, 0x84, 0x99, 0x00, 0x00, 0x00, 0x49, 0x83, 0xc4, 0xe8, 0x4c, 0x89, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xa3, 0xfd, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xed, 0xeb, 0x0e, 0x66, 0x90, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xee, 0x0f, 0x84, 0xd8, 0xfd, 0xff, 0xff, 0x4c, 0x8b, 0x2c, 0xeb, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x27, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_STORE_SUBSCR_code_holes[29] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1a4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x20e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x220, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x238, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x242, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x261, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x273, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x28b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x295, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x342, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x354, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x368, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x37d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x38b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_STORE_SUBSCR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_STORE_SUBSCR_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_STORE_SUBSCR_DICT
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_STORE_SUBSCR_DICT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 fe                      movq    %rdi, %r14
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 cf                   movq    (%r15,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d7                   movq    (%r15,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c c7                   leaq    (%r15,%r8,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 f7                      subq    %r14, %r15
// 8b: 49 83 c7 b8                   addq    $-0x48, %r15
// 8f: 49 c1 ef 03                   shrq    $0x3, %r15
// 93: 45 89 7e 40                   movl    %r15d, 0x40(%r14)
// 97: 49 8b 06                      movq    (%r14), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 54 24 18                movq    %r10, 0x18(%rsp)
// c4: 4c 89 4c 24 08                movq    %r9, 0x8(%rsp)
// c9: 48 89 14 24                   movq    %rdx, (%rsp)
// cd: 4c 89 74 24 20                movq    %r14, 0x20(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 d3 00 00 00             je      0x1d6 <_JIT_ENTRY+0x1d6>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 48 8b 1c 24                   movq    (%rsp), %rbx
// 10e: 7f 22                         jg      0x132 <_JIT_ENTRY+0x132>
// 110: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000112:  R_X86_64_64  .rodata.str1.1
// 11a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011c:  R_X86_64_64  _Py_NegativeRefcount
// 124: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 129: 4c 89 e2                      movq    %r12, %rdx
// 12c: ff d0                         callq   *%rax
// 12e: 49 8b 04 24                   movq    (%r12), %rax
// 132: 85 c0                         testl   %eax, %eax
// 134: 4c 8b 74 24 20                movq    0x20(%rsp), %r14
// 139: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 13e: 78 21                         js      0x161 <_JIT_ENTRY+0x161>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 14a: ff d0                         callq   *%rax
// 14c: 49 ff 0c 24                   decq    (%r12)
// 150: 75 0f                         jne     0x161 <_JIT_ENTRY+0x161>
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  _Py_Dealloc
// 15c: 4c 89 e7                      movq    %r12, %rdi
// 15f: ff d0                         callq   *%rax
// 161: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 166: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 16a: 4d 85 ed                      testq   %r13, %r13
// 16d: 0f 84 7b 01 00 00             je      0x2ee <_JIT_ENTRY+0x2ee>
// 173: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 178: 4d 8d 24 cf                   leaq    (%r15,%rcx,8), %r12
// 17c: 4c 89 28                      movq    %r13, (%rax)
// 17f: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 183: 48 8b 00                      movq    (%rax), %rax
// 186: 84 c0                         testb   %al, %al
// 188: 74 17                         je      0x1a1 <_JIT_ENTRY+0x1a1>
// 18a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018c:  R_X86_64_64  _Py_HandlePending
// 194: 48 89 df                      movq    %rbx, %rdi
// 197: ff d0                         callq   *%rax
// 199: 85 c0                         testl   %eax, %eax
// 19b: 0f 85 4a 01 00 00             jne     0x2eb <_JIT_ENTRY+0x2eb>
// 1a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a3:  R_X86_64_64  _JIT_OPARG
// 1ab: f7 d0                         notl    %eax
// 1ad: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1b2: 48 63 d8                      movslq  %eax, %rbx
// 1b5: 4d 8b 6c df f0                movq    -0x10(%r15,%rbx,8), %r13
// 1ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bc:  R_X86_64_64  PyDict_Type
// 1c4: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 1c8: 0f 84 8b 00 00 00             je      0x259 <_JIT_ENTRY+0x259>
// 1ce: 4d 89 e7                      movq    %r12, %r15
// 1d1: e9 b2 fe ff ff                jmp     0x88 <_JIT_ENTRY+0x88>
// 1d6: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1da: bb 01 00 00 00                movl    $0x1, %ebx
// 1df: 41 0f 43 dd                   cmovael %r13d, %ebx
// 1e3: 45 31 f6                      xorl    %r14d, %r14d
// 1e6: eb 14                         jmp     0x1fc <_JIT_ENTRY+0x1fc>
// 1e8: 0f 1f 84 00 00 00 00 00       nopl    (%rax,%rax)
// 1f0: 49 ff c6                      incq    %r14
// 1f3: 4c 39 f3                      cmpq    %r14, %rbx
// 1f6: 0f 84 07 ff ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 1fc: 4e 8b 6c f5 00                movq    (%rbp,%r14,8), %r13
// 201: 49 8b 45 00                   movq    (%r13), %rax
// 205: 48 85 c0                      testq   %rax, %rax
// 208: 7e 06                         jle     0x210 <_JIT_ENTRY+0x210>
// 20a: 85 c0                         testl   %eax, %eax
// 20c: 78 e2                         js      0x1f0 <_JIT_ENTRY+0x1f0>
// 20e: eb 26                         jmp     0x236 <_JIT_ENTRY+0x236>
// 210: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000212:  R_X86_64_64  .rodata.str1.1
// 21a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 21f: 4c 89 ea                      movq    %r13, %rdx
// 222: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000224:  R_X86_64_64  _Py_NegativeRefcount
// 22c: ff d0                         callq   *%rax
// 22e: 49 8b 45 00                   movq    (%r13), %rax
// 232: 85 c0                         testl   %eax, %eax
// 234: 78 ba                         js      0x1f0 <_JIT_ENTRY+0x1f0>
// 236: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000238:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 240: ff d0                         callq   *%rax
// 242: 49 ff 4d 00                   decq    (%r13)
// 246: 75 a8                         jne     0x1f0 <_JIT_ENTRY+0x1f0>
// 248: 4c 89 ef                      movq    %r13, %rdi
// 24b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024d:  R_X86_64_64  _Py_Dealloc
// 255: ff d0                         callq   *%rax
// 257: eb 97                         jmp     0x1f0 <_JIT_ENTRY+0x1f0>
// 259: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025b:  R_X86_64_64  _JIT_OPARG
// 263: f7 d0                         notl    %eax
// 265: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 26a: 48 98                         cltq
// 26c: 49 8b 54 c7 e8                movq    -0x18(%r15,%rax,8), %rdx
// 271: 49 8b 74 c7 f8                movq    -0x8(%r15,%rax,8), %rsi
// 276: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000278:  R_X86_64_64  _PyDict_SetItem_Take2
// 280: 4c 89 ef                      movq    %r13, %rdi
// 283: ff d0                         callq   *%rax
// 285: 89 c5                         movl    %eax, %ebp
// 287: 49 8b 45 00                   movq    (%r13), %rax
// 28b: 48 85 c0                      testq   %rax, %rax
// 28e: 7f 22                         jg      0x2b2 <_JIT_ENTRY+0x2b2>
// 290: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000292:  R_X86_64_64  .rodata.str1.1
// 29a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029c:  R_X86_64_64  _Py_NegativeRefcount
// 2a4: be 63 02 00 00                movl    $0x263, %esi            # imm = 0x263
// 2a9: 4c 89 ea                      movq    %r13, %rdx
// 2ac: ff d0                         callq   *%rax
// 2ae: 49 8b 45 00                   movq    (%r13), %rax
// 2b2: 49 8d 1c df                   leaq    (%r15,%rbx,8), %rbx
// 2b6: 48 83 c3 e8                   addq    $-0x18, %rbx
// 2ba: 85 c0                         testl   %eax, %eax
// 2bc: 78 21                         js      0x2df <_JIT_ENTRY+0x2df>
// 2be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2c8: ff d0                         callq   *%rax
// 2ca: 49 ff 4d 00                   decq    (%r13)
// 2ce: 75 0f                         jne     0x2df <_JIT_ENTRY+0x2df>
// 2d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d2:  R_X86_64_64  _Py_Dealloc
// 2da: 4c 89 ef                      movq    %r13, %rdi
// 2dd: ff d0                         callq   *%rax
// 2df: 85 ed                         testl   %ebp, %ebp
// 2e1: 4c 0f 44 e3                   cmoveq  %rbx, %r12
// 2e5: 74 1d                         je      0x304 <_JIT_ENTRY+0x304>
// 2e7: 49 83 c4 e8                   addq    $-0x18, %r12
// 2eb: 4c 89 e0                      movq    %r12, %rax
// 2ee: 4c 29 f0                      subq    %r14, %rax
// 2f1: 48 83 c0 b8                   addq    $-0x48, %rax
// 2f5: 48 c1 e8 03                   shrq    $0x3, %rax
// 2f9: 41 89 46 40                   movl    %eax, 0x40(%r14)
// 2fd: 31 c0                         xorl    %eax, %eax
// 2ff: e9 ac fd ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 304: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000306:  R_X86_64_64  _JIT_CONTINUE
// 30e: 4c 89 f7                      movq    %r14, %rdi
// 311: 4c 89 e6                      movq    %r12, %rsi
// 314: 48 8b 14 24                   movq    (%rsp), %rdx
// 318: 48 83 c4 28                   addq    $0x28, %rsp
// 31c: 5b                            popq    %rbx
// 31d: 41 5c                         popq    %r12
// 31f: 41 5d                         popq    %r13
// 321: 41 5e                         popq    %r14
// 323: 41 5f                         popq    %r15
// 325: 5d                            popq    %rbp
// 326: ff e0                         jmpq    *%rax
// 328: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_STORE_SUBSCR_DICT_code_body[809] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xfe, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xcf, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xc7, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xf7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x4c, 0x24, 0x08, 0x48, 0x89, 0x14, 0x24, 0x4c, 0x89, 0x74, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xd3, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x20, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x04, 0xc7, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x7b, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x4d, 0x8d, 0x24, 0xcf, 0x4c, 0x89, 0x28, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x4a, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xd8, 0x4d, 0x8b, 0x6c, 0xdf, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x84, 0x8b, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xe7, 0xe9, 0xb2, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xdd, 0x45, 0x31, 0xf6, 0xeb, 0x14, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc6, 0x4c, 0x39, 0xf3, 0x0f, 0x84, 0x07, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xf5, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x54, 0xc7, 0xe8, 0x49, 0x8b, 0x74, 0xc7, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x63, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x49, 0x8d, 0x1c, 0xdf, 0x48, 0x83, 0xc3, 0xe8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xed, 0x4c, 0x0f, 0x44, 0xe3, 0x74, 0x1d, 0x49, 0x83, 0xc4, 0xe8, 0x4c, 0x89, 0xe0, 0x4c, 0x29, 0xf0, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x46, 0x40, 0x31, 0xc0, 0xe9, 0xac, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_STORE_SUBSCR_DICT_code_holes[23] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x11c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x224, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x238, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x24d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x25b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x278, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_SetItem_Take2, 0x0},
    {0x292, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x29c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2d2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x306, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_STORE_SUBSCR_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_STORE_SUBSCR_DICT_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_STORE_SUBSCR_LIST_INT
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_STORE_SUBSCR_LIST_INT.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fd                      movq    %rdi, %rbp
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 cf                   movq    (%r15,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d7                   movq    (%r15,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4b 8d 1c c7                   leaq    (%r15,%r8,8), %rbx
// 79: 48 8b 3b                      movq    (%rbx), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 3a                         je      0xc1 <_JIT_ENTRY+0xc1>
// 87: 4c 89 fb                      movq    %r15, %rbx
// 8a: 48 29 eb                      subq    %rbp, %rbx
// 8d: 48 83 c3 b8                   addq    $-0x48, %rbx
// 91: 48 c1 eb 03                   shrq    $0x3, %rbx
// 95: 89 5d 40                      movl    %ebx, 0x40(%rbp)
// 98: 48 8b 45 00                   movq    (%rbp), %rax
// 9c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009e:  R_X86_64_64  _JIT_TARGET
// a6: 89 c9                         movl    %ecx, %ecx
// a8: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// ac: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b2: 48 83 c4 28                   addq    $0x28, %rsp
// b6: 5b                            popq    %rbx
// b7: 41 5c                         popq    %r12
// b9: 41 5d                         popq    %r13
// bb: 41 5e                         popq    %r14
// bd: 41 5f                         popq    %r15
// bf: 5d                            popq    %rbp
// c0: c3                            retq
// c1: 4c 89 54 24 20                movq    %r10, 0x20(%rsp)
// c6: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// cb: 48 89 14 24                   movq    %rdx, (%rsp)
// cf: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// d4: 48 85 c0                      testq   %rax, %rax
// d7: 40 0f 94 c5                   sete    %bpl
// db: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// df: 48 8d 73 08                   leaq    0x8(%rbx), %rsi
// e3: 48 63 d0                      movslq  %eax, %rdx
// e6: ff 51 08                      callq   *0x8(%rcx)
// e9: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _JIT_OPARG
// f8: 66 85 c0                      testw   %ax, %ax
// fb: 0f 94 c0                      sete    %al
// fe: 40 84 c5                      testb   %al, %bpl
// 101: 0f 84 b6 00 00 00             je      0x1bd <_JIT_ENTRY+0x1bd>
// 107: 49 8b 04 24                   movq    (%r12), %rax
// 10b: 48 85 c0                      testq   %rax, %rax
// 10e: 7f 22                         jg      0x132 <_JIT_ENTRY+0x132>
// 110: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000112:  R_X86_64_64  .rodata.str1.1
// 11a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011c:  R_X86_64_64  _Py_NegativeRefcount
// 124: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 129: 4c 89 e2                      movq    %r12, %rdx
// 12c: ff d0                         callq   *%rax
// 12e: 49 8b 04 24                   movq    (%r12), %rax
// 132: 85 c0                         testl   %eax, %eax
// 134: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 139: 4c 8b 34 24                   movq    (%rsp), %r14
// 13d: 78 21                         js      0x160 <_JIT_ENTRY+0x160>
// 13f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000141:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 149: ff d0                         callq   *%rax
// 14b: 49 ff 0c 24                   decq    (%r12)
// 14f: 75 0f                         jne     0x160 <_JIT_ENTRY+0x160>
// 151: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000153:  R_X86_64_64  _Py_Dealloc
// 15b: 4c 89 e7                      movq    %r12, %rdi
// 15e: ff d0                         callq   *%rax
// 160: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 165: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 169: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 16e: 48 85 d2                      testq   %rdx, %rdx
// 171: 74 35                         je      0x1a8 <_JIT_ENTRY+0x1a8>
// 173: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 178: 49 8d 1c cf                   leaq    (%r15,%rcx,8), %rbx
// 17c: 48 89 10                      movq    %rdx, (%rax)
// 17f: 49 8b 46 10                   movq    0x10(%r14), %rax
// 183: 48 8b 00                      movq    (%rax), %rax
// 186: 84 c0                         testb   %al, %al
// 188: 0f 84 ab 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_HandlePending
// 198: 4c 89 f7                      movq    %r14, %rdi
// 19b: ff d0                         callq   *%rax
// 19d: 85 c0                         testl   %eax, %eax
// 19f: 0f 84 94 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 1a5: 48 89 d8                      movq    %rbx, %rax
// 1a8: 48 29 e8                      subq    %rbp, %rax
// 1ab: 48 83 c0 b8                   addq    $-0x48, %rax
// 1af: 48 c1 e8 03                   shrq    $0x3, %rax
// 1b3: 89 45 40                      movl    %eax, 0x40(%rbp)
// 1b6: 31 c0                         xorl    %eax, %eax
// 1b8: e9 f5 fe ff ff                jmp     0xb2 <_JIT_ENTRY+0xb2>
// 1bd: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1c1: bd 01 00 00 00                movl    $0x1, %ebp
// 1c6: 41 0f 43 ed                   cmovael %r13d, %ebp
// 1ca: 45 31 f6                      xorl    %r14d, %r14d
// 1cd: eb 0d                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1cf: 90                            nop
// 1d0: 49 ff c6                      incq    %r14
// 1d3: 4c 39 f5                      cmpq    %r14, %rbp
// 1d6: 0f 84 2b ff ff ff             je      0x107 <_JIT_ENTRY+0x107>
// 1dc: 4e 8b 2c f3                   movq    (%rbx,%r14,8), %r13
// 1e0: 49 8b 45 00                   movq    (%r13), %rax
// 1e4: 48 85 c0                      testq   %rax, %rax
// 1e7: 7e 07                         jle     0x1f0 <_JIT_ENTRY+0x1f0>
// 1e9: 85 c0                         testl   %eax, %eax
// 1eb: 78 e3                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1ed: eb 27                         jmp     0x216 <_JIT_ENTRY+0x216>
// 1ef: 90                            nop
// 1f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f2:  R_X86_64_64  .rodata.str1.1
// 1fa: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ff: 4c 89 ea                      movq    %r13, %rdx
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_NegativeRefcount
// 20c: ff d0                         callq   *%rax
// 20e: 49 8b 45 00                   movq    (%r13), %rax
// 212: 85 c0                         testl   %eax, %eax
// 214: 78 ba                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 220: ff d0                         callq   *%rax
// 222: 49 ff 4d 00                   decq    (%r13)
// 226: 75 a8                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 228: 4c 89 ef                      movq    %r13, %rdi
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_Dealloc
// 235: ff d0                         callq   *%rax
// 237: eb 97                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _JIT_OPARG
// 243: f7 d0                         notl    %eax
// 245: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 24a: 4c 63 f0                      movslq  %eax, %r14
// 24d: 4f 8b 6c f7 f8                movq    -0x8(%r15,%r14,8), %r13
// 252: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000254:  R_X86_64_64  PyLong_Type
// 25c: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 260: 0f 85 24 fe ff ff             jne     0x8a <_JIT_ENTRY+0x8a>
// 266: 4f 8b 64 f7 f0                movq    -0x10(%r15,%r14,8), %r12
// 26b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026d:  R_X86_64_64  PyList_Type
// 275: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 27a: 0f 85 0a fe ff ff             jne     0x8a <_JIT_ENTRY+0x8a>
// 280: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 285: 0f 87 ff fd ff ff             ja      0x8a <_JIT_ENTRY+0x8a>
// 28b: 41 8b 45 18                   movl    0x18(%r13), %eax
// 28f: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 294: 0f 8e f0 fd ff ff             jle     0x8a <_JIT_ENTRY+0x8a>
// 29a: 4b 8b 4c f7 e8                movq    -0x18(%r15,%r14,8), %rcx
// 29f: 49 8b 54 24 18                movq    0x18(%r12), %rdx
// 2a4: 48 8b 2c c2                   movq    (%rdx,%rax,8), %rbp
// 2a8: 48 89 0c c2                   movq    %rcx, (%rdx,%rax,8)
// 2ac: 48 8b 45 00                   movq    (%rbp), %rax
// 2b0: 48 85 c0                      testq   %rax, %rax
// 2b3: 7f 22                         jg      0x2d7 <_JIT_ENTRY+0x2d7>
// 2b5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002b7:  R_X86_64_64  .rodata.str1.1
// 2bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c1:  R_X86_64_64  _Py_NegativeRefcount
// 2c9: be 52 02 00 00                movl    $0x252, %esi            # imm = 0x252
// 2ce: 48 89 ea                      movq    %rbp, %rdx
// 2d1: ff d0                         callq   *%rax
// 2d3: 48 8b 45 00                   movq    (%rbp), %rax
// 2d7: 85 c0                         testl   %eax, %eax
// 2d9: 78 21                         js      0x2fc <_JIT_ENTRY+0x2fc>
// 2db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002dd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2e5: ff d0                         callq   *%rax
// 2e7: 48 ff 4d 00                   decq    (%rbp)
// 2eb: 75 0f                         jne     0x2fc <_JIT_ENTRY+0x2fc>
// 2ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ef:  R_X86_64_64  _Py_Dealloc
// 2f7: 48 89 ef                      movq    %rbp, %rdi
// 2fa: ff d0                         callq   *%rax
// 2fc: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 301: 75 28                         jne     0x32b <_JIT_ENTRY+0x32b>
// 303: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000305:  R_X86_64_64  PyInterpreterState_Get
// 30d: ff d0                         callq   *%rax
// 30f: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 316: 49 ff 4d 00                   decq    (%r13)
// 31a: 75 0f                         jne     0x32b <_JIT_ENTRY+0x32b>
// 31c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031e:  R_X86_64_64  PyObject_Free
// 326: 4c 89 ef                      movq    %r13, %rdi
// 329: ff d0                         callq   *%rax
// 32b: 49 8b 04 24                   movq    (%r12), %rax
// 32f: 48 85 c0                      testq   %rax, %rax
// 332: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 337: 7f 22                         jg      0x35b <_JIT_ENTRY+0x35b>
// 339: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000033b:  R_X86_64_64  .rodata.str1.1
// 343: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000345:  R_X86_64_64  _Py_NegativeRefcount
// 34d: be 54 02 00 00                movl    $0x254, %esi            # imm = 0x254
// 352: 4c 89 e2                      movq    %r12, %rdx
// 355: ff d0                         callq   *%rax
// 357: 49 8b 04 24                   movq    (%r12), %rax
// 35b: 4f 8d 3c f7                   leaq    (%r15,%r14,8), %r15
// 35f: 49 83 c7 e8                   addq    $-0x18, %r15
// 363: 85 c0                         testl   %eax, %eax
// 365: 78 21                         js      0x388 <_JIT_ENTRY+0x388>
// 367: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000369:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 371: ff d0                         callq   *%rax
// 373: 49 ff 0c 24                   decq    (%r12)
// 377: 75 0f                         jne     0x388 <_JIT_ENTRY+0x388>
// 379: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000037b:  R_X86_64_64  _Py_Dealloc
// 383: 4c 89 e7                      movq    %r12, %rdi
// 386: ff d0                         callq   *%rax
// 388: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000038a:  R_X86_64_64  _JIT_CONTINUE
// 392: 48 89 df                      movq    %rbx, %rdi
// 395: 4c 89 fe                      movq    %r15, %rsi
// 398: 48 8b 14 24                   movq    (%rsp), %rdx
// 39c: 48 83 c4 28                   addq    $0x28, %rsp
// 3a0: 5b                            popq    %rbx
// 3a1: 41 5c                         popq    %r12
// 3a3: 41 5d                         popq    %r13
// 3a5: 41 5e                         popq    %r14
// 3a7: 41 5f                         popq    %r15
// 3a9: 5d                            popq    %rbp
// 3aa: ff e0                         jmpq    *%rax
// 3ac: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_STORE_SUBSCR_LIST_INT_code_body[941] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfd, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xcf, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4b, 0x8d, 0x1c, 0xc7, 0x48, 0x8b, 0x3b, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x3a, 0x4c, 0x89, 0xfb, 0x48, 0x29, 0xeb, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x89, 0x5d, 0x40, 0x48, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x20, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x73, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xb6, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x4c, 0x8b, 0x34, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x85, 0xd2, 0x74, 0x35, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x49, 0x8d, 0x1c, 0xcf, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xab, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x94, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd8, 0x48, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x45, 0x40, 0x31, 0xc0, 0xe9, 0xf5, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xed, 0x45, 0x31, 0xf6, 0xeb, 0x0d, 0x90, 0x49, 0xff, 0xc6, 0x4c, 0x39, 0xf5, 0x0f, 0x84, 0x2b, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x2c, 0xf3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x27, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xf0, 0x4f, 0x8b, 0x6c, 0xf7, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x24, 0xfe, 0xff, 0xff, 0x4f, 0x8b, 0x64, 0xf7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x0a, 0xfe, 0xff, 0xff, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xff, 0xfd, 0xff, 0xff, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0xf0, 0xfd, 0xff, 0xff, 0x4b, 0x8b, 0x4c, 0xf7, 0xe8, 0x49, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x8b, 0x2c, 0xc2, 0x48, 0x89, 0x0c, 0xc2, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x52, 0x02, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x54, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4f, 0x8d, 0x3c, 0xf7, 0x49, 0x83, 0xc7, 0xe8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_STORE_SUBSCR_LIST_INT_code_holes[28] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9e, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x11c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x254, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x26d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyList_Type, 0x0},
    {0x2b7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x305, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x31e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x33b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x345, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x369, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x37b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x38a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_STORE_SUBSCR_LIST_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_STORE_SUBSCR_LIST_INT_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_SWAP
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_SWAP.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4f 8d 04 c6                   leaq    (%r14,%r8,8), %r8
// 79: 49 8b 38                      movq    (%r8), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 49 29 de                      subq    %rbx, %r14
// 8a: 49 83 c6 b8                   addq    $-0x48, %r14
// 8e: 49 c1 ee 03                   shrq    $0x3, %r14
// 92: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 96: 48 8b 03                      movq    (%rbx), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c3: 4c 89 0c 24                   movq    %r9, (%rsp)
// c7: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cc: 48 85 c0                      testq   %rax, %rax
// cf: 40 0f 94 c5                   sete    %bpl
// d3: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// d7: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// dc: 49 8d 70 08                   leaq    0x8(%r8), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 b1 00 00 00             je      0x1b5 <_JIT_ENTRY+0x1b5>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 136: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 13b: 78 21                         js      0x15e <_JIT_ENTRY+0x15e>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 147: ff d0                         callq   *%rax
// 149: 49 ff 0c 24                   decq    (%r12)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_Dealloc
// 159: 4c 89 e7                      movq    %r12, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 163: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 167: 4d 85 ed                      testq   %r13, %r13
// 16a: 74 34                         je      0x1a0 <_JIT_ENTRY+0x1a0>
// 16c: 48 8b 0c 24                   movq    (%rsp), %rcx
// 170: 4d 8d 24 ce                   leaq    (%r14,%rcx,8), %r12
// 174: 4c 89 28                      movq    %r13, (%rax)
// 177: 49 8b 47 10                   movq    0x10(%r15), %rax
// 17b: 48 8b 00                      movq    (%rax), %rax
// 17e: 84 c0                         testb   %al, %al
// 180: 0f 84 c3 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 186: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000188:  R_X86_64_64  _Py_HandlePending
// 190: 4c 89 ff                      movq    %r15, %rdi
// 193: ff d0                         callq   *%rax
// 195: 85 c0                         testl   %eax, %eax
// 197: 0f 84 ac 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 19d: 4c 89 e0                      movq    %r12, %rax
// 1a0: 48 29 d8                      subq    %rbx, %rax
// 1a3: 48 83 c0 b8                   addq    $-0x48, %rax
// 1a7: 48 c1 e8 03                   shrq    $0x3, %rax
// 1ab: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1ae: 31 c0                         xorl    %eax, %eax
// 1b0: e9 fa fe ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 1b5: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1b9: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1bf: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1c3: 31 ed                         xorl    %ebp, %ebp
// 1c5: eb 15                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c7: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 1d0: 48 ff c5                      incq    %rbp
// 1d3: 49 39 ef                      cmpq    %rbp, %r15
// 1d6: 0f 84 28 ff ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 1dc: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 1e1: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 1e5: 49 8b 45 00                   movq    (%r13), %rax
// 1e9: 48 85 c0                      testq   %rax, %rax
// 1ec: 7e 12                         jle     0x200 <_JIT_ENTRY+0x200>
// 1ee: 85 c0                         testl   %eax, %eax
// 1f0: 78 de                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1f2: eb 32                         jmp     0x226 <_JIT_ENTRY+0x226>
// 1f4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 200: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1
// 20a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 20f: 4c 89 ea                      movq    %r13, %rdx
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: ff d0                         callq   *%rax
// 21e: 49 8b 45 00                   movq    (%r13), %rax
// 222: 85 c0                         testl   %eax, %eax
// 224: 78 aa                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 230: ff d0                         callq   *%rax
// 232: 49 ff 4d 00                   decq    (%r13)
// 236: 75 98                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: ff d0                         callq   *%rax
// 247: eb 87                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _JIT_OPARG
// 253: 0f b7 c8                      movzwl  %ax, %ecx
// 256: f7 d0                         notl    %eax
// 258: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 25d: 48 98                         cltq
// 25f: 49 8b 54 c6 f8                movq    -0x8(%r14,%rax,8), %rdx
// 264: 48 89 c6                      movq    %rax, %rsi
// 267: 48 29 ce                      subq    %rcx, %rsi
// 26a: 49 8b 0c f6                   movq    (%r14,%rsi,8), %rcx
// 26e: 49 89 14 f6                   movq    %rdx, (%r14,%rsi,8)
// 272: 49 89 4c c6 f8                movq    %rcx, -0x8(%r14,%rax,8)
// 277: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000279:  R_X86_64_64  _JIT_CONTINUE
// 281: 48 89 df                      movq    %rbx, %rdi
// 284: 4c 89 e6                      movq    %r12, %rsi
// 287: 4c 89 fa                      movq    %r15, %rdx
// 28a: 48 83 c4 28                   addq    $0x28, %rsp
// 28e: 5b                            popq    %rbx
// 28f: 41 5c                         popq    %r12
// 291: 41 5d                         popq    %r13
// 293: 41 5e                         popq    %r14
// 295: 41 5f                         popq    %r15
// 297: 5d                            popq    %rbp
// 298: ff e0                         jmpq    *%rax
// 29a: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_SWAP_code_body[667] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xce, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4f, 0x8d, 0x04, 0xc6, 0x49, 0x8b, 0x38, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x70, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xb1, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x4d, 0x85, 0xed, 0x74, 0x34, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x24, 0xce, 0x4c, 0x89, 0x28, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xac, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xfa, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xed, 0xeb, 0x15, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xef, 0x0f, 0x84, 0x28, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x54, 0xc6, 0xf8, 0x48, 0x89, 0xc6, 0x48, 0x29, 0xce, 0x49, 0x8b, 0x0c, 0xf6, 0x49, 0x89, 0x14, 0xf6, 0x49, 0x89, 0x4c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_SWAP_code_holes[16] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x279, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_SWAP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_SWAP_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_TO_BOOL
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_TO_BOOL.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d7                   movq    (%r15,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 df                   movq    (%r15,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c cf                   leaq    (%r15,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 c7                      subq    %r8, %r15
// 8b: 49 83 c7 b8                   addq    $-0x48, %r15
// 8f: 49 c1 ef 03                   shrq    $0x3, %r15
// 93: 45 89 78 40                   movl    %r15d, 0x40(%r8)
// 97: 49 8b 00                      movq    (%r8), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 5c 24 18                movq    %r11, 0x18(%rsp)
// c4: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// c9: 48 89 14 24                   movq    %rdx, (%rsp)
// cd: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 aa 00 00 00             je      0x1ad <_JIT_ENTRY+0x1ad>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 1c 24                   movq    (%rsp), %rbx
// 134: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 139: 78 21                         js      0x15c <_JIT_ENTRY+0x15c>
// 13b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 145: ff d0                         callq   *%rax
// 147: 49 ff 0c 24                   decq    (%r12)
// 14b: 75 0f                         jne     0x15c <_JIT_ENTRY+0x15c>
// 14d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014f:  R_X86_64_64  _Py_Dealloc
// 157: 4c 89 e7                      movq    %r12, %rdi
// 15a: ff d0                         callq   *%rax
// 15c: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 161: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 165: 4d 85 ed                      testq   %r13, %r13
// 168: 4c 8b 74 24 20                movq    0x20(%rsp), %r14
// 16d: 0f 84 7b 01 00 00             je      0x2ee <_JIT_ENTRY+0x2ee>
// 173: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 178: 4d 8d 24 cf                   leaq    (%r15,%rcx,8), %r12
// 17c: 4c 89 28                      movq    %r13, (%rax)
// 17f: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 183: 48 8b 00                      movq    (%rax), %rax
// 186: 84 c0                         testb   %al, %al
// 188: 0f 84 9b 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_HandlePending
// 198: 48 89 df                      movq    %rbx, %rdi
// 19b: ff d0                         callq   *%rax
// 19d: 85 c0                         testl   %eax, %eax
// 19f: 0f 84 84 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 1a5: 4c 89 e0                      movq    %r12, %rax
// 1a8: e9 41 01 00 00                jmp     0x2ee <_JIT_ENTRY+0x2ee>
// 1ad: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1b1: 41 be 01 00 00 00             movl    $0x1, %r14d
// 1b7: 45 0f 43 f5                   cmovael %r13d, %r14d
// 1bb: 31 db                         xorl    %ebx, %ebx
// 1bd: eb 0d                         jmp     0x1cc <_JIT_ENTRY+0x1cc>
// 1bf: 90                            nop
// 1c0: 48 ff c3                      incq    %rbx
// 1c3: 49 39 de                      cmpq    %rbx, %r14
// 1c6: 0f 84 37 ff ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 1cc: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1d1: 49 8b 45 00                   movq    (%r13), %rax
// 1d5: 48 85 c0                      testq   %rax, %rax
// 1d8: 7e 06                         jle     0x1e0 <_JIT_ENTRY+0x1e0>
// 1da: 85 c0                         testl   %eax, %eax
// 1dc: 78 e2                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 1de: eb 26                         jmp     0x206 <_JIT_ENTRY+0x206>
// 1e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e2:  R_X86_64_64  .rodata.str1.1
// 1ea: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ef: 4c 89 ea                      movq    %r13, %rdx
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _Py_NegativeRefcount
// 1fc: ff d0                         callq   *%rax
// 1fe: 49 8b 45 00                   movq    (%r13), %rax
// 202: 85 c0                         testl   %eax, %eax
// 204: 78 ba                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 210: ff d0                         callq   *%rax
// 212: 49 ff 4d 00                   decq    (%r13)
// 216: 75 a8                         jne     0x1c0 <_JIT_ENTRY+0x1c0>
// 218: 4c 89 ef                      movq    %r13, %rdi
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_Dealloc
// 225: ff d0                         callq   *%rax
// 227: eb 97                         jmp     0x1c0 <_JIT_ENTRY+0x1c0>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _JIT_OPARG
// 233: f7 d0                         notl    %eax
// 235: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 23a: 48 63 d8                      movslq  %eax, %rbx
// 23d: 4d 8b 6c df f8                movq    -0x8(%r15,%rbx,8), %r13
// 242: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000244:  R_X86_64_64  PyObject_IsTrue
// 24c: 4c 89 ef                      movq    %r13, %rdi
// 24f: ff d0                         callq   *%rax
// 251: 89 c5                         movl    %eax, %ebp
// 253: 49 8b 45 00                   movq    (%r13), %rax
// 257: 48 85 c0                      testq   %rax, %rax
// 25a: 7f 22                         jg      0x27e <_JIT_ENTRY+0x27e>
// 25c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000025e:  R_X86_64_64  .rodata.str1.1
// 266: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000268:  R_X86_64_64  _Py_NegativeRefcount
// 270: be 86 00 00 00                movl    $0x86, %esi
// 275: 4c 89 ea                      movq    %r13, %rdx
// 278: ff d0                         callq   *%rax
// 27a: 49 8b 45 00                   movq    (%r13), %rax
// 27e: 85 c0                         testl   %eax, %eax
// 280: 78 21                         js      0x2a3 <_JIT_ENTRY+0x2a3>
// 282: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000284:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 28c: ff d0                         callq   *%rax
// 28e: 49 ff 4d 00                   decq    (%r13)
// 292: 75 0f                         jne     0x2a3 <_JIT_ENTRY+0x2a3>
// 294: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000296:  R_X86_64_64  _Py_Dealloc
// 29e: 4c 89 ef                      movq    %r13, %rdi
// 2a1: ff d0                         callq   *%rax
// 2a3: 49 8d 04 df                   leaq    (%r15,%rbx,8), %rax
// 2a7: 48 83 c0 f8                   addq    $-0x8, %rax
// 2ab: 85 ed                         testl   %ebp, %ebp
// 2ad: 78 3f                         js      0x2ee <_JIT_ENTRY+0x2ee>
// 2af: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002b1:  R_X86_64_64  _Py_FalseStruct
// 2b9: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002bb:  R_X86_64_64  _Py_TrueStruct
// 2c3: 48 0f 44 d1                   cmoveq  %rcx, %rdx
// 2c7: 48 89 10                      movq    %rdx, (%rax)
// 2ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cc:  R_X86_64_64  _JIT_CONTINUE
// 2d4: 4c 89 f7                      movq    %r14, %rdi
// 2d7: 4c 89 e6                      movq    %r12, %rsi
// 2da: 48 8b 14 24                   movq    (%rsp), %rdx
// 2de: 48 83 c4 28                   addq    $0x28, %rsp
// 2e2: 5b                            popq    %rbx
// 2e3: 41 5c                         popq    %r12
// 2e5: 41 5d                         popq    %r13
// 2e7: 41 5e                         popq    %r14
// 2e9: 41 5f                         popq    %r15
// 2eb: 5d                            popq    %rbp
// 2ec: ff e0                         jmpq    *%rax
// 2ee: 4c 29 f0                      subq    %r14, %rax
// 2f1: 48 83 c0 b8                   addq    $-0x48, %rax
// 2f5: 48 c1 e8 03                   shrq    $0x3, %rax
// 2f9: 41 89 46 40                   movl    %eax, 0x40(%r14)
// 2fd: 31 c0                         xorl    %eax, %eax
// 2ff: e9 ac fd ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 304: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_TO_BOOL_code_body[773] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd7, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xdf, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xcf, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x78, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x18, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x14, 0x24, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xaa, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x04, 0xc7, 0x4d, 0x85, 0xed, 0x4c, 0x8b, 0x74, 0x24, 0x20, 0x0f, 0x84, 0x7b, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x4d, 0x8d, 0x24, 0xcf, 0x4c, 0x89, 0x28, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0x9b, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x84, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0xe9, 0x41, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xdb, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x37, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xd8, 0x4d, 0x8b, 0x6c, 0xdf, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x86, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xdf, 0x48, 0x83, 0xc0, 0xf8, 0x85, 0xed, 0x78, 0x3f, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xd1, 0x48, 0x89, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x29, 0xf0, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x46, 0x40, 0x31, 0xc0, 0xe9, 0xac, 0xfd, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_TO_BOOL_code_holes[23] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x244, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_IsTrue, 0x0},
    {0x25e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x268, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x284, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x296, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x2bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x2cc, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_TO_BOOL_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_TO_BOOL_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_TO_BOOL_ALWAYS_TRUE
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_TO_BOOL_ALWAYS_TRUE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c c6                   leaq    (%r14,%r8,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 49 29 de                      subq    %rbx, %r14
// 8b: 49 83 c6 b8                   addq    $-0x48, %r14
// 8f: 49 c1 ee 03                   shrq    $0x3, %r14
// 93: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 97: 48 8b 03                      movq    (%rbx), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c4: 4c 89 0c 24                   movq    %r9, (%rsp)
// c8: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cd: 48 89 5c 24 20                movq    %rbx, 0x20(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 b6 00 00 00             je      0x1b9 <_JIT_ENTRY+0x1b9>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 135: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 13a: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 13f: 78 21                         js      0x162 <_JIT_ENTRY+0x162>
// 141: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000143:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 14b: ff d0                         callq   *%rax
// 14d: 49 ff 0c 24                   decq    (%r12)
// 151: 75 0f                         jne     0x162 <_JIT_ENTRY+0x162>
// 153: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000155:  R_X86_64_64  _Py_Dealloc
// 15d: 4c 89 e7                      movq    %r12, %rdi
// 160: ff d0                         callq   *%rax
// 162: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 167: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 16b: 4d 85 ed                      testq   %r13, %r13
// 16e: 74 34                         je      0x1a4 <_JIT_ENTRY+0x1a4>
// 170: 48 8b 0c 24                   movq    (%rsp), %rcx
// 174: 4d 8d 24 ce                   leaq    (%r14,%rcx,8), %r12
// 178: 4c 89 28                      movq    %r13, (%rax)
// 17b: 49 8b 47 10                   movq    0x10(%r15), %rax
// 17f: 48 8b 00                      movq    (%rax), %rax
// 182: 84 c0                         testb   %al, %al
// 184: 0f 84 af 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 18a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018c:  R_X86_64_64  _Py_HandlePending
// 194: 4c 89 ff                      movq    %r15, %rdi
// 197: ff d0                         callq   *%rax
// 199: 85 c0                         testl   %eax, %eax
// 19b: 0f 84 98 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 1a1: 4c 89 e0                      movq    %r12, %rax
// 1a4: 48 29 d8                      subq    %rbx, %rax
// 1a7: 48 83 c0 b8                   addq    $-0x48, %rax
// 1ab: 48 c1 e8 03                   shrq    $0x3, %rax
// 1af: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1b2: 31 c0                         xorl    %eax, %eax
// 1b4: e9 f7 fe ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 1b9: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1bd: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1c3: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1c7: 31 db                         xorl    %ebx, %ebx
// 1c9: eb 11                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1cb: 0f 1f 44 00 00                nopl    (%rax,%rax)
// 1d0: 48 ff c3                      incq    %rbx
// 1d3: 49 39 df                      cmpq    %rbx, %r15
// 1d6: 0f 84 27 ff ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 1dc: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1e1: 49 8b 45 00                   movq    (%r13), %rax
// 1e5: 48 85 c0                      testq   %rax, %rax
// 1e8: 7e 06                         jle     0x1f0 <_JIT_ENTRY+0x1f0>
// 1ea: 85 c0                         testl   %eax, %eax
// 1ec: 78 e2                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1ee: eb 26                         jmp     0x216 <_JIT_ENTRY+0x216>
// 1f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f2:  R_X86_64_64  .rodata.str1.1
// 1fa: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ff: 4c 89 ea                      movq    %r13, %rdx
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_NegativeRefcount
// 20c: ff d0                         callq   *%rax
// 20e: 49 8b 45 00                   movq    (%r13), %rax
// 212: 85 c0                         testl   %eax, %eax
// 214: 78 ba                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 220: ff d0                         callq   *%rax
// 222: 49 ff 4d 00                   decq    (%r13)
// 226: 75 a8                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 228: 4c 89 ef                      movq    %r13, %rdi
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_Dealloc
// 235: ff d0                         callq   *%rax
// 237: eb 97                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _JIT_OPARG
// 243: f7 d0                         notl    %eax
// 245: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 24a: 48 98                         cltq
// 24c: 4d 8b 6c c6 f8                movq    -0x8(%r14,%rax,8), %r13
// 251: 49 8b 45 08                   movq    0x8(%r13), %rax
// 255: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000257:  R_X86_64_64  _JIT_OPERAND
// 25f: 39 88 80 01 00 00             cmpl    %ecx, 0x180(%rax)
// 265: 0f 85 95 00 00 00             jne     0x300 <_JIT_ENTRY+0x300>
// 26b: 49 8b 45 00                   movq    (%r13), %rax
// 26f: 48 85 c0                      testq   %rax, %rax
// 272: 7f 22                         jg      0x296 <_JIT_ENTRY+0x296>
// 274: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000276:  R_X86_64_64  .rodata.str1.1
// 27e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000280:  R_X86_64_64  _Py_NegativeRefcount
// 288: be db 00 00 00                movl    $0xdb, %esi
// 28d: 4c 89 ea                      movq    %r13, %rdx
// 290: ff d0                         callq   *%rax
// 292: 49 8b 45 00                   movq    (%r13), %rax
// 296: 85 c0                         testl   %eax, %eax
// 298: 78 21                         js      0x2bb <_JIT_ENTRY+0x2bb>
// 29a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a4: ff d0                         callq   *%rax
// 2a6: 49 ff 4d 00                   decq    (%r13)
// 2aa: 75 0f                         jne     0x2bb <_JIT_ENTRY+0x2bb>
// 2ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ae:  R_X86_64_64  _Py_Dealloc
// 2b6: 4c 89 ef                      movq    %r13, %rdi
// 2b9: ff d0                         callq   *%rax
// 2bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bd:  R_X86_64_64  _JIT_OPARG
// 2c5: f7 d0                         notl    %eax
// 2c7: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 2cc: 48 98                         cltq
// 2ce: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002d0:  R_X86_64_64  _Py_TrueStruct
// 2d8: 49 89 4c c6 f8                movq    %rcx, -0x8(%r14,%rax,8)
// 2dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002df:  R_X86_64_64  _JIT_CONTINUE
// 2e7: 48 89 df                      movq    %rbx, %rdi
// 2ea: 4c 89 e6                      movq    %r12, %rsi
// 2ed: 4c 89 fa                      movq    %r15, %rdx
// 2f0: 48 83 c4 28                   addq    $0x28, %rsp
// 2f4: 5b                            popq    %rbx
// 2f5: 41 5c                         popq    %r12
// 2f7: 41 5d                         popq    %r13
// 2f9: 41 5e                         popq    %r14
// 2fb: 41 5f                         popq    %r15
// 2fd: 5d                            popq    %rbp
// 2fe: ff e0                         jmpq    *%rax
// 300: 4d 89 e6                      movq    %r12, %r14
// 303: e9 80 fd ff ff                jmp     0x88 <_JIT_ENTRY+0x88>
// 308: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_TO_BOOL_ALWAYS_TRUE_code_body[777] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xce, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xc6, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x5c, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xb6, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x4d, 0x85, 0xed, 0x74, 0x34, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x24, 0xce, 0x4c, 0x89, 0x28, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xaf, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x98, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xf7, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xdb, 0xeb, 0x11, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0x27, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x6c, 0xc6, 0xf8, 0x49, 0x8b, 0x45, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x88, 0x80, 0x01, 0x00, 0x00, 0x0f, 0x85, 0x95, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x4c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x89, 0xe6, 0xe9, 0x80, 0xfd, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_TO_BOOL_ALWAYS_TRUE_code_holes[23] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x143, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x155, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x257, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x276, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x280, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x29c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2bd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x2df, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_TO_BOOL_ALWAYS_TRUE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_TO_BOOL_ALWAYS_TRUE_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_TO_BOOL_BOOL
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_TO_BOOL_BOOL.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4f 8d 04 c6                   leaq    (%r14,%r8,8), %r8
// 79: 49 8b 38                      movq    (%r8), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 49 29 de                      subq    %rbx, %r14
// 8a: 49 83 c6 b8                   addq    $-0x48, %r14
// 8e: 49 c1 ee 03                   shrq    $0x3, %r14
// 92: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 96: 48 8b 03                      movq    (%rbx), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c3: 4c 89 0c 24                   movq    %r9, (%rsp)
// c7: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cc: 48 85 c0                      testq   %rax, %rax
// cf: 40 0f 94 c5                   sete    %bpl
// d3: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// d7: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// dc: 49 8d 70 08                   leaq    0x8(%r8), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 b1 00 00 00             je      0x1b5 <_JIT_ENTRY+0x1b5>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 136: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 13b: 78 21                         js      0x15e <_JIT_ENTRY+0x15e>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 147: ff d0                         callq   *%rax
// 149: 49 ff 0c 24                   decq    (%r12)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_Dealloc
// 159: 4c 89 e7                      movq    %r12, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 163: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 167: 4d 85 ed                      testq   %r13, %r13
// 16a: 74 34                         je      0x1a0 <_JIT_ENTRY+0x1a0>
// 16c: 48 8b 0c 24                   movq    (%rsp), %rcx
// 170: 4d 8d 24 ce                   leaq    (%r14,%rcx,8), %r12
// 174: 4c 89 28                      movq    %r13, (%rax)
// 177: 49 8b 47 10                   movq    0x10(%r15), %rax
// 17b: 48 8b 00                      movq    (%rax), %rax
// 17e: 84 c0                         testb   %al, %al
// 180: 0f 84 c3 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 186: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000188:  R_X86_64_64  _Py_HandlePending
// 190: 4c 89 ff                      movq    %r15, %rdi
// 193: ff d0                         callq   *%rax
// 195: 85 c0                         testl   %eax, %eax
// 197: 0f 84 ac 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 19d: 4c 89 e0                      movq    %r12, %rax
// 1a0: 48 29 d8                      subq    %rbx, %rax
// 1a3: 48 83 c0 b8                   addq    $-0x48, %rax
// 1a7: 48 c1 e8 03                   shrq    $0x3, %rax
// 1ab: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1ae: 31 c0                         xorl    %eax, %eax
// 1b0: e9 fa fe ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 1b5: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1b9: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1bf: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1c3: 31 ed                         xorl    %ebp, %ebp
// 1c5: eb 15                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c7: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 1d0: 48 ff c5                      incq    %rbp
// 1d3: 49 39 ef                      cmpq    %rbp, %r15
// 1d6: 0f 84 28 ff ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 1dc: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 1e1: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 1e5: 49 8b 45 00                   movq    (%r13), %rax
// 1e9: 48 85 c0                      testq   %rax, %rax
// 1ec: 7e 12                         jle     0x200 <_JIT_ENTRY+0x200>
// 1ee: 85 c0                         testl   %eax, %eax
// 1f0: 78 de                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1f2: eb 32                         jmp     0x226 <_JIT_ENTRY+0x226>
// 1f4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 200: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1
// 20a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 20f: 4c 89 ea                      movq    %r13, %rdx
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: ff d0                         callq   *%rax
// 21e: 49 8b 45 00                   movq    (%r13), %rax
// 222: 85 c0                         testl   %eax, %eax
// 224: 78 aa                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 230: ff d0                         callq   *%rax
// 232: 49 ff 4d 00                   decq    (%r13)
// 236: 75 98                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: ff d0                         callq   *%rax
// 247: eb 87                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _JIT_OPARG
// 253: f7 d0                         notl    %eax
// 255: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 25a: 48 98                         cltq
// 25c: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 261: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000263:  R_X86_64_64  PyBool_Type
// 26b: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 26f: 74 08                         je      0x279 <_JIT_ENTRY+0x279>
// 271: 4d 89 e6                      movq    %r12, %r14
// 274: e9 0e fe ff ff                jmp     0x87 <_JIT_ENTRY+0x87>
// 279: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027b:  R_X86_64_64  _JIT_CONTINUE
// 283: 48 89 df                      movq    %rbx, %rdi
// 286: 4c 89 e6                      movq    %r12, %rsi
// 289: 4c 89 fa                      movq    %r15, %rdx
// 28c: 48 83 c4 28                   addq    $0x28, %rsp
// 290: 5b                            popq    %rbx
// 291: 41 5c                         popq    %r12
// 293: 41 5d                         popq    %r13
// 295: 41 5e                         popq    %r14
// 297: 41 5f                         popq    %r15
// 299: 5d                            popq    %rbp
// 29a: ff e0                         jmpq    *%rax
// 29c: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_TO_BOOL_BOOL_code_body[669] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xce, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4f, 0x8d, 0x04, 0xc6, 0x49, 0x8b, 0x38, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x70, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xb1, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x4d, 0x85, 0xed, 0x74, 0x34, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x24, 0xce, 0x4c, 0x89, 0x28, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xac, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xfa, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xed, 0xeb, 0x15, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xef, 0x0f, 0x84, 0x28, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x08, 0x4d, 0x89, 0xe6, 0xe9, 0x0e, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_TO_BOOL_BOOL_code_holes[17] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyBool_Type, 0x0},
    {0x27b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_TO_BOOL_BOOL_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_TO_BOOL_BOOL_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_TO_BOOL_INT
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_TO_BOOL_INT.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 ff                      movq    %rdi, %r15
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c c6                   leaq    (%r14,%r8,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 fe                      subq    %r15, %r14
// 8b: 49 83 c6 b8                   addq    $-0x48, %r14
// 8f: 49 c1 ee 03                   shrq    $0x3, %r14
// 93: 45 89 77 40                   movl    %r14d, 0x40(%r15)
// 97: 49 8b 07                      movq    (%r15), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 54 24 18                movq    %r10, 0x18(%rsp)
// c4: 4c 89 4c 24 08                movq    %r9, 0x8(%rsp)
// c9: 48 89 14 24                   movq    %rdx, (%rsp)
// cd: 4c 89 7c 24 20                movq    %r15, 0x20(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 b7 00 00 00             je      0x1ba <_JIT_ENTRY+0x1ba>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 48 8b 1c 24                   movq    (%rsp), %rbx
// 10e: 7f 22                         jg      0x132 <_JIT_ENTRY+0x132>
// 110: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000112:  R_X86_64_64  .rodata.str1.1
// 11a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011c:  R_X86_64_64  _Py_NegativeRefcount
// 124: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 129: 4c 89 e2                      movq    %r12, %rdx
// 12c: ff d0                         callq   *%rax
// 12e: 49 8b 04 24                   movq    (%r12), %rax
// 132: 85 c0                         testl   %eax, %eax
// 134: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// 139: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 13e: 78 21                         js      0x161 <_JIT_ENTRY+0x161>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 14a: ff d0                         callq   *%rax
// 14c: 49 ff 0c 24                   decq    (%r12)
// 150: 75 0f                         jne     0x161 <_JIT_ENTRY+0x161>
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  _Py_Dealloc
// 15c: 4c 89 e7                      movq    %r12, %rdi
// 15f: ff d0                         callq   *%rax
// 161: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 166: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 16a: 4d 85 ed                      testq   %r13, %r13
// 16d: 74 35                         je      0x1a4 <_JIT_ENTRY+0x1a4>
// 16f: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 174: 4d 8d 24 ce                   leaq    (%r14,%rcx,8), %r12
// 178: 4c 89 28                      movq    %r13, (%rax)
// 17b: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 17f: 48 8b 00                      movq    (%rax), %rax
// 182: 84 c0                         testb   %al, %al
// 184: 0f 84 af 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 18a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018c:  R_X86_64_64  _Py_HandlePending
// 194: 48 89 df                      movq    %rbx, %rdi
// 197: ff d0                         callq   *%rax
// 199: 85 c0                         testl   %eax, %eax
// 19b: 0f 84 98 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 1a1: 4c 89 e0                      movq    %r12, %rax
// 1a4: 4c 29 f8                      subq    %r15, %rax
// 1a7: 48 83 c0 b8                   addq    $-0x48, %rax
// 1ab: 48 c1 e8 03                   shrq    $0x3, %rax
// 1af: 41 89 47 40                   movl    %eax, 0x40(%r15)
// 1b3: 31 c0                         xorl    %eax, %eax
// 1b5: e9 f6 fe ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 1ba: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1be: bb 01 00 00 00                movl    $0x1, %ebx
// 1c3: 41 0f 43 dd                   cmovael %r13d, %ebx
// 1c7: 45 31 ff                      xorl    %r15d, %r15d
// 1ca: eb 10                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1cc: 0f 1f 40 00                   nopl    (%rax)
// 1d0: 49 ff c7                      incq    %r15
// 1d3: 4c 39 fb                      cmpq    %r15, %rbx
// 1d6: 0f 84 27 ff ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 1dc: 4e 8b 6c fd 00                movq    (%rbp,%r15,8), %r13
// 1e1: 49 8b 45 00                   movq    (%r13), %rax
// 1e5: 48 85 c0                      testq   %rax, %rax
// 1e8: 7e 06                         jle     0x1f0 <_JIT_ENTRY+0x1f0>
// 1ea: 85 c0                         testl   %eax, %eax
// 1ec: 78 e2                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1ee: eb 26                         jmp     0x216 <_JIT_ENTRY+0x216>
// 1f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f2:  R_X86_64_64  .rodata.str1.1
// 1fa: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ff: 4c 89 ea                      movq    %r13, %rdx
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_NegativeRefcount
// 20c: ff d0                         callq   *%rax
// 20e: 49 8b 45 00                   movq    (%r13), %rax
// 212: 85 c0                         testl   %eax, %eax
// 214: 78 ba                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 220: ff d0                         callq   *%rax
// 222: 49 ff 4d 00                   decq    (%r13)
// 226: 75 a8                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 228: 4c 89 ef                      movq    %r13, %rdi
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_Dealloc
// 235: ff d0                         callq   *%rax
// 237: eb 97                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _JIT_OPARG
// 243: f7 d0                         notl    %eax
// 245: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 24a: 48 98                         cltq
// 24c: 4d 8b 6c c6 f8                movq    -0x8(%r14,%rax,8), %r13
// 251: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000253:  R_X86_64_64  PyLong_Type
// 25b: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 25f: 74 08                         je      0x269 <_JIT_ENTRY+0x269>
// 261: 4d 89 e6                      movq    %r12, %r14
// 264: e9 1f fe ff ff                jmp     0x88 <_JIT_ENTRY+0x88>
// 269: 41 8b 45 10                   movl    0x10(%r13), %eax
// 26d: 83 e0 03                      andl    $0x3, %eax
// 270: 83 f8 01                      cmpl    $0x1, %eax
// 273: 75 0c                         jne     0x281 <_JIT_ENTRY+0x281>
// 275: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000277:  R_X86_64_64  _Py_FalseStruct
// 27f: eb 5a                         jmp     0x2db <_JIT_ENTRY+0x2db>
// 281: 49 8b 45 00                   movq    (%r13), %rax
// 285: 48 85 c0                      testq   %rax, %rax
// 288: 7f 22                         jg      0x2ac <_JIT_ENTRY+0x2ac>
// 28a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000028c:  R_X86_64_64  .rodata.str1.1
// 294: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000296:  R_X86_64_64  _Py_NegativeRefcount
// 29e: be a0 00 00 00                movl    $0xa0, %esi
// 2a3: 4c 89 ea                      movq    %r13, %rdx
// 2a6: ff d0                         callq   *%rax
// 2a8: 49 8b 45 00                   movq    (%r13), %rax
// 2ac: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000002ae:  R_X86_64_64  _Py_TrueStruct
// 2b6: 85 c0                         testl   %eax, %eax
// 2b8: 78 21                         js      0x2db <_JIT_ENTRY+0x2db>
// 2ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2c4: ff d0                         callq   *%rax
// 2c6: 49 ff 4d 00                   decq    (%r13)
// 2ca: 75 0f                         jne     0x2db <_JIT_ENTRY+0x2db>
// 2cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ce:  R_X86_64_64  _Py_Dealloc
// 2d6: 4c 89 ef                      movq    %r13, %rdi
// 2d9: ff d0                         callq   *%rax
// 2db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002dd:  R_X86_64_64  _JIT_OPARG
// 2e5: f7 d0                         notl    %eax
// 2e7: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 2ec: 48 98                         cltq
// 2ee: 49 89 5c c6 f8                movq    %rbx, -0x8(%r14,%rax,8)
// 2f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f5:  R_X86_64_64  _JIT_CONTINUE
// 2fd: 4c 89 ff                      movq    %r15, %rdi
// 300: 4c 89 e6                      movq    %r12, %rsi
// 303: 48 8b 14 24                   movq    (%rsp), %rdx
// 307: 48 83 c4 28                   addq    $0x28, %rsp
// 30b: 5b                            popq    %rbx
// 30c: 41 5c                         popq    %r12
// 30e: 41 5d                         popq    %r13
// 310: 41 5e                         popq    %r14
// 312: 41 5f                         popq    %r15
// 314: 5d                            popq    %rbp
// 315: ff e0                         jmpq    *%rax
// 317: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_TO_BOOL_INT_code_body[792] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xff, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xce, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xc6, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x77, 0x40, 0x49, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x4c, 0x24, 0x08, 0x48, 0x89, 0x14, 0x24, 0x4c, 0x89, 0x7c, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xb7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x04, 0xc6, 0x4d, 0x85, 0xed, 0x74, 0x35, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x4d, 0x8d, 0x24, 0xce, 0x4c, 0x89, 0x28, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xaf, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x98, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0x4c, 0x29, 0xf8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x47, 0x40, 0x31, 0xc0, 0xe9, 0xf6, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xdd, 0x45, 0x31, 0xff, 0xeb, 0x10, 0x0f, 0x1f, 0x40, 0x00, 0x49, 0xff, 0xc7, 0x4c, 0x39, 0xfb, 0x0f, 0x84, 0x27, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xfd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x6c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x74, 0x08, 0x4d, 0x89, 0xe6, 0xe9, 0x1f, 0xfe, 0xff, 0xff, 0x41, 0x8b, 0x45, 0x10, 0x83, 0xe0, 0x03, 0x83, 0xf8, 0x01, 0x75, 0x0c, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x5a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xa0, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x5c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_TO_BOOL_INT_code_holes[24] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x11c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x277, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x28c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x296, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2ae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x2bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ce, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2dd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2f5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_TO_BOOL_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_TO_BOOL_INT_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_TO_BOOL_LIST
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_TO_BOOL_LIST.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 ff                      movq    %rdi, %r15
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c c6                   leaq    (%r14,%r8,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 fe                      subq    %r15, %r14
// 8b: 49 83 c6 b8                   addq    $-0x48, %r14
// 8f: 49 c1 ee 03                   shrq    $0x3, %r14
// 93: 45 89 77 40                   movl    %r14d, 0x40(%r15)
// 97: 49 8b 07                      movq    (%r15), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 54 24 18                movq    %r10, 0x18(%rsp)
// c4: 4c 89 4c 24 08                movq    %r9, 0x8(%rsp)
// c9: 48 89 14 24                   movq    %rdx, (%rsp)
// cd: 4c 89 7c 24 20                movq    %r15, 0x20(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 b7 00 00 00             je      0x1ba <_JIT_ENTRY+0x1ba>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 48 8b 1c 24                   movq    (%rsp), %rbx
// 10e: 7f 22                         jg      0x132 <_JIT_ENTRY+0x132>
// 110: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000112:  R_X86_64_64  .rodata.str1.1
// 11a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011c:  R_X86_64_64  _Py_NegativeRefcount
// 124: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 129: 4c 89 e2                      movq    %r12, %rdx
// 12c: ff d0                         callq   *%rax
// 12e: 49 8b 04 24                   movq    (%r12), %rax
// 132: 85 c0                         testl   %eax, %eax
// 134: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// 139: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 13e: 78 21                         js      0x161 <_JIT_ENTRY+0x161>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 14a: ff d0                         callq   *%rax
// 14c: 49 ff 0c 24                   decq    (%r12)
// 150: 75 0f                         jne     0x161 <_JIT_ENTRY+0x161>
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  _Py_Dealloc
// 15c: 4c 89 e7                      movq    %r12, %rdi
// 15f: ff d0                         callq   *%rax
// 161: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 166: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 16a: 4d 85 ed                      testq   %r13, %r13
// 16d: 74 35                         je      0x1a4 <_JIT_ENTRY+0x1a4>
// 16f: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 174: 4d 8d 24 ce                   leaq    (%r14,%rcx,8), %r12
// 178: 4c 89 28                      movq    %r13, (%rax)
// 17b: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 17f: 48 8b 00                      movq    (%rax), %rax
// 182: 84 c0                         testb   %al, %al
// 184: 0f 84 af 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 18a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018c:  R_X86_64_64  _Py_HandlePending
// 194: 48 89 df                      movq    %rbx, %rdi
// 197: ff d0                         callq   *%rax
// 199: 85 c0                         testl   %eax, %eax
// 19b: 0f 84 98 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 1a1: 4c 89 e0                      movq    %r12, %rax
// 1a4: 4c 29 f8                      subq    %r15, %rax
// 1a7: 48 83 c0 b8                   addq    $-0x48, %rax
// 1ab: 48 c1 e8 03                   shrq    $0x3, %rax
// 1af: 41 89 47 40                   movl    %eax, 0x40(%r15)
// 1b3: 31 c0                         xorl    %eax, %eax
// 1b5: e9 f6 fe ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 1ba: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1be: bb 01 00 00 00                movl    $0x1, %ebx
// 1c3: 41 0f 43 dd                   cmovael %r13d, %ebx
// 1c7: 45 31 ff                      xorl    %r15d, %r15d
// 1ca: eb 10                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1cc: 0f 1f 40 00                   nopl    (%rax)
// 1d0: 49 ff c7                      incq    %r15
// 1d3: 4c 39 fb                      cmpq    %r15, %rbx
// 1d6: 0f 84 27 ff ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 1dc: 4e 8b 6c fd 00                movq    (%rbp,%r15,8), %r13
// 1e1: 49 8b 45 00                   movq    (%r13), %rax
// 1e5: 48 85 c0                      testq   %rax, %rax
// 1e8: 7e 06                         jle     0x1f0 <_JIT_ENTRY+0x1f0>
// 1ea: 85 c0                         testl   %eax, %eax
// 1ec: 78 e2                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1ee: eb 26                         jmp     0x216 <_JIT_ENTRY+0x216>
// 1f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f2:  R_X86_64_64  .rodata.str1.1
// 1fa: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ff: 4c 89 ea                      movq    %r13, %rdx
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_NegativeRefcount
// 20c: ff d0                         callq   *%rax
// 20e: 49 8b 45 00                   movq    (%r13), %rax
// 212: 85 c0                         testl   %eax, %eax
// 214: 78 ba                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 220: ff d0                         callq   *%rax
// 222: 49 ff 4d 00                   decq    (%r13)
// 226: 75 a8                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 228: 4c 89 ef                      movq    %r13, %rdi
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_Dealloc
// 235: ff d0                         callq   *%rax
// 237: eb 97                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _JIT_OPARG
// 243: f7 d0                         notl    %eax
// 245: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 24a: 48 98                         cltq
// 24c: 4d 8b 6c c6 f8                movq    -0x8(%r14,%rax,8), %r13
// 251: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000253:  R_X86_64_64  PyList_Type
// 25b: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 25f: 74 08                         je      0x269 <_JIT_ENTRY+0x269>
// 261: 4d 89 e6                      movq    %r12, %r14
// 264: e9 1f fe ff ff                jmp     0x88 <_JIT_ENTRY+0x88>
// 269: 49 8b 45 00                   movq    (%r13), %rax
// 26d: 49 8b 5d 10                   movq    0x10(%r13), %rbx
// 271: 48 85 c0                      testq   %rax, %rax
// 274: 7f 22                         jg      0x298 <_JIT_ENTRY+0x298>
// 276: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000278:  R_X86_64_64  .rodata.str1.1
// 280: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000282:  R_X86_64_64  _Py_NegativeRefcount
// 28a: be ae 00 00 00                movl    $0xae, %esi
// 28f: 4c 89 ea                      movq    %r13, %rdx
// 292: ff d0                         callq   *%rax
// 294: 49 8b 45 00                   movq    (%r13), %rax
// 298: 85 c0                         testl   %eax, %eax
// 29a: 78 21                         js      0x2bd <_JIT_ENTRY+0x2bd>
// 29c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a6: ff d0                         callq   *%rax
// 2a8: 49 ff 4d 00                   decq    (%r13)
// 2ac: 75 0f                         jne     0x2bd <_JIT_ENTRY+0x2bd>
// 2ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b0:  R_X86_64_64  _Py_Dealloc
// 2b8: 4c 89 ef                      movq    %r13, %rdi
// 2bb: ff d0                         callq   *%rax
// 2bd: 48 85 db                      testq   %rbx, %rbx
// 2c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c2:  R_X86_64_64  _Py_FalseStruct
// 2ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002cc:  R_X86_64_64  _Py_TrueStruct
// 2d4: 48 0f 44 c8                   cmoveq  %rax, %rcx
// 2d8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002da:  R_X86_64_64  _JIT_OPARG
// 2e2: f7 d0                         notl    %eax
// 2e4: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 2e9: 48 98                         cltq
// 2eb: 49 89 4c c6 f8                movq    %rcx, -0x8(%r14,%rax,8)
// 2f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f2:  R_X86_64_64  _JIT_CONTINUE
// 2fa: 4c 89 ff                      movq    %r15, %rdi
// 2fd: 4c 89 e6                      movq    %r12, %rsi
// 300: 48 8b 14 24                   movq    (%rsp), %rdx
// 304: 48 83 c4 28                   addq    $0x28, %rsp
// 308: 5b                            popq    %rbx
// 309: 41 5c                         popq    %r12
// 30b: 41 5d                         popq    %r13
// 30d: 41 5e                         popq    %r14
// 30f: 41 5f                         popq    %r15
// 311: 5d                            popq    %rbp
// 312: ff e0                         jmpq    *%rax
// 314: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_TO_BOOL_LIST_code_body[789] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xff, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xce, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xc6, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x77, 0x40, 0x49, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x4c, 0x24, 0x08, 0x48, 0x89, 0x14, 0x24, 0x4c, 0x89, 0x7c, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xb7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x04, 0xc6, 0x4d, 0x85, 0xed, 0x74, 0x35, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x4d, 0x8d, 0x24, 0xce, 0x4c, 0x89, 0x28, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xaf, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x98, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0x4c, 0x29, 0xf8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x47, 0x40, 0x31, 0xc0, 0xe9, 0xf6, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xdd, 0x45, 0x31, 0xff, 0xeb, 0x10, 0x0f, 0x1f, 0x40, 0x00, 0x49, 0xff, 0xc7, 0x4c, 0x39, 0xfb, 0x0f, 0x84, 0x27, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xfd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x6c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x74, 0x08, 0x4d, 0x89, 0xe6, 0xe9, 0x1f, 0xfe, 0xff, 0xff, 0x49, 0x8b, 0x45, 0x00, 0x49, 0x8b, 0x5d, 0x10, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xdb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x4c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_TO_BOOL_LIST_code_holes[24] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x11c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyList_Type, 0x0},
    {0x278, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x282, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x29e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2c2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x2cc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x2da, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2f2, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_TO_BOOL_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_TO_BOOL_LIST_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_TO_BOOL_NONE
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_TO_BOOL_NONE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4f 8d 04 c6                   leaq    (%r14,%r8,8), %r8
// 79: 49 8b 38                      movq    (%r8), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 49 29 de                      subq    %rbx, %r14
// 8a: 49 83 c6 b8                   addq    $-0x48, %r14
// 8e: 49 c1 ee 03                   shrq    $0x3, %r14
// 92: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 96: 48 8b 03                      movq    (%rbx), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c3: 4c 89 0c 24                   movq    %r9, (%rsp)
// c7: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cc: 48 85 c0                      testq   %rax, %rax
// cf: 40 0f 94 c5                   sete    %bpl
// d3: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// d7: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// dc: 49 8d 70 08                   leaq    0x8(%r8), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 b1 00 00 00             je      0x1b5 <_JIT_ENTRY+0x1b5>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 136: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 13b: 78 21                         js      0x15e <_JIT_ENTRY+0x15e>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 147: ff d0                         callq   *%rax
// 149: 49 ff 0c 24                   decq    (%r12)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_Dealloc
// 159: 4c 89 e7                      movq    %r12, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 163: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 167: 4d 85 ed                      testq   %r13, %r13
// 16a: 74 34                         je      0x1a0 <_JIT_ENTRY+0x1a0>
// 16c: 48 8b 0c 24                   movq    (%rsp), %rcx
// 170: 4d 8d 24 ce                   leaq    (%r14,%rcx,8), %r12
// 174: 4c 89 28                      movq    %r13, (%rax)
// 177: 49 8b 47 10                   movq    0x10(%r15), %rax
// 17b: 48 8b 00                      movq    (%rax), %rax
// 17e: 84 c0                         testb   %al, %al
// 180: 0f 84 c3 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 186: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000188:  R_X86_64_64  _Py_HandlePending
// 190: 4c 89 ff                      movq    %r15, %rdi
// 193: ff d0                         callq   *%rax
// 195: 85 c0                         testl   %eax, %eax
// 197: 0f 84 ac 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 19d: 4c 89 e0                      movq    %r12, %rax
// 1a0: 48 29 d8                      subq    %rbx, %rax
// 1a3: 48 83 c0 b8                   addq    $-0x48, %rax
// 1a7: 48 c1 e8 03                   shrq    $0x3, %rax
// 1ab: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1ae: 31 c0                         xorl    %eax, %eax
// 1b0: e9 fa fe ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 1b5: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1b9: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1bf: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1c3: 31 ed                         xorl    %ebp, %ebp
// 1c5: eb 15                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c7: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 1d0: 48 ff c5                      incq    %rbp
// 1d3: 49 39 ef                      cmpq    %rbp, %r15
// 1d6: 0f 84 28 ff ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 1dc: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 1e1: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 1e5: 49 8b 45 00                   movq    (%r13), %rax
// 1e9: 48 85 c0                      testq   %rax, %rax
// 1ec: 7e 12                         jle     0x200 <_JIT_ENTRY+0x200>
// 1ee: 85 c0                         testl   %eax, %eax
// 1f0: 78 de                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1f2: eb 32                         jmp     0x226 <_JIT_ENTRY+0x226>
// 1f4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 200: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1
// 20a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 20f: 4c 89 ea                      movq    %r13, %rdx
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: ff d0                         callq   *%rax
// 21e: 49 8b 45 00                   movq    (%r13), %rax
// 222: 85 c0                         testl   %eax, %eax
// 224: 78 aa                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 230: ff d0                         callq   *%rax
// 232: 49 ff 4d 00                   decq    (%r13)
// 236: 75 98                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: ff d0                         callq   *%rax
// 247: eb 87                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _JIT_OPARG
// 253: f7 d0                         notl    %eax
// 255: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 25a: 48 98                         cltq
// 25c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000025e:  R_X86_64_64  _Py_NoneStruct
// 266: 49 39 4c c6 f8                cmpq    %rcx, -0x8(%r14,%rax,8)
// 26b: 74 08                         je      0x275 <_JIT_ENTRY+0x275>
// 26d: 4d 89 e6                      movq    %r12, %r14
// 270: e9 12 fe ff ff                jmp     0x87 <_JIT_ENTRY+0x87>
// 275: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000277:  R_X86_64_64  _JIT_OPARG
// 27f: f7 d0                         notl    %eax
// 281: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 286: 48 98                         cltq
// 288: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000028a:  R_X86_64_64  _Py_FalseStruct
// 292: 49 89 4c c6 f8                movq    %rcx, -0x8(%r14,%rax,8)
// 297: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000299:  R_X86_64_64  _JIT_CONTINUE
// 2a1: 48 89 df                      movq    %rbx, %rdi
// 2a4: 4c 89 e6                      movq    %r12, %rsi
// 2a7: 4c 89 fa                      movq    %r15, %rdx
// 2aa: 48 83 c4 28                   addq    $0x28, %rsp
// 2ae: 5b                            popq    %rbx
// 2af: 41 5c                         popq    %r12
// 2b1: 41 5d                         popq    %r13
// 2b3: 41 5e                         popq    %r14
// 2b5: 41 5f                         popq    %r15
// 2b7: 5d                            popq    %rbp
// 2b8: ff e0                         jmpq    *%rax
// 2ba: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_TO_BOOL_NONE_code_body[699] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xce, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4f, 0x8d, 0x04, 0xc6, 0x49, 0x8b, 0x38, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x70, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xb1, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x4d, 0x85, 0xed, 0x74, 0x34, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x24, 0xce, 0x4c, 0x89, 0x28, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xac, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xfa, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xed, 0xeb, 0x15, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xef, 0x0f, 0x84, 0x28, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0xc6, 0xf8, 0x74, 0x08, 0x4d, 0x89, 0xe6, 0xe9, 0x12, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x4c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_TO_BOOL_NONE_code_holes[19] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x25e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x277, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x28a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x299, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_TO_BOOL_NONE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_TO_BOOL_NONE_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_TO_BOOL_STR
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_TO_BOOL_STR.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 ff                      movq    %rdi, %r15
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c c6                   leaq    (%r14,%r8,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 fe                      subq    %r15, %r14
// 8b: 49 83 c6 b8                   addq    $-0x48, %r14
// 8f: 49 c1 ee 03                   shrq    $0x3, %r14
// 93: 45 89 77 40                   movl    %r14d, 0x40(%r15)
// 97: 49 8b 07                      movq    (%r15), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 54 24 18                movq    %r10, 0x18(%rsp)
// c4: 4c 89 4c 24 08                movq    %r9, 0x8(%rsp)
// c9: 48 89 14 24                   movq    %rdx, (%rsp)
// cd: 4c 89 7c 24 20                movq    %r15, 0x20(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 b7 00 00 00             je      0x1ba <_JIT_ENTRY+0x1ba>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 48 8b 1c 24                   movq    (%rsp), %rbx
// 10e: 7f 22                         jg      0x132 <_JIT_ENTRY+0x132>
// 110: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000112:  R_X86_64_64  .rodata.str1.1
// 11a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011c:  R_X86_64_64  _Py_NegativeRefcount
// 124: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 129: 4c 89 e2                      movq    %r12, %rdx
// 12c: ff d0                         callq   *%rax
// 12e: 49 8b 04 24                   movq    (%r12), %rax
// 132: 85 c0                         testl   %eax, %eax
// 134: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// 139: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 13e: 78 21                         js      0x161 <_JIT_ENTRY+0x161>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 14a: ff d0                         callq   *%rax
// 14c: 49 ff 0c 24                   decq    (%r12)
// 150: 75 0f                         jne     0x161 <_JIT_ENTRY+0x161>
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  _Py_Dealloc
// 15c: 4c 89 e7                      movq    %r12, %rdi
// 15f: ff d0                         callq   *%rax
// 161: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 166: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 16a: 4d 85 ed                      testq   %r13, %r13
// 16d: 74 35                         je      0x1a4 <_JIT_ENTRY+0x1a4>
// 16f: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 174: 4d 8d 24 ce                   leaq    (%r14,%rcx,8), %r12
// 178: 4c 89 28                      movq    %r13, (%rax)
// 17b: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 17f: 48 8b 00                      movq    (%rax), %rax
// 182: 84 c0                         testb   %al, %al
// 184: 0f 84 af 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 18a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018c:  R_X86_64_64  _Py_HandlePending
// 194: 48 89 df                      movq    %rbx, %rdi
// 197: ff d0                         callq   *%rax
// 199: 85 c0                         testl   %eax, %eax
// 19b: 0f 84 98 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 1a1: 4c 89 e0                      movq    %r12, %rax
// 1a4: 4c 29 f8                      subq    %r15, %rax
// 1a7: 48 83 c0 b8                   addq    $-0x48, %rax
// 1ab: 48 c1 e8 03                   shrq    $0x3, %rax
// 1af: 41 89 47 40                   movl    %eax, 0x40(%r15)
// 1b3: 31 c0                         xorl    %eax, %eax
// 1b5: e9 f6 fe ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 1ba: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1be: bb 01 00 00 00                movl    $0x1, %ebx
// 1c3: 41 0f 43 dd                   cmovael %r13d, %ebx
// 1c7: 45 31 ff                      xorl    %r15d, %r15d
// 1ca: eb 10                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1cc: 0f 1f 40 00                   nopl    (%rax)
// 1d0: 49 ff c7                      incq    %r15
// 1d3: 4c 39 fb                      cmpq    %r15, %rbx
// 1d6: 0f 84 27 ff ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 1dc: 4e 8b 6c fd 00                movq    (%rbp,%r15,8), %r13
// 1e1: 49 8b 45 00                   movq    (%r13), %rax
// 1e5: 48 85 c0                      testq   %rax, %rax
// 1e8: 7e 06                         jle     0x1f0 <_JIT_ENTRY+0x1f0>
// 1ea: 85 c0                         testl   %eax, %eax
// 1ec: 78 e2                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1ee: eb 26                         jmp     0x216 <_JIT_ENTRY+0x216>
// 1f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f2:  R_X86_64_64  .rodata.str1.1
// 1fa: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ff: 4c 89 ea                      movq    %r13, %rdx
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_NegativeRefcount
// 20c: ff d0                         callq   *%rax
// 20e: 49 8b 45 00                   movq    (%r13), %rax
// 212: 85 c0                         testl   %eax, %eax
// 214: 78 ba                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 220: ff d0                         callq   *%rax
// 222: 49 ff 4d 00                   decq    (%r13)
// 226: 75 a8                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 228: 4c 89 ef                      movq    %r13, %rdi
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_Dealloc
// 235: ff d0                         callq   *%rax
// 237: eb 97                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _JIT_OPARG
// 243: f7 d0                         notl    %eax
// 245: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 24a: 48 98                         cltq
// 24c: 4d 8b 6c c6 f8                movq    -0x8(%r14,%rax,8), %r13
// 251: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000253:  R_X86_64_64  PyUnicode_Type
// 25b: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 25f: 74 08                         je      0x269 <_JIT_ENTRY+0x269>
// 261: 4d 89 e6                      movq    %r12, %r14
// 264: e9 1f fe ff ff                jmp     0x88 <_JIT_ENTRY+0x88>
// 269: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026b:  R_X86_64_64  _PyRuntime
// 273: 48 05 00 a1 00 00             addq    $0xa100, %rax           # imm = 0xA100
// 279: 49 39 c5                      cmpq    %rax, %r13
// 27c: 74 5c                         je      0x2da <_JIT_ENTRY+0x2da>
// 27e: 49 8b 45 00                   movq    (%r13), %rax
// 282: 48 85 c0                      testq   %rax, %rax
// 285: 7f 22                         jg      0x2a9 <_JIT_ENTRY+0x2a9>
// 287: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000289:  R_X86_64_64  .rodata.str1.1
// 291: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000293:  R_X86_64_64  _Py_NegativeRefcount
// 29b: be cb 00 00 00                movl    $0xcb, %esi
// 2a0: 4c 89 ea                      movq    %r13, %rdx
// 2a3: ff d0                         callq   *%rax
// 2a5: 49 8b 45 00                   movq    (%r13), %rax
// 2a9: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000002ab:  R_X86_64_64  _Py_TrueStruct
// 2b3: 85 c0                         testl   %eax, %eax
// 2b5: 78 2d                         js      0x2e4 <_JIT_ENTRY+0x2e4>
// 2b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2c1: ff d0                         callq   *%rax
// 2c3: 49 ff 4d 00                   decq    (%r13)
// 2c7: 75 1b                         jne     0x2e4 <_JIT_ENTRY+0x2e4>
// 2c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cb:  R_X86_64_64  _Py_Dealloc
// 2d3: 4c 89 ef                      movq    %r13, %rdi
// 2d6: ff d0                         callq   *%rax
// 2d8: eb 0a                         jmp     0x2e4 <_JIT_ENTRY+0x2e4>
// 2da: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000002dc:  R_X86_64_64  _Py_FalseStruct
// 2e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e6:  R_X86_64_64  _JIT_OPARG
// 2ee: f7 d0                         notl    %eax
// 2f0: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 2f5: 48 98                         cltq
// 2f7: 49 89 5c c6 f8                movq    %rbx, -0x8(%r14,%rax,8)
// 2fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fe:  R_X86_64_64  _JIT_CONTINUE
// 306: 4c 89 ff                      movq    %r15, %rdi
// 309: 4c 89 e6                      movq    %r12, %rsi
// 30c: 48 8b 14 24                   movq    (%rsp), %rdx
// 310: 48 83 c4 28                   addq    $0x28, %rsp
// 314: 5b                            popq    %rbx
// 315: 41 5c                         popq    %r12
// 317: 41 5d                         popq    %r13
// 319: 41 5e                         popq    %r14
// 31b: 41 5f                         popq    %r15
// 31d: 5d                            popq    %rbp
// 31e: ff e0                         jmpq    *%rax
// 320: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_TO_BOOL_STR_code_body[801] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xff, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xce, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xc6, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x77, 0x40, 0x49, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x4c, 0x24, 0x08, 0x48, 0x89, 0x14, 0x24, 0x4c, 0x89, 0x7c, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xb7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x04, 0xc6, 0x4d, 0x85, 0xed, 0x74, 0x35, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x4d, 0x8d, 0x24, 0xce, 0x4c, 0x89, 0x28, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xaf, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x98, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0x4c, 0x29, 0xf8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x47, 0x40, 0x31, 0xc0, 0xe9, 0xf6, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xdd, 0x45, 0x31, 0xff, 0xeb, 0x10, 0x0f, 0x1f, 0x40, 0x00, 0x49, 0xff, 0xc7, 0x4c, 0x39, 0xfb, 0x0f, 0x84, 0x27, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xfd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x6c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x74, 0x08, 0x4d, 0x89, 0xe6, 0xe9, 0x1f, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x05, 0x00, 0xa1, 0x00, 0x00, 0x49, 0x39, 0xc5, 0x74, 0x5c, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xcb, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x2d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x1b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0xeb, 0x0a, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x5c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_TO_BOOL_STR_code_holes[25] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x11c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x26b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x289, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x293, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x2b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2dc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x2e6, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2fe, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_TO_BOOL_STR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_TO_BOOL_STR_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_UNARY_INVERT
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_UNARY_INVERT.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d7                   movq    (%r15,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 df                   movq    (%r15,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c cf                   leaq    (%r15,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 c7                      subq    %r8, %r15
// 8b: 49 83 c7 b8                   addq    $-0x48, %r15
// 8f: 49 c1 ef 03                   shrq    $0x3, %r15
// 93: 45 89 78 40                   movl    %r15d, 0x40(%r8)
// 97: 49 8b 00                      movq    (%r8), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 5c 24 18                movq    %r11, 0x18(%rsp)
// c4: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// c9: 48 89 14 24                   movq    %rdx, (%rsp)
// cd: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 aa 00 00 00             je      0x1ad <_JIT_ENTRY+0x1ad>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 1c 24                   movq    (%rsp), %rbx
// 134: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 139: 78 21                         js      0x15c <_JIT_ENTRY+0x15c>
// 13b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 145: ff d0                         callq   *%rax
// 147: 49 ff 0c 24                   decq    (%r12)
// 14b: 75 0f                         jne     0x15c <_JIT_ENTRY+0x15c>
// 14d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014f:  R_X86_64_64  _Py_Dealloc
// 157: 4c 89 e7                      movq    %r12, %rdi
// 15a: ff d0                         callq   *%rax
// 15c: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 161: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 165: 4d 85 ed                      testq   %r13, %r13
// 168: 4c 8b 74 24 20                movq    0x20(%rsp), %r14
// 16d: 0f 84 65 01 00 00             je      0x2d8 <_JIT_ENTRY+0x2d8>
// 173: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 178: 4d 8d 24 cf                   leaq    (%r15,%rcx,8), %r12
// 17c: 4c 89 28                      movq    %r13, (%rax)
// 17f: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 183: 48 8b 00                      movq    (%rax), %rax
// 186: 84 c0                         testb   %al, %al
// 188: 0f 84 9b 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_HandlePending
// 198: 48 89 df                      movq    %rbx, %rdi
// 19b: ff d0                         callq   *%rax
// 19d: 85 c0                         testl   %eax, %eax
// 19f: 0f 84 84 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 1a5: 4c 89 e0                      movq    %r12, %rax
// 1a8: e9 2b 01 00 00                jmp     0x2d8 <_JIT_ENTRY+0x2d8>
// 1ad: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1b1: 41 be 01 00 00 00             movl    $0x1, %r14d
// 1b7: 45 0f 43 f5                   cmovael %r13d, %r14d
// 1bb: 31 db                         xorl    %ebx, %ebx
// 1bd: eb 0d                         jmp     0x1cc <_JIT_ENTRY+0x1cc>
// 1bf: 90                            nop
// 1c0: 48 ff c3                      incq    %rbx
// 1c3: 49 39 de                      cmpq    %rbx, %r14
// 1c6: 0f 84 37 ff ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 1cc: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1d1: 49 8b 45 00                   movq    (%r13), %rax
// 1d5: 48 85 c0                      testq   %rax, %rax
// 1d8: 7e 06                         jle     0x1e0 <_JIT_ENTRY+0x1e0>
// 1da: 85 c0                         testl   %eax, %eax
// 1dc: 78 e2                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 1de: eb 26                         jmp     0x206 <_JIT_ENTRY+0x206>
// 1e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e2:  R_X86_64_64  .rodata.str1.1
// 1ea: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ef: 4c 89 ea                      movq    %r13, %rdx
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _Py_NegativeRefcount
// 1fc: ff d0                         callq   *%rax
// 1fe: 49 8b 45 00                   movq    (%r13), %rax
// 202: 85 c0                         testl   %eax, %eax
// 204: 78 ba                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 210: ff d0                         callq   *%rax
// 212: 49 ff 4d 00                   decq    (%r13)
// 216: 75 a8                         jne     0x1c0 <_JIT_ENTRY+0x1c0>
// 218: 4c 89 ef                      movq    %r13, %rdi
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_Dealloc
// 225: ff d0                         callq   *%rax
// 227: eb 97                         jmp     0x1c0 <_JIT_ENTRY+0x1c0>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _JIT_OPARG
// 233: f7 d0                         notl    %eax
// 235: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 23a: 48 63 d8                      movslq  %eax, %rbx
// 23d: 49 8b 6c df f8                movq    -0x8(%r15,%rbx,8), %rbp
// 242: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000244:  R_X86_64_64  PyNumber_Invert
// 24c: 48 89 ef                      movq    %rbp, %rdi
// 24f: ff d0                         callq   *%rax
// 251: 49 89 c5                      movq    %rax, %r13
// 254: 48 8b 45 00                   movq    (%rbp), %rax
// 258: 48 85 c0                      testq   %rax, %rax
// 25b: 7f 22                         jg      0x27f <_JIT_ENTRY+0x27f>
// 25d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000025f:  R_X86_64_64  .rodata.str1.1
// 267: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000269:  R_X86_64_64  _Py_NegativeRefcount
// 271: be e6 00 00 00                movl    $0xe6, %esi
// 276: 48 89 ea                      movq    %rbp, %rdx
// 279: ff d0                         callq   *%rax
// 27b: 48 8b 45 00                   movq    (%rbp), %rax
// 27f: 85 c0                         testl   %eax, %eax
// 281: 78 21                         js      0x2a4 <_JIT_ENTRY+0x2a4>
// 283: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000285:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 28d: ff d0                         callq   *%rax
// 28f: 48 ff 4d 00                   decq    (%rbp)
// 293: 75 0f                         jne     0x2a4 <_JIT_ENTRY+0x2a4>
// 295: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000297:  R_X86_64_64  _Py_Dealloc
// 29f: 48 89 ef                      movq    %rbp, %rdi
// 2a2: ff d0                         callq   *%rax
// 2a4: 49 8d 04 df                   leaq    (%r15,%rbx,8), %rax
// 2a8: 48 83 c0 f8                   addq    $-0x8, %rax
// 2ac: 4d 85 ed                      testq   %r13, %r13
// 2af: 74 27                         je      0x2d8 <_JIT_ENTRY+0x2d8>
// 2b1: 4c 89 28                      movq    %r13, (%rax)
// 2b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b6:  R_X86_64_64  _JIT_CONTINUE
// 2be: 4c 89 f7                      movq    %r14, %rdi
// 2c1: 4c 89 e6                      movq    %r12, %rsi
// 2c4: 48 8b 14 24                   movq    (%rsp), %rdx
// 2c8: 48 83 c4 28                   addq    $0x28, %rsp
// 2cc: 5b                            popq    %rbx
// 2cd: 41 5c                         popq    %r12
// 2cf: 41 5d                         popq    %r13
// 2d1: 41 5e                         popq    %r14
// 2d3: 41 5f                         popq    %r15
// 2d5: 5d                            popq    %rbp
// 2d6: ff e0                         jmpq    *%rax
// 2d8: 4c 29 f0                      subq    %r14, %rax
// 2db: 48 83 c0 b8                   addq    $-0x48, %rax
// 2df: 48 c1 e8 03                   shrq    $0x3, %rax
// 2e3: 41 89 46 40                   movl    %eax, 0x40(%r14)
// 2e7: 31 c0                         xorl    %eax, %eax
// 2e9: e9 c2 fd ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 2ee: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_UNARY_INVERT_code_body[751] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd7, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xdf, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xcf, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x78, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x18, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x14, 0x24, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xaa, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x04, 0xc7, 0x4d, 0x85, 0xed, 0x4c, 0x8b, 0x74, 0x24, 0x20, 0x0f, 0x84, 0x65, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x4d, 0x8d, 0x24, 0xcf, 0x4c, 0x89, 0x28, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0x9b, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x84, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0xe9, 0x2b, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xdb, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x37, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xd8, 0x49, 0x8b, 0x6c, 0xdf, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe6, 0x00, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xdf, 0x48, 0x83, 0xc0, 0xf8, 0x4d, 0x85, 0xed, 0x74, 0x27, 0x4c, 0x89, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x29, 0xf0, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x46, 0x40, 0x31, 0xc0, 0xe9, 0xc2, 0xfd, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_UNARY_INVERT_code_holes[21] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x244, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyNumber_Invert, 0x0},
    {0x25f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x269, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x285, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x297, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2b6, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_UNARY_INVERT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_UNARY_INVERT_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_UNARY_NEGATIVE
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_UNARY_NEGATIVE.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d7                   movq    (%r15,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 df                   movq    (%r15,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c cf                   leaq    (%r15,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 c7                      subq    %r8, %r15
// 8b: 49 83 c7 b8                   addq    $-0x48, %r15
// 8f: 49 c1 ef 03                   shrq    $0x3, %r15
// 93: 45 89 78 40                   movl    %r15d, 0x40(%r8)
// 97: 49 8b 00                      movq    (%r8), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 5c 24 18                movq    %r11, 0x18(%rsp)
// c4: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// c9: 48 89 14 24                   movq    %rdx, (%rsp)
// cd: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 aa 00 00 00             je      0x1ad <_JIT_ENTRY+0x1ad>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 1c 24                   movq    (%rsp), %rbx
// 134: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 139: 78 21                         js      0x15c <_JIT_ENTRY+0x15c>
// 13b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 145: ff d0                         callq   *%rax
// 147: 49 ff 0c 24                   decq    (%r12)
// 14b: 75 0f                         jne     0x15c <_JIT_ENTRY+0x15c>
// 14d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014f:  R_X86_64_64  _Py_Dealloc
// 157: 4c 89 e7                      movq    %r12, %rdi
// 15a: ff d0                         callq   *%rax
// 15c: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 161: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 165: 4d 85 ed                      testq   %r13, %r13
// 168: 4c 8b 74 24 20                movq    0x20(%rsp), %r14
// 16d: 0f 84 65 01 00 00             je      0x2d8 <_JIT_ENTRY+0x2d8>
// 173: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 178: 4d 8d 24 cf                   leaq    (%r15,%rcx,8), %r12
// 17c: 4c 89 28                      movq    %r13, (%rax)
// 17f: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 183: 48 8b 00                      movq    (%rax), %rax
// 186: 84 c0                         testb   %al, %al
// 188: 0f 84 9b 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_HandlePending
// 198: 48 89 df                      movq    %rbx, %rdi
// 19b: ff d0                         callq   *%rax
// 19d: 85 c0                         testl   %eax, %eax
// 19f: 0f 84 84 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 1a5: 4c 89 e0                      movq    %r12, %rax
// 1a8: e9 2b 01 00 00                jmp     0x2d8 <_JIT_ENTRY+0x2d8>
// 1ad: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1b1: 41 be 01 00 00 00             movl    $0x1, %r14d
// 1b7: 45 0f 43 f5                   cmovael %r13d, %r14d
// 1bb: 31 db                         xorl    %ebx, %ebx
// 1bd: eb 0d                         jmp     0x1cc <_JIT_ENTRY+0x1cc>
// 1bf: 90                            nop
// 1c0: 48 ff c3                      incq    %rbx
// 1c3: 49 39 de                      cmpq    %rbx, %r14
// 1c6: 0f 84 37 ff ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 1cc: 4c 8b 6c dd 00                movq    (%rbp,%rbx,8), %r13
// 1d1: 49 8b 45 00                   movq    (%r13), %rax
// 1d5: 48 85 c0                      testq   %rax, %rax
// 1d8: 7e 06                         jle     0x1e0 <_JIT_ENTRY+0x1e0>
// 1da: 85 c0                         testl   %eax, %eax
// 1dc: 78 e2                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 1de: eb 26                         jmp     0x206 <_JIT_ENTRY+0x206>
// 1e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e2:  R_X86_64_64  .rodata.str1.1
// 1ea: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ef: 4c 89 ea                      movq    %r13, %rdx
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _Py_NegativeRefcount
// 1fc: ff d0                         callq   *%rax
// 1fe: 49 8b 45 00                   movq    (%r13), %rax
// 202: 85 c0                         testl   %eax, %eax
// 204: 78 ba                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 210: ff d0                         callq   *%rax
// 212: 49 ff 4d 00                   decq    (%r13)
// 216: 75 a8                         jne     0x1c0 <_JIT_ENTRY+0x1c0>
// 218: 4c 89 ef                      movq    %r13, %rdi
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_Dealloc
// 225: ff d0                         callq   *%rax
// 227: eb 97                         jmp     0x1c0 <_JIT_ENTRY+0x1c0>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _JIT_OPARG
// 233: f7 d0                         notl    %eax
// 235: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 23a: 48 63 d8                      movslq  %eax, %rbx
// 23d: 49 8b 6c df f8                movq    -0x8(%r15,%rbx,8), %rbp
// 242: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000244:  R_X86_64_64  PyNumber_Negative
// 24c: 48 89 ef                      movq    %rbp, %rdi
// 24f: ff d0                         callq   *%rax
// 251: 49 89 c5                      movq    %rax, %r13
// 254: 48 8b 45 00                   movq    (%rbp), %rax
// 258: 48 85 c0                      testq   %rax, %rax
// 25b: 7f 22                         jg      0x27f <_JIT_ENTRY+0x27f>
// 25d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000025f:  R_X86_64_64  .rodata.str1.1
// 267: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000269:  R_X86_64_64  _Py_NegativeRefcount
// 271: be 71 00 00 00                movl    $0x71, %esi
// 276: 48 89 ea                      movq    %rbp, %rdx
// 279: ff d0                         callq   *%rax
// 27b: 48 8b 45 00                   movq    (%rbp), %rax
// 27f: 85 c0                         testl   %eax, %eax
// 281: 78 21                         js      0x2a4 <_JIT_ENTRY+0x2a4>
// 283: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000285:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 28d: ff d0                         callq   *%rax
// 28f: 48 ff 4d 00                   decq    (%rbp)
// 293: 75 0f                         jne     0x2a4 <_JIT_ENTRY+0x2a4>
// 295: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000297:  R_X86_64_64  _Py_Dealloc
// 29f: 48 89 ef                      movq    %rbp, %rdi
// 2a2: ff d0                         callq   *%rax
// 2a4: 49 8d 04 df                   leaq    (%r15,%rbx,8), %rax
// 2a8: 48 83 c0 f8                   addq    $-0x8, %rax
// 2ac: 4d 85 ed                      testq   %r13, %r13
// 2af: 74 27                         je      0x2d8 <_JIT_ENTRY+0x2d8>
// 2b1: 4c 89 28                      movq    %r13, (%rax)
// 2b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b6:  R_X86_64_64  _JIT_CONTINUE
// 2be: 4c 89 f7                      movq    %r14, %rdi
// 2c1: 4c 89 e6                      movq    %r12, %rsi
// 2c4: 48 8b 14 24                   movq    (%rsp), %rdx
// 2c8: 48 83 c4 28                   addq    $0x28, %rsp
// 2cc: 5b                            popq    %rbx
// 2cd: 41 5c                         popq    %r12
// 2cf: 41 5d                         popq    %r13
// 2d1: 41 5e                         popq    %r14
// 2d3: 41 5f                         popq    %r15
// 2d5: 5d                            popq    %rbp
// 2d6: ff e0                         jmpq    *%rax
// 2d8: 4c 29 f0                      subq    %r14, %rax
// 2db: 48 83 c0 b8                   addq    $-0x48, %rax
// 2df: 48 c1 e8 03                   shrq    $0x3, %rax
// 2e3: 41 89 46 40                   movl    %eax, 0x40(%r14)
// 2e7: 31 c0                         xorl    %eax, %eax
// 2e9: e9 c2 fd ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 2ee: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_UNARY_NEGATIVE_code_body[751] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd7, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xdf, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xcf, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x78, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x18, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x14, 0x24, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xaa, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x04, 0xc7, 0x4d, 0x85, 0xed, 0x4c, 0x8b, 0x74, 0x24, 0x20, 0x0f, 0x84, 0x65, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x4d, 0x8d, 0x24, 0xcf, 0x4c, 0x89, 0x28, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0x9b, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x84, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0xe9, 0x2b, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xdb, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xde, 0x0f, 0x84, 0x37, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0xdd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xd8, 0x49, 0x8b, 0x6c, 0xdf, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x71, 0x00, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xdf, 0x48, 0x83, 0xc0, 0xf8, 0x4d, 0x85, 0xed, 0x74, 0x27, 0x4c, 0x89, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x29, 0xf0, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x46, 0x40, 0x31, 0xc0, 0xe9, 0xc2, 0xfd, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_UNARY_NEGATIVE_code_holes[21] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x244, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyNumber_Negative, 0x0},
    {0x25f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x269, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x285, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x297, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2b6, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_UNARY_NEGATIVE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_UNARY_NEGATIVE_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_UNARY_NOT
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_UNARY_NOT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4f 8d 04 c6                   leaq    (%r14,%r8,8), %r8
// 79: 49 8b 38                      movq    (%r8), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 37                         je      0xbe <_JIT_ENTRY+0xbe>
// 87: 49 29 de                      subq    %rbx, %r14
// 8a: 49 83 c6 b8                   addq    $-0x48, %r14
// 8e: 49 c1 ee 03                   shrq    $0x3, %r14
// 92: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 96: 48 8b 03                      movq    (%rbx), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_TARGET
// a3: 89 c9                         movl    %ecx, %ecx
// a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// af: 48 83 c4 28                   addq    $0x28, %rsp
// b3: 5b                            popq    %rbx
// b4: 41 5c                         popq    %r12
// b6: 41 5d                         popq    %r13
// b8: 41 5e                         popq    %r14
// ba: 41 5f                         popq    %r15
// bc: 5d                            popq    %rbp
// bd: c3                            retq
// be: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// c3: 4c 89 0c 24                   movq    %r9, (%rsp)
// c7: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// cc: 48 85 c0                      testq   %rax, %rax
// cf: 40 0f 94 c5                   sete    %bpl
// d3: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// d7: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// dc: 49 8d 70 08                   leaq    0x8(%r8), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 40 84 c5                      testb   %al, %bpl
// fe: 0f 84 b1 00 00 00             je      0x1b5 <_JIT_ENTRY+0x1b5>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 136: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 13b: 78 21                         js      0x15e <_JIT_ENTRY+0x15e>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 147: ff d0                         callq   *%rax
// 149: 49 ff 0c 24                   decq    (%r12)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_Dealloc
// 159: 4c 89 e7                      movq    %r12, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 163: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 167: 4d 85 ed                      testq   %r13, %r13
// 16a: 74 34                         je      0x1a0 <_JIT_ENTRY+0x1a0>
// 16c: 48 8b 0c 24                   movq    (%rsp), %rcx
// 170: 4d 8d 24 ce                   leaq    (%r14,%rcx,8), %r12
// 174: 4c 89 28                      movq    %r13, (%rax)
// 177: 49 8b 47 10                   movq    0x10(%r15), %rax
// 17b: 48 8b 00                      movq    (%rax), %rax
// 17e: 84 c0                         testb   %al, %al
// 180: 0f 84 c3 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 186: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000188:  R_X86_64_64  _Py_HandlePending
// 190: 4c 89 ff                      movq    %r15, %rdi
// 193: ff d0                         callq   *%rax
// 195: 85 c0                         testl   %eax, %eax
// 197: 0f 84 ac 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 19d: 4c 89 e0                      movq    %r12, %rax
// 1a0: 48 29 d8                      subq    %rbx, %rax
// 1a3: 48 83 c0 b8                   addq    $-0x48, %rax
// 1a7: 48 c1 e8 03                   shrq    $0x3, %rax
// 1ab: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1ae: 31 c0                         xorl    %eax, %eax
// 1b0: e9 fa fe ff ff                jmp     0xaf <_JIT_ENTRY+0xaf>
// 1b5: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1b9: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 1bf: 45 0f 43 fd                   cmovael %r13d, %r15d
// 1c3: 31 ed                         xorl    %ebp, %ebp
// 1c5: eb 15                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c7: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 1d0: 48 ff c5                      incq    %rbp
// 1d3: 49 39 ef                      cmpq    %rbp, %r15
// 1d6: 0f 84 28 ff ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 1dc: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 1e1: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 1e5: 49 8b 45 00                   movq    (%r13), %rax
// 1e9: 48 85 c0                      testq   %rax, %rax
// 1ec: 7e 12                         jle     0x200 <_JIT_ENTRY+0x200>
// 1ee: 85 c0                         testl   %eax, %eax
// 1f0: 78 de                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1f2: eb 32                         jmp     0x226 <_JIT_ENTRY+0x226>
// 1f4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 200: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1
// 20a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 20f: 4c 89 ea                      movq    %r13, %rdx
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: ff d0                         callq   *%rax
// 21e: 49 8b 45 00                   movq    (%r13), %rax
// 222: 85 c0                         testl   %eax, %eax
// 224: 78 aa                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 230: ff d0                         callq   *%rax
// 232: 49 ff 4d 00                   decq    (%r13)
// 236: 75 98                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: ff d0                         callq   *%rax
// 247: eb 87                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _JIT_OPARG
// 253: f7 d0                         notl    %eax
// 255: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 25a: 48 98                         cltq
// 25c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000025e:  R_X86_64_64  _Py_FalseStruct
// 266: 49 39 4c c6 f8                cmpq    %rcx, -0x8(%r14,%rax,8)
// 26b: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000026d:  R_X86_64_64  _Py_TrueStruct
// 275: 48 0f 45 d1                   cmovneq %rcx, %rdx
// 279: 49 89 54 c6 f8                movq    %rdx, -0x8(%r14,%rax,8)
// 27e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000280:  R_X86_64_64  _JIT_CONTINUE
// 288: 48 89 df                      movq    %rbx, %rdi
// 28b: 4c 89 e6                      movq    %r12, %rsi
// 28e: 4c 89 fa                      movq    %r15, %rdx
// 291: 48 83 c4 28                   addq    $0x28, %rsp
// 295: 5b                            popq    %rbx
// 296: 41 5c                         popq    %r12
// 298: 41 5d                         popq    %r13
// 29a: 41 5e                         popq    %r14
// 29c: 41 5f                         popq    %r15
// 29e: 5d                            popq    %rbp
// 29f: ff e0                         jmpq    *%rax
// 2a1: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_UNARY_NOT_code_body[674] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xce, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4f, 0x8d, 0x04, 0xc6, 0x49, 0x8b, 0x38, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x4c, 0x89, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x70, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xb1, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x4d, 0x85, 0xed, 0x74, 0x34, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x24, 0xce, 0x4c, 0x89, 0x28, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xac, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xfa, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xed, 0xeb, 0x15, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xef, 0x0f, 0x84, 0x28, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0xc6, 0xf8, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x45, 0xd1, 0x49, 0x89, 0x54, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_UNARY_NOT_code_holes[18] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x25e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x26d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x280, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_UNARY_NOT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_UNARY_NOT_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_UNPACK_EX
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_UNPACK_EX.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d7                   movq    (%r15,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 df                   movq    (%r15,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c cf                   leaq    (%r15,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 c7                      subq    %r8, %r15
// 8b: 49 83 c7 b8                   addq    $-0x48, %r15
// 8f: 49 c1 ef 03                   shrq    $0x3, %r15
// 93: 45 89 78 40                   movl    %r15d, 0x40(%r8)
// 97: 49 8b 00                      movq    (%r8), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 5c 24 18                movq    %r11, 0x18(%rsp)
// c4: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// c9: 48 89 54 24 20                movq    %rdx, 0x20(%rsp)
// ce: 4c 89 04 24                   movq    %r8, (%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 a6 00 00 00             je      0x1a9 <_JIT_ENTRY+0x1a9>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 135: 78 21                         js      0x158 <_JIT_ENTRY+0x158>
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 141: ff d0                         callq   *%rax
// 143: 49 ff 0c 24                   decq    (%r12)
// 147: 75 0f                         jne     0x158 <_JIT_ENTRY+0x158>
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_Dealloc
// 153: 4c 89 e7                      movq    %r12, %rdi
// 156: ff d0                         callq   *%rax
// 158: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 15d: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 161: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 166: 48 85 c9                      testq   %rcx, %rcx
// 169: 0f 84 9c 01 00 00             je      0x30b <_JIT_ENTRY+0x30b>
// 16f: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 174: 4d 8d 34 c7                   leaq    (%r15,%rax,8), %r14
// 178: 48 89 0e                      movq    %rcx, (%rsi)
// 17b: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 17f: 48 8b 00                      movq    (%rax), %rax
// 182: 84 c0                         testb   %al, %al
// 184: 0f 84 9f 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 18a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018c:  R_X86_64_64  _Py_HandlePending
// 194: 48 89 df                      movq    %rbx, %rdi
// 197: ff d0                         callq   *%rax
// 199: 85 c0                         testl   %eax, %eax
// 19b: 0f 84 88 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 1a1: 4c 89 f6                      movq    %r14, %rsi
// 1a4: e9 62 01 00 00                jmp     0x30b <_JIT_ENTRY+0x30b>
// 1a9: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1ad: bb 01 00 00 00                movl    $0x1, %ebx
// 1b2: 41 0f 43 dd                   cmovael %r13d, %ebx
// 1b6: 45 31 f6                      xorl    %r14d, %r14d
// 1b9: eb 11                         jmp     0x1cc <_JIT_ENTRY+0x1cc>
// 1bb: 0f 1f 44 00 00                nopl    (%rax,%rax)
// 1c0: 49 ff c6                      incq    %r14
// 1c3: 4c 39 f3                      cmpq    %r14, %rbx
// 1c6: 0f 84 37 ff ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 1cc: 4e 8b 6c f5 00                movq    (%rbp,%r14,8), %r13
// 1d1: 49 8b 45 00                   movq    (%r13), %rax
// 1d5: 48 85 c0                      testq   %rax, %rax
// 1d8: 7e 06                         jle     0x1e0 <_JIT_ENTRY+0x1e0>
// 1da: 85 c0                         testl   %eax, %eax
// 1dc: 78 e2                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 1de: eb 26                         jmp     0x206 <_JIT_ENTRY+0x206>
// 1e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e2:  R_X86_64_64  .rodata.str1.1
// 1ea: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ef: 4c 89 ea                      movq    %r13, %rdx
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _Py_NegativeRefcount
// 1fc: ff d0                         callq   *%rax
// 1fe: 49 8b 45 00                   movq    (%r13), %rax
// 202: 85 c0                         testl   %eax, %eax
// 204: 78 ba                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 210: ff d0                         callq   *%rax
// 212: 49 ff 4d 00                   decq    (%r13)
// 216: 75 a8                         jne     0x1c0 <_JIT_ENTRY+0x1c0>
// 218: 4c 89 ef                      movq    %r13, %rdi
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_Dealloc
// 225: ff d0                         callq   *%rax
// 227: eb 97                         jmp     0x1c0 <_JIT_ENTRY+0x1c0>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _JIT_OPARG
// 233: 0f b7 c8                      movzwl  %ax, %ecx
// 236: 89 ca                         movl    %ecx, %edx
// 238: f7 d2                         notl    %edx
// 23a: 48 63 f2                      movslq  %edx, %rsi
// 23d: 4d 8b 64 f7 f8                movq    -0x8(%r15,%rsi,8), %r12
// 242: 0f b6 d0                      movzbl  %al, %edx
// 245: c1 e9 08                      shrl    $0x8, %ecx
// 248: 8d 04 0a                      leal    (%rdx,%rcx), %eax
// 24b: ff c0                         incl    %eax
// 24d: 48 01 f0                      addq    %rsi, %rax
// 250: 4d 8d 04 c7                   leaq    (%r15,%rax,8), %r8
// 254: 49 83 c0 f8                   addq    $-0x8, %r8
// 258: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025a:  R_X86_64_64  _PyEval_UnpackIterable
// 262: 48 89 df                      movq    %rbx, %rdi
// 265: 4c 89 e6                      movq    %r12, %rsi
// 268: ff d0                         callq   *%rax
// 26a: 89 c5                         movl    %eax, %ebp
// 26c: 49 8b 04 24                   movq    (%r12), %rax
// 270: 48 85 c0                      testq   %rax, %rax
// 273: 7f 22                         jg      0x297 <_JIT_ENTRY+0x297>
// 275: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000277:  R_X86_64_64  .rodata.str1.1
// 27f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000281:  R_X86_64_64  _Py_NegativeRefcount
// 289: be b7 03 00 00                movl    $0x3b7, %esi            # imm = 0x3B7
// 28e: 4c 89 e2                      movq    %r12, %rdx
// 291: ff d0                         callq   *%rax
// 293: 49 8b 04 24                   movq    (%r12), %rax
// 297: 85 c0                         testl   %eax, %eax
// 299: 78 21                         js      0x2bc <_JIT_ENTRY+0x2bc>
// 29b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a5: ff d0                         callq   *%rax
// 2a7: 49 ff 0c 24                   decq    (%r12)
// 2ab: 75 0f                         jne     0x2bc <_JIT_ENTRY+0x2bc>
// 2ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002af:  R_X86_64_64  _Py_Dealloc
// 2b7: 4c 89 e7                      movq    %r12, %rdi
// 2ba: ff d0                         callq   *%rax
// 2bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002be:  R_X86_64_64  _JIT_OPARG
// 2c6: 0f b6 c8                      movzbl  %al, %ecx
// 2c9: 0f b7 c0                      movzwl  %ax, %eax
// 2cc: 89 c2                         movl    %eax, %edx
// 2ce: c1 ea 08                      shrl    $0x8, %edx
// 2d1: 01 ca                         addl    %ecx, %edx
// 2d3: f7 d0                         notl    %eax
// 2d5: 48 98                         cltq
// 2d7: 48 01 d0                      addq    %rdx, %rax
// 2da: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 2de: 85 ed                         testl   %ebp, %ebp
// 2e0: 49 0f 44 f6                   cmoveq  %r14, %rsi
// 2e4: 74 21                         je      0x307 <_JIT_ENTRY+0x307>
// 2e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e8:  R_X86_64_64  _JIT_CONTINUE
// 2f0: 48 8b 3c 24                   movq    (%rsp), %rdi
// 2f4: 48 89 da                      movq    %rbx, %rdx
// 2f7: 48 83 c4 28                   addq    $0x28, %rsp
// 2fb: 5b                            popq    %rbx
// 2fc: 41 5c                         popq    %r12
// 2fe: 41 5d                         popq    %r13
// 300: 41 5e                         popq    %r14
// 302: 41 5f                         popq    %r15
// 304: 5d                            popq    %rbp
// 305: ff e0                         jmpq    *%rax
// 307: 48 83 c6 f8                   addq    $-0x8, %rsi
// 30b: 48 8b 04 24                   movq    (%rsp), %rax
// 30f: 48 29 c6                      subq    %rax, %rsi
// 312: 48 83 c6 b8                   addq    $-0x48, %rsi
// 316: 48 c1 ee 03                   shrq    $0x3, %rsi
// 31a: 89 70 40                      movl    %esi, 0x40(%rax)
// 31d: 31 c0                         xorl    %eax, %eax
// 31f: e9 8c fd ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 324: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_UNPACK_EX_code_body[805] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd7, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xdf, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xcf, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x78, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x18, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x54, 0x24, 0x20, 0x4c, 0x89, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xa6, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x9c, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x4d, 0x8d, 0x34, 0xc7, 0x48, 0x89, 0x0e, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0x9f, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x88, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf6, 0xe9, 0x62, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xdd, 0x45, 0x31, 0xf6, 0xeb, 0x11, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x49, 0xff, 0xc6, 0x4c, 0x39, 0xf3, 0x0f, 0x84, 0x37, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xf5, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x89, 0xca, 0xf7, 0xd2, 0x48, 0x63, 0xf2, 0x4d, 0x8b, 0x64, 0xf7, 0xf8, 0x0f, 0xb6, 0xd0, 0xc1, 0xe9, 0x08, 0x8d, 0x04, 0x0a, 0xff, 0xc0, 0x48, 0x01, 0xf0, 0x4d, 0x8d, 0x04, 0xc7, 0x49, 0x83, 0xc0, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb7, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb6, 0xc8, 0x0f, 0xb7, 0xc0, 0x89, 0xc2, 0xc1, 0xea, 0x08, 0x01, 0xca, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x01, 0xd0, 0x49, 0x8d, 0x34, 0xc7, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xf6, 0x74, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x29, 0xc6, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x70, 0x40, 0x31, 0xc0, 0xe9, 0x8c, 0xfd, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_UNPACK_EX_code_holes[22] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x25a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_UnpackIterable, 0x0},
    {0x277, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x281, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x29d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2af, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2be, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2e8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_UNPACK_EX_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_UNPACK_EX_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_UNPACK_SEQUENCE
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_UNPACK_SEQUENCE.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d7                   movq    (%r15,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 df                   movq    (%r15,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c cf                   leaq    (%r15,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 c7                      subq    %r8, %r15
// 8b: 49 83 c7 b8                   addq    $-0x48, %r15
// 8f: 49 c1 ef 03                   shrq    $0x3, %r15
// 93: 45 89 78 40                   movl    %r15d, 0x40(%r8)
// 97: 49 8b 00                      movq    (%r8), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 5c 24 18                movq    %r11, 0x18(%rsp)
// c4: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// c9: 48 89 54 24 20                movq    %rdx, 0x20(%rsp)
// ce: 4c 89 04 24                   movq    %r8, (%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 a6 00 00 00             je      0x1a9 <_JIT_ENTRY+0x1a9>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 135: 78 21                         js      0x158 <_JIT_ENTRY+0x158>
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 141: ff d0                         callq   *%rax
// 143: 49 ff 0c 24                   decq    (%r12)
// 147: 75 0f                         jne     0x158 <_JIT_ENTRY+0x158>
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_Dealloc
// 153: 4c 89 e7                      movq    %r12, %rdi
// 156: ff d0                         callq   *%rax
// 158: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 15d: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 161: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 166: 48 85 c9                      testq   %rcx, %rcx
// 169: 0f 84 98 01 00 00             je      0x307 <_JIT_ENTRY+0x307>
// 16f: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 174: 4d 8d 34 c7                   leaq    (%r15,%rax,8), %r14
// 178: 48 89 0e                      movq    %rcx, (%rsi)
// 17b: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 17f: 48 8b 00                      movq    (%rax), %rax
// 182: 84 c0                         testb   %al, %al
// 184: 0f 84 9f 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 18a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018c:  R_X86_64_64  _Py_HandlePending
// 194: 48 89 df                      movq    %rbx, %rdi
// 197: ff d0                         callq   *%rax
// 199: 85 c0                         testl   %eax, %eax
// 19b: 0f 84 88 00 00 00             je      0x229 <_JIT_ENTRY+0x229>
// 1a1: 4c 89 f6                      movq    %r14, %rsi
// 1a4: e9 5e 01 00 00                jmp     0x307 <_JIT_ENTRY+0x307>
// 1a9: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1ad: bb 01 00 00 00                movl    $0x1, %ebx
// 1b2: 41 0f 43 dd                   cmovael %r13d, %ebx
// 1b6: 45 31 f6                      xorl    %r14d, %r14d
// 1b9: eb 11                         jmp     0x1cc <_JIT_ENTRY+0x1cc>
// 1bb: 0f 1f 44 00 00                nopl    (%rax,%rax)
// 1c0: 49 ff c6                      incq    %r14
// 1c3: 4c 39 f3                      cmpq    %r14, %rbx
// 1c6: 0f 84 37 ff ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 1cc: 4e 8b 6c f5 00                movq    (%rbp,%r14,8), %r13
// 1d1: 49 8b 45 00                   movq    (%r13), %rax
// 1d5: 48 85 c0                      testq   %rax, %rax
// 1d8: 7e 06                         jle     0x1e0 <_JIT_ENTRY+0x1e0>
// 1da: 85 c0                         testl   %eax, %eax
// 1dc: 78 e2                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 1de: eb 26                         jmp     0x206 <_JIT_ENTRY+0x206>
// 1e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e2:  R_X86_64_64  .rodata.str1.1
// 1ea: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ef: 4c 89 ea                      movq    %r13, %rdx
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _Py_NegativeRefcount
// 1fc: ff d0                         callq   *%rax
// 1fe: 49 8b 45 00                   movq    (%r13), %rax
// 202: 85 c0                         testl   %eax, %eax
// 204: 78 ba                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 210: ff d0                         callq   *%rax
// 212: 49 ff 4d 00                   decq    (%r13)
// 216: 75 a8                         jne     0x1c0 <_JIT_ENTRY+0x1c0>
// 218: 4c 89 ef                      movq    %r13, %rdi
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_Dealloc
// 225: ff d0                         callq   *%rax
// 227: eb 97                         jmp     0x1c0 <_JIT_ENTRY+0x1c0>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _JIT_OPARG
// 233: 0f b7 d0                      movzwl  %ax, %edx
// 236: 89 d1                         movl    %edx, %ecx
// 238: f7 d1                         notl    %ecx
// 23a: 48 63 c9                      movslq  %ecx, %rcx
// 23d: 4d 8b 64 cf f8                movq    -0x8(%r15,%rcx,8), %r12
// 242: 0f b7 c0                      movzwl  %ax, %eax
// 245: 48 01 c8                      addq    %rcx, %rax
// 248: 4d 8d 04 c7                   leaq    (%r15,%rax,8), %r8
// 24c: 49 83 c0 f8                   addq    $-0x8, %r8
// 250: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000252:  R_X86_64_64  _PyEval_UnpackIterable
// 25a: 48 89 df                      movq    %rbx, %rdi
// 25d: 4c 89 e6                      movq    %r12, %rsi
// 260: b9 ff ff ff ff                movl    $0xffffffff, %ecx       # imm = 0xFFFFFFFF
// 265: ff d0                         callq   *%rax
// 267: 89 c5                         movl    %eax, %ebp
// 269: 49 8b 04 24                   movq    (%r12), %rax
// 26d: 48 85 c0                      testq   %rax, %rax
// 270: 7f 22                         jg      0x294 <_JIT_ENTRY+0x294>
// 272: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000274:  R_X86_64_64  .rodata.str1.1
// 27c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027e:  R_X86_64_64  _Py_NegativeRefcount
// 286: be 75 03 00 00                movl    $0x375, %esi            # imm = 0x375
// 28b: 4c 89 e2                      movq    %r12, %rdx
// 28e: ff d0                         callq   *%rax
// 290: 49 8b 04 24                   movq    (%r12), %rax
// 294: 85 c0                         testl   %eax, %eax
// 296: 78 21                         js      0x2b9 <_JIT_ENTRY+0x2b9>
// 298: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a2: ff d0                         callq   *%rax
// 2a4: 49 ff 0c 24                   decq    (%r12)
// 2a8: 75 0f                         jne     0x2b9 <_JIT_ENTRY+0x2b9>
// 2aa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ac:  R_X86_64_64  _Py_Dealloc
// 2b4: 4c 89 e7                      movq    %r12, %rdi
// 2b7: ff d0                         callq   *%rax
// 2b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bb:  R_X86_64_64  _JIT_OPARG
// 2c3: 0f b7 c8                      movzwl  %ax, %ecx
// 2c6: f7 d0                         notl    %eax
// 2c8: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 2cd: 48 98                         cltq
// 2cf: 48 01 c8                      addq    %rcx, %rax
// 2d2: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 2d6: 48 83 c6 f8                   addq    $-0x8, %rsi
// 2da: 85 ed                         testl   %ebp, %ebp
// 2dc: 49 0f 44 f6                   cmoveq  %r14, %rsi
// 2e0: 74 21                         je      0x303 <_JIT_ENTRY+0x303>
// 2e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e4:  R_X86_64_64  _JIT_CONTINUE
// 2ec: 48 8b 3c 24                   movq    (%rsp), %rdi
// 2f0: 48 89 da                      movq    %rbx, %rdx
// 2f3: 48 83 c4 28                   addq    $0x28, %rsp
// 2f7: 5b                            popq    %rbx
// 2f8: 41 5c                         popq    %r12
// 2fa: 41 5d                         popq    %r13
// 2fc: 41 5e                         popq    %r14
// 2fe: 41 5f                         popq    %r15
// 300: 5d                            popq    %rbp
// 301: ff e0                         jmpq    *%rax
// 303: 48 83 c6 f8                   addq    $-0x8, %rsi
// 307: 48 8b 04 24                   movq    (%rsp), %rax
// 30b: 48 29 c6                      subq    %rax, %rsi
// 30e: 48 83 c6 b8                   addq    $-0x48, %rsi
// 312: 48 c1 ee 03                   shrq    $0x3, %rsi
// 316: 89 70 40                      movl    %esi, 0x40(%rax)
// 319: 31 c0                         xorl    %eax, %eax
// 31b: e9 90 fd ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 320: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_UNPACK_SEQUENCE_code_body[801] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd7, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xdf, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xcf, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x78, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x18, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x54, 0x24, 0x20, 0x4c, 0x89, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xa6, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x98, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x4d, 0x8d, 0x34, 0xc7, 0x48, 0x89, 0x0e, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0x9f, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x88, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf6, 0xe9, 0x5e, 0x01, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xdd, 0x45, 0x31, 0xf6, 0xeb, 0x11, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x49, 0xff, 0xc6, 0x4c, 0x39, 0xf3, 0x0f, 0x84, 0x37, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xf5, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x89, 0xd1, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x4d, 0x8b, 0x64, 0xcf, 0xf8, 0x0f, 0xb7, 0xc0, 0x48, 0x01, 0xc8, 0x4d, 0x8d, 0x04, 0xc7, 0x49, 0x83, 0xc0, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0xb9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x75, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0xf8, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xf6, 0x74, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x29, 0xc6, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x70, 0x40, 0x31, 0xc0, 0xe9, 0x90, 0xfd, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_UNPACK_SEQUENCE_code_holes[22] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_UnpackIterable, 0x0},
    {0x274, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x27e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x29a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ac, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2bb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2e4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_UNPACK_SEQUENCE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_UNPACK_SEQUENCE_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_UNPACK_SEQUENCE_LIST
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_UNPACK_SEQUENCE_LIST.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 fe                      movq    %rdi, %r14
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 cf                   movq    (%r15,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d7                   movq    (%r15,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4b 8d 1c c7                   leaq    (%r15,%r8,8), %rbx
// 79: 48 8b 3b                      movq    (%rbx), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 3a                         je      0xc1 <_JIT_ENTRY+0xc1>
// 87: 4c 89 fb                      movq    %r15, %rbx
// 8a: 4c 29 f3                      subq    %r14, %rbx
// 8d: 48 83 c3 b8                   addq    $-0x48, %rbx
// 91: 48 c1 eb 03                   shrq    $0x3, %rbx
// 95: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 99: 49 8b 06                      movq    (%r14), %rax
// 9c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009e:  R_X86_64_64  _JIT_TARGET
// a6: 89 c9                         movl    %ecx, %ecx
// a8: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// ac: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b2: 48 83 c4 28                   addq    $0x28, %rsp
// b6: 5b                            popq    %rbx
// b7: 41 5c                         popq    %r12
// b9: 41 5d                         popq    %r13
// bb: 41 5e                         popq    %r14
// bd: 41 5f                         popq    %r15
// bf: 5d                            popq    %rbp
// c0: c3                            retq
// c1: 4c 89 54 24 18                movq    %r10, 0x18(%rsp)
// c6: 4c 89 4c 24 20                movq    %r9, 0x20(%rsp)
// cb: 48 89 14 24                   movq    %rdx, (%rsp)
// cf: 4c 89 74 24 08                movq    %r14, 0x8(%rsp)
// d4: 48 85 c0                      testq   %rax, %rax
// d7: 40 0f 94 c5                   sete    %bpl
// db: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// df: 48 8d 73 08                   leaq    0x8(%rbx), %rsi
// e3: 48 63 d0                      movslq  %eax, %rdx
// e6: ff 51 08                      callq   *0x8(%rcx)
// e9: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _JIT_OPARG
// f8: 66 85 c0                      testw   %ax, %ax
// fb: 0f 94 c0                      sete    %al
// fe: 40 84 c5                      testb   %al, %bpl
// 101: 0f 84 b7 00 00 00             je      0x1be <_JIT_ENTRY+0x1be>
// 107: 49 8b 04 24                   movq    (%r12), %rax
// 10b: 48 85 c0                      testq   %rax, %rax
// 10e: 4c 8b 2c 24                   movq    (%rsp), %r13
// 112: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 117: 7f 22                         jg      0x13b <_JIT_ENTRY+0x13b>
// 119: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011b:  R_X86_64_64  .rodata.str1.1
// 123: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000125:  R_X86_64_64  _Py_NegativeRefcount
// 12d: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 132: 4c 89 e2                      movq    %r12, %rdx
// 135: ff d0                         callq   *%rax
// 137: 49 8b 04 24                   movq    (%r12), %rax
// 13b: 85 c0                         testl   %eax, %eax
// 13d: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 142: 48 8b 6c 24 18                movq    0x18(%rsp), %rbp
// 147: 78 21                         js      0x16a <_JIT_ENTRY+0x16a>
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 153: ff d0                         callq   *%rax
// 155: 49 ff 0c 24                   decq    (%r12)
// 159: 75 0f                         jne     0x16a <_JIT_ENTRY+0x16a>
// 15b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015d:  R_X86_64_64  _Py_Dealloc
// 165: 4c 89 e7                      movq    %r12, %rdi
// 168: ff d0                         callq   *%rax
// 16a: 49 8d 04 ef                   leaq    (%r15,%rbp,8), %rax
// 16e: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 173: 48 85 c9                      testq   %rcx, %rcx
// 176: 74 30                         je      0x1a8 <_JIT_ENTRY+0x1a8>
// 178: 49 8d 1c df                   leaq    (%r15,%rbx,8), %rbx
// 17c: 48 89 08                      movq    %rcx, (%rax)
// 17f: 49 8b 45 10                   movq    0x10(%r13), %rax
// 183: 48 8b 00                      movq    (%rax), %rax
// 186: 84 c0                         testb   %al, %al
// 188: 0f 84 ab 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_HandlePending
// 198: 4c 89 ef                      movq    %r13, %rdi
// 19b: ff d0                         callq   *%rax
// 19d: 85 c0                         testl   %eax, %eax
// 19f: 0f 84 94 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 1a5: 48 89 d8                      movq    %rbx, %rax
// 1a8: 4c 29 f0                      subq    %r14, %rax
// 1ab: 48 83 c0 b8                   addq    $-0x48, %rax
// 1af: 48 c1 e8 03                   shrq    $0x3, %rax
// 1b3: 41 89 46 40                   movl    %eax, 0x40(%r14)
// 1b7: 31 c0                         xorl    %eax, %eax
// 1b9: e9 f4 fe ff ff                jmp     0xb2 <_JIT_ENTRY+0xb2>
// 1be: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1c2: bd 01 00 00 00                movl    $0x1, %ebp
// 1c7: 41 0f 43 ed                   cmovael %r13d, %ebp
// 1cb: 45 31 f6                      xorl    %r14d, %r14d
// 1ce: eb 0c                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1d0: 49 ff c6                      incq    %r14
// 1d3: 4c 39 f5                      cmpq    %r14, %rbp
// 1d6: 0f 84 2b ff ff ff             je      0x107 <_JIT_ENTRY+0x107>
// 1dc: 4e 8b 2c f3                   movq    (%rbx,%r14,8), %r13
// 1e0: 49 8b 45 00                   movq    (%r13), %rax
// 1e4: 48 85 c0                      testq   %rax, %rax
// 1e7: 7e 07                         jle     0x1f0 <_JIT_ENTRY+0x1f0>
// 1e9: 85 c0                         testl   %eax, %eax
// 1eb: 78 e3                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1ed: eb 27                         jmp     0x216 <_JIT_ENTRY+0x216>
// 1ef: 90                            nop
// 1f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f2:  R_X86_64_64  .rodata.str1.1
// 1fa: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ff: 4c 89 ea                      movq    %r13, %rdx
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_NegativeRefcount
// 20c: ff d0                         callq   *%rax
// 20e: 49 8b 45 00                   movq    (%r13), %rax
// 212: 85 c0                         testl   %eax, %eax
// 214: 78 ba                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 220: ff d0                         callq   *%rax
// 222: 49 ff 4d 00                   decq    (%r13)
// 226: 75 a8                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 228: 4c 89 ef                      movq    %r13, %rdi
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_Dealloc
// 235: ff d0                         callq   *%rax
// 237: eb 97                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _JIT_OPARG
// 243: f7 d0                         notl    %eax
// 245: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 24a: 48 98                         cltq
// 24c: 4d 8b 64 c7 f8                movq    -0x8(%r15,%rax,8), %r12
// 251: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000253:  R_X86_64_64  PyList_Type
// 25b: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 260: 0f 85 24 fe ff ff             jne     0x8a <_JIT_ENTRY+0x8a>
// 266: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000268:  R_X86_64_64  _JIT_OPARG
// 270: 0f b7 c9                      movzwl  %cx, %ecx
// 273: 49 39 4c 24 10                cmpq    %rcx, 0x10(%r12)
// 278: 0f 85 0c fe ff ff             jne     0x8a <_JIT_ENTRY+0x8a>
// 27e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000280:  R_X86_64_64  _JIT_OPARG
// 288: f7 c1 ff ff 00 00             testl   $0xffff, %ecx           # imm = 0xFFFF
// 28e: 7e 50                         jle     0x2e0 <_JIT_ENTRY+0x2e0>
// 290: 49 8d 1c c7                   leaq    (%r15,%rax,8), %rbx
// 294: 48 83 c3 f8                   addq    $-0x8, %rbx
// 298: 4d 8b 74 24 18                movq    0x18(%r12), %r14
// 29d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029f:  R_X86_64_64  _JIT_OPARG
// 2a7: 44 0f b7 e8                   movzwl  %ax, %r13d
// 2ab: 49 ff c5                      incq    %r13
// 2ae: eb 10                         jmp     0x2c0 <_JIT_ENTRY+0x2c0>
// 2b0: 48 89 2b                      movq    %rbp, (%rbx)
// 2b3: 48 83 c3 08                   addq    $0x8, %rbx
// 2b7: 49 ff cd                      decq    %r13
// 2ba: 49 83 fd 01                   cmpq    $0x1, %r13
// 2be: 7e 20                         jle     0x2e0 <_JIT_ENTRY+0x2e0>
// 2c0: 41 8d 45 fe                   leal    -0x2(%r13), %eax
// 2c4: 49 8b 2c c6                   movq    (%r14,%rax,8), %rbp
// 2c8: 8b 45 00                      movl    (%rbp), %eax
// 2cb: ff c0                         incl    %eax
// 2cd: 74 e1                         je      0x2b0 <_JIT_ENTRY+0x2b0>
// 2cf: 89 45 00                      movl    %eax, (%rbp)
// 2d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d4:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 2dc: ff d0                         callq   *%rax
// 2de: eb d0                         jmp     0x2b0 <_JIT_ENTRY+0x2b0>
// 2e0: 49 8b 04 24                   movq    (%r12), %rax
// 2e4: 48 85 c0                      testq   %rax, %rax
// 2e7: 7f 22                         jg      0x30b <_JIT_ENTRY+0x30b>
// 2e9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002eb:  R_X86_64_64  .rodata.str1.1
// 2f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f5:  R_X86_64_64  _Py_NegativeRefcount
// 2fd: be ab 03 00 00                movl    $0x3ab, %esi            # imm = 0x3AB
// 302: 4c 89 e2                      movq    %r12, %rdx
// 305: ff d0                         callq   *%rax
// 307: 49 8b 04 24                   movq    (%r12), %rax
// 30b: 85 c0                         testl   %eax, %eax
// 30d: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 312: 4c 8b 34 24                   movq    (%rsp), %r14
// 316: 78 21                         js      0x339 <_JIT_ENTRY+0x339>
// 318: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 322: ff d0                         callq   *%rax
// 324: 49 ff 0c 24                   decq    (%r12)
// 328: 75 0f                         jne     0x339 <_JIT_ENTRY+0x339>
// 32a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032c:  R_X86_64_64  _Py_Dealloc
// 334: 4c 89 e7                      movq    %r12, %rdi
// 337: ff d0                         callq   *%rax
// 339: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033b:  R_X86_64_64  _JIT_OPARG
// 343: 0f b7 c8                      movzwl  %ax, %ecx
// 346: f7 d0                         notl    %eax
// 348: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 34d: 48 98                         cltq
// 34f: 48 01 c8                      addq    %rcx, %rax
// 352: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 356: 48 83 c6 f8                   addq    $-0x8, %rsi
// 35a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000035c:  R_X86_64_64  _JIT_CONTINUE
// 364: 48 89 df                      movq    %rbx, %rdi
// 367: 4c 89 f2                      movq    %r14, %rdx
// 36a: 48 83 c4 28                   addq    $0x28, %rsp
// 36e: 5b                            popq    %rbx
// 36f: 41 5c                         popq    %r12
// 371: 41 5d                         popq    %r13
// 373: 41 5e                         popq    %r14
// 375: 41 5f                         popq    %r15
// 377: 5d                            popq    %rbp
// 378: ff e0                         jmpq    *%rax
// 37a: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_UNPACK_SEQUENCE_LIST_code_body[891] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xfe, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xcf, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4b, 0x8d, 0x1c, 0xc7, 0x48, 0x8b, 0x3b, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x3a, 0x4c, 0x89, 0xfb, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x4c, 0x24, 0x20, 0x48, 0x89, 0x14, 0x24, 0x4c, 0x89, 0x74, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x73, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xb7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x4c, 0x8b, 0x2c, 0x24, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x48, 0x8b, 0x6c, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xef, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x30, 0x49, 0x8d, 0x1c, 0xdf, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xab, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x94, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd8, 0x4c, 0x29, 0xf0, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x46, 0x40, 0x31, 0xc0, 0xe9, 0xf4, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xed, 0x45, 0x31, 0xf6, 0xeb, 0x0c, 0x49, 0xff, 0xc6, 0x4c, 0x39, 0xf5, 0x0f, 0x84, 0x2b, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x2c, 0xf3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x27, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x64, 0xc7, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x0f, 0x85, 0x24, 0xfe, 0xff, 0xff, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x49, 0x39, 0x4c, 0x24, 0x10, 0x0f, 0x85, 0x0c, 0xfe, 0xff, 0xff, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xc1, 0xff, 0xff, 0x00, 0x00, 0x7e, 0x50, 0x49, 0x8d, 0x1c, 0xc7, 0x48, 0x83, 0xc3, 0xf8, 0x4d, 0x8b, 0x74, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xe8, 0x49, 0xff, 0xc5, 0xeb, 0x10, 0x48, 0x89, 0x2b, 0x48, 0x83, 0xc3, 0x08, 0x49, 0xff, 0xcd, 0x49, 0x83, 0xfd, 0x01, 0x7e, 0x20, 0x41, 0x8d, 0x45, 0xfe, 0x49, 0x8b, 0x2c, 0xc6, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0xe1, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xab, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x4c, 0x8b, 0x34, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_UNPACK_SEQUENCE_LIST_code_holes[26] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9e, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x11b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x125, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyList_Type, 0x0},
    {0x268, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x280, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x29f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x2eb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2f5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x31a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x32c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x33b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x35c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_UNPACK_SEQUENCE_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_UNPACK_SEQUENCE_LIST_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_UNPACK_SEQUENCE_TUPLE
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_UNPACK_SEQUENCE_TUPLE.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 fe                      movq    %rdi, %r14
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 cf                   movq    (%r15,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d7                   movq    (%r15,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 20                         jne     0x87 <_JIT_ENTRY+0x87>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 12                         jne     0x87 <_JIT_ENTRY+0x87>
// 75: 4b 8d 1c c7                   leaq    (%r15,%r8,8), %rbx
// 79: 48 8b 3b                      movq    (%rbx), %rdi
// 7c: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 80: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 85: 74 3a                         je      0xc1 <_JIT_ENTRY+0xc1>
// 87: 4c 89 fb                      movq    %r15, %rbx
// 8a: 4c 29 f3                      subq    %r14, %rbx
// 8d: 48 83 c3 b8                   addq    $-0x48, %rbx
// 91: 48 c1 eb 03                   shrq    $0x3, %rbx
// 95: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 99: 49 8b 06                      movq    (%r14), %rax
// 9c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009e:  R_X86_64_64  _JIT_TARGET
// a6: 89 c9                         movl    %ecx, %ecx
// a8: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// ac: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b2: 48 83 c4 28                   addq    $0x28, %rsp
// b6: 5b                            popq    %rbx
// b7: 41 5c                         popq    %r12
// b9: 41 5d                         popq    %r13
// bb: 41 5e                         popq    %r14
// bd: 41 5f                         popq    %r15
// bf: 5d                            popq    %rbp
// c0: c3                            retq
// c1: 4c 89 54 24 18                movq    %r10, 0x18(%rsp)
// c6: 4c 89 4c 24 20                movq    %r9, 0x20(%rsp)
// cb: 48 89 14 24                   movq    %rdx, (%rsp)
// cf: 4c 89 74 24 08                movq    %r14, 0x8(%rsp)
// d4: 48 85 c0                      testq   %rax, %rax
// d7: 40 0f 94 c5                   sete    %bpl
// db: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// df: 48 8d 73 08                   leaq    0x8(%rbx), %rsi
// e3: 48 63 d0                      movslq  %eax, %rdx
// e6: ff 51 08                      callq   *0x8(%rcx)
// e9: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _JIT_OPARG
// f8: 66 85 c0                      testw   %ax, %ax
// fb: 0f 94 c0                      sete    %al
// fe: 40 84 c5                      testb   %al, %bpl
// 101: 0f 84 b7 00 00 00             je      0x1be <_JIT_ENTRY+0x1be>
// 107: 49 8b 04 24                   movq    (%r12), %rax
// 10b: 48 85 c0                      testq   %rax, %rax
// 10e: 4c 8b 2c 24                   movq    (%rsp), %r13
// 112: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 117: 7f 22                         jg      0x13b <_JIT_ENTRY+0x13b>
// 119: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011b:  R_X86_64_64  .rodata.str1.1
// 123: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000125:  R_X86_64_64  _Py_NegativeRefcount
// 12d: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 132: 4c 89 e2                      movq    %r12, %rdx
// 135: ff d0                         callq   *%rax
// 137: 49 8b 04 24                   movq    (%r12), %rax
// 13b: 85 c0                         testl   %eax, %eax
// 13d: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 142: 48 8b 6c 24 18                movq    0x18(%rsp), %rbp
// 147: 78 21                         js      0x16a <_JIT_ENTRY+0x16a>
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 153: ff d0                         callq   *%rax
// 155: 49 ff 0c 24                   decq    (%r12)
// 159: 75 0f                         jne     0x16a <_JIT_ENTRY+0x16a>
// 15b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015d:  R_X86_64_64  _Py_Dealloc
// 165: 4c 89 e7                      movq    %r12, %rdi
// 168: ff d0                         callq   *%rax
// 16a: 49 8d 04 ef                   leaq    (%r15,%rbp,8), %rax
// 16e: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 173: 48 85 c9                      testq   %rcx, %rcx
// 176: 74 30                         je      0x1a8 <_JIT_ENTRY+0x1a8>
// 178: 49 8d 1c df                   leaq    (%r15,%rbx,8), %rbx
// 17c: 48 89 08                      movq    %rcx, (%rax)
// 17f: 49 8b 45 10                   movq    0x10(%r13), %rax
// 183: 48 8b 00                      movq    (%rax), %rax
// 186: 84 c0                         testb   %al, %al
// 188: 0f 84 ab 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_HandlePending
// 198: 4c 89 ef                      movq    %r13, %rdi
// 19b: ff d0                         callq   *%rax
// 19d: 85 c0                         testl   %eax, %eax
// 19f: 0f 84 94 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 1a5: 48 89 d8                      movq    %rbx, %rax
// 1a8: 4c 29 f0                      subq    %r14, %rax
// 1ab: 48 83 c0 b8                   addq    $-0x48, %rax
// 1af: 48 c1 e8 03                   shrq    $0x3, %rax
// 1b3: 41 89 46 40                   movl    %eax, 0x40(%r14)
// 1b7: 31 c0                         xorl    %eax, %eax
// 1b9: e9 f4 fe ff ff                jmp     0xb2 <_JIT_ENTRY+0xb2>
// 1be: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1c2: bd 01 00 00 00                movl    $0x1, %ebp
// 1c7: 41 0f 43 ed                   cmovael %r13d, %ebp
// 1cb: 45 31 f6                      xorl    %r14d, %r14d
// 1ce: eb 0c                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1d0: 49 ff c6                      incq    %r14
// 1d3: 4c 39 f5                      cmpq    %r14, %rbp
// 1d6: 0f 84 2b ff ff ff             je      0x107 <_JIT_ENTRY+0x107>
// 1dc: 4e 8b 2c f3                   movq    (%rbx,%r14,8), %r13
// 1e0: 49 8b 45 00                   movq    (%r13), %rax
// 1e4: 48 85 c0                      testq   %rax, %rax
// 1e7: 7e 07                         jle     0x1f0 <_JIT_ENTRY+0x1f0>
// 1e9: 85 c0                         testl   %eax, %eax
// 1eb: 78 e3                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1ed: eb 27                         jmp     0x216 <_JIT_ENTRY+0x216>
// 1ef: 90                            nop
// 1f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f2:  R_X86_64_64  .rodata.str1.1
// 1fa: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ff: 4c 89 ea                      movq    %r13, %rdx
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_NegativeRefcount
// 20c: ff d0                         callq   *%rax
// 20e: 49 8b 45 00                   movq    (%r13), %rax
// 212: 85 c0                         testl   %eax, %eax
// 214: 78 ba                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 220: ff d0                         callq   *%rax
// 222: 49 ff 4d 00                   decq    (%r13)
// 226: 75 a8                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 228: 4c 89 ef                      movq    %r13, %rdi
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_Dealloc
// 235: ff d0                         callq   *%rax
// 237: eb 97                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _JIT_OPARG
// 243: f7 d0                         notl    %eax
// 245: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 24a: 48 98                         cltq
// 24c: 4d 8b 64 c7 f8                movq    -0x8(%r15,%rax,8), %r12
// 251: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000253:  R_X86_64_64  PyTuple_Type
// 25b: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 260: 0f 85 24 fe ff ff             jne     0x8a <_JIT_ENTRY+0x8a>
// 266: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000268:  R_X86_64_64  _JIT_OPARG
// 270: 0f b7 c9                      movzwl  %cx, %ecx
// 273: 49 39 4c 24 10                cmpq    %rcx, 0x10(%r12)
// 278: 0f 85 0c fe ff ff             jne     0x8a <_JIT_ENTRY+0x8a>
// 27e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000280:  R_X86_64_64  _JIT_OPARG
// 288: f7 c1 ff ff 00 00             testl   $0xffff, %ecx           # imm = 0xFFFF
// 28e: 7e 4d                         jle     0x2dd <_JIT_ENTRY+0x2dd>
// 290: 49 8d 1c c7                   leaq    (%r15,%rax,8), %rbx
// 294: 48 83 c3 f8                   addq    $-0x8, %rbx
// 298: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029a:  R_X86_64_64  _JIT_OPARG
// 2a2: 44 0f b7 f0                   movzwl  %ax, %r14d
// 2a6: 49 ff c6                      incq    %r14
// 2a9: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000002ab:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 2b3: eb 10                         jmp     0x2c5 <_JIT_ENTRY+0x2c5>
// 2b5: 48 89 2b                      movq    %rbp, (%rbx)
// 2b8: 48 83 c3 08                   addq    $0x8, %rbx
// 2bc: 49 ff ce                      decq    %r14
// 2bf: 49 83 fe 01                   cmpq    $0x1, %r14
// 2c3: 7e 18                         jle     0x2dd <_JIT_ENTRY+0x2dd>
// 2c5: 41 8d 46 fe                   leal    -0x2(%r14), %eax
// 2c9: 49 8b 6c c4 18                movq    0x18(%r12,%rax,8), %rbp
// 2ce: 8b 45 00                      movl    (%rbp), %eax
// 2d1: ff c0                         incl    %eax
// 2d3: 74 e0                         je      0x2b5 <_JIT_ENTRY+0x2b5>
// 2d5: 89 45 00                      movl    %eax, (%rbp)
// 2d8: 41 ff d5                      callq   *%r13
// 2db: eb d8                         jmp     0x2b5 <_JIT_ENTRY+0x2b5>
// 2dd: 49 8b 04 24                   movq    (%r12), %rax
// 2e1: 48 85 c0                      testq   %rax, %rax
// 2e4: 7f 22                         jg      0x308 <_JIT_ENTRY+0x308>
// 2e6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002e8:  R_X86_64_64  .rodata.str1.1
// 2f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f2:  R_X86_64_64  _Py_NegativeRefcount
// 2fa: be 99 03 00 00                movl    $0x399, %esi            # imm = 0x399
// 2ff: 4c 89 e2                      movq    %r12, %rdx
// 302: ff d0                         callq   *%rax
// 304: 49 8b 04 24                   movq    (%r12), %rax
// 308: 85 c0                         testl   %eax, %eax
// 30a: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 30f: 4c 8b 34 24                   movq    (%rsp), %r14
// 313: 78 21                         js      0x336 <_JIT_ENTRY+0x336>
// 315: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000317:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 31f: ff d0                         callq   *%rax
// 321: 49 ff 0c 24                   decq    (%r12)
// 325: 75 0f                         jne     0x336 <_JIT_ENTRY+0x336>
// 327: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000329:  R_X86_64_64  _Py_Dealloc
// 331: 4c 89 e7                      movq    %r12, %rdi
// 334: ff d0                         callq   *%rax
// 336: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000338:  R_X86_64_64  _JIT_OPARG
// 340: 0f b7 c8                      movzwl  %ax, %ecx
// 343: f7 d0                         notl    %eax
// 345: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 34a: 48 98                         cltq
// 34c: 48 01 c8                      addq    %rcx, %rax
// 34f: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 353: 48 83 c6 f8                   addq    $-0x8, %rsi
// 357: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000359:  R_X86_64_64  _JIT_CONTINUE
// 361: 48 89 df                      movq    %rbx, %rdi
// 364: 4c 89 f2                      movq    %r14, %rdx
// 367: 48 83 c4 28                   addq    $0x28, %rsp
// 36b: 5b                            popq    %rbx
// 36c: 41 5c                         popq    %r12
// 36e: 41 5d                         popq    %r13
// 370: 41 5e                         popq    %r14
// 372: 41 5f                         popq    %r15
// 374: 5d                            popq    %rbp
// 375: ff e0                         jmpq    *%rax
// 377: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_UNPACK_SEQUENCE_TUPLE_code_body[888] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xfe, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xcf, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x4b, 0x8d, 0x1c, 0xc7, 0x48, 0x8b, 0x3b, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x3a, 0x4c, 0x89, 0xfb, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x4c, 0x24, 0x20, 0x48, 0x89, 0x14, 0x24, 0x4c, 0x89, 0x74, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x73, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xb7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x4c, 0x8b, 0x2c, 0x24, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x48, 0x8b, 0x6c, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xef, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x30, 0x49, 0x8d, 0x1c, 0xdf, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xab, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x94, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd8, 0x4c, 0x29, 0xf0, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x46, 0x40, 0x31, 0xc0, 0xe9, 0xf4, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xed, 0x45, 0x31, 0xf6, 0xeb, 0x0c, 0x49, 0xff, 0xc6, 0x4c, 0x39, 0xf5, 0x0f, 0x84, 0x2b, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x2c, 0xf3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x27, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x64, 0xc7, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x0f, 0x85, 0x24, 0xfe, 0xff, 0xff, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x49, 0x39, 0x4c, 0x24, 0x10, 0x0f, 0x85, 0x0c, 0xfe, 0xff, 0xff, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xc1, 0xff, 0xff, 0x00, 0x00, 0x7e, 0x4d, 0x49, 0x8d, 0x1c, 0xc7, 0x48, 0x83, 0xc3, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf0, 0x49, 0xff, 0xc6, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x48, 0x89, 0x2b, 0x48, 0x83, 0xc3, 0x08, 0x49, 0xff, 0xce, 0x49, 0x83, 0xfe, 0x01, 0x7e, 0x18, 0x41, 0x8d, 0x46, 0xfe, 0x49, 0x8b, 0x6c, 0xc4, 0x18, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0xe0, 0x89, 0x45, 0x00, 0x41, 0xff, 0xd5, 0xeb, 0xd8, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x99, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x4c, 0x8b, 0x34, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_UNPACK_SEQUENCE_TUPLE_code_holes[26] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9e, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x11b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x125, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x268, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x280, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x29a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x2e8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2f2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x317, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x329, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x338, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x359, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_UNPACK_SEQUENCE_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_UNPACK_SEQUENCE_TUPLE_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_UNPACK_SEQUENCE_TWO_TUPLE
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_UNPACK_SEQUENCE_TWO_TUPLE.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 c8                      movslq  %eax, %r9
// 28: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c1                   movzwl  %cx, %r8d
// 3b: 4c 89 c1                      movq    %r8, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 d7                      movslq  %edi, %r10
// 4b: 49 f7 d0                      notq    %r8
// 4e: 4c 0f 44 c1                   cmoveq  %rcx, %r8
// 52: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c c6                   leaq    (%r14,%r8,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 49 29 de                      subq    %rbx, %r14
// 8b: 49 83 c6 b8                   addq    $-0x48, %r14
// 8f: 49 c1 ee 03                   shrq    $0x3, %r14
// 93: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 97: 48 8b 03                      movq    (%rbx), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 28                   addq    $0x28, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 54 24 18                movq    %r10, 0x18(%rsp)
// c4: 4c 89 4c 24 20                movq    %r9, 0x20(%rsp)
// c9: 48 89 14 24                   movq    %rdx, (%rsp)
// cd: 48 89 5c 24 08                movq    %rbx, 0x8(%rsp)
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 0f 94 c3                      sete    %bl
// d8: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dc: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e0: 48 63 d0                      movslq  %eax, %rdx
// e3: ff 51 08                      callq   *0x8(%rcx)
// e6: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 85 c0                      testw   %ax, %ax
// f8: 0f 94 c0                      sete    %al
// fb: 84 c3                         testb   %al, %bl
// fd: 0f 84 b3 00 00 00             je      0x1b6 <_JIT_ENTRY+0x1b6>
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f 22                         jg      0x12e <_JIT_ENTRY+0x12e>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 85 c0                         testl   %eax, %eax
// 130: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 135: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// 13a: 78 21                         js      0x15d <_JIT_ENTRY+0x15d>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 146: ff d0                         callq   *%rax
// 148: 49 ff 0c 24                   decq    (%r12)
// 14c: 75 0f                         jne     0x15d <_JIT_ENTRY+0x15d>
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _Py_Dealloc
// 158: 4c 89 e7                      movq    %r12, %rdi
// 15b: ff d0                         callq   *%rax
// 15d: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 162: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 166: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 16b: 48 85 c9                      testq   %rcx, %rcx
// 16e: 74 31                         je      0x1a1 <_JIT_ENTRY+0x1a1>
// 170: 4f 8d 3c fe                   leaq    (%r14,%r15,8), %r15
// 174: 48 89 08                      movq    %rcx, (%rax)
// 177: 48 8b 3c 24                   movq    (%rsp), %rdi
// 17b: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 17f: 48 8b 00                      movq    (%rax), %rax
// 182: 84 c0                         testb   %al, %al
// 184: 0f 84 af 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 18a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018c:  R_X86_64_64  _Py_HandlePending
// 194: ff d0                         callq   *%rax
// 196: 85 c0                         testl   %eax, %eax
// 198: 0f 84 9b 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 19e: 4c 89 f8                      movq    %r15, %rax
// 1a1: 48 29 d8                      subq    %rbx, %rax
// 1a4: 48 83 c0 b8                   addq    $-0x48, %rax
// 1a8: 48 c1 e8 03                   shrq    $0x3, %rax
// 1ac: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1af: 31 c0                         xorl    %eax, %eax
// 1b1: e9 fa fe ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 1b6: 41 83 fd 02                   cmpl    $0x2, %r13d
// 1ba: bb 01 00 00 00                movl    $0x1, %ebx
// 1bf: 41 0f 43 dd                   cmovael %r13d, %ebx
// 1c3: 45 31 ff                      xorl    %r15d, %r15d
// 1c6: eb 14                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1c8: 0f 1f 84 00 00 00 00 00       nopl    (%rax,%rax)
// 1d0: 49 ff c7                      incq    %r15
// 1d3: 4c 39 fb                      cmpq    %r15, %rbx
// 1d6: 0f 84 27 ff ff ff             je      0x103 <_JIT_ENTRY+0x103>
// 1dc: 4e 8b 6c fd 00                movq    (%rbp,%r15,8), %r13
// 1e1: 49 8b 45 00                   movq    (%r13), %rax
// 1e5: 48 85 c0                      testq   %rax, %rax
// 1e8: 7e 06                         jle     0x1f0 <_JIT_ENTRY+0x1f0>
// 1ea: 85 c0                         testl   %eax, %eax
// 1ec: 78 e2                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1ee: eb 26                         jmp     0x216 <_JIT_ENTRY+0x216>
// 1f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f2:  R_X86_64_64  .rodata.str1.1
// 1fa: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 1ff: 4c 89 ea                      movq    %r13, %rdx
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_NegativeRefcount
// 20c: ff d0                         callq   *%rax
// 20e: 49 8b 45 00                   movq    (%r13), %rax
// 212: 85 c0                         testl   %eax, %eax
// 214: 78 ba                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 220: ff d0                         callq   *%rax
// 222: 49 ff 4d 00                   decq    (%r13)
// 226: 75 a8                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 228: 4c 89 ef                      movq    %r13, %rdi
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_Dealloc
// 235: ff d0                         callq   *%rax
// 237: eb 97                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _JIT_OPARG
// 243: f7 d0                         notl    %eax
// 245: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 24a: 48 98                         cltq
// 24c: 4d 8b 64 c6 f8                movq    -0x8(%r14,%rax,8), %r12
// 251: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000253:  R_X86_64_64  PyTuple_Type
// 25b: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 260: 75 65                         jne     0x2c7 <_JIT_ENTRY+0x2c7>
// 262: 49 83 7c 24 10 02             cmpq    $0x2, 0x10(%r12)
// 268: 75 5d                         jne     0x2c7 <_JIT_ENTRY+0x2c7>
// 26a: 4d 8b 6c 24 20                movq    0x20(%r12), %r13
// 26f: 41 8b 45 00                   movl    (%r13), %eax
// 273: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000275:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 27d: ff c0                         incl    %eax
// 27f: 74 06                         je      0x287 <_JIT_ENTRY+0x287>
// 281: 41 89 45 00                   movl    %eax, (%r13)
// 285: ff d3                         callq   *%rbx
// 287: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000289:  R_X86_64_64  _JIT_OPARG
// 291: f7 d0                         notl    %eax
// 293: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 298: 48 98                         cltq
// 29a: 4d 89 6c c6 f8                movq    %r13, -0x8(%r14,%rax,8)
// 29f: 4d 8b 6c 24 18                movq    0x18(%r12), %r13
// 2a4: 41 8b 45 00                   movl    (%r13), %eax
// 2a8: ff c0                         incl    %eax
// 2aa: 75 23                         jne     0x2cf <_JIT_ENTRY+0x2cf>
// 2ac: 4d 89 2f                      movq    %r13, (%r15)
// 2af: 49 8b 04 24                   movq    (%r12), %rax
// 2b3: 48 85 c0                      testq   %rax, %rax
// 2b6: 7e 29                         jle     0x2e1 <_JIT_ENTRY+0x2e1>
// 2b8: 85 c0                         testl   %eax, %eax
// 2ba: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 2bf: 4c 8b 3c 24                   movq    (%rsp), %r15
// 2c3: 79 4b                         jns     0x310 <_JIT_ENTRY+0x310>
// 2c5: eb 6a                         jmp     0x331 <_JIT_ENTRY+0x331>
// 2c7: 4d 89 fe                      movq    %r15, %r14
// 2ca: e9 b9 fd ff ff                jmp     0x88 <_JIT_ENTRY+0x88>
// 2cf: 41 89 45 00                   movl    %eax, (%r13)
// 2d3: ff d3                         callq   *%rbx
// 2d5: 4d 89 2f                      movq    %r13, (%r15)
// 2d8: 49 8b 04 24                   movq    (%r12), %rax
// 2dc: 48 85 c0                      testq   %rax, %rax
// 2df: 7f d7                         jg      0x2b8 <_JIT_ENTRY+0x2b8>
// 2e1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002e3:  R_X86_64_64  .rodata.str1.1
// 2eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ed:  R_X86_64_64  _Py_NegativeRefcount
// 2f5: be 87 03 00 00                movl    $0x387, %esi            # imm = 0x387
// 2fa: 4c 89 e2                      movq    %r12, %rdx
// 2fd: ff d0                         callq   *%rax
// 2ff: 49 8b 04 24                   movq    (%r12), %rax
// 303: 85 c0                         testl   %eax, %eax
// 305: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 30a: 4c 8b 3c 24                   movq    (%rsp), %r15
// 30e: 78 21                         js      0x331 <_JIT_ENTRY+0x331>
// 310: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000312:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 31a: ff d0                         callq   *%rax
// 31c: 49 ff 0c 24                   decq    (%r12)
// 320: 75 0f                         jne     0x331 <_JIT_ENTRY+0x331>
// 322: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000324:  R_X86_64_64  _Py_Dealloc
// 32c: 4c 89 e7                      movq    %r12, %rdi
// 32f: ff d0                         callq   *%rax
// 331: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000333:  R_X86_64_64  _JIT_OPARG
// 33b: 0f b7 c8                      movzwl  %ax, %ecx
// 33e: f7 d0                         notl    %eax
// 340: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 345: 48 98                         cltq
// 347: 48 01 c8                      addq    %rcx, %rax
// 34a: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 34e: 48 83 c6 f8                   addq    $-0x8, %rsi
// 352: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000354:  R_X86_64_64  _JIT_CONTINUE
// 35c: 48 89 df                      movq    %rbx, %rdi
// 35f: 4c 89 fa                      movq    %r15, %rdx
// 362: 48 83 c4 28                   addq    $0x28, %rsp
// 366: 5b                            popq    %rbx
// 367: 41 5c                         popq    %r12
// 369: 41 5d                         popq    %r13
// 36b: 41 5e                         popq    %r14
// 36d: 41 5f                         popq    %r15
// 36f: 5d                            popq    %rbp
// 370: ff e0                         jmpq    *%rax
// 372: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_UNPACK_SEQUENCE_TWO_TUPLE_code_body[883] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xce, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc1, 0x4c, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xd7, 0x49, 0xf7, 0xd0, 0x4c, 0x0f, 0x44, 0xc1, 0x4f, 0x8b, 0x24, 0xd6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xc6, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x4c, 0x24, 0x20, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0x5c, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xb3, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x31, 0x4f, 0x8d, 0x3c, 0xfe, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xaf, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x9b, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xfa, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xdd, 0x45, 0x31, 0xff, 0xeb, 0x14, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc7, 0x4c, 0x39, 0xfb, 0x0f, 0x84, 0x27, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xfd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8b, 0x64, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x65, 0x49, 0x83, 0x7c, 0x24, 0x10, 0x02, 0x75, 0x5d, 0x4d, 0x8b, 0x6c, 0x24, 0x20, 0x41, 0x8b, 0x45, 0x00, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0x74, 0x06, 0x41, 0x89, 0x45, 0x00, 0xff, 0xd3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x6c, 0xc6, 0xf8, 0x4d, 0x8b, 0x6c, 0x24, 0x18, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x23, 0x4d, 0x89, 0x2f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x29, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x4c, 0x8b, 0x3c, 0x24, 0x79, 0x4b, 0xeb, 0x6a, 0x4d, 0x89, 0xfe, 0xe9, 0xb9, 0xfd, 0xff, 0xff, 0x41, 0x89, 0x45, 0x00, 0xff, 0xd3, 0x4d, 0x89, 0x2f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xd7, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x87, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x4c, 0x8b, 0x3c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_UNPACK_SEQUENCE_TWO_TUPLE_code_holes[24] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x275, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x289, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2e3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x312, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x324, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x333, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x354, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_UNPACK_SEQUENCE_TWO_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_UNPACK_SEQUENCE_TWO_TUPLE_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FASTplus_WITH_EXCEPT_START
// 
// /tmp/tmpr7oh6cr3/_CALL_METHOD_DESCRIPTOR_FASTplus_WITH_EXCEPT_START.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 58                   subq    $0x58, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 f8                      movq    %rdi, %r8
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 f1                      movzwl  %cx, %esi
// 21: 89 f0                         movl    %esi, %eax
// 23: f7 d0                         notl    %eax
// 25: 4c 63 d0                      movslq  %eax, %r10
// 28: 4b 8b 04 d6                   movq    (%r14,%r10,8), %rax
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 f7                         subl    %esi, %edi
// 33: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 37: 44 0f b7 c9                   movzwl  %cx, %r9d
// 3b: 4c 89 c9                      movq    %r9, %rcx
// 3e: 48 f7 d9                      negq    %rcx
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 44 0f 44 ee                   cmovel  %esi, %r13d
// 48: 4c 63 df                      movslq  %edi, %r11
// 4b: 49 f7 d1                      notq    %r9
// 4e: 4c 0f 44 c9                   cmoveq  %rcx, %r9
// 52: 4f 8b 24 de                   movq    (%r14,%r11,8), %r12
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  PyMethodDescr_Type
// 60: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 65: 75 21                         jne     0x88 <_JIT_ENTRY+0x88>
// 67: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 6c: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 73: 75 13                         jne     0x88 <_JIT_ENTRY+0x88>
// 75: 4b 8d 2c ce                   leaq    (%r14,%r9,8), %rbp
// 79: 48 8b 7d 00                   movq    (%rbp), %rdi
// 7d: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 81: 49 3b 74 24 10                cmpq    0x10(%r12), %rsi
// 86: 74 37                         je      0xbf <_JIT_ENTRY+0xbf>
// 88: 4d 29 c6                      subq    %r8, %r14
// 8b: 49 83 c6 b8                   addq    $-0x48, %r14
// 8f: 49 c1 ee 03                   shrq    $0x3, %r14
// 93: 45 89 70 40                   movl    %r14d, 0x40(%r8)
// 97: 49 8b 00                      movq    (%r8), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  _JIT_TARGET
// a4: 89 c9                         movl    %ecx, %ecx
// a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b0: 48 83 c4 58                   addq    $0x58, %rsp
// b4: 5b                            popq    %rbx
// b5: 41 5c                         popq    %r12
// b7: 41 5d                         popq    %r13
// b9: 41 5e                         popq    %r14
// bb: 41 5f                         popq    %r15
// bd: 5d                            popq    %rbp
// be: c3                            retq
// bf: 4c 89 5c 24 08                movq    %r11, 0x8(%rsp)
// c4: 4c 89 54 24 18                movq    %r10, 0x18(%rsp)
// c9: 48 89 54 24 28                movq    %rdx, 0x28(%rsp)
// ce: 4c 89 44 24 10                movq    %r8, 0x10(%rsp)
// d3: 48 85 c0                      testq   %rax, %rax
// d6: 0f 94 c3                      sete    %bl
// d9: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// dd: 48 8d 75 08                   leaq    0x8(%rbp), %rsi
// e1: 48 63 d0                      movslq  %eax, %rdx
// e4: ff 51 08                      callq   *0x8(%rcx)
// e7: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ee:  R_X86_64_64  _JIT_OPARG
// f6: 66 85 c0                      testw   %ax, %ax
// f9: 0f 94 c0                      sete    %al
// fc: 84 c3                         testb   %al, %bl
// fe: 0f 84 37 01 00 00             je      0x23b <_JIT_ENTRY+0x23b>
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7f 22                         jg      0x12f <_JIT_ENTRY+0x12f>
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_NegativeRefcount
// 121: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 85 c0                         testl   %eax, %eax
// 131: 48 8b 5c 24 28                movq    0x28(%rsp), %rbx
// 136: 78 21                         js      0x159 <_JIT_ENTRY+0x159>
// 138: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 142: ff d0                         callq   *%rax
// 144: 49 ff 0c 24                   decq    (%r12)
// 148: 75 0f                         jne     0x159 <_JIT_ENTRY+0x159>
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_Dealloc
// 154: 4c 89 e7                      movq    %r12, %rdi
// 157: ff d0                         callq   *%rax
// 159: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 15e: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 162: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// 167: 48 85 d2                      testq   %rdx, %rdx
// 16a: 0f 84 49 01 00 00             je      0x2b9 <_JIT_ENTRY+0x2b9>
// 170: 48 8b 4c 24 18                movq    0x18(%rsp), %rcx
// 175: 4d 8d 3c ce                   leaq    (%r14,%rcx,8), %r15
// 179: 48 89 10                      movq    %rdx, (%rax)
// 17c: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 180: 48 8b 00                      movq    (%rax), %rax
// 183: 84 c0                         testb   %al, %al
// 185: 74 17                         je      0x19e <_JIT_ENTRY+0x19e>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _Py_HandlePending
// 191: 48 89 df                      movq    %rbx, %rdi
// 194: ff d0                         callq   *%rax
// 196: 85 c0                         testl   %eax, %eax
// 198: 0f 85 af 01 00 00             jne     0x34d <_JIT_ENTRY+0x34d>
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  _JIT_OPARG
// 1a8: f7 d0                         notl    %eax
// 1aa: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1af: 48 98                         cltq
// 1b1: 49 8b 4c c6 e0                movq    -0x20(%r14,%rax,8), %rcx
// 1b6: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 1bb: 4d 8b 6c c6 f8                movq    -0x8(%r14,%rax,8), %r13
// 1c0: 4d 8b 65 08                   movq    0x8(%r13), %r12
// 1c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c6:  R_X86_64_64  PyException_GetTraceback
// 1ce: 4c 89 ef                      movq    %r13, %rdi
// 1d1: ff d0                         callq   *%rax
// 1d3: 48 85 c0                      testq   %rax, %rax
// 1d6: 0f 84 e5 00 00 00             je      0x2c1 <_JIT_ENTRY+0x2c1>
// 1dc: 48 89 c5                      movq    %rax, %rbp
// 1df: 48 8b 00                      movq    (%rax), %rax
// 1e2: 48 85 c0                      testq   %rax, %rax
// 1e5: 7f 22                         jg      0x209 <_JIT_ENTRY+0x209>
// 1e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e9:  R_X86_64_64  .rodata.str1.1
// 1f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f3:  R_X86_64_64  _Py_NegativeRefcount
// 1fb: be 64 09 00 00                movl    $0x964, %esi            # imm = 0x964
// 200: 48 89 ea                      movq    %rbp, %rdx
// 203: ff d0                         callq   *%rax
// 205: 48 8b 45 00                   movq    (%rbp), %rax
// 209: 85 c0                         testl   %eax, %eax
// 20b: 0f 88 ba 00 00 00             js      0x2cb <_JIT_ENTRY+0x2cb>
// 211: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000213:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 21b: ff d0                         callq   *%rax
// 21d: 48 ff 4d 00                   decq    (%rbp)
// 221: 0f 85 a4 00 00 00             jne     0x2cb <_JIT_ENTRY+0x2cb>
// 227: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000229:  R_X86_64_64  _Py_Dealloc
// 231: 48 89 ef                      movq    %rbp, %rdi
// 234: ff d0                         callq   *%rax
// 236: e9 90 00 00 00                jmp     0x2cb <_JIT_ENTRY+0x2cb>
// 23b: 41 83 fd 02                   cmpl    $0x2, %r13d
// 23f: bb 01 00 00 00                movl    $0x1, %ebx
// 244: 41 0f 43 dd                   cmovael %r13d, %ebx
// 248: 45 31 ff                      xorl    %r15d, %r15d
// 24b: eb 0f                         jmp     0x25c <_JIT_ENTRY+0x25c>
// 24d: 0f 1f 00                      nopl    (%rax)
// 250: 49 ff c7                      incq    %r15
// 253: 4c 39 fb                      cmpq    %r15, %rbx
// 256: 0f 84 a8 fe ff ff             je      0x104 <_JIT_ENTRY+0x104>
// 25c: 4e 8b 6c fd 00                movq    (%rbp,%r15,8), %r13
// 261: 49 8b 45 00                   movq    (%r13), %rax
// 265: 48 85 c0                      testq   %rax, %rax
// 268: 7e 06                         jle     0x270 <_JIT_ENTRY+0x270>
// 26a: 85 c0                         testl   %eax, %eax
// 26c: 78 e2                         js      0x250 <_JIT_ENTRY+0x250>
// 26e: eb 26                         jmp     0x296 <_JIT_ENTRY+0x296>
// 270: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000272:  R_X86_64_64  .rodata.str1.1
// 27a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 27f: 4c 89 ea                      movq    %r13, %rdx
// 282: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000284:  R_X86_64_64  _Py_NegativeRefcount
// 28c: ff d0                         callq   *%rax
// 28e: 49 8b 45 00                   movq    (%r13), %rax
// 292: 85 c0                         testl   %eax, %eax
// 294: 78 ba                         js      0x250 <_JIT_ENTRY+0x250>
// 296: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000298:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a0: ff d0                         callq   *%rax
// 2a2: 49 ff 4d 00                   decq    (%r13)
// 2a6: 75 a8                         jne     0x250 <_JIT_ENTRY+0x250>
// 2a8: 4c 89 ef                      movq    %r13, %rdi
// 2ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ad:  R_X86_64_64  _Py_Dealloc
// 2b5: ff d0                         callq   *%rax
// 2b7: eb 97                         jmp     0x250 <_JIT_ENTRY+0x250>
// 2b9: 49 89 c7                      movq    %rax, %r15
// 2bc: e9 8c 00 00 00                jmp     0x34d <_JIT_ENTRY+0x34d>
// 2c1: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000002c3:  R_X86_64_64  _Py_NoneStruct
// 2cb: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 2d0: 48 c7 44 24 30 00 00 00 00    movq    $0x0, 0x30(%rsp)
// 2d9: 48 8d 74 24 38                leaq    0x38(%rsp), %rsi
// 2de: 4c 89 64 24 38                movq    %r12, 0x38(%rsp)
// 2e3: 4c 89 6c 24 40                movq    %r13, 0x40(%rsp)
// 2e8: 48 89 6c 24 48                movq    %rbp, 0x48(%rsp)
// 2ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ef:  R_X86_64_64  PyObject_Vectorcall
// 2f7: 48 ba 03 00 00 00 00 00 00 80 movabsq $-0x7ffffffffffffffd, %rdx # imm = 0x8000000000000003
// 301: 31 c9                         xorl    %ecx, %ecx
// 303: ff d0                         callq   *%rax
// 305: 48 85 c0                      testq   %rax, %rax
// 308: 74 43                         je      0x34d <_JIT_ENTRY+0x34d>
// 30a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000030c:  R_X86_64_64  _JIT_OPARG
// 314: f7 d1                         notl    %ecx
// 316: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 31c: 48 63 c9                      movslq  %ecx, %rcx
// 31f: 49 89 04 ce                   movq    %rax, (%r14,%rcx,8)
// 323: 49 8d 34 ce                   leaq    (%r14,%rcx,8), %rsi
// 327: 48 83 c6 08                   addq    $0x8, %rsi
// 32b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032d:  R_X86_64_64  _JIT_CONTINUE
// 335: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 33a: 48 89 da                      movq    %rbx, %rdx
// 33d: 48 83 c4 58                   addq    $0x58, %rsp
// 341: 5b                            popq    %rbx
// 342: 41 5c                         popq    %r12
// 344: 41 5d                         popq    %r13
// 346: 41 5e                         popq    %r14
// 348: 41 5f                         popq    %r15
// 34a: 5d                            popq    %rbp
// 34b: ff e0                         jmpq    *%rax
// 34d: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 352: 49 29 c7                      subq    %rax, %r15
// 355: 49 83 c7 b8                   addq    $-0x48, %r15
// 359: 49 c1 ef 03                   shrq    $0x3, %r15
// 35d: 44 89 78 40                   movl    %r15d, 0x40(%rax)
// 361: 31 c0                         xorl    %eax, %eax
// 363: e9 48 fd ff ff                jmp     0xb0 <_JIT_ENTRY+0xb0>
// 368: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_WITH_EXCEPT_START_code_body[873] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x58, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x89, 0xf0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd6, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x44, 0x8d, 0x6e, 0x01, 0x44, 0x0f, 0xb7, 0xc9, 0x4c, 0x89, 0xc9, 0x48, 0xf7, 0xd9, 0x48, 0x85, 0xc0, 0x44, 0x0f, 0x44, 0xee, 0x4c, 0x63, 0xdf, 0x49, 0xf7, 0xd1, 0x4c, 0x0f, 0x44, 0xc9, 0x4f, 0x8b, 0x24, 0xde, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x21, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x13, 0x4b, 0x8d, 0x2c, 0xce, 0x48, 0x8b, 0x7d, 0x00, 0x48, 0x8b, 0x77, 0x08, 0x49, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x37, 0x4d, 0x29, 0xc6, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x70, 0x40, 0x49, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x58, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x5c, 0x24, 0x08, 0x4c, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x54, 0x24, 0x28, 0x4c, 0x89, 0x44, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x8d, 0x75, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0x37, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x28, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x49, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x18, 0x4d, 0x8d, 0x3c, 0xce, 0x48, 0x89, 0x10, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xaf, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x4c, 0xc6, 0xe0, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x4d, 0x8b, 0x6c, 0xc6, 0xf8, 0x4d, 0x8b, 0x65, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xe5, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc5, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x64, 0x09, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x0f, 0x88, 0xba, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x0f, 0x85, 0xa4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0xe9, 0x90, 0x00, 0x00, 0x00, 0x41, 0x83, 0xfd, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xdd, 0x45, 0x31, 0xff, 0xeb, 0x0f, 0x0f, 0x1f, 0x00, 0x49, 0xff, 0xc7, 0x4c, 0x39, 0xfb, 0x0f, 0x84, 0xa8, 0xfe, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xfd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x49, 0x89, 0xc7, 0xe9, 0x8c, 0x00, 0x00, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0xc7, 0x44, 0x24, 0x30, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x74, 0x24, 0x38, 0x4c, 0x89, 0x64, 0x24, 0x38, 0x4c, 0x89, 0x6c, 0x24, 0x40, 0x48, 0x89, 0x6c, 0x24, 0x48, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x43, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x04, 0xce, 0x49, 0x8d, 0x34, 0xce, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x58, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x78, 0x40, 0x31, 0xc0, 0xe9, 0x48, 0xfd, 0xff, 0xff};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_WITH_EXCEPT_START_code_holes[24] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xee, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyException_GetTraceback, 0x0},
    {0x1e9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x229, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x272, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x284, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x298, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x2ef, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Vectorcall, 0x0},
    {0x30c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x32d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_FASTplus_WITH_EXCEPT_START_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FASTplus_WITH_EXCEPT_START_data_holes[1];

#define INIT_STENCIL(STENCIL) {                         \
    .body_size = Py_ARRAY_LENGTH(STENCIL##_body) - 1,   \
    .body = STENCIL##_body,                             \
    .holes_size = Py_ARRAY_LENGTH(STENCIL##_holes) - 1, \
    .holes = STENCIL##_holes,                           \
}

#define INIT_STENCIL_GROUP(OP) {     \
    .code = INIT_STENCIL(OP##_code), \
    .data = INIT_STENCIL(OP##_data), \
}

static const StencilGroup stencil_groups[512] = {
    [_CALL_METHOD_DESCRIPTOR_FASTplus_BEFORE_ASYNC_WITH] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_BEFORE_ASYNC_WITH),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_BEFORE_WITH] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_BEFORE_WITH),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_OP] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_OP),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_OP_ADD_FLOAT] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_OP_ADD_FLOAT),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_OP_ADD_INT] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_OP_ADD_INT),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_OP_ADD_UNICODE] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_OP_ADD_UNICODE),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_OP_MULTIPLY_FLOAT] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_OP_MULTIPLY_FLOAT),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_OP_MULTIPLY_INT] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_OP_MULTIPLY_INT),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_OP_SUBTRACT_FLOAT] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_OP_SUBTRACT_FLOAT),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_OP_SUBTRACT_INT] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_OP_SUBTRACT_INT),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_SLICE] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_SLICE),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_SUBSCR] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_SUBSCR),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_SUBSCR_DICT] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_SUBSCR_DICT),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_SUBSCR_LIST_INT] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_SUBSCR_LIST_INT),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_SUBSCR_STR_INT] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_SUBSCR_STR_INT),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_SUBSCR_TUPLE_INT] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_BINARY_SUBSCR_TUPLE_INT),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_BUILD_CONST_KEY_MAP] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_BUILD_CONST_KEY_MAP),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_BUILD_LIST] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_BUILD_LIST),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_BUILD_MAP] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_BUILD_MAP),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_BUILD_SET] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_BUILD_SET),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_BUILD_SLICE] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_BUILD_SLICE),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_BUILD_STRING] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_BUILD_STRING),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_BUILD_TUPLE] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_BUILD_TUPLE),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_CALL_BUILTIN_CLASS] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_CALL_BUILTIN_CLASS),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_CALL_BUILTIN_FAST] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_CALL_BUILTIN_FAST),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_CALL_BUILTIN_FAST_WITH_KEYWORDS] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_CALL_BUILTIN_FAST_WITH_KEYWORDS),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_CALL_BUILTIN_O] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_CALL_BUILTIN_O),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_CALL_INTRINSIC_1] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_CALL_INTRINSIC_1),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_CALL_INTRINSIC_2] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_CALL_INTRINSIC_2),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_CALL_ISINSTANCE] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_CALL_ISINSTANCE),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_CALL_LEN] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_CALL_LEN),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_CALL_METHOD_DESCRIPTOR_FAST] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_CALL_METHOD_DESCRIPTOR_FAST),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_CALL_METHOD_DESCRIPTOR_NOARGS] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_CALL_METHOD_DESCRIPTOR_NOARGS),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_CALL_METHOD_DESCRIPTOR_O] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_CALL_METHOD_DESCRIPTOR_O),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_CALL_STR_1] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_CALL_STR_1),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_CALL_TUPLE_1] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_CALL_TUPLE_1),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_CALL_TYPE_1] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_CALL_TYPE_1),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_ATTR_CLASS] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_ATTR_CLASS),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_ATTR_METHOD_LAZY_DICT] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_ATTR_METHOD_LAZY_DICT),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_ATTR_MODULE] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_ATTR_MODULE),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_ATTR_WITH_HINT] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_ATTR_WITH_HINT),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_EG_MATCH] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_EG_MATCH),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_EXC_MATCH] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_EXC_MATCH),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_FUNCTION_EXACT_ARGS] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_FUNCTION_EXACT_ARGS),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_MANAGED_OBJECT_HAS_VALUES] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_MANAGED_OBJECT_HAS_VALUES),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_PEP_523] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_PEP_523),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_STACK_SPACE] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_STACK_SPACE),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_VALIDITY] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_CHECK_VALIDITY),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_COMPARE_OP] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_COMPARE_OP),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_COMPARE_OP_FLOAT] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_COMPARE_OP_FLOAT),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_COMPARE_OP_INT] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_COMPARE_OP_INT),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_COMPARE_OP_STR] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_COMPARE_OP_STR),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_CONTAINS_OP] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_CONTAINS_OP),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_CONVERT_VALUE] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_CONVERT_VALUE),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_COPY] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_COPY),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_COPY_FREE_VARS] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_COPY_FREE_VARS),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_DELETE_ATTR] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_DELETE_ATTR),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_DELETE_DEREF] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_DELETE_DEREF),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_DELETE_FAST] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_DELETE_FAST),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_DELETE_GLOBAL] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_DELETE_GLOBAL),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_DELETE_NAME] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_DELETE_NAME),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_DELETE_SUBSCR] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_DELETE_SUBSCR),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_DICT_MERGE] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_DICT_MERGE),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_DICT_UPDATE] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_DICT_UPDATE),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_END_SEND] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_END_SEND),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_EXIT_INIT_CHECK] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_EXIT_INIT_CHECK),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_EXIT_TRACE] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_EXIT_TRACE),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_FORMAT_SIMPLE] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_FORMAT_SIMPLE),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_FORMAT_WITH_SPEC] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_FORMAT_WITH_SPEC),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_FOR_ITER_TIER_TWO] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_FOR_ITER_TIER_TWO),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_GET_AITER] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_GET_AITER),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_GET_ANEXT] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_GET_ANEXT),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_GET_AWAITABLE] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_GET_AWAITABLE),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_GET_ITER] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_GET_ITER),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_GET_LEN] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_GET_LEN),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_GET_YIELD_FROM_ITER] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_GET_YIELD_FROM_ITER),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_BOTH_FLOAT] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_BOTH_FLOAT),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_BOTH_INT] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_BOTH_INT),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_BOTH_UNICODE] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_BOTH_UNICODE),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_BUILTINS_VERSION] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_BUILTINS_VERSION),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_DORV_VALUES] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_DORV_VALUES),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_GLOBALS_VERSION] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_GLOBALS_VERSION),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_IS_FALSE_POP] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_IS_FALSE_POP),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_IS_NONE_POP] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_IS_NONE_POP),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_IS_NOT_NONE_POP] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_IS_NOT_NONE_POP),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_IS_TRUE_POP] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_IS_TRUE_POP),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_KEYS_VERSION] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_KEYS_VERSION),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_NOT_EXHAUSTED_LIST] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_NOT_EXHAUSTED_LIST),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_NOT_EXHAUSTED_RANGE] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_NOT_EXHAUSTED_RANGE),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_NOT_EXHAUSTED_TUPLE] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_NOT_EXHAUSTED_TUPLE),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_TYPE_VERSION] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_GUARD_TYPE_VERSION),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_INIT_CALL_PY_EXACT_ARGS] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_INIT_CALL_PY_EXACT_ARGS),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_INSERT] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_INSERT),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_IS_NONE] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_IS_NONE),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_IS_OP] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_IS_OP),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_ITER_CHECK_LIST] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_ITER_CHECK_LIST),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_ITER_CHECK_RANGE] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_ITER_CHECK_RANGE),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_ITER_CHECK_TUPLE] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_ITER_CHECK_TUPLE),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_ITER_NEXT_LIST] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_ITER_NEXT_LIST),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_ITER_NEXT_RANGE] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_ITER_NEXT_RANGE),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_ITER_NEXT_TUPLE] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_ITER_NEXT_TUPLE),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_JUMP_TO_TOP] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_JUMP_TO_TOP),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_LIST_APPEND] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_LIST_APPEND),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_LIST_EXTEND] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_LIST_EXTEND),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ASSERTION_ERROR] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ASSERTION_ERROR),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_CLASS] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_CLASS),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_INSTANCE_VALUE] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_INSTANCE_VALUE),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_METHOD_LAZY_DICT] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_METHOD_LAZY_DICT),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_METHOD_NO_DICT] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_METHOD_NO_DICT),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_METHOD_WITH_VALUES] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_METHOD_WITH_VALUES),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_MODULE] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_MODULE),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_SLOT] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_SLOT),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_WITH_HINT] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_ATTR_WITH_HINT),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_BUILD_CLASS] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_BUILD_CLASS),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_CONST] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_CONST),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_DEREF] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_DEREF),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_FAST] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_FAST),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_FAST_AND_CLEAR] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_FAST_AND_CLEAR),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_FAST_CHECK] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_FAST_CHECK),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_FROM_DICT_OR_DEREF] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_FROM_DICT_OR_DEREF),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_FROM_DICT_OR_GLOBALS] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_FROM_DICT_OR_GLOBALS),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_GLOBAL] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_GLOBAL),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_GLOBAL_BUILTINS] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_GLOBAL_BUILTINS),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_GLOBAL_MODULE] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_GLOBAL_MODULE),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_LOCALS] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_LOCALS),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_NAME] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_NAME),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_SUPER_ATTR_ATTR] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_SUPER_ATTR_ATTR),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_SUPER_ATTR_METHOD] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_LOAD_SUPER_ATTR_METHOD),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_MAKE_CELL] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_MAKE_CELL),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_MAKE_FUNCTION] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_MAKE_FUNCTION),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_MAP_ADD] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_MAP_ADD),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_MATCH_CLASS] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_MATCH_CLASS),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_MATCH_KEYS] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_MATCH_KEYS),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_MATCH_MAPPING] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_MATCH_MAPPING),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_MATCH_SEQUENCE] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_MATCH_SEQUENCE),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_NOP] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_NOP),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_POP_EXCEPT] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_POP_EXCEPT),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_POP_FRAME] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_POP_FRAME),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_POP_TOP] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_POP_TOP),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_PUSH_EXC_INFO] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_PUSH_EXC_INFO),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_PUSH_FRAME] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_PUSH_FRAME),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_PUSH_NULL] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_PUSH_NULL),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_RESUME_CHECK] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_RESUME_CHECK),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_SAVE_RETURN_OFFSET] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_SAVE_RETURN_OFFSET),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_SETUP_ANNOTATIONS] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_SETUP_ANNOTATIONS),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_SET_ADD] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_SET_ADD),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_SET_FUNCTION_ATTRIBUTE] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_SET_FUNCTION_ATTRIBUTE),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_SET_IP] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_SET_IP),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_SET_UPDATE] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_SET_UPDATE),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_STORE_ATTR] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_STORE_ATTR),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_STORE_ATTR_INSTANCE_VALUE] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_STORE_ATTR_INSTANCE_VALUE),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_STORE_ATTR_SLOT] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_STORE_ATTR_SLOT),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_STORE_DEREF] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_STORE_DEREF),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_STORE_FAST] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_STORE_FAST),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_STORE_GLOBAL] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_STORE_GLOBAL),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_STORE_NAME] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_STORE_NAME),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_STORE_SLICE] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_STORE_SLICE),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_STORE_SUBSCR] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_STORE_SUBSCR),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_STORE_SUBSCR_DICT] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_STORE_SUBSCR_DICT),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_STORE_SUBSCR_LIST_INT] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_STORE_SUBSCR_LIST_INT),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_SWAP] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_SWAP),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_TO_BOOL] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_TO_BOOL),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_TO_BOOL_ALWAYS_TRUE] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_TO_BOOL_ALWAYS_TRUE),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_TO_BOOL_BOOL] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_TO_BOOL_BOOL),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_TO_BOOL_INT] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_TO_BOOL_INT),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_TO_BOOL_LIST] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_TO_BOOL_LIST),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_TO_BOOL_NONE] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_TO_BOOL_NONE),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_TO_BOOL_STR] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_TO_BOOL_STR),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_UNARY_INVERT] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_UNARY_INVERT),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_UNARY_NEGATIVE] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_UNARY_NEGATIVE),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_UNARY_NOT] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_UNARY_NOT),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_UNPACK_EX] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_UNPACK_EX),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_UNPACK_SEQUENCE] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_UNPACK_SEQUENCE),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_UNPACK_SEQUENCE_LIST] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_UNPACK_SEQUENCE_LIST),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_UNPACK_SEQUENCE_TUPLE] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_UNPACK_SEQUENCE_TUPLE),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_UNPACK_SEQUENCE_TWO_TUPLE] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_UNPACK_SEQUENCE_TWO_TUPLE),
    [_CALL_METHOD_DESCRIPTOR_FASTplus_WITH_EXCEPT_START] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FASTplus_WITH_EXCEPT_START),
};

#define GET_PATCHES() { \
    [HoleValue_CODE] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_CONTINUE] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_DATA] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_EXECUTOR] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_GOT] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_OPARG] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_OPERAND] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_TARGET] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_TOP] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_ZERO] = (uint64_t)0xBADBADBADBADBADB, \
}
