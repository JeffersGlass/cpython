// $ /home/jglass/.pyenv/versions/3.12.1/bin/python Tools/jit/build_two_reuse.py x86_64-unknown-linux-gnu --all_ops

typedef enum {
    HoleKind_ARM64_RELOC_GOT_LOAD_PAGE21,
    HoleKind_ARM64_RELOC_GOT_LOAD_PAGEOFF12,
    HoleKind_ARM64_RELOC_UNSIGNED,
    HoleKind_IMAGE_REL_AMD64_ADDR64,
    HoleKind_IMAGE_REL_I386_DIR32,
    HoleKind_R_AARCH64_ABS64,
    HoleKind_R_AARCH64_CALL26,
    HoleKind_R_AARCH64_JUMP26,
    HoleKind_R_AARCH64_MOVW_UABS_G0_NC,
    HoleKind_R_AARCH64_MOVW_UABS_G1_NC,
    HoleKind_R_AARCH64_MOVW_UABS_G2_NC,
    HoleKind_R_AARCH64_MOVW_UABS_G3,
    HoleKind_R_X86_64_64,
    HoleKind_X86_64_RELOC_UNSIGNED,
} HoleKind;

typedef enum {
    HoleValue_CODE,
    HoleValue_CONTINUE,
    HoleValue_DATA,
    HoleValue_EXECUTOR,
    HoleValue_GOT,
    HoleValue_OPARG,
    HoleValue_OPERAND,
    HoleValue_TARGET,
    HoleValue_TOP,
    HoleValue_ZERO,
} HoleValue;

typedef struct {
    const uint64_t offset;
    const HoleKind kind;
    const HoleValue value;
    const void *symbol;
    const uint64_t addend;
} Hole;

typedef struct {
    const size_t body_size;
    const unsigned char * const body;
    const size_t holes_size;
    const Hole * const holes;
} Stencil;

typedef struct {
    const Stencil code;
    const Stencil data;
} StencilGroup;

// _LOAD_ATTR_SLOTplus_BEFORE_ASYNC_WITH
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_BEFORE_ASYNC_WITH.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 13: 49 89 f7                      movq    %rsi, %r15
// 16: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001c:  R_X86_64_64  _JIT_OPERAND
// 24: 0f b7 c0                      movzwl  %ax, %eax
// 27: 49 8b 1c 04                   movq    (%r12,%rax), %rbx
// 2b: 48 85 db                      testq   %rbx, %rbx
// 2e: 74 1c                         je      0x4c <_JIT_ENTRY+0x4c>
// 30: 48 89 3c 24                   movq    %rdi, (%rsp)
// 34: 8b 03                         movl    (%rbx), %eax
// 36: ff c0                         incl    %eax
// 38: 75 3f                         jne     0x79 <_JIT_ENTRY+0x79>
// 3a: 49 8b 04 24                   movq    (%r12), %rax
// 3e: 48 85 c0                      testq   %rax, %rax
// 41: 7e 4d                         jle     0x90 <_JIT_ENTRY+0x90>
// 43: 85 c0                         testl   %eax, %eax
// 45: 79 6f                         jns     0xb6 <_JIT_ENTRY+0xb6>
// 47: e9 8b 00 00 00                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 4c: 49 29 ff                      subq    %rdi, %r15
// 4f: 49 83 c7 b8                   addq    $-0x48, %r15
// 53: 49 c1 ef 03                   shrq    $0x3, %r15
// 57: 44 89 7f 40                   movl    %r15d, 0x40(%rdi)
// 5b: 48 8b 07                      movq    (%rdi), %rax
// 5e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000060:  R_X86_64_64  _JIT_TARGET
// 68: 89 c9                         movl    %ecx, %ecx
// 6a: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 6e: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 74: e9 e9 03 00 00                jmp     0x462 <_JIT_ENTRY+0x462>
// 79: 89 03                         movl    %eax, (%rbx)
// 7b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007d:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 85: ff d0                         callq   *%rax
// 87: 49 8b 04 24                   movq    (%r12), %rax
// 8b: 48 85 c0                      testq   %rax, %rax
// 8e: 7f b3                         jg      0x43 <_JIT_ENTRY+0x43>
// 90: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000092:  R_X86_64_64  .rodata.str1.1
// 9a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009c:  R_X86_64_64  _Py_NegativeRefcount
// a4: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a9: 4c 89 e2                      movq    %r12, %rdx
// ac: ff d0                         callq   *%rax
// ae: 49 8b 04 24                   movq    (%r12), %rax
// b2: 85 c0                         testl   %eax, %eax
// b4: 78 21                         js      0xd7 <_JIT_ENTRY+0xd7>
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c0: ff d0                         callq   *%rax
// c2: 49 ff 0c 24                   decq    (%r12)
// c6: 75 0f                         jne     0xd7 <_JIT_ENTRY+0xd7>
// c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ca:  R_X86_64_64  _Py_Dealloc
// d2: 4c 89 e7                      movq    %r12, %rdi
// d5: ff d0                         callq   *%rax
// d7: 49 89 5f f8                   movq    %rbx, -0x8(%r15)
// db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000dd:  R_X86_64_64  _JIT_OPARG
// e5: a8 01                         testb   $0x1, %al
// e7: 74 07                         je      0xf0 <_JIT_ENTRY+0xf0>
// e9: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// f0: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 00000000000000f2:  R_X86_64_64  _JIT_OPARG
// fa: 41 83 e6 01                   andl    $0x1, %r14d
// fe: 4b 8d 1c f7                   leaq    (%r15,%r14,8), %rbx
// 102: 4b 8b 6c f7 f8                movq    -0x8(%r15,%r14,8), %rbp
// 107: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000109:  R_X86_64_64  _PyObject_LookupSpecial
// 111: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000113:  R_X86_64_64  _PyRuntime
// 11b: 49 8d b5 68 a6 00 00          leaq    0xa668(%r13), %rsi
// 122: 48 89 ef                      movq    %rbp, %rdi
// 125: 41 ff d4                      callq   *%r12
// 128: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 12d: 48 85 c0                      testq   %rax, %rax
// 130: 74 37                         je      0x169 <_JIT_ENTRY+0x169>
// 132: 49 81 c5 a0 a6 00 00          addq    $0xa6a0, %r13           # imm = 0xA6A0
// 139: 48 89 ef                      movq    %rbp, %rdi
// 13c: 4c 89 ee                      movq    %r13, %rsi
// 13f: 41 ff d4                      callq   *%r12
// 142: 48 85 c0                      testq   %rax, %rax
// 145: 74 6e                         je      0x1b5 <_JIT_ENTRY+0x1b5>
// 147: 49 89 c5                      movq    %rax, %r13
// 14a: 48 8b 45 00                   movq    (%rbp), %rax
// 14e: 48 85 c0                      testq   %rax, %rax
// 151: 0f 8e 99 00 00 00             jle     0x1f0 <_JIT_ENTRY+0x1f0>
// 157: 85 c0                         testl   %eax, %eax
// 159: 4c 8b 64 24 10                movq    0x10(%rsp), %r12
// 15e: 0f 88 cd 00 00 00             js      0x231 <_JIT_ENTRY+0x231>
// 164: e9 b2 00 00 00                jmp     0x21b <_JIT_ENTRY+0x21b>
// 169: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 16e: 48 8b 47 68                   movq    0x68(%rdi), %rax
// 172: 48 85 c0                      testq   %rax, %rax
// 175: 74 0b                         je      0x182 <_JIT_ENTRY+0x182>
// 177: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 17c: 0f 85 cc 02 00 00             jne     0x44e <_JIT_ENTRY+0x44e>
// 182: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000184:  R_X86_64_64  PyExc_TypeError
// 18c: 48 8b 30                      movq    (%rax), %rsi
// 18f: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 193: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 197: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000199:  R_X86_64_64  .rodata.str1.1+0x39
// 1a1: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000001a3:  R_X86_64_64  _PyErr_Format
// 1ab: 31 c0                         xorl    %eax, %eax
// 1ad: 41 ff d0                      callq   *%r8
// 1b0: e9 99 02 00 00                jmp     0x44e <_JIT_ENTRY+0x44e>
// 1b5: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1ba: 48 8b 47 68                   movq    0x68(%rdi), %rax
// 1be: 48 85 c0                      testq   %rax, %rax
// 1c1: 0f 84 ca 00 00 00             je      0x291 <_JIT_ENTRY+0x291>
// 1c7: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 1cc: 0f 84 bf 00 00 00             je      0x291 <_JIT_ENTRY+0x291>
// 1d2: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1d7: 49 8b 06                      movq    (%r14), %rax
// 1da: 48 85 c0                      testq   %rax, %rax
// 1dd: 0f 8e ed 00 00 00             jle     0x2d0 <_JIT_ENTRY+0x2d0>
// 1e3: 85 c0                         testl   %eax, %eax
// 1e5: 0f 89 0e 01 00 00             jns     0x2f9 <_JIT_ENTRY+0x2f9>
// 1eb: e9 5e 02 00 00                jmp     0x44e <_JIT_ENTRY+0x44e>
// 1f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f2:  R_X86_64_64  .rodata.str1.1
// 1fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fc:  R_X86_64_64  _Py_NegativeRefcount
// 204: be 14 09 00 00                movl    $0x914, %esi            # imm = 0x914
// 209: 48 89 ea                      movq    %rbp, %rdx
// 20c: ff d0                         callq   *%rax
// 20e: 48 8b 45 00                   movq    (%rbp), %rax
// 212: 85 c0                         testl   %eax, %eax
// 214: 4c 8b 64 24 10                movq    0x10(%rsp), %r12
// 219: 78 16                         js      0x231 <_JIT_ENTRY+0x231>
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 225: ff d0                         callq   *%rax
// 227: 48 ff 4d 00                   decq    (%rbp)
// 22b: 0f 84 ef 00 00 00             je      0x320 <_JIT_ENTRY+0x320>
// 231: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 236: f6 80 a9 00 00 00 08          testb   $0x8, 0xa9(%rax)
// 23d: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 242: 0f 84 fe 00 00 00             je      0x346 <_JIT_ENTRY+0x346>
// 248: 48 8b 40 38                   movq    0x38(%rax), %rax
// 24c: 49 8b 04 04                   movq    (%r12,%rax), %rax
// 250: 48 85 c0                      testq   %rax, %rax
// 253: 0f 84 ed 00 00 00             je      0x346 <_JIT_ENTRY+0x346>
// 259: 4c 89 e7                      movq    %r12, %rdi
// 25c: 31 f6                         xorl    %esi, %esi
// 25e: 31 d2                         xorl    %edx, %edx
// 260: 31 c9                         xorl    %ecx, %ecx
// 262: ff d0                         callq   *%rax
// 264: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000266:  R_X86_64_64  _Py_CheckFunctionResult
// 26e: 48 89 df                      movq    %rbx, %rdi
// 271: 4c 89 e6                      movq    %r12, %rsi
// 274: 48 89 c2                      movq    %rax, %rdx
// 277: 31 c9                         xorl    %ecx, %ecx
// 279: 41 ff d0                      callq   *%r8
// 27c: 48 89 c5                      movq    %rax, %rbp
// 27f: 49 8b 04 24                   movq    (%r12), %rax
// 283: 48 85 c0                      testq   %rax, %rax
// 286: 0f 8f 01 01 00 00             jg      0x38d <_JIT_ENTRY+0x38d>
// 28c: e9 da 00 00 00                jmp     0x36b <_JIT_ENTRY+0x36b>
// 291: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000293:  R_X86_64_64  PyExc_TypeError
// 29b: 48 8b 30                      movq    (%rax), %rsi
// 29e: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2a2: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 2a6: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002a8:  R_X86_64_64  .rodata.str1.1+0x84
// 2b0: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000002b2:  R_X86_64_64  _PyErr_Format
// 2ba: 31 c0                         xorl    %eax, %eax
// 2bc: 41 ff d0                      callq   *%r8
// 2bf: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 2c4: 49 8b 06                      movq    (%r14), %rax
// 2c7: 48 85 c0                      testq   %rax, %rax
// 2ca: 0f 8f 13 ff ff ff             jg      0x1e3 <_JIT_ENTRY+0x1e3>
// 2d0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002d2:  R_X86_64_64  .rodata.str1.1
// 2da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002dc:  R_X86_64_64  _Py_NegativeRefcount
// 2e4: be 11 09 00 00                movl    $0x911, %esi            # imm = 0x911
// 2e9: 4c 89 f2                      movq    %r14, %rdx
// 2ec: ff d0                         callq   *%rax
// 2ee: 49 8b 06                      movq    (%r14), %rax
// 2f1: 85 c0                         testl   %eax, %eax
// 2f3: 0f 88 55 01 00 00             js      0x44e <_JIT_ENTRY+0x44e>
// 2f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 303: ff d0                         callq   *%rax
// 305: 49 ff 0e                      decq    (%r14)
// 308: 0f 85 40 01 00 00             jne     0x44e <_JIT_ENTRY+0x44e>
// 30e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000310:  R_X86_64_64  _Py_Dealloc
// 318: 4c 89 f7                      movq    %r14, %rdi
// 31b: e9 2c 01 00 00                jmp     0x44c <_JIT_ENTRY+0x44c>
// 320: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000322:  R_X86_64_64  _Py_Dealloc
// 32a: 48 89 ef                      movq    %rbp, %rdi
// 32d: ff d0                         callq   *%rax
// 32f: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 334: f6 80 a9 00 00 00 08          testb   $0x8, 0xa9(%rax)
// 33b: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 340: 0f 85 02 ff ff ff             jne     0x248 <_JIT_ENTRY+0x248>
// 346: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000348:  R_X86_64_64  _PyObject_MakeTpCall
// 350: 48 89 df                      movq    %rbx, %rdi
// 353: 4c 89 e6                      movq    %r12, %rsi
// 356: 31 d2                         xorl    %edx, %edx
// 358: 31 c9                         xorl    %ecx, %ecx
// 35a: 45 31 c0                      xorl    %r8d, %r8d
// 35d: ff d0                         callq   *%rax
// 35f: 48 89 c5                      movq    %rax, %rbp
// 362: 49 8b 04 24                   movq    (%r12), %rax
// 366: 48 85 c0                      testq   %rax, %rax
// 369: 7f 22                         jg      0x38d <_JIT_ENTRY+0x38d>
// 36b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000036d:  R_X86_64_64  .rodata.str1.1
// 375: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000377:  R_X86_64_64  _Py_NegativeRefcount
// 37f: be 16 09 00 00                movl    $0x916, %esi            # imm = 0x916
// 384: 4c 89 e2                      movq    %r12, %rdx
// 387: ff d0                         callq   *%rax
// 389: 49 8b 04 24                   movq    (%r12), %rax
// 38d: 85 c0                         testl   %eax, %eax
// 38f: 78 21                         js      0x3b2 <_JIT_ENTRY+0x3b2>
// 391: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000393:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 39b: ff d0                         callq   *%rax
// 39d: 49 ff 0c 24                   decq    (%r12)
// 3a1: 75 0f                         jne     0x3b2 <_JIT_ENTRY+0x3b2>
// 3a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a5:  R_X86_64_64  _Py_Dealloc
// 3ad: 4c 89 e7                      movq    %r12, %rdi
// 3b0: ff d0                         callq   *%rax
// 3b2: 48 85 ed                      testq   %rbp, %rbp
// 3b5: 74 3f                         je      0x3f6 <_JIT_ENTRY+0x3f6>
// 3b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003b9:  R_X86_64_64  _JIT_OPARG
// 3c1: 83 e0 01                      andl    $0x1, %eax
// 3c4: 4d 89 6c c7 f8                movq    %r13, -0x8(%r15,%rax,8)
// 3c9: 49 89 2c c7                   movq    %rbp, (%r15,%rax,8)
// 3cd: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 3d1: 48 83 c6 08                   addq    $0x8, %rsi
// 3d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003d7:  R_X86_64_64  _JIT_CONTINUE
// 3df: 48 8b 3c 24                   movq    (%rsp), %rdi
// 3e3: 48 89 da                      movq    %rbx, %rdx
// 3e6: 48 83 c4 18                   addq    $0x18, %rsp
// 3ea: 5b                            popq    %rbx
// 3eb: 41 5c                         popq    %r12
// 3ed: 41 5d                         popq    %r13
// 3ef: 41 5e                         popq    %r14
// 3f1: 41 5f                         popq    %r15
// 3f3: 5d                            popq    %rbp
// 3f4: ff e0                         jmpq    *%rax
// 3f6: 49 8b 45 00                   movq    (%r13), %rax
// 3fa: 48 85 c0                      testq   %rax, %rax
// 3fd: 7f 22                         jg      0x421 <_JIT_ENTRY+0x421>
// 3ff: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000401:  R_X86_64_64  .rodata.str1.1
// 409: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000040b:  R_X86_64_64  _Py_NegativeRefcount
// 413: be 18 09 00 00                movl    $0x918, %esi            # imm = 0x918
// 418: 4c 89 ea                      movq    %r13, %rdx
// 41b: ff d0                         callq   *%rax
// 41d: 49 8b 45 00                   movq    (%r13), %rax
// 421: 4b 8d 1c f7                   leaq    (%r15,%r14,8), %rbx
// 425: 48 83 c3 f8                   addq    $-0x8, %rbx
// 429: 85 c0                         testl   %eax, %eax
// 42b: 78 21                         js      0x44e <_JIT_ENTRY+0x44e>
// 42d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000042f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 437: ff d0                         callq   *%rax
// 439: 49 ff 4d 00                   decq    (%r13)
// 43d: 75 0f                         jne     0x44e <_JIT_ENTRY+0x44e>
// 43f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000441:  R_X86_64_64  _Py_Dealloc
// 449: 4c 89 ef                      movq    %r13, %rdi
// 44c: ff d0                         callq   *%rax
// 44e: 48 8b 04 24                   movq    (%rsp), %rax
// 452: 48 29 c3                      subq    %rax, %rbx
// 455: 48 83 c3 b8                   addq    $-0x48, %rbx
// 459: 48 c1 eb 03                   shrq    $0x3, %rbx
// 45d: 89 58 40                      movl    %ebx, 0x40(%rax)
// 460: 31 c0                         xorl    %eax, %eax
// 462: 48 83 c4 18                   addq    $0x18, %rsp
// 466: 5b                            popq    %rbx
// 467: 41 5c                         popq    %r12
// 469: 41 5d                         popq    %r13
// 46b: 41 5e                         popq    %r14
// 46d: 41 5f                         popq    %r15
// 46f: 5d                            popq    %rbp
// 470: c3                            retq
// 471: 
static const unsigned char _LOAD_ATTR_SLOTplus_BEFORE_ASYNC_WITH_code_body[1138] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0x54, 0x24, 0x08, 0x49, 0x89, 0xf7, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8b, 0x1c, 0x04, 0x48, 0x85, 0xdb, 0x74, 0x1c, 0x48, 0x89, 0x3c, 0x24, 0x8b, 0x03, 0xff, 0xc0, 0x75, 0x3f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4d, 0x85, 0xc0, 0x79, 0x6f, 0xe9, 0x8b, 0x00, 0x00, 0x00, 0x49, 0x29, 0xff, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xe9, 0x03, 0x00, 0x00, 0x89, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0x5f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x83, 0xe6, 0x01, 0x4b, 0x8d, 0x1c, 0xf7, 0x4b, 0x8b, 0x6c, 0xf7, 0xf8, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8d, 0xb5, 0x68, 0xa6, 0x00, 0x00, 0x48, 0x89, 0xef, 0x41, 0xff, 0xd4, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x74, 0x37, 0x49, 0x81, 0xc5, 0xa0, 0xa6, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x41, 0xff, 0xd4, 0x48, 0x85, 0xc0, 0x74, 0x6e, 0x49, 0x89, 0xc5, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x99, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x64, 0x24, 0x10, 0x0f, 0x88, 0xcd, 0x00, 0x00, 0x00, 0xe9, 0xb2, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x47, 0x68, 0x48, 0x85, 0xc0, 0x74, 0x0b, 0x48, 0x83, 0x78, 0x08, 0x00, 0x0f, 0x85, 0xcc, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0xe9, 0x99, 0x02, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x47, 0x68, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xca, 0x00, 0x00, 0x00, 0x48, 0x83, 0x78, 0x08, 0x00, 0x0f, 0x84, 0xbf, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xed, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x0e, 0x01, 0x00, 0x00, 0xe9, 0x5e, 0x02, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x14, 0x09, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x64, 0x24, 0x10, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xef, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x08, 0xf6, 0x80, 0xa9, 0x00, 0x00, 0x00, 0x08, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x0f, 0x84, 0xfe, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x40, 0x38, 0x49, 0x8b, 0x04, 0x04, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xed, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x31, 0xf6, 0x31, 0xd2, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xc2, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x01, 0x01, 0x00, 0x00, 0xe9, 0xda, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x13, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x11, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x0f, 0x88, 0x55, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x40, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xe9, 0x2c, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x44, 0x24, 0x08, 0xf6, 0x80, 0xa9, 0x00, 0x00, 0x00, 0x08, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x0f, 0x85, 0x02, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x31, 0xd2, 0x31, 0xc9, 0x45, 0x31, 0xc0, 0xff, 0xd0, 0x48, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x16, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x74, 0x3f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x4d, 0x89, 0x6c, 0xc7, 0xf8, 0x49, 0x89, 0x2c, 0xc7, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x18, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x4b, 0x8d, 0x1c, 0xf7, 0x48, 0x83, 0xc3, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x29, 0xc3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x89, 0x58, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _LOAD_ATTR_SLOTplus_BEFORE_ASYNC_WITH_code_holes[38] = {
    {0x1c, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x60, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xdd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x109, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_LookupSpecial, 0x0},
    {0x113, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x199, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1fc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x266, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckFunctionResult, 0x0},
    {0x293, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x2a8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x84},
    {0x2b2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x2d2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2dc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x310, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x322, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x348, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_MakeTpCall, 0x0},
    {0x36d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x377, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x393, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3b9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3d7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x401, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x40b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x42f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x441, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'%.200s' object does not support the asynchronous context manager protocol\x00'%.200s' object does not support the asynchronous context manager protocol (missed __aexit__ method)\x00"
// e9: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_BEFORE_ASYNC_WITH_data_body[241] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x20, 0x28, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x20, 0x5f, 0x5f, 0x61, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x5f, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_BEFORE_ASYNC_WITH_data_holes[1];

// _LOAD_ATTR_SLOTplus_BEFORE_WITH
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_BEFORE_WITH.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 13: 49 89 f7                      movq    %rsi, %r15
// 16: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001c:  R_X86_64_64  _JIT_OPERAND
// 24: 0f b7 c0                      movzwl  %ax, %eax
// 27: 49 8b 1c 04                   movq    (%r12,%rax), %rbx
// 2b: 48 85 db                      testq   %rbx, %rbx
// 2e: 74 1c                         je      0x4c <_JIT_ENTRY+0x4c>
// 30: 48 89 3c 24                   movq    %rdi, (%rsp)
// 34: 8b 03                         movl    (%rbx), %eax
// 36: ff c0                         incl    %eax
// 38: 75 3f                         jne     0x79 <_JIT_ENTRY+0x79>
// 3a: 49 8b 04 24                   movq    (%r12), %rax
// 3e: 48 85 c0                      testq   %rax, %rax
// 41: 7e 4d                         jle     0x90 <_JIT_ENTRY+0x90>
// 43: 85 c0                         testl   %eax, %eax
// 45: 79 6f                         jns     0xb6 <_JIT_ENTRY+0xb6>
// 47: e9 8b 00 00 00                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 4c: 49 29 ff                      subq    %rdi, %r15
// 4f: 49 83 c7 b8                   addq    $-0x48, %r15
// 53: 49 c1 ef 03                   shrq    $0x3, %r15
// 57: 44 89 7f 40                   movl    %r15d, 0x40(%rdi)
// 5b: 48 8b 07                      movq    (%rdi), %rax
// 5e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000060:  R_X86_64_64  _JIT_TARGET
// 68: 89 c9                         movl    %ecx, %ecx
// 6a: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 6e: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 74: e9 e9 03 00 00                jmp     0x462 <_JIT_ENTRY+0x462>
// 79: 89 03                         movl    %eax, (%rbx)
// 7b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007d:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 85: ff d0                         callq   *%rax
// 87: 49 8b 04 24                   movq    (%r12), %rax
// 8b: 48 85 c0                      testq   %rax, %rax
// 8e: 7f b3                         jg      0x43 <_JIT_ENTRY+0x43>
// 90: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000092:  R_X86_64_64  .rodata.str1.1
// 9a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009c:  R_X86_64_64  _Py_NegativeRefcount
// a4: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a9: 4c 89 e2                      movq    %r12, %rdx
// ac: ff d0                         callq   *%rax
// ae: 49 8b 04 24                   movq    (%r12), %rax
// b2: 85 c0                         testl   %eax, %eax
// b4: 78 21                         js      0xd7 <_JIT_ENTRY+0xd7>
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c0: ff d0                         callq   *%rax
// c2: 49 ff 0c 24                   decq    (%r12)
// c6: 75 0f                         jne     0xd7 <_JIT_ENTRY+0xd7>
// c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ca:  R_X86_64_64  _Py_Dealloc
// d2: 4c 89 e7                      movq    %r12, %rdi
// d5: ff d0                         callq   *%rax
// d7: 49 89 5f f8                   movq    %rbx, -0x8(%r15)
// db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000dd:  R_X86_64_64  _JIT_OPARG
// e5: a8 01                         testb   $0x1, %al
// e7: 74 07                         je      0xf0 <_JIT_ENTRY+0xf0>
// e9: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// f0: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 00000000000000f2:  R_X86_64_64  _JIT_OPARG
// fa: 41 83 e6 01                   andl    $0x1, %r14d
// fe: 4b 8d 1c f7                   leaq    (%r15,%r14,8), %rbx
// 102: 4b 8b 6c f7 f8                movq    -0x8(%r15,%r14,8), %rbp
// 107: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000109:  R_X86_64_64  _PyObject_LookupSpecial
// 111: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000113:  R_X86_64_64  _PyRuntime
// 11b: 49 8d b5 50 ae 00 00          leaq    0xae50(%r13), %rsi
// 122: 48 89 ef                      movq    %rbp, %rdi
// 125: 41 ff d4                      callq   *%r12
// 128: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 12d: 48 85 c0                      testq   %rax, %rax
// 130: 74 37                         je      0x169 <_JIT_ENTRY+0x169>
// 132: 49 81 c5 b8 ae 00 00          addq    $0xaeb8, %r13           # imm = 0xAEB8
// 139: 48 89 ef                      movq    %rbp, %rdi
// 13c: 4c 89 ee                      movq    %r13, %rsi
// 13f: 41 ff d4                      callq   *%r12
// 142: 48 85 c0                      testq   %rax, %rax
// 145: 74 6e                         je      0x1b5 <_JIT_ENTRY+0x1b5>
// 147: 49 89 c5                      movq    %rax, %r13
// 14a: 48 8b 45 00                   movq    (%rbp), %rax
// 14e: 48 85 c0                      testq   %rax, %rax
// 151: 0f 8e 99 00 00 00             jle     0x1f0 <_JIT_ENTRY+0x1f0>
// 157: 85 c0                         testl   %eax, %eax
// 159: 4c 8b 64 24 10                movq    0x10(%rsp), %r12
// 15e: 0f 88 cd 00 00 00             js      0x231 <_JIT_ENTRY+0x231>
// 164: e9 b2 00 00 00                jmp     0x21b <_JIT_ENTRY+0x21b>
// 169: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 16e: 48 8b 47 68                   movq    0x68(%rdi), %rax
// 172: 48 85 c0                      testq   %rax, %rax
// 175: 74 0b                         je      0x182 <_JIT_ENTRY+0x182>
// 177: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 17c: 0f 85 cc 02 00 00             jne     0x44e <_JIT_ENTRY+0x44e>
// 182: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000184:  R_X86_64_64  PyExc_TypeError
// 18c: 48 8b 30                      movq    (%rax), %rsi
// 18f: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 193: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 197: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000199:  R_X86_64_64  .rodata.str1.1+0x39
// 1a1: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000001a3:  R_X86_64_64  _PyErr_Format
// 1ab: 31 c0                         xorl    %eax, %eax
// 1ad: 41 ff d0                      callq   *%r8
// 1b0: e9 99 02 00 00                jmp     0x44e <_JIT_ENTRY+0x44e>
// 1b5: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1ba: 48 8b 47 68                   movq    0x68(%rdi), %rax
// 1be: 48 85 c0                      testq   %rax, %rax
// 1c1: 0f 84 ca 00 00 00             je      0x291 <_JIT_ENTRY+0x291>
// 1c7: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 1cc: 0f 84 bf 00 00 00             je      0x291 <_JIT_ENTRY+0x291>
// 1d2: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1d7: 49 8b 06                      movq    (%r14), %rax
// 1da: 48 85 c0                      testq   %rax, %rax
// 1dd: 0f 8e ed 00 00 00             jle     0x2d0 <_JIT_ENTRY+0x2d0>
// 1e3: 85 c0                         testl   %eax, %eax
// 1e5: 0f 89 0e 01 00 00             jns     0x2f9 <_JIT_ENTRY+0x2f9>
// 1eb: e9 5e 02 00 00                jmp     0x44e <_JIT_ENTRY+0x44e>
// 1f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f2:  R_X86_64_64  .rodata.str1.1
// 1fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fc:  R_X86_64_64  _Py_NegativeRefcount
// 204: be 3f 09 00 00                movl    $0x93f, %esi            # imm = 0x93F
// 209: 48 89 ea                      movq    %rbp, %rdx
// 20c: ff d0                         callq   *%rax
// 20e: 48 8b 45 00                   movq    (%rbp), %rax
// 212: 85 c0                         testl   %eax, %eax
// 214: 4c 8b 64 24 10                movq    0x10(%rsp), %r12
// 219: 78 16                         js      0x231 <_JIT_ENTRY+0x231>
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 225: ff d0                         callq   *%rax
// 227: 48 ff 4d 00                   decq    (%rbp)
// 22b: 0f 84 ef 00 00 00             je      0x320 <_JIT_ENTRY+0x320>
// 231: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 236: f6 80 a9 00 00 00 08          testb   $0x8, 0xa9(%rax)
// 23d: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 242: 0f 84 fe 00 00 00             je      0x346 <_JIT_ENTRY+0x346>
// 248: 48 8b 40 38                   movq    0x38(%rax), %rax
// 24c: 49 8b 04 04                   movq    (%r12,%rax), %rax
// 250: 48 85 c0                      testq   %rax, %rax
// 253: 0f 84 ed 00 00 00             je      0x346 <_JIT_ENTRY+0x346>
// 259: 4c 89 e7                      movq    %r12, %rdi
// 25c: 31 f6                         xorl    %esi, %esi
// 25e: 31 d2                         xorl    %edx, %edx
// 260: 31 c9                         xorl    %ecx, %ecx
// 262: ff d0                         callq   *%rax
// 264: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000266:  R_X86_64_64  _Py_CheckFunctionResult
// 26e: 48 89 df                      movq    %rbx, %rdi
// 271: 4c 89 e6                      movq    %r12, %rsi
// 274: 48 89 c2                      movq    %rax, %rdx
// 277: 31 c9                         xorl    %ecx, %ecx
// 279: 41 ff d0                      callq   *%r8
// 27c: 48 89 c5                      movq    %rax, %rbp
// 27f: 49 8b 04 24                   movq    (%r12), %rax
// 283: 48 85 c0                      testq   %rax, %rax
// 286: 0f 8f 01 01 00 00             jg      0x38d <_JIT_ENTRY+0x38d>
// 28c: e9 da 00 00 00                jmp     0x36b <_JIT_ENTRY+0x36b>
// 291: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000293:  R_X86_64_64  PyExc_TypeError
// 29b: 48 8b 30                      movq    (%rax), %rsi
// 29e: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2a2: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 2a6: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002a8:  R_X86_64_64  .rodata.str1.1+0x77
// 2b0: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000002b2:  R_X86_64_64  _PyErr_Format
// 2ba: 31 c0                         xorl    %eax, %eax
// 2bc: 41 ff d0                      callq   *%r8
// 2bf: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 2c4: 49 8b 06                      movq    (%r14), %rax
// 2c7: 48 85 c0                      testq   %rax, %rax
// 2ca: 0f 8f 13 ff ff ff             jg      0x1e3 <_JIT_ENTRY+0x1e3>
// 2d0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002d2:  R_X86_64_64  .rodata.str1.1
// 2da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002dc:  R_X86_64_64  _Py_NegativeRefcount
// 2e4: be 3c 09 00 00                movl    $0x93c, %esi            # imm = 0x93C
// 2e9: 4c 89 f2                      movq    %r14, %rdx
// 2ec: ff d0                         callq   *%rax
// 2ee: 49 8b 06                      movq    (%r14), %rax
// 2f1: 85 c0                         testl   %eax, %eax
// 2f3: 0f 88 55 01 00 00             js      0x44e <_JIT_ENTRY+0x44e>
// 2f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 303: ff d0                         callq   *%rax
// 305: 49 ff 0e                      decq    (%r14)
// 308: 0f 85 40 01 00 00             jne     0x44e <_JIT_ENTRY+0x44e>
// 30e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000310:  R_X86_64_64  _Py_Dealloc
// 318: 4c 89 f7                      movq    %r14, %rdi
// 31b: e9 2c 01 00 00                jmp     0x44c <_JIT_ENTRY+0x44c>
// 320: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000322:  R_X86_64_64  _Py_Dealloc
// 32a: 48 89 ef                      movq    %rbp, %rdi
// 32d: ff d0                         callq   *%rax
// 32f: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 334: f6 80 a9 00 00 00 08          testb   $0x8, 0xa9(%rax)
// 33b: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 340: 0f 85 02 ff ff ff             jne     0x248 <_JIT_ENTRY+0x248>
// 346: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000348:  R_X86_64_64  _PyObject_MakeTpCall
// 350: 48 89 df                      movq    %rbx, %rdi
// 353: 4c 89 e6                      movq    %r12, %rsi
// 356: 31 d2                         xorl    %edx, %edx
// 358: 31 c9                         xorl    %ecx, %ecx
// 35a: 45 31 c0                      xorl    %r8d, %r8d
// 35d: ff d0                         callq   *%rax
// 35f: 48 89 c5                      movq    %rax, %rbp
// 362: 49 8b 04 24                   movq    (%r12), %rax
// 366: 48 85 c0                      testq   %rax, %rax
// 369: 7f 22                         jg      0x38d <_JIT_ENTRY+0x38d>
// 36b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000036d:  R_X86_64_64  .rodata.str1.1
// 375: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000377:  R_X86_64_64  _Py_NegativeRefcount
// 37f: be 41 09 00 00                movl    $0x941, %esi            # imm = 0x941
// 384: 4c 89 e2                      movq    %r12, %rdx
// 387: ff d0                         callq   *%rax
// 389: 49 8b 04 24                   movq    (%r12), %rax
// 38d: 85 c0                         testl   %eax, %eax
// 38f: 78 21                         js      0x3b2 <_JIT_ENTRY+0x3b2>
// 391: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000393:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 39b: ff d0                         callq   *%rax
// 39d: 49 ff 0c 24                   decq    (%r12)
// 3a1: 75 0f                         jne     0x3b2 <_JIT_ENTRY+0x3b2>
// 3a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a5:  R_X86_64_64  _Py_Dealloc
// 3ad: 4c 89 e7                      movq    %r12, %rdi
// 3b0: ff d0                         callq   *%rax
// 3b2: 48 85 ed                      testq   %rbp, %rbp
// 3b5: 74 3f                         je      0x3f6 <_JIT_ENTRY+0x3f6>
// 3b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003b9:  R_X86_64_64  _JIT_OPARG
// 3c1: 83 e0 01                      andl    $0x1, %eax
// 3c4: 4d 89 6c c7 f8                movq    %r13, -0x8(%r15,%rax,8)
// 3c9: 49 89 2c c7                   movq    %rbp, (%r15,%rax,8)
// 3cd: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 3d1: 48 83 c6 08                   addq    $0x8, %rsi
// 3d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003d7:  R_X86_64_64  _JIT_CONTINUE
// 3df: 48 8b 3c 24                   movq    (%rsp), %rdi
// 3e3: 48 89 da                      movq    %rbx, %rdx
// 3e6: 48 83 c4 18                   addq    $0x18, %rsp
// 3ea: 5b                            popq    %rbx
// 3eb: 41 5c                         popq    %r12
// 3ed: 41 5d                         popq    %r13
// 3ef: 41 5e                         popq    %r14
// 3f1: 41 5f                         popq    %r15
// 3f3: 5d                            popq    %rbp
// 3f4: ff e0                         jmpq    *%rax
// 3f6: 49 8b 45 00                   movq    (%r13), %rax
// 3fa: 48 85 c0                      testq   %rax, %rax
// 3fd: 7f 22                         jg      0x421 <_JIT_ENTRY+0x421>
// 3ff: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000401:  R_X86_64_64  .rodata.str1.1
// 409: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000040b:  R_X86_64_64  _Py_NegativeRefcount
// 413: be 43 09 00 00                movl    $0x943, %esi            # imm = 0x943
// 418: 4c 89 ea                      movq    %r13, %rdx
// 41b: ff d0                         callq   *%rax
// 41d: 49 8b 45 00                   movq    (%r13), %rax
// 421: 4b 8d 1c f7                   leaq    (%r15,%r14,8), %rbx
// 425: 48 83 c3 f8                   addq    $-0x8, %rbx
// 429: 85 c0                         testl   %eax, %eax
// 42b: 78 21                         js      0x44e <_JIT_ENTRY+0x44e>
// 42d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000042f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 437: ff d0                         callq   *%rax
// 439: 49 ff 4d 00                   decq    (%r13)
// 43d: 75 0f                         jne     0x44e <_JIT_ENTRY+0x44e>
// 43f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000441:  R_X86_64_64  _Py_Dealloc
// 449: 4c 89 ef                      movq    %r13, %rdi
// 44c: ff d0                         callq   *%rax
// 44e: 48 8b 04 24                   movq    (%rsp), %rax
// 452: 48 29 c3                      subq    %rax, %rbx
// 455: 48 83 c3 b8                   addq    $-0x48, %rbx
// 459: 48 c1 eb 03                   shrq    $0x3, %rbx
// 45d: 89 58 40                      movl    %ebx, 0x40(%rax)
// 460: 31 c0                         xorl    %eax, %eax
// 462: 48 83 c4 18                   addq    $0x18, %rsp
// 466: 5b                            popq    %rbx
// 467: 41 5c                         popq    %r12
// 469: 41 5d                         popq    %r13
// 46b: 41 5e                         popq    %r14
// 46d: 41 5f                         popq    %r15
// 46f: 5d                            popq    %rbp
// 470: c3                            retq
// 471: 
static const unsigned char _LOAD_ATTR_SLOTplus_BEFORE_WITH_code_body[1138] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0x54, 0x24, 0x08, 0x49, 0x89, 0xf7, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8b, 0x1c, 0x04, 0x48, 0x85, 0xdb, 0x74, 0x1c, 0x48, 0x89, 0x3c, 0x24, 0x8b, 0x03, 0xff, 0xc0, 0x75, 0x3f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4d, 0x85, 0xc0, 0x79, 0x6f, 0xe9, 0x8b, 0x00, 0x00, 0x00, 0x49, 0x29, 0xff, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xe9, 0x03, 0x00, 0x00, 0x89, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0x5f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x83, 0xe6, 0x01, 0x4b, 0x8d, 0x1c, 0xf7, 0x4b, 0x8b, 0x6c, 0xf7, 0xf8, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8d, 0xb5, 0x50, 0xae, 0x00, 0x00, 0x48, 0x89, 0xef, 0x41, 0xff, 0xd4, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x74, 0x37, 0x49, 0x81, 0xc5, 0xb8, 0xae, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x41, 0xff, 0xd4, 0x48, 0x85, 0xc0, 0x74, 0x6e, 0x49, 0x89, 0xc5, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x99, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x64, 0x24, 0x10, 0x0f, 0x88, 0xcd, 0x00, 0x00, 0x00, 0xe9, 0xb2, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x47, 0x68, 0x48, 0x85, 0xc0, 0x74, 0x0b, 0x48, 0x83, 0x78, 0x08, 0x00, 0x0f, 0x85, 0xcc, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0xe9, 0x99, 0x02, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x47, 0x68, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xca, 0x00, 0x00, 0x00, 0x48, 0x83, 0x78, 0x08, 0x00, 0x0f, 0x84, 0xbf, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xed, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x0e, 0x01, 0x00, 0x00, 0xe9, 0x5e, 0x02, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3f, 0x09, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x64, 0x24, 0x10, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xef, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x08, 0xf6, 0x80, 0xa9, 0x00, 0x00, 0x00, 0x08, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x0f, 0x84, 0xfe, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x40, 0x38, 0x49, 0x8b, 0x04, 0x04, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xed, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x31, 0xf6, 0x31, 0xd2, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xc2, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x01, 0x01, 0x00, 0x00, 0xe9, 0xda, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x13, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3c, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x0f, 0x88, 0x55, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x40, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xe9, 0x2c, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x44, 0x24, 0x08, 0xf6, 0x80, 0xa9, 0x00, 0x00, 0x00, 0x08, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x0f, 0x85, 0x02, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x31, 0xd2, 0x31, 0xc9, 0x45, 0x31, 0xc0, 0xff, 0xd0, 0x48, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x41, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x74, 0x3f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x4d, 0x89, 0x6c, 0xc7, 0xf8, 0x49, 0x89, 0x2c, 0xc7, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x43, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x4b, 0x8d, 0x1c, 0xf7, 0x48, 0x83, 0xc3, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x29, 0xc3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x89, 0x58, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _LOAD_ATTR_SLOTplus_BEFORE_WITH_code_holes[38] = {
    {0x1c, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x60, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xdd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x109, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_LookupSpecial, 0x0},
    {0x113, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x199, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1fc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x266, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckFunctionResult, 0x0},
    {0x293, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x2a8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x77},
    {0x2b2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x2d2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2dc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x310, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x322, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x348, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_MakeTpCall, 0x0},
    {0x36d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x377, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x393, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3b9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3d7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x401, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x40b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x42f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x441, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'%.200s' object does not support the context manager protocol\x00'%.200s' object does not support the context manager protocol (missed __exit__ method)\x00"
// ce: 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_BEFORE_WITH_data_body[209] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x20, 0x28, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x20, 0x5f, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x5f, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x29, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_BEFORE_WITH_data_holes[1];

// _LOAD_ATTR_SLOTplus_BINARY_OP
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_BINARY_OP.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 4d 8b 3c 04                   movq    (%r12,%rax), %r15
// 26: 4d 85 ff                      testq   %r15, %r15
// 29: 74 1d                         je      0x48 <_JIT_ENTRY+0x48>
// 2b: 48 89 14 24                   movq    %rdx, (%rsp)
// 2f: 41 8b 07                      movl    (%r15), %eax
// 32: ff c0                         incl    %eax
// 34: 75 3f                         jne     0x75 <_JIT_ENTRY+0x75>
// 36: 49 8b 04 24                   movq    (%r12), %rax
// 3a: 48 85 c0                      testq   %rax, %rax
// 3d: 7e 4e                         jle     0x8d <_JIT_ENTRY+0x8d>
// 3f: 85 c0                         testl   %eax, %eax
// 41: 79 70                         jns     0xb3 <_JIT_ENTRY+0xb3>
// 43: e9 81 00 00 00                jmp     0xc9 <_JIT_ENTRY+0xc9>
// 48: 49 29 de                      subq    %rbx, %r14
// 4b: 49 83 c6 b8                   addq    $-0x48, %r14
// 4f: 49 c1 ee 03                   shrq    $0x3, %r14
// 53: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 57: 48 8b 03                      movq    (%rbx), %rax
// 5a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005c:  R_X86_64_64  _JIT_TARGET
// 64: 89 c9                         movl    %ecx, %ecx
// 66: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 6a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 70: e9 d7 01 00 00                jmp     0x24c <_JIT_ENTRY+0x24c>
// 75: 41 89 07                      movl    %eax, (%r15)
// 78: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007a:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 82: ff d0                         callq   *%rax
// 84: 49 8b 04 24                   movq    (%r12), %rax
// 88: 48 85 c0                      testq   %rax, %rax
// 8b: 7f b2                         jg      0x3f <_JIT_ENTRY+0x3f>
// 8d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008f:  R_X86_64_64  .rodata.str1.1
// 97: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000099:  R_X86_64_64  _Py_NegativeRefcount
// a1: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a6: 4c 89 e2                      movq    %r12, %rdx
// a9: ff d0                         callq   *%rax
// ab: 49 8b 04 24                   movq    (%r12), %rax
// af: 85 c0                         testl   %eax, %eax
// b1: 78 16                         js      0xc9 <_JIT_ENTRY+0xc9>
// b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bd: ff d0                         callq   *%rax
// bf: 49 ff 0c 24                   decq    (%r12)
// c3: 0f 84 a1 00 00 00             je      0x16a <_JIT_ENTRY+0x16a>
// c9: 4d 89 7e f8                   movq    %r15, -0x8(%r14)
// cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cf:  R_X86_64_64  _JIT_OPARG
// d7: a8 01                         testb   $0x1, %al
// d9: 74 07                         je      0xe2 <_JIT_ENTRY+0xe2>
// db: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// e2: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 00000000000000e4:  R_X86_64_64  _JIT_OPARG
// ec: 41 0f b7 c7                   movzwl  %r15w, %eax
// f0: 41 83 e7 01                   andl    $0x1, %r15d
// f4: 4b 8b 6c fe f0                movq    -0x10(%r14,%r15,8), %rbp
// f9: 4f 8b 6c fe f8                movq    -0x8(%r14,%r15,8), %r13
// fe: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000100:  R_X86_64_64  _PyEval_BinaryOps
// 108: 48 89 ef                      movq    %rbp, %rdi
// 10b: 4c 89 ee                      movq    %r13, %rsi
// 10e: ff 14 c1                      callq   *(%rcx,%rax,8)
// 111: 49 89 c4                      movq    %rax, %r12
// 114: 48 8b 45 00                   movq    (%rbp), %rax
// 118: 48 85 c0                      testq   %rax, %rax
// 11b: 7e 06                         jle     0x123 <_JIT_ENTRY+0x123>
// 11d: 85 c0                         testl   %eax, %eax
// 11f: 79 28                         jns     0x149 <_JIT_ENTRY+0x149>
// 121: eb 38                         jmp     0x15b <_JIT_ENTRY+0x15b>
// 123: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000125:  R_X86_64_64  .rodata.str1.1
// 12d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012f:  R_X86_64_64  _Py_NegativeRefcount
// 137: be d4 0c 00 00                movl    $0xcd4, %esi            # imm = 0xCD4
// 13c: 48 89 ea                      movq    %rbp, %rdx
// 13f: ff d0                         callq   *%rax
// 141: 48 8b 45 00                   movq    (%rbp), %rax
// 145: 85 c0                         testl   %eax, %eax
// 147: 78 12                         js      0x15b <_JIT_ENTRY+0x15b>
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 153: ff d0                         callq   *%rax
// 155: 48 ff 4d 00                   decq    (%rbp)
// 159: 74 39                         je      0x194 <_JIT_ENTRY+0x194>
// 15b: 49 8b 45 00                   movq    (%r13), %rax
// 15f: 48 85 c0                      testq   %rax, %rax
// 162: 7e 48                         jle     0x1ac <_JIT_ENTRY+0x1ac>
// 164: 85 c0                         testl   %eax, %eax
// 166: 79 6a                         jns     0x1d2 <_JIT_ENTRY+0x1d2>
// 168: eb 7a                         jmp     0x1e4 <_JIT_ENTRY+0x1e4>
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_Dealloc
// 174: 4c 89 e7                      movq    %r12, %rdi
// 177: ff d0                         callq   *%rax
// 179: 4d 89 7e f8                   movq    %r15, -0x8(%r14)
// 17d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017f:  R_X86_64_64  _JIT_OPARG
// 187: a8 01                         testb   $0x1, %al
// 189: 0f 85 4c ff ff ff             jne     0xdb <_JIT_ENTRY+0xdb>
// 18f: e9 4e ff ff ff                jmp     0xe2 <_JIT_ENTRY+0xe2>
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  _Py_Dealloc
// 19e: 48 89 ef                      movq    %rbp, %rdi
// 1a1: ff d0                         callq   *%rax
// 1a3: 49 8b 45 00                   movq    (%r13), %rax
// 1a7: 48 85 c0                      testq   %rax, %rax
// 1aa: 7f b8                         jg      0x164 <_JIT_ENTRY+0x164>
// 1ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ae:  R_X86_64_64  .rodata.str1.1
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_NegativeRefcount
// 1c0: be d5 0c 00 00                movl    $0xcd5, %esi            # imm = 0xCD5
// 1c5: 4c 89 ea                      movq    %r13, %rdx
// 1c8: ff d0                         callq   *%rax
// 1ca: 49 8b 45 00                   movq    (%r13), %rax
// 1ce: 85 c0                         testl   %eax, %eax
// 1d0: 78 12                         js      0x1e4 <_JIT_ENTRY+0x1e4>
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1dc: ff d0                         callq   *%rax
// 1de: 49 ff 4d 00                   decq    (%r13)
// 1e2: 74 40                         je      0x224 <_JIT_ENTRY+0x224>
// 1e4: 4d 85 e4                      testq   %r12, %r12
// 1e7: 74 4f                         je      0x238 <_JIT_ENTRY+0x238>
// 1e9: 4b 8d 34 fe                   leaq    (%r14,%r15,8), %rsi
// 1ed: 48 83 c6 f8                   addq    $-0x8, %rsi
// 1f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f3:  R_X86_64_64  _JIT_OPARG
// 1fb: 83 e0 01                      andl    $0x1, %eax
// 1fe: 4d 89 64 c6 f0                movq    %r12, -0x10(%r14,%rax,8)
// 203: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000205:  R_X86_64_64  _JIT_CONTINUE
// 20d: 48 89 df                      movq    %rbx, %rdi
// 210: 48 8b 14 24                   movq    (%rsp), %rdx
// 214: 48 83 c4 08                   addq    $0x8, %rsp
// 218: 5b                            popq    %rbx
// 219: 41 5c                         popq    %r12
// 21b: 41 5d                         popq    %r13
// 21d: 41 5e                         popq    %r14
// 21f: 41 5f                         popq    %r15
// 221: 5d                            popq    %rbp
// 222: ff e0                         jmpq    *%rax
// 224: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000226:  R_X86_64_64  _Py_Dealloc
// 22e: 4c 89 ef                      movq    %r13, %rdi
// 231: ff d0                         callq   *%rax
// 233: 4d 85 e4                      testq   %r12, %r12
// 236: 75 b1                         jne     0x1e9 <_JIT_ENTRY+0x1e9>
// 238: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 23c: 48 29 d8                      subq    %rbx, %rax
// 23f: 48 83 c0 a8                   addq    $-0x58, %rax
// 243: 48 c1 e8 03                   shrq    $0x3, %rax
// 247: 89 43 40                      movl    %eax, 0x40(%rbx)
// 24a: 31 c0                         xorl    %eax, %eax
// 24c: 48 83 c4 08                   addq    $0x8, %rsp
// 250: 5b                            popq    %rbx
// 251: 41 5c                         popq    %r12
// 253: 41 5d                         popq    %r13
// 255: 41 5e                         popq    %r14
// 257: 41 5f                         popq    %r15
// 259: 5d                            popq    %rbp
// 25a: c3                            retq
// 25b: 
static const unsigned char _LOAD_ATTR_SLOTplus_BINARY_OP_code_body[604] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x3c, 0x04, 0x4d, 0x85, 0xff, 0x74, 0x1d, 0x48, 0x89, 0x14, 0x24, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x75, 0x3f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4e, 0x85, 0xc0, 0x79, 0x70, 0xe9, 0x81, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xd7, 0x01, 0x00, 0x00, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xa1, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x0f, 0xb7, 0xc7, 0x41, 0x83, 0xe7, 0x01, 0x4b, 0x8b, 0x6c, 0xfe, 0xf0, 0x4f, 0x8b, 0x6c, 0xfe, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0xff, 0x14, 0xc1, 0x49, 0x89, 0xc4, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd4, 0x0c, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x74, 0x39, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x48, 0x85, 0xc0, 0x79, 0x6a, 0xeb, 0x7a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x4c, 0xff, 0xff, 0xff, 0xe9, 0x4e, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xb8, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd5, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x40, 0x4d, 0x85, 0xe4, 0x74, 0x4f, 0x4b, 0x8d, 0x34, 0xfe, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x4d, 0x89, 0x64, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x75, 0xb1, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xa8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _LOAD_ATTR_SLOTplus_BINARY_OP_code_holes[22] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x99, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xe4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x100, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_BinaryOps, 0x0},
    {0x125, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x12f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x17f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x205, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x226, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_BINARY_OP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_BINARY_OP_data_holes[1];

// _LOAD_ATTR_SLOTplus_BINARY_OP_ADD_FLOAT
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_BINARY_OP_ADD_FLOAT.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 26: 4d 85 ed                      testq   %r13, %r13
// 29: 74 1d                         je      0x48 <_JIT_ENTRY+0x48>
// 2b: 49 89 d7                      movq    %rdx, %r15
// 2e: 41 8b 45 00                   movl    (%r13), %eax
// 32: ff c0                         incl    %eax
// 34: 75 49                         jne     0x7f <_JIT_ENTRY+0x7f>
// 36: 49 8b 04 24                   movq    (%r12), %rax
// 3a: 48 85 c0                      testq   %rax, %rax
// 3d: 7e 59                         jle     0x98 <_JIT_ENTRY+0x98>
// 3f: 85 c0                         testl   %eax, %eax
// 41: 79 7b                         jns     0xbe <_JIT_ENTRY+0xbe>
// 43: e9 97 00 00 00                jmp     0xdf <_JIT_ENTRY+0xdf>
// 48: 49 29 de                      subq    %rbx, %r14
// 4b: 49 83 c6 b8                   addq    $-0x48, %r14
// 4f: 49 c1 ee 03                   shrq    $0x3, %r14
// 53: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 57: 48 8b 03                      movq    (%rbx), %rax
// 5a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005c:  R_X86_64_64  _JIT_TARGET
// 64: 89 c9                         movl    %ecx, %ecx
// 66: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 6a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 70: 48 83 c4 08                   addq    $0x8, %rsp
// 74: 5b                            popq    %rbx
// 75: 41 5c                         popq    %r12
// 77: 41 5d                         popq    %r13
// 79: 41 5e                         popq    %r14
// 7b: 41 5f                         popq    %r15
// 7d: 5d                            popq    %rbp
// 7e: c3                            retq
// 7f: 41 89 45 00                   movl    %eax, (%r13)
// 83: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000085:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 8d: ff d0                         callq   *%rax
// 8f: 49 8b 04 24                   movq    (%r12), %rax
// 93: 48 85 c0                      testq   %rax, %rax
// 96: 7f a7                         jg      0x3f <_JIT_ENTRY+0x3f>
// 98: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000009a:  R_X86_64_64  .rodata.str1.1
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _Py_NegativeRefcount
// ac: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// b1: 4c 89 e2                      movq    %r12, %rdx
// b4: ff d0                         callq   *%rax
// b6: 49 8b 04 24                   movq    (%r12), %rax
// ba: 85 c0                         testl   %eax, %eax
// bc: 78 21                         js      0xdf <_JIT_ENTRY+0xdf>
// be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c8: ff d0                         callq   *%rax
// ca: 49 ff 0c 24                   decq    (%r12)
// ce: 75 0f                         jne     0xdf <_JIT_ENTRY+0xdf>
// d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d2:  R_X86_64_64  _Py_Dealloc
// da: 4c 89 e7                      movq    %r12, %rdi
// dd: ff d0                         callq   *%rax
// df: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e5:  R_X86_64_64  _JIT_OPARG
// ed: a8 01                         testb   $0x1, %al
// ef: 74 07                         je      0xf8 <_JIT_ENTRY+0xf8>
// f1: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// f8: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000000fa:  R_X86_64_64  _JIT_OPARG
// 102: 83 e5 01                      andl    $0x1, %ebp
// 105: 4d 8b 64 ee f0                movq    -0x10(%r14,%rbp,8), %r12
// 10a: 4d 8b 6c ee f8                movq    -0x8(%r14,%rbp,8), %r13
// 10f: f2 41 0f 10 44 24 10          movsd   0x10(%r12), %xmm0       # xmm0 = mem[0],zero
// 116: f2 41 0f 58 45 10             addsd   0x10(%r13), %xmm0
// 11c: 49 83 3c 24 01                cmpq    $0x1, (%r12)
// 121: 75 3e                         jne     0x161 <_JIT_ENTRY+0x161>
// 123: f2 41 0f 11 44 24 10          movsd   %xmm0, 0x10(%r12)
// 12a: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 12f: 75 28                         jne     0x159 <_JIT_ENTRY+0x159>
// 131: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000133:  R_X86_64_64  PyInterpreterState_Get
// 13b: ff d0                         callq   *%rax
// 13d: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 144: 49 ff 4d 00                   decq    (%r13)
// 148: 75 0f                         jne     0x159 <_JIT_ENTRY+0x159>
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _PyFloat_ExactDealloc
// 154: 4c 89 ef                      movq    %r13, %rdi
// 157: ff d0                         callq   *%rax
// 159: 4d 89 e5                      movq    %r12, %r13
// 15c: e9 fc 00 00 00                jmp     0x25d <_JIT_ENTRY+0x25d>
// 161: 49 83 7d 00 01                cmpq    $0x1, (%r13)
// 166: 75 3d                         jne     0x1a5 <_JIT_ENTRY+0x1a5>
// 168: f2 41 0f 11 45 10             movsd   %xmm0, 0x10(%r13)
// 16e: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 174: 0f 85 e3 00 00 00             jne     0x25d <_JIT_ENTRY+0x25d>
// 17a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017c:  R_X86_64_64  PyInterpreterState_Get
// 184: ff d0                         callq   *%rax
// 186: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 18d: 49 8b 04 24                   movq    (%r12), %rax
// 191: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 195: 49 89 0c 24                   movq    %rcx, (%r12)
// 199: 48 83 f8 01                   cmpq    $0x1, %rax
// 19d: 0f 8f ba 00 00 00             jg      0x25d <_JIT_ENTRY+0x25d>
// 1a3: eb 7c                         jmp     0x221 <_JIT_ENTRY+0x221>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  PyFloat_FromDouble
// 1af: ff d0                         callq   *%rax
// 1b1: 48 85 c0                      testq   %rax, %rax
// 1b4: 0f 84 87 00 00 00             je      0x241 <_JIT_ENTRY+0x241>
// 1ba: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 1c0: 75 2d                         jne     0x1ef <_JIT_ENTRY+0x1ef>
// 1c2: 48 89 04 24                   movq    %rax, (%rsp)
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  PyInterpreterState_Get
// 1d0: ff d0                         callq   *%rax
// 1d2: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1d9: 49 8b 04 24                   movq    (%r12), %rax
// 1dd: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 1e1: 49 89 0c 24                   movq    %rcx, (%r12)
// 1e5: 48 83 f8 01                   cmpq    $0x1, %rax
// 1e9: 48 8b 04 24                   movq    (%rsp), %rax
// 1ed: 7e 32                         jle     0x221 <_JIT_ENTRY+0x221>
// 1ef: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 1f4: 75 64                         jne     0x25a <_JIT_ENTRY+0x25a>
// 1f6: 49 89 c4                      movq    %rax, %r12
// 1f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fb:  R_X86_64_64  PyInterpreterState_Get
// 203: ff d0                         callq   *%rax
// 205: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 20c: 49 8b 45 00                   movq    (%r13), %rax
// 210: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 214: 49 89 4d 00                   movq    %rcx, (%r13)
// 218: 4d 89 e5                      movq    %r12, %r13
// 21b: 48 83 f8 01                   cmpq    $0x1, %rax
// 21f: 7f 3c                         jg      0x25d <_JIT_ENTRY+0x25d>
// 221: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000223:  R_X86_64_64  .rodata.str1.1+0x39
// 22b: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000022d:  R_X86_64_64  .rodata.str1.1+0x4f
// 235: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000237:  R_X86_64_64  _Py_FatalRefcountErrorFunc
// 23f: ff d0                         callq   *%rax
// 241: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 245: 48 29 d8                      subq    %rbx, %rax
// 248: 48 83 c0 b8                   addq    $-0x48, %rax
// 24c: 48 c1 e8 03                   shrq    $0x3, %rax
// 250: 89 43 40                      movl    %eax, 0x40(%rbx)
// 253: 31 c0                         xorl    %eax, %eax
// 255: e9 16 fe ff ff                jmp     0x70 <_JIT_ENTRY+0x70>
// 25a: 49 89 c5                      movq    %rax, %r13
// 25d: 49 8d 34 ee                   leaq    (%r14,%rbp,8), %rsi
// 261: 48 83 c6 f8                   addq    $-0x8, %rsi
// 265: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000267:  R_X86_64_64  _JIT_OPARG
// 26f: 83 e0 01                      andl    $0x1, %eax
// 272: 4d 89 6c c6 f0                movq    %r13, -0x10(%r14,%rax,8)
// 277: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000279:  R_X86_64_64  _JIT_CONTINUE
// 281: 48 89 df                      movq    %rbx, %rdi
// 284: 4c 89 fa                      movq    %r15, %rdx
// 287: 48 83 c4 08                   addq    $0x8, %rsp
// 28b: 5b                            popq    %rbx
// 28c: 41 5c                         popq    %r12
// 28e: 41 5d                         popq    %r13
// 290: 41 5e                         popq    %r14
// 292: 41 5f                         popq    %r15
// 294: 5d                            popq    %rbp
// 295: ff e0                         jmpq    *%rax
// 297: 
static const unsigned char _LOAD_ATTR_SLOTplus_BINARY_OP_ADD_FLOAT_code_body[664] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1d, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x49, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x59, 0x85, 0xc0, 0x79, 0x7b, 0xe9, 0x97, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xa7, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe5, 0x01, 0x4d, 0x8b, 0x64, 0xee, 0xf0, 0x4d, 0x8b, 0x6c, 0xee, 0xf8, 0xf2, 0x41, 0x0f, 0x10, 0x44, 0x24, 0x10, 0xf2, 0x41, 0x0f, 0x58, 0x45, 0x10, 0x49, 0x83, 0x3c, 0x24, 0x01, 0x75, 0x3e, 0xf2, 0x41, 0x0f, 0x11, 0x44, 0x24, 0x10, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x89, 0xe5, 0xe9, 0xfc, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x00, 0x01, 0x75, 0x3d, 0xf2, 0x41, 0x0f, 0x11, 0x45, 0x10, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x0f, 0x85, 0xe3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x0c, 0x24, 0x48, 0x83, 0xf8, 0x01, 0x0f, 0x8f, 0xba, 0x00, 0x00, 0x00, 0xeb, 0x7c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x87, 0x00, 0x00, 0x00, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x2d, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x0c, 0x24, 0x48, 0x83, 0xf8, 0x01, 0x48, 0x8b, 0x04, 0x24, 0x7e, 0x32, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x64, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x4d, 0x00, 0x4d, 0x89, 0xe5, 0x48, 0x83, 0xf8, 0x01, 0x7f, 0x3c, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x16, 0xfe, 0xff, 0xff, 0x49, 0x89, 0xc5, 0x49, 0x8d, 0x34, 0xee, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x4d, 0x89, 0x6c, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_ATTR_SLOTplus_BINARY_OP_ADD_FLOAT_code_holes[21] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x9a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xc0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x133, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_FromDouble, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x223, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x4f},
    {0x237, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FatalRefcountErrorFunc, 0x0},
    {0x267, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x279, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_DECREF_NO_DEALLOC\x00Expected a positive remaining refcount\x00'
// 76: 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_BINARY_OP_ADD_FLOAT_data_body[121] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x46, 0x5f, 0x4e, 0x4f, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x00, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x61, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x20, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x66, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_BINARY_OP_ADD_FLOAT_data_holes[1];

// _LOAD_ATTR_SLOTplus_BINARY_OP_ADD_INT
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_BINARY_OP_ADD_INT.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 4d 8b 3c 04                   movq    (%r12,%rax), %r15
// 26: 4d 85 ff                      testq   %r15, %r15
// 29: 74 1d                         je      0x48 <_JIT_ENTRY+0x48>
// 2b: 48 89 14 24                   movq    %rdx, (%rsp)
// 2f: 41 8b 07                      movl    (%r15), %eax
// 32: ff c0                         incl    %eax
// 34: 75 3f                         jne     0x75 <_JIT_ENTRY+0x75>
// 36: 49 8b 04 24                   movq    (%r12), %rax
// 3a: 48 85 c0                      testq   %rax, %rax
// 3d: 7e 4e                         jle     0x8d <_JIT_ENTRY+0x8d>
// 3f: 85 c0                         testl   %eax, %eax
// 41: 79 70                         jns     0xb3 <_JIT_ENTRY+0xb3>
// 43: e9 81 00 00 00                jmp     0xc9 <_JIT_ENTRY+0xc9>
// 48: 49 29 de                      subq    %rbx, %r14
// 4b: 49 83 c6 b8                   addq    $-0x48, %r14
// 4f: 49 c1 ee 03                   shrq    $0x3, %r14
// 53: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 57: 48 8b 03                      movq    (%rbx), %rax
// 5a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005c:  R_X86_64_64  _JIT_TARGET
// 64: 89 c9                         movl    %ecx, %ecx
// 66: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 6a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 70: e9 92 01 00 00                jmp     0x207 <_JIT_ENTRY+0x207>
// 75: 41 89 07                      movl    %eax, (%r15)
// 78: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007a:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 82: ff d0                         callq   *%rax
// 84: 49 8b 04 24                   movq    (%r12), %rax
// 88: 48 85 c0                      testq   %rax, %rax
// 8b: 7f b2                         jg      0x3f <_JIT_ENTRY+0x3f>
// 8d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008f:  R_X86_64_64  .rodata.str1.1
// 97: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000099:  R_X86_64_64  _Py_NegativeRefcount
// a1: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a6: 4c 89 e2                      movq    %r12, %rdx
// a9: ff d0                         callq   *%rax
// ab: 49 8b 04 24                   movq    (%r12), %rax
// af: 85 c0                         testl   %eax, %eax
// b1: 78 16                         js      0xc9 <_JIT_ENTRY+0xc9>
// b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bd: ff d0                         callq   *%rax
// bf: 49 ff 0c 24                   decq    (%r12)
// c3: 0f 84 a0 00 00 00             je      0x169 <_JIT_ENTRY+0x169>
// c9: 4d 89 7e f8                   movq    %r15, -0x8(%r14)
// cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cf:  R_X86_64_64  _JIT_OPARG
// d7: a8 01                         testb   $0x1, %al
// d9: 74 07                         je      0xe2 <_JIT_ENTRY+0xe2>
// db: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// e2: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 00000000000000e4:  R_X86_64_64  _JIT_OPARG
// ec: 41 83 e7 01                   andl    $0x1, %r15d
// f0: 4f 8b 6c fe f0                movq    -0x10(%r14,%r15,8), %r13
// f5: 4b 8b 6c fe f8                movq    -0x8(%r14,%r15,8), %rbp
// fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fc:  R_X86_64_64  _PyLong_Add
// 104: 4c 89 ef                      movq    %r13, %rdi
// 107: 48 89 ee                      movq    %rbp, %rsi
// 10a: ff d0                         callq   *%rax
// 10c: 49 89 c4                      movq    %rax, %r12
// 10f: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 113: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000115:  R_X86_64_64  PyInterpreterState_Get
// 11d: 75 23                         jne     0x142 <_JIT_ENTRY+0x142>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  PyInterpreterState_Get
// 129: ff d0                         callq   *%rax
// 12b: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 132: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000134:  R_X86_64_64  PyInterpreterState_Get
// 13c: 48 ff 4d 00                   decq    (%rbp)
// 140: 74 51                         je      0x193 <_JIT_ENTRY+0x193>
// 142: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 147: 75 6a                         jne     0x1b3 <_JIT_ENTRY+0x1b3>
// 149: ff d1                         callq   *%rcx
// 14b: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 152: 49 ff 4d 00                   decq    (%r13)
// 156: 75 5b                         jne     0x1b3 <_JIT_ENTRY+0x1b3>
// 158: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015a:  R_X86_64_64  PyObject_Free
// 162: 4c 89 ef                      movq    %r13, %rdi
// 165: ff d0                         callq   *%rax
// 167: eb 4a                         jmp     0x1b3 <_JIT_ENTRY+0x1b3>
// 169: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016b:  R_X86_64_64  _Py_Dealloc
// 173: 4c 89 e7                      movq    %r12, %rdi
// 176: ff d0                         callq   *%rax
// 178: 4d 89 7e f8                   movq    %r15, -0x8(%r14)
// 17c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017e:  R_X86_64_64  _JIT_OPARG
// 186: a8 01                         testb   $0x1, %al
// 188: 0f 85 4d ff ff ff             jne     0xdb <_JIT_ENTRY+0xdb>
// 18e: e9 4f ff ff ff                jmp     0xe2 <_JIT_ENTRY+0xe2>
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  PyObject_Free
// 19d: 48 89 ef                      movq    %rbp, %rdi
// 1a0: ff d0                         callq   *%rax
// 1a2: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a4:  R_X86_64_64  PyInterpreterState_Get
// 1ac: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 1b1: 74 96                         je      0x149 <_JIT_ENTRY+0x149>
// 1b3: 4d 85 e4                      testq   %r12, %r12
// 1b6: 74 3b                         je      0x1f3 <_JIT_ENTRY+0x1f3>
// 1b8: 4b 8d 34 fe                   leaq    (%r14,%r15,8), %rsi
// 1bc: 48 83 c6 f8                   addq    $-0x8, %rsi
// 1c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c2:  R_X86_64_64  _JIT_OPARG
// 1ca: 83 e0 01                      andl    $0x1, %eax
// 1cd: 4d 89 64 c6 f0                movq    %r12, -0x10(%r14,%rax,8)
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _JIT_CONTINUE
// 1dc: 48 89 df                      movq    %rbx, %rdi
// 1df: 48 8b 14 24                   movq    (%rsp), %rdx
// 1e3: 48 83 c4 08                   addq    $0x8, %rsp
// 1e7: 5b                            popq    %rbx
// 1e8: 41 5c                         popq    %r12
// 1ea: 41 5d                         popq    %r13
// 1ec: 41 5e                         popq    %r14
// 1ee: 41 5f                         popq    %r15
// 1f0: 5d                            popq    %rbp
// 1f1: ff e0                         jmpq    *%rax
// 1f3: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 1f7: 48 29 d8                      subq    %rbx, %rax
// 1fa: 48 83 c0 a8                   addq    $-0x58, %rax
// 1fe: 48 c1 e8 03                   shrq    $0x3, %rax
// 202: 89 43 40                      movl    %eax, 0x40(%rbx)
// 205: 31 c0                         xorl    %eax, %eax
// 207: 48 83 c4 08                   addq    $0x8, %rsp
// 20b: 5b                            popq    %rbx
// 20c: 41 5c                         popq    %r12
// 20e: 41 5d                         popq    %r13
// 210: 41 5e                         popq    %r14
// 212: 41 5f                         popq    %r15
// 214: 5d                            popq    %rbp
// 215: c3                            retq
// 216: 
static const unsigned char _LOAD_ATTR_SLOTplus_BINARY_OP_ADD_INT_code_body[535] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x3c, 0x04, 0x4d, 0x85, 0xff, 0x74, 0x1d, 0x48, 0x89, 0x14, 0x24, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x75, 0x3f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4e, 0x85, 0xc0, 0x79, 0x70, 0xe9, 0x81, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x92, 0x01, 0x00, 0x00, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xa0, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x83, 0xe7, 0x01, 0x4f, 0x8b, 0x6c, 0xfe, 0xf0, 0x4b, 0x8b, 0x6c, 0xfe, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0xf6, 0x45, 0x03, 0x80, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0x4d, 0x00, 0x74, 0x51, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x6a, 0xff, 0xd1, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x5b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0xeb, 0x4a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x4d, 0xff, 0xff, 0xff, 0xe9, 0x4f, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x74, 0x96, 0x4d, 0x85, 0xe4, 0x74, 0x3b, 0x4b, 0x8d, 0x34, 0xfe, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x4d, 0x89, 0x64, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xa8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _LOAD_ATTR_SLOTplus_BINARY_OP_ADD_INT_code_holes[20] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x99, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xe4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyLong_Add, 0x0},
    {0x115, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x134, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x16b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x17e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x1a4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_BINARY_OP_ADD_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_BINARY_OP_ADD_INT_data_holes[1];

// _LOAD_ATTR_SLOTplus_BINARY_OP_ADD_UNICODE
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_BINARY_OP_ADD_UNICODE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 4d 8b 3c 04                   movq    (%r12,%rax), %r15
// 26: 4d 85 ff                      testq   %r15, %r15
// 29: 74 1d                         je      0x48 <_JIT_ENTRY+0x48>
// 2b: 48 89 14 24                   movq    %rdx, (%rsp)
// 2f: 41 8b 07                      movl    (%r15), %eax
// 32: ff c0                         incl    %eax
// 34: 75 3f                         jne     0x75 <_JIT_ENTRY+0x75>
// 36: 49 8b 04 24                   movq    (%r12), %rax
// 3a: 48 85 c0                      testq   %rax, %rax
// 3d: 7e 4e                         jle     0x8d <_JIT_ENTRY+0x8d>
// 3f: 85 c0                         testl   %eax, %eax
// 41: 79 70                         jns     0xb3 <_JIT_ENTRY+0xb3>
// 43: e9 81 00 00 00                jmp     0xc9 <_JIT_ENTRY+0xc9>
// 48: 49 29 de                      subq    %rbx, %r14
// 4b: 49 83 c6 b8                   addq    $-0x48, %r14
// 4f: 49 c1 ee 03                   shrq    $0x3, %r14
// 53: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 57: 48 8b 03                      movq    (%rbx), %rax
// 5a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005c:  R_X86_64_64  _JIT_TARGET
// 64: 89 c9                         movl    %ecx, %ecx
// 66: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 6a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 70: e9 92 01 00 00                jmp     0x207 <_JIT_ENTRY+0x207>
// 75: 41 89 07                      movl    %eax, (%r15)
// 78: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007a:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 82: ff d0                         callq   *%rax
// 84: 49 8b 04 24                   movq    (%r12), %rax
// 88: 48 85 c0                      testq   %rax, %rax
// 8b: 7f b2                         jg      0x3f <_JIT_ENTRY+0x3f>
// 8d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008f:  R_X86_64_64  .rodata.str1.1
// 97: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000099:  R_X86_64_64  _Py_NegativeRefcount
// a1: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a6: 4c 89 e2                      movq    %r12, %rdx
// a9: ff d0                         callq   *%rax
// ab: 49 8b 04 24                   movq    (%r12), %rax
// af: 85 c0                         testl   %eax, %eax
// b1: 78 16                         js      0xc9 <_JIT_ENTRY+0xc9>
// b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bd: ff d0                         callq   *%rax
// bf: 49 ff 0c 24                   decq    (%r12)
// c3: 0f 84 a0 00 00 00             je      0x169 <_JIT_ENTRY+0x169>
// c9: 4d 89 7e f8                   movq    %r15, -0x8(%r14)
// cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cf:  R_X86_64_64  _JIT_OPARG
// d7: a8 01                         testb   $0x1, %al
// d9: 74 07                         je      0xe2 <_JIT_ENTRY+0xe2>
// db: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// e2: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 00000000000000e4:  R_X86_64_64  _JIT_OPARG
// ec: 41 83 e7 01                   andl    $0x1, %r15d
// f0: 4b 8b 6c fe f0                movq    -0x10(%r14,%r15,8), %rbp
// f5: 4f 8b 6c fe f8                movq    -0x8(%r14,%r15,8), %r13
// fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fc:  R_X86_64_64  PyUnicode_Concat
// 104: 48 89 ef                      movq    %rbp, %rdi
// 107: 4c 89 ee                      movq    %r13, %rsi
// 10a: ff d0                         callq   *%rax
// 10c: 49 89 c4                      movq    %rax, %r12
// 10f: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 113: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000115:  R_X86_64_64  PyInterpreterState_Get
// 11d: 75 23                         jne     0x142 <_JIT_ENTRY+0x142>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  PyInterpreterState_Get
// 129: ff d0                         callq   *%rax
// 12b: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 132: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000134:  R_X86_64_64  PyInterpreterState_Get
// 13c: 48 ff 4d 00                   decq    (%rbp)
// 140: 74 51                         je      0x193 <_JIT_ENTRY+0x193>
// 142: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 147: 75 6a                         jne     0x1b3 <_JIT_ENTRY+0x1b3>
// 149: ff d1                         callq   *%rcx
// 14b: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 152: 49 ff 4d 00                   decq    (%r13)
// 156: 75 5b                         jne     0x1b3 <_JIT_ENTRY+0x1b3>
// 158: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015a:  R_X86_64_64  _PyUnicode_ExactDealloc
// 162: 4c 89 ef                      movq    %r13, %rdi
// 165: ff d0                         callq   *%rax
// 167: eb 4a                         jmp     0x1b3 <_JIT_ENTRY+0x1b3>
// 169: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016b:  R_X86_64_64  _Py_Dealloc
// 173: 4c 89 e7                      movq    %r12, %rdi
// 176: ff d0                         callq   *%rax
// 178: 4d 89 7e f8                   movq    %r15, -0x8(%r14)
// 17c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017e:  R_X86_64_64  _JIT_OPARG
// 186: a8 01                         testb   $0x1, %al
// 188: 0f 85 4d ff ff ff             jne     0xdb <_JIT_ENTRY+0xdb>
// 18e: e9 4f ff ff ff                jmp     0xe2 <_JIT_ENTRY+0xe2>
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _PyUnicode_ExactDealloc
// 19d: 48 89 ef                      movq    %rbp, %rdi
// 1a0: ff d0                         callq   *%rax
// 1a2: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a4:  R_X86_64_64  PyInterpreterState_Get
// 1ac: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 1b1: 74 96                         je      0x149 <_JIT_ENTRY+0x149>
// 1b3: 4d 85 e4                      testq   %r12, %r12
// 1b6: 74 3b                         je      0x1f3 <_JIT_ENTRY+0x1f3>
// 1b8: 4b 8d 34 fe                   leaq    (%r14,%r15,8), %rsi
// 1bc: 48 83 c6 f8                   addq    $-0x8, %rsi
// 1c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c2:  R_X86_64_64  _JIT_OPARG
// 1ca: 83 e0 01                      andl    $0x1, %eax
// 1cd: 4d 89 64 c6 f0                movq    %r12, -0x10(%r14,%rax,8)
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _JIT_CONTINUE
// 1dc: 48 89 df                      movq    %rbx, %rdi
// 1df: 48 8b 14 24                   movq    (%rsp), %rdx
// 1e3: 48 83 c4 08                   addq    $0x8, %rsp
// 1e7: 5b                            popq    %rbx
// 1e8: 41 5c                         popq    %r12
// 1ea: 41 5d                         popq    %r13
// 1ec: 41 5e                         popq    %r14
// 1ee: 41 5f                         popq    %r15
// 1f0: 5d                            popq    %rbp
// 1f1: ff e0                         jmpq    *%rax
// 1f3: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 1f7: 48 29 d8                      subq    %rbx, %rax
// 1fa: 48 83 c0 a8                   addq    $-0x58, %rax
// 1fe: 48 c1 e8 03                   shrq    $0x3, %rax
// 202: 89 43 40                      movl    %eax, 0x40(%rbx)
// 205: 31 c0                         xorl    %eax, %eax
// 207: 48 83 c4 08                   addq    $0x8, %rsp
// 20b: 5b                            popq    %rbx
// 20c: 41 5c                         popq    %r12
// 20e: 41 5d                         popq    %r13
// 210: 41 5e                         popq    %r14
// 212: 41 5f                         popq    %r15
// 214: 5d                            popq    %rbp
// 215: c3                            retq
// 216: 
static const unsigned char _LOAD_ATTR_SLOTplus_BINARY_OP_ADD_UNICODE_code_body[535] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x3c, 0x04, 0x4d, 0x85, 0xff, 0x74, 0x1d, 0x48, 0x89, 0x14, 0x24, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x75, 0x3f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4e, 0x85, 0xc0, 0x79, 0x70, 0xe9, 0x81, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x92, 0x01, 0x00, 0x00, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xa0, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x83, 0xe7, 0x01, 0x4b, 0x8b, 0x6c, 0xfe, 0xf0, 0x4f, 0x8b, 0x6c, 0xfe, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0xf6, 0x45, 0x03, 0x80, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0x4d, 0x00, 0x74, 0x51, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x6a, 0xff, 0xd1, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x5b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0xeb, 0x4a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x4d, 0xff, 0xff, 0xff, 0xe9, 0x4f, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x74, 0x96, 0x4d, 0x85, 0xe4, 0x74, 0x3b, 0x4b, 0x8d, 0x34, 0xfe, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x4d, 0x89, 0x64, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xa8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _LOAD_ATTR_SLOTplus_BINARY_OP_ADD_UNICODE_code_holes[20] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x99, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xe4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Concat, 0x0},
    {0x115, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x134, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_ExactDealloc, 0x0},
    {0x16b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x17e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_ExactDealloc, 0x0},
    {0x1a4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_BINARY_OP_ADD_UNICODE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_BINARY_OP_ADD_UNICODE_data_holes[1];

// _LOAD_ATTR_SLOTplus_BINARY_OP_MULTIPLY_FLOAT
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_BINARY_OP_MULTIPLY_FLOAT.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 26: 4d 85 ed                      testq   %r13, %r13
// 29: 74 1d                         je      0x48 <_JIT_ENTRY+0x48>
// 2b: 49 89 d7                      movq    %rdx, %r15
// 2e: 41 8b 45 00                   movl    (%r13), %eax
// 32: ff c0                         incl    %eax
// 34: 75 49                         jne     0x7f <_JIT_ENTRY+0x7f>
// 36: 49 8b 04 24                   movq    (%r12), %rax
// 3a: 48 85 c0                      testq   %rax, %rax
// 3d: 7e 59                         jle     0x98 <_JIT_ENTRY+0x98>
// 3f: 85 c0                         testl   %eax, %eax
// 41: 79 7b                         jns     0xbe <_JIT_ENTRY+0xbe>
// 43: e9 97 00 00 00                jmp     0xdf <_JIT_ENTRY+0xdf>
// 48: 49 29 de                      subq    %rbx, %r14
// 4b: 49 83 c6 b8                   addq    $-0x48, %r14
// 4f: 49 c1 ee 03                   shrq    $0x3, %r14
// 53: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 57: 48 8b 03                      movq    (%rbx), %rax
// 5a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005c:  R_X86_64_64  _JIT_TARGET
// 64: 89 c9                         movl    %ecx, %ecx
// 66: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 6a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 70: 48 83 c4 08                   addq    $0x8, %rsp
// 74: 5b                            popq    %rbx
// 75: 41 5c                         popq    %r12
// 77: 41 5d                         popq    %r13
// 79: 41 5e                         popq    %r14
// 7b: 41 5f                         popq    %r15
// 7d: 5d                            popq    %rbp
// 7e: c3                            retq
// 7f: 41 89 45 00                   movl    %eax, (%r13)
// 83: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000085:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 8d: ff d0                         callq   *%rax
// 8f: 49 8b 04 24                   movq    (%r12), %rax
// 93: 48 85 c0                      testq   %rax, %rax
// 96: 7f a7                         jg      0x3f <_JIT_ENTRY+0x3f>
// 98: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000009a:  R_X86_64_64  .rodata.str1.1
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _Py_NegativeRefcount
// ac: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// b1: 4c 89 e2                      movq    %r12, %rdx
// b4: ff d0                         callq   *%rax
// b6: 49 8b 04 24                   movq    (%r12), %rax
// ba: 85 c0                         testl   %eax, %eax
// bc: 78 21                         js      0xdf <_JIT_ENTRY+0xdf>
// be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c8: ff d0                         callq   *%rax
// ca: 49 ff 0c 24                   decq    (%r12)
// ce: 75 0f                         jne     0xdf <_JIT_ENTRY+0xdf>
// d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d2:  R_X86_64_64  _Py_Dealloc
// da: 4c 89 e7                      movq    %r12, %rdi
// dd: ff d0                         callq   *%rax
// df: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e5:  R_X86_64_64  _JIT_OPARG
// ed: a8 01                         testb   $0x1, %al
// ef: 74 07                         je      0xf8 <_JIT_ENTRY+0xf8>
// f1: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// f8: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000000fa:  R_X86_64_64  _JIT_OPARG
// 102: 83 e5 01                      andl    $0x1, %ebp
// 105: 4d 8b 64 ee f0                movq    -0x10(%r14,%rbp,8), %r12
// 10a: 4d 8b 6c ee f8                movq    -0x8(%r14,%rbp,8), %r13
// 10f: f2 41 0f 10 44 24 10          movsd   0x10(%r12), %xmm0       # xmm0 = mem[0],zero
// 116: f2 41 0f 59 45 10             mulsd   0x10(%r13), %xmm0
// 11c: 49 83 3c 24 01                cmpq    $0x1, (%r12)
// 121: 75 3e                         jne     0x161 <_JIT_ENTRY+0x161>
// 123: f2 41 0f 11 44 24 10          movsd   %xmm0, 0x10(%r12)
// 12a: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 12f: 75 28                         jne     0x159 <_JIT_ENTRY+0x159>
// 131: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000133:  R_X86_64_64  PyInterpreterState_Get
// 13b: ff d0                         callq   *%rax
// 13d: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 144: 49 ff 4d 00                   decq    (%r13)
// 148: 75 0f                         jne     0x159 <_JIT_ENTRY+0x159>
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _PyFloat_ExactDealloc
// 154: 4c 89 ef                      movq    %r13, %rdi
// 157: ff d0                         callq   *%rax
// 159: 4d 89 e5                      movq    %r12, %r13
// 15c: e9 fc 00 00 00                jmp     0x25d <_JIT_ENTRY+0x25d>
// 161: 49 83 7d 00 01                cmpq    $0x1, (%r13)
// 166: 75 3d                         jne     0x1a5 <_JIT_ENTRY+0x1a5>
// 168: f2 41 0f 11 45 10             movsd   %xmm0, 0x10(%r13)
// 16e: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 174: 0f 85 e3 00 00 00             jne     0x25d <_JIT_ENTRY+0x25d>
// 17a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017c:  R_X86_64_64  PyInterpreterState_Get
// 184: ff d0                         callq   *%rax
// 186: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 18d: 49 8b 04 24                   movq    (%r12), %rax
// 191: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 195: 49 89 0c 24                   movq    %rcx, (%r12)
// 199: 48 83 f8 01                   cmpq    $0x1, %rax
// 19d: 0f 8f ba 00 00 00             jg      0x25d <_JIT_ENTRY+0x25d>
// 1a3: eb 7c                         jmp     0x221 <_JIT_ENTRY+0x221>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  PyFloat_FromDouble
// 1af: ff d0                         callq   *%rax
// 1b1: 48 85 c0                      testq   %rax, %rax
// 1b4: 0f 84 87 00 00 00             je      0x241 <_JIT_ENTRY+0x241>
// 1ba: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 1c0: 75 2d                         jne     0x1ef <_JIT_ENTRY+0x1ef>
// 1c2: 48 89 04 24                   movq    %rax, (%rsp)
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  PyInterpreterState_Get
// 1d0: ff d0                         callq   *%rax
// 1d2: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1d9: 49 8b 04 24                   movq    (%r12), %rax
// 1dd: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 1e1: 49 89 0c 24                   movq    %rcx, (%r12)
// 1e5: 48 83 f8 01                   cmpq    $0x1, %rax
// 1e9: 48 8b 04 24                   movq    (%rsp), %rax
// 1ed: 7e 32                         jle     0x221 <_JIT_ENTRY+0x221>
// 1ef: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 1f4: 75 64                         jne     0x25a <_JIT_ENTRY+0x25a>
// 1f6: 49 89 c4                      movq    %rax, %r12
// 1f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fb:  R_X86_64_64  PyInterpreterState_Get
// 203: ff d0                         callq   *%rax
// 205: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 20c: 49 8b 45 00                   movq    (%r13), %rax
// 210: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 214: 49 89 4d 00                   movq    %rcx, (%r13)
// 218: 4d 89 e5                      movq    %r12, %r13
// 21b: 48 83 f8 01                   cmpq    $0x1, %rax
// 21f: 7f 3c                         jg      0x25d <_JIT_ENTRY+0x25d>
// 221: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000223:  R_X86_64_64  .rodata.str1.1+0x39
// 22b: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000022d:  R_X86_64_64  .rodata.str1.1+0x4f
// 235: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000237:  R_X86_64_64  _Py_FatalRefcountErrorFunc
// 23f: ff d0                         callq   *%rax
// 241: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 245: 48 29 d8                      subq    %rbx, %rax
// 248: 48 83 c0 b8                   addq    $-0x48, %rax
// 24c: 48 c1 e8 03                   shrq    $0x3, %rax
// 250: 89 43 40                      movl    %eax, 0x40(%rbx)
// 253: 31 c0                         xorl    %eax, %eax
// 255: e9 16 fe ff ff                jmp     0x70 <_JIT_ENTRY+0x70>
// 25a: 49 89 c5                      movq    %rax, %r13
// 25d: 49 8d 34 ee                   leaq    (%r14,%rbp,8), %rsi
// 261: 48 83 c6 f8                   addq    $-0x8, %rsi
// 265: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000267:  R_X86_64_64  _JIT_OPARG
// 26f: 83 e0 01                      andl    $0x1, %eax
// 272: 4d 89 6c c6 f0                movq    %r13, -0x10(%r14,%rax,8)
// 277: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000279:  R_X86_64_64  _JIT_CONTINUE
// 281: 48 89 df                      movq    %rbx, %rdi
// 284: 4c 89 fa                      movq    %r15, %rdx
// 287: 48 83 c4 08                   addq    $0x8, %rsp
// 28b: 5b                            popq    %rbx
// 28c: 41 5c                         popq    %r12
// 28e: 41 5d                         popq    %r13
// 290: 41 5e                         popq    %r14
// 292: 41 5f                         popq    %r15
// 294: 5d                            popq    %rbp
// 295: ff e0                         jmpq    *%rax
// 297: 
static const unsigned char _LOAD_ATTR_SLOTplus_BINARY_OP_MULTIPLY_FLOAT_code_body[664] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1d, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x49, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x59, 0x85, 0xc0, 0x79, 0x7b, 0xe9, 0x97, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xa7, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe5, 0x01, 0x4d, 0x8b, 0x64, 0xee, 0xf0, 0x4d, 0x8b, 0x6c, 0xee, 0xf8, 0xf2, 0x41, 0x0f, 0x10, 0x44, 0x24, 0x10, 0xf2, 0x41, 0x0f, 0x59, 0x45, 0x10, 0x49, 0x83, 0x3c, 0x24, 0x01, 0x75, 0x3e, 0xf2, 0x41, 0x0f, 0x11, 0x44, 0x24, 0x10, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x89, 0xe5, 0xe9, 0xfc, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x00, 0x01, 0x75, 0x3d, 0xf2, 0x41, 0x0f, 0x11, 0x45, 0x10, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x0f, 0x85, 0xe3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x0c, 0x24, 0x48, 0x83, 0xf8, 0x01, 0x0f, 0x8f, 0xba, 0x00, 0x00, 0x00, 0xeb, 0x7c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x87, 0x00, 0x00, 0x00, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x2d, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x0c, 0x24, 0x48, 0x83, 0xf8, 0x01, 0x48, 0x8b, 0x04, 0x24, 0x7e, 0x32, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x64, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x4d, 0x00, 0x4d, 0x89, 0xe5, 0x48, 0x83, 0xf8, 0x01, 0x7f, 0x3c, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x16, 0xfe, 0xff, 0xff, 0x49, 0x89, 0xc5, 0x49, 0x8d, 0x34, 0xee, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x4d, 0x89, 0x6c, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_ATTR_SLOTplus_BINARY_OP_MULTIPLY_FLOAT_code_holes[21] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x9a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xc0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x133, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_FromDouble, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x223, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x4f},
    {0x237, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FatalRefcountErrorFunc, 0x0},
    {0x267, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x279, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_DECREF_NO_DEALLOC\x00Expected a positive remaining refcount\x00'
// 76: 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_BINARY_OP_MULTIPLY_FLOAT_data_body[121] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x46, 0x5f, 0x4e, 0x4f, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x00, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x61, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x20, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x66, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_BINARY_OP_MULTIPLY_FLOAT_data_holes[1];

// _LOAD_ATTR_SLOTplus_BINARY_OP_MULTIPLY_INT
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_BINARY_OP_MULTIPLY_INT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 4d 8b 3c 04                   movq    (%r12,%rax), %r15
// 26: 4d 85 ff                      testq   %r15, %r15
// 29: 74 1d                         je      0x48 <_JIT_ENTRY+0x48>
// 2b: 48 89 14 24                   movq    %rdx, (%rsp)
// 2f: 41 8b 07                      movl    (%r15), %eax
// 32: ff c0                         incl    %eax
// 34: 75 3f                         jne     0x75 <_JIT_ENTRY+0x75>
// 36: 49 8b 04 24                   movq    (%r12), %rax
// 3a: 48 85 c0                      testq   %rax, %rax
// 3d: 7e 4e                         jle     0x8d <_JIT_ENTRY+0x8d>
// 3f: 85 c0                         testl   %eax, %eax
// 41: 79 70                         jns     0xb3 <_JIT_ENTRY+0xb3>
// 43: e9 81 00 00 00                jmp     0xc9 <_JIT_ENTRY+0xc9>
// 48: 49 29 de                      subq    %rbx, %r14
// 4b: 49 83 c6 b8                   addq    $-0x48, %r14
// 4f: 49 c1 ee 03                   shrq    $0x3, %r14
// 53: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 57: 48 8b 03                      movq    (%rbx), %rax
// 5a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005c:  R_X86_64_64  _JIT_TARGET
// 64: 89 c9                         movl    %ecx, %ecx
// 66: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 6a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 70: e9 92 01 00 00                jmp     0x207 <_JIT_ENTRY+0x207>
// 75: 41 89 07                      movl    %eax, (%r15)
// 78: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007a:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 82: ff d0                         callq   *%rax
// 84: 49 8b 04 24                   movq    (%r12), %rax
// 88: 48 85 c0                      testq   %rax, %rax
// 8b: 7f b2                         jg      0x3f <_JIT_ENTRY+0x3f>
// 8d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008f:  R_X86_64_64  .rodata.str1.1
// 97: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000099:  R_X86_64_64  _Py_NegativeRefcount
// a1: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a6: 4c 89 e2                      movq    %r12, %rdx
// a9: ff d0                         callq   *%rax
// ab: 49 8b 04 24                   movq    (%r12), %rax
// af: 85 c0                         testl   %eax, %eax
// b1: 78 16                         js      0xc9 <_JIT_ENTRY+0xc9>
// b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bd: ff d0                         callq   *%rax
// bf: 49 ff 0c 24                   decq    (%r12)
// c3: 0f 84 a0 00 00 00             je      0x169 <_JIT_ENTRY+0x169>
// c9: 4d 89 7e f8                   movq    %r15, -0x8(%r14)
// cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cf:  R_X86_64_64  _JIT_OPARG
// d7: a8 01                         testb   $0x1, %al
// d9: 74 07                         je      0xe2 <_JIT_ENTRY+0xe2>
// db: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// e2: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 00000000000000e4:  R_X86_64_64  _JIT_OPARG
// ec: 41 83 e7 01                   andl    $0x1, %r15d
// f0: 4f 8b 6c fe f0                movq    -0x10(%r14,%r15,8), %r13
// f5: 4b 8b 6c fe f8                movq    -0x8(%r14,%r15,8), %rbp
// fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fc:  R_X86_64_64  _PyLong_Multiply
// 104: 4c 89 ef                      movq    %r13, %rdi
// 107: 48 89 ee                      movq    %rbp, %rsi
// 10a: ff d0                         callq   *%rax
// 10c: 49 89 c4                      movq    %rax, %r12
// 10f: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 113: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000115:  R_X86_64_64  PyInterpreterState_Get
// 11d: 75 23                         jne     0x142 <_JIT_ENTRY+0x142>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  PyInterpreterState_Get
// 129: ff d0                         callq   *%rax
// 12b: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 132: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000134:  R_X86_64_64  PyInterpreterState_Get
// 13c: 48 ff 4d 00                   decq    (%rbp)
// 140: 74 51                         je      0x193 <_JIT_ENTRY+0x193>
// 142: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 147: 75 6a                         jne     0x1b3 <_JIT_ENTRY+0x1b3>
// 149: ff d1                         callq   *%rcx
// 14b: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 152: 49 ff 4d 00                   decq    (%r13)
// 156: 75 5b                         jne     0x1b3 <_JIT_ENTRY+0x1b3>
// 158: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015a:  R_X86_64_64  PyObject_Free
// 162: 4c 89 ef                      movq    %r13, %rdi
// 165: ff d0                         callq   *%rax
// 167: eb 4a                         jmp     0x1b3 <_JIT_ENTRY+0x1b3>
// 169: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016b:  R_X86_64_64  _Py_Dealloc
// 173: 4c 89 e7                      movq    %r12, %rdi
// 176: ff d0                         callq   *%rax
// 178: 4d 89 7e f8                   movq    %r15, -0x8(%r14)
// 17c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017e:  R_X86_64_64  _JIT_OPARG
// 186: a8 01                         testb   $0x1, %al
// 188: 0f 85 4d ff ff ff             jne     0xdb <_JIT_ENTRY+0xdb>
// 18e: e9 4f ff ff ff                jmp     0xe2 <_JIT_ENTRY+0xe2>
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  PyObject_Free
// 19d: 48 89 ef                      movq    %rbp, %rdi
// 1a0: ff d0                         callq   *%rax
// 1a2: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a4:  R_X86_64_64  PyInterpreterState_Get
// 1ac: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 1b1: 74 96                         je      0x149 <_JIT_ENTRY+0x149>
// 1b3: 4d 85 e4                      testq   %r12, %r12
// 1b6: 74 3b                         je      0x1f3 <_JIT_ENTRY+0x1f3>
// 1b8: 4b 8d 34 fe                   leaq    (%r14,%r15,8), %rsi
// 1bc: 48 83 c6 f8                   addq    $-0x8, %rsi
// 1c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c2:  R_X86_64_64  _JIT_OPARG
// 1ca: 83 e0 01                      andl    $0x1, %eax
// 1cd: 4d 89 64 c6 f0                movq    %r12, -0x10(%r14,%rax,8)
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _JIT_CONTINUE
// 1dc: 48 89 df                      movq    %rbx, %rdi
// 1df: 48 8b 14 24                   movq    (%rsp), %rdx
// 1e3: 48 83 c4 08                   addq    $0x8, %rsp
// 1e7: 5b                            popq    %rbx
// 1e8: 41 5c                         popq    %r12
// 1ea: 41 5d                         popq    %r13
// 1ec: 41 5e                         popq    %r14
// 1ee: 41 5f                         popq    %r15
// 1f0: 5d                            popq    %rbp
// 1f1: ff e0                         jmpq    *%rax
// 1f3: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 1f7: 48 29 d8                      subq    %rbx, %rax
// 1fa: 48 83 c0 a8                   addq    $-0x58, %rax
// 1fe: 48 c1 e8 03                   shrq    $0x3, %rax
// 202: 89 43 40                      movl    %eax, 0x40(%rbx)
// 205: 31 c0                         xorl    %eax, %eax
// 207: 48 83 c4 08                   addq    $0x8, %rsp
// 20b: 5b                            popq    %rbx
// 20c: 41 5c                         popq    %r12
// 20e: 41 5d                         popq    %r13
// 210: 41 5e                         popq    %r14
// 212: 41 5f                         popq    %r15
// 214: 5d                            popq    %rbp
// 215: c3                            retq
// 216: 
static const unsigned char _LOAD_ATTR_SLOTplus_BINARY_OP_MULTIPLY_INT_code_body[535] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x3c, 0x04, 0x4d, 0x85, 0xff, 0x74, 0x1d, 0x48, 0x89, 0x14, 0x24, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x75, 0x3f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4e, 0x85, 0xc0, 0x79, 0x70, 0xe9, 0x81, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x92, 0x01, 0x00, 0x00, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xa0, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x83, 0xe7, 0x01, 0x4f, 0x8b, 0x6c, 0xfe, 0xf0, 0x4b, 0x8b, 0x6c, 0xfe, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0xf6, 0x45, 0x03, 0x80, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0x4d, 0x00, 0x74, 0x51, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x6a, 0xff, 0xd1, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x5b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0xeb, 0x4a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x4d, 0xff, 0xff, 0xff, 0xe9, 0x4f, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x74, 0x96, 0x4d, 0x85, 0xe4, 0x74, 0x3b, 0x4b, 0x8d, 0x34, 0xfe, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x4d, 0x89, 0x64, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xa8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _LOAD_ATTR_SLOTplus_BINARY_OP_MULTIPLY_INT_code_holes[20] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x99, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xe4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyLong_Multiply, 0x0},
    {0x115, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x134, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x16b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x17e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x1a4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_BINARY_OP_MULTIPLY_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_BINARY_OP_MULTIPLY_INT_data_holes[1];

// _LOAD_ATTR_SLOTplus_BINARY_OP_SUBTRACT_FLOAT
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_BINARY_OP_SUBTRACT_FLOAT.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 26: 4d 85 ed                      testq   %r13, %r13
// 29: 74 1d                         je      0x48 <_JIT_ENTRY+0x48>
// 2b: 49 89 d7                      movq    %rdx, %r15
// 2e: 41 8b 45 00                   movl    (%r13), %eax
// 32: ff c0                         incl    %eax
// 34: 75 49                         jne     0x7f <_JIT_ENTRY+0x7f>
// 36: 49 8b 04 24                   movq    (%r12), %rax
// 3a: 48 85 c0                      testq   %rax, %rax
// 3d: 7e 59                         jle     0x98 <_JIT_ENTRY+0x98>
// 3f: 85 c0                         testl   %eax, %eax
// 41: 79 7b                         jns     0xbe <_JIT_ENTRY+0xbe>
// 43: e9 97 00 00 00                jmp     0xdf <_JIT_ENTRY+0xdf>
// 48: 49 29 de                      subq    %rbx, %r14
// 4b: 49 83 c6 b8                   addq    $-0x48, %r14
// 4f: 49 c1 ee 03                   shrq    $0x3, %r14
// 53: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 57: 48 8b 03                      movq    (%rbx), %rax
// 5a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005c:  R_X86_64_64  _JIT_TARGET
// 64: 89 c9                         movl    %ecx, %ecx
// 66: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 6a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 70: 48 83 c4 08                   addq    $0x8, %rsp
// 74: 5b                            popq    %rbx
// 75: 41 5c                         popq    %r12
// 77: 41 5d                         popq    %r13
// 79: 41 5e                         popq    %r14
// 7b: 41 5f                         popq    %r15
// 7d: 5d                            popq    %rbp
// 7e: c3                            retq
// 7f: 41 89 45 00                   movl    %eax, (%r13)
// 83: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000085:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 8d: ff d0                         callq   *%rax
// 8f: 49 8b 04 24                   movq    (%r12), %rax
// 93: 48 85 c0                      testq   %rax, %rax
// 96: 7f a7                         jg      0x3f <_JIT_ENTRY+0x3f>
// 98: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000009a:  R_X86_64_64  .rodata.str1.1
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _Py_NegativeRefcount
// ac: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// b1: 4c 89 e2                      movq    %r12, %rdx
// b4: ff d0                         callq   *%rax
// b6: 49 8b 04 24                   movq    (%r12), %rax
// ba: 85 c0                         testl   %eax, %eax
// bc: 78 21                         js      0xdf <_JIT_ENTRY+0xdf>
// be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c8: ff d0                         callq   *%rax
// ca: 49 ff 0c 24                   decq    (%r12)
// ce: 75 0f                         jne     0xdf <_JIT_ENTRY+0xdf>
// d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d2:  R_X86_64_64  _Py_Dealloc
// da: 4c 89 e7                      movq    %r12, %rdi
// dd: ff d0                         callq   *%rax
// df: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e5:  R_X86_64_64  _JIT_OPARG
// ed: a8 01                         testb   $0x1, %al
// ef: 74 07                         je      0xf8 <_JIT_ENTRY+0xf8>
// f1: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// f8: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000000fa:  R_X86_64_64  _JIT_OPARG
// 102: 83 e5 01                      andl    $0x1, %ebp
// 105: 4d 8b 64 ee f0                movq    -0x10(%r14,%rbp,8), %r12
// 10a: 4d 8b 6c ee f8                movq    -0x8(%r14,%rbp,8), %r13
// 10f: f2 41 0f 10 44 24 10          movsd   0x10(%r12), %xmm0       # xmm0 = mem[0],zero
// 116: f2 41 0f 5c 45 10             subsd   0x10(%r13), %xmm0
// 11c: 49 83 3c 24 01                cmpq    $0x1, (%r12)
// 121: 75 3e                         jne     0x161 <_JIT_ENTRY+0x161>
// 123: f2 41 0f 11 44 24 10          movsd   %xmm0, 0x10(%r12)
// 12a: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 12f: 75 28                         jne     0x159 <_JIT_ENTRY+0x159>
// 131: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000133:  R_X86_64_64  PyInterpreterState_Get
// 13b: ff d0                         callq   *%rax
// 13d: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 144: 49 ff 4d 00                   decq    (%r13)
// 148: 75 0f                         jne     0x159 <_JIT_ENTRY+0x159>
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _PyFloat_ExactDealloc
// 154: 4c 89 ef                      movq    %r13, %rdi
// 157: ff d0                         callq   *%rax
// 159: 4d 89 e5                      movq    %r12, %r13
// 15c: e9 fc 00 00 00                jmp     0x25d <_JIT_ENTRY+0x25d>
// 161: 49 83 7d 00 01                cmpq    $0x1, (%r13)
// 166: 75 3d                         jne     0x1a5 <_JIT_ENTRY+0x1a5>
// 168: f2 41 0f 11 45 10             movsd   %xmm0, 0x10(%r13)
// 16e: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 174: 0f 85 e3 00 00 00             jne     0x25d <_JIT_ENTRY+0x25d>
// 17a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017c:  R_X86_64_64  PyInterpreterState_Get
// 184: ff d0                         callq   *%rax
// 186: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 18d: 49 8b 04 24                   movq    (%r12), %rax
// 191: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 195: 49 89 0c 24                   movq    %rcx, (%r12)
// 199: 48 83 f8 01                   cmpq    $0x1, %rax
// 19d: 0f 8f ba 00 00 00             jg      0x25d <_JIT_ENTRY+0x25d>
// 1a3: eb 7c                         jmp     0x221 <_JIT_ENTRY+0x221>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  PyFloat_FromDouble
// 1af: ff d0                         callq   *%rax
// 1b1: 48 85 c0                      testq   %rax, %rax
// 1b4: 0f 84 87 00 00 00             je      0x241 <_JIT_ENTRY+0x241>
// 1ba: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 1c0: 75 2d                         jne     0x1ef <_JIT_ENTRY+0x1ef>
// 1c2: 48 89 04 24                   movq    %rax, (%rsp)
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  PyInterpreterState_Get
// 1d0: ff d0                         callq   *%rax
// 1d2: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1d9: 49 8b 04 24                   movq    (%r12), %rax
// 1dd: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 1e1: 49 89 0c 24                   movq    %rcx, (%r12)
// 1e5: 48 83 f8 01                   cmpq    $0x1, %rax
// 1e9: 48 8b 04 24                   movq    (%rsp), %rax
// 1ed: 7e 32                         jle     0x221 <_JIT_ENTRY+0x221>
// 1ef: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 1f4: 75 64                         jne     0x25a <_JIT_ENTRY+0x25a>
// 1f6: 49 89 c4                      movq    %rax, %r12
// 1f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fb:  R_X86_64_64  PyInterpreterState_Get
// 203: ff d0                         callq   *%rax
// 205: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 20c: 49 8b 45 00                   movq    (%r13), %rax
// 210: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 214: 49 89 4d 00                   movq    %rcx, (%r13)
// 218: 4d 89 e5                      movq    %r12, %r13
// 21b: 48 83 f8 01                   cmpq    $0x1, %rax
// 21f: 7f 3c                         jg      0x25d <_JIT_ENTRY+0x25d>
// 221: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000223:  R_X86_64_64  .rodata.str1.1+0x39
// 22b: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000022d:  R_X86_64_64  .rodata.str1.1+0x4f
// 235: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000237:  R_X86_64_64  _Py_FatalRefcountErrorFunc
// 23f: ff d0                         callq   *%rax
// 241: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 245: 48 29 d8                      subq    %rbx, %rax
// 248: 48 83 c0 b8                   addq    $-0x48, %rax
// 24c: 48 c1 e8 03                   shrq    $0x3, %rax
// 250: 89 43 40                      movl    %eax, 0x40(%rbx)
// 253: 31 c0                         xorl    %eax, %eax
// 255: e9 16 fe ff ff                jmp     0x70 <_JIT_ENTRY+0x70>
// 25a: 49 89 c5                      movq    %rax, %r13
// 25d: 49 8d 34 ee                   leaq    (%r14,%rbp,8), %rsi
// 261: 48 83 c6 f8                   addq    $-0x8, %rsi
// 265: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000267:  R_X86_64_64  _JIT_OPARG
// 26f: 83 e0 01                      andl    $0x1, %eax
// 272: 4d 89 6c c6 f0                movq    %r13, -0x10(%r14,%rax,8)
// 277: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000279:  R_X86_64_64  _JIT_CONTINUE
// 281: 48 89 df                      movq    %rbx, %rdi
// 284: 4c 89 fa                      movq    %r15, %rdx
// 287: 48 83 c4 08                   addq    $0x8, %rsp
// 28b: 5b                            popq    %rbx
// 28c: 41 5c                         popq    %r12
// 28e: 41 5d                         popq    %r13
// 290: 41 5e                         popq    %r14
// 292: 41 5f                         popq    %r15
// 294: 5d                            popq    %rbp
// 295: ff e0                         jmpq    *%rax
// 297: 
static const unsigned char _LOAD_ATTR_SLOTplus_BINARY_OP_SUBTRACT_FLOAT_code_body[664] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1d, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x49, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x59, 0x85, 0xc0, 0x79, 0x7b, 0xe9, 0x97, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xa7, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe5, 0x01, 0x4d, 0x8b, 0x64, 0xee, 0xf0, 0x4d, 0x8b, 0x6c, 0xee, 0xf8, 0xf2, 0x41, 0x0f, 0x10, 0x44, 0x24, 0x10, 0xf2, 0x41, 0x0f, 0x5c, 0x45, 0x10, 0x49, 0x83, 0x3c, 0x24, 0x01, 0x75, 0x3e, 0xf2, 0x41, 0x0f, 0x11, 0x44, 0x24, 0x10, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x89, 0xe5, 0xe9, 0xfc, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x00, 0x01, 0x75, 0x3d, 0xf2, 0x41, 0x0f, 0x11, 0x45, 0x10, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x0f, 0x85, 0xe3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x0c, 0x24, 0x48, 0x83, 0xf8, 0x01, 0x0f, 0x8f, 0xba, 0x00, 0x00, 0x00, 0xeb, 0x7c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x87, 0x00, 0x00, 0x00, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x2d, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x0c, 0x24, 0x48, 0x83, 0xf8, 0x01, 0x48, 0x8b, 0x04, 0x24, 0x7e, 0x32, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x64, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x4d, 0x00, 0x4d, 0x89, 0xe5, 0x48, 0x83, 0xf8, 0x01, 0x7f, 0x3c, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x16, 0xfe, 0xff, 0xff, 0x49, 0x89, 0xc5, 0x49, 0x8d, 0x34, 0xee, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x4d, 0x89, 0x6c, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_ATTR_SLOTplus_BINARY_OP_SUBTRACT_FLOAT_code_holes[21] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x9a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xc0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x133, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_FromDouble, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x223, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x4f},
    {0x237, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FatalRefcountErrorFunc, 0x0},
    {0x267, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x279, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_DECREF_NO_DEALLOC\x00Expected a positive remaining refcount\x00'
// 76: 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_BINARY_OP_SUBTRACT_FLOAT_data_body[121] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x46, 0x5f, 0x4e, 0x4f, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x00, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x61, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x20, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x66, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_BINARY_OP_SUBTRACT_FLOAT_data_holes[1];

// _LOAD_ATTR_SLOTplus_BINARY_OP_SUBTRACT_INT
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_BINARY_OP_SUBTRACT_INT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 4d 8b 3c 04                   movq    (%r12,%rax), %r15
// 26: 4d 85 ff                      testq   %r15, %r15
// 29: 74 1d                         je      0x48 <_JIT_ENTRY+0x48>
// 2b: 48 89 14 24                   movq    %rdx, (%rsp)
// 2f: 41 8b 07                      movl    (%r15), %eax
// 32: ff c0                         incl    %eax
// 34: 75 3f                         jne     0x75 <_JIT_ENTRY+0x75>
// 36: 49 8b 04 24                   movq    (%r12), %rax
// 3a: 48 85 c0                      testq   %rax, %rax
// 3d: 7e 4e                         jle     0x8d <_JIT_ENTRY+0x8d>
// 3f: 85 c0                         testl   %eax, %eax
// 41: 79 70                         jns     0xb3 <_JIT_ENTRY+0xb3>
// 43: e9 81 00 00 00                jmp     0xc9 <_JIT_ENTRY+0xc9>
// 48: 49 29 de                      subq    %rbx, %r14
// 4b: 49 83 c6 b8                   addq    $-0x48, %r14
// 4f: 49 c1 ee 03                   shrq    $0x3, %r14
// 53: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 57: 48 8b 03                      movq    (%rbx), %rax
// 5a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005c:  R_X86_64_64  _JIT_TARGET
// 64: 89 c9                         movl    %ecx, %ecx
// 66: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 6a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 70: e9 92 01 00 00                jmp     0x207 <_JIT_ENTRY+0x207>
// 75: 41 89 07                      movl    %eax, (%r15)
// 78: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007a:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 82: ff d0                         callq   *%rax
// 84: 49 8b 04 24                   movq    (%r12), %rax
// 88: 48 85 c0                      testq   %rax, %rax
// 8b: 7f b2                         jg      0x3f <_JIT_ENTRY+0x3f>
// 8d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008f:  R_X86_64_64  .rodata.str1.1
// 97: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000099:  R_X86_64_64  _Py_NegativeRefcount
// a1: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a6: 4c 89 e2                      movq    %r12, %rdx
// a9: ff d0                         callq   *%rax
// ab: 49 8b 04 24                   movq    (%r12), %rax
// af: 85 c0                         testl   %eax, %eax
// b1: 78 16                         js      0xc9 <_JIT_ENTRY+0xc9>
// b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bd: ff d0                         callq   *%rax
// bf: 49 ff 0c 24                   decq    (%r12)
// c3: 0f 84 a0 00 00 00             je      0x169 <_JIT_ENTRY+0x169>
// c9: 4d 89 7e f8                   movq    %r15, -0x8(%r14)
// cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cf:  R_X86_64_64  _JIT_OPARG
// d7: a8 01                         testb   $0x1, %al
// d9: 74 07                         je      0xe2 <_JIT_ENTRY+0xe2>
// db: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// e2: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 00000000000000e4:  R_X86_64_64  _JIT_OPARG
// ec: 41 83 e7 01                   andl    $0x1, %r15d
// f0: 4f 8b 6c fe f0                movq    -0x10(%r14,%r15,8), %r13
// f5: 4b 8b 6c fe f8                movq    -0x8(%r14,%r15,8), %rbp
// fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fc:  R_X86_64_64  _PyLong_Subtract
// 104: 4c 89 ef                      movq    %r13, %rdi
// 107: 48 89 ee                      movq    %rbp, %rsi
// 10a: ff d0                         callq   *%rax
// 10c: 49 89 c4                      movq    %rax, %r12
// 10f: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 113: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000115:  R_X86_64_64  PyInterpreterState_Get
// 11d: 75 23                         jne     0x142 <_JIT_ENTRY+0x142>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  PyInterpreterState_Get
// 129: ff d0                         callq   *%rax
// 12b: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 132: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000134:  R_X86_64_64  PyInterpreterState_Get
// 13c: 48 ff 4d 00                   decq    (%rbp)
// 140: 74 51                         je      0x193 <_JIT_ENTRY+0x193>
// 142: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 147: 75 6a                         jne     0x1b3 <_JIT_ENTRY+0x1b3>
// 149: ff d1                         callq   *%rcx
// 14b: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 152: 49 ff 4d 00                   decq    (%r13)
// 156: 75 5b                         jne     0x1b3 <_JIT_ENTRY+0x1b3>
// 158: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015a:  R_X86_64_64  PyObject_Free
// 162: 4c 89 ef                      movq    %r13, %rdi
// 165: ff d0                         callq   *%rax
// 167: eb 4a                         jmp     0x1b3 <_JIT_ENTRY+0x1b3>
// 169: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016b:  R_X86_64_64  _Py_Dealloc
// 173: 4c 89 e7                      movq    %r12, %rdi
// 176: ff d0                         callq   *%rax
// 178: 4d 89 7e f8                   movq    %r15, -0x8(%r14)
// 17c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017e:  R_X86_64_64  _JIT_OPARG
// 186: a8 01                         testb   $0x1, %al
// 188: 0f 85 4d ff ff ff             jne     0xdb <_JIT_ENTRY+0xdb>
// 18e: e9 4f ff ff ff                jmp     0xe2 <_JIT_ENTRY+0xe2>
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  PyObject_Free
// 19d: 48 89 ef                      movq    %rbp, %rdi
// 1a0: ff d0                         callq   *%rax
// 1a2: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a4:  R_X86_64_64  PyInterpreterState_Get
// 1ac: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 1b1: 74 96                         je      0x149 <_JIT_ENTRY+0x149>
// 1b3: 4d 85 e4                      testq   %r12, %r12
// 1b6: 74 3b                         je      0x1f3 <_JIT_ENTRY+0x1f3>
// 1b8: 4b 8d 34 fe                   leaq    (%r14,%r15,8), %rsi
// 1bc: 48 83 c6 f8                   addq    $-0x8, %rsi
// 1c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c2:  R_X86_64_64  _JIT_OPARG
// 1ca: 83 e0 01                      andl    $0x1, %eax
// 1cd: 4d 89 64 c6 f0                movq    %r12, -0x10(%r14,%rax,8)
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _JIT_CONTINUE
// 1dc: 48 89 df                      movq    %rbx, %rdi
// 1df: 48 8b 14 24                   movq    (%rsp), %rdx
// 1e3: 48 83 c4 08                   addq    $0x8, %rsp
// 1e7: 5b                            popq    %rbx
// 1e8: 41 5c                         popq    %r12
// 1ea: 41 5d                         popq    %r13
// 1ec: 41 5e                         popq    %r14
// 1ee: 41 5f                         popq    %r15
// 1f0: 5d                            popq    %rbp
// 1f1: ff e0                         jmpq    *%rax
// 1f3: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 1f7: 48 29 d8                      subq    %rbx, %rax
// 1fa: 48 83 c0 a8                   addq    $-0x58, %rax
// 1fe: 48 c1 e8 03                   shrq    $0x3, %rax
// 202: 89 43 40                      movl    %eax, 0x40(%rbx)
// 205: 31 c0                         xorl    %eax, %eax
// 207: 48 83 c4 08                   addq    $0x8, %rsp
// 20b: 5b                            popq    %rbx
// 20c: 41 5c                         popq    %r12
// 20e: 41 5d                         popq    %r13
// 210: 41 5e                         popq    %r14
// 212: 41 5f                         popq    %r15
// 214: 5d                            popq    %rbp
// 215: c3                            retq
// 216: 
static const unsigned char _LOAD_ATTR_SLOTplus_BINARY_OP_SUBTRACT_INT_code_body[535] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x3c, 0x04, 0x4d, 0x85, 0xff, 0x74, 0x1d, 0x48, 0x89, 0x14, 0x24, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x75, 0x3f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4e, 0x85, 0xc0, 0x79, 0x70, 0xe9, 0x81, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x92, 0x01, 0x00, 0x00, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xa0, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x83, 0xe7, 0x01, 0x4f, 0x8b, 0x6c, 0xfe, 0xf0, 0x4b, 0x8b, 0x6c, 0xfe, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0xf6, 0x45, 0x03, 0x80, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0x4d, 0x00, 0x74, 0x51, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x6a, 0xff, 0xd1, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x5b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0xeb, 0x4a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x4d, 0xff, 0xff, 0xff, 0xe9, 0x4f, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x74, 0x96, 0x4d, 0x85, 0xe4, 0x74, 0x3b, 0x4b, 0x8d, 0x34, 0xfe, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x4d, 0x89, 0x64, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xa8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _LOAD_ATTR_SLOTplus_BINARY_OP_SUBTRACT_INT_code_holes[20] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x99, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xe4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyLong_Subtract, 0x0},
    {0x115, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x134, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x16b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x17e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x1a4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_BINARY_OP_SUBTRACT_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_BINARY_OP_SUBTRACT_INT_data_holes[1];

// _LOAD_ATTR_SLOTplus_BINARY_SLICE
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_BINARY_SLICE.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 4d 8b 3c 04                   movq    (%r12,%rax), %r15
// 26: 4d 85 ff                      testq   %r15, %r15
// 29: 74 1c                         je      0x47 <_JIT_ENTRY+0x47>
// 2b: 49 89 d5                      movq    %rdx, %r13
// 2e: 41 8b 07                      movl    (%r15), %eax
// 31: ff c0                         incl    %eax
// 33: 75 3f                         jne     0x74 <_JIT_ENTRY+0x74>
// 35: 49 8b 04 24                   movq    (%r12), %rax
// 39: 48 85 c0                      testq   %rax, %rax
// 3c: 7e 4e                         jle     0x8c <_JIT_ENTRY+0x8c>
// 3e: 85 c0                         testl   %eax, %eax
// 40: 79 70                         jns     0xb2 <_JIT_ENTRY+0xb2>
// 42: e9 81 00 00 00                jmp     0xc8 <_JIT_ENTRY+0xc8>
// 47: 49 29 de                      subq    %rbx, %r14
// 4a: 49 83 c6 b8                   addq    $-0x48, %r14
// 4e: 49 c1 ee 03                   shrq    $0x3, %r14
// 52: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 56: 48 8b 03                      movq    (%rbx), %rax
// 59: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005b:  R_X86_64_64  _JIT_TARGET
// 63: 89 c9                         movl    %ecx, %ecx
// 65: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 69: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 6f: e9 00 02 00 00                jmp     0x274 <_JIT_ENTRY+0x274>
// 74: 41 89 07                      movl    %eax, (%r15)
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 81: ff d0                         callq   *%rax
// 83: 49 8b 04 24                   movq    (%r12), %rax
// 87: 48 85 c0                      testq   %rax, %rax
// 8a: 7f b2                         jg      0x3e <_JIT_ENTRY+0x3e>
// 8c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008e:  R_X86_64_64  .rodata.str1.1
// 96: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000098:  R_X86_64_64  _Py_NegativeRefcount
// a0: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a5: 4c 89 e2                      movq    %r12, %rdx
// a8: ff d0                         callq   *%rax
// aa: 49 8b 04 24                   movq    (%r12), %rax
// ae: 85 c0                         testl   %eax, %eax
// b0: 78 16                         js      0xc8 <_JIT_ENTRY+0xc8>
// b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: ff d0                         callq   *%rax
// be: 49 ff 0c 24                   decq    (%r12)
// c2: 0f 84 ca 00 00 00             je      0x192 <_JIT_ENTRY+0x192>
// c8: 4d 89 7e f8                   movq    %r15, -0x8(%r14)
// cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ce:  R_X86_64_64  _JIT_OPARG
// d6: a8 01                         testb   $0x1, %al
// d8: 74 07                         je      0xe1 <_JIT_ENTRY+0xe1>
// da: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// e1: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 00000000000000e3:  R_X86_64_64  _JIT_OPARG
// eb: 41 83 e7 01                   andl    $0x1, %r15d
// ef: 4b 8b 74 fe f8                movq    -0x8(%r14,%r15,8), %rsi
// f4: 4f 8b 64 fe e8                movq    -0x18(%r14,%r15,8), %r12
// f9: 4b 8b 7c fe f0                movq    -0x10(%r14,%r15,8), %rdi
// fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000100:  R_X86_64_64  _PyBuildSlice_ConsumeRefs
// 108: ff d0                         callq   *%rax
// 10a: 48 85 c0                      testq   %rax, %rax
// 10d: 4c 89 2c 24                   movq    %r13, (%rsp)
// 111: 74 27                         je      0x13a <_JIT_ENTRY+0x13a>
// 113: 48 89 c5                      movq    %rax, %rbp
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  PyObject_GetItem
// 120: 4c 89 e7                      movq    %r12, %rdi
// 123: 48 89 ee                      movq    %rbp, %rsi
// 126: ff d0                         callq   *%rax
// 128: 49 89 c5                      movq    %rax, %r13
// 12b: 48 8b 45 00                   movq    (%rbp), %rax
// 12f: 48 85 c0                      testq   %rax, %rax
// 132: 7e 17                         jle     0x14b <_JIT_ENTRY+0x14b>
// 134: 85 c0                         testl   %eax, %eax
// 136: 79 39                         jns     0x171 <_JIT_ENTRY+0x171>
// 138: eb 49                         jmp     0x183 <_JIT_ENTRY+0x183>
// 13a: 45 31 ed                      xorl    %r13d, %r13d
// 13d: 49 8b 04 24                   movq    (%r12), %rax
// 141: 48 85 c0                      testq   %rax, %rax
// 144: 7f 46                         jg      0x18c <_JIT_ENTRY+0x18c>
// 146: e9 89 00 00 00                jmp     0x1d4 <_JIT_ENTRY+0x1d4>
// 14b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000014d:  R_X86_64_64  .rodata.str1.1
// 155: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000157:  R_X86_64_64  _Py_NegativeRefcount
// 15f: be 99 01 00 00                movl    $0x199, %esi            # imm = 0x199
// 164: 48 89 ea                      movq    %rbp, %rdx
// 167: ff d0                         callq   *%rax
// 169: 48 8b 45 00                   movq    (%rbp), %rax
// 16d: 85 c0                         testl   %eax, %eax
// 16f: 78 12                         js      0x183 <_JIT_ENTRY+0x183>
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17b: ff d0                         callq   *%rax
// 17d: 48 ff 4d 00                   decq    (%rbp)
// 181: 74 39                         je      0x1bc <_JIT_ENTRY+0x1bc>
// 183: 49 8b 04 24                   movq    (%r12), %rax
// 187: 48 85 c0                      testq   %rax, %rax
// 18a: 7e 48                         jle     0x1d4 <_JIT_ENTRY+0x1d4>
// 18c: 85 c0                         testl   %eax, %eax
// 18e: 79 6a                         jns     0x1fa <_JIT_ENTRY+0x1fa>
// 190: eb 7a                         jmp     0x20c <_JIT_ENTRY+0x20c>
// 192: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000194:  R_X86_64_64  _Py_Dealloc
// 19c: 4c 89 e7                      movq    %r12, %rdi
// 19f: ff d0                         callq   *%rax
// 1a1: 4d 89 7e f8                   movq    %r15, -0x8(%r14)
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _JIT_OPARG
// 1af: a8 01                         testb   $0x1, %al
// 1b1: 0f 85 23 ff ff ff             jne     0xda <_JIT_ENTRY+0xda>
// 1b7: e9 25 ff ff ff                jmp     0xe1 <_JIT_ENTRY+0xe1>
// 1bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001be:  R_X86_64_64  _Py_Dealloc
// 1c6: 48 89 ef                      movq    %rbp, %rdi
// 1c9: ff d0                         callq   *%rax
// 1cb: 49 8b 04 24                   movq    (%r12), %rax
// 1cf: 48 85 c0                      testq   %rax, %rax
// 1d2: 7f b8                         jg      0x18c <_JIT_ENTRY+0x18c>
// 1d4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d6:  R_X86_64_64  .rodata.str1.1
// 1de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e0:  R_X86_64_64  _Py_NegativeRefcount
// 1e8: be 9b 01 00 00                movl    $0x19b, %esi            # imm = 0x19B
// 1ed: 4c 89 e2                      movq    %r12, %rdx
// 1f0: ff d0                         callq   *%rax
// 1f2: 49 8b 04 24                   movq    (%r12), %rax
// 1f6: 85 c0                         testl   %eax, %eax
// 1f8: 78 12                         js      0x20c <_JIT_ENTRY+0x20c>
// 1fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 204: ff d0                         callq   *%rax
// 206: 49 ff 0c 24                   decq    (%r12)
// 20a: 74 40                         je      0x24c <_JIT_ENTRY+0x24c>
// 20c: 4d 85 ed                      testq   %r13, %r13
// 20f: 74 4f                         je      0x260 <_JIT_ENTRY+0x260>
// 211: 4b 8d 34 fe                   leaq    (%r14,%r15,8), %rsi
// 215: 48 83 c6 f0                   addq    $-0x10, %rsi
// 219: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021b:  R_X86_64_64  _JIT_OPARG
// 223: 83 e0 01                      andl    $0x1, %eax
// 226: 4d 89 6c c6 e8                movq    %r13, -0x18(%r14,%rax,8)
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _JIT_CONTINUE
// 235: 48 89 df                      movq    %rbx, %rdi
// 238: 48 8b 14 24                   movq    (%rsp), %rdx
// 23c: 48 83 c4 08                   addq    $0x8, %rsp
// 240: 5b                            popq    %rbx
// 241: 41 5c                         popq    %r12
// 243: 41 5d                         popq    %r13
// 245: 41 5e                         popq    %r14
// 247: 41 5f                         popq    %r15
// 249: 5d                            popq    %rbp
// 24a: ff e0                         jmpq    *%rax
// 24c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024e:  R_X86_64_64  _Py_Dealloc
// 256: 4c 89 e7                      movq    %r12, %rdi
// 259: ff d0                         callq   *%rax
// 25b: 4d 85 ed                      testq   %r13, %r13
// 25e: 75 b1                         jne     0x211 <_JIT_ENTRY+0x211>
// 260: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 264: 48 29 d8                      subq    %rbx, %rax
// 267: 48 83 c0 a0                   addq    $-0x60, %rax
// 26b: 48 c1 e8 03                   shrq    $0x3, %rax
// 26f: 89 43 40                      movl    %eax, 0x40(%rbx)
// 272: 31 c0                         xorl    %eax, %eax
// 274: 48 83 c4 08                   addq    $0x8, %rsp
// 278: 5b                            popq    %rbx
// 279: 41 5c                         popq    %r12
// 27b: 41 5d                         popq    %r13
// 27d: 41 5e                         popq    %r14
// 27f: 41 5f                         popq    %r15
// 281: 5d                            popq    %rbp
// 282: c3                            retq
// 283: 
static const unsigned char _LOAD_ATTR_SLOTplus_BINARY_SLICE_code_body[644] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x3c, 0x04, 0x4d, 0x85, 0xff, 0x74, 0x1c, 0x49, 0x89, 0xd5, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x75, 0x3f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4e, 0x85, 0xc0, 0x79, 0x70, 0xe9, 0x81, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x02, 0x00, 0x00, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xca, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x83, 0xe7, 0x01, 0x4b, 0x8b, 0x74, 0xfe, 0xf8, 0x4f, 0x8b, 0x64, 0xfe, 0xe8, 0x4b, 0x8b, 0x7c, 0xfe, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x4c, 0x89, 0x2c, 0x24, 0x74, 0x27, 0x48, 0x89, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x17, 0x85, 0xc0, 0x79, 0x39, 0xeb, 0x49, 0x45, 0x31, 0xed, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x46, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x99, 0x01, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x74, 0x39, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x48, 0x85, 0xc0, 0x79, 0x6a, 0xeb, 0x7a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x23, 0xff, 0xff, 0xff, 0xe9, 0x25, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb8, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x9b, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x40, 0x4d, 0x85, 0xed, 0x74, 0x4f, 0x4b, 0x8d, 0x34, 0xfe, 0x48, 0x83, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x4d, 0x89, 0x6c, 0xc6, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x75, 0xb1, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xa0, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _LOAD_ATTR_SLOTplus_BINARY_SLICE_code_holes[23] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xe3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x100, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyBuildSlice_ConsumeRefs, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetItem, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x157, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x194, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1fc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x21b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x24e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_BINARY_SLICE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_BINARY_SLICE_data_holes[1];

// _LOAD_ATTR_SLOTplus_BINARY_SUBSCR
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_BINARY_SUBSCR.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 4d 8b 3c 04                   movq    (%r12,%rax), %r15
// 26: 4d 85 ff                      testq   %r15, %r15
// 29: 74 1d                         je      0x48 <_JIT_ENTRY+0x48>
// 2b: 48 89 14 24                   movq    %rdx, (%rsp)
// 2f: 41 8b 07                      movl    (%r15), %eax
// 32: ff c0                         incl    %eax
// 34: 75 3f                         jne     0x75 <_JIT_ENTRY+0x75>
// 36: 49 8b 04 24                   movq    (%r12), %rax
// 3a: 48 85 c0                      testq   %rax, %rax
// 3d: 7e 4e                         jle     0x8d <_JIT_ENTRY+0x8d>
// 3f: 85 c0                         testl   %eax, %eax
// 41: 79 70                         jns     0xb3 <_JIT_ENTRY+0xb3>
// 43: e9 81 00 00 00                jmp     0xc9 <_JIT_ENTRY+0xc9>
// 48: 49 29 de                      subq    %rbx, %r14
// 4b: 49 83 c6 b8                   addq    $-0x48, %r14
// 4f: 49 c1 ee 03                   shrq    $0x3, %r14
// 53: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 57: 48 8b 03                      movq    (%rbx), %rax
// 5a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005c:  R_X86_64_64  _JIT_TARGET
// 64: 89 c9                         movl    %ecx, %ecx
// 66: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 6a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 70: e9 d2 01 00 00                jmp     0x247 <_JIT_ENTRY+0x247>
// 75: 41 89 07                      movl    %eax, (%r15)
// 78: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007a:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 82: ff d0                         callq   *%rax
// 84: 49 8b 04 24                   movq    (%r12), %rax
// 88: 48 85 c0                      testq   %rax, %rax
// 8b: 7f b2                         jg      0x3f <_JIT_ENTRY+0x3f>
// 8d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008f:  R_X86_64_64  .rodata.str1.1
// 97: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000099:  R_X86_64_64  _Py_NegativeRefcount
// a1: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a6: 4c 89 e2                      movq    %r12, %rdx
// a9: ff d0                         callq   *%rax
// ab: 49 8b 04 24                   movq    (%r12), %rax
// af: 85 c0                         testl   %eax, %eax
// b1: 78 16                         js      0xc9 <_JIT_ENTRY+0xc9>
// b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bd: ff d0                         callq   *%rax
// bf: 49 ff 0c 24                   decq    (%r12)
// c3: 0f 84 9c 00 00 00             je      0x165 <_JIT_ENTRY+0x165>
// c9: 4d 89 7e f8                   movq    %r15, -0x8(%r14)
// cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cf:  R_X86_64_64  _JIT_OPARG
// d7: a8 01                         testb   $0x1, %al
// d9: 74 07                         je      0xe2 <_JIT_ENTRY+0xe2>
// db: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// e2: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 00000000000000e4:  R_X86_64_64  _JIT_OPARG
// ec: 41 83 e7 01                   andl    $0x1, %r15d
// f0: 4b 8b 6c fe f0                movq    -0x10(%r14,%r15,8), %rbp
// f5: 4f 8b 6c fe f8                movq    -0x8(%r14,%r15,8), %r13
// fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fc:  R_X86_64_64  PyObject_GetItem
// 104: 48 89 ef                      movq    %rbp, %rdi
// 107: 4c 89 ee                      movq    %r13, %rsi
// 10a: ff d0                         callq   *%rax
// 10c: 49 89 c4                      movq    %rax, %r12
// 10f: 48 8b 45 00                   movq    (%rbp), %rax
// 113: 48 85 c0                      testq   %rax, %rax
// 116: 7e 06                         jle     0x11e <_JIT_ENTRY+0x11e>
// 118: 85 c0                         testl   %eax, %eax
// 11a: 79 28                         jns     0x144 <_JIT_ENTRY+0x144>
// 11c: eb 38                         jmp     0x156 <_JIT_ENTRY+0x156>
// 11e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000120:  R_X86_64_64  .rodata.str1.1
// 128: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012a:  R_X86_64_64  _Py_NegativeRefcount
// 132: be 81 01 00 00                movl    $0x181, %esi            # imm = 0x181
// 137: 48 89 ea                      movq    %rbp, %rdx
// 13a: ff d0                         callq   *%rax
// 13c: 48 8b 45 00                   movq    (%rbp), %rax
// 140: 85 c0                         testl   %eax, %eax
// 142: 78 12                         js      0x156 <_JIT_ENTRY+0x156>
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 14e: ff d0                         callq   *%rax
// 150: 48 ff 4d 00                   decq    (%rbp)
// 154: 74 39                         je      0x18f <_JIT_ENTRY+0x18f>
// 156: 49 8b 45 00                   movq    (%r13), %rax
// 15a: 48 85 c0                      testq   %rax, %rax
// 15d: 7e 48                         jle     0x1a7 <_JIT_ENTRY+0x1a7>
// 15f: 85 c0                         testl   %eax, %eax
// 161: 79 6a                         jns     0x1cd <_JIT_ENTRY+0x1cd>
// 163: eb 7a                         jmp     0x1df <_JIT_ENTRY+0x1df>
// 165: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000167:  R_X86_64_64  _Py_Dealloc
// 16f: 4c 89 e7                      movq    %r12, %rdi
// 172: ff d0                         callq   *%rax
// 174: 4d 89 7e f8                   movq    %r15, -0x8(%r14)
// 178: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017a:  R_X86_64_64  _JIT_OPARG
// 182: a8 01                         testb   $0x1, %al
// 184: 0f 85 51 ff ff ff             jne     0xdb <_JIT_ENTRY+0xdb>
// 18a: e9 53 ff ff ff                jmp     0xe2 <_JIT_ENTRY+0xe2>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _Py_Dealloc
// 199: 48 89 ef                      movq    %rbp, %rdi
// 19c: ff d0                         callq   *%rax
// 19e: 49 8b 45 00                   movq    (%r13), %rax
// 1a2: 48 85 c0                      testq   %rax, %rax
// 1a5: 7f b8                         jg      0x15f <_JIT_ENTRY+0x15f>
// 1a7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a9:  R_X86_64_64  .rodata.str1.1
// 1b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b3:  R_X86_64_64  _Py_NegativeRefcount
// 1bb: be 82 01 00 00                movl    $0x182, %esi            # imm = 0x182
// 1c0: 4c 89 ea                      movq    %r13, %rdx
// 1c3: ff d0                         callq   *%rax
// 1c5: 49 8b 45 00                   movq    (%r13), %rax
// 1c9: 85 c0                         testl   %eax, %eax
// 1cb: 78 12                         js      0x1df <_JIT_ENTRY+0x1df>
// 1cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cf:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d7: ff d0                         callq   *%rax
// 1d9: 49 ff 4d 00                   decq    (%r13)
// 1dd: 74 40                         je      0x21f <_JIT_ENTRY+0x21f>
// 1df: 4d 85 e4                      testq   %r12, %r12
// 1e2: 74 4f                         je      0x233 <_JIT_ENTRY+0x233>
// 1e4: 4b 8d 34 fe                   leaq    (%r14,%r15,8), %rsi
// 1e8: 48 83 c6 f8                   addq    $-0x8, %rsi
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _JIT_OPARG
// 1f6: 83 e0 01                      andl    $0x1, %eax
// 1f9: 4d 89 64 c6 f0                movq    %r12, -0x10(%r14,%rax,8)
// 1fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000200:  R_X86_64_64  _JIT_CONTINUE
// 208: 48 89 df                      movq    %rbx, %rdi
// 20b: 48 8b 14 24                   movq    (%rsp), %rdx
// 20f: 48 83 c4 08                   addq    $0x8, %rsp
// 213: 5b                            popq    %rbx
// 214: 41 5c                         popq    %r12
// 216: 41 5d                         popq    %r13
// 218: 41 5e                         popq    %r14
// 21a: 41 5f                         popq    %r15
// 21c: 5d                            popq    %rbp
// 21d: ff e0                         jmpq    *%rax
// 21f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000221:  R_X86_64_64  _Py_Dealloc
// 229: 4c 89 ef                      movq    %r13, %rdi
// 22c: ff d0                         callq   *%rax
// 22e: 4d 85 e4                      testq   %r12, %r12
// 231: 75 b1                         jne     0x1e4 <_JIT_ENTRY+0x1e4>
// 233: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 237: 48 29 d8                      subq    %rbx, %rax
// 23a: 48 83 c0 a8                   addq    $-0x58, %rax
// 23e: 48 c1 e8 03                   shrq    $0x3, %rax
// 242: 89 43 40                      movl    %eax, 0x40(%rbx)
// 245: 31 c0                         xorl    %eax, %eax
// 247: 48 83 c4 08                   addq    $0x8, %rsp
// 24b: 5b                            popq    %rbx
// 24c: 41 5c                         popq    %r12
// 24e: 41 5d                         popq    %r13
// 250: 41 5e                         popq    %r14
// 252: 41 5f                         popq    %r15
// 254: 5d                            popq    %rbp
// 255: c3                            retq
// 256: 
static const unsigned char _LOAD_ATTR_SLOTplus_BINARY_SUBSCR_code_body[599] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x3c, 0x04, 0x4d, 0x85, 0xff, 0x74, 0x1d, 0x48, 0x89, 0x14, 0x24, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x75, 0x3f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4e, 0x85, 0xc0, 0x79, 0x70, 0xe9, 0x81, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xd2, 0x01, 0x00, 0x00, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x9c, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x83, 0xe7, 0x01, 0x4b, 0x8b, 0x6c, 0xfe, 0xf0, 0x4f, 0x8b, 0x6c, 0xfe, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x81, 0x01, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x74, 0x39, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x48, 0x85, 0xc0, 0x79, 0x6a, 0xeb, 0x7a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x51, 0xff, 0xff, 0xff, 0xe9, 0x53, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xb8, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x82, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x40, 0x4d, 0x85, 0xe4, 0x74, 0x4f, 0x4b, 0x8d, 0x34, 0xfe, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x4d, 0x89, 0x64, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x75, 0xb1, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xa8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _LOAD_ATTR_SLOTplus_BINARY_SUBSCR_code_holes[22] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x99, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xe4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetItem, 0x0},
    {0x120, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x17a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1cf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x200, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_BINARY_SUBSCR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_BINARY_SUBSCR_data_holes[1];

// _LOAD_ATTR_SLOTplus_BINARY_SUBSCR_DICT
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_BINARY_SUBSCR_DICT.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 18: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001a:  R_X86_64_64  _JIT_OPERAND
// 22: 0f b7 c0                      movzwl  %ax, %eax
// 25: 4d 8b 3c 04                   movq    (%r12,%rax), %r15
// 29: 4d 85 ff                      testq   %r15, %r15
// 2c: 0f 84 c5 00 00 00             je      0xf7 <_JIT_ENTRY+0xf7>
// 32: 48 89 d5                      movq    %rdx, %rbp
// 35: 41 8b 07                      movl    (%r15), %eax
// 38: ff c0                         incl    %eax
// 3a: 75 0f                         jne     0x4b <_JIT_ENTRY+0x4b>
// 3c: 49 8b 04 24                   movq    (%r12), %rax
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 7e 1e                         jle     0x63 <_JIT_ENTRY+0x63>
// 45: 85 c0                         testl   %eax, %eax
// 47: 79 40                         jns     0x89 <_JIT_ENTRY+0x89>
// 49: eb 5f                         jmp     0xaa <_JIT_ENTRY+0xaa>
// 4b: 41 89 07                      movl    %eax, (%r15)
// 4e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000050:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 58: ff d0                         callq   *%rax
// 5a: 49 8b 04 24                   movq    (%r12), %rax
// 5e: 48 85 c0                      testq   %rax, %rax
// 61: 7f e2                         jg      0x45 <_JIT_ENTRY+0x45>
// 63: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000065:  R_X86_64_64  .rodata.str1.1
// 6d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006f:  R_X86_64_64  _Py_NegativeRefcount
// 77: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 7c: 4c 89 e2                      movq    %r12, %rdx
// 7f: ff d0                         callq   *%rax
// 81: 49 8b 04 24                   movq    (%r12), %rax
// 85: 85 c0                         testl   %eax, %eax
// 87: 78 21                         js      0xaa <_JIT_ENTRY+0xaa>
// 89: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 93: ff d0                         callq   *%rax
// 95: 49 ff 0c 24                   decq    (%r12)
// 99: 75 0f                         jne     0xaa <_JIT_ENTRY+0xaa>
// 9b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009d:  R_X86_64_64  _Py_Dealloc
// a5: 4c 89 e7                      movq    %r12, %rdi
// a8: ff d0                         callq   *%rax
// aa: 4d 89 7e f8                   movq    %r15, -0x8(%r14)
// ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b0:  R_X86_64_64  _JIT_OPARG
// b8: a8 01                         testb   $0x1, %al
// ba: 74 07                         je      0xc3 <_JIT_ENTRY+0xc3>
// bc: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// c3: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 00000000000000c5:  R_X86_64_64  _JIT_OPARG
// cd: 41 83 e7 01                   andl    $0x1, %r15d
// d1: 4f 8b 6c fe f0                movq    -0x10(%r14,%r15,8), %r13
// d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d8:  R_X86_64_64  PyDict_Type
// e0: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// e4: 74 48                         je      0x12e <_JIT_ENTRY+0x12e>
// e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e8:  R_X86_64_64  _JIT_OPARG
// f0: 83 e0 01                      andl    $0x1, %eax
// f3: 4d 8d 34 c6                   leaq    (%r14,%rax,8), %r14
// f7: 49 29 de                      subq    %rbx, %r14
// fa: 49 83 c6 b8                   addq    $-0x48, %r14
// fe: 49 c1 ee 03                   shrq    $0x3, %r14
// 102: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 106: 48 8b 03                      movq    (%rbx), %rax
// 109: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000010b:  R_X86_64_64  _JIT_TARGET
// 113: 89 c9                         movl    %ecx, %ecx
// 115: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 119: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11f: 48 83 c4 18                   addq    $0x18, %rsp
// 123: 5b                            popq    %rbx
// 124: 41 5c                         popq    %r12
// 126: 41 5d                         popq    %r13
// 128: 41 5e                         popq    %r14
// 12a: 41 5f                         popq    %r15
// 12c: 5d                            popq    %rbp
// 12d: c3                            retq
// 12e: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 133: 4f 8b 64 fe f8                movq    -0x8(%r14,%r15,8), %r12
// 138: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013a:  R_X86_64_64  PyDict_GetItemRef
// 142: 48 8d 54 24 10                leaq    0x10(%rsp), %rdx
// 147: 4c 89 ef                      movq    %r13, %rdi
// 14a: 4c 89 e6                      movq    %r12, %rsi
// 14d: ff d0                         callq   *%rax
// 14f: 89 c5                         movl    %eax, %ebp
// 151: 85 c0                         testl   %eax, %eax
// 153: 74 0f                         je      0x164 <_JIT_ENTRY+0x164>
// 155: 49 8b 45 00                   movq    (%r13), %rax
// 159: 48 85 c0                      testq   %rax, %rax
// 15c: 7e 1e                         jle     0x17c <_JIT_ENTRY+0x17c>
// 15e: 85 c0                         testl   %eax, %eax
// 160: 79 40                         jns     0x1a2 <_JIT_ENTRY+0x1a2>
// 162: eb 5f                         jmp     0x1c3 <_JIT_ENTRY+0x1c3>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _PyErr_SetKeyError
// 16e: 4c 89 e7                      movq    %r12, %rdi
// 171: ff d0                         callq   *%rax
// 173: 49 8b 45 00                   movq    (%r13), %rax
// 177: 48 85 c0                      testq   %rax, %rax
// 17a: 7f e2                         jg      0x15e <_JIT_ENTRY+0x15e>
// 17c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000017e:  R_X86_64_64  .rodata.str1.1
// 186: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000188:  R_X86_64_64  _Py_NegativeRefcount
// 190: be 0c 02 00 00                movl    $0x20c, %esi            # imm = 0x20C
// 195: 4c 89 ea                      movq    %r13, %rdx
// 198: ff d0                         callq   *%rax
// 19a: 49 8b 45 00                   movq    (%r13), %rax
// 19e: 85 c0                         testl   %eax, %eax
// 1a0: 78 21                         js      0x1c3 <_JIT_ENTRY+0x1c3>
// 1a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ac: ff d0                         callq   *%rax
// 1ae: 49 ff 4d 00                   decq    (%r13)
// 1b2: 75 0f                         jne     0x1c3 <_JIT_ENTRY+0x1c3>
// 1b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b6:  R_X86_64_64  _Py_Dealloc
// 1be: 4c 89 ef                      movq    %r13, %rdi
// 1c1: ff d0                         callq   *%rax
// 1c3: 49 8b 04 24                   movq    (%r12), %rax
// 1c7: 48 85 c0                      testq   %rax, %rax
// 1ca: 7e 06                         jle     0x1d2 <_JIT_ENTRY+0x1d2>
// 1cc: 85 c0                         testl   %eax, %eax
// 1ce: 79 28                         jns     0x1f8 <_JIT_ENTRY+0x1f8>
// 1d0: eb 38                         jmp     0x20a <_JIT_ENTRY+0x20a>
// 1d2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d4:  R_X86_64_64  .rodata.str1.1
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _Py_NegativeRefcount
// 1e6: be 0d 02 00 00                movl    $0x20d, %esi            # imm = 0x20D
// 1eb: 4c 89 e2                      movq    %r12, %rdx
// 1ee: ff d0                         callq   *%rax
// 1f0: 49 8b 04 24                   movq    (%r12), %rax
// 1f4: 85 c0                         testl   %eax, %eax
// 1f6: 78 12                         js      0x20a <_JIT_ENTRY+0x20a>
// 1f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fa:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 202: ff d0                         callq   *%rax
// 204: 49 ff 0c 24                   decq    (%r12)
// 208: 74 3e                         je      0x248 <_JIT_ENTRY+0x248>
// 20a: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 20e: 48 83 c0 f0                   addq    $-0x10, %rax
// 212: 85 ed                         testl   %ebp, %ebp
// 214: 7e 4d                         jle     0x263 <_JIT_ENTRY+0x263>
// 216: 4b 8d 34 fe                   leaq    (%r14,%r15,8), %rsi
// 21a: 48 83 c6 f8                   addq    $-0x8, %rsi
// 21e: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 223: 48 89 08                      movq    %rcx, (%rax)
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _JIT_CONTINUE
// 230: 48 89 df                      movq    %rbx, %rdi
// 233: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 238: 48 83 c4 18                   addq    $0x18, %rsp
// 23c: 5b                            popq    %rbx
// 23d: 41 5c                         popq    %r12
// 23f: 41 5d                         popq    %r13
// 241: 41 5e                         popq    %r14
// 243: 41 5f                         popq    %r15
// 245: 5d                            popq    %rbp
// 246: ff e0                         jmpq    *%rax
// 248: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024a:  R_X86_64_64  _Py_Dealloc
// 252: 4c 89 e7                      movq    %r12, %rdi
// 255: ff d0                         callq   *%rax
// 257: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 25b: 48 83 c0 f0                   addq    $-0x10, %rax
// 25f: 85 ed                         testl   %ebp, %ebp
// 261: 7f b3                         jg      0x216 <_JIT_ENTRY+0x216>
// 263: 48 29 d8                      subq    %rbx, %rax
// 266: 48 83 c0 b8                   addq    $-0x48, %rax
// 26a: 48 c1 e8 03                   shrq    $0x3, %rax
// 26e: 89 43 40                      movl    %eax, 0x40(%rbx)
// 271: 31 c0                         xorl    %eax, %eax
// 273: e9 a7 fe ff ff                jmp     0x11f <_JIT_ENTRY+0x11f>
// 278: 
static const unsigned char _LOAD_ATTR_SLOTplus_BINARY_SUBSCR_DICT_code_body[633] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x3c, 0x04, 0x4d, 0x85, 0xff, 0x0f, 0x84, 0xc5, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd5, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x5f, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x83, 0xe7, 0x01, 0x4f, 0x8b, 0x6c, 0xfe, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x74, 0x48, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x4d, 0x8d, 0x34, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x4f, 0x8b, 0x64, 0xfe, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x85, 0xc0, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x5f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x0c, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x0d, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x3e, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x83, 0xc0, 0xf0, 0x85, 0xed, 0x7e, 0x4d, 0x4b, 0x8d, 0x34, 0xfe, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x83, 0xc0, 0xf0, 0x85, 0xed, 0x7f, 0xb3, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xa7, 0xfe, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_BINARY_SUBSCR_DICT_code_holes[23] = {
    {0x1a, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x50, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x65, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x6f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x9d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xb0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xc5, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xd8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0xe8, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_GetItemRef, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetKeyError, 0x0},
    {0x17e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1fa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x24a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_BINARY_SUBSCR_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_BINARY_SUBSCR_DICT_data_holes[1];

// _LOAD_ATTR_SLOTplus_BINARY_SUBSCR_LIST_INT
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_BINARY_SUBSCR_LIST_INT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f7                      movq    %rsi, %r15
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 26: 4d 85 ed                      testq   %r13, %r13
// 29: 74 1a                         je      0x45 <_JIT_ENTRY+0x45>
// 2b: 49 89 d6                      movq    %rdx, %r14
// 2e: 41 8b 45 00                   movl    (%r13), %eax
// 32: ff c0                         incl    %eax
// 34: 75 17                         jne     0x4d <_JIT_ENTRY+0x4d>
// 36: 49 8b 04 24                   movq    (%r12), %rax
// 3a: 48 85 c0                      testq   %rax, %rax
// 3d: 7e 27                         jle     0x66 <_JIT_ENTRY+0x66>
// 3f: 85 c0                         testl   %eax, %eax
// 41: 79 49                         jns     0x8c <_JIT_ENTRY+0x8c>
// 43: eb 68                         jmp     0xad <_JIT_ENTRY+0xad>
// 45: 4c 89 f8                      movq    %r15, %rax
// 48: e9 bc 01 00 00                jmp     0x209 <_JIT_ENTRY+0x209>
// 4d: 41 89 45 00                   movl    %eax, (%r13)
// 51: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000053:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 5b: ff d0                         callq   *%rax
// 5d: 49 8b 04 24                   movq    (%r12), %rax
// 61: 48 85 c0                      testq   %rax, %rax
// 64: 7f d9                         jg      0x3f <_JIT_ENTRY+0x3f>
// 66: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000068:  R_X86_64_64  .rodata.str1.1
// 70: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000072:  R_X86_64_64  _Py_NegativeRefcount
// 7a: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 7f: 4c 89 e2                      movq    %r12, %rdx
// 82: ff d0                         callq   *%rax
// 84: 49 8b 04 24                   movq    (%r12), %rax
// 88: 85 c0                         testl   %eax, %eax
// 8a: 78 21                         js      0xad <_JIT_ENTRY+0xad>
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 96: ff d0                         callq   *%rax
// 98: 49 ff 0c 24                   decq    (%r12)
// 9c: 75 0f                         jne     0xad <_JIT_ENTRY+0xad>
// 9e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a0:  R_X86_64_64  _Py_Dealloc
// a8: 4c 89 e7                      movq    %r12, %rdi
// ab: ff d0                         callq   *%rax
// ad: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b3:  R_X86_64_64  _JIT_OPARG
// bb: a8 01                         testb   $0x1, %al
// bd: 74 07                         je      0xc6 <_JIT_ENTRY+0xc6>
// bf: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// c6: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000000c8:  R_X86_64_64  _JIT_OPARG
// d0: 83 e5 01                      andl    $0x1, %ebp
// d3: 49 8d 04 ef                   leaq    (%r15,%rbp,8), %rax
// d7: 4d 8b 6c ef f8                movq    -0x8(%r15,%rbp,8), %r13
// dc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000de:  R_X86_64_64  PyLong_Type
// e6: 49 39 4d 08                   cmpq    %rcx, 0x8(%r13)
// ea: 0f 85 19 01 00 00             jne     0x209 <_JIT_ENTRY+0x209>
// f0: 4d 8b 64 ef f0                movq    -0x10(%r15,%rbp,8), %r12
// f5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000f7:  R_X86_64_64  PyList_Type
// ff: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 104: 0f 85 ff 00 00 00             jne     0x209 <_JIT_ENTRY+0x209>
// 10a: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 10f: 0f 87 f4 00 00 00             ja      0x209 <_JIT_ENTRY+0x209>
// 115: 41 8b 4d 18                   movl    0x18(%r13), %ecx
// 119: 49 39 4c 24 10                cmpq    %rcx, 0x10(%r12)
// 11e: 0f 8e e5 00 00 00             jle     0x209 <_JIT_ENTRY+0x209>
// 124: 49 8b 44 24 18                movq    0x18(%r12), %rax
// 129: 48 8b 04 c8                   movq    (%rax,%rcx,8), %rax
// 12d: 48 89 04 24                   movq    %rax, (%rsp)
// 131: 8b 00                         movl    (%rax), %eax
// 133: ff c0                         incl    %eax
// 135: 74 12                         je      0x149 <_JIT_ENTRY+0x149>
// 137: 48 8b 0c 24                   movq    (%rsp), %rcx
// 13b: 89 01                         movl    %eax, (%rcx)
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 147: ff d0                         callq   *%rax
// 149: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 14e: 75 28                         jne     0x178 <_JIT_ENTRY+0x178>
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  PyInterpreterState_Get
// 15a: ff d0                         callq   *%rax
// 15c: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 163: 49 ff 4d 00                   decq    (%r13)
// 167: 75 0f                         jne     0x178 <_JIT_ENTRY+0x178>
// 169: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016b:  R_X86_64_64  PyObject_Free
// 173: 4c 89 ef                      movq    %r13, %rdi
// 176: ff d0                         callq   *%rax
// 178: 49 8b 04 24                   movq    (%r12), %rax
// 17c: 48 85 c0                      testq   %rax, %rax
// 17f: 7f 22                         jg      0x1a3 <_JIT_ENTRY+0x1a3>
// 181: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000183:  R_X86_64_64  .rodata.str1.1
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_NegativeRefcount
// 195: be cc 01 00 00                movl    $0x1cc, %esi            # imm = 0x1CC
// 19a: 4c 89 e2                      movq    %r12, %rdx
// 19d: ff d0                         callq   *%rax
// 19f: 49 8b 04 24                   movq    (%r12), %rax
// 1a3: 4d 8d 2c ef                   leaq    (%r15,%rbp,8), %r13
// 1a7: 49 83 c5 f8                   addq    $-0x8, %r13
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 78 21                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b9: ff d0                         callq   *%rax
// 1bb: 49 ff 0c 24                   decq    (%r12)
// 1bf: 75 0f                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_Dealloc
// 1cb: 4c 89 e7                      movq    %r12, %rdi
// 1ce: ff d0                         callq   *%rax
// 1d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d2:  R_X86_64_64  _JIT_OPARG
// 1da: 83 e0 01                      andl    $0x1, %eax
// 1dd: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1e1: 49 89 4c c7 f0                movq    %rcx, -0x10(%r15,%rax,8)
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _JIT_CONTINUE
// 1f0: 48 89 df                      movq    %rbx, %rdi
// 1f3: 4c 89 ee                      movq    %r13, %rsi
// 1f6: 4c 89 f2                      movq    %r14, %rdx
// 1f9: 48 83 c4 08                   addq    $0x8, %rsp
// 1fd: 5b                            popq    %rbx
// 1fe: 41 5c                         popq    %r12
// 200: 41 5d                         popq    %r13
// 202: 41 5e                         popq    %r14
// 204: 41 5f                         popq    %r15
// 206: 5d                            popq    %rbp
// 207: ff e0                         jmpq    *%rax
// 209: 48 29 d8                      subq    %rbx, %rax
// 20c: 48 83 c0 b8                   addq    $-0x48, %rax
// 210: 48 c1 e8 03                   shrq    $0x3, %rax
// 214: 89 43 40                      movl    %eax, 0x40(%rbx)
// 217: 48 8b 03                      movq    (%rbx), %rax
// 21a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000021c:  R_X86_64_64  _JIT_TARGET
// 224: 89 c9                         movl    %ecx, %ecx
// 226: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 22a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 230: 48 83 c4 08                   addq    $0x8, %rsp
// 234: 5b                            popq    %rbx
// 235: 41 5c                         popq    %r12
// 237: 41 5d                         popq    %r13
// 239: 41 5e                         popq    %r14
// 23b: 41 5f                         popq    %r15
// 23d: 5d                            popq    %rbp
// 23e: c3                            retq
// 23f: 
static const unsigned char _LOAD_ATTR_SLOTplus_BINARY_SUBSCR_LIST_INT_code_body[576] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1a, 0x49, 0x89, 0xd6, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x17, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x27, 0x85, 0xc0, 0x79, 0x49, 0xeb, 0x68, 0x4c, 0x89, 0xf8, 0xe9, 0xbc, 0x01, 0x00, 0x00, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xd9, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe5, 0x01, 0x49, 0x8d, 0x04, 0xef, 0x4d, 0x8b, 0x6c, 0xef, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4d, 0x08, 0x0f, 0x85, 0x19, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x64, 0xef, 0xf0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x0f, 0x85, 0xff, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xf4, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x4d, 0x18, 0x49, 0x39, 0x4c, 0x24, 0x10, 0x0f, 0x8e, 0xe5, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x18, 0x48, 0x8b, 0x04, 0xc8, 0x48, 0x89, 0x04, 0x24, 0x8b, 0x00, 0xff, 0xc0, 0x74, 0x12, 0x48, 0x8b, 0x0c, 0x24, 0x89, 0x01, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xcc, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x2c, 0xef, 0x49, 0x83, 0xc5, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x48, 0x8b, 0x0c, 0x24, 0x49, 0x89, 0x4c, 0xc7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _LOAD_ATTR_SLOTplus_BINARY_SUBSCR_LIST_INT_code_holes[21] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x53, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x68, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x72, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xc8, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xde, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyList_Type, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x16b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x21c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_BINARY_SUBSCR_LIST_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_BINARY_SUBSCR_LIST_INT_data_holes[1];

// _LOAD_ATTR_SLOTplus_BINARY_SUBSCR_STR_INT
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_BINARY_SUBSCR_STR_INT.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f7                      movq    %rsi, %r15
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 26: 4d 85 ed                      testq   %r13, %r13
// 29: 74 1a                         je      0x45 <_JIT_ENTRY+0x45>
// 2b: 49 89 d6                      movq    %rdx, %r14
// 2e: 41 8b 45 00                   movl    (%r13), %eax
// 32: ff c0                         incl    %eax
// 34: 75 17                         jne     0x4d <_JIT_ENTRY+0x4d>
// 36: 49 8b 04 24                   movq    (%r12), %rax
// 3a: 48 85 c0                      testq   %rax, %rax
// 3d: 7e 27                         jle     0x66 <_JIT_ENTRY+0x66>
// 3f: 85 c0                         testl   %eax, %eax
// 41: 79 49                         jns     0x8c <_JIT_ENTRY+0x8c>
// 43: eb 68                         jmp     0xad <_JIT_ENTRY+0xad>
// 45: 4c 89 f8                      movq    %r15, %rax
// 48: e9 6d 01 00 00                jmp     0x1ba <_JIT_ENTRY+0x1ba>
// 4d: 41 89 45 00                   movl    %eax, (%r13)
// 51: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000053:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 5b: ff d0                         callq   *%rax
// 5d: 49 8b 04 24                   movq    (%r12), %rax
// 61: 48 85 c0                      testq   %rax, %rax
// 64: 7f d9                         jg      0x3f <_JIT_ENTRY+0x3f>
// 66: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000068:  R_X86_64_64  .rodata.str1.1
// 70: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000072:  R_X86_64_64  _Py_NegativeRefcount
// 7a: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 7f: 4c 89 e2                      movq    %r12, %rdx
// 82: ff d0                         callq   *%rax
// 84: 49 8b 04 24                   movq    (%r12), %rax
// 88: 85 c0                         testl   %eax, %eax
// 8a: 78 21                         js      0xad <_JIT_ENTRY+0xad>
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 96: ff d0                         callq   *%rax
// 98: 49 ff 0c 24                   decq    (%r12)
// 9c: 75 0f                         jne     0xad <_JIT_ENTRY+0xad>
// 9e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a0:  R_X86_64_64  _Py_Dealloc
// a8: 4c 89 e7                      movq    %r12, %rdi
// ab: ff d0                         callq   *%rax
// ad: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b3:  R_X86_64_64  _JIT_OPARG
// bb: a8 01                         testb   $0x1, %al
// bd: 74 07                         je      0xc6 <_JIT_ENTRY+0xc6>
// bf: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// c6: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000000c8:  R_X86_64_64  _JIT_OPARG
// d0: 83 e5 01                      andl    $0x1, %ebp
// d3: 49 8d 04 ef                   leaq    (%r15,%rbp,8), %rax
// d7: 4d 8b 6c ef f8                movq    -0x8(%r15,%rbp,8), %r13
// dc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000de:  R_X86_64_64  PyLong_Type
// e6: 49 39 4d 08                   cmpq    %rcx, 0x8(%r13)
// ea: 0f 85 ca 00 00 00             jne     0x1ba <_JIT_ENTRY+0x1ba>
// f0: 4d 8b 64 ef f0                movq    -0x10(%r15,%rbp,8), %r12
// f5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000f7:  R_X86_64_64  PyUnicode_Type
// ff: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 104: 0f 85 b0 00 00 00             jne     0x1ba <_JIT_ENTRY+0x1ba>
// 10a: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 10f: 0f 87 a5 00 00 00             ja      0x1ba <_JIT_ENTRY+0x1ba>
// 115: 41 8b 4d 18                   movl    0x18(%r13), %ecx
// 119: 49 39 4c 24 10                cmpq    %rcx, 0x10(%r12)
// 11e: 0f 8e 96 00 00 00             jle     0x1ba <_JIT_ENTRY+0x1ba>
// 124: 41 8b 54 24 20                movl    0x20(%r12), %edx
// 129: 89 d6                         movl    %edx, %esi
// 12b: c1 ee 02                      shrl    $0x2, %esi
// 12e: 83 e6 07                      andl    $0x7, %esi
// 131: 83 fe 02                      cmpl    $0x2, %esi
// 134: 74 15                         je      0x14b <_JIT_ENTRY+0x14b>
// 136: 83 fe 01                      cmpl    $0x1, %esi
// 139: 75 20                         jne     0x15b <_JIT_ENTRY+0x15b>
// 13b: f6 c2 20                      testb   $0x20, %dl
// 13e: 75 27                         jne     0x167 <_JIT_ENTRY+0x167>
// 140: 49 8b 54 24 38                movq    0x38(%r12), %rdx
// 145: 0f b6 0c 0a                   movzbl  (%rdx,%rcx), %ecx
// 149: eb 6a                         jmp     0x1b5 <_JIT_ENTRY+0x1b5>
// 14b: f6 c2 20                      testb   $0x20, %dl
// 14e: 75 32                         jne     0x182 <_JIT_ENTRY+0x182>
// 150: 49 8b 54 24 38                movq    0x38(%r12), %rdx
// 155: 0f b7 0c 4a                   movzwl  (%rdx,%rcx,2), %ecx
// 159: eb 5a                         jmp     0x1b5 <_JIT_ENTRY+0x1b5>
// 15b: f6 c2 20                      testb   $0x20, %dl
// 15e: 75 3d                         jne     0x19d <_JIT_ENTRY+0x19d>
// 160: 49 8b 54 24 38                movq    0x38(%r12), %rdx
// 165: eb 4b                         jmp     0x1b2 <_JIT_ENTRY+0x1b2>
// 167: 31 f6                         xorl    %esi, %esi
// 169: f6 c2 40                      testb   $0x40, %dl
// 16c: 40 0f 94 c6                   sete    %sil
// 170: 48 c1 e6 04                   shlq    $0x4, %rsi
// 174: 4a 8d 14 26                   leaq    (%rsi,%r12), %rdx
// 178: 48 83 c2 28                   addq    $0x28, %rdx
// 17c: 0f b6 0c 0a                   movzbl  (%rdx,%rcx), %ecx
// 180: eb 33                         jmp     0x1b5 <_JIT_ENTRY+0x1b5>
// 182: 31 f6                         xorl    %esi, %esi
// 184: f6 c2 40                      testb   $0x40, %dl
// 187: 40 0f 94 c6                   sete    %sil
// 18b: 48 c1 e6 04                   shlq    $0x4, %rsi
// 18f: 4a 8d 14 26                   leaq    (%rsi,%r12), %rdx
// 193: 48 83 c2 28                   addq    $0x28, %rdx
// 197: 0f b7 0c 4a                   movzwl  (%rdx,%rcx,2), %ecx
// 19b: eb 18                         jmp     0x1b5 <_JIT_ENTRY+0x1b5>
// 19d: 31 f6                         xorl    %esi, %esi
// 19f: f6 c2 40                      testb   $0x40, %dl
// 1a2: 40 0f 94 c6                   sete    %sil
// 1a6: 48 c1 e6 04                   shlq    $0x4, %rsi
// 1aa: 4a 8d 14 26                   leaq    (%rsi,%r12), %rdx
// 1ae: 48 83 c2 28                   addq    $0x28, %rdx
// 1b2: 8b 0c 8a                      movl    (%rdx,%rcx,4), %ecx
// 1b5: 83 f9 7f                      cmpl    $0x7f, %ecx
// 1b8: 76 36                         jbe     0x1f0 <_JIT_ENTRY+0x1f0>
// 1ba: 48 29 d8                      subq    %rbx, %rax
// 1bd: 48 83 c0 b8                   addq    $-0x48, %rax
// 1c1: 48 c1 e8 03                   shrq    $0x3, %rax
// 1c5: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1c8: 48 8b 03                      movq    (%rbx), %rax
// 1cb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001cd:  R_X86_64_64  _JIT_TARGET
// 1d5: 89 c9                         movl    %ecx, %ecx
// 1d7: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1db: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1e1: 48 83 c4 08                   addq    $0x8, %rsp
// 1e5: 5b                            popq    %rbx
// 1e6: 41 5c                         popq    %r12
// 1e8: 41 5d                         popq    %r13
// 1ea: 41 5e                         popq    %r14
// 1ec: 41 5f                         popq    %r15
// 1ee: 5d                            popq    %rbp
// 1ef: c3                            retq
// 1f0: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 1f5: 89 4c 24 04                   movl    %ecx, 0x4(%rsp)
// 1f9: 75 30                         jne     0x22b <_JIT_ENTRY+0x22b>
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  PyInterpreterState_Get
// 205: ff d0                         callq   *%rax
// 207: 8b 4c 24 04                   movl    0x4(%rsp), %ecx
// 20b: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 212: 49 ff 4d 00                   decq    (%r13)
// 216: 75 13                         jne     0x22b <_JIT_ENTRY+0x22b>
// 218: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021a:  R_X86_64_64  PyObject_Free
// 222: 4c 89 ef                      movq    %r13, %rdi
// 225: ff d0                         callq   *%rax
// 227: 8b 4c 24 04                   movl    0x4(%rsp), %ecx
// 22b: 49 8b 04 24                   movq    (%r12), %rax
// 22f: 48 85 c0                      testq   %rax, %rax
// 232: 7f 26                         jg      0x25a <_JIT_ENTRY+0x25a>
// 234: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000236:  R_X86_64_64  .rodata.str1.1
// 23e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000240:  R_X86_64_64  _Py_NegativeRefcount
// 248: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 24d: 4c 89 e2                      movq    %r12, %rdx
// 250: ff d0                         callq   *%rax
// 252: 8b 4c 24 04                   movl    0x4(%rsp), %ecx
// 256: 49 8b 04 24                   movq    (%r12), %rax
// 25a: 4d 8d 2c ef                   leaq    (%r15,%rbp,8), %r13
// 25e: 49 83 c5 f8                   addq    $-0x8, %r13
// 262: 85 c0                         testl   %eax, %eax
// 264: 78 29                         js      0x28f <_JIT_ENTRY+0x28f>
// 266: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000268:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 270: ff d0                         callq   *%rax
// 272: 8b 4c 24 04                   movl    0x4(%rsp), %ecx
// 276: 49 ff 0c 24                   decq    (%r12)
// 27a: 75 13                         jne     0x28f <_JIT_ENTRY+0x28f>
// 27c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027e:  R_X86_64_64  _Py_Dealloc
// 286: 4c 89 e7                      movq    %r12, %rdi
// 289: ff d0                         callq   *%rax
// 28b: 8b 4c 24 04                   movl    0x4(%rsp), %ecx
// 28f: 89 c8                         movl    %ecx, %eax
// 291: 48 8d 04 40                   leaq    (%rax,%rax,2), %rax
// 295: 48 c1 e0 04                   shlq    $0x4, %rax
// 299: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000029b:  R_X86_64_64  _PyRuntime
// 2a3: 48 01 c8                      addq    %rcx, %rax
// 2a6: 48 05 a0 32 01 00             addq    $0x132a0, %rax          # imm = 0x132A0
// 2ac: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002ae:  R_X86_64_64  _JIT_OPARG
// 2b6: 83 e1 01                      andl    $0x1, %ecx
// 2b9: 49 89 44 cf f0                movq    %rax, -0x10(%r15,%rcx,8)
// 2be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c0:  R_X86_64_64  _JIT_CONTINUE
// 2c8: 48 89 df                      movq    %rbx, %rdi
// 2cb: 4c 89 ee                      movq    %r13, %rsi
// 2ce: 4c 89 f2                      movq    %r14, %rdx
// 2d1: 48 83 c4 08                   addq    $0x8, %rsp
// 2d5: 5b                            popq    %rbx
// 2d6: 41 5c                         popq    %r12
// 2d8: 41 5d                         popq    %r13
// 2da: 41 5e                         popq    %r14
// 2dc: 41 5f                         popq    %r15
// 2de: 5d                            popq    %rbp
// 2df: ff e0                         jmpq    *%rax
// 2e1: 
static const unsigned char _LOAD_ATTR_SLOTplus_BINARY_SUBSCR_STR_INT_code_body[738] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1a, 0x49, 0x89, 0xd6, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x17, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x27, 0x85, 0xc0, 0x79, 0x49, 0xeb, 0x68, 0x4c, 0x89, 0xf8, 0xe9, 0x6d, 0x01, 0x00, 0x00, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xd9, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe5, 0x01, 0x49, 0x8d, 0x04, 0xef, 0x4d, 0x8b, 0x6c, 0xef, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4d, 0x08, 0x0f, 0x85, 0xca, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x64, 0xef, 0xf0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x4d, 0x18, 0x49, 0x39, 0x4c, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x54, 0x24, 0x20, 0x89, 0xd6, 0xc1, 0xee, 0x02, 0x83, 0xe6, 0x07, 0x83, 0xfe, 0x02, 0x74, 0x15, 0x83, 0xfe, 0x01, 0x75, 0x20, 0xf6, 0xc2, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x54, 0x24, 0x38, 0x0f, 0xb6, 0x0c, 0x0a, 0xeb, 0x6a, 0xf6, 0xc2, 0x20, 0x75, 0x32, 0x49, 0x8b, 0x54, 0x24, 0x38, 0x0f, 0xb7, 0x0c, 0x4a, 0xeb, 0x5a, 0xf6, 0xc2, 0x20, 0x75, 0x3d, 0x49, 0x8b, 0x54, 0x24, 0x38, 0xeb, 0x4b, 0x31, 0xf6, 0xf6, 0xc2, 0x40, 0x40, 0x0f, 0x94, 0xc6, 0x48, 0xc1, 0xe6, 0x04, 0x4a, 0x8d, 0x14, 0x26, 0x48, 0x83, 0xc2, 0x28, 0x0f, 0xb6, 0x0c, 0x0a, 0xeb, 0x33, 0x31, 0xf6, 0xf6, 0xc2, 0x40, 0x40, 0x0f, 0x94, 0xc6, 0x48, 0xc1, 0xe6, 0x04, 0x4a, 0x8d, 0x14, 0x26, 0x48, 0x83, 0xc2, 0x28, 0x0f, 0xb7, 0x0c, 0x4a, 0xeb, 0x18, 0x31, 0xf6, 0xf6, 0xc2, 0x40, 0x40, 0x0f, 0x94, 0xc6, 0x48, 0xc1, 0xe6, 0x04, 0x4a, 0x8d, 0x14, 0x26, 0x48, 0x83, 0xc2, 0x28, 0x8b, 0x0c, 0x8a, 0x83, 0xf9, 0x7f, 0x76, 0x36, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x89, 0x4c, 0x24, 0x04, 0x75, 0x30, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x8b, 0x4c, 0x24, 0x04, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x8b, 0x4c, 0x24, 0x04, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x8b, 0x4c, 0x24, 0x04, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x2c, 0xef, 0x49, 0x83, 0xc5, 0xf8, 0x85, 0xc0, 0x78, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x8b, 0x4c, 0x24, 0x04, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x8b, 0x4c, 0x24, 0x04, 0x89, 0xc8, 0x48, 0x8d, 0x04, 0x40, 0x48, 0xc1, 0xe0, 0x04, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x01, 0xc8, 0x48, 0x05, 0xa0, 0x32, 0x01, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe1, 0x01, 0x49, 0x89, 0x44, 0xcf, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_ATTR_SLOTplus_BINARY_SUBSCR_STR_INT_code_holes[21] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x53, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x68, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x72, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xc8, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xde, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x1cd, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x21a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x236, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x240, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x268, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x27e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x29b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x2ae, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2c0, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_BINARY_SUBSCR_STR_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_BINARY_SUBSCR_STR_INT_data_holes[1];

// _LOAD_ATTR_SLOTplus_BINARY_SUBSCR_TUPLE_INT
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_BINARY_SUBSCR_TUPLE_INT.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f7                      movq    %rsi, %r15
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 26: 4d 85 ed                      testq   %r13, %r13
// 29: 74 1a                         je      0x45 <_JIT_ENTRY+0x45>
// 2b: 49 89 d6                      movq    %rdx, %r14
// 2e: 41 8b 45 00                   movl    (%r13), %eax
// 32: ff c0                         incl    %eax
// 34: 75 17                         jne     0x4d <_JIT_ENTRY+0x4d>
// 36: 49 8b 04 24                   movq    (%r12), %rax
// 3a: 48 85 c0                      testq   %rax, %rax
// 3d: 7e 27                         jle     0x66 <_JIT_ENTRY+0x66>
// 3f: 85 c0                         testl   %eax, %eax
// 41: 79 49                         jns     0x8c <_JIT_ENTRY+0x8c>
// 43: eb 68                         jmp     0xad <_JIT_ENTRY+0xad>
// 45: 4c 89 f8                      movq    %r15, %rax
// 48: e9 b8 01 00 00                jmp     0x205 <_JIT_ENTRY+0x205>
// 4d: 41 89 45 00                   movl    %eax, (%r13)
// 51: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000053:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 5b: ff d0                         callq   *%rax
// 5d: 49 8b 04 24                   movq    (%r12), %rax
// 61: 48 85 c0                      testq   %rax, %rax
// 64: 7f d9                         jg      0x3f <_JIT_ENTRY+0x3f>
// 66: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000068:  R_X86_64_64  .rodata.str1.1
// 70: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000072:  R_X86_64_64  _Py_NegativeRefcount
// 7a: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 7f: 4c 89 e2                      movq    %r12, %rdx
// 82: ff d0                         callq   *%rax
// 84: 49 8b 04 24                   movq    (%r12), %rax
// 88: 85 c0                         testl   %eax, %eax
// 8a: 78 21                         js      0xad <_JIT_ENTRY+0xad>
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 96: ff d0                         callq   *%rax
// 98: 49 ff 0c 24                   decq    (%r12)
// 9c: 75 0f                         jne     0xad <_JIT_ENTRY+0xad>
// 9e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a0:  R_X86_64_64  _Py_Dealloc
// a8: 4c 89 e7                      movq    %r12, %rdi
// ab: ff d0                         callq   *%rax
// ad: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b3:  R_X86_64_64  _JIT_OPARG
// bb: a8 01                         testb   $0x1, %al
// bd: 74 07                         je      0xc6 <_JIT_ENTRY+0xc6>
// bf: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// c6: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000000c8:  R_X86_64_64  _JIT_OPARG
// d0: 83 e5 01                      andl    $0x1, %ebp
// d3: 49 8d 04 ef                   leaq    (%r15,%rbp,8), %rax
// d7: 4d 8b 6c ef f8                movq    -0x8(%r15,%rbp,8), %r13
// dc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000de:  R_X86_64_64  PyLong_Type
// e6: 49 39 4d 08                   cmpq    %rcx, 0x8(%r13)
// ea: 0f 85 15 01 00 00             jne     0x205 <_JIT_ENTRY+0x205>
// f0: 4d 8b 64 ef f0                movq    -0x10(%r15,%rbp,8), %r12
// f5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000f7:  R_X86_64_64  PyTuple_Type
// ff: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 104: 0f 85 fb 00 00 00             jne     0x205 <_JIT_ENTRY+0x205>
// 10a: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 10f: 0f 87 f0 00 00 00             ja      0x205 <_JIT_ENTRY+0x205>
// 115: 41 8b 4d 18                   movl    0x18(%r13), %ecx
// 119: 49 39 4c 24 10                cmpq    %rcx, 0x10(%r12)
// 11e: 0f 8e e1 00 00 00             jle     0x205 <_JIT_ENTRY+0x205>
// 124: 49 8b 44 cc 18                movq    0x18(%r12,%rcx,8), %rax
// 129: 48 89 04 24                   movq    %rax, (%rsp)
// 12d: 8b 00                         movl    (%rax), %eax
// 12f: ff c0                         incl    %eax
// 131: 74 12                         je      0x145 <_JIT_ENTRY+0x145>
// 133: 48 8b 0c 24                   movq    (%rsp), %rcx
// 137: 89 01                         movl    %eax, (%rcx)
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 143: ff d0                         callq   *%rax
// 145: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 14a: 75 28                         jne     0x174 <_JIT_ENTRY+0x174>
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  PyInterpreterState_Get
// 156: ff d0                         callq   *%rax
// 158: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 15f: 49 ff 4d 00                   decq    (%r13)
// 163: 75 0f                         jne     0x174 <_JIT_ENTRY+0x174>
// 165: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000167:  R_X86_64_64  PyObject_Free
// 16f: 4c 89 ef                      movq    %r13, %rdi
// 172: ff d0                         callq   *%rax
// 174: 49 8b 04 24                   movq    (%r12), %rax
// 178: 48 85 c0                      testq   %rax, %rax
// 17b: 7f 22                         jg      0x19f <_JIT_ENTRY+0x19f>
// 17d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000017f:  R_X86_64_64  .rodata.str1.1
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _Py_NegativeRefcount
// 191: be fa 01 00 00                movl    $0x1fa, %esi            # imm = 0x1FA
// 196: 4c 89 e2                      movq    %r12, %rdx
// 199: ff d0                         callq   *%rax
// 19b: 49 8b 04 24                   movq    (%r12), %rax
// 19f: 4d 8d 2c ef                   leaq    (%r15,%rbp,8), %r13
// 1a3: 49 83 c5 f8                   addq    $-0x8, %r13
// 1a7: 85 c0                         testl   %eax, %eax
// 1a9: 78 21                         js      0x1cc <_JIT_ENTRY+0x1cc>
// 1ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ad:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b5: ff d0                         callq   *%rax
// 1b7: 49 ff 0c 24                   decq    (%r12)
// 1bb: 75 0f                         jne     0x1cc <_JIT_ENTRY+0x1cc>
// 1bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bf:  R_X86_64_64  _Py_Dealloc
// 1c7: 4c 89 e7                      movq    %r12, %rdi
// 1ca: ff d0                         callq   *%rax
// 1cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ce:  R_X86_64_64  _JIT_OPARG
// 1d6: 83 e0 01                      andl    $0x1, %eax
// 1d9: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1dd: 49 89 4c c7 f0                movq    %rcx, -0x10(%r15,%rax,8)
// 1e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e4:  R_X86_64_64  _JIT_CONTINUE
// 1ec: 48 89 df                      movq    %rbx, %rdi
// 1ef: 4c 89 ee                      movq    %r13, %rsi
// 1f2: 4c 89 f2                      movq    %r14, %rdx
// 1f5: 48 83 c4 08                   addq    $0x8, %rsp
// 1f9: 5b                            popq    %rbx
// 1fa: 41 5c                         popq    %r12
// 1fc: 41 5d                         popq    %r13
// 1fe: 41 5e                         popq    %r14
// 200: 41 5f                         popq    %r15
// 202: 5d                            popq    %rbp
// 203: ff e0                         jmpq    *%rax
// 205: 48 29 d8                      subq    %rbx, %rax
// 208: 48 83 c0 b8                   addq    $-0x48, %rax
// 20c: 48 c1 e8 03                   shrq    $0x3, %rax
// 210: 89 43 40                      movl    %eax, 0x40(%rbx)
// 213: 48 8b 03                      movq    (%rbx), %rax
// 216: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000218:  R_X86_64_64  _JIT_TARGET
// 220: 89 c9                         movl    %ecx, %ecx
// 222: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 226: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 22c: 48 83 c4 08                   addq    $0x8, %rsp
// 230: 5b                            popq    %rbx
// 231: 41 5c                         popq    %r12
// 233: 41 5d                         popq    %r13
// 235: 41 5e                         popq    %r14
// 237: 41 5f                         popq    %r15
// 239: 5d                            popq    %rbp
// 23a: c3                            retq
// 23b: 
static const unsigned char _LOAD_ATTR_SLOTplus_BINARY_SUBSCR_TUPLE_INT_code_body[572] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1a, 0x49, 0x89, 0xd6, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x17, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x27, 0x85, 0xc0, 0x79, 0x49, 0xeb, 0x68, 0x4c, 0x89, 0xf8, 0xe9, 0xb8, 0x01, 0x00, 0x00, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xd9, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe5, 0x01, 0x49, 0x8d, 0x04, 0xef, 0x4d, 0x8b, 0x6c, 0xef, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4d, 0x08, 0x0f, 0x85, 0x15, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x64, 0xef, 0xf0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x0f, 0x85, 0xfb, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xf0, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x4d, 0x18, 0x49, 0x39, 0x4c, 0x24, 0x10, 0x0f, 0x8e, 0xe1, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x44, 0xcc, 0x18, 0x48, 0x89, 0x04, 0x24, 0x8b, 0x00, 0xff, 0xc0, 0x74, 0x12, 0x48, 0x8b, 0x0c, 0x24, 0x89, 0x01, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfa, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x2c, 0xef, 0x49, 0x83, 0xc5, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x48, 0x8b, 0x0c, 0x24, 0x49, 0x89, 0x4c, 0xc7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _LOAD_ATTR_SLOTplus_BINARY_SUBSCR_TUPLE_INT_code_holes[21] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x53, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x68, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x72, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xc8, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xde, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x17f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1bf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ce, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_BINARY_SUBSCR_TUPLE_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_BINARY_SUBSCR_TUPLE_INT_data_holes[1];

// _LOAD_ATTR_SLOTplus_BUILD_CONST_KEY_MAP
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_BUILD_CONST_KEY_MAP.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 18: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001a:  R_X86_64_64  _JIT_OPERAND
// 22: 0f b7 c0                      movzwl  %ax, %eax
// 25: 4d 8b 34 04                   movq    (%r12,%rax), %r14
// 29: 4d 85 f6                      testq   %r14, %r14
// 2c: 74 1c                         je      0x4a <_JIT_ENTRY+0x4a>
// 2e: 48 89 d5                      movq    %rdx, %rbp
// 31: 41 8b 06                      movl    (%r14), %eax
// 34: ff c0                         incl    %eax
// 36: 75 3f                         jne     0x77 <_JIT_ENTRY+0x77>
// 38: 49 8b 04 24                   movq    (%r12), %rax
// 3c: 48 85 c0                      testq   %rax, %rax
// 3f: 7e 4e                         jle     0x8f <_JIT_ENTRY+0x8f>
// 41: 85 c0                         testl   %eax, %eax
// 43: 79 70                         jns     0xb5 <_JIT_ENTRY+0xb5>
// 45: e9 8c 00 00 00                jmp     0xd6 <_JIT_ENTRY+0xd6>
// 4a: 49 29 df                      subq    %rbx, %r15
// 4d: 49 83 c7 b8                   addq    $-0x48, %r15
// 51: 49 c1 ef 03                   shrq    $0x3, %r15
// 55: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 59: 48 8b 03                      movq    (%rbx), %rax
// 5c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005e:  R_X86_64_64  _JIT_TARGET
// 66: 89 c9                         movl    %ecx, %ecx
// 68: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 6c: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 72: e9 dd 01 00 00                jmp     0x254 <_JIT_ENTRY+0x254>
// 77: 41 89 06                      movl    %eax, (%r14)
// 7a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007c:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 84: ff d0                         callq   *%rax
// 86: 49 8b 04 24                   movq    (%r12), %rax
// 8a: 48 85 c0                      testq   %rax, %rax
// 8d: 7f b2                         jg      0x41 <_JIT_ENTRY+0x41>
// 8f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000091:  R_X86_64_64  .rodata.str1.1
// 99: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009b:  R_X86_64_64  _Py_NegativeRefcount
// a3: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a8: 4c 89 e2                      movq    %r12, %rdx
// ab: ff d0                         callq   *%rax
// ad: 49 8b 04 24                   movq    (%r12), %rax
// b1: 85 c0                         testl   %eax, %eax
// b3: 78 21                         js      0xd6 <_JIT_ENTRY+0xd6>
// b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bf: ff d0                         callq   *%rax
// c1: 49 ff 0c 24                   decq    (%r12)
// c5: 75 0f                         jne     0xd6 <_JIT_ENTRY+0xd6>
// c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c9:  R_X86_64_64  _Py_Dealloc
// d1: 4c 89 e7                      movq    %r12, %rdi
// d4: ff d0                         callq   *%rax
// d6: 4d 89 77 f8                   movq    %r14, -0x8(%r15)
// da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000dc:  R_X86_64_64  _JIT_OPARG
// e4: a8 01                         testb   $0x1, %al
// e6: 74 07                         je      0xef <_JIT_ENTRY+0xef>
// e8: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// ef: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000f1:  R_X86_64_64  _JIT_OPARG
// f9: 89 c8                         movl    %ecx, %eax
// fb: 83 e0 01                      andl    $0x1, %eax
// fe: 4d 8b 6c c7 f8                movq    -0x8(%r15,%rax,8), %r13
// 103: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000105:  R_X86_64_64  PyTuple_Type
// 10d: 49 39 55 08                   cmpq    %rdx, 0x8(%r13)
// 111: 0f 85 02 01 00 00             jne     0x219 <_JIT_ENTRY+0x219>
// 117: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000119:  R_X86_64_64  _JIT_OPARG
// 121: 0f b7 d2                      movzwl  %dx, %edx
// 124: 49 39 55 10                   cmpq    %rdx, 0x10(%r13)
// 128: 0f 85 eb 00 00 00             jne     0x219 <_JIT_ENTRY+0x219>
// 12e: 48 89 6c 24 10                movq    %rbp, 0x10(%rsp)
// 133: f7 d1                         notl    %ecx
// 135: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 13b: 48 63 c9                      movslq  %ecx, %rcx
// 13e: 48 01 c1                      addq    %rax, %rcx
// 141: 4d 8d 24 cf                   leaq    (%r15,%rcx,8), %r12
// 145: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 149: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 000000000000014b:  R_X86_64_64  _JIT_OPARG
// 153: 45 0f b7 c6                   movzwl  %r14w, %r8d
// 157: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000159:  R_X86_64_64  _PyDict_FromItems
// 161: be 01 00 00 00                movl    $0x1, %esi
// 166: b9 01 00 00 00                movl    $0x1, %ecx
// 16b: 4c 89 e2                      movq    %r12, %rdx
// 16e: ff d0                         callq   *%rax
// 170: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 175: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 17c: 0f 8e e1 00 00 00             jle     0x263 <_JIT_ENTRY+0x263>
// 182: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000184:  R_X86_64_64  _JIT_OPARG
// 18c: 44 0f b7 f0                   movzwl  %ax, %r14d
// 190: 49 ff c6                      incq    %r14
// 193: eb 18                         jmp     0x1ad <_JIT_ENTRY+0x1ad>
// 195: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// 1a0: 49 ff ce                      decq    %r14
// 1a3: 49 83 fe 01                   cmpq    $0x1, %r14
// 1a7: 0f 8e b6 00 00 00             jle     0x263 <_JIT_ENTRY+0x263>
// 1ad: 41 8d 46 fe                   leal    -0x2(%r14), %eax
// 1b1: 49 8b 2c c4                   movq    (%r12,%rax,8), %rbp
// 1b5: 48 8b 45 00                   movq    (%rbp), %rax
// 1b9: 48 85 c0                      testq   %rax, %rax
// 1bc: 7e 12                         jle     0x1d0 <_JIT_ENTRY+0x1d0>
// 1be: 85 c0                         testl   %eax, %eax
// 1c0: 78 de                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1c2: eb 32                         jmp     0x1f6 <_JIT_ENTRY+0x1f6>
// 1c4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 1d0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d2:  R_X86_64_64  .rodata.str1.1
// 1da: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// 1df: 48 89 ea                      movq    %rbp, %rdx
// 1e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e4:  R_X86_64_64  _Py_NegativeRefcount
// 1ec: ff d0                         callq   *%rax
// 1ee: 48 8b 45 00                   movq    (%rbp), %rax
// 1f2: 85 c0                         testl   %eax, %eax
// 1f4: 78 aa                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 200: ff d0                         callq   *%rax
// 202: 48 ff 4d 00                   decq    (%rbp)
// 206: 75 98                         jne     0x1a0 <_JIT_ENTRY+0x1a0>
// 208: 48 89 ef                      movq    %rbp, %rdi
// 20b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020d:  R_X86_64_64  _Py_Dealloc
// 215: ff d0                         callq   *%rax
// 217: eb 87                         jmp     0x1a0 <_JIT_ENTRY+0x1a0>
// 219: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 21d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021f:  R_X86_64_64  PyExc_SystemError
// 227: 48 8b 30                      movq    (%rax), %rsi
// 22a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000022c:  R_X86_64_64  .rodata.str1.1+0x39
// 234: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000236:  R_X86_64_64  _PyErr_SetString
// 23e: 48 89 ef                      movq    %rbp, %rdi
// 241: ff d0                         callq   *%rax
// 243: 49 29 dc                      subq    %rbx, %r12
// 246: 49 83 c4 b8                   addq    $-0x48, %r12
// 24a: 49 c1 ec 03                   shrq    $0x3, %r12
// 24e: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 252: 31 c0                         xorl    %eax, %eax
// 254: 48 83 c4 18                   addq    $0x18, %rsp
// 258: 5b                            popq    %rbx
// 259: 41 5c                         popq    %r12
// 25b: 41 5d                         popq    %r13
// 25d: 41 5e                         popq    %r14
// 25f: 41 5f                         popq    %r15
// 261: 5d                            popq    %rbp
// 262: c3                            retq
// 263: 49 8b 45 00                   movq    (%r13), %rax
// 267: 48 85 c0                      testq   %rax, %rax
// 26a: 7f 22                         jg      0x28e <_JIT_ENTRY+0x28e>
// 26c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000026e:  R_X86_64_64  .rodata.str1.1
// 276: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000278:  R_X86_64_64  _Py_NegativeRefcount
// 280: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 285: 4c 89 ea                      movq    %r13, %rdx
// 288: ff d0                         callq   *%rax
// 28a: 49 8b 45 00                   movq    (%r13), %rax
// 28e: 85 c0                         testl   %eax, %eax
// 290: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 295: 78 21                         js      0x2b8 <_JIT_ENTRY+0x2b8>
// 297: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000299:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a1: ff d0                         callq   *%rax
// 2a3: 49 ff 4d 00                   decq    (%r13)
// 2a7: 75 0f                         jne     0x2b8 <_JIT_ENTRY+0x2b8>
// 2a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ab:  R_X86_64_64  _Py_Dealloc
// 2b3: 4c 89 ef                      movq    %r13, %rdi
// 2b6: ff d0                         callq   *%rax
// 2b8: 48 8b 74 24 08                movq    0x8(%rsp), %rsi
// 2bd: 48 85 f6                      testq   %rsi, %rsi
// 2c0: 74 81                         je      0x243 <_JIT_ENTRY+0x243>
// 2c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c4:  R_X86_64_64  _JIT_OPARG
// 2cc: 89 c1                         movl    %eax, %ecx
// 2ce: 0f b7 d0                      movzwl  %ax, %edx
// 2d1: 83 e0 01                      andl    $0x1, %eax
// 2d4: f7 d1                         notl    %ecx
// 2d6: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 2dc: 48 63 c9                      movslq  %ecx, %rcx
// 2df: 48 01 c1                      addq    %rax, %rcx
// 2e2: 49 89 34 cf                   movq    %rsi, (%r15,%rcx,8)
// 2e6: 48 29 d0                      subq    %rdx, %rax
// 2e9: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 2ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ef:  R_X86_64_64  _JIT_CONTINUE
// 2f7: 48 89 df                      movq    %rbx, %rdi
// 2fa: 4c 89 f2                      movq    %r14, %rdx
// 2fd: 48 83 c4 18                   addq    $0x18, %rsp
// 301: 5b                            popq    %rbx
// 302: 41 5c                         popq    %r12
// 304: 41 5d                         popq    %r13
// 306: 41 5e                         popq    %r14
// 308: 41 5f                         popq    %r15
// 30a: 5d                            popq    %rbp
// 30b: ff e0                         jmpq    *%rax
// 30d: 
static const unsigned char _LOAD_ATTR_SLOTplus_BUILD_CONST_KEY_MAP_code_body[782] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x34, 0x04, 0x4d, 0x85, 0xf6, 0x74, 0x1c, 0x48, 0x89, 0xd5, 0x41, 0x8b, 0x06, 0xff, 0xc0, 0x75, 0x3f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4e, 0x85, 0xc0, 0x79, 0x70, 0xe9, 0x8c, 0x00, 0x00, 0x00, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xdd, 0x01, 0x00, 0x00, 0x41, 0x89, 0x06, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x77, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc8, 0x83, 0xe0, 0x01, 0x4d, 0x8b, 0x6c, 0xc7, 0xf8, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x55, 0x08, 0x0f, 0x85, 0x02, 0x01, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x49, 0x39, 0x55, 0x10, 0x0f, 0x85, 0xeb, 0x00, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x10, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x48, 0x01, 0xc1, 0x4d, 0x8d, 0x24, 0xcf, 0x49, 0x8d, 0x7d, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf0, 0x49, 0xff, 0xc6, 0xeb, 0x18, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xce, 0x49, 0x83, 0xfe, 0x01, 0x0f, 0x8e, 0xb6, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x46, 0xfe, 0x49, 0x8b, 0x2c, 0xc4, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x4d, 0x8d, 0x24, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x74, 0x24, 0x08, 0x48, 0x85, 0xf6, 0x74, 0x81, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0x0f, 0xb7, 0xd0, 0x83, 0xe0, 0x01, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x48, 0x01, 0xc1, 0x49, 0x89, 0x34, 0xcf, 0x48, 0x29, 0xd0, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_ATTR_SLOTplus_BUILD_CONST_KEY_MAP_code_holes[28] = {
    {0x1a, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5e, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xdc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x159, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x20d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x22c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x236, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x26e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x278, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x299, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2c4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2ef, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _LOAD_ATTR_SLOTplus_BUILD_CONST_KEY_MAP_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_BUILD_CONST_KEY_MAP_data_holes[1];

// _LOAD_ATTR_SLOTplus_BUILD_LIST
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_BUILD_LIST.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f6                      movq    %rsi, %r14
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 74 1d                         je      0x46 <_JIT_ENTRY+0x46>
// 29: 49 89 d7                      movq    %rdx, %r15
// 2c: 41 8b 45 00                   movl    (%r13), %eax
// 30: ff c0                         incl    %eax
// 32: 75 3f                         jne     0x73 <_JIT_ENTRY+0x73>
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 4f                         jle     0x8c <_JIT_ENTRY+0x8c>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 71                         jns     0xb2 <_JIT_ENTRY+0xb2>
// 41: e9 82 00 00 00                jmp     0xc8 <_JIT_ENTRY+0xc8>
// 46: 49 29 de                      subq    %rbx, %r14
// 49: 49 83 c6 b8                   addq    $-0x48, %r14
// 4d: 49 c1 ee 03                   shrq    $0x3, %r14
// 51: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 55: 48 8b 03                      movq    (%rbx), %rax
// 58: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005a:  R_X86_64_64  _JIT_TARGET
// 62: 89 c9                         movl    %ecx, %ecx
// 64: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 68: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 6e: e9 e6 00 00 00                jmp     0x159 <_JIT_ENTRY+0x159>
// 73: 41 89 45 00                   movl    %eax, (%r13)
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 81: ff d0                         callq   *%rax
// 83: 49 8b 04 24                   movq    (%r12), %rax
// 87: 48 85 c0                      testq   %rax, %rax
// 8a: 7f b1                         jg      0x3d <_JIT_ENTRY+0x3d>
// 8c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008e:  R_X86_64_64  .rodata.str1.1
// 96: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000098:  R_X86_64_64  _Py_NegativeRefcount
// a0: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a5: 4c 89 e2                      movq    %r12, %rdx
// a8: ff d0                         callq   *%rax
// aa: 49 8b 04 24                   movq    (%r12), %rax
// ae: 85 c0                         testl   %eax, %eax
// b0: 78 16                         js      0xc8 <_JIT_ENTRY+0xc8>
// b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: ff d0                         callq   *%rax
// be: 49 ff 0c 24                   decq    (%r12)
// c2: 0f 84 9b 00 00 00             je      0x163 <_JIT_ENTRY+0x163>
// c8: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ce:  R_X86_64_64  _JIT_OPARG
// d6: a8 01                         testb   $0x1, %al
// d8: 74 07                         je      0xe1 <_JIT_ENTRY+0xe1>
// da: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// e1: 0f b7 f0                      movzwl  %ax, %esi
// e4: 83 e0 01                      andl    $0x1, %eax
// e7: 48 29 f0                      subq    %rsi, %rax
// ea: 4d 8d 24 c6                   leaq    (%r14,%rax,8), %r12
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _PyList_FromArraySteal
// f8: 4c 89 e7                      movq    %r12, %rdi
// fb: ff d0                         callq   *%rax
// fd: 48 85 c0                      testq   %rax, %rax
// 100: 74 46                         je      0x148 <_JIT_ENTRY+0x148>
// 102: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000104:  R_X86_64_64  _JIT_OPARG
// 10c: 0f b7 d1                      movzwl  %cx, %edx
// 10f: 0f b7 f1                      movzwl  %cx, %esi
// 112: 83 e1 01                      andl    $0x1, %ecx
// 115: bf 01 00 00 00                movl    $0x1, %edi
// 11a: 29 f7                         subl    %esi, %edi
// 11c: 48 63 f7                      movslq  %edi, %rsi
// 11f: 48 01 ce                      addq    %rcx, %rsi
// 122: 48 29 d1                      subq    %rdx, %rcx
// 125: 49 89 04 ce                   movq    %rax, (%r14,%rcx,8)
// 129: 49 8d 34 f6                   leaq    (%r14,%rsi,8), %rsi
// 12d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012f:  R_X86_64_64  _JIT_CONTINUE
// 137: 48 89 df                      movq    %rbx, %rdi
// 13a: 4c 89 fa                      movq    %r15, %rdx
// 13d: 5b                            popq    %rbx
// 13e: 41 5c                         popq    %r12
// 140: 41 5d                         popq    %r13
// 142: 41 5e                         popq    %r14
// 144: 41 5f                         popq    %r15
// 146: ff e0                         jmpq    *%rax
// 148: 49 29 dc                      subq    %rbx, %r12
// 14b: 49 83 c4 b8                   addq    $-0x48, %r12
// 14f: 49 c1 ec 03                   shrq    $0x3, %r12
// 153: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 157: 31 c0                         xorl    %eax, %eax
// 159: 5b                            popq    %rbx
// 15a: 41 5c                         popq    %r12
// 15c: 41 5d                         popq    %r13
// 15e: 41 5e                         popq    %r14
// 160: 41 5f                         popq    %r15
// 162: c3                            retq
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_Dealloc
// 16d: 4c 89 e7                      movq    %r12, %rdi
// 170: ff d0                         callq   *%rax
// 172: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 176: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000178:  R_X86_64_64  _JIT_OPARG
// 180: a8 01                         testb   $0x1, %al
// 182: 0f 85 52 ff ff ff             jne     0xda <_JIT_ENTRY+0xda>
// 188: e9 54 ff ff ff                jmp     0xe1 <_JIT_ENTRY+0xe1>
// 18d: 
static const unsigned char _LOAD_ATTR_SLOTplus_BUILD_LIST_code_body[398] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1d, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x3f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4f, 0x85, 0xc0, 0x79, 0x71, 0xe9, 0x82, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xe6, 0x00, 0x00, 0x00, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x9b, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0x83, 0xe0, 0x01, 0x48, 0x29, 0xf0, 0x4d, 0x8d, 0x24, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x46, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x0f, 0xb7, 0xf1, 0x83, 0xe1, 0x01, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x29, 0xf7, 0x48, 0x63, 0xf7, 0x48, 0x01, 0xce, 0x48, 0x29, 0xd1, 0x49, 0x89, 0x04, 0xce, 0x49, 0x8d, 0x34, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x52, 0xff, 0xff, 0xff, 0xe9, 0x54, 0xff, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_BUILD_LIST_code_holes[13] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyList_FromArraySteal, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x12f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x178, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_BUILD_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_BUILD_LIST_data_holes[1];

// _LOAD_ATTR_SLOTplus_BUILD_MAP
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_BUILD_MAP.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 4d 8b 3c 04                   movq    (%r12,%rax), %r15
// 26: 4d 85 ff                      testq   %r15, %r15
// 29: 74 22                         je      0x4d <_JIT_ENTRY+0x4d>
// 2b: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 30: 48 89 3c 24                   movq    %rdi, (%rsp)
// 34: 41 8b 07                      movl    (%r15), %eax
// 37: ff c0                         incl    %eax
// 39: 75 3f                         jne     0x7a <_JIT_ENTRY+0x7a>
// 3b: 49 8b 04 24                   movq    (%r12), %rax
// 3f: 48 85 c0                      testq   %rax, %rax
// 42: 7e 4e                         jle     0x92 <_JIT_ENTRY+0x92>
// 44: 85 c0                         testl   %eax, %eax
// 46: 79 70                         jns     0xb8 <_JIT_ENTRY+0xb8>
// 48: e9 81 00 00 00                jmp     0xce <_JIT_ENTRY+0xce>
// 4d: 49 29 fe                      subq    %rdi, %r14
// 50: 49 83 c6 b8                   addq    $-0x48, %r14
// 54: 49 c1 ee 03                   shrq    $0x3, %r14
// 58: 44 89 77 40                   movl    %r14d, 0x40(%rdi)
// 5c: 48 8b 07                      movq    (%rdi), %rax
// 5f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000061:  R_X86_64_64  _JIT_TARGET
// 69: 89 c9                         movl    %ecx, %ecx
// 6b: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 6f: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 75: e9 b1 01 00 00                jmp     0x22b <_JIT_ENTRY+0x22b>
// 7a: 41 89 07                      movl    %eax, (%r15)
// 7d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007f:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 87: ff d0                         callq   *%rax
// 89: 49 8b 04 24                   movq    (%r12), %rax
// 8d: 48 85 c0                      testq   %rax, %rax
// 90: 7f b2                         jg      0x44 <_JIT_ENTRY+0x44>
// 92: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000094:  R_X86_64_64  .rodata.str1.1
// 9c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009e:  R_X86_64_64  _Py_NegativeRefcount
// a6: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// ab: 4c 89 e2                      movq    %r12, %rdx
// ae: ff d0                         callq   *%rax
// b0: 49 8b 04 24                   movq    (%r12), %rax
// b4: 85 c0                         testl   %eax, %eax
// b6: 78 16                         js      0xce <_JIT_ENTRY+0xce>
// b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ba:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c2: ff d0                         callq   *%rax
// c4: 49 ff 0c 24                   decq    (%r12)
// c8: 0f 84 6c 01 00 00             je      0x23a <_JIT_ENTRY+0x23a>
// ce: 4d 89 7e f8                   movq    %r15, -0x8(%r14)
// d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d4:  R_X86_64_64  _JIT_OPARG
// dc: a8 01                         testb   $0x1, %al
// de: 74 07                         je      0xe7 <_JIT_ENTRY+0xe7>
// e0: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// e7: 89 c1                         movl    %eax, %ecx
// e9: 83 e1 01                      andl    $0x1, %ecx
// ec: 0f b7 d8                      movzwl  %ax, %ebx
// ef: 89 da                         movl    %ebx, %edx
// f1: f7 da                         negl    %edx
// f3: 01 d2                         addl    %edx, %edx
// f5: 48 63 d2                      movslq  %edx, %rdx
// f8: 48 09 ca                      orq     %rcx, %rdx
// fb: 4d 8d 24 d6                   leaq    (%r14,%rdx,8), %r12
// ff: 49 8d 14 d6                   leaq    (%r14,%rdx,8), %rdx
// 103: 48 83 c2 08                   addq    $0x8, %rdx
// 107: 44 0f b7 c0                   movzwl  %ax, %r8d
// 10b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010d:  R_X86_64_64  _PyDict_FromItems
// 115: be 02 00 00 00                movl    $0x2, %esi
// 11a: b9 02 00 00 00                movl    $0x2, %ecx
// 11f: 4c 89 e7                      movq    %r12, %rdi
// 122: ff d0                         callq   *%rax
// 124: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 129: 01 db                         addl    %ebx, %ebx
// 12b: 85 db                         testl   %ebx, %ebx
// 12d: 0f 8e 83 00 00 00             jle     0x1b6 <_JIT_ENTRY+0x1b6>
// 133: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000135:  R_X86_64_64  _JIT_OPARG
// 13d: 0f b7 c0                      movzwl  %ax, %eax
// 140: 4c 8d 2c 00                   leaq    (%rax,%rax), %r13
// 144: 49 ff c5                      incq    %r13
// 147: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000149:  R_X86_64_64  .rodata.str1.1
// 151: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000153:  R_X86_64_64  _Py_NegativeRefcount
// 15b: eb 0c                         jmp     0x169 <_JIT_ENTRY+0x169>
// 15d: 0f 1f 00                      nopl    (%rax)
// 160: 49 ff cd                      decq    %r13
// 163: 49 83 fd 01                   cmpq    $0x1, %r13
// 167: 7e 4d                         jle     0x1b6 <_JIT_ENTRY+0x1b6>
// 169: 41 8d 45 fe                   leal    -0x2(%r13), %eax
// 16d: 4d 8b 3c c4                   movq    (%r12,%rax,8), %r15
// 171: 49 8b 07                      movq    (%r15), %rax
// 174: 48 85 c0                      testq   %rax, %rax
// 177: 7e 07                         jle     0x180 <_JIT_ENTRY+0x180>
// 179: 85 c0                         testl   %eax, %eax
// 17b: 78 e3                         js      0x160 <_JIT_ENTRY+0x160>
// 17d: eb 15                         jmp     0x194 <_JIT_ENTRY+0x194>
// 17f: 90                            nop
// 180: 48 89 ef                      movq    %rbp, %rdi
// 183: be 7b 05 00 00                movl    $0x57b, %esi            # imm = 0x57B
// 188: 4c 89 fa                      movq    %r15, %rdx
// 18b: ff d3                         callq   *%rbx
// 18d: 49 8b 07                      movq    (%r15), %rax
// 190: 85 c0                         testl   %eax, %eax
// 192: 78 cc                         js      0x160 <_JIT_ENTRY+0x160>
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 19e: ff d0                         callq   *%rax
// 1a0: 49 ff 0f                      decq    (%r15)
// 1a3: 75 bb                         jne     0x160 <_JIT_ENTRY+0x160>
// 1a5: 4c 89 ff                      movq    %r15, %rdi
// 1a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001aa:  R_X86_64_64  _Py_Dealloc
// 1b2: ff d0                         callq   *%rax
// 1b4: eb aa                         jmp     0x160 <_JIT_ENTRY+0x160>
// 1b6: 48 8b 74 24 10                movq    0x10(%rsp), %rsi
// 1bb: 48 85 f6                      testq   %rsi, %rsi
// 1be: 74 56                         je      0x216 <_JIT_ENTRY+0x216>
// 1c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c2:  R_X86_64_64  _JIT_OPARG
// 1ca: 0f b7 c8                      movzwl  %ax, %ecx
// 1cd: 83 e0 01                      andl    $0x1, %eax
// 1d0: 89 ca                         movl    %ecx, %edx
// 1d2: f7 da                         negl    %edx
// 1d4: 01 d2                         addl    %edx, %edx
// 1d6: 48 63 d2                      movslq  %edx, %rdx
// 1d9: 48 09 c2                      orq     %rax, %rdx
// 1dc: 49 89 34 d6                   movq    %rsi, (%r14,%rdx,8)
// 1e0: 01 c9                         addl    %ecx, %ecx
// 1e2: ba 01 00 00 00                movl    $0x1, %edx
// 1e7: 29 ca                         subl    %ecx, %edx
// 1e9: 48 63 ca                      movslq  %edx, %rcx
// 1ec: 48 01 c1                      addq    %rax, %rcx
// 1ef: 49 8d 34 ce                   leaq    (%r14,%rcx,8), %rsi
// 1f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f5:  R_X86_64_64  _JIT_CONTINUE
// 1fd: 48 8b 3c 24                   movq    (%rsp), %rdi
// 201: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 206: 48 83 c4 18                   addq    $0x18, %rsp
// 20a: 5b                            popq    %rbx
// 20b: 41 5c                         popq    %r12
// 20d: 41 5d                         popq    %r13
// 20f: 41 5e                         popq    %r14
// 211: 41 5f                         popq    %r15
// 213: 5d                            popq    %rbp
// 214: ff e0                         jmpq    *%rax
// 216: 48 8b 04 24                   movq    (%rsp), %rax
// 21a: 49 29 c4                      subq    %rax, %r12
// 21d: 49 83 c4 b8                   addq    $-0x48, %r12
// 221: 49 c1 ec 03                   shrq    $0x3, %r12
// 225: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 229: 31 c0                         xorl    %eax, %eax
// 22b: 48 83 c4 18                   addq    $0x18, %rsp
// 22f: 5b                            popq    %rbx
// 230: 41 5c                         popq    %r12
// 232: 41 5d                         popq    %r13
// 234: 41 5e                         popq    %r14
// 236: 41 5f                         popq    %r15
// 238: 5d                            popq    %rbp
// 239: c3                            retq
// 23a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023c:  R_X86_64_64  _Py_Dealloc
// 244: 4c 89 e7                      movq    %r12, %rdi
// 247: ff d0                         callq   *%rax
// 249: 4d 89 7e f8                   movq    %r15, -0x8(%r14)
// 24d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024f:  R_X86_64_64  _JIT_OPARG
// 257: a8 01                         testb   $0x1, %al
// 259: 0f 85 81 fe ff ff             jne     0xe0 <_JIT_ENTRY+0xe0>
// 25f: e9 83 fe ff ff                jmp     0xe7 <_JIT_ENTRY+0xe7>
// 264: 
static const unsigned char _LOAD_ATTR_SLOTplus_BUILD_MAP_code_body[613] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x3c, 0x04, 0x4d, 0x85, 0xff, 0x74, 0x22, 0x48, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x3c, 0x24, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x75, 0x3f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4e, 0x85, 0xc0, 0x79, 0x70, 0xe9, 0x81, 0x00, 0x00, 0x00, 0x49, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xb1, 0x01, 0x00, 0x00, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x6c, 0x01, 0x00, 0x00, 0x4d, 0x89, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0x83, 0xe1, 0x01, 0x0f, 0xb7, 0xd8, 0x89, 0xda, 0xf7, 0xda, 0x01, 0xd2, 0x48, 0x63, 0xd2, 0x48, 0x09, 0xca, 0x4d, 0x8d, 0x24, 0xd6, 0x49, 0x8d, 0x14, 0xd6, 0x48, 0x83, 0xc2, 0x08, 0x44, 0x0f, 0xb7, 0xc0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x00, 0x00, 0x00, 0xb9, 0x02, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x01, 0xdb, 0x85, 0xdb, 0x0f, 0x8e, 0x83, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4c, 0x8d, 0x2c, 0x00, 0x49, 0xff, 0xc5, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0c, 0x0f, 0x1f, 0x00, 0x49, 0xff, 0xcd, 0x49, 0x83, 0xfd, 0x01, 0x7e, 0x4d, 0x41, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x3c, 0xc4, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x15, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x7b, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd3, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xcc, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0xbb, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xaa, 0x48, 0x8b, 0x74, 0x24, 0x10, 0x48, 0x85, 0xf6, 0x74, 0x56, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x83, 0xe0, 0x01, 0x89, 0xca, 0xf7, 0xda, 0x01, 0xd2, 0x48, 0x63, 0xd2, 0x48, 0x09, 0xc2, 0x49, 0x89, 0x34, 0xd6, 0x01, 0xc9, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x48, 0x01, 0xc1, 0x49, 0x8d, 0x34, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x81, 0xfe, 0xff, 0xff, 0xe9, 0x83, 0xfe, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_BUILD_MAP_code_holes[18] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x94, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x149, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1aa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x23c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_BUILD_MAP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_BUILD_MAP_data_holes[1];

// _LOAD_ATTR_SLOTplus_BUILD_SET
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_BUILD_SET.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 fd                      movq    %rdi, %r13
// 14: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 18: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001a:  R_X86_64_64  _JIT_OPERAND
// 22: 0f b7 c0                      movzwl  %ax, %eax
// 25: 49 8b 1c 04                   movq    (%r12,%rax), %rbx
// 29: 48 85 db                      testq   %rbx, %rbx
// 2c: 74 1b                         je      0x49 <_JIT_ENTRY+0x49>
// 2e: 48 89 d5                      movq    %rdx, %rbp
// 31: 8b 03                         movl    (%rbx), %eax
// 33: ff c0                         incl    %eax
// 35: 75 40                         jne     0x77 <_JIT_ENTRY+0x77>
// 37: 49 8b 04 24                   movq    (%r12), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 4e                         jle     0x8e <_JIT_ENTRY+0x8e>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 70                         jns     0xb4 <_JIT_ENTRY+0xb4>
// 44: e9 81 00 00 00                jmp     0xca <_JIT_ENTRY+0xca>
// 49: 4d 29 ee                      subq    %r13, %r14
// 4c: 49 83 c6 b8                   addq    $-0x48, %r14
// 50: 49 c1 ee 03                   shrq    $0x3, %r14
// 54: 45 89 75 40                   movl    %r14d, 0x40(%r13)
// 58: 49 8b 45 00                   movq    (%r13), %rax
// 5c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005e:  R_X86_64_64  _JIT_TARGET
// 66: 89 c9                         movl    %ecx, %ecx
// 68: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 6c: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 72: e9 fd 01 00 00                jmp     0x274 <_JIT_ENTRY+0x274>
// 77: 89 03                         movl    %eax, (%rbx)
// 79: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007b:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 83: ff d0                         callq   *%rax
// 85: 49 8b 04 24                   movq    (%r12), %rax
// 89: 48 85 c0                      testq   %rax, %rax
// 8c: 7f b2                         jg      0x40 <_JIT_ENTRY+0x40>
// 8e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000090:  R_X86_64_64  .rodata.str1.1
// 98: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009a:  R_X86_64_64  _Py_NegativeRefcount
// a2: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a7: 4c 89 e2                      movq    %r12, %rdx
// aa: ff d0                         callq   *%rax
// ac: 49 8b 04 24                   movq    (%r12), %rax
// b0: 85 c0                         testl   %eax, %eax
// b2: 78 16                         js      0xca <_JIT_ENTRY+0xca>
// b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// be: ff d0                         callq   *%rax
// c0: 49 ff 0c 24                   decq    (%r12)
// c4: 0f 84 04 02 00 00             je      0x2ce <_JIT_ENTRY+0x2ce>
// ca: 49 89 5e f8                   movq    %rbx, -0x8(%r14)
// ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d0:  R_X86_64_64  _JIT_OPARG
// d8: a8 01                         testb   $0x1, %al
// da: 74 07                         je      0xe3 <_JIT_ENTRY+0xe3>
// dc: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// e3: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 00000000000000e5:  R_X86_64_64  _JIT_OPARG
// ed: 44 89 fb                      movl    %r15d, %ebx
// f0: 83 e3 01                      andl    $0x1, %ebx
// f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f5:  R_X86_64_64  PySet_New
// fd: 31 ff                         xorl    %edi, %edi
// ff: ff d0                         callq   *%rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 0f 84 f1 00 00 00             je      0x1fb <_JIT_ENTRY+0x1fb>
// 10a: 49 89 c4                      movq    %rax, %r12
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _JIT_OPARG
// 117: 66 85 c0                      testw   %ax, %ax
// 11a: 0f 84 63 01 00 00             je      0x283 <_JIT_ENTRY+0x283>
// 120: 4c 89 24 24                   movq    %r12, (%rsp)
// 124: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 129: 4c 89 6c 24 10                movq    %r13, 0x10(%rsp)
// 12e: 41 0f b7 c7                   movzwl  %r15w, %eax
// 132: 48 29 c3                      subq    %rax, %rbx
// 135: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000137:  R_X86_64_64  _JIT_OPARG
// 13f: 0f b7 c0                      movzwl  %ax, %eax
// 142: 83 f8 02                      cmpl    $0x2, %eax
// 145: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 14b: 44 0f 43 e8                   cmovael %eax, %r13d
// 14f: 49 8d 1c de                   leaq    (%r14,%rbx,8), %rbx
// 153: 45 31 e4                      xorl    %r12d, %r12d
// 156: 31 ed                         xorl    %ebp, %ebp
// 158: eb 12                         jmp     0x16c <_JIT_ENTRY+0x16c>
// 15a: 66 0f 1f 44 00 00             nopw    (%rax,%rax)
// 160: 49 ff c4                      incq    %r12
// 163: 4d 39 e5                      cmpq    %r12, %r13
// 166: 0f 84 95 00 00 00             je      0x201 <_JIT_ENTRY+0x201>
// 16c: 4e 8b 3c e3                   movq    (%rbx,%r12,8), %r15
// 170: 85 ed                         testl   %ebp, %ebp
// 172: 74 1c                         je      0x190 <_JIT_ENTRY+0x190>
// 174: 49 8b 07                      movq    (%r15), %rax
// 177: 48 85 c0                      testq   %rax, %rax
// 17a: 7e 31                         jle     0x1ad <_JIT_ENTRY+0x1ad>
// 17c: 85 c0                         testl   %eax, %eax
// 17e: 78 e0                         js      0x160 <_JIT_ENTRY+0x160>
// 180: eb 50                         jmp     0x1d2 <_JIT_ENTRY+0x1d2>
// 182: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// 190: 48 8b 3c 24                   movq    (%rsp), %rdi
// 194: 4c 89 fe                      movq    %r15, %rsi
// 197: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000199:  R_X86_64_64  PySet_Add
// 1a1: ff d0                         callq   *%rax
// 1a3: 89 c5                         movl    %eax, %ebp
// 1a5: 49 8b 07                      movq    (%r15), %rax
// 1a8: 48 85 c0                      testq   %rax, %rax
// 1ab: 7f cf                         jg      0x17c <_JIT_ENTRY+0x17c>
// 1ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001af:  R_X86_64_64  .rodata.str1.1
// 1b7: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// 1bc: 4c 89 fa                      movq    %r15, %rdx
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  _Py_NegativeRefcount
// 1c9: ff d0                         callq   *%rax
// 1cb: 49 8b 07                      movq    (%r15), %rax
// 1ce: 85 c0                         testl   %eax, %eax
// 1d0: 78 8e                         js      0x160 <_JIT_ENTRY+0x160>
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1dc: ff d0                         callq   *%rax
// 1de: 49 ff 0f                      decq    (%r15)
// 1e1: 0f 85 79 ff ff ff             jne     0x160 <_JIT_ENTRY+0x160>
// 1e7: 4c 89 ff                      movq    %r15, %rdi
// 1ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ec:  R_X86_64_64  _Py_Dealloc
// 1f4: ff d0                         callq   *%rax
// 1f6: e9 65 ff ff ff                jmp     0x160 <_JIT_ENTRY+0x160>
// 1fb: 49 8d 1c de                   leaq    (%r14,%rbx,8), %rbx
// 1ff: eb 62                         jmp     0x263 <_JIT_ENTRY+0x263>
// 201: 85 ed                         testl   %ebp, %ebp
// 203: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 208: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 20d: 4c 8b 24 24                   movq    (%rsp), %r12
// 211: 74 70                         je      0x283 <_JIT_ENTRY+0x283>
// 213: 49 8b 04 24                   movq    (%r12), %rax
// 217: 48 85 c0                      testq   %rax, %rax
// 21a: 7f 22                         jg      0x23e <_JIT_ENTRY+0x23e>
// 21c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000021e:  R_X86_64_64  .rodata.str1.1
// 226: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 22b: 4c 89 e2                      movq    %r12, %rdx
// 22e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000230:  R_X86_64_64  _Py_NegativeRefcount
// 238: ff d0                         callq   *%rax
// 23a: 49 8b 04 24                   movq    (%r12), %rax
// 23e: 85 c0                         testl   %eax, %eax
// 240: 78 21                         js      0x263 <_JIT_ENTRY+0x263>
// 242: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000244:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 24c: ff d0                         callq   *%rax
// 24e: 49 ff 0c 24                   decq    (%r12)
// 252: 75 0f                         jne     0x263 <_JIT_ENTRY+0x263>
// 254: 4c 89 e7                      movq    %r12, %rdi
// 257: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000259:  R_X86_64_64  _Py_Dealloc
// 261: ff d0                         callq   *%rax
// 263: 4c 29 eb                      subq    %r13, %rbx
// 266: 48 83 c3 b8                   addq    $-0x48, %rbx
// 26a: 48 c1 eb 03                   shrq    $0x3, %rbx
// 26e: 41 89 5d 40                   movl    %ebx, 0x40(%r13)
// 272: 31 c0                         xorl    %eax, %eax
// 274: 48 83 c4 18                   addq    $0x18, %rsp
// 278: 5b                            popq    %rbx
// 279: 41 5c                         popq    %r12
// 27b: 41 5d                         popq    %r13
// 27d: 41 5e                         popq    %r14
// 27f: 41 5f                         popq    %r15
// 281: 5d                            popq    %rbp
// 282: c3                            retq
// 283: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000285:  R_X86_64_64  _JIT_OPARG
// 28d: 0f b7 c8                      movzwl  %ax, %ecx
// 290: 0f b7 d0                      movzwl  %ax, %edx
// 293: 83 e0 01                      andl    $0x1, %eax
// 296: be 01 00 00 00                movl    $0x1, %esi
// 29b: 29 d6                         subl    %edx, %esi
// 29d: 48 63 d6                      movslq  %esi, %rdx
// 2a0: 48 01 c2                      addq    %rax, %rdx
// 2a3: 48 29 c8                      subq    %rcx, %rax
// 2a6: 4d 89 24 c6                   movq    %r12, (%r14,%rax,8)
// 2aa: 49 8d 34 d6                   leaq    (%r14,%rdx,8), %rsi
// 2ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b0:  R_X86_64_64  _JIT_CONTINUE
// 2b8: 4c 89 ef                      movq    %r13, %rdi
// 2bb: 48 89 ea                      movq    %rbp, %rdx
// 2be: 48 83 c4 18                   addq    $0x18, %rsp
// 2c2: 5b                            popq    %rbx
// 2c3: 41 5c                         popq    %r12
// 2c5: 41 5d                         popq    %r13
// 2c7: 41 5e                         popq    %r14
// 2c9: 41 5f                         popq    %r15
// 2cb: 5d                            popq    %rbp
// 2cc: ff e0                         jmpq    *%rax
// 2ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d0:  R_X86_64_64  _Py_Dealloc
// 2d8: 4c 89 e7                      movq    %r12, %rdi
// 2db: ff d0                         callq   *%rax
// 2dd: 49 89 5e f8                   movq    %rbx, -0x8(%r14)
// 2e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e3:  R_X86_64_64  _JIT_OPARG
// 2eb: a8 01                         testb   $0x1, %al
// 2ed: 0f 85 e9 fd ff ff             jne     0xdc <_JIT_ENTRY+0xdc>
// 2f3: e9 eb fd ff ff                jmp     0xe3 <_JIT_ENTRY+0xe3>
// 2f8: 
static const unsigned char _LOAD_ATTR_SLOTplus_BUILD_SET_code_body[761] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xfd, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8b, 0x1c, 0x04, 0x48, 0x85, 0xdb, 0x74, 0x1b, 0x48, 0x89, 0xd5, 0x8b, 0x03, 0xff, 0xc0, 0x75, 0x40, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4e, 0x85, 0xc0, 0x79, 0x70, 0xe9, 0x81, 0x00, 0x00, 0x00, 0x4d, 0x29, 0xee, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x75, 0x40, 0x49, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xfd, 0x01, 0x00, 0x00, 0x89, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x04, 0x02, 0x00, 0x00, 0x49, 0x89, 0x5e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x89, 0xfb, 0x83, 0xe3, 0x01, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xf1, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x63, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x24, 0x24, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x4c, 0x89, 0x6c, 0x24, 0x10, 0x41, 0x0f, 0xb7, 0xc7, 0x48, 0x29, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x49, 0x8d, 0x1c, 0xde, 0x45, 0x31, 0xe4, 0x31, 0xed, 0xeb, 0x12, 0x66, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x49, 0xff, 0xc4, 0x4d, 0x39, 0xe5, 0x0f, 0x84, 0x95, 0x00, 0x00, 0x00, 0x4e, 0x8b, 0x3c, 0xe3, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x31, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x50, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0xcf, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x8e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0x79, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x65, 0xff, 0xff, 0xff, 0x49, 0x8d, 0x1c, 0xde, 0xeb, 0x62, 0x85, 0xed, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x4c, 0x8b, 0x24, 0x24, 0x74, 0x70, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x29, 0xeb, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xd0, 0x83, 0xe0, 0x01, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x29, 0xd6, 0x48, 0x63, 0xd6, 0x48, 0x01, 0xc2, 0x48, 0x29, 0xc8, 0x4d, 0x89, 0x24, 0xc6, 0x49, 0x8d, 0x34, 0xd6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0x5e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0xe9, 0xfd, 0xff, 0xff, 0xe9, 0xeb, 0xfd, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_BUILD_SET_code_holes[25] = {
    {0x1a, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5e, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x90, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x137, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x199, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0x1af, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ec, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x230, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x244, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x259, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x285, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2b0, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2e3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_BUILD_SET_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_BUILD_SET_data_holes[1];

// _LOAD_ATTR_SLOTplus_BUILD_SLICE
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_BUILD_SLICE.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 49 89 ff                      movq    %rdi, %r15
// 14: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 18: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001a:  R_X86_64_64  _JIT_OPERAND
// 22: 0f b7 c0                      movzwl  %ax, %eax
// 25: 49 8b 1c 04                   movq    (%r12,%rax), %rbx
// 29: 48 85 db                      testq   %rbx, %rbx
// 2c: 74 1b                         je      0x49 <_JIT_ENTRY+0x49>
// 2e: 49 89 d5                      movq    %rdx, %r13
// 31: 8b 03                         movl    (%rbx), %eax
// 33: ff c0                         incl    %eax
// 35: 75 3f                         jne     0x76 <_JIT_ENTRY+0x76>
// 37: 49 8b 04 24                   movq    (%r12), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 4d                         jle     0x8d <_JIT_ENTRY+0x8d>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 6f                         jns     0xb3 <_JIT_ENTRY+0xb3>
// 44: e9 80 00 00 00                jmp     0xc9 <_JIT_ENTRY+0xc9>
// 49: 4d 29 fe                      subq    %r15, %r14
// 4c: 49 83 c6 b8                   addq    $-0x48, %r14
// 50: 49 c1 ee 03                   shrq    $0x3, %r14
// 54: 45 89 77 40                   movl    %r14d, 0x40(%r15)
// 58: 49 8b 07                      movq    (%r15), %rax
// 5b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005d:  R_X86_64_64  _JIT_TARGET
// 65: 89 c9                         movl    %ecx, %ecx
// 67: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 6b: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 71: e9 6e 02 00 00                jmp     0x2e4 <_JIT_ENTRY+0x2e4>
// 76: 89 03                         movl    %eax, (%rbx)
// 78: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007a:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 82: ff d0                         callq   *%rax
// 84: 49 8b 04 24                   movq    (%r12), %rax
// 88: 48 85 c0                      testq   %rax, %rax
// 8b: 7f b3                         jg      0x40 <_JIT_ENTRY+0x40>
// 8d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008f:  R_X86_64_64  .rodata.str1.1
// 97: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000099:  R_X86_64_64  _Py_NegativeRefcount
// a1: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a6: 4c 89 e2                      movq    %r12, %rdx
// a9: ff d0                         callq   *%rax
// ab: 49 8b 04 24                   movq    (%r12), %rax
// af: 85 c0                         testl   %eax, %eax
// b1: 78 16                         js      0xc9 <_JIT_ENTRY+0xc9>
// b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bd: ff d0                         callq   *%rax
// bf: 49 ff 0c 24                   decq    (%r12)
// c3: 0f 84 e2 00 00 00             je      0x1ab <_JIT_ENTRY+0x1ab>
// c9: 49 89 5e f8                   movq    %rbx, -0x8(%r14)
// cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cf:  R_X86_64_64  _JIT_OPARG
// d7: a8 01                         testb   $0x1, %al
// d9: 74 07                         je      0xe2 <_JIT_ENTRY+0xe2>
// db: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// e2: 66 83 f8 03                   cmpw    $0x3, %ax
// e6: 4c 89 3c 24                   movq    %r15, (%rsp)
// ea: 4c 89 6c 24 08                movq    %r13, 0x8(%rsp)
// ef: 75 17                         jne     0x108 <_JIT_ENTRY+0x108>
// f1: 89 c1                         movl    %eax, %ecx
// f3: 83 e1 01                      andl    $0x1, %ecx
// f6: 31 d2                         xorl    %edx, %edx
// f8: 66 83 f8 03                   cmpw    $0x3, %ax
// fc: 0f 94 c2                      sete    %dl
// ff: 48 29 d1                      subq    %rdx, %rcx
// 102: 4d 8b 24 ce                   movq    (%r14,%rcx,8), %r12
// 106: eb 03                         jmp     0x10b <_JIT_ENTRY+0x10b>
// 108: 45 31 e4                      xorl    %r12d, %r12d
// 10b: 89 c1                         movl    %eax, %ecx
// 10d: 83 e1 01                      andl    $0x1, %ecx
// 110: 31 d2                         xorl    %edx, %edx
// 112: 66 83 f8 03                   cmpw    $0x3, %ax
// 116: 0f 94 c2                      sete    %dl
// 119: b8 fe ff ff ff                movl    $0xfffffffe, %eax       # imm = 0xFFFFFFFE
// 11e: 29 d0                         subl    %edx, %eax
// 120: f7 d2                         notl    %edx
// 122: 48 63 da                      movslq  %edx, %rbx
// 125: 48 01 cb                      addq    %rcx, %rbx
// 128: 49 8b 2c de                   movq    (%r14,%rbx,8), %rbp
// 12c: 4c 63 e8                      movslq  %eax, %r13
// 12f: 49 01 cd                      addq    %rcx, %r13
// 132: 4f 8b 3c ee                   movq    (%r14,%r13,8), %r15
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PySlice_New
// 140: 4c 89 ff                      movq    %r15, %rdi
// 143: 48 89 ee                      movq    %rbp, %rsi
// 146: 4c 89 e2                      movq    %r12, %rdx
// 149: ff d0                         callq   *%rax
// 14b: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 150: 49 8b 07                      movq    (%r15), %rax
// 153: 48 85 c0                      testq   %rax, %rax
// 156: 7e 06                         jle     0x15e <_JIT_ENTRY+0x15e>
// 158: 85 c0                         testl   %eax, %eax
// 15a: 79 27                         jns     0x183 <_JIT_ENTRY+0x183>
// 15c: eb 36                         jmp     0x194 <_JIT_ENTRY+0x194>
// 15e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000160:  R_X86_64_64  .rodata.str1.1
// 168: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016a:  R_X86_64_64  _Py_NegativeRefcount
// 172: be 86 0c 00 00                movl    $0xc86, %esi            # imm = 0xC86
// 177: 4c 89 fa                      movq    %r15, %rdx
// 17a: ff d0                         callq   *%rax
// 17c: 49 8b 07                      movq    (%r15), %rax
// 17f: 85 c0                         testl   %eax, %eax
// 181: 78 11                         js      0x194 <_JIT_ENTRY+0x194>
// 183: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000185:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 18d: ff d0                         callq   *%rax
// 18f: 49 ff 0f                      decq    (%r15)
// 192: 74 41                         je      0x1d5 <_JIT_ENTRY+0x1d5>
// 194: 48 8b 45 00                   movq    (%rbp), %rax
// 198: 48 85 c0                      testq   %rax, %rax
// 19b: 7e 50                         jle     0x1ed <_JIT_ENTRY+0x1ed>
// 19d: 85 c0                         testl   %eax, %eax
// 19f: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 1a4: 79 72                         jns     0x218 <_JIT_ENTRY+0x218>
// 1a6: e9 8e 00 00 00                jmp     0x239 <_JIT_ENTRY+0x239>
// 1ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ad:  R_X86_64_64  _Py_Dealloc
// 1b5: 4c 89 e7                      movq    %r12, %rdi
// 1b8: ff d0                         callq   *%rax
// 1ba: 49 89 5e f8                   movq    %rbx, -0x8(%r14)
// 1be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c0:  R_X86_64_64  _JIT_OPARG
// 1c8: a8 01                         testb   $0x1, %al
// 1ca: 0f 85 0b ff ff ff             jne     0xdb <_JIT_ENTRY+0xdb>
// 1d0: e9 0d ff ff ff                jmp     0xe2 <_JIT_ENTRY+0xe2>
// 1d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d7:  R_X86_64_64  _Py_Dealloc
// 1df: 4c 89 ff                      movq    %r15, %rdi
// 1e2: ff d0                         callq   *%rax
// 1e4: 48 8b 45 00                   movq    (%rbp), %rax
// 1e8: 48 85 c0                      testq   %rax, %rax
// 1eb: 7f b0                         jg      0x19d <_JIT_ENTRY+0x19d>
// 1ed: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ef:  R_X86_64_64  .rodata.str1.1
// 1f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f9:  R_X86_64_64  _Py_NegativeRefcount
// 201: be 87 0c 00 00                movl    $0xc87, %esi            # imm = 0xC87
// 206: 48 89 ea                      movq    %rbp, %rdx
// 209: ff d0                         callq   *%rax
// 20b: 48 8b 45 00                   movq    (%rbp), %rax
// 20f: 85 c0                         testl   %eax, %eax
// 211: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 216: 78 21                         js      0x239 <_JIT_ENTRY+0x239>
// 218: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 222: ff d0                         callq   *%rax
// 224: 48 ff 4d 00                   decq    (%rbp)
// 228: 75 0f                         jne     0x239 <_JIT_ENTRY+0x239>
// 22a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022c:  R_X86_64_64  _Py_Dealloc
// 234: 48 89 ef                      movq    %rbp, %rdi
// 237: ff d0                         callq   *%rax
// 239: 4d 85 e4                      testq   %r12, %r12
// 23c: 74 47                         je      0x285 <_JIT_ENTRY+0x285>
// 23e: 49 8b 04 24                   movq    (%r12), %rax
// 242: 48 85 c0                      testq   %rax, %rax
// 245: 7e 06                         jle     0x24d <_JIT_ENTRY+0x24d>
// 247: 85 c0                         testl   %eax, %eax
// 249: 79 28                         jns     0x273 <_JIT_ENTRY+0x273>
// 24b: eb 38                         jmp     0x285 <_JIT_ENTRY+0x285>
// 24d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000024f:  R_X86_64_64  .rodata.str1.1+0x39
// 257: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000259:  R_X86_64_64  _Py_NegativeRefcount
// 261: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 266: 4c 89 e2                      movq    %r12, %rdx
// 269: ff d0                         callq   *%rax
// 26b: 49 8b 04 24                   movq    (%r12), %rax
// 26f: 85 c0                         testl   %eax, %eax
// 271: 78 12                         js      0x285 <_JIT_ENTRY+0x285>
// 273: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000275:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 27d: ff d0                         callq   *%rax
// 27f: 49 ff 0c 24                   decq    (%r12)
// 283: 74 33                         je      0x2b8 <_JIT_ENTRY+0x2b8>
// 285: 4b 8d 04 ee                   leaq    (%r14,%r13,8), %rax
// 289: 4d 85 ff                      testq   %r15, %r15
// 28c: 74 42                         je      0x2d0 <_JIT_ENTRY+0x2d0>
// 28e: 49 8d 34 de                   leaq    (%r14,%rbx,8), %rsi
// 292: 4c 89 38                      movq    %r15, (%rax)
// 295: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000297:  R_X86_64_64  _JIT_CONTINUE
// 29f: 48 8b 3c 24                   movq    (%rsp), %rdi
// 2a3: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2a8: 48 83 c4 18                   addq    $0x18, %rsp
// 2ac: 5b                            popq    %rbx
// 2ad: 41 5c                         popq    %r12
// 2af: 41 5d                         popq    %r13
// 2b1: 41 5e                         popq    %r14
// 2b3: 41 5f                         popq    %r15
// 2b5: 5d                            popq    %rbp
// 2b6: ff e0                         jmpq    *%rax
// 2b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ba:  R_X86_64_64  _Py_Dealloc
// 2c2: 4c 89 e7                      movq    %r12, %rdi
// 2c5: ff d0                         callq   *%rax
// 2c7: 4b 8d 04 ee                   leaq    (%r14,%r13,8), %rax
// 2cb: 4d 85 ff                      testq   %r15, %r15
// 2ce: 75 be                         jne     0x28e <_JIT_ENTRY+0x28e>
// 2d0: 48 8b 0c 24                   movq    (%rsp), %rcx
// 2d4: 48 29 c8                      subq    %rcx, %rax
// 2d7: 48 83 c0 b8                   addq    $-0x48, %rax
// 2db: 48 c1 e8 03                   shrq    $0x3, %rax
// 2df: 89 41 40                      movl    %eax, 0x40(%rcx)
// 2e2: 31 c0                         xorl    %eax, %eax
// 2e4: 48 83 c4 18                   addq    $0x18, %rsp
// 2e8: 5b                            popq    %rbx
// 2e9: 41 5c                         popq    %r12
// 2eb: 41 5d                         popq    %r13
// 2ed: 41 5e                         popq    %r14
// 2ef: 41 5f                         popq    %r15
// 2f1: 5d                            popq    %rbp
// 2f2: c3                            retq
// 2f3: 
static const unsigned char _LOAD_ATTR_SLOTplus_BUILD_SLICE_code_body[756] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xff, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8b, 0x1c, 0x04, 0x48, 0x85, 0xdb, 0x74, 0x1b, 0x49, 0x89, 0xd5, 0x8b, 0x03, 0xff, 0xc0, 0x75, 0x3f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4d, 0x85, 0xc0, 0x79, 0x6f, 0xe9, 0x80, 0x00, 0x00, 0x00, 0x4d, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x77, 0x40, 0x49, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x6e, 0x02, 0x00, 0x00, 0x89, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xe2, 0x00, 0x00, 0x00, 0x49, 0x89, 0x5e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x66, 0x83, 0xf8, 0x03, 0x4c, 0x89, 0x3c, 0x24, 0x4c, 0x89, 0x6c, 0x24, 0x08, 0x75, 0x17, 0x89, 0xc1, 0x83, 0xe1, 0x01, 0x31, 0xd2, 0x66, 0x83, 0xf8, 0x03, 0x0f, 0x94, 0xc2, 0x48, 0x29, 0xd1, 0x4d, 0x8b, 0x24, 0xce, 0xeb, 0x03, 0x45, 0x31, 0xe4, 0x89, 0xc1, 0x83, 0xe1, 0x01, 0x31, 0xd2, 0x66, 0x83, 0xf8, 0x03, 0x0f, 0x94, 0xc2, 0xb8, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xd0, 0xf7, 0xd2, 0x48, 0x63, 0xda, 0x48, 0x01, 0xcb, 0x49, 0x8b, 0x2c, 0xde, 0x4c, 0x63, 0xe8, 0x49, 0x01, 0xcd, 0x4f, 0x8b, 0x3c, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x48, 0x89, 0xee, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x86, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x41, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x50, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x79, 0x72, 0xe9, 0x8e, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0x5e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x0b, 0xff, 0xff, 0xff, 0xe9, 0x0d, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xb0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x87, 0x0c, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x74, 0x47, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x33, 0x4b, 0x8d, 0x04, 0xee, 0x4d, 0x85, 0xff, 0x74, 0x42, 0x49, 0x8d, 0x34, 0xde, 0x4c, 0x89, 0x38, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xee, 0x4d, 0x85, 0xff, 0x75, 0xbe, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x29, 0xc8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x41, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _LOAD_ATTR_SLOTplus_BUILD_SLICE_code_holes[24] = {
    {0x1a, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5d, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x99, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySlice_New, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x185, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1c0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ef, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x21a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x259, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x275, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x297, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2ba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_BUILD_SLICE_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_BUILD_SLICE_data_holes[1];

// _LOAD_ATTR_SLOTplus_BUILD_STRING
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_BUILD_STRING.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 4d 8b 3c 04                   movq    (%r12,%rax), %r15
// 26: 4d 85 ff                      testq   %r15, %r15
// 29: 74 22                         je      0x4d <_JIT_ENTRY+0x4d>
// 2b: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 30: 48 89 3c 24                   movq    %rdi, (%rsp)
// 34: 41 8b 07                      movl    (%r15), %eax
// 37: ff c0                         incl    %eax
// 39: 75 3f                         jne     0x7a <_JIT_ENTRY+0x7a>
// 3b: 49 8b 04 24                   movq    (%r12), %rax
// 3f: 48 85 c0                      testq   %rax, %rax
// 42: 7e 4e                         jle     0x92 <_JIT_ENTRY+0x92>
// 44: 85 c0                         testl   %eax, %eax
// 46: 79 70                         jns     0xb8 <_JIT_ENTRY+0xb8>
// 48: e9 81 00 00 00                jmp     0xce <_JIT_ENTRY+0xce>
// 4d: 49 29 fe                      subq    %rdi, %r14
// 50: 49 83 c6 b8                   addq    $-0x48, %r14
// 54: 49 c1 ee 03                   shrq    $0x3, %r14
// 58: 44 89 77 40                   movl    %r14d, 0x40(%rdi)
// 5c: 48 8b 07                      movq    (%rdi), %rax
// 5f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000061:  R_X86_64_64  _JIT_TARGET
// 69: 89 c9                         movl    %ecx, %ecx
// 6b: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 6f: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 75: e9 b9 01 00 00                jmp     0x233 <_JIT_ENTRY+0x233>
// 7a: 41 89 07                      movl    %eax, (%r15)
// 7d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007f:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 87: ff d0                         callq   *%rax
// 89: 49 8b 04 24                   movq    (%r12), %rax
// 8d: 48 85 c0                      testq   %rax, %rax
// 90: 7f b2                         jg      0x44 <_JIT_ENTRY+0x44>
// 92: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000094:  R_X86_64_64  .rodata.str1.1
// 9c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009e:  R_X86_64_64  _Py_NegativeRefcount
// a6: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// ab: 4c 89 e2                      movq    %r12, %rdx
// ae: ff d0                         callq   *%rax
// b0: 49 8b 04 24                   movq    (%r12), %rax
// b4: 85 c0                         testl   %eax, %eax
// b6: 78 16                         js      0xce <_JIT_ENTRY+0xce>
// b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ba:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c2: ff d0                         callq   *%rax
// c4: 49 ff 0c 24                   decq    (%r12)
// c8: 0f 84 74 01 00 00             je      0x242 <_JIT_ENTRY+0x242>
// ce: 4d 89 7e f8                   movq    %r15, -0x8(%r14)
// d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d4:  R_X86_64_64  _JIT_OPARG
// dc: a8 01                         testb   $0x1, %al
// de: 74 07                         je      0xe7 <_JIT_ENTRY+0xe7>
// e0: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// e7: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000000e9:  R_X86_64_64  _JIT_OPARG
// f1: 89 d8                         movl    %ebx, %eax
// f3: 83 e0 01                      andl    $0x1, %eax
// f6: 0f b7 d3                      movzwl  %bx, %edx
// f9: 48 29 d0                      subq    %rdx, %rax
// fc: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 100: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000102:  R_X86_64_64  _PyUnicode_JoinArray
// 10a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010c:  R_X86_64_64  _PyRuntime
// 114: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 11b: 4c 89 ee                      movq    %r13, %rsi
// 11e: ff d0                         callq   *%rax
// 120: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 125: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 12b: 0f 8e 95 00 00 00             jle     0x1c6 <_JIT_ENTRY+0x1c6>
// 131: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000133:  R_X86_64_64  _JIT_OPARG
// 13b: 44 0f b7 e0                   movzwl  %ax, %r12d
// 13f: 49 ff c4                      incq    %r12
// 142: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: eb 11                         jmp     0x169 <_JIT_ENTRY+0x169>
// 158: 0f 1f 84 00 00 00 00 00       nopl    (%rax,%rax)
// 160: 49 ff cc                      decq    %r12
// 163: 49 83 fc 01                   cmpq    $0x1, %r12
// 167: 7e 5d                         jle     0x1c6 <_JIT_ENTRY+0x1c6>
// 169: 41 8d 44 24 fe                leal    -0x2(%r12), %eax
// 16e: 4d 8b 7c c5 00                movq    (%r13,%rax,8), %r15
// 173: 49 8b 07                      movq    (%r15), %rax
// 176: 48 85 c0                      testq   %rax, %rax
// 179: 7e 15                         jle     0x190 <_JIT_ENTRY+0x190>
// 17b: 85 c0                         testl   %eax, %eax
// 17d: 78 e1                         js      0x160 <_JIT_ENTRY+0x160>
// 17f: eb 23                         jmp     0x1a4 <_JIT_ENTRY+0x1a4>
// 181: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// 190: 48 89 ef                      movq    %rbp, %rdi
// 193: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// 198: 4c 89 fa                      movq    %r15, %rdx
// 19b: ff d3                         callq   *%rbx
// 19d: 49 8b 07                      movq    (%r15), %rax
// 1a0: 85 c0                         testl   %eax, %eax
// 1a2: 78 bc                         js      0x160 <_JIT_ENTRY+0x160>
// 1a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ae: ff d0                         callq   *%rax
// 1b0: 49 ff 0f                      decq    (%r15)
// 1b3: 75 ab                         jne     0x160 <_JIT_ENTRY+0x160>
// 1b5: 4c 89 ff                      movq    %r15, %rdi
// 1b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ba:  R_X86_64_64  _Py_Dealloc
// 1c2: ff d0                         callq   *%rax
// 1c4: eb 9a                         jmp     0x160 <_JIT_ENTRY+0x160>
// 1c6: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 1cb: 48 85 ff                      testq   %rdi, %rdi
// 1ce: 74 4e                         je      0x21e <_JIT_ENTRY+0x21e>
// 1d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d2:  R_X86_64_64  _JIT_OPARG
// 1da: 0f b7 c8                      movzwl  %ax, %ecx
// 1dd: 0f b7 d0                      movzwl  %ax, %edx
// 1e0: 83 e0 01                      andl    $0x1, %eax
// 1e3: be 01 00 00 00                movl    $0x1, %esi
// 1e8: 29 d6                         subl    %edx, %esi
// 1ea: 48 63 d6                      movslq  %esi, %rdx
// 1ed: 48 01 c2                      addq    %rax, %rdx
// 1f0: 48 29 c8                      subq    %rcx, %rax
// 1f3: 49 89 3c c6                   movq    %rdi, (%r14,%rax,8)
// 1f7: 49 8d 34 d6                   leaq    (%r14,%rdx,8), %rsi
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _JIT_CONTINUE
// 205: 48 8b 3c 24                   movq    (%rsp), %rdi
// 209: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 20e: 48 83 c4 18                   addq    $0x18, %rsp
// 212: 5b                            popq    %rbx
// 213: 41 5c                         popq    %r12
// 215: 41 5d                         popq    %r13
// 217: 41 5e                         popq    %r14
// 219: 41 5f                         popq    %r15
// 21b: 5d                            popq    %rbp
// 21c: ff e0                         jmpq    *%rax
// 21e: 48 8b 04 24                   movq    (%rsp), %rax
// 222: 49 29 c5                      subq    %rax, %r13
// 225: 49 83 c5 b8                   addq    $-0x48, %r13
// 229: 49 c1 ed 03                   shrq    $0x3, %r13
// 22d: 44 89 68 40                   movl    %r13d, 0x40(%rax)
// 231: 31 c0                         xorl    %eax, %eax
// 233: 48 83 c4 18                   addq    $0x18, %rsp
// 237: 5b                            popq    %rbx
// 238: 41 5c                         popq    %r12
// 23a: 41 5d                         popq    %r13
// 23c: 41 5e                         popq    %r14
// 23e: 41 5f                         popq    %r15
// 240: 5d                            popq    %rbp
// 241: c3                            retq
// 242: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000244:  R_X86_64_64  _Py_Dealloc
// 24c: 4c 89 e7                      movq    %r12, %rdi
// 24f: ff d0                         callq   *%rax
// 251: 4d 89 7e f8                   movq    %r15, -0x8(%r14)
// 255: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000257:  R_X86_64_64  _JIT_OPARG
// 25f: a8 01                         testb   $0x1, %al
// 261: 0f 85 79 fe ff ff             jne     0xe0 <_JIT_ENTRY+0xe0>
// 267: e9 7b fe ff ff                jmp     0xe7 <_JIT_ENTRY+0xe7>
// 26c: 
static const unsigned char _LOAD_ATTR_SLOTplus_BUILD_STRING_code_body[621] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x3c, 0x04, 0x4d, 0x85, 0xff, 0x74, 0x22, 0x48, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x3c, 0x24, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x75, 0x3f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4e, 0x85, 0xc0, 0x79, 0x70, 0xe9, 0x81, 0x00, 0x00, 0x00, 0x49, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xb9, 0x01, 0x00, 0x00, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x74, 0x01, 0x00, 0x00, 0x4d, 0x89, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xd8, 0x83, 0xe0, 0x01, 0x0f, 0xb7, 0xd3, 0x48, 0x29, 0xd0, 0x4d, 0x8d, 0x2c, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x95, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xe0, 0x49, 0xff, 0xc4, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x11, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xcc, 0x49, 0x83, 0xfc, 0x01, 0x7e, 0x5d, 0x41, 0x8d, 0x44, 0x24, 0xfe, 0x4d, 0x8b, 0x7c, 0xc5, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x15, 0x85, 0xc0, 0x78, 0xe1, 0xeb, 0x23, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd3, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xbc, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0xab, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x9a, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x48, 0x85, 0xff, 0x74, 0x4e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xd0, 0x83, 0xe0, 0x01, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x29, 0xd6, 0x48, 0x63, 0xd6, 0x48, 0x01, 0xc2, 0x48, 0x29, 0xc8, 0x49, 0x89, 0x3c, 0xc6, 0x49, 0x8d, 0x34, 0xd6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x29, 0xc5, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x68, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x79, 0xfe, 0xff, 0xff, 0xe9, 0x7b, 0xfe, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_BUILD_STRING_code_holes[20] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x94, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x133, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x244, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x257, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_BUILD_STRING_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_BUILD_STRING_data_holes[1];

// _LOAD_ATTR_SLOTplus_BUILD_TUPLE
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_BUILD_TUPLE.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f6                      movq    %rsi, %r14
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 74 1d                         je      0x46 <_JIT_ENTRY+0x46>
// 29: 49 89 d7                      movq    %rdx, %r15
// 2c: 41 8b 45 00                   movl    (%r13), %eax
// 30: ff c0                         incl    %eax
// 32: 75 3f                         jne     0x73 <_JIT_ENTRY+0x73>
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 4f                         jle     0x8c <_JIT_ENTRY+0x8c>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 71                         jns     0xb2 <_JIT_ENTRY+0xb2>
// 41: e9 82 00 00 00                jmp     0xc8 <_JIT_ENTRY+0xc8>
// 46: 49 29 de                      subq    %rbx, %r14
// 49: 49 83 c6 b8                   addq    $-0x48, %r14
// 4d: 49 c1 ee 03                   shrq    $0x3, %r14
// 51: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 55: 48 8b 03                      movq    (%rbx), %rax
// 58: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005a:  R_X86_64_64  _JIT_TARGET
// 62: 89 c9                         movl    %ecx, %ecx
// 64: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 68: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 6e: e9 e6 00 00 00                jmp     0x159 <_JIT_ENTRY+0x159>
// 73: 41 89 45 00                   movl    %eax, (%r13)
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 81: ff d0                         callq   *%rax
// 83: 49 8b 04 24                   movq    (%r12), %rax
// 87: 48 85 c0                      testq   %rax, %rax
// 8a: 7f b1                         jg      0x3d <_JIT_ENTRY+0x3d>
// 8c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008e:  R_X86_64_64  .rodata.str1.1
// 96: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000098:  R_X86_64_64  _Py_NegativeRefcount
// a0: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a5: 4c 89 e2                      movq    %r12, %rdx
// a8: ff d0                         callq   *%rax
// aa: 49 8b 04 24                   movq    (%r12), %rax
// ae: 85 c0                         testl   %eax, %eax
// b0: 78 16                         js      0xc8 <_JIT_ENTRY+0xc8>
// b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: ff d0                         callq   *%rax
// be: 49 ff 0c 24                   decq    (%r12)
// c2: 0f 84 9b 00 00 00             je      0x163 <_JIT_ENTRY+0x163>
// c8: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ce:  R_X86_64_64  _JIT_OPARG
// d6: a8 01                         testb   $0x1, %al
// d8: 74 07                         je      0xe1 <_JIT_ENTRY+0xe1>
// da: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// e1: 0f b7 f0                      movzwl  %ax, %esi
// e4: 83 e0 01                      andl    $0x1, %eax
// e7: 48 29 f0                      subq    %rsi, %rax
// ea: 4d 8d 24 c6                   leaq    (%r14,%rax,8), %r12
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _PyTuple_FromArraySteal
// f8: 4c 89 e7                      movq    %r12, %rdi
// fb: ff d0                         callq   *%rax
// fd: 48 85 c0                      testq   %rax, %rax
// 100: 74 46                         je      0x148 <_JIT_ENTRY+0x148>
// 102: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000104:  R_X86_64_64  _JIT_OPARG
// 10c: 0f b7 d1                      movzwl  %cx, %edx
// 10f: 0f b7 f1                      movzwl  %cx, %esi
// 112: 83 e1 01                      andl    $0x1, %ecx
// 115: bf 01 00 00 00                movl    $0x1, %edi
// 11a: 29 f7                         subl    %esi, %edi
// 11c: 48 63 f7                      movslq  %edi, %rsi
// 11f: 48 01 ce                      addq    %rcx, %rsi
// 122: 48 29 d1                      subq    %rdx, %rcx
// 125: 49 89 04 ce                   movq    %rax, (%r14,%rcx,8)
// 129: 49 8d 34 f6                   leaq    (%r14,%rsi,8), %rsi
// 12d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012f:  R_X86_64_64  _JIT_CONTINUE
// 137: 48 89 df                      movq    %rbx, %rdi
// 13a: 4c 89 fa                      movq    %r15, %rdx
// 13d: 5b                            popq    %rbx
// 13e: 41 5c                         popq    %r12
// 140: 41 5d                         popq    %r13
// 142: 41 5e                         popq    %r14
// 144: 41 5f                         popq    %r15
// 146: ff e0                         jmpq    *%rax
// 148: 49 29 dc                      subq    %rbx, %r12
// 14b: 49 83 c4 b8                   addq    $-0x48, %r12
// 14f: 49 c1 ec 03                   shrq    $0x3, %r12
// 153: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 157: 31 c0                         xorl    %eax, %eax
// 159: 5b                            popq    %rbx
// 15a: 41 5c                         popq    %r12
// 15c: 41 5d                         popq    %r13
// 15e: 41 5e                         popq    %r14
// 160: 41 5f                         popq    %r15
// 162: c3                            retq
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_Dealloc
// 16d: 4c 89 e7                      movq    %r12, %rdi
// 170: ff d0                         callq   *%rax
// 172: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 176: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000178:  R_X86_64_64  _JIT_OPARG
// 180: a8 01                         testb   $0x1, %al
// 182: 0f 85 52 ff ff ff             jne     0xda <_JIT_ENTRY+0xda>
// 188: e9 54 ff ff ff                jmp     0xe1 <_JIT_ENTRY+0xe1>
// 18d: 
static const unsigned char _LOAD_ATTR_SLOTplus_BUILD_TUPLE_code_body[398] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1d, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x3f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4f, 0x85, 0xc0, 0x79, 0x71, 0xe9, 0x82, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xe6, 0x00, 0x00, 0x00, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x9b, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0x83, 0xe0, 0x01, 0x48, 0x29, 0xf0, 0x4d, 0x8d, 0x24, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x46, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x0f, 0xb7, 0xf1, 0x83, 0xe1, 0x01, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x29, 0xf7, 0x48, 0x63, 0xf7, 0x48, 0x01, 0xce, 0x48, 0x29, 0xd1, 0x49, 0x89, 0x04, 0xce, 0x49, 0x8d, 0x34, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x52, 0xff, 0xff, 0xff, 0xe9, 0x54, 0xff, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_BUILD_TUPLE_code_holes[13] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyTuple_FromArraySteal, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x12f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x178, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_BUILD_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_BUILD_TUPLE_data_holes[1];

// _LOAD_ATTR_SLOTplus_CALL_BUILTIN_CLASS
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_CALL_BUILTIN_CLASS.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 fd                      movq    %rdi, %r13
// 14: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 18: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001a:  R_X86_64_64  _JIT_OPERAND
// 22: 0f b7 c0                      movzwl  %ax, %eax
// 25: 49 8b 1c 04                   movq    (%r12,%rax), %rbx
// 29: 48 85 db                      testq   %rbx, %rbx
// 2c: 0f 84 eb 01 00 00             je      0x21d <_JIT_ENTRY+0x21d>
// 32: 48 89 d5                      movq    %rdx, %rbp
// 35: 8b 03                         movl    (%rbx), %eax
// 37: ff c0                         incl    %eax
// 39: 75 0f                         jne     0x4a <_JIT_ENTRY+0x4a>
// 3b: 49 8b 04 24                   movq    (%r12), %rax
// 3f: 48 85 c0                      testq   %rax, %rax
// 42: 7e 1d                         jle     0x61 <_JIT_ENTRY+0x61>
// 44: 85 c0                         testl   %eax, %eax
// 46: 79 3f                         jns     0x87 <_JIT_ENTRY+0x87>
// 48: eb 53                         jmp     0x9d <_JIT_ENTRY+0x9d>
// 4a: 89 03                         movl    %eax, (%rbx)
// 4c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004e:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 56: ff d0                         callq   *%rax
// 58: 49 8b 04 24                   movq    (%r12), %rax
// 5c: 48 85 c0                      testq   %rax, %rax
// 5f: 7f e3                         jg      0x44 <_JIT_ENTRY+0x44>
// 61: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000063:  R_X86_64_64  .rodata.str1.1
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_NegativeRefcount
// 75: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 7a: 4c 89 e2                      movq    %r12, %rdx
// 7d: ff d0                         callq   *%rax
// 7f: 49 8b 04 24                   movq    (%r12), %rax
// 83: 85 c0                         testl   %eax, %eax
// 85: 78 16                         js      0x9d <_JIT_ENTRY+0x9d>
// 87: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000089:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 91: ff d0                         callq   *%rax
// 93: 49 ff 0c 24                   decq    (%r12)
// 97: 0f 84 b8 01 00 00             je      0x255 <_JIT_ENTRY+0x255>
// 9d: 49 89 5f f8                   movq    %rbx, -0x8(%r15)
// a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a3:  R_X86_64_64  _JIT_OPARG
// ab: a8 01                         testb   $0x1, %al
// ad: 74 07                         je      0xb6 <_JIT_ENTRY+0xb6>
// af: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// b6: 0f b7 f0                      movzwl  %ax, %esi
// b9: 0f b7 c8                      movzwl  %ax, %ecx
// bc: 89 c7                         movl    %eax, %edi
// be: 83 e7 01                      andl    $0x1, %edi
// c1: 49 8d 04 ff                   leaq    (%r15,%rdi,8), %rax
// c5: 89 f2                         movl    %esi, %edx
// c7: f7 d2                         notl    %edx
// c9: 4c 63 ca                      movslq  %edx, %r9
// cc: 49 01 f9                      addq    %rdi, %r9
// cf: 4b 8b 14 cf                   movq    (%r15,%r9,8), %rdx
// d3: 41 b8 fe ff ff ff             movl    $0xfffffffe, %r8d       # imm = 0xFFFFFFFE
// d9: 41 29 f0                      subl    %esi, %r8d
// dc: 49 63 d8                      movslq  %r8d, %rbx
// df: 48 01 fb                      addq    %rdi, %rbx
// e2: 48 89 cf                      movq    %rcx, %rdi
// e5: 48 f7 df                      negq    %rdi
// e8: 44 8d 76 01                   leal    0x1(%rsi), %r14d
// ec: 48 85 d2                      testq   %rdx, %rdx
// ef: 48 f7 d1                      notq    %rcx
// f2: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// f6: 44 0f 44 f6                   cmovel  %esi, %r14d
// fa: 49 8b 3c df                   movq    (%r15,%rbx,8), %rdi
// fe: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 102: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 109: 0f 84 0b 01 00 00             je      0x21a <_JIT_ENTRY+0x21a>
// 10f: 4c 8b 87 90 01 00 00          movq    0x190(%rdi), %r8
// 116: 4d 85 c0                      testq   %r8, %r8
// 119: 0f 84 fb 00 00 00             je      0x21a <_JIT_ENTRY+0x21a>
// 11f: 4c 89 4c 24 08                movq    %r9, 0x8(%rsp)
// 124: 48 89 6c 24 18                movq    %rbp, 0x18(%rsp)
// 129: 4c 89 6c 24 20                movq    %r13, 0x20(%rsp)
// 12e: 48 8d 2c c8                   leaq    (%rax,%rcx,8), %rbp
// 132: 48 85 d2                      testq   %rdx, %rdx
// 135: 41 0f 94 c4                   sete    %r12b
// 139: 44 89 f2                      movl    %r14d, %edx
// 13c: 48 89 3c 24                   movq    %rdi, (%rsp)
// 140: 48 89 ee                      movq    %rbp, %rsi
// 143: 31 c9                         xorl    %ecx, %ecx
// 145: 41 ff d0                      callq   *%r8
// 148: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 14d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014f:  R_X86_64_64  _JIT_OPARG
// 157: 66 85 c0                      testw   %ax, %ax
// 15a: 0f 94 c0                      sete    %al
// 15d: 41 84 c4                      testb   %al, %r12b
// 160: 0f 84 19 01 00 00             je      0x27f <_JIT_ENTRY+0x27f>
// 166: 48 8b 14 24                   movq    (%rsp), %rdx
// 16a: 48 8b 02                      movq    (%rdx), %rax
// 16d: 48 85 c0                      testq   %rax, %rax
// 170: 7f 22                         jg      0x194 <_JIT_ENTRY+0x194>
// 172: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000174:  R_X86_64_64  .rodata.str1.1
// 17c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017e:  R_X86_64_64  _Py_NegativeRefcount
// 186: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// 18b: ff d0                         callq   *%rax
// 18d: 48 8b 04 24                   movq    (%rsp), %rax
// 191: 48 8b 00                      movq    (%rax), %rax
// 194: 85 c0                         testl   %eax, %eax
// 196: 4c 8b 64 24 20                movq    0x20(%rsp), %r12
// 19b: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// 1a0: 78 21                         js      0x1c3 <_JIT_ENTRY+0x1c3>
// 1a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ac: ff d0                         callq   *%rax
// 1ae: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1b2: 48 ff 0f                      decq    (%rdi)
// 1b5: 75 0c                         jne     0x1c3 <_JIT_ENTRY+0x1c3>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: ff d0                         callq   *%rax
// 1c3: 49 8d 04 df                   leaq    (%r15,%rbx,8), %rax
// 1c7: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 1cc: 48 85 d2                      testq   %rdx, %rdx
// 1cf: 74 35                         je      0x206 <_JIT_ENTRY+0x206>
// 1d1: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1d6: 4d 8d 34 cf                   leaq    (%r15,%rcx,8), %r14
// 1da: 48 89 10                      movq    %rdx, (%rax)
// 1dd: 49 8b 45 10                   movq    0x10(%r13), %rax
// 1e1: 48 8b 00                      movq    (%rax), %rax
// 1e4: 84 c0                         testb   %al, %al
// 1e6: 0f 84 1b 01 00 00             je      0x307 <_JIT_ENTRY+0x307>
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _Py_HandlePending
// 1f6: 4c 89 ef                      movq    %r13, %rdi
// 1f9: ff d0                         callq   *%rax
// 1fb: 85 c0                         testl   %eax, %eax
// 1fd: 0f 84 04 01 00 00             je      0x307 <_JIT_ENTRY+0x307>
// 203: 4c 89 f0                      movq    %r14, %rax
// 206: 4c 29 e0                      subq    %r12, %rax
// 209: 48 83 c0 b8                   addq    $-0x48, %rax
// 20d: 48 c1 e8 03                   shrq    $0x3, %rax
// 211: 41 89 44 24 40                movl    %eax, 0x40(%r12)
// 216: 31 c0                         xorl    %eax, %eax
// 218: eb 2c                         jmp     0x246 <_JIT_ENTRY+0x246>
// 21a: 49 89 c7                      movq    %rax, %r15
// 21d: 4d 29 ef                      subq    %r13, %r15
// 220: 49 83 c7 b8                   addq    $-0x48, %r15
// 224: 49 c1 ef 03                   shrq    $0x3, %r15
// 228: 45 89 7d 40                   movl    %r15d, 0x40(%r13)
// 22c: 49 8b 45 00                   movq    (%r13), %rax
// 230: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000232:  R_X86_64_64  _JIT_TARGET
// 23a: 89 c9                         movl    %ecx, %ecx
// 23c: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 240: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 246: 48 83 c4 28                   addq    $0x28, %rsp
// 24a: 5b                            popq    %rbx
// 24b: 41 5c                         popq    %r12
// 24d: 41 5d                         popq    %r13
// 24f: 41 5e                         popq    %r14
// 251: 41 5f                         popq    %r15
// 253: 5d                            popq    %rbp
// 254: c3                            retq
// 255: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000257:  R_X86_64_64  _Py_Dealloc
// 25f: 4c 89 e7                      movq    %r12, %rdi
// 262: ff d0                         callq   *%rax
// 264: 49 89 5f f8                   movq    %rbx, -0x8(%r15)
// 268: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026a:  R_X86_64_64  _JIT_OPARG
// 272: a8 01                         testb   $0x1, %al
// 274: 0f 85 35 fe ff ff             jne     0xaf <_JIT_ENTRY+0xaf>
// 27a: e9 37 fe ff ff                jmp     0xb6 <_JIT_ENTRY+0xb6>
// 27f: 41 83 fe 02                   cmpl    $0x2, %r14d
// 283: 41 bc 01 00 00 00             movl    $0x1, %r12d
// 289: 45 0f 43 e6                   cmovael %r14d, %r12d
// 28d: 45 31 ed                      xorl    %r13d, %r13d
// 290: eb 1a                         jmp     0x2ac <_JIT_ENTRY+0x2ac>
// 292: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// 2a0: 49 ff c5                      incq    %r13
// 2a3: 4d 39 ec                      cmpq    %r13, %r12
// 2a6: 0f 84 ba fe ff ff             je      0x166 <_JIT_ENTRY+0x166>
// 2ac: 4e 8b 74 ed 00                movq    (%rbp,%r13,8), %r14
// 2b1: 49 8b 06                      movq    (%r14), %rax
// 2b4: 48 85 c0                      testq   %rax, %rax
// 2b7: 7e 07                         jle     0x2c0 <_JIT_ENTRY+0x2c0>
// 2b9: 85 c0                         testl   %eax, %eax
// 2bb: 78 e3                         js      0x2a0 <_JIT_ENTRY+0x2a0>
// 2bd: eb 26                         jmp     0x2e5 <_JIT_ENTRY+0x2e5>
// 2bf: 90                            nop
// 2c0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002c2:  R_X86_64_64  .rodata.str1.1
// 2ca: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 2cf: 4c 89 f2                      movq    %r14, %rdx
// 2d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d4:  R_X86_64_64  _Py_NegativeRefcount
// 2dc: ff d0                         callq   *%rax
// 2de: 49 8b 06                      movq    (%r14), %rax
// 2e1: 85 c0                         testl   %eax, %eax
// 2e3: 78 bb                         js      0x2a0 <_JIT_ENTRY+0x2a0>
// 2e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2ef: ff d0                         callq   *%rax
// 2f1: 49 ff 0e                      decq    (%r14)
// 2f4: 75 aa                         jne     0x2a0 <_JIT_ENTRY+0x2a0>
// 2f6: 4c 89 f7                      movq    %r14, %rdi
// 2f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fb:  R_X86_64_64  _Py_Dealloc
// 303: ff d0                         callq   *%rax
// 305: eb 99                         jmp     0x2a0 <_JIT_ENTRY+0x2a0>
// 307: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000309:  R_X86_64_64  _JIT_CONTINUE
// 311: 4c 89 e7                      movq    %r12, %rdi
// 314: 4c 89 f6                      movq    %r14, %rsi
// 317: 4c 89 ea                      movq    %r13, %rdx
// 31a: 48 83 c4 28                   addq    $0x28, %rsp
// 31e: 5b                            popq    %rbx
// 31f: 41 5c                         popq    %r12
// 321: 41 5d                         popq    %r13
// 323: 41 5e                         popq    %r14
// 325: 41 5f                         popq    %r15
// 327: 5d                            popq    %rbp
// 328: ff e0                         jmpq    *%rax
// 32a: 
static const unsigned char _LOAD_ATTR_SLOTplus_CALL_BUILTIN_CLASS_code_body[811] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xfd, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8b, 0x1c, 0x04, 0x48, 0x85, 0xdb, 0x0f, 0x84, 0xeb, 0x01, 0x00, 0x00, 0x48, 0x89, 0xd5, 0x8b, 0x03, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1d, 0x85, 0xc0, 0x79, 0x3f, 0xeb, 0x53, 0x89, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xb8, 0x01, 0x00, 0x00, 0x49, 0x89, 0x5f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0x0f, 0xb7, 0xc8, 0x89, 0xc7, 0x83, 0xe7, 0x01, 0x49, 0x8d, 0x04, 0xff, 0x89, 0xf2, 0xf7, 0xd2, 0x4c, 0x63, 0xca, 0x49, 0x01, 0xf9, 0x4b, 0x8b, 0x14, 0xcf, 0x41, 0xb8, 0xfe, 0xff, 0xff, 0xff, 0x41, 0x29, 0xf0, 0x49, 0x63, 0xd8, 0x48, 0x01, 0xfb, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x44, 0x8d, 0x76, 0x01, 0x48, 0x85, 0xd2, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x44, 0x0f, 0x44, 0xf6, 0x49, 0x8b, 0x3c, 0xdf, 0x48, 0x8b, 0x77, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x0b, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x87, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xfb, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x08, 0x48, 0x89, 0x6c, 0x24, 0x18, 0x4c, 0x89, 0x6c, 0x24, 0x20, 0x48, 0x8d, 0x2c, 0xc8, 0x48, 0x85, 0xd2, 0x41, 0x0f, 0x94, 0xc4, 0x44, 0x89, 0xf2, 0x48, 0x89, 0x3c, 0x24, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc4, 0x0f, 0x84, 0x19, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x02, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x64, 0x24, 0x20, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0xff, 0x0f, 0x75, 0x0c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x85, 0xd2, 0x74, 0x35, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x4d, 0x8d, 0x34, 0xcf, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0x1b, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x04, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xf0, 0x4c, 0x29, 0xe0, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x44, 0x24, 0x40, 0x31, 0xc0, 0xeb, 0x2c, 0x49, 0x89, 0xc7, 0x4d, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7d, 0x40, 0x49, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0x5f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x35, 0xfe, 0xff, 0xff, 0xe9, 0x37, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfe, 0x02, 0x41, 0xbc, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xe6, 0x45, 0x31, 0xed, 0xeb, 0x1a, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc5, 0x4d, 0x39, 0xec, 0x0f, 0x84, 0xba, 0xfe, 0xff, 0xff, 0x4e, 0x8b, 0x74, 0xed, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x26, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xbb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0xaa, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x99, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_ATTR_SLOTplus_CALL_BUILTIN_CLASS_code_holes[21] = {
    {0x1a, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x4e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x63, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x17e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x232, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x257, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x26a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2e7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x309, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_CALL_BUILTIN_CLASS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_CALL_BUILTIN_CLASS_data_holes[1];

// _LOAD_ATTR_SLOTplus_CALL_BUILTIN_FAST
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_CALL_BUILTIN_FAST.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 fd                      movq    %rdi, %r13
// 14: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 18: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001a:  R_X86_64_64  _JIT_OPERAND
// 22: 0f b7 c0                      movzwl  %ax, %eax
// 25: 49 8b 1c 04                   movq    (%r12,%rax), %rbx
// 29: 48 85 db                      testq   %rbx, %rbx
// 2c: 0f 84 fe 01 00 00             je      0x230 <_JIT_ENTRY+0x230>
// 32: 48 89 d5                      movq    %rdx, %rbp
// 35: 8b 03                         movl    (%rbx), %eax
// 37: ff c0                         incl    %eax
// 39: 75 0f                         jne     0x4a <_JIT_ENTRY+0x4a>
// 3b: 49 8b 04 24                   movq    (%r12), %rax
// 3f: 48 85 c0                      testq   %rax, %rax
// 42: 7e 1d                         jle     0x61 <_JIT_ENTRY+0x61>
// 44: 85 c0                         testl   %eax, %eax
// 46: 79 3f                         jns     0x87 <_JIT_ENTRY+0x87>
// 48: eb 5e                         jmp     0xa8 <_JIT_ENTRY+0xa8>
// 4a: 89 03                         movl    %eax, (%rbx)
// 4c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004e:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 56: ff d0                         callq   *%rax
// 58: 49 8b 04 24                   movq    (%r12), %rax
// 5c: 48 85 c0                      testq   %rax, %rax
// 5f: 7f e3                         jg      0x44 <_JIT_ENTRY+0x44>
// 61: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000063:  R_X86_64_64  .rodata.str1.1
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_NegativeRefcount
// 75: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 7a: 4c 89 e2                      movq    %r12, %rdx
// 7d: ff d0                         callq   *%rax
// 7f: 49 8b 04 24                   movq    (%r12), %rax
// 83: 85 c0                         testl   %eax, %eax
// 85: 78 21                         js      0xa8 <_JIT_ENTRY+0xa8>
// 87: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000089:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 91: ff d0                         callq   *%rax
// 93: 49 ff 0c 24                   decq    (%r12)
// 97: 75 0f                         jne     0xa8 <_JIT_ENTRY+0xa8>
// 99: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009b:  R_X86_64_64  _Py_Dealloc
// a3: 4c 89 e7                      movq    %r12, %rdi
// a6: ff d0                         callq   *%rax
// a8: 49 89 5f f8                   movq    %rbx, -0x8(%r15)
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _JIT_OPARG
// b6: a8 01                         testb   $0x1, %al
// b8: 74 07                         je      0xc1 <_JIT_ENTRY+0xc1>
// ba: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// c1: 0f b7 f0                      movzwl  %ax, %esi
// c4: 0f b7 c8                      movzwl  %ax, %ecx
// c7: 89 c7                         movl    %eax, %edi
// c9: 83 e7 01                      andl    $0x1, %edi
// cc: 49 8d 04 ff                   leaq    (%r15,%rdi,8), %rax
// d0: 89 f2                         movl    %esi, %edx
// d2: f7 d2                         notl    %edx
// d4: 4c 63 ca                      movslq  %edx, %r9
// d7: 49 01 f9                      addq    %rdi, %r9
// da: 4b 8b 14 cf                   movq    (%r15,%r9,8), %rdx
// de: 41 b8 fe ff ff ff             movl    $0xfffffffe, %r8d       # imm = 0xFFFFFFFE
// e4: 41 29 f0                      subl    %esi, %r8d
// e7: 49 63 d8                      movslq  %r8d, %rbx
// ea: 48 01 fb                      addq    %rdi, %rbx
// ed: 48 89 cf                      movq    %rcx, %rdi
// f0: 48 f7 df                      negq    %rdi
// f3: 44 8d 76 01                   leal    0x1(%rsi), %r14d
// f7: 48 85 d2                      testq   %rdx, %rdx
// fa: 48 f7 d1                      notq    %rcx
// fd: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 101: 44 0f 44 f6                   cmovel  %esi, %r14d
// 105: 49 8b 3c df                   movq    (%r15,%rbx,8), %rdi
// 109: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000010b:  R_X86_64_64  PyCFunction_Type
// 113: 48 39 77 08                   cmpq    %rsi, 0x8(%rdi)
// 117: 0f 85 10 01 00 00             jne     0x22d <_JIT_ENTRY+0x22d>
// 11d: 4c 8b 47 10                   movq    0x10(%rdi), %r8
// 121: 41 81 78 10 80 00 00 00       cmpl    $0x80, 0x10(%r8)
// 129: 0f 85 fe 00 00 00             jne     0x22d <_JIT_ENTRY+0x22d>
// 12f: 4c 89 4c 24 08                movq    %r9, 0x8(%rsp)
// 134: 48 89 6c 24 18                movq    %rbp, 0x18(%rsp)
// 139: 4c 89 6c 24 20                movq    %r13, 0x20(%rsp)
// 13e: 48 8d 2c c8                   leaq    (%rax,%rcx,8), %rbp
// 142: 48 85 d2                      testq   %rdx, %rdx
// 145: 41 0f 94 c4                   sete    %r12b
// 149: 48 89 3c 24                   movq    %rdi, (%rsp)
// 14d: 48 8b 7f 18                   movq    0x18(%rdi), %rdi
// 151: 44 89 f2                      movl    %r14d, %edx
// 154: 48 89 ee                      movq    %rbp, %rsi
// 157: 41 ff 50 08                   callq   *0x8(%r8)
// 15b: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _JIT_OPARG
// 16a: 66 85 c0                      testw   %ax, %ax
// 16d: 0f 94 c0                      sete    %al
// 170: 41 84 c4                      testb   %al, %r12b
// 173: 0f 84 ef 00 00 00             je      0x268 <_JIT_ENTRY+0x268>
// 179: 48 8b 14 24                   movq    (%rsp), %rdx
// 17d: 48 8b 02                      movq    (%rdx), %rax
// 180: 48 85 c0                      testq   %rax, %rax
// 183: 7f 22                         jg      0x1a7 <_JIT_ENTRY+0x1a7>
// 185: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000187:  R_X86_64_64  .rodata.str1.1
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _Py_NegativeRefcount
// 199: be 28 0b 00 00                movl    $0xb28, %esi            # imm = 0xB28
// 19e: ff d0                         callq   *%rax
// 1a0: 48 8b 04 24                   movq    (%rsp), %rax
// 1a4: 48 8b 00                      movq    (%rax), %rax
// 1a7: 85 c0                         testl   %eax, %eax
// 1a9: 4c 8b 64 24 20                movq    0x20(%rsp), %r12
// 1ae: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// 1b3: 78 21                         js      0x1d6 <_JIT_ENTRY+0x1d6>
// 1b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1bf: ff d0                         callq   *%rax
// 1c1: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1c5: 48 ff 0f                      decq    (%rdi)
// 1c8: 75 0c                         jne     0x1d6 <_JIT_ENTRY+0x1d6>
// 1ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cc:  R_X86_64_64  _Py_Dealloc
// 1d4: ff d0                         callq   *%rax
// 1d6: 49 8d 04 df                   leaq    (%r15,%rbx,8), %rax
// 1da: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 1df: 48 85 d2                      testq   %rdx, %rdx
// 1e2: 74 35                         je      0x219 <_JIT_ENTRY+0x219>
// 1e4: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1e9: 4d 8d 34 cf                   leaq    (%r15,%rcx,8), %r14
// 1ed: 48 89 10                      movq    %rdx, (%rax)
// 1f0: 49 8b 45 10                   movq    0x10(%r13), %rax
// 1f4: 48 8b 00                      movq    (%rax), %rax
// 1f7: 84 c0                         testb   %al, %al
// 1f9: 0f 84 e8 00 00 00             je      0x2e7 <_JIT_ENTRY+0x2e7>
// 1ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000201:  R_X86_64_64  _Py_HandlePending
// 209: 4c 89 ef                      movq    %r13, %rdi
// 20c: ff d0                         callq   *%rax
// 20e: 85 c0                         testl   %eax, %eax
// 210: 0f 84 d1 00 00 00             je      0x2e7 <_JIT_ENTRY+0x2e7>
// 216: 4c 89 f0                      movq    %r14, %rax
// 219: 4c 29 e0                      subq    %r12, %rax
// 21c: 48 83 c0 b8                   addq    $-0x48, %rax
// 220: 48 c1 e8 03                   shrq    $0x3, %rax
// 224: 41 89 44 24 40                movl    %eax, 0x40(%r12)
// 229: 31 c0                         xorl    %eax, %eax
// 22b: eb 2c                         jmp     0x259 <_JIT_ENTRY+0x259>
// 22d: 49 89 c7                      movq    %rax, %r15
// 230: 4d 29 ef                      subq    %r13, %r15
// 233: 49 83 c7 b8                   addq    $-0x48, %r15
// 237: 49 c1 ef 03                   shrq    $0x3, %r15
// 23b: 45 89 7d 40                   movl    %r15d, 0x40(%r13)
// 23f: 49 8b 45 00                   movq    (%r13), %rax
// 243: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000245:  R_X86_64_64  _JIT_TARGET
// 24d: 89 c9                         movl    %ecx, %ecx
// 24f: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 253: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 259: 48 83 c4 28                   addq    $0x28, %rsp
// 25d: 5b                            popq    %rbx
// 25e: 41 5c                         popq    %r12
// 260: 41 5d                         popq    %r13
// 262: 41 5e                         popq    %r14
// 264: 41 5f                         popq    %r15
// 266: 5d                            popq    %rbp
// 267: c3                            retq
// 268: 41 83 fe 02                   cmpl    $0x2, %r14d
// 26c: 41 bc 01 00 00 00             movl    $0x1, %r12d
// 272: 45 0f 43 e6                   cmovael %r14d, %r12d
// 276: 45 31 ed                      xorl    %r13d, %r13d
// 279: eb 11                         jmp     0x28c <_JIT_ENTRY+0x28c>
// 27b: 0f 1f 44 00 00                nopl    (%rax,%rax)
// 280: 49 ff c5                      incq    %r13
// 283: 4d 39 ec                      cmpq    %r13, %r12
// 286: 0f 84 ed fe ff ff             je      0x179 <_JIT_ENTRY+0x179>
// 28c: 4e 8b 74 ed 00                movq    (%rbp,%r13,8), %r14
// 291: 49 8b 06                      movq    (%r14), %rax
// 294: 48 85 c0                      testq   %rax, %rax
// 297: 7e 07                         jle     0x2a0 <_JIT_ENTRY+0x2a0>
// 299: 85 c0                         testl   %eax, %eax
// 29b: 78 e3                         js      0x280 <_JIT_ENTRY+0x280>
// 29d: eb 26                         jmp     0x2c5 <_JIT_ENTRY+0x2c5>
// 29f: 90                            nop
// 2a0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002a2:  R_X86_64_64  .rodata.str1.1
// 2aa: be 26 0b 00 00                movl    $0xb26, %esi            # imm = 0xB26
// 2af: 4c 89 f2                      movq    %r14, %rdx
// 2b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b4:  R_X86_64_64  _Py_NegativeRefcount
// 2bc: ff d0                         callq   *%rax
// 2be: 49 8b 06                      movq    (%r14), %rax
// 2c1: 85 c0                         testl   %eax, %eax
// 2c3: 78 bb                         js      0x280 <_JIT_ENTRY+0x280>
// 2c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2cf: ff d0                         callq   *%rax
// 2d1: 49 ff 0e                      decq    (%r14)
// 2d4: 75 aa                         jne     0x280 <_JIT_ENTRY+0x280>
// 2d6: 4c 89 f7                      movq    %r14, %rdi
// 2d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002db:  R_X86_64_64  _Py_Dealloc
// 2e3: ff d0                         callq   *%rax
// 2e5: eb 99                         jmp     0x280 <_JIT_ENTRY+0x280>
// 2e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e9:  R_X86_64_64  _JIT_CONTINUE
// 2f1: 4c 89 e7                      movq    %r12, %rdi
// 2f4: 4c 89 f6                      movq    %r14, %rsi
// 2f7: 4c 89 ea                      movq    %r13, %rdx
// 2fa: 48 83 c4 28                   addq    $0x28, %rsp
// 2fe: 5b                            popq    %rbx
// 2ff: 41 5c                         popq    %r12
// 301: 41 5d                         popq    %r13
// 303: 41 5e                         popq    %r14
// 305: 41 5f                         popq    %r15
// 307: 5d                            popq    %rbp
// 308: ff e0                         jmpq    *%rax
// 30a: 
static const unsigned char _LOAD_ATTR_SLOTplus_CALL_BUILTIN_FAST_code_body[779] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xfd, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8b, 0x1c, 0x04, 0x48, 0x85, 0xdb, 0x0f, 0x84, 0xfe, 0x01, 0x00, 0x00, 0x48, 0x89, 0xd5, 0x8b, 0x03, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1d, 0x85, 0xc0, 0x79, 0x3f, 0xeb, 0x5e, 0x89, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0x5f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0x0f, 0xb7, 0xc8, 0x89, 0xc7, 0x83, 0xe7, 0x01, 0x49, 0x8d, 0x04, 0xff, 0x89, 0xf2, 0xf7, 0xd2, 0x4c, 0x63, 0xca, 0x49, 0x01, 0xf9, 0x4b, 0x8b, 0x14, 0xcf, 0x41, 0xb8, 0xfe, 0xff, 0xff, 0xff, 0x41, 0x29, 0xf0, 0x49, 0x63, 0xd8, 0x48, 0x01, 0xfb, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x44, 0x8d, 0x76, 0x01, 0x48, 0x85, 0xd2, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x44, 0x0f, 0x44, 0xf6, 0x49, 0x8b, 0x3c, 0xdf, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x77, 0x08, 0x0f, 0x85, 0x10, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x47, 0x10, 0x41, 0x81, 0x78, 0x10, 0x80, 0x00, 0x00, 0x00, 0x0f, 0x85, 0xfe, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x08, 0x48, 0x89, 0x6c, 0x24, 0x18, 0x4c, 0x89, 0x6c, 0x24, 0x20, 0x48, 0x8d, 0x2c, 0xc8, 0x48, 0x85, 0xd2, 0x41, 0x0f, 0x94, 0xc4, 0x48, 0x89, 0x3c, 0x24, 0x48, 0x8b, 0x7f, 0x18, 0x44, 0x89, 0xf2, 0x48, 0x89, 0xee, 0x41, 0xff, 0x50, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc4, 0x0f, 0x84, 0xef, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x02, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x28, 0x0b, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x64, 0x24, 0x20, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0xff, 0x0f, 0x75, 0x0c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x85, 0xd2, 0x74, 0x35, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x4d, 0x8d, 0x34, 0xcf, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xe8, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xd1, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf0, 0x4c, 0x29, 0xe0, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x44, 0x24, 0x40, 0x31, 0xc0, 0xeb, 0x2c, 0x49, 0x89, 0xc7, 0x4d, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7d, 0x40, 0x49, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x83, 0xfe, 0x02, 0x41, 0xbc, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xe6, 0x45, 0x31, 0xed, 0xeb, 0x11, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x49, 0xff, 0xc5, 0x4d, 0x39, 0xec, 0x0f, 0x84, 0xed, 0xfe, 0xff, 0xff, 0x4e, 0x8b, 0x74, 0xed, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x26, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x26, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xbb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0xaa, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x99, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_ATTR_SLOTplus_CALL_BUILTIN_FAST_code_holes[21] = {
    {0x1a, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x4e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x63, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x187, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1cc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x201, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x245, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x2a2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2db, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2e9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_CALL_BUILTIN_FAST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_CALL_BUILTIN_FAST_data_holes[1];

// _LOAD_ATTR_SLOTplus_CALL_BUILTIN_FAST_WITH_KEYWORDS
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_CALL_BUILTIN_FAST_WITH_KEYWORDS.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 fd                      movq    %rdi, %r13
// 14: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 18: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001a:  R_X86_64_64  _JIT_OPERAND
// 22: 0f b7 c0                      movzwl  %ax, %eax
// 25: 49 8b 1c 04                   movq    (%r12,%rax), %rbx
// 29: 48 85 db                      testq   %rbx, %rbx
// 2c: 0f 84 00 02 00 00             je      0x232 <_JIT_ENTRY+0x232>
// 32: 48 89 d5                      movq    %rdx, %rbp
// 35: 8b 03                         movl    (%rbx), %eax
// 37: ff c0                         incl    %eax
// 39: 75 0f                         jne     0x4a <_JIT_ENTRY+0x4a>
// 3b: 49 8b 04 24                   movq    (%r12), %rax
// 3f: 48 85 c0                      testq   %rax, %rax
// 42: 7e 1d                         jle     0x61 <_JIT_ENTRY+0x61>
// 44: 85 c0                         testl   %eax, %eax
// 46: 79 3f                         jns     0x87 <_JIT_ENTRY+0x87>
// 48: eb 5e                         jmp     0xa8 <_JIT_ENTRY+0xa8>
// 4a: 89 03                         movl    %eax, (%rbx)
// 4c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004e:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 56: ff d0                         callq   *%rax
// 58: 49 8b 04 24                   movq    (%r12), %rax
// 5c: 48 85 c0                      testq   %rax, %rax
// 5f: 7f e3                         jg      0x44 <_JIT_ENTRY+0x44>
// 61: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000063:  R_X86_64_64  .rodata.str1.1
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_NegativeRefcount
// 75: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 7a: 4c 89 e2                      movq    %r12, %rdx
// 7d: ff d0                         callq   *%rax
// 7f: 49 8b 04 24                   movq    (%r12), %rax
// 83: 85 c0                         testl   %eax, %eax
// 85: 78 21                         js      0xa8 <_JIT_ENTRY+0xa8>
// 87: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000089:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 91: ff d0                         callq   *%rax
// 93: 49 ff 0c 24                   decq    (%r12)
// 97: 75 0f                         jne     0xa8 <_JIT_ENTRY+0xa8>
// 99: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009b:  R_X86_64_64  _Py_Dealloc
// a3: 4c 89 e7                      movq    %r12, %rdi
// a6: ff d0                         callq   *%rax
// a8: 49 89 5f f8                   movq    %rbx, -0x8(%r15)
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _JIT_OPARG
// b6: a8 01                         testb   $0x1, %al
// b8: 74 07                         je      0xc1 <_JIT_ENTRY+0xc1>
// ba: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// c1: 0f b7 f0                      movzwl  %ax, %esi
// c4: 0f b7 c8                      movzwl  %ax, %ecx
// c7: 89 c7                         movl    %eax, %edi
// c9: 83 e7 01                      andl    $0x1, %edi
// cc: 49 8d 04 ff                   leaq    (%r15,%rdi,8), %rax
// d0: 89 f2                         movl    %esi, %edx
// d2: f7 d2                         notl    %edx
// d4: 4c 63 ca                      movslq  %edx, %r9
// d7: 49 01 f9                      addq    %rdi, %r9
// da: 4b 8b 14 cf                   movq    (%r15,%r9,8), %rdx
// de: 41 b8 fe ff ff ff             movl    $0xfffffffe, %r8d       # imm = 0xFFFFFFFE
// e4: 41 29 f0                      subl    %esi, %r8d
// e7: 49 63 d8                      movslq  %r8d, %rbx
// ea: 48 01 fb                      addq    %rdi, %rbx
// ed: 48 89 cf                      movq    %rcx, %rdi
// f0: 48 f7 df                      negq    %rdi
// f3: 44 8d 76 01                   leal    0x1(%rsi), %r14d
// f7: 48 85 d2                      testq   %rdx, %rdx
// fa: 48 f7 d1                      notq    %rcx
// fd: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 101: 44 0f 44 f6                   cmovel  %esi, %r14d
// 105: 49 8b 3c df                   movq    (%r15,%rbx,8), %rdi
// 109: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000010b:  R_X86_64_64  PyCFunction_Type
// 113: 48 39 77 08                   cmpq    %rsi, 0x8(%rdi)
// 117: 0f 85 12 01 00 00             jne     0x22f <_JIT_ENTRY+0x22f>
// 11d: 4c 8b 47 10                   movq    0x10(%rdi), %r8
// 121: 41 81 78 10 82 00 00 00       cmpl    $0x82, 0x10(%r8)
// 129: 0f 85 00 01 00 00             jne     0x22f <_JIT_ENTRY+0x22f>
// 12f: 4c 89 4c 24 08                movq    %r9, 0x8(%rsp)
// 134: 48 89 6c 24 18                movq    %rbp, 0x18(%rsp)
// 139: 4c 89 6c 24 20                movq    %r13, 0x20(%rsp)
// 13e: 48 8d 2c c8                   leaq    (%rax,%rcx,8), %rbp
// 142: 48 85 d2                      testq   %rdx, %rdx
// 145: 41 0f 94 c4                   sete    %r12b
// 149: 48 89 3c 24                   movq    %rdi, (%rsp)
// 14d: 48 8b 7f 18                   movq    0x18(%rdi), %rdi
// 151: 44 89 f2                      movl    %r14d, %edx
// 154: 48 89 ee                      movq    %rbp, %rsi
// 157: 31 c9                         xorl    %ecx, %ecx
// 159: 41 ff 50 08                   callq   *0x8(%r8)
// 15d: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _JIT_OPARG
// 16c: 66 85 c0                      testw   %ax, %ax
// 16f: 0f 94 c0                      sete    %al
// 172: 41 84 c4                      testb   %al, %r12b
// 175: 0f 84 ef 00 00 00             je      0x26a <_JIT_ENTRY+0x26a>
// 17b: 48 8b 14 24                   movq    (%rsp), %rdx
// 17f: 48 8b 02                      movq    (%rdx), %rax
// 182: 48 85 c0                      testq   %rax, %rax
// 185: 7f 22                         jg      0x1a9 <_JIT_ENTRY+0x1a9>
// 187: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000189:  R_X86_64_64  .rodata.str1.1
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _Py_NegativeRefcount
// 19b: be 51 0b 00 00                movl    $0xb51, %esi            # imm = 0xB51
// 1a0: ff d0                         callq   *%rax
// 1a2: 48 8b 04 24                   movq    (%rsp), %rax
// 1a6: 48 8b 00                      movq    (%rax), %rax
// 1a9: 85 c0                         testl   %eax, %eax
// 1ab: 4c 8b 64 24 20                movq    0x20(%rsp), %r12
// 1b0: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// 1b5: 78 21                         js      0x1d8 <_JIT_ENTRY+0x1d8>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c1: ff d0                         callq   *%rax
// 1c3: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1c7: 48 ff 0f                      decq    (%rdi)
// 1ca: 75 0c                         jne     0x1d8 <_JIT_ENTRY+0x1d8>
// 1cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ce:  R_X86_64_64  _Py_Dealloc
// 1d6: ff d0                         callq   *%rax
// 1d8: 49 8d 04 df                   leaq    (%r15,%rbx,8), %rax
// 1dc: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 1e1: 48 85 d2                      testq   %rdx, %rdx
// 1e4: 74 35                         je      0x21b <_JIT_ENTRY+0x21b>
// 1e6: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1eb: 4d 8d 34 cf                   leaq    (%r15,%rcx,8), %r14
// 1ef: 48 89 10                      movq    %rdx, (%rax)
// 1f2: 49 8b 45 10                   movq    0x10(%r13), %rax
// 1f6: 48 8b 00                      movq    (%rax), %rax
// 1f9: 84 c0                         testb   %al, %al
// 1fb: 0f 84 e6 00 00 00             je      0x2e7 <_JIT_ENTRY+0x2e7>
// 201: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000203:  R_X86_64_64  _Py_HandlePending
// 20b: 4c 89 ef                      movq    %r13, %rdi
// 20e: ff d0                         callq   *%rax
// 210: 85 c0                         testl   %eax, %eax
// 212: 0f 84 cf 00 00 00             je      0x2e7 <_JIT_ENTRY+0x2e7>
// 218: 4c 89 f0                      movq    %r14, %rax
// 21b: 4c 29 e0                      subq    %r12, %rax
// 21e: 48 83 c0 b8                   addq    $-0x48, %rax
// 222: 48 c1 e8 03                   shrq    $0x3, %rax
// 226: 41 89 44 24 40                movl    %eax, 0x40(%r12)
// 22b: 31 c0                         xorl    %eax, %eax
// 22d: eb 2c                         jmp     0x25b <_JIT_ENTRY+0x25b>
// 22f: 49 89 c7                      movq    %rax, %r15
// 232: 4d 29 ef                      subq    %r13, %r15
// 235: 49 83 c7 b8                   addq    $-0x48, %r15
// 239: 49 c1 ef 03                   shrq    $0x3, %r15
// 23d: 45 89 7d 40                   movl    %r15d, 0x40(%r13)
// 241: 49 8b 45 00                   movq    (%r13), %rax
// 245: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000247:  R_X86_64_64  _JIT_TARGET
// 24f: 89 c9                         movl    %ecx, %ecx
// 251: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 255: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 25b: 48 83 c4 28                   addq    $0x28, %rsp
// 25f: 5b                            popq    %rbx
// 260: 41 5c                         popq    %r12
// 262: 41 5d                         popq    %r13
// 264: 41 5e                         popq    %r14
// 266: 41 5f                         popq    %r15
// 268: 5d                            popq    %rbp
// 269: c3                            retq
// 26a: 41 83 fe 02                   cmpl    $0x2, %r14d
// 26e: 41 bc 01 00 00 00             movl    $0x1, %r12d
// 274: 45 0f 43 e6                   cmovael %r14d, %r12d
// 278: 45 31 ed                      xorl    %r13d, %r13d
// 27b: eb 0f                         jmp     0x28c <_JIT_ENTRY+0x28c>
// 27d: 0f 1f 00                      nopl    (%rax)
// 280: 49 ff c5                      incq    %r13
// 283: 4d 39 ec                      cmpq    %r13, %r12
// 286: 0f 84 ef fe ff ff             je      0x17b <_JIT_ENTRY+0x17b>
// 28c: 4e 8b 74 ed 00                movq    (%rbp,%r13,8), %r14
// 291: 49 8b 06                      movq    (%r14), %rax
// 294: 48 85 c0                      testq   %rax, %rax
// 297: 7e 07                         jle     0x2a0 <_JIT_ENTRY+0x2a0>
// 299: 85 c0                         testl   %eax, %eax
// 29b: 78 e3                         js      0x280 <_JIT_ENTRY+0x280>
// 29d: eb 26                         jmp     0x2c5 <_JIT_ENTRY+0x2c5>
// 29f: 90                            nop
// 2a0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002a2:  R_X86_64_64  .rodata.str1.1
// 2aa: be 4f 0b 00 00                movl    $0xb4f, %esi            # imm = 0xB4F
// 2af: 4c 89 f2                      movq    %r14, %rdx
// 2b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b4:  R_X86_64_64  _Py_NegativeRefcount
// 2bc: ff d0                         callq   *%rax
// 2be: 49 8b 06                      movq    (%r14), %rax
// 2c1: 85 c0                         testl   %eax, %eax
// 2c3: 78 bb                         js      0x280 <_JIT_ENTRY+0x280>
// 2c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2cf: ff d0                         callq   *%rax
// 2d1: 49 ff 0e                      decq    (%r14)
// 2d4: 75 aa                         jne     0x280 <_JIT_ENTRY+0x280>
// 2d6: 4c 89 f7                      movq    %r14, %rdi
// 2d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002db:  R_X86_64_64  _Py_Dealloc
// 2e3: ff d0                         callq   *%rax
// 2e5: eb 99                         jmp     0x280 <_JIT_ENTRY+0x280>
// 2e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e9:  R_X86_64_64  _JIT_CONTINUE
// 2f1: 4c 89 e7                      movq    %r12, %rdi
// 2f4: 4c 89 f6                      movq    %r14, %rsi
// 2f7: 4c 89 ea                      movq    %r13, %rdx
// 2fa: 48 83 c4 28                   addq    $0x28, %rsp
// 2fe: 5b                            popq    %rbx
// 2ff: 41 5c                         popq    %r12
// 301: 41 5d                         popq    %r13
// 303: 41 5e                         popq    %r14
// 305: 41 5f                         popq    %r15
// 307: 5d                            popq    %rbp
// 308: ff e0                         jmpq    *%rax
// 30a: 
static const unsigned char _LOAD_ATTR_SLOTplus_CALL_BUILTIN_FAST_WITH_KEYWORDS_code_body[779] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xfd, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8b, 0x1c, 0x04, 0x48, 0x85, 0xdb, 0x0f, 0x84, 0x00, 0x02, 0x00, 0x00, 0x48, 0x89, 0xd5, 0x8b, 0x03, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1d, 0x85, 0xc0, 0x79, 0x3f, 0xeb, 0x5e, 0x89, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0x5f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0x0f, 0xb7, 0xc8, 0x89, 0xc7, 0x83, 0xe7, 0x01, 0x49, 0x8d, 0x04, 0xff, 0x89, 0xf2, 0xf7, 0xd2, 0x4c, 0x63, 0xca, 0x49, 0x01, 0xf9, 0x4b, 0x8b, 0x14, 0xcf, 0x41, 0xb8, 0xfe, 0xff, 0xff, 0xff, 0x41, 0x29, 0xf0, 0x49, 0x63, 0xd8, 0x48, 0x01, 0xfb, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x44, 0x8d, 0x76, 0x01, 0x48, 0x85, 0xd2, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x44, 0x0f, 0x44, 0xf6, 0x49, 0x8b, 0x3c, 0xdf, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x77, 0x08, 0x0f, 0x85, 0x12, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x47, 0x10, 0x41, 0x81, 0x78, 0x10, 0x82, 0x00, 0x00, 0x00, 0x0f, 0x85, 0x00, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x08, 0x48, 0x89, 0x6c, 0x24, 0x18, 0x4c, 0x89, 0x6c, 0x24, 0x20, 0x48, 0x8d, 0x2c, 0xc8, 0x48, 0x85, 0xd2, 0x41, 0x0f, 0x94, 0xc4, 0x48, 0x89, 0x3c, 0x24, 0x48, 0x8b, 0x7f, 0x18, 0x44, 0x89, 0xf2, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0x50, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc4, 0x0f, 0x84, 0xef, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x02, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x51, 0x0b, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x64, 0x24, 0x20, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0xff, 0x0f, 0x75, 0x0c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x85, 0xd2, 0x74, 0x35, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x4d, 0x8d, 0x34, 0xcf, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xe6, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xcf, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf0, 0x4c, 0x29, 0xe0, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x44, 0x24, 0x40, 0x31, 0xc0, 0xeb, 0x2c, 0x49, 0x89, 0xc7, 0x4d, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7d, 0x40, 0x49, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x83, 0xfe, 0x02, 0x41, 0xbc, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xe6, 0x45, 0x31, 0xed, 0xeb, 0x0f, 0x0f, 0x1f, 0x00, 0x49, 0xff, 0xc5, 0x4d, 0x39, 0xec, 0x0f, 0x84, 0xef, 0xfe, 0xff, 0xff, 0x4e, 0x8b, 0x74, 0xed, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x26, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4f, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xbb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0xaa, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x99, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_ATTR_SLOTplus_CALL_BUILTIN_FAST_WITH_KEYWORDS_code_holes[21] = {
    {0x1a, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x4e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x63, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ce, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x203, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x247, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x2a2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2db, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2e9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_CALL_BUILTIN_FAST_WITH_KEYWORDS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_CALL_BUILTIN_FAST_WITH_KEYWORDS_data_holes[1];

// _LOAD_ATTR_SLOTplus_CALL_BUILTIN_O
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_CALL_BUILTIN_O.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 18: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001a:  R_X86_64_64  _JIT_OPERAND
// 22: 0f b7 c0                      movzwl  %ax, %eax
// 25: 4d 8b 34 04                   movq    (%r12,%rax), %r14
// 29: 4d 85 f6                      testq   %r14, %r14
// 2c: 0f 84 3c 01 00 00             je      0x16e <_JIT_ENTRY+0x16e>
// 32: 48 89 d5                      movq    %rdx, %rbp
// 35: 41 8b 06                      movl    (%r14), %eax
// 38: ff c0                         incl    %eax
// 3a: 75 0f                         jne     0x4b <_JIT_ENTRY+0x4b>
// 3c: 49 8b 04 24                   movq    (%r12), %rax
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 7e 1e                         jle     0x63 <_JIT_ENTRY+0x63>
// 45: 85 c0                         testl   %eax, %eax
// 47: 79 40                         jns     0x89 <_JIT_ENTRY+0x89>
// 49: eb 54                         jmp     0x9f <_JIT_ENTRY+0x9f>
// 4b: 41 89 06                      movl    %eax, (%r14)
// 4e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000050:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 58: ff d0                         callq   *%rax
// 5a: 49 8b 04 24                   movq    (%r12), %rax
// 5e: 48 85 c0                      testq   %rax, %rax
// 61: 7f e2                         jg      0x45 <_JIT_ENTRY+0x45>
// 63: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000065:  R_X86_64_64  .rodata.str1.1
// 6d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006f:  R_X86_64_64  _Py_NegativeRefcount
// 77: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 7c: 4c 89 e2                      movq    %r12, %rdx
// 7f: ff d0                         callq   *%rax
// 81: 49 8b 04 24                   movq    (%r12), %rax
// 85: 85 c0                         testl   %eax, %eax
// 87: 78 16                         js      0x9f <_JIT_ENTRY+0x9f>
// 89: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 93: ff d0                         callq   *%rax
// 95: 49 ff 0c 24                   decq    (%r12)
// 99: 0f 84 06 01 00 00             je      0x1a5 <_JIT_ENTRY+0x1a5>
// 9f: 4d 89 77 f8                   movq    %r14, -0x8(%r15)
// a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a5:  R_X86_64_64  _JIT_OPARG
// ad: a8 01                         testb   $0x1, %al
// af: 74 07                         je      0xb8 <_JIT_ENTRY+0xb8>
// b1: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// b8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ba:  R_X86_64_64  _JIT_OPARG
// c2: 0f b7 c1                      movzwl  %cx, %eax
// c5: 44 0f b7 e1                   movzwl  %cx, %r12d
// c9: 83 e1 01                      andl    $0x1, %ecx
// cc: 89 c2                         movl    %eax, %edx
// ce: f7 d2                         notl    %edx
// d0: 4c 63 ea                      movslq  %edx, %r13
// d3: 49 01 cd                      addq    %rcx, %r13
// d6: 4c 89 e2                      movq    %r12, %rdx
// d9: 48 f7 da                      negq    %rdx
// dc: 31 f6                         xorl    %esi, %esi
// de: 66 45 85 e4                   testw   %r12w, %r12w
// e2: 40 0f 94 c6                   sete    %sil
// e6: 31 ff                         xorl    %edi, %edi
// e8: 66 41 83 fc 01                cmpw    $0x1, %r12w
// ed: 40 0f 94 c7                   sete    %dil
// f1: 4b 83 3c ef 00                cmpq    $0x0, (%r15,%r13,8)
// f6: 49 f7 d4                      notq    %r12
// f9: 4c 0f 44 e2                   cmoveq  %rdx, %r12
// fd: 4d 8d 34 cf                   leaq    (%r15,%rcx,8), %r14
// 101: 0f 44 f7                      cmovel  %edi, %esi
// 104: 40 80 fe 01                   cmpb    $0x1, %sil
// 108: 75 61                         jne     0x16b <_JIT_ENTRY+0x16b>
// 10a: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 10f: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 114: 29 c2                         subl    %eax, %edx
// 116: 48 63 ea                      movslq  %edx, %rbp
// 119: 48 01 cd                      addq    %rcx, %rbp
// 11c: 49 8b 3c ef                   movq    (%r15,%rbp,8), %rdi
// 120: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000122:  R_X86_64_64  PyCFunction_Type
// 12a: 48 39 47 08                   cmpq    %rax, 0x8(%rdi)
// 12e: 75 3b                         jne     0x16b <_JIT_ENTRY+0x16b>
// 130: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 134: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 138: 75 31                         jne     0x16b <_JIT_ENTRY+0x16b>
// 13a: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 13e: 48 8b 74 24 08                movq    0x8(%rsp), %rsi
// 143: 8b 4e 2c                      movl    0x2c(%rsi), %ecx
// 146: 8d 51 ff                      leal    -0x1(%rcx), %edx
// 149: 89 56 2c                      movl    %edx, 0x2c(%rsi)
// 14c: 85 c9                         testl   %ecx, %ecx
// 14e: 48 89 3c 24                   movq    %rdi, (%rsp)
// 152: 7e 7b                         jle     0x1cf <_JIT_ENTRY+0x1cf>
// 154: 4f 8b 34 e6                   movq    (%r14,%r12,8), %r14
// 158: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 15c: 0f 85 b0 00 00 00             jne     0x212 <_JIT_ENTRY+0x212>
// 162: 48 8b 7f 18                   movq    0x18(%rdi), %rdi
// 166: e9 a9 00 00 00                jmp     0x214 <_JIT_ENTRY+0x214>
// 16b: 4d 89 f7                      movq    %r14, %r15
// 16e: 49 29 df                      subq    %rbx, %r15
// 171: 49 83 c7 b8                   addq    $-0x48, %r15
// 175: 49 c1 ef 03                   shrq    $0x3, %r15
// 179: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 17d: 48 8b 03                      movq    (%rbx), %rax
// 180: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000182:  R_X86_64_64  _JIT_TARGET
// 18a: 89 c9                         movl    %ecx, %ecx
// 18c: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 190: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 196: 48 83 c4 18                   addq    $0x18, %rsp
// 19a: 5b                            popq    %rbx
// 19b: 41 5c                         popq    %r12
// 19d: 41 5d                         popq    %r13
// 19f: 41 5e                         popq    %r14
// 1a1: 41 5f                         popq    %r15
// 1a3: 5d                            popq    %rbp
// 1a4: c3                            retq
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_Dealloc
// 1af: 4c 89 e7                      movq    %r12, %rdi
// 1b2: ff d0                         callq   *%rax
// 1b4: 4d 89 77 f8                   movq    %r14, -0x8(%r15)
// 1b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ba:  R_X86_64_64  _JIT_OPARG
// 1c2: a8 01                         testb   $0x1, %al
// 1c4: 0f 85 e7 fe ff ff             jne     0xb1 <_JIT_ENTRY+0xb1>
// 1ca: e9 e9 fe ff ff                jmp     0xb8 <_JIT_ENTRY+0xb8>
// 1cf: 4c 89 44 24 10                movq    %r8, 0x10(%rsp)
// 1d4: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001d6:  R_X86_64_64  .rodata.str1.1+0x39
// 1de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e0:  R_X86_64_64  _Py_CheckRecursiveCall
// 1e8: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1ed: ff d0                         callq   *%rax
// 1ef: 85 c0                         testl   %eax, %eax
// 1f1: 0f 85 04 01 00 00             jne     0x2fb <_JIT_ENTRY+0x2fb>
// 1f7: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1fb: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 1ff: 4c 8b 44 24 10                movq    0x10(%rsp), %r8
// 204: 4f 8b 34 e6                   movq    (%r14,%r12,8), %r14
// 208: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 20c: 0f 84 50 ff ff ff             je      0x162 <_JIT_ENTRY+0x162>
// 212: 31 ff                         xorl    %edi, %edi
// 214: 4c 89 f6                      movq    %r14, %rsi
// 217: 41 ff d0                      callq   *%r8
// 21a: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 21f: ff 41 2c                      incl    0x2c(%rcx)
// 222: 49 89 c4                      movq    %rax, %r12
// 225: 49 8b 06                      movq    (%r14), %rax
// 228: 48 85 c0                      testq   %rax, %rax
// 22b: 7f 21                         jg      0x24e <_JIT_ENTRY+0x24e>
// 22d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000022f:  R_X86_64_64  .rodata.str1.1
// 237: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000239:  R_X86_64_64  _Py_NegativeRefcount
// 241: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 246: 4c 89 f2                      movq    %r14, %rdx
// 249: ff d0                         callq   *%rax
// 24b: 49 8b 06                      movq    (%r14), %rax
// 24e: 85 c0                         testl   %eax, %eax
// 250: 78 20                         js      0x272 <_JIT_ENTRY+0x272>
// 252: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000254:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 25c: ff d0                         callq   *%rax
// 25e: 49 ff 0e                      decq    (%r14)
// 261: 75 0f                         jne     0x272 <_JIT_ENTRY+0x272>
// 263: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000265:  R_X86_64_64  _Py_Dealloc
// 26d: 4c 89 f7                      movq    %r14, %rdi
// 270: ff d0                         callq   *%rax
// 272: 48 8b 14 24                   movq    (%rsp), %rdx
// 276: 48 8b 02                      movq    (%rdx), %rax
// 279: 48 85 c0                      testq   %rax, %rax
// 27c: 7f 22                         jg      0x2a0 <_JIT_ENTRY+0x2a0>
// 27e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000280:  R_X86_64_64  .rodata.str1.1
// 288: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028a:  R_X86_64_64  _Py_NegativeRefcount
// 292: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 297: ff d0                         callq   *%rax
// 299: 48 8b 04 24                   movq    (%rsp), %rax
// 29d: 48 8b 00                      movq    (%rax), %rax
// 2a0: 85 c0                         testl   %eax, %eax
// 2a2: 78 21                         js      0x2c5 <_JIT_ENTRY+0x2c5>
// 2a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2ae: ff d0                         callq   *%rax
// 2b0: 48 8b 3c 24                   movq    (%rsp), %rdi
// 2b4: 48 ff 0f                      decq    (%rdi)
// 2b7: 75 0c                         jne     0x2c5 <_JIT_ENTRY+0x2c5>
// 2b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bb:  R_X86_64_64  _Py_Dealloc
// 2c3: ff d0                         callq   *%rax
// 2c5: 4d 8d 34 ef                   leaq    (%r15,%rbp,8), %r14
// 2c9: 4d 85 e4                      testq   %r12, %r12
// 2cc: 74 2d                         je      0x2fb <_JIT_ENTRY+0x2fb>
// 2ce: 4f 8d 3c ef                   leaq    (%r15,%r13,8), %r15
// 2d2: 4d 89 26                      movq    %r12, (%r14)
// 2d5: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 2da: 49 8b 46 10                   movq    0x10(%r14), %rax
// 2de: 48 8b 00                      movq    (%rax), %rax
// 2e1: 84 c0                         testb   %al, %al
// 2e3: 74 2c                         je      0x311 <_JIT_ENTRY+0x311>
// 2e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e7:  R_X86_64_64  _Py_HandlePending
// 2ef: 4c 89 f7                      movq    %r14, %rdi
// 2f2: ff d0                         callq   *%rax
// 2f4: 85 c0                         testl   %eax, %eax
// 2f6: 74 19                         je      0x311 <_JIT_ENTRY+0x311>
// 2f8: 4d 89 fe                      movq    %r15, %r14
// 2fb: 49 29 de                      subq    %rbx, %r14
// 2fe: 49 83 c6 b8                   addq    $-0x48, %r14
// 302: 49 c1 ee 03                   shrq    $0x3, %r14
// 306: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 30a: 31 c0                         xorl    %eax, %eax
// 30c: e9 85 fe ff ff                jmp     0x196 <_JIT_ENTRY+0x196>
// 311: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000313:  R_X86_64_64  _JIT_CONTINUE
// 31b: 48 89 df                      movq    %rbx, %rdi
// 31e: 4c 89 fe                      movq    %r15, %rsi
// 321: 4c 89 f2                      movq    %r14, %rdx
// 324: 48 83 c4 18                   addq    $0x18, %rsp
// 328: 5b                            popq    %rbx
// 329: 41 5c                         popq    %r12
// 32b: 41 5d                         popq    %r13
// 32d: 41 5e                         popq    %r14
// 32f: 41 5f                         popq    %r15
// 331: 5d                            popq    %rbp
// 332: ff e0                         jmpq    *%rax
// 334: 
static const unsigned char _LOAD_ATTR_SLOTplus_CALL_BUILTIN_O_code_body[821] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x34, 0x04, 0x4d, 0x85, 0xf6, 0x0f, 0x84, 0x3c, 0x01, 0x00, 0x00, 0x48, 0x89, 0xd5, 0x41, 0x8b, 0x06, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x54, 0x41, 0x89, 0x06, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x06, 0x01, 0x00, 0x00, 0x4d, 0x89, 0x77, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x44, 0x0f, 0xb7, 0xe1, 0x83, 0xe1, 0x01, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x49, 0x01, 0xcd, 0x4c, 0x89, 0xe2, 0x48, 0xf7, 0xda, 0x31, 0xf6, 0x66, 0x45, 0x85, 0xe4, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x41, 0x83, 0xfc, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x4b, 0x83, 0x3c, 0xef, 0x00, 0x49, 0xf7, 0xd4, 0x4c, 0x0f, 0x44, 0xe2, 0x4d, 0x8d, 0x34, 0xcf, 0x0f, 0x44, 0xf7, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x61, 0x48, 0x89, 0x6c, 0x24, 0x08, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x48, 0x63, 0xea, 0x48, 0x01, 0xcd, 0x49, 0x8b, 0x3c, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x47, 0x08, 0x75, 0x3b, 0x48, 0x8b, 0x47, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x31, 0x4c, 0x8b, 0x40, 0x08, 0x48, 0x8b, 0x74, 0x24, 0x08, 0x8b, 0x4e, 0x2c, 0x8d, 0x51, 0xff, 0x89, 0x56, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x3c, 0x24, 0x7e, 0x7b, 0x4f, 0x8b, 0x34, 0xe6, 0xf6, 0x40, 0x10, 0x20, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7f, 0x18, 0xe9, 0xa9, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x77, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0xe7, 0xfe, 0xff, 0xff, 0xe9, 0xe9, 0xfe, 0xff, 0xff, 0x4c, 0x89, 0x44, 0x24, 0x10, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x04, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x47, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x10, 0x4f, 0x8b, 0x34, 0xe6, 0xf6, 0x40, 0x10, 0x20, 0x0f, 0x84, 0x50, 0xff, 0xff, 0xff, 0x31, 0xff, 0x4c, 0x89, 0xf6, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0xff, 0x41, 0x2c, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x02, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0xff, 0x0f, 0x75, 0x0c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x8d, 0x34, 0xef, 0x4d, 0x85, 0xe4, 0x74, 0x2d, 0x4f, 0x8d, 0x3c, 0xef, 0x4d, 0x89, 0x26, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x2c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x19, 0x4d, 0x89, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x85, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_ATTR_SLOTplus_CALL_BUILTIN_O_code_holes[24] = {
    {0x1a, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x50, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x65, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x6f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xba, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x122, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0x182, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ba, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x22f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x239, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x254, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x265, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x280, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x28a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2a6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2e7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x313, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _LOAD_ATTR_SLOTplus_CALL_BUILTIN_O_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_CALL_BUILTIN_O_data_holes[1];

// _LOAD_ATTR_SLOTplus_CALL_INTRINSIC_1
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_CALL_INTRINSIC_1.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 26: 4d 85 ed                      testq   %r13, %r13
// 29: 74 27                         je      0x52 <_JIT_ENTRY+0x52>
// 2b: 49 89 d7                      movq    %rdx, %r15
// 2e: 41 8b 45 00                   movl    (%r13), %eax
// 32: ff c0                         incl    %eax
// 34: 75 49                         jne     0x7f <_JIT_ENTRY+0x7f>
// 36: 49 8b 04 24                   movq    (%r12), %rax
// 3a: 48 85 c0                      testq   %rax, %rax
// 3d: 7e 59                         jle     0x98 <_JIT_ENTRY+0x98>
// 3f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000041:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 49: 85 c0                         testl   %eax, %eax
// 4b: 79 7b                         jns     0xc8 <_JIT_ENTRY+0xc8>
// 4d: e9 82 00 00 00                jmp     0xd4 <_JIT_ENTRY+0xd4>
// 52: 49 29 de                      subq    %rbx, %r14
// 55: 49 83 c6 b8                   addq    $-0x48, %r14
// 59: 49 c1 ee 03                   shrq    $0x3, %r14
// 5d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 61: 48 8b 03                      movq    (%rbx), %rax
// 64: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000066:  R_X86_64_64  _JIT_TARGET
// 6e: 89 c9                         movl    %ecx, %ecx
// 70: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 74: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 7a: e9 75 01 00 00                jmp     0x1f4 <_JIT_ENTRY+0x1f4>
// 7f: 41 89 45 00                   movl    %eax, (%r13)
// 83: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000085:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 8d: ff d0                         callq   *%rax
// 8f: 49 8b 04 24                   movq    (%r12), %rax
// 93: 48 85 c0                      testq   %rax, %rax
// 96: 7f a7                         jg      0x3f <_JIT_ENTRY+0x3f>
// 98: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000009a:  R_X86_64_64  .rodata.str1.1
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _Py_NegativeRefcount
// ac: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// b1: 4c 89 e2                      movq    %r12, %rdx
// b4: ff d0                         callq   *%rax
// b6: 49 8b 04 24                   movq    (%r12), %rax
// ba: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000bc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c4: 85 c0                         testl   %eax, %eax
// c6: 78 0c                         js      0xd4 <_JIT_ENTRY+0xd4>
// c8: ff d1                         callq   *%rcx
// ca: 49 ff 0c 24                   decq    (%r12)
// ce: 0f 84 ca 00 00 00             je      0x19e <_JIT_ENTRY+0x19e>
// d4: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// d8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000da:  R_X86_64_64  _JIT_OPARG
// e2: a8 01                         testb   $0x1, %al
// e4: 74 07                         je      0xed <_JIT_ENTRY+0xed>
// e6: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// ed: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000000ef:  R_X86_64_64  _JIT_OPARG
// f7: 0f b7 c5                      movzwl  %bp, %eax
// fa: 83 e5 01                      andl    $0x1, %ebp
// fd: 4d 8b 6c ee f8                movq    -0x8(%r14,%rbp,8), %r13
// 102: 48 c1 e0 04                   shlq    $0x4, %rax
// 106: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000108:  R_X86_64_64  _PyIntrinsics_UnaryFunctions
// 110: 4c 89 ff                      movq    %r15, %rdi
// 113: 4c 89 ee                      movq    %r13, %rsi
// 116: ff 14 08                      callq   *(%rax,%rcx)
// 119: 49 89 c4                      movq    %rax, %r12
// 11c: 49 8b 45 00                   movq    (%r13), %rax
// 120: 48 85 c0                      testq   %rax, %rax
// 123: 7e 06                         jle     0x12b <_JIT_ENTRY+0x12b>
// 125: 85 c0                         testl   %eax, %eax
// 127: 79 28                         jns     0x151 <_JIT_ENTRY+0x151>
// 129: eb 38                         jmp     0x163 <_JIT_ENTRY+0x163>
// 12b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000012d:  R_X86_64_64  .rodata.str1.1
// 135: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000137:  R_X86_64_64  _Py_NegativeRefcount
// 13f: be 7e 02 00 00                movl    $0x27e, %esi            # imm = 0x27E
// 144: 4c 89 ea                      movq    %r13, %rdx
// 147: ff d0                         callq   *%rax
// 149: 49 8b 45 00                   movq    (%r13), %rax
// 14d: 85 c0                         testl   %eax, %eax
// 14f: 78 12                         js      0x163 <_JIT_ENTRY+0x163>
// 151: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000153:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 15b: ff d0                         callq   *%rax
// 15d: 49 ff 4d 00                   decq    (%r13)
// 161: 74 65                         je      0x1c8 <_JIT_ENTRY+0x1c8>
// 163: 4d 85 e4                      testq   %r12, %r12
// 166: 74 74                         je      0x1dc <_JIT_ENTRY+0x1dc>
// 168: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016a:  R_X86_64_64  _JIT_OPARG
// 172: 83 e0 01                      andl    $0x1, %eax
// 175: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 179: 4d 89 64 c6 f8                movq    %r12, -0x8(%r14,%rax,8)
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _JIT_CONTINUE
// 188: 48 89 df                      movq    %rbx, %rdi
// 18b: 4c 89 fa                      movq    %r15, %rdx
// 18e: 48 83 c4 08                   addq    $0x8, %rsp
// 192: 5b                            popq    %rbx
// 193: 41 5c                         popq    %r12
// 195: 41 5d                         popq    %r13
// 197: 41 5e                         popq    %r14
// 199: 41 5f                         popq    %r15
// 19b: 5d                            popq    %rbp
// 19c: ff e0                         jmpq    *%rax
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  _Py_Dealloc
// 1a8: 4c 89 e7                      movq    %r12, %rdi
// 1ab: ff d0                         callq   *%rax
// 1ad: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 1b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b3:  R_X86_64_64  _JIT_OPARG
// 1bb: a8 01                         testb   $0x1, %al
// 1bd: 0f 85 23 ff ff ff             jne     0xe6 <_JIT_ENTRY+0xe6>
// 1c3: e9 25 ff ff ff                jmp     0xed <_JIT_ENTRY+0xed>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_Dealloc
// 1d2: 4c 89 ef                      movq    %r13, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 4d 85 e4                      testq   %r12, %r12
// 1da: 75 8c                         jne     0x168 <_JIT_ENTRY+0x168>
// 1dc: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 1e0: 48 83 c0 f8                   addq    $-0x8, %rax
// 1e4: 48 29 d8                      subq    %rbx, %rax
// 1e7: 48 83 c0 b8                   addq    $-0x48, %rax
// 1eb: 48 c1 e8 03                   shrq    $0x3, %rax
// 1ef: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1f2: 31 c0                         xorl    %eax, %eax
// 1f4: 48 83 c4 08                   addq    $0x8, %rsp
// 1f8: 5b                            popq    %rbx
// 1f9: 41 5c                         popq    %r12
// 1fb: 41 5d                         popq    %r13
// 1fd: 41 5e                         popq    %r14
// 1ff: 41 5f                         popq    %r15
// 201: 5d                            popq    %rbp
// 202: c3                            retq
// 203: 
static const unsigned char _LOAD_ATTR_SLOTplus_CALL_INTRINSIC_1_code_body[516] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x27, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x49, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x59, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x79, 0x7b, 0xe9, 0x82, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x75, 0x01, 0x00, 0x00, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xa7, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x0c, 0xff, 0xd1, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xca, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc5, 0x83, 0xe5, 0x01, 0x4d, 0x8b, 0x6c, 0xee, 0xf8, 0x48, 0xc1, 0xe0, 0x04, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xee, 0xff, 0x14, 0x08, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x7e, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x65, 0x4d, 0x85, 0xe4, 0x74, 0x74, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x4d, 0x89, 0x64, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x23, 0xff, 0xff, 0xff, 0xe9, 0x25, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x75, 0x8c, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x83, 0xc0, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _LOAD_ATTR_SLOTplus_CALL_INTRINSIC_1_code_holes[19] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x41, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x66, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x9a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xbc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xda, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyIntrinsics_UnaryFunctions, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x137, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_CALL_INTRINSIC_1_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_CALL_INTRINSIC_1_data_holes[1];

// _LOAD_ATTR_SLOTplus_CALL_INTRINSIC_2
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_CALL_INTRINSIC_2.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f6                      movq    %rsi, %r14
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001b:  R_X86_64_64  _JIT_OPERAND
// 23: 0f b7 c0                      movzwl  %ax, %eax
// 26: 4d 8b 3c 04                   movq    (%r12,%rax), %r15
// 2a: 4d 85 ff                      testq   %r15, %r15
// 2d: 74 19                         je      0x48 <_JIT_ENTRY+0x48>
// 2f: 41 8b 07                      movl    (%r15), %eax
// 32: ff c0                         incl    %eax
// 34: 75 3f                         jne     0x75 <_JIT_ENTRY+0x75>
// 36: 49 8b 04 24                   movq    (%r12), %rax
// 3a: 48 85 c0                      testq   %rax, %rax
// 3d: 7e 4e                         jle     0x8d <_JIT_ENTRY+0x8d>
// 3f: 85 c0                         testl   %eax, %eax
// 41: 79 70                         jns     0xb3 <_JIT_ENTRY+0xb3>
// 43: e9 81 00 00 00                jmp     0xc9 <_JIT_ENTRY+0xc9>
// 48: 49 29 de                      subq    %rbx, %r14
// 4b: 49 83 c6 b8                   addq    $-0x48, %r14
// 4f: 49 c1 ee 03                   shrq    $0x3, %r14
// 53: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 57: 48 8b 03                      movq    (%rbx), %rax
// 5a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005c:  R_X86_64_64  _JIT_TARGET
// 64: 89 c9                         movl    %ecx, %ecx
// 66: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 6a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 70: e9 df 01 00 00                jmp     0x254 <_JIT_ENTRY+0x254>
// 75: 41 89 07                      movl    %eax, (%r15)
// 78: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007a:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 82: ff d0                         callq   *%rax
// 84: 49 8b 04 24                   movq    (%r12), %rax
// 88: 48 85 c0                      testq   %rax, %rax
// 8b: 7f b2                         jg      0x3f <_JIT_ENTRY+0x3f>
// 8d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008f:  R_X86_64_64  .rodata.str1.1
// 97: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000099:  R_X86_64_64  _Py_NegativeRefcount
// a1: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a6: 4c 89 e2                      movq    %r12, %rdx
// a9: ff d0                         callq   *%rax
// ab: 49 8b 04 24                   movq    (%r12), %rax
// af: 85 c0                         testl   %eax, %eax
// b1: 78 16                         js      0xc9 <_JIT_ENTRY+0xc9>
// b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bd: ff d0                         callq   *%rax
// bf: 49 ff 0c 24                   decq    (%r12)
// c3: 0f 84 a9 00 00 00             je      0x172 <_JIT_ENTRY+0x172>
// c9: 4d 89 7e f8                   movq    %r15, -0x8(%r14)
// cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cf:  R_X86_64_64  _JIT_OPARG
// d7: a8 01                         testb   $0x1, %al
// d9: 74 07                         je      0xe2 <_JIT_ENTRY+0xe2>
// db: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// e2: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 00000000000000e4:  R_X86_64_64  _JIT_OPARG
// ec: 41 0f b7 c7                   movzwl  %r15w, %eax
// f0: 41 83 e7 01                   andl    $0x1, %r15d
// f4: 4b 8b 6c fe f0                movq    -0x10(%r14,%r15,8), %rbp
// f9: 4f 8b 6c fe f8                movq    -0x8(%r14,%r15,8), %r13
// fe: 48 c1 e0 04                   shlq    $0x4, %rax
// 102: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000104:  R_X86_64_64  _PyIntrinsics_BinaryFunctions
// 10c: 48 8b 3c 24                   movq    (%rsp), %rdi
// 110: 48 89 ee                      movq    %rbp, %rsi
// 113: 4c 89 ea                      movq    %r13, %rdx
// 116: ff 14 08                      callq   *(%rax,%rcx)
// 119: 49 89 c4                      movq    %rax, %r12
// 11c: 48 8b 45 00                   movq    (%rbp), %rax
// 120: 48 85 c0                      testq   %rax, %rax
// 123: 7e 06                         jle     0x12b <_JIT_ENTRY+0x12b>
// 125: 85 c0                         testl   %eax, %eax
// 127: 79 28                         jns     0x151 <_JIT_ENTRY+0x151>
// 129: eb 38                         jmp     0x163 <_JIT_ENTRY+0x163>
// 12b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000012d:  R_X86_64_64  .rodata.str1.1
// 135: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000137:  R_X86_64_64  _Py_NegativeRefcount
// 13f: be 8d 02 00 00                movl    $0x28d, %esi            # imm = 0x28D
// 144: 48 89 ea                      movq    %rbp, %rdx
// 147: ff d0                         callq   *%rax
// 149: 48 8b 45 00                   movq    (%rbp), %rax
// 14d: 85 c0                         testl   %eax, %eax
// 14f: 78 12                         js      0x163 <_JIT_ENTRY+0x163>
// 151: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000153:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 15b: ff d0                         callq   *%rax
// 15d: 48 ff 4d 00                   decq    (%rbp)
// 161: 74 39                         je      0x19c <_JIT_ENTRY+0x19c>
// 163: 49 8b 45 00                   movq    (%r13), %rax
// 167: 48 85 c0                      testq   %rax, %rax
// 16a: 7e 48                         jle     0x1b4 <_JIT_ENTRY+0x1b4>
// 16c: 85 c0                         testl   %eax, %eax
// 16e: 79 6a                         jns     0x1da <_JIT_ENTRY+0x1da>
// 170: eb 7a                         jmp     0x1ec <_JIT_ENTRY+0x1ec>
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_Dealloc
// 17c: 4c 89 e7                      movq    %r12, %rdi
// 17f: ff d0                         callq   *%rax
// 181: 4d 89 7e f8                   movq    %r15, -0x8(%r14)
// 185: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000187:  R_X86_64_64  _JIT_OPARG
// 18f: a8 01                         testb   $0x1, %al
// 191: 0f 85 44 ff ff ff             jne     0xdb <_JIT_ENTRY+0xdb>
// 197: e9 46 ff ff ff                jmp     0xe2 <_JIT_ENTRY+0xe2>
// 19c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019e:  R_X86_64_64  _Py_Dealloc
// 1a6: 48 89 ef                      movq    %rbp, %rdi
// 1a9: ff d0                         callq   *%rax
// 1ab: 49 8b 45 00                   movq    (%r13), %rax
// 1af: 48 85 c0                      testq   %rax, %rax
// 1b2: 7f b8                         jg      0x16c <_JIT_ENTRY+0x16c>
// 1b4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b6:  R_X86_64_64  .rodata.str1.1
// 1be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c0:  R_X86_64_64  _Py_NegativeRefcount
// 1c8: be 8e 02 00 00                movl    $0x28e, %esi            # imm = 0x28E
// 1cd: 4c 89 ea                      movq    %r13, %rdx
// 1d0: ff d0                         callq   *%rax
// 1d2: 49 8b 45 00                   movq    (%r13), %rax
// 1d6: 85 c0                         testl   %eax, %eax
// 1d8: 78 12                         js      0x1ec <_JIT_ENTRY+0x1ec>
// 1da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e4: ff d0                         callq   *%rax
// 1e6: 49 ff 4d 00                   decq    (%r13)
// 1ea: 74 40                         je      0x22c <_JIT_ENTRY+0x22c>
// 1ec: 4d 85 e4                      testq   %r12, %r12
// 1ef: 74 4f                         je      0x240 <_JIT_ENTRY+0x240>
// 1f1: 4b 8d 34 fe                   leaq    (%r14,%r15,8), %rsi
// 1f5: 48 83 c6 f8                   addq    $-0x8, %rsi
// 1f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fb:  R_X86_64_64  _JIT_OPARG
// 203: 83 e0 01                      andl    $0x1, %eax
// 206: 4d 89 64 c6 f0                movq    %r12, -0x10(%r14,%rax,8)
// 20b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020d:  R_X86_64_64  _JIT_CONTINUE
// 215: 48 89 df                      movq    %rbx, %rdi
// 218: 48 8b 14 24                   movq    (%rsp), %rdx
// 21c: 48 83 c4 08                   addq    $0x8, %rsp
// 220: 5b                            popq    %rbx
// 221: 41 5c                         popq    %r12
// 223: 41 5d                         popq    %r13
// 225: 41 5e                         popq    %r14
// 227: 41 5f                         popq    %r15
// 229: 5d                            popq    %rbp
// 22a: ff e0                         jmpq    *%rax
// 22c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022e:  R_X86_64_64  _Py_Dealloc
// 236: 4c 89 ef                      movq    %r13, %rdi
// 239: ff d0                         callq   *%rax
// 23b: 4d 85 e4                      testq   %r12, %r12
// 23e: 75 b1                         jne     0x1f1 <_JIT_ENTRY+0x1f1>
// 240: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 244: 48 29 d8                      subq    %rbx, %rax
// 247: 48 83 c0 a8                   addq    $-0x58, %rax
// 24b: 48 c1 e8 03                   shrq    $0x3, %rax
// 24f: 89 43 40                      movl    %eax, 0x40(%rbx)
// 252: 31 c0                         xorl    %eax, %eax
// 254: 48 83 c4 08                   addq    $0x8, %rsp
// 258: 5b                            popq    %rbx
// 259: 41 5c                         popq    %r12
// 25b: 41 5d                         popq    %r13
// 25d: 41 5e                         popq    %r14
// 25f: 41 5f                         popq    %r15
// 261: 5d                            popq    %rbp
// 262: c3                            retq
// 263: 
static const unsigned char _LOAD_ATTR_SLOTplus_CALL_INTRINSIC_2_code_body[612] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x3c, 0x04, 0x4d, 0x85, 0xff, 0x74, 0x19, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x75, 0x3f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4e, 0x85, 0xc0, 0x79, 0x70, 0xe9, 0x81, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xdf, 0x01, 0x00, 0x00, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xa9, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x0f, 0xb7, 0xc7, 0x41, 0x83, 0xe7, 0x01, 0x4b, 0x8b, 0x6c, 0xfe, 0xf0, 0x4f, 0x8b, 0x6c, 0xfe, 0xf8, 0x48, 0xc1, 0xe0, 0x04, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x89, 0xee, 0x4c, 0x89, 0xea, 0xff, 0x14, 0x08, 0x49, 0x89, 0xc4, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x8d, 0x02, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x74, 0x39, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x48, 0x85, 0xc0, 0x79, 0x6a, 0xeb, 0x7a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x44, 0xff, 0xff, 0xff, 0xe9, 0x46, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xb8, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x8e, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x40, 0x4d, 0x85, 0xe4, 0x74, 0x4f, 0x4b, 0x8d, 0x34, 0xfe, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x4d, 0x89, 0x64, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x75, 0xb1, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xa8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _LOAD_ATTR_SLOTplus_CALL_INTRINSIC_2_code_holes[22] = {
    {0x1b, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x99, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xe4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyIntrinsics_BinaryFunctions, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x137, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x187, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x19e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x22e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_CALL_INTRINSIC_2_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_CALL_INTRINSIC_2_data_holes[1];

// _LOAD_ATTR_SLOTplus_CALL_ISINSTANCE
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_CALL_ISINSTANCE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 18: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001a:  R_X86_64_64  _JIT_OPERAND
// 22: 0f b7 c0                      movzwl  %ax, %eax
// 25: 4d 8b 3c 04                   movq    (%r12,%rax), %r15
// 29: 4d 85 ff                      testq   %r15, %r15
// 2c: 0f 84 04 01 00 00             je      0x136 <_JIT_ENTRY+0x136>
// 32: 49 89 d5                      movq    %rdx, %r13
// 35: 41 8b 07                      movl    (%r15), %eax
// 38: ff c0                         incl    %eax
// 3a: 75 0f                         jne     0x4b <_JIT_ENTRY+0x4b>
// 3c: 49 8b 04 24                   movq    (%r12), %rax
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 7e 1e                         jle     0x63 <_JIT_ENTRY+0x63>
// 45: 85 c0                         testl   %eax, %eax
// 47: 79 40                         jns     0x89 <_JIT_ENTRY+0x89>
// 49: eb 5f                         jmp     0xaa <_JIT_ENTRY+0xaa>
// 4b: 41 89 07                      movl    %eax, (%r15)
// 4e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000050:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 58: ff d0                         callq   *%rax
// 5a: 49 8b 04 24                   movq    (%r12), %rax
// 5e: 48 85 c0                      testq   %rax, %rax
// 61: 7f e2                         jg      0x45 <_JIT_ENTRY+0x45>
// 63: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000065:  R_X86_64_64  .rodata.str1.1
// 6d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006f:  R_X86_64_64  _Py_NegativeRefcount
// 77: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 7c: 4c 89 e2                      movq    %r12, %rdx
// 7f: ff d0                         callq   *%rax
// 81: 49 8b 04 24                   movq    (%r12), %rax
// 85: 85 c0                         testl   %eax, %eax
// 87: 78 21                         js      0xaa <_JIT_ENTRY+0xaa>
// 89: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 93: ff d0                         callq   *%rax
// 95: 49 ff 0c 24                   decq    (%r12)
// 99: 75 0f                         jne     0xaa <_JIT_ENTRY+0xaa>
// 9b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009d:  R_X86_64_64  _Py_Dealloc
// a5: 4c 89 e7                      movq    %r12, %rdi
// a8: ff d0                         callq   *%rax
// aa: 4d 89 7e f8                   movq    %r15, -0x8(%r14)
// ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b0:  R_X86_64_64  _JIT_OPARG
// b8: a8 01                         testb   $0x1, %al
// ba: 74 07                         je      0xc3 <_JIT_ENTRY+0xc3>
// bc: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// c3: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000000c5:  R_X86_64_64  _JIT_OPARG
// cd: 0f b7 ca                      movzwl  %dx, %ecx
// d0: 0f b7 c2                      movzwl  %dx, %eax
// d3: 83 e2 01                      andl    $0x1, %edx
// d6: 89 ce                         movl    %ecx, %esi
// d8: f7 d6                         notl    %esi
// da: 48 63 ee                      movslq  %esi, %rbp
// dd: 48 01 d5                      addq    %rdx, %rbp
// e0: 48 89 c6                      movq    %rax, %rsi
// e3: 48 f7 de                      negq    %rsi
// e6: 31 ff                         xorl    %edi, %edi
// e8: 66 83 f8 01                   cmpw    $0x1, %ax
// ec: 40 0f 94 c7                   sete    %dil
// f0: 45 31 c0                      xorl    %r8d, %r8d
// f3: 66 83 f8 02                   cmpw    $0x2, %ax
// f7: 41 0f 94 c0                   sete    %r8b
// fb: 49 83 3c ee 00                cmpq    $0x0, (%r14,%rbp,8)
// 100: 48 f7 d0                      notq    %rax
// 103: 48 0f 44 c6                   cmoveq  %rsi, %rax
// 107: 4d 8d 24 d6                   leaq    (%r14,%rdx,8), %r12
// 10b: 41 0f 44 f8                   cmovel  %r8d, %edi
// 10f: 40 80 ff 01                   cmpb    $0x1, %dil
// 113: 75 1e                         jne     0x133 <_JIT_ENTRY+0x133>
// 115: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 11a: 29 ce                         subl    %ecx, %esi
// 11c: 4c 63 fe                      movslq  %esi, %r15
// 11f: 49 01 d7                      addq    %rdx, %r15
// 122: 4b 8b 14 fe                   movq    (%r14,%r15,8), %rdx
// 126: 49 8b 4d 10                   movq    0x10(%r13), %rcx
// 12a: 48 3b 91 b8 54 06 00          cmpq    0x654b8(%rcx), %rdx
// 131: 74 3a                         je      0x16d <_JIT_ENTRY+0x16d>
// 133: 4d 89 e6                      movq    %r12, %r14
// 136: 49 29 de                      subq    %rbx, %r14
// 139: 49 83 c6 b8                   addq    $-0x48, %r14
// 13d: 49 c1 ee 03                   shrq    $0x3, %r14
// 141: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 145: 48 8b 03                      movq    (%rbx), %rax
// 148: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000014a:  R_X86_64_64  _JIT_TARGET
// 152: 89 c9                         movl    %ecx, %ecx
// 154: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 158: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 15e: 48 83 c4 28                   addq    $0x28, %rsp
// 162: 5b                            popq    %rbx
// 163: 41 5c                         popq    %r12
// 165: 41 5d                         popq    %r13
// 167: 41 5e                         popq    %r14
// 169: 41 5f                         popq    %r15
// 16b: 5d                            popq    %rbp
// 16c: c3                            retq
// 16d: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 172: 4c 89 6c 24 20                movq    %r13, 0x20(%rsp)
// 177: 4d 8b 2c c4                   movq    (%r12,%rax,8), %r13
// 17b: 49 8b 74 c4 08                movq    0x8(%r12,%rax,8), %rsi
// 180: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000182:  R_X86_64_64  PyObject_IsInstance
// 18a: 4c 89 ef                      movq    %r13, %rdi
// 18d: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 192: ff d0                         callq   *%rax
// 194: 85 c0                         testl   %eax, %eax
// 196: 0f 88 4e 01 00 00             js      0x2ea <_JIT_ENTRY+0x2ea>
// 19c: 89 c7                         movl    %eax, %edi
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  PyBool_FromLong
// 1a8: ff d0                         callq   *%rax
// 1aa: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 1af: 49 8b 45 00                   movq    (%r13), %rax
// 1b3: 48 85 c0                      testq   %rax, %rax
// 1b6: 7f 22                         jg      0x1da <_JIT_ENTRY+0x1da>
// 1b8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ba:  R_X86_64_64  .rodata.str1.1
// 1c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c4:  R_X86_64_64  _Py_NegativeRefcount
// 1cc: be 96 0b 00 00                movl    $0xb96, %esi            # imm = 0xB96
// 1d1: 4c 89 ea                      movq    %r13, %rdx
// 1d4: ff d0                         callq   *%rax
// 1d6: 49 8b 45 00                   movq    (%r13), %rax
// 1da: 85 c0                         testl   %eax, %eax
// 1dc: 4c 8b 64 24 18                movq    0x18(%rsp), %r12
// 1e1: 78 21                         js      0x204 <_JIT_ENTRY+0x204>
// 1e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ed: ff d0                         callq   *%rax
// 1ef: 49 ff 4d 00                   decq    (%r13)
// 1f3: 75 0f                         jne     0x204 <_JIT_ENTRY+0x204>
// 1f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f7:  R_X86_64_64  _Py_Dealloc
// 1ff: 4c 89 ef                      movq    %r13, %rdi
// 202: ff d0                         callq   *%rax
// 204: 49 8b 04 24                   movq    (%r12), %rax
// 208: 48 85 c0                      testq   %rax, %rax
// 20b: 7f 22                         jg      0x22f <_JIT_ENTRY+0x22f>
// 20d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000020f:  R_X86_64_64  .rodata.str1.1
// 217: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000219:  R_X86_64_64  _Py_NegativeRefcount
// 221: be 97 0b 00 00                movl    $0xb97, %esi            # imm = 0xB97
// 226: 4c 89 e2                      movq    %r12, %rdx
// 229: ff d0                         callq   *%rax
// 22b: 49 8b 04 24                   movq    (%r12), %rax
// 22f: 85 c0                         testl   %eax, %eax
// 231: 4c 8b 6c 24 20                movq    0x20(%rsp), %r13
// 236: 78 21                         js      0x259 <_JIT_ENTRY+0x259>
// 238: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 242: ff d0                         callq   *%rax
// 244: 49 ff 0c 24                   decq    (%r12)
// 248: 75 0f                         jne     0x259 <_JIT_ENTRY+0x259>
// 24a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024c:  R_X86_64_64  _Py_Dealloc
// 254: 4c 89 e7                      movq    %r12, %rdi
// 257: ff d0                         callq   *%rax
// 259: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 25e: 48 8b 00                      movq    (%rax), %rax
// 261: 48 85 c0                      testq   %rax, %rax
// 264: 7f 28                         jg      0x28e <_JIT_ENTRY+0x28e>
// 266: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000268:  R_X86_64_64  .rodata.str1.1
// 270: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000272:  R_X86_64_64  _Py_NegativeRefcount
// 27a: be 98 0b 00 00                movl    $0xb98, %esi            # imm = 0xB98
// 27f: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 284: ff d0                         callq   *%rax
// 286: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 28b: 48 8b 00                      movq    (%rax), %rax
// 28e: 85 c0                         testl   %eax, %eax
// 290: 78 22                         js      0x2b4 <_JIT_ENTRY+0x2b4>
// 292: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000294:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 29c: ff d0                         callq   *%rax
// 29e: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 2a3: 48 ff 0f                      decq    (%rdi)
// 2a6: 75 0c                         jne     0x2b4 <_JIT_ENTRY+0x2b4>
// 2a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002aa:  R_X86_64_64  _Py_Dealloc
// 2b2: ff d0                         callq   *%rax
// 2b4: 4f 8d 24 fe                   leaq    (%r14,%r15,8), %r12
// 2b8: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 2bd: 48 85 c0                      testq   %rax, %rax
// 2c0: 74 28                         je      0x2ea <_JIT_ENTRY+0x2ea>
// 2c2: 49 8d 34 ee                   leaq    (%r14,%rbp,8), %rsi
// 2c6: 49 89 04 24                   movq    %rax, (%r12)
// 2ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cc:  R_X86_64_64  _JIT_CONTINUE
// 2d4: 48 89 df                      movq    %rbx, %rdi
// 2d7: 4c 89 ea                      movq    %r13, %rdx
// 2da: 48 83 c4 28                   addq    $0x28, %rsp
// 2de: 5b                            popq    %rbx
// 2df: 41 5c                         popq    %r12
// 2e1: 41 5d                         popq    %r13
// 2e3: 41 5e                         popq    %r14
// 2e5: 41 5f                         popq    %r15
// 2e7: 5d                            popq    %rbp
// 2e8: ff e0                         jmpq    *%rax
// 2ea: 49 29 dc                      subq    %rbx, %r12
// 2ed: 49 83 c4 b8                   addq    $-0x48, %r12
// 2f1: 49 c1 ec 03                   shrq    $0x3, %r12
// 2f5: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 2f9: 31 c0                         xorl    %eax, %eax
// 2fb: e9 5e fe ff ff                jmp     0x15e <_JIT_ENTRY+0x15e>
// 300: 
static const unsigned char _LOAD_ATTR_SLOTplus_CALL_ISINSTANCE_code_body[769] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x3c, 0x04, 0x4d, 0x85, 0xff, 0x0f, 0x84, 0x04, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd5, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x5f, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xca, 0x0f, 0xb7, 0xc2, 0x83, 0xe2, 0x01, 0x89, 0xce, 0xf7, 0xd6, 0x48, 0x63, 0xee, 0x48, 0x01, 0xd5, 0x48, 0x89, 0xc6, 0x48, 0xf7, 0xde, 0x31, 0xff, 0x66, 0x83, 0xf8, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x45, 0x31, 0xc0, 0x66, 0x83, 0xf8, 0x02, 0x41, 0x0f, 0x94, 0xc0, 0x49, 0x83, 0x3c, 0xee, 0x00, 0x48, 0xf7, 0xd0, 0x48, 0x0f, 0x44, 0xc6, 0x4d, 0x8d, 0x24, 0xd6, 0x41, 0x0f, 0x44, 0xf8, 0x40, 0x80, 0xff, 0x01, 0x75, 0x1e, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xce, 0x4c, 0x63, 0xfe, 0x49, 0x01, 0xd7, 0x4b, 0x8b, 0x14, 0xfe, 0x49, 0x8b, 0x4d, 0x10, 0x48, 0x3b, 0x91, 0xb8, 0x54, 0x06, 0x00, 0x74, 0x3a, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x6c, 0x24, 0x20, 0x4d, 0x8b, 0x2c, 0xc4, 0x49, 0x8b, 0x74, 0xc4, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0x74, 0x24, 0x18, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x88, 0x4e, 0x01, 0x00, 0x00, 0x89, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x96, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x64, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x97, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x20, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x28, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x98, 0x0b, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x00, 0x85, 0xc0, 0x78, 0x22, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0xff, 0x0f, 0x75, 0x0c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4f, 0x8d, 0x24, 0xfe, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x74, 0x28, 0x49, 0x8d, 0x34, 0xee, 0x49, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x5e, 0xfe, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_CALL_ISINSTANCE_code_holes[25] = {
    {0x1a, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x50, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x65, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x6f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x9d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xb0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xc5, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x14a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x182, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_IsInstance, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyBool_FromLong, 0x0},
    {0x1ba, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1f7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x20f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x219, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x23a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x24c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x268, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x272, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x294, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2aa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2cc, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_CALL_ISINSTANCE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_CALL_ISINSTANCE_data_holes[1];

// _LOAD_ATTR_SLOTplus_CALL_LEN
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_CALL_LEN.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 18: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001a:  R_X86_64_64  _JIT_OPERAND
// 22: 0f b7 c0                      movzwl  %ax, %eax
// 25: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 29: 4d 85 ed                      testq   %r13, %r13
// 2c: 0f 84 08 01 00 00             je      0x13a <_JIT_ENTRY+0x13a>
// 32: 48 89 d5                      movq    %rdx, %rbp
// 35: 41 8b 45 00                   movl    (%r13), %eax
// 39: ff c0                         incl    %eax
// 3b: 75 0f                         jne     0x4c <_JIT_ENTRY+0x4c>
// 3d: 49 8b 04 24                   movq    (%r12), %rax
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 7e 1f                         jle     0x65 <_JIT_ENTRY+0x65>
// 46: 85 c0                         testl   %eax, %eax
// 48: 79 41                         jns     0x8b <_JIT_ENTRY+0x8b>
// 4a: eb 60                         jmp     0xac <_JIT_ENTRY+0xac>
// 4c: 41 89 45 00                   movl    %eax, (%r13)
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 5a: ff d0                         callq   *%rax
// 5c: 49 8b 04 24                   movq    (%r12), %rax
// 60: 48 85 c0                      testq   %rax, %rax
// 63: 7f e1                         jg      0x46 <_JIT_ENTRY+0x46>
// 65: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000067:  R_X86_64_64  .rodata.str1.1
// 6f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000071:  R_X86_64_64  _Py_NegativeRefcount
// 79: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 7e: 4c 89 e2                      movq    %r12, %rdx
// 81: ff d0                         callq   *%rax
// 83: 49 8b 04 24                   movq    (%r12), %rax
// 87: 85 c0                         testl   %eax, %eax
// 89: 78 21                         js      0xac <_JIT_ENTRY+0xac>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 95: ff d0                         callq   *%rax
// 97: 49 ff 0c 24                   decq    (%r12)
// 9b: 75 0f                         jne     0xac <_JIT_ENTRY+0xac>
// 9d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009f:  R_X86_64_64  _Py_Dealloc
// a7: 4c 89 e7                      movq    %r12, %rdi
// aa: ff d0                         callq   *%rax
// ac: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  _JIT_OPARG
// ba: a8 01                         testb   $0x1, %al
// bc: 74 07                         je      0xc5 <_JIT_ENTRY+0xc5>
// be: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// c5: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000000c7:  R_X86_64_64  _JIT_OPARG
// cf: 0f b7 ca                      movzwl  %dx, %ecx
// d2: 0f b7 c2                      movzwl  %dx, %eax
// d5: 83 e2 01                      andl    $0x1, %edx
// d8: 89 ce                         movl    %ecx, %esi
// da: f7 d6                         notl    %esi
// dc: 4c 63 ee                      movslq  %esi, %r13
// df: 49 01 d5                      addq    %rdx, %r13
// e2: 48 89 c6                      movq    %rax, %rsi
// e5: 48 f7 de                      negq    %rsi
// e8: 31 ff                         xorl    %edi, %edi
// ea: 66 85 c0                      testw   %ax, %ax
// ed: 40 0f 94 c7                   sete    %dil
// f1: 45 31 c0                      xorl    %r8d, %r8d
// f4: 66 83 f8 01                   cmpw    $0x1, %ax
// f8: 41 0f 94 c0                   sete    %r8b
// fc: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 101: 48 f7 d0                      notq    %rax
// 104: 48 0f 44 c6                   cmoveq  %rsi, %rax
// 108: 4d 8d 3c d6                   leaq    (%r14,%rdx,8), %r15
// 10c: 41 0f 44 f8                   cmovel  %r8d, %edi
// 110: 40 80 ff 01                   cmpb    $0x1, %dil
// 114: 75 21                         jne     0x137 <_JIT_ENTRY+0x137>
// 116: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 11b: 29 ce                         subl    %ecx, %esi
// 11d: 4c 63 e6                      movslq  %esi, %r12
// 120: 49 01 d4                      addq    %rdx, %r12
// 123: 48 89 ea                      movq    %rbp, %rdx
// 126: 4b 8b 2c e6                   movq    (%r14,%r12,8), %rbp
// 12a: 48 8b 4a 10                   movq    0x10(%rdx), %rcx
// 12e: 48 3b a9 c0 54 06 00          cmpq    0x654c0(%rcx), %rbp
// 135: 74 3a                         je      0x171 <_JIT_ENTRY+0x171>
// 137: 4d 89 fe                      movq    %r15, %r14
// 13a: 49 29 de                      subq    %rbx, %r14
// 13d: 49 83 c6 b8                   addq    $-0x48, %r14
// 141: 49 c1 ee 03                   shrq    $0x3, %r14
// 145: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 149: 48 8b 03                      movq    (%rbx), %rax
// 14c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000014e:  R_X86_64_64  _JIT_TARGET
// 156: 89 c9                         movl    %ecx, %ecx
// 158: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 15c: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 162: 48 83 c4 18                   addq    $0x18, %rsp
// 166: 5b                            popq    %rbx
// 167: 41 5c                         popq    %r12
// 169: 41 5d                         popq    %r13
// 16b: 41 5e                         popq    %r14
// 16d: 41 5f                         popq    %r15
// 16f: 5d                            popq    %rbp
// 170: c3                            retq
// 171: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 176: 49 8b 3c c7                   movq    (%r15,%rax,8), %rdi
// 17a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017c:  R_X86_64_64  PyObject_Size
// 184: 48 89 3c 24                   movq    %rdi, (%rsp)
// 188: ff d0                         callq   *%rax
// 18a: 48 85 c0                      testq   %rax, %rax
// 18d: 0f 88 f1 00 00 00             js      0x284 <_JIT_ENTRY+0x284>
// 193: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000195:  R_X86_64_64  PyLong_FromSsize_t
// 19d: 48 89 c7                      movq    %rax, %rdi
// 1a0: ff d1                         callq   *%rcx
// 1a2: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 1a7: 48 8b 45 00                   movq    (%rbp), %rax
// 1ab: 48 85 c0                      testq   %rax, %rax
// 1ae: 7f 22                         jg      0x1d2 <_JIT_ENTRY+0x1d2>
// 1b0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b2:  R_X86_64_64  .rodata.str1.1
// 1ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bc:  R_X86_64_64  _Py_NegativeRefcount
// 1c4: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 1c9: 48 89 ea                      movq    %rbp, %rdx
// 1cc: ff d0                         callq   *%rax
// 1ce: 48 8b 45 00                   movq    (%rbp), %rax
// 1d2: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 00000000000001d4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1dc: 85 c0                         testl   %eax, %eax
// 1de: 78 18                         js      0x1f8 <_JIT_ENTRY+0x1f8>
// 1e0: 41 ff d7                      callq   *%r15
// 1e3: 48 ff 4d 00                   decq    (%rbp)
// 1e7: 75 0f                         jne     0x1f8 <_JIT_ENTRY+0x1f8>
// 1e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001eb:  R_X86_64_64  _Py_Dealloc
// 1f3: 48 89 ef                      movq    %rbp, %rdi
// 1f6: ff d0                         callq   *%rax
// 1f8: 48 8b 04 24                   movq    (%rsp), %rax
// 1fc: 48 8b 00                      movq    (%rax), %rax
// 1ff: 48 85 c0                      testq   %rax, %rax
// 202: 7f 26                         jg      0x22a <_JIT_ENTRY+0x22a>
// 204: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000206:  R_X86_64_64  .rodata.str1.1
// 20e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000210:  R_X86_64_64  _Py_NegativeRefcount
// 218: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 21d: 48 8b 2c 24                   movq    (%rsp), %rbp
// 221: 48 89 ea                      movq    %rbp, %rdx
// 224: ff d0                         callq   *%rax
// 226: 48 8b 45 00                   movq    (%rbp), %rax
// 22a: 85 c0                         testl   %eax, %eax
// 22c: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 231: 78 1c                         js      0x24f <_JIT_ENTRY+0x24f>
// 233: 41 ff d7                      callq   *%r15
// 236: 48 8b 04 24                   movq    (%rsp), %rax
// 23a: 48 ff 08                      decq    (%rax)
// 23d: 75 10                         jne     0x24f <_JIT_ENTRY+0x24f>
// 23f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000241:  R_X86_64_64  _Py_Dealloc
// 249: 48 8b 3c 24                   movq    (%rsp), %rdi
// 24d: ff d0                         callq   *%rax
// 24f: 4f 8d 3c e6                   leaq    (%r14,%r12,8), %r15
// 253: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 258: 48 85 c0                      testq   %rax, %rax
// 25b: 74 27                         je      0x284 <_JIT_ENTRY+0x284>
// 25d: 4b 8d 34 ee                   leaq    (%r14,%r13,8), %rsi
// 261: 49 89 07                      movq    %rax, (%r15)
// 264: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000266:  R_X86_64_64  _JIT_CONTINUE
// 26e: 48 89 df                      movq    %rbx, %rdi
// 271: 48 89 ea                      movq    %rbp, %rdx
// 274: 48 83 c4 18                   addq    $0x18, %rsp
// 278: 5b                            popq    %rbx
// 279: 41 5c                         popq    %r12
// 27b: 41 5d                         popq    %r13
// 27d: 41 5e                         popq    %r14
// 27f: 41 5f                         popq    %r15
// 281: 5d                            popq    %rbp
// 282: ff e0                         jmpq    *%rax
// 284: 49 29 df                      subq    %rbx, %r15
// 287: 49 83 c7 b8                   addq    $-0x48, %r15
// 28b: 49 c1 ef 03                   shrq    $0x3, %r15
// 28f: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 293: 31 c0                         xorl    %eax, %eax
// 295: e9 c8 fe ff ff                jmp     0x162 <_JIT_ENTRY+0x162>
// 29a: 
static const unsigned char _LOAD_ATTR_SLOTplus_CALL_LEN_code_body[667] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x08, 0x01, 0x00, 0x00, 0x48, 0x89, 0xd5, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1f, 0x85, 0xc0, 0x79, 0x41, 0xeb, 0x60, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xca, 0x0f, 0xb7, 0xc2, 0x83, 0xe2, 0x01, 0x89, 0xce, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x49, 0x01, 0xd5, 0x48, 0x89, 0xc6, 0x48, 0xf7, 0xde, 0x31, 0xff, 0x66, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc7, 0x45, 0x31, 0xc0, 0x66, 0x83, 0xf8, 0x01, 0x41, 0x0f, 0x94, 0xc0, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x48, 0xf7, 0xd0, 0x48, 0x0f, 0x44, 0xc6, 0x4d, 0x8d, 0x3c, 0xd6, 0x41, 0x0f, 0x44, 0xf8, 0x40, 0x80, 0xff, 0x01, 0x75, 0x21, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xce, 0x4c, 0x63, 0xe6, 0x49, 0x01, 0xd4, 0x48, 0x89, 0xea, 0x4b, 0x8b, 0x2c, 0xe6, 0x48, 0x8b, 0x4a, 0x10, 0x48, 0x3b, 0xa9, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x3a, 0x4d, 0x89, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x8b, 0x3c, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x3c, 0x24, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0xf1, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd7, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x8b, 0x2c, 0x24, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x1c, 0x41, 0xff, 0xd7, 0x48, 0x8b, 0x04, 0x24, 0x48, 0xff, 0x08, 0x75, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0xd0, 0x4f, 0x8d, 0x3c, 0xe6, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x74, 0x27, 0x4b, 0x8d, 0x34, 0xee, 0x49, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0xe9, 0xc8, 0xfe, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_CALL_LEN_code_holes[20] = {
    {0x1a, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x67, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x71, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x9f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xc7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1eb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x206, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x210, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x241, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x266, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_CALL_LEN_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_CALL_LEN_data_holes[1];

// _LOAD_ATTR_SLOTplus_CALL_METHOD_DESCRIPTOR_FAST
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_CALL_METHOD_DESCRIPTOR_FAST.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 18: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001a:  R_X86_64_64  _JIT_OPERAND
// 22: 0f b7 c0                      movzwl  %ax, %eax
// 25: 4d 8b 34 04                   movq    (%r12,%rax), %r14
// 29: 4d 85 f6                      testq   %r14, %r14
// 2c: 74 19                         je      0x47 <_JIT_ENTRY+0x47>
// 2e: 49 89 d5                      movq    %rdx, %r13
// 31: 41 8b 06                      movl    (%r14), %eax
// 34: ff c0                         incl    %eax
// 36: 75 17                         jne     0x4f <_JIT_ENTRY+0x4f>
// 38: 49 8b 04 24                   movq    (%r12), %rax
// 3c: 48 85 c0                      testq   %rax, %rax
// 3f: 7e 26                         jle     0x67 <_JIT_ENTRY+0x67>
// 41: 85 c0                         testl   %eax, %eax
// 43: 79 48                         jns     0x8d <_JIT_ENTRY+0x8d>
// 45: eb 5c                         jmp     0xa3 <_JIT_ENTRY+0xa3>
// 47: 4c 89 f8                      movq    %r15, %rax
// 4a: e9 e4 00 00 00                jmp     0x133 <_JIT_ENTRY+0x133>
// 4f: 41 89 06                      movl    %eax, (%r14)
// 52: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000054:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 5c: ff d0                         callq   *%rax
// 5e: 49 8b 04 24                   movq    (%r12), %rax
// 62: 48 85 c0                      testq   %rax, %rax
// 65: 7f da                         jg      0x41 <_JIT_ENTRY+0x41>
// 67: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000069:  R_X86_64_64  .rodata.str1.1
// 71: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000073:  R_X86_64_64  _Py_NegativeRefcount
// 7b: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 80: 4c 89 e2                      movq    %r12, %rdx
// 83: ff d0                         callq   *%rax
// 85: 49 8b 04 24                   movq    (%r12), %rax
// 89: 85 c0                         testl   %eax, %eax
// 8b: 78 16                         js      0xa3 <_JIT_ENTRY+0xa3>
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: ff d0                         callq   *%rax
// 99: 49 ff 0c 24                   decq    (%r12)
// 9d: 0f 84 c6 00 00 00             je      0x169 <_JIT_ENTRY+0x169>
// a3: 4d 89 77 f8                   movq    %r14, -0x8(%r15)
// a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a9:  R_X86_64_64  _JIT_OPARG
// b1: a8 01                         testb   $0x1, %al
// b3: 74 07                         je      0xbc <_JIT_ENTRY+0xbc>
// b5: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// bc: 0f b7 f0                      movzwl  %ax, %esi
// bf: 0f b7 d0                      movzwl  %ax, %edx
// c2: 89 c7                         movl    %eax, %edi
// c4: 83 e7 01                      andl    $0x1, %edi
// c7: 49 8d 04 ff                   leaq    (%r15,%rdi,8), %rax
// cb: 89 f1                         movl    %esi, %ecx
// cd: f7 d1                         notl    %ecx
// cf: 48 63 e9                      movslq  %ecx, %rbp
// d2: 48 01 fd                      addq    %rdi, %rbp
// d5: 49 8b 0c ef                   movq    (%r15,%rbp,8), %rcx
// d9: 41 b8 fe ff ff ff             movl    $0xfffffffe, %r8d       # imm = 0xFFFFFFFE
// df: 41 29 f0                      subl    %esi, %r8d
// e2: 4d 63 f0                      movslq  %r8d, %r14
// e5: 49 01 fe                      addq    %rdi, %r14
// e8: 48 89 d7                      movq    %rdx, %rdi
// eb: 48 f7 df                      negq    %rdi
// ee: 44 8d 66 01                   leal    0x1(%rsi), %r12d
// f2: 48 85 c9                      testq   %rcx, %rcx
// f5: 48 f7 d2                      notq    %rdx
// f8: 48 0f 44 d7                   cmoveq  %rdi, %rdx
// fc: 44 0f 44 e6                   cmovel  %esi, %r12d
// 100: 4f 8b 0c f7                   movq    (%r15,%r14,8), %r9
// 104: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000106:  R_X86_64_64  PyMethodDescr_Type
// 10e: 49 39 71 08                   cmpq    %rsi, 0x8(%r9)
// 112: 75 1f                         jne     0x133 <_JIT_ENTRY+0x133>
// 114: 4d 8b 41 28                   movq    0x28(%r9), %r8
// 118: 41 81 78 10 80 00 00 00       cmpl    $0x80, 0x10(%r8)
// 120: 75 11                         jne     0x133 <_JIT_ENTRY+0x133>
// 122: 48 8d 34 d0                   leaq    (%rax,%rdx,8), %rsi
// 126: 48 8b 3e                      movq    (%rsi), %rdi
// 129: 48 8b 57 08                   movq    0x8(%rdi), %rdx
// 12d: 49 3b 51 10                   cmpq    0x10(%r9), %rdx
// 131: 74 60                         je      0x193 <_JIT_ENTRY+0x193>
// 133: 48 29 d8                      subq    %rbx, %rax
// 136: 48 83 c0 b8                   addq    $-0x48, %rax
// 13a: 48 c1 e8 03                   shrq    $0x3, %rax
// 13e: 89 43 40                      movl    %eax, 0x40(%rbx)
// 141: 48 8b 03                      movq    (%rbx), %rax
// 144: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000146:  R_X86_64_64  _JIT_TARGET
// 14e: 89 c9                         movl    %ecx, %ecx
// 150: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 154: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 15a: 48 83 c4 28                   addq    $0x28, %rsp
// 15e: 5b                            popq    %rbx
// 15f: 41 5c                         popq    %r12
// 161: 41 5d                         popq    %r13
// 163: 41 5e                         popq    %r14
// 165: 41 5f                         popq    %r15
// 167: 5d                            popq    %rbp
// 168: c3                            retq
// 169: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016b:  R_X86_64_64  _Py_Dealloc
// 173: 4c 89 e7                      movq    %r12, %rdi
// 176: ff d0                         callq   *%rax
// 178: 4d 89 77 f8                   movq    %r14, -0x8(%r15)
// 17c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017e:  R_X86_64_64  _JIT_OPARG
// 186: a8 01                         testb   $0x1, %al
// 188: 0f 85 27 ff ff ff             jne     0xb5 <_JIT_ENTRY+0xb5>
// 18e: e9 29 ff ff ff                jmp     0xbc <_JIT_ENTRY+0xbc>
// 193: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 198: 4c 89 6c 24 18                movq    %r13, 0x18(%rsp)
// 19d: 48 85 c9                      testq   %rcx, %rcx
// 1a0: 41 0f 94 c5                   sete    %r13b
// 1a4: 41 8d 44 24 ff                leal    -0x1(%r12), %eax
// 1a9: 48 89 34 24                   movq    %rsi, (%rsp)
// 1ad: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1b1: 48 8d 71 08                   leaq    0x8(%rcx), %rsi
// 1b5: 48 63 d0                      movslq  %eax, %rdx
// 1b8: 41 ff 50 08                   callq   *0x8(%r8)
// 1bc: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1c0: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _JIT_OPARG
// 1cf: 66 85 c0                      testw   %ax, %ax
// 1d2: 0f 94 c0                      sete    %al
// 1d5: 41 84 c5                      testb   %al, %r13b
// 1d8: 0f 84 ae 00 00 00             je      0x28c <_JIT_ENTRY+0x28c>
// 1de: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 1e3: 49 8b 45 00                   movq    (%r13), %rax
// 1e7: 48 85 c0                      testq   %rax, %rax
// 1ea: 4c 8b 64 24 18                movq    0x18(%rsp), %r12
// 1ef: 7f 22                         jg      0x213 <_JIT_ENTRY+0x213>
// 1f1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f3:  R_X86_64_64  .rodata.str1.1
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_NegativeRefcount
// 205: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 20a: 4c 89 ea                      movq    %r13, %rdx
// 20d: ff d0                         callq   *%rax
// 20f: 49 8b 45 00                   movq    (%r13), %rax
// 213: 85 c0                         testl   %eax, %eax
// 215: 78 21                         js      0x238 <_JIT_ENTRY+0x238>
// 217: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000219:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 221: ff d0                         callq   *%rax
// 223: 49 ff 4d 00                   decq    (%r13)
// 227: 75 0f                         jne     0x238 <_JIT_ENTRY+0x238>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _Py_Dealloc
// 233: 4c 89 ef                      movq    %r13, %rdi
// 236: ff d0                         callq   *%rax
// 238: 4b 8d 04 f7                   leaq    (%r15,%r14,8), %rax
// 23c: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 241: 48 85 c9                      testq   %rcx, %rcx
// 244: 74 31                         je      0x277 <_JIT_ENTRY+0x277>
// 246: 4d 8d 3c ef                   leaq    (%r15,%rbp,8), %r15
// 24a: 48 89 08                      movq    %rcx, (%rax)
// 24d: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 252: 48 8b 00                      movq    (%rax), %rax
// 255: 84 c0                         testb   %al, %al
// 257: 0f 84 db 00 00 00             je      0x338 <_JIT_ENTRY+0x338>
// 25d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025f:  R_X86_64_64  _Py_HandlePending
// 267: 4c 89 e7                      movq    %r12, %rdi
// 26a: ff d0                         callq   *%rax
// 26c: 85 c0                         testl   %eax, %eax
// 26e: 0f 84 c4 00 00 00             je      0x338 <_JIT_ENTRY+0x338>
// 274: 4c 89 f8                      movq    %r15, %rax
// 277: 48 29 d8                      subq    %rbx, %rax
// 27a: 48 83 c0 b8                   addq    $-0x48, %rax
// 27e: 48 c1 e8 03                   shrq    $0x3, %rax
// 282: 89 43 40                      movl    %eax, 0x40(%rbx)
// 285: 31 c0                         xorl    %eax, %eax
// 287: e9 ce fe ff ff                jmp     0x15a <_JIT_ENTRY+0x15a>
// 28c: 41 83 fc 02                   cmpl    $0x2, %r12d
// 290: b8 01 00 00 00                movl    $0x1, %eax
// 295: 41 0f 43 c4                   cmovael %r12d, %eax
// 299: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 29e: 45 31 e4                      xorl    %r12d, %r12d
// 2a1: eb 1b                         jmp     0x2be <_JIT_ENTRY+0x2be>
// 2a3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// 2b0: 49 ff c4                      incq    %r12
// 2b3: 4c 39 64 24 20                cmpq    %r12, 0x20(%rsp)
// 2b8: 0f 84 20 ff ff ff             je      0x1de <_JIT_ENTRY+0x1de>
// 2be: 4e 8b 2c e1                   movq    (%rcx,%r12,8), %r13
// 2c2: 49 8b 45 00                   movq    (%r13), %rax
// 2c6: 48 85 c0                      testq   %rax, %rax
// 2c9: 7e 15                         jle     0x2e0 <_JIT_ENTRY+0x2e0>
// 2cb: 85 c0                         testl   %eax, %eax
// 2cd: 78 e1                         js      0x2b0 <_JIT_ENTRY+0x2b0>
// 2cf: eb 39                         jmp     0x30a <_JIT_ENTRY+0x30a>
// 2d1: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// 2e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002e2:  R_X86_64_64  .rodata.str1.1
// 2ea: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 2ef: 4c 89 ea                      movq    %r13, %rdx
// 2f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f4:  R_X86_64_64  _Py_NegativeRefcount
// 2fc: ff d0                         callq   *%rax
// 2fe: 48 8b 0c 24                   movq    (%rsp), %rcx
// 302: 49 8b 45 00                   movq    (%r13), %rax
// 306: 85 c0                         testl   %eax, %eax
// 308: 78 a6                         js      0x2b0 <_JIT_ENTRY+0x2b0>
// 30a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 314: ff d0                         callq   *%rax
// 316: 48 8b 0c 24                   movq    (%rsp), %rcx
// 31a: 49 ff 4d 00                   decq    (%r13)
// 31e: 75 90                         jne     0x2b0 <_JIT_ENTRY+0x2b0>
// 320: 4c 89 ef                      movq    %r13, %rdi
// 323: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000325:  R_X86_64_64  _Py_Dealloc
// 32d: ff d0                         callq   *%rax
// 32f: 48 8b 0c 24                   movq    (%rsp), %rcx
// 333: e9 78 ff ff ff                jmp     0x2b0 <_JIT_ENTRY+0x2b0>
// 338: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033a:  R_X86_64_64  _JIT_CONTINUE
// 342: 48 89 df                      movq    %rbx, %rdi
// 345: 4c 89 fe                      movq    %r15, %rsi
// 348: 4c 89 e2                      movq    %r12, %rdx
// 34b: 48 83 c4 28                   addq    $0x28, %rsp
// 34f: 5b                            popq    %rbx
// 350: 41 5c                         popq    %r12
// 352: 41 5d                         popq    %r13
// 354: 41 5e                         popq    %r14
// 356: 41 5f                         popq    %r15
// 358: 5d                            popq    %rbp
// 359: ff e0                         jmpq    *%rax
// 35b: 
static const unsigned char _LOAD_ATTR_SLOTplus_CALL_METHOD_DESCRIPTOR_FAST_code_body[860] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x34, 0x04, 0x4d, 0x85, 0xf6, 0x74, 0x19, 0x49, 0x89, 0xd5, 0x41, 0x8b, 0x06, 0xff, 0xc0, 0x75, 0x17, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x26, 0x85, 0xc0, 0x79, 0x48, 0xeb, 0x5c, 0x4c, 0x89, 0xf8, 0xe9, 0xe4, 0x00, 0x00, 0x00, 0x41, 0x89, 0x06, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xda, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xc6, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x77, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0x0f, 0xb7, 0xd0, 0x89, 0xc7, 0x83, 0xe7, 0x01, 0x49, 0x8d, 0x04, 0xff, 0x89, 0xf1, 0xf7, 0xd1, 0x48, 0x63, 0xe9, 0x48, 0x01, 0xfd, 0x49, 0x8b, 0x0c, 0xef, 0x41, 0xb8, 0xfe, 0xff, 0xff, 0xff, 0x41, 0x29, 0xf0, 0x4d, 0x63, 0xf0, 0x49, 0x01, 0xfe, 0x48, 0x89, 0xd7, 0x48, 0xf7, 0xdf, 0x44, 0x8d, 0x66, 0x01, 0x48, 0x85, 0xc9, 0x48, 0xf7, 0xd2, 0x48, 0x0f, 0x44, 0xd7, 0x44, 0x0f, 0x44, 0xe6, 0x4f, 0x8b, 0x0c, 0xf7, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x71, 0x08, 0x75, 0x1f, 0x4d, 0x8b, 0x41, 0x28, 0x41, 0x81, 0x78, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x11, 0x48, 0x8d, 0x34, 0xd0, 0x48, 0x8b, 0x3e, 0x48, 0x8b, 0x57, 0x08, 0x49, 0x3b, 0x51, 0x10, 0x74, 0x60, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x77, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x27, 0xff, 0xff, 0xff, 0xe9, 0x29, 0xff, 0xff, 0xff, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x6c, 0x24, 0x18, 0x48, 0x85, 0xc9, 0x41, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x44, 0x24, 0xff, 0x48, 0x89, 0x34, 0x24, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x8d, 0x71, 0x08, 0x48, 0x63, 0xd0, 0x41, 0xff, 0x50, 0x08, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc5, 0x0f, 0x84, 0xae, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x4c, 0x8b, 0x64, 0x24, 0x18, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xf7, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x74, 0x31, 0x4d, 0x8d, 0x3c, 0xef, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xdb, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xc4, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xce, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfc, 0x02, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xc4, 0x48, 0x89, 0x44, 0x24, 0x20, 0x45, 0x31, 0xe4, 0xeb, 0x1b, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc4, 0x4c, 0x39, 0x64, 0x24, 0x20, 0x0f, 0x84, 0x20, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x2c, 0xe1, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x15, 0x85, 0xc0, 0x78, 0xe1, 0xeb, 0x39, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xa6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x90, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0xe9, 0x78, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_ATTR_SLOTplus_CALL_METHOD_DESCRIPTOR_FAST_code_holes[22] = {
    {0x1a, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x54, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x73, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x16b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x17e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x219, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x25f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x2e2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x30c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x325, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x33a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_CALL_METHOD_DESCRIPTOR_FAST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_CALL_METHOD_DESCRIPTOR_FAST_data_holes[1];

// _LOAD_ATTR_SLOTplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 18: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001a:  R_X86_64_64  _JIT_OPERAND
// 22: 0f b7 c0                      movzwl  %ax, %eax
// 25: 4d 8b 34 04                   movq    (%r12,%rax), %r14
// 29: 4d 85 f6                      testq   %r14, %r14
// 2c: 74 19                         je      0x47 <_JIT_ENTRY+0x47>
// 2e: 49 89 d5                      movq    %rdx, %r13
// 31: 41 8b 06                      movl    (%r14), %eax
// 34: ff c0                         incl    %eax
// 36: 75 17                         jne     0x4f <_JIT_ENTRY+0x4f>
// 38: 49 8b 04 24                   movq    (%r12), %rax
// 3c: 48 85 c0                      testq   %rax, %rax
// 3f: 7e 26                         jle     0x67 <_JIT_ENTRY+0x67>
// 41: 85 c0                         testl   %eax, %eax
// 43: 79 48                         jns     0x8d <_JIT_ENTRY+0x8d>
// 45: eb 5c                         jmp     0xa3 <_JIT_ENTRY+0xa3>
// 47: 4c 89 f8                      movq    %r15, %rax
// 4a: e9 e4 00 00 00                jmp     0x133 <_JIT_ENTRY+0x133>
// 4f: 41 89 06                      movl    %eax, (%r14)
// 52: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000054:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 5c: ff d0                         callq   *%rax
// 5e: 49 8b 04 24                   movq    (%r12), %rax
// 62: 48 85 c0                      testq   %rax, %rax
// 65: 7f da                         jg      0x41 <_JIT_ENTRY+0x41>
// 67: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000069:  R_X86_64_64  .rodata.str1.1
// 71: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000073:  R_X86_64_64  _Py_NegativeRefcount
// 7b: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 80: 4c 89 e2                      movq    %r12, %rdx
// 83: ff d0                         callq   *%rax
// 85: 49 8b 04 24                   movq    (%r12), %rax
// 89: 85 c0                         testl   %eax, %eax
// 8b: 78 16                         js      0xa3 <_JIT_ENTRY+0xa3>
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: ff d0                         callq   *%rax
// 99: 49 ff 0c 24                   decq    (%r12)
// 9d: 0f 84 c6 00 00 00             je      0x169 <_JIT_ENTRY+0x169>
// a3: 4d 89 77 f8                   movq    %r14, -0x8(%r15)
// a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a9:  R_X86_64_64  _JIT_OPARG
// b1: a8 01                         testb   $0x1, %al
// b3: 74 07                         je      0xbc <_JIT_ENTRY+0xbc>
// b5: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// bc: 0f b7 f0                      movzwl  %ax, %esi
// bf: 0f b7 d0                      movzwl  %ax, %edx
// c2: 89 c7                         movl    %eax, %edi
// c4: 83 e7 01                      andl    $0x1, %edi
// c7: 49 8d 04 ff                   leaq    (%r15,%rdi,8), %rax
// cb: 89 f1                         movl    %esi, %ecx
// cd: f7 d1                         notl    %ecx
// cf: 48 63 e9                      movslq  %ecx, %rbp
// d2: 48 01 fd                      addq    %rdi, %rbp
// d5: 49 8b 0c ef                   movq    (%r15,%rbp,8), %rcx
// d9: 41 b8 fe ff ff ff             movl    $0xfffffffe, %r8d       # imm = 0xFFFFFFFE
// df: 41 29 f0                      subl    %esi, %r8d
// e2: 4d 63 f0                      movslq  %r8d, %r14
// e5: 49 01 fe                      addq    %rdi, %r14
// e8: 48 89 d7                      movq    %rdx, %rdi
// eb: 48 f7 df                      negq    %rdi
// ee: 44 8d 66 01                   leal    0x1(%rsi), %r12d
// f2: 48 85 c9                      testq   %rcx, %rcx
// f5: 48 f7 d2                      notq    %rdx
// f8: 48 0f 44 d7                   cmoveq  %rdi, %rdx
// fc: 44 0f 44 e6                   cmovel  %esi, %r12d
// 100: 4f 8b 0c f7                   movq    (%r15,%r14,8), %r9
// 104: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000106:  R_X86_64_64  PyMethodDescr_Type
// 10e: 49 39 71 08                   cmpq    %rsi, 0x8(%r9)
// 112: 75 1f                         jne     0x133 <_JIT_ENTRY+0x133>
// 114: 4d 8b 41 28                   movq    0x28(%r9), %r8
// 118: 41 81 78 10 82 00 00 00       cmpl    $0x82, 0x10(%r8)
// 120: 75 11                         jne     0x133 <_JIT_ENTRY+0x133>
// 122: 48 8d 34 d0                   leaq    (%rax,%rdx,8), %rsi
// 126: 48 8b 3e                      movq    (%rsi), %rdi
// 129: 48 8b 57 08                   movq    0x8(%rdi), %rdx
// 12d: 49 3b 51 10                   cmpq    0x10(%r9), %rdx
// 131: 74 60                         je      0x193 <_JIT_ENTRY+0x193>
// 133: 48 29 d8                      subq    %rbx, %rax
// 136: 48 83 c0 b8                   addq    $-0x48, %rax
// 13a: 48 c1 e8 03                   shrq    $0x3, %rax
// 13e: 89 43 40                      movl    %eax, 0x40(%rbx)
// 141: 48 8b 03                      movq    (%rbx), %rax
// 144: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000146:  R_X86_64_64  _JIT_TARGET
// 14e: 89 c9                         movl    %ecx, %ecx
// 150: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 154: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 15a: 48 83 c4 28                   addq    $0x28, %rsp
// 15e: 5b                            popq    %rbx
// 15f: 41 5c                         popq    %r12
// 161: 41 5d                         popq    %r13
// 163: 41 5e                         popq    %r14
// 165: 41 5f                         popq    %r15
// 167: 5d                            popq    %rbp
// 168: c3                            retq
// 169: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016b:  R_X86_64_64  _Py_Dealloc
// 173: 4c 89 e7                      movq    %r12, %rdi
// 176: ff d0                         callq   *%rax
// 178: 4d 89 77 f8                   movq    %r14, -0x8(%r15)
// 17c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017e:  R_X86_64_64  _JIT_OPARG
// 186: a8 01                         testb   $0x1, %al
// 188: 0f 85 27 ff ff ff             jne     0xb5 <_JIT_ENTRY+0xb5>
// 18e: e9 29 ff ff ff                jmp     0xbc <_JIT_ENTRY+0xbc>
// 193: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 198: 4c 89 6c 24 18                movq    %r13, 0x18(%rsp)
// 19d: 48 85 c9                      testq   %rcx, %rcx
// 1a0: 41 0f 94 c5                   sete    %r13b
// 1a4: 41 8d 44 24 ff                leal    -0x1(%r12), %eax
// 1a9: 48 89 34 24                   movq    %rsi, (%rsp)
// 1ad: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1b1: 48 8d 71 08                   leaq    0x8(%rcx), %rsi
// 1b5: 48 63 d0                      movslq  %eax, %rdx
// 1b8: 31 c9                         xorl    %ecx, %ecx
// 1ba: 41 ff 50 08                   callq   *0x8(%r8)
// 1be: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1c2: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 1c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c9:  R_X86_64_64  _JIT_OPARG
// 1d1: 66 85 c0                      testw   %ax, %ax
// 1d4: 0f 94 c0                      sete    %al
// 1d7: 41 84 c5                      testb   %al, %r13b
// 1da: 0f 84 ae 00 00 00             je      0x28e <_JIT_ENTRY+0x28e>
// 1e0: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 1e5: 49 8b 45 00                   movq    (%r13), %rax
// 1e9: 48 85 c0                      testq   %rax, %rax
// 1ec: 4c 8b 64 24 18                movq    0x18(%rsp), %r12
// 1f1: 7f 22                         jg      0x215 <_JIT_ENTRY+0x215>
// 1f3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f5:  R_X86_64_64  .rodata.str1.1
// 1fd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ff:  R_X86_64_64  _Py_NegativeRefcount
// 207: be e8 0b 00 00                movl    $0xbe8, %esi            # imm = 0xBE8
// 20c: 4c 89 ea                      movq    %r13, %rdx
// 20f: ff d0                         callq   *%rax
// 211: 49 8b 45 00                   movq    (%r13), %rax
// 215: 85 c0                         testl   %eax, %eax
// 217: 78 21                         js      0x23a <_JIT_ENTRY+0x23a>
// 219: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 223: ff d0                         callq   *%rax
// 225: 49 ff 4d 00                   decq    (%r13)
// 229: 75 0f                         jne     0x23a <_JIT_ENTRY+0x23a>
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_Dealloc
// 235: 4c 89 ef                      movq    %r13, %rdi
// 238: ff d0                         callq   *%rax
// 23a: 4b 8d 04 f7                   leaq    (%r15,%r14,8), %rax
// 23e: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 243: 48 85 c9                      testq   %rcx, %rcx
// 246: 74 31                         je      0x279 <_JIT_ENTRY+0x279>
// 248: 4d 8d 3c ef                   leaq    (%r15,%rbp,8), %r15
// 24c: 48 89 08                      movq    %rcx, (%rax)
// 24f: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 254: 48 8b 00                      movq    (%rax), %rax
// 257: 84 c0                         testb   %al, %al
// 259: 0f 84 d9 00 00 00             je      0x338 <_JIT_ENTRY+0x338>
// 25f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000261:  R_X86_64_64  _Py_HandlePending
// 269: 4c 89 e7                      movq    %r12, %rdi
// 26c: ff d0                         callq   *%rax
// 26e: 85 c0                         testl   %eax, %eax
// 270: 0f 84 c2 00 00 00             je      0x338 <_JIT_ENTRY+0x338>
// 276: 4c 89 f8                      movq    %r15, %rax
// 279: 48 29 d8                      subq    %rbx, %rax
// 27c: 48 83 c0 b8                   addq    $-0x48, %rax
// 280: 48 c1 e8 03                   shrq    $0x3, %rax
// 284: 89 43 40                      movl    %eax, 0x40(%rbx)
// 287: 31 c0                         xorl    %eax, %eax
// 289: e9 cc fe ff ff                jmp     0x15a <_JIT_ENTRY+0x15a>
// 28e: 41 83 fc 02                   cmpl    $0x2, %r12d
// 292: b8 01 00 00 00                movl    $0x1, %eax
// 297: 41 0f 43 c4                   cmovael %r12d, %eax
// 29b: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 2a0: 45 31 e4                      xorl    %r12d, %r12d
// 2a3: eb 19                         jmp     0x2be <_JIT_ENTRY+0x2be>
// 2a5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// 2b0: 49 ff c4                      incq    %r12
// 2b3: 4c 39 64 24 20                cmpq    %r12, 0x20(%rsp)
// 2b8: 0f 84 22 ff ff ff             je      0x1e0 <_JIT_ENTRY+0x1e0>
// 2be: 4e 8b 2c e1                   movq    (%rcx,%r12,8), %r13
// 2c2: 49 8b 45 00                   movq    (%r13), %rax
// 2c6: 48 85 c0                      testq   %rax, %rax
// 2c9: 7e 15                         jle     0x2e0 <_JIT_ENTRY+0x2e0>
// 2cb: 85 c0                         testl   %eax, %eax
// 2cd: 78 e1                         js      0x2b0 <_JIT_ENTRY+0x2b0>
// 2cf: eb 39                         jmp     0x30a <_JIT_ENTRY+0x30a>
// 2d1: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// 2e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002e2:  R_X86_64_64  .rodata.str1.1
// 2ea: be e6 0b 00 00                movl    $0xbe6, %esi            # imm = 0xBE6
// 2ef: 4c 89 ea                      movq    %r13, %rdx
// 2f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f4:  R_X86_64_64  _Py_NegativeRefcount
// 2fc: ff d0                         callq   *%rax
// 2fe: 48 8b 0c 24                   movq    (%rsp), %rcx
// 302: 49 8b 45 00                   movq    (%r13), %rax
// 306: 85 c0                         testl   %eax, %eax
// 308: 78 a6                         js      0x2b0 <_JIT_ENTRY+0x2b0>
// 30a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 314: ff d0                         callq   *%rax
// 316: 48 8b 0c 24                   movq    (%rsp), %rcx
// 31a: 49 ff 4d 00                   decq    (%r13)
// 31e: 75 90                         jne     0x2b0 <_JIT_ENTRY+0x2b0>
// 320: 4c 89 ef                      movq    %r13, %rdi
// 323: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000325:  R_X86_64_64  _Py_Dealloc
// 32d: ff d0                         callq   *%rax
// 32f: 48 8b 0c 24                   movq    (%rsp), %rcx
// 333: e9 78 ff ff ff                jmp     0x2b0 <_JIT_ENTRY+0x2b0>
// 338: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033a:  R_X86_64_64  _JIT_CONTINUE
// 342: 48 89 df                      movq    %rbx, %rdi
// 345: 4c 89 fe                      movq    %r15, %rsi
// 348: 4c 89 e2                      movq    %r12, %rdx
// 34b: 48 83 c4 28                   addq    $0x28, %rsp
// 34f: 5b                            popq    %rbx
// 350: 41 5c                         popq    %r12
// 352: 41 5d                         popq    %r13
// 354: 41 5e                         popq    %r14
// 356: 41 5f                         popq    %r15
// 358: 5d                            popq    %rbp
// 359: ff e0                         jmpq    *%rax
// 35b: 
static const unsigned char _LOAD_ATTR_SLOTplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS_code_body[860] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x34, 0x04, 0x4d, 0x85, 0xf6, 0x74, 0x19, 0x49, 0x89, 0xd5, 0x41, 0x8b, 0x06, 0xff, 0xc0, 0x75, 0x17, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x26, 0x85, 0xc0, 0x79, 0x48, 0xeb, 0x5c, 0x4c, 0x89, 0xf8, 0xe9, 0xe4, 0x00, 0x00, 0x00, 0x41, 0x89, 0x06, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xda, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xc6, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x77, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0x0f, 0xb7, 0xd0, 0x89, 0xc7, 0x83, 0xe7, 0x01, 0x49, 0x8d, 0x04, 0xff, 0x89, 0xf1, 0xf7, 0xd1, 0x48, 0x63, 0xe9, 0x48, 0x01, 0xfd, 0x49, 0x8b, 0x0c, 0xef, 0x41, 0xb8, 0xfe, 0xff, 0xff, 0xff, 0x41, 0x29, 0xf0, 0x4d, 0x63, 0xf0, 0x49, 0x01, 0xfe, 0x48, 0x89, 0xd7, 0x48, 0xf7, 0xdf, 0x44, 0x8d, 0x66, 0x01, 0x48, 0x85, 0xc9, 0x48, 0xf7, 0xd2, 0x48, 0x0f, 0x44, 0xd7, 0x44, 0x0f, 0x44, 0xe6, 0x4f, 0x8b, 0x0c, 0xf7, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x71, 0x08, 0x75, 0x1f, 0x4d, 0x8b, 0x41, 0x28, 0x41, 0x81, 0x78, 0x10, 0x82, 0x00, 0x00, 0x00, 0x75, 0x11, 0x48, 0x8d, 0x34, 0xd0, 0x48, 0x8b, 0x3e, 0x48, 0x8b, 0x57, 0x08, 0x49, 0x3b, 0x51, 0x10, 0x74, 0x60, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x77, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x27, 0xff, 0xff, 0xff, 0xe9, 0x29, 0xff, 0xff, 0xff, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x6c, 0x24, 0x18, 0x48, 0x85, 0xc9, 0x41, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x44, 0x24, 0xff, 0x48, 0x89, 0x34, 0x24, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x8d, 0x71, 0x08, 0x48, 0x63, 0xd0, 0x31, 0xc9, 0x41, 0xff, 0x50, 0x08, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc5, 0x0f, 0x84, 0xae, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x4c, 0x8b, 0x64, 0x24, 0x18, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe8, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xf7, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x74, 0x31, 0x4d, 0x8d, 0x3c, 0xef, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xd9, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xc2, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xcc, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfc, 0x02, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xc4, 0x48, 0x89, 0x44, 0x24, 0x20, 0x45, 0x31, 0xe4, 0xeb, 0x19, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc4, 0x4c, 0x39, 0x64, 0x24, 0x20, 0x0f, 0x84, 0x22, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x2c, 0xe1, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x15, 0x85, 0xc0, 0x78, 0xe1, 0xeb, 0x39, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe6, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xa6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x90, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0xe9, 0x78, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_ATTR_SLOTplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS_code_holes[22] = {
    {0x1a, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x54, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x73, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x16b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x17e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1ff, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x21b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x261, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x2e2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x30c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x325, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x33a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS_data_holes[1];

// _LOAD_ATTR_SLOTplus_CALL_METHOD_DESCRIPTOR_NOARGS
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_CALL_METHOD_DESCRIPTOR_NOARGS.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 18: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001a:  R_X86_64_64  _JIT_OPERAND
// 22: 0f b7 c0                      movzwl  %ax, %eax
// 25: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 29: 4d 85 ed                      testq   %r13, %r13
// 2c: 0f 84 d9 01 00 00             je      0x20b <_JIT_ENTRY+0x20b>
// 32: 49 89 d6                      movq    %rdx, %r14
// 35: 41 8b 45 00                   movl    (%r13), %eax
// 39: ff c0                         incl    %eax
// 3b: 75 0f                         jne     0x4c <_JIT_ENTRY+0x4c>
// 3d: 49 8b 04 24                   movq    (%r12), %rax
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 7e 1f                         jle     0x65 <_JIT_ENTRY+0x65>
// 46: 85 c0                         testl   %eax, %eax
// 48: 79 41                         jns     0x8b <_JIT_ENTRY+0x8b>
// 4a: eb 60                         jmp     0xac <_JIT_ENTRY+0xac>
// 4c: 41 89 45 00                   movl    %eax, (%r13)
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 5a: ff d0                         callq   *%rax
// 5c: 49 8b 04 24                   movq    (%r12), %rax
// 60: 48 85 c0                      testq   %rax, %rax
// 63: 7f e1                         jg      0x46 <_JIT_ENTRY+0x46>
// 65: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000067:  R_X86_64_64  .rodata.str1.1
// 6f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000071:  R_X86_64_64  _Py_NegativeRefcount
// 79: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 7e: 4c 89 e2                      movq    %r12, %rdx
// 81: ff d0                         callq   *%rax
// 83: 49 8b 04 24                   movq    (%r12), %rax
// 87: 85 c0                         testl   %eax, %eax
// 89: 78 21                         js      0xac <_JIT_ENTRY+0xac>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 95: ff d0                         callq   *%rax
// 97: 49 ff 0c 24                   decq    (%r12)
// 9b: 75 0f                         jne     0xac <_JIT_ENTRY+0xac>
// 9d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009f:  R_X86_64_64  _Py_Dealloc
// a7: 4c 89 e7                      movq    %r12, %rdi
// aa: ff d0                         callq   *%rax
// ac: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  _JIT_OPARG
// ba: a8 01                         testb   $0x1, %al
// bc: 74 07                         je      0xc5 <_JIT_ENTRY+0xc5>
// be: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// c5: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000000c7:  R_X86_64_64  _JIT_OPARG
// cf: 0f b7 ca                      movzwl  %dx, %ecx
// d2: 0f b7 c2                      movzwl  %dx, %eax
// d5: 83 e2 01                      andl    $0x1, %edx
// d8: 89 ce                         movl    %ecx, %esi
// da: f7 d6                         notl    %esi
// dc: 4c 63 ee                      movslq  %esi, %r13
// df: 49 01 d5                      addq    %rdx, %r13
// e2: 48 89 c6                      movq    %rax, %rsi
// e5: 48 f7 de                      negq    %rsi
// e8: 31 ff                         xorl    %edi, %edi
// ea: 66 85 c0                      testw   %ax, %ax
// ed: 40 0f 94 c7                   sete    %dil
// f1: 45 31 c0                      xorl    %r8d, %r8d
// f4: 66 83 f8 01                   cmpw    $0x1, %ax
// f8: 41 0f 94 c0                   sete    %r8b
// fc: 4b 83 3c ef 00                cmpq    $0x0, (%r15,%r13,8)
// 101: 48 f7 d0                      notq    %rax
// 104: 48 0f 44 c6                   cmoveq  %rsi, %rax
// 108: 49 8d 2c d7                   leaq    (%r15,%rdx,8), %rbp
// 10c: 41 0f 44 f8                   cmovel  %r8d, %edi
// 110: 40 80 ff 01                   cmpb    $0x1, %dil
// 114: 0f 85 ee 00 00 00             jne     0x208 <_JIT_ENTRY+0x208>
// 11a: 4c 89 f7                      movq    %r14, %rdi
// 11d: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 122: 29 ce                         subl    %ecx, %esi
// 124: 4c 63 f6                      movslq  %esi, %r14
// 127: 49 01 d6                      addq    %rdx, %r14
// 12a: 4f 8b 24 f7                   movq    (%r15,%r14,8), %r12
// 12e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000130:  R_X86_64_64  PyMethodDescr_Type
// 138: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 13d: 0f 85 c5 00 00 00             jne     0x208 <_JIT_ENTRY+0x208>
// 143: 48 8b 54 c5 00                movq    (%rbp,%rax,8), %rdx
// 148: 48 8b 42 08                   movq    0x8(%rdx), %rax
// 14c: 49 3b 44 24 10                cmpq    0x10(%r12), %rax
// 151: 0f 85 b1 00 00 00             jne     0x208 <_JIT_ENTRY+0x208>
// 157: 49 8b 44 24 28                movq    0x28(%r12), %rax
// 15c: 83 78 10 04                   cmpl    $0x4, 0x10(%rax)
// 160: 0f 85 a2 00 00 00             jne     0x208 <_JIT_ENTRY+0x208>
// 166: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 16a: 8b 47 2c                      movl    0x2c(%rdi), %eax
// 16d: 8d 48 ff                      leal    -0x1(%rax), %ecx
// 170: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 175: 89 4f 2c                      movl    %ecx, 0x2c(%rdi)
// 178: 85 c0                         testl   %eax, %eax
// 17a: 0f 8e c2 00 00 00             jle     0x242 <_JIT_ENTRY+0x242>
// 180: 4b 8d 2c f7                   leaq    (%r15,%r14,8), %rbp
// 184: 48 89 d7                      movq    %rdx, %rdi
// 187: 49 89 d6                      movq    %rdx, %r14
// 18a: 31 f6                         xorl    %esi, %esi
// 18c: 41 ff d0                      callq   *%r8
// 18f: 48 89 04 24                   movq    %rax, (%rsp)
// 193: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 198: ff 40 2c                      incl    0x2c(%rax)
// 19b: bf 10 0c 00 00                movl    $0xc10, %edi            # imm = 0xC10
// 1a0: 4c 89 f6                      movq    %r14, %rsi
// 1a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a5:  R_X86_64_64  .text+0x2b0
// 1ad: ff d0                         callq   *%rax
// 1af: bf 11 0c 00 00                movl    $0xc11, %edi            # imm = 0xC11
// 1b4: 4c 89 e6                      movq    %r12, %rsi
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  .text+0x2b0
// 1c1: ff d0                         callq   *%rax
// 1c3: 48 8b 04 24                   movq    (%rsp), %rax
// 1c7: 48 85 c0                      testq   %rax, %rax
// 1ca: 0f 84 a7 00 00 00             je      0x277 <_JIT_ENTRY+0x277>
// 1d0: 4f 8d 3c ef                   leaq    (%r15,%r13,8), %r15
// 1d4: 48 89 45 00                   movq    %rax, (%rbp)
// 1d8: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 1dd: 49 8b 46 10                   movq    0x10(%r14), %rax
// 1e1: 48 8b 00                      movq    (%rax), %rax
// 1e4: 84 c0                         testb   %al, %al
// 1e6: 0f 84 9d 00 00 00             je      0x289 <_JIT_ENTRY+0x289>
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _Py_HandlePending
// 1f6: 4c 89 f7                      movq    %r14, %rdi
// 1f9: ff d0                         callq   *%rax
// 1fb: 85 c0                         testl   %eax, %eax
// 1fd: 0f 84 86 00 00 00             je      0x289 <_JIT_ENTRY+0x289>
// 203: 4c 89 fd                      movq    %r15, %rbp
// 206: eb 6f                         jmp     0x277 <_JIT_ENTRY+0x277>
// 208: 49 89 ef                      movq    %rbp, %r15
// 20b: 49 29 df                      subq    %rbx, %r15
// 20e: 49 83 c7 b8                   addq    $-0x48, %r15
// 212: 49 c1 ef 03                   shrq    $0x3, %r15
// 216: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 21a: 48 8b 03                      movq    (%rbx), %rax
// 21d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000021f:  R_X86_64_64  _JIT_TARGET
// 227: 89 c9                         movl    %ecx, %ecx
// 229: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 22d: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 233: 48 83 c4 18                   addq    $0x18, %rsp
// 237: 5b                            popq    %rbx
// 238: 41 5c                         popq    %r12
// 23a: 41 5d                         popq    %r13
// 23c: 41 5e                         popq    %r14
// 23e: 41 5f                         popq    %r15
// 240: 5d                            popq    %rbp
// 241: c3                            retq
// 242: 48 89 14 24                   movq    %rdx, (%rsp)
// 246: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000248:  R_X86_64_64  .rodata.str1.1+0x39
// 250: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000252:  R_X86_64_64  _Py_CheckRecursiveCall
// 25a: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 25f: 4c 89 44 24 10                movq    %r8, 0x10(%rsp)
// 264: ff d0                         callq   *%rax
// 266: 4c 8b 44 24 10                movq    0x10(%rsp), %r8
// 26b: 48 8b 14 24                   movq    (%rsp), %rdx
// 26f: 85 c0                         testl   %eax, %eax
// 271: 0f 84 09 ff ff ff             je      0x180 <_JIT_ENTRY+0x180>
// 277: 48 29 dd                      subq    %rbx, %rbp
// 27a: 48 83 c5 b8                   addq    $-0x48, %rbp
// 27e: 48 c1 ed 03                   shrq    $0x3, %rbp
// 282: 89 6b 40                      movl    %ebp, 0x40(%rbx)
// 285: 31 c0                         xorl    %eax, %eax
// 287: eb aa                         jmp     0x233 <_JIT_ENTRY+0x233>
// 289: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028b:  R_X86_64_64  _JIT_CONTINUE
// 293: 48 89 df                      movq    %rbx, %rdi
// 296: 4c 89 fe                      movq    %r15, %rsi
// 299: 4c 89 f2                      movq    %r14, %rdx
// 29c: 48 83 c4 18                   addq    $0x18, %rsp
// 2a0: 5b                            popq    %rbx
// 2a1: 41 5c                         popq    %r12
// 2a3: 41 5d                         popq    %r13
// 2a5: 41 5e                         popq    %r14
// 2a7: 41 5f                         popq    %r15
// 2a9: 5d                            popq    %rbp
// 2aa: ff e0                         jmpq    *%rax
// 2ac: 0f 1f 40 00                   nopl    (%rax)
// 
// 00000000000002b0 <Py_DECREF>:
// 2b0: 53                            pushq   %rbx
// 2b1: 48 89 f3                      movq    %rsi, %rbx
// 2b4: 48 8b 06                      movq    (%rsi), %rax
// 2b7: 48 85 c0                      testq   %rax, %rax
// 2ba: 7e 06                         jle     0x2c2 <Py_DECREF+0x12>
// 2bc: 85 c0                         testl   %eax, %eax
// 2be: 79 24                         jns     0x2e4 <Py_DECREF+0x34>
// 2c0: eb 33                         jmp     0x2f5 <Py_DECREF+0x45>
// 2c2: 89 fe                         movl    %edi, %esi
// 2c4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002c6:  R_X86_64_64  .rodata.str1.1
// 2ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d0:  R_X86_64_64  _Py_NegativeRefcount
// 2d8: 48 89 da                      movq    %rbx, %rdx
// 2db: ff d0                         callq   *%rax
// 2dd: 48 8b 03                      movq    (%rbx), %rax
// 2e0: 85 c0                         testl   %eax, %eax
// 2e2: 78 11                         js      0x2f5 <Py_DECREF+0x45>
// 2e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2ee: ff d0                         callq   *%rax
// 2f0: 48 ff 0b                      decq    (%rbx)
// 2f3: 74 02                         je      0x2f7 <Py_DECREF+0x47>
// 2f5: 5b                            popq    %rbx
// 2f6: c3                            retq
// 2f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f9:  R_X86_64_64  _Py_Dealloc
// 301: 48 89 df                      movq    %rbx, %rdi
// 304: 5b                            popq    %rbx
// 305: ff e0                         jmpq    *%rax
// 307: 
static const unsigned char _LOAD_ATTR_SLOTplus_CALL_METHOD_DESCRIPTOR_NOARGS_code_body[776] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xd9, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd6, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1f, 0x85, 0xc0, 0x79, 0x41, 0xeb, 0x60, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xca, 0x0f, 0xb7, 0xc2, 0x83, 0xe2, 0x01, 0x89, 0xce, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x49, 0x01, 0xd5, 0x48, 0x89, 0xc6, 0x48, 0xf7, 0xde, 0x31, 0xff, 0x66, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc7, 0x45, 0x31, 0xc0, 0x66, 0x83, 0xf8, 0x01, 0x41, 0x0f, 0x94, 0xc0, 0x4b, 0x83, 0x3c, 0xef, 0x00, 0x48, 0xf7, 0xd0, 0x48, 0x0f, 0x44, 0xc6, 0x49, 0x8d, 0x2c, 0xd7, 0x41, 0x0f, 0x44, 0xf8, 0x40, 0x80, 0xff, 0x01, 0x0f, 0x85, 0xee, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xce, 0x4c, 0x63, 0xf6, 0x49, 0x01, 0xd6, 0x4f, 0x8b, 0x24, 0xf7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x0f, 0x85, 0xc5, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x54, 0xc5, 0x00, 0x48, 0x8b, 0x42, 0x08, 0x49, 0x3b, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xb1, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x28, 0x83, 0x78, 0x10, 0x04, 0x0f, 0x85, 0xa2, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x47, 0x2c, 0x8d, 0x48, 0xff, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x89, 0x4f, 0x2c, 0x85, 0xc0, 0x0f, 0x8e, 0xc2, 0x00, 0x00, 0x00, 0x4b, 0x8d, 0x2c, 0xf7, 0x48, 0x89, 0xd7, 0x49, 0x89, 0xd6, 0x31, 0xf6, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0xff, 0x40, 0x2c, 0xbf, 0x10, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xbf, 0x11, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xa7, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x3c, 0xef, 0x48, 0x89, 0x45, 0x00, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0x9d, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x86, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xfd, 0xeb, 0x6f, 0x49, 0x89, 0xef, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x14, 0x24, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0x44, 0x24, 0x10, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x14, 0x24, 0x85, 0xc0, 0x0f, 0x84, 0x09, 0xff, 0xff, 0xff, 0x48, 0x29, 0xdd, 0x48, 0x83, 0xc5, 0xb8, 0x48, 0xc1, 0xed, 0x03, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xeb, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x0f, 0x1f, 0x40, 0x00, 0x53, 0x48, 0x89, 0xf3, 0x48, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x24, 0xeb, 0x33, 0x89, 0xfe, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x74, 0x02, 0x5b, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x5b, 0xff, 0xe0};
static const Hole _LOAD_ATTR_SLOTplus_CALL_METHOD_DESCRIPTOR_NOARGS_code_holes[21] = {
    {0x1a, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x67, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x71, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x9f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xc7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x2b0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x2b0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x21f, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x248, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x252, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x28b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2c6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2e6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2f9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _LOAD_ATTR_SLOTplus_CALL_METHOD_DESCRIPTOR_NOARGS_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_CALL_METHOD_DESCRIPTOR_NOARGS_data_holes[1];

// _LOAD_ATTR_SLOTplus_CALL_METHOD_DESCRIPTOR_O
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_CALL_METHOD_DESCRIPTOR_O.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 18: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001a:  R_X86_64_64  _JIT_OPERAND
// 22: 0f b7 c0                      movzwl  %ax, %eax
// 25: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 29: 4d 85 ed                      testq   %r13, %r13
// 2c: 0f 84 28 01 00 00             je      0x15a <_JIT_ENTRY+0x15a>
// 32: 49 89 d6                      movq    %rdx, %r14
// 35: 41 8b 45 00                   movl    (%r13), %eax
// 39: ff c0                         incl    %eax
// 3b: 75 0f                         jne     0x4c <_JIT_ENTRY+0x4c>
// 3d: 49 8b 04 24                   movq    (%r12), %rax
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 7e 1f                         jle     0x65 <_JIT_ENTRY+0x65>
// 46: 85 c0                         testl   %eax, %eax
// 48: 79 41                         jns     0x8b <_JIT_ENTRY+0x8b>
// 4a: eb 60                         jmp     0xac <_JIT_ENTRY+0xac>
// 4c: 41 89 45 00                   movl    %eax, (%r13)
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 5a: ff d0                         callq   *%rax
// 5c: 49 8b 04 24                   movq    (%r12), %rax
// 60: 48 85 c0                      testq   %rax, %rax
// 63: 7f e1                         jg      0x46 <_JIT_ENTRY+0x46>
// 65: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000067:  R_X86_64_64  .rodata.str1.1
// 6f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000071:  R_X86_64_64  _Py_NegativeRefcount
// 79: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 7e: 4c 89 e2                      movq    %r12, %rdx
// 81: ff d0                         callq   *%rax
// 83: 49 8b 04 24                   movq    (%r12), %rax
// 87: 85 c0                         testl   %eax, %eax
// 89: 78 21                         js      0xac <_JIT_ENTRY+0xac>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 95: ff d0                         callq   *%rax
// 97: 49 ff 0c 24                   decq    (%r12)
// 9b: 75 0f                         jne     0xac <_JIT_ENTRY+0xac>
// 9d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009f:  R_X86_64_64  _Py_Dealloc
// a7: 4c 89 e7                      movq    %r12, %rdi
// aa: ff d0                         callq   *%rax
// ac: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  _JIT_OPARG
// ba: a8 01                         testb   $0x1, %al
// bc: 74 07                         je      0xc5 <_JIT_ENTRY+0xc5>
// be: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// c5: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000000c7:  R_X86_64_64  _JIT_OPARG
// cf: 0f b7 ca                      movzwl  %dx, %ecx
// d2: 0f b7 c2                      movzwl  %dx, %eax
// d5: 83 e2 01                      andl    $0x1, %edx
// d8: 89 ce                         movl    %ecx, %esi
// da: f7 d6                         notl    %esi
// dc: 48 63 ee                      movslq  %esi, %rbp
// df: 48 01 d5                      addq    %rdx, %rbp
// e2: 48 89 c6                      movq    %rax, %rsi
// e5: 48 f7 de                      negq    %rsi
// e8: 31 ff                         xorl    %edi, %edi
// ea: 66 83 f8 01                   cmpw    $0x1, %ax
// ee: 40 0f 94 c7                   sete    %dil
// f2: 45 31 c0                      xorl    %r8d, %r8d
// f5: 66 83 f8 02                   cmpw    $0x2, %ax
// f9: 41 0f 94 c0                   sete    %r8b
// fd: 49 83 3c ef 00                cmpq    $0x0, (%r15,%rbp,8)
// 102: 48 f7 d0                      notq    %rax
// 105: 48 0f 44 c6                   cmoveq  %rsi, %rax
// 109: 4d 8d 2c d7                   leaq    (%r15,%rdx,8), %r13
// 10d: 41 0f 44 f8                   cmovel  %r8d, %edi
// 111: 40 80 ff 01                   cmpb    $0x1, %dil
// 115: 75 40                         jne     0x157 <_JIT_ENTRY+0x157>
// 117: 4c 89 f7                      movq    %r14, %rdi
// 11a: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 11f: 29 ce                         subl    %ecx, %esi
// 121: 4c 63 f6                      movslq  %esi, %r14
// 124: 49 01 d6                      addq    %rdx, %r14
// 127: 4f 8b 24 f7                   movq    (%r15,%r14,8), %r12
// 12b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000012d:  R_X86_64_64  PyMethodDescr_Type
// 135: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 13a: 75 1b                         jne     0x157 <_JIT_ENTRY+0x157>
// 13c: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 141: 83 79 10 08                   cmpl    $0x8, 0x10(%rcx)
// 145: 75 10                         jne     0x157 <_JIT_ENTRY+0x157>
// 147: 49 8b 74 c5 00                movq    (%r13,%rax,8), %rsi
// 14c: 48 8b 56 08                   movq    0x8(%rsi), %rdx
// 150: 49 3b 54 24 10                cmpq    0x10(%r12), %rdx
// 155: 74 3a                         je      0x191 <_JIT_ENTRY+0x191>
// 157: 4d 89 ef                      movq    %r13, %r15
// 15a: 49 29 df                      subq    %rbx, %r15
// 15d: 49 83 c7 b8                   addq    $-0x48, %r15
// 161: 49 c1 ef 03                   shrq    $0x3, %r15
// 165: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 169: 48 8b 03                      movq    (%rbx), %rax
// 16c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000016e:  R_X86_64_64  _JIT_TARGET
// 176: 89 c9                         movl    %ecx, %ecx
// 178: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 17c: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 182: 48 83 c4 28                   addq    $0x28, %rsp
// 186: 5b                            popq    %rbx
// 187: 41 5c                         popq    %r12
// 189: 41 5d                         popq    %r13
// 18b: 41 5e                         popq    %r14
// 18d: 41 5f                         popq    %r15
// 18f: 5d                            popq    %rbp
// 190: c3                            retq
// 191: 49 8b 54 c5 08                movq    0x8(%r13,%rax,8), %rdx
// 196: 4c 8b 41 08                   movq    0x8(%rcx), %r8
// 19a: 8b 47 2c                      movl    0x2c(%rdi), %eax
// 19d: 8d 48 ff                      leal    -0x1(%rax), %ecx
// 1a0: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// 1a5: 89 4f 2c                      movl    %ecx, 0x2c(%rdi)
// 1a8: 85 c0                         testl   %eax, %eax
// 1aa: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 1af: 0f 8e 8d 00 00 00             jle     0x242 <_JIT_ENTRY+0x242>
// 1b5: 4f 8d 2c f7                   leaq    (%r15,%r14,8), %r13
// 1b9: 48 89 f7                      movq    %rsi, %rdi
// 1bc: 49 89 d6                      movq    %rdx, %r14
// 1bf: 48 89 d6                      movq    %rdx, %rsi
// 1c2: 41 ff d0                      callq   *%r8
// 1c5: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 1ca: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1cf: ff 40 2c                      incl    0x2c(%rax)
// 1d2: bf bf 0b 00 00                movl    $0xbbf, %edi            # imm = 0xBBF
// 1d7: 48 8b 74 24 18                movq    0x18(%rsp), %rsi
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  .text+0x2c0
// 1e6: ff d0                         callq   *%rax
// 1e8: bf c0 0b 00 00                movl    $0xbc0, %edi            # imm = 0xBC0
// 1ed: 4c 89 f6                      movq    %r14, %rsi
// 1f0: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 00000000000001f2:  R_X86_64_64  .text+0x2c0
// 1fa: 41 ff d6                      callq   *%r14
// 1fd: bf c1 0b 00 00                movl    $0xbc1, %edi            # imm = 0xBC1
// 202: 4c 89 e6                      movq    %r12, %rsi
// 205: 41 ff d6                      callq   *%r14
// 208: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 20d: 48 85 c0                      testq   %rax, %rax
// 210: 74 6c                         je      0x27e <_JIT_ENTRY+0x27e>
// 212: 4d 8d 3c ef                   leaq    (%r15,%rbp,8), %r15
// 216: 49 89 45 00                   movq    %rax, (%r13)
// 21a: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 21f: 49 8b 46 10                   movq    0x10(%r14), %rax
// 223: 48 8b 00                      movq    (%rax), %rax
// 226: 84 c0                         testb   %al, %al
// 228: 74 6a                         je      0x294 <_JIT_ENTRY+0x294>
// 22a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022c:  R_X86_64_64  _Py_HandlePending
// 234: 4c 89 f7                      movq    %r14, %rdi
// 237: ff d0                         callq   *%rax
// 239: 85 c0                         testl   %eax, %eax
// 23b: 74 57                         je      0x294 <_JIT_ENTRY+0x294>
// 23d: 4d 89 fd                      movq    %r15, %r13
// 240: eb 3c                         jmp     0x27e <_JIT_ENTRY+0x27e>
// 242: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 247: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000249:  R_X86_64_64  .rodata.str1.1+0x39
// 251: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000253:  R_X86_64_64  _Py_CheckRecursiveCall
// 25b: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 260: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// 265: ff d0                         callq   *%rax
// 267: 4c 8b 44 24 20                movq    0x20(%rsp), %r8
// 26c: 48 8b 74 24 18                movq    0x18(%rsp), %rsi
// 271: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 276: 85 c0                         testl   %eax, %eax
// 278: 0f 84 37 ff ff ff             je      0x1b5 <_JIT_ENTRY+0x1b5>
// 27e: 49 29 dd                      subq    %rbx, %r13
// 281: 49 83 c5 b8                   addq    $-0x48, %r13
// 285: 49 c1 ed 03                   shrq    $0x3, %r13
// 289: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 28d: 31 c0                         xorl    %eax, %eax
// 28f: e9 ee fe ff ff                jmp     0x182 <_JIT_ENTRY+0x182>
// 294: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000296:  R_X86_64_64  _JIT_CONTINUE
// 29e: 48 89 df                      movq    %rbx, %rdi
// 2a1: 4c 89 fe                      movq    %r15, %rsi
// 2a4: 4c 89 f2                      movq    %r14, %rdx
// 2a7: 48 83 c4 28                   addq    $0x28, %rsp
// 2ab: 5b                            popq    %rbx
// 2ac: 41 5c                         popq    %r12
// 2ae: 41 5d                         popq    %r13
// 2b0: 41 5e                         popq    %r14
// 2b2: 41 5f                         popq    %r15
// 2b4: 5d                            popq    %rbp
// 2b5: ff e0                         jmpq    *%rax
// 2b7: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 
// 00000000000002c0 <Py_DECREF>:
// 2c0: 53                            pushq   %rbx
// 2c1: 48 89 f3                      movq    %rsi, %rbx
// 2c4: 48 8b 06                      movq    (%rsi), %rax
// 2c7: 48 85 c0                      testq   %rax, %rax
// 2ca: 7e 06                         jle     0x2d2 <Py_DECREF+0x12>
// 2cc: 85 c0                         testl   %eax, %eax
// 2ce: 79 24                         jns     0x2f4 <Py_DECREF+0x34>
// 2d0: eb 33                         jmp     0x305 <Py_DECREF+0x45>
// 2d2: 89 fe                         movl    %edi, %esi
// 2d4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002d6:  R_X86_64_64  .rodata.str1.1
// 2de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e0:  R_X86_64_64  _Py_NegativeRefcount
// 2e8: 48 89 da                      movq    %rbx, %rdx
// 2eb: ff d0                         callq   *%rax
// 2ed: 48 8b 03                      movq    (%rbx), %rax
// 2f0: 85 c0                         testl   %eax, %eax
// 2f2: 78 11                         js      0x305 <Py_DECREF+0x45>
// 2f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2fe: ff d0                         callq   *%rax
// 300: 48 ff 0b                      decq    (%rbx)
// 303: 74 02                         je      0x307 <Py_DECREF+0x47>
// 305: 5b                            popq    %rbx
// 306: c3                            retq
// 307: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000309:  R_X86_64_64  _Py_Dealloc
// 311: 48 89 df                      movq    %rbx, %rdi
// 314: 5b                            popq    %rbx
// 315: ff e0                         jmpq    *%rax
// 317: 
static const unsigned char _LOAD_ATTR_SLOTplus_CALL_METHOD_DESCRIPTOR_O_code_body[792] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x28, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd6, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1f, 0x85, 0xc0, 0x79, 0x41, 0xeb, 0x60, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xca, 0x0f, 0xb7, 0xc2, 0x83, 0xe2, 0x01, 0x89, 0xce, 0xf7, 0xd6, 0x48, 0x63, 0xee, 0x48, 0x01, 0xd5, 0x48, 0x89, 0xc6, 0x48, 0xf7, 0xde, 0x31, 0xff, 0x66, 0x83, 0xf8, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x45, 0x31, 0xc0, 0x66, 0x83, 0xf8, 0x02, 0x41, 0x0f, 0x94, 0xc0, 0x49, 0x83, 0x3c, 0xef, 0x00, 0x48, 0xf7, 0xd0, 0x48, 0x0f, 0x44, 0xc6, 0x4d, 0x8d, 0x2c, 0xd7, 0x41, 0x0f, 0x44, 0xf8, 0x40, 0x80, 0xff, 0x01, 0x75, 0x40, 0x4c, 0x89, 0xf7, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xce, 0x4c, 0x63, 0xf6, 0x49, 0x01, 0xd6, 0x4f, 0x8b, 0x24, 0xf7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x1b, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x83, 0x79, 0x10, 0x08, 0x75, 0x10, 0x49, 0x8b, 0x74, 0xc5, 0x00, 0x48, 0x8b, 0x56, 0x08, 0x49, 0x3b, 0x54, 0x24, 0x10, 0x74, 0x3a, 0x4d, 0x89, 0xef, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x54, 0xc5, 0x08, 0x4c, 0x8b, 0x41, 0x08, 0x8b, 0x47, 0x2c, 0x8d, 0x48, 0xff, 0x48, 0x89, 0x7c, 0x24, 0x10, 0x89, 0x4f, 0x2c, 0x85, 0xc0, 0x48, 0x89, 0x74, 0x24, 0x18, 0x0f, 0x8e, 0x8d, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x2c, 0xf7, 0x48, 0x89, 0xf7, 0x49, 0x89, 0xd6, 0x48, 0x89, 0xd6, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x44, 0x24, 0x10, 0xff, 0x40, 0x2c, 0xbf, 0xbf, 0x0b, 0x00, 0x00, 0x48, 0x8b, 0x74, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xbf, 0xc0, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xf6, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xff, 0xd6, 0xbf, 0xc1, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0x41, 0xff, 0xd6, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x74, 0x6c, 0x4d, 0x8d, 0x3c, 0xef, 0x49, 0x89, 0x45, 0x00, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x6a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x57, 0x4d, 0x89, 0xfd, 0xeb, 0x3c, 0x48, 0x89, 0x54, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x4c, 0x89, 0x44, 0x24, 0x20, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x20, 0x48, 0x8b, 0x74, 0x24, 0x18, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x85, 0xc0, 0x0f, 0x84, 0x37, 0xff, 0xff, 0xff, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0xee, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x48, 0x89, 0xf3, 0x48, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x24, 0xeb, 0x33, 0x89, 0xfe, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x74, 0x02, 0x5b, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x5b, 0xff, 0xe0};
static const Hole _LOAD_ATTR_SLOTplus_CALL_METHOD_DESCRIPTOR_O_code_holes[21] = {
    {0x1a, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x67, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x71, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x9f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xc7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x16e, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x2c0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x2c0},
    {0x22c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x249, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x253, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x296, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2d6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x309, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _LOAD_ATTR_SLOTplus_CALL_METHOD_DESCRIPTOR_O_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_CALL_METHOD_DESCRIPTOR_O_data_holes[1];

// _LOAD_ATTR_SLOTplus_CALL_STR_1
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_CALL_STR_1.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f7                      movq    %rsi, %r15
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 26: 4d 85 ed                      testq   %r13, %r13
// 29: 74 1a                         je      0x45 <_JIT_ENTRY+0x45>
// 2b: 49 89 d6                      movq    %rdx, %r14
// 2e: 41 8b 45 00                   movl    (%r13), %eax
// 32: ff c0                         incl    %eax
// 34: 75 17                         jne     0x4d <_JIT_ENTRY+0x4d>
// 36: 49 8b 04 24                   movq    (%r12), %rax
// 3a: 48 85 c0                      testq   %rax, %rax
// 3d: 7e 27                         jle     0x66 <_JIT_ENTRY+0x66>
// 3f: 85 c0                         testl   %eax, %eax
// 41: 79 49                         jns     0x8c <_JIT_ENTRY+0x8c>
// 43: eb 5d                         jmp     0xa2 <_JIT_ENTRY+0xa2>
// 45: 4c 89 f8                      movq    %r15, %rax
// 48: e9 b4 00 00 00                jmp     0x101 <_JIT_ENTRY+0x101>
// 4d: 41 89 45 00                   movl    %eax, (%r13)
// 51: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000053:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 5b: ff d0                         callq   *%rax
// 5d: 49 8b 04 24                   movq    (%r12), %rax
// 61: 48 85 c0                      testq   %rax, %rax
// 64: 7f d9                         jg      0x3f <_JIT_ENTRY+0x3f>
// 66: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000068:  R_X86_64_64  .rodata.str1.1
// 70: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000072:  R_X86_64_64  _Py_NegativeRefcount
// 7a: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 7f: 4c 89 e2                      movq    %r12, %rdx
// 82: ff d0                         callq   *%rax
// 84: 49 8b 04 24                   movq    (%r12), %rax
// 88: 85 c0                         testl   %eax, %eax
// 8a: 78 16                         js      0xa2 <_JIT_ENTRY+0xa2>
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 96: ff d0                         callq   *%rax
// 98: 49 ff 0c 24                   decq    (%r12)
// 9c: 0f 84 95 00 00 00             je      0x137 <_JIT_ENTRY+0x137>
// a2: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a8:  R_X86_64_64  _JIT_OPARG
// b0: a8 01                         testb   $0x1, %al
// b2: 74 07                         je      0xbb <_JIT_ENTRY+0xbb>
// b4: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// bb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000bd:  R_X86_64_64  _JIT_OPARG
// c5: 0f b7 d1                      movzwl  %cx, %edx
// c8: 83 e1 01                      andl    $0x1, %ecx
// cb: 49 8d 04 cf                   leaq    (%r15,%rcx,8), %rax
// cf: 89 d6                         movl    %edx, %esi
// d1: f7 d6                         notl    %esi
// d3: 4c 63 e6                      movslq  %esi, %r12
// d6: 49 01 cc                      addq    %rcx, %r12
// d9: 4b 83 3c e7 00                cmpq    $0x0, (%r15,%r12,8)
// de: 75 21                         jne     0x101 <_JIT_ENTRY+0x101>
// e0: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// e5: 29 d6                         subl    %edx, %esi
// e7: 48 63 d6                      movslq  %esi, %rdx
// ea: 48 01 ca                      addq    %rcx, %rdx
// ed: 4d 8d 2c d7                   leaq    (%r15,%rdx,8), %r13
// f1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000f3:  R_X86_64_64  PyUnicode_Type
// fb: 49 39 4d 00                   cmpq    %rcx, (%r13)
// ff: 74 60                         je      0x161 <_JIT_ENTRY+0x161>
// 101: 48 29 d8                      subq    %rbx, %rax
// 104: 48 83 c0 b8                   addq    $-0x48, %rax
// 108: 48 c1 e8 03                   shrq    $0x3, %rax
// 10c: 89 43 40                      movl    %eax, 0x40(%rbx)
// 10f: 48 8b 03                      movq    (%rbx), %rax
// 112: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000114:  R_X86_64_64  _JIT_TARGET
// 11c: 89 c9                         movl    %ecx, %ecx
// 11e: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 122: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 128: 48 83 c4 08                   addq    $0x8, %rsp
// 12c: 5b                            popq    %rbx
// 12d: 41 5c                         popq    %r12
// 12f: 41 5d                         popq    %r13
// 131: 41 5e                         popq    %r14
// 133: 41 5f                         popq    %r15
// 135: 5d                            popq    %rbp
// 136: c3                            retq
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  _Py_Dealloc
// 141: 4c 89 e7                      movq    %r12, %rdi
// 144: ff d0                         callq   *%rax
// 146: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _JIT_OPARG
// 154: a8 01                         testb   $0x1, %al
// 156: 0f 85 58 ff ff ff             jne     0xb4 <_JIT_ENTRY+0xb4>
// 15c: e9 5a ff ff ff                jmp     0xbb <_JIT_ENTRY+0xbb>
// 161: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000163:  R_X86_64_64  _JIT_OPARG
// 16b: 0f b7 c8                      movzwl  %ax, %ecx
// 16e: 83 e0 01                      andl    $0x1, %eax
// 171: 48 29 c8                      subq    %rcx, %rax
// 174: 49 8b 2c c7                   movq    (%r15,%rax,8), %rbp
// 178: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017a:  R_X86_64_64  PyObject_Str
// 182: 48 89 ef                      movq    %rbp, %rdi
// 185: ff d0                         callq   *%rax
// 187: 48 89 04 24                   movq    %rax, (%rsp)
// 18b: 48 8b 45 00                   movq    (%rbp), %rax
// 18f: 48 85 c0                      testq   %rax, %rax
// 192: 7f 22                         jg      0x1b6 <_JIT_ENTRY+0x1b6>
// 194: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000196:  R_X86_64_64  .rodata.str1.1
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  _Py_NegativeRefcount
// 1a8: be 95 0a 00 00                movl    $0xa95, %esi            # imm = 0xA95
// 1ad: 48 89 ea                      movq    %rbp, %rdx
// 1b0: ff d0                         callq   *%rax
// 1b2: 48 8b 45 00                   movq    (%rbp), %rax
// 1b6: 85 c0                         testl   %eax, %eax
// 1b8: 78 21                         js      0x1db <_JIT_ENTRY+0x1db>
// 1ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c4: ff d0                         callq   *%rax
// 1c6: 48 ff 4d 00                   decq    (%rbp)
// 1ca: 75 0f                         jne     0x1db <_JIT_ENTRY+0x1db>
// 1cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ce:  R_X86_64_64  _Py_Dealloc
// 1d6: 48 89 ef                      movq    %rbp, %rdi
// 1d9: ff d0                         callq   *%rax
// 1db: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000001dd:  R_X86_64_64  PyUnicode_Type
// 1e5: 48 8b 45 00                   movq    (%rbp), %rax
// 1e9: 48 85 c0                      testq   %rax, %rax
// 1ec: 7f 22                         jg      0x210 <_JIT_ENTRY+0x210>
// 1ee: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f0:  R_X86_64_64  .rodata.str1.1
// 1f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fa:  R_X86_64_64  _Py_NegativeRefcount
// 202: be 96 0a 00 00                movl    $0xa96, %esi            # imm = 0xA96
// 207: 48 89 ea                      movq    %rbp, %rdx
// 20a: ff d0                         callq   *%rax
// 20c: 48 8b 45 00                   movq    (%rbp), %rax
// 210: 85 c0                         testl   %eax, %eax
// 212: 78 28                         js      0x23c <_JIT_ENTRY+0x23c>
// 214: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000216:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 21e: ff d0                         callq   *%rax
// 220: 48 ff 4d 00                   decq    (%rbp)
// 224: 75 16                         jne     0x23c <_JIT_ENTRY+0x23c>
// 226: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000228:  R_X86_64_64  PyUnicode_Type
// 230: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000232:  R_X86_64_64  _Py_Dealloc
// 23a: ff d0                         callq   *%rax
// 23c: 48 8b 04 24                   movq    (%rsp), %rax
// 240: 48 85 c0                      testq   %rax, %rax
// 243: 74 29                         je      0x26e <_JIT_ENTRY+0x26e>
// 245: 4f 8d 3c e7                   leaq    (%r15,%r12,8), %r15
// 249: 49 89 45 00                   movq    %rax, (%r13)
// 24d: 49 8b 46 10                   movq    0x10(%r14), %rax
// 251: 48 8b 00                      movq    (%rax), %rax
// 254: 84 c0                         testb   %al, %al
// 256: 74 2c                         je      0x284 <_JIT_ENTRY+0x284>
// 258: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025a:  R_X86_64_64  _Py_HandlePending
// 262: 4c 89 f7                      movq    %r14, %rdi
// 265: ff d0                         callq   *%rax
// 267: 85 c0                         testl   %eax, %eax
// 269: 74 19                         je      0x284 <_JIT_ENTRY+0x284>
// 26b: 4d 89 fd                      movq    %r15, %r13
// 26e: 49 29 dd                      subq    %rbx, %r13
// 271: 49 83 c5 b8                   addq    $-0x48, %r13
// 275: 49 c1 ed 03                   shrq    $0x3, %r13
// 279: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 27d: 31 c0                         xorl    %eax, %eax
// 27f: e9 a4 fe ff ff                jmp     0x128 <_JIT_ENTRY+0x128>
// 284: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000286:  R_X86_64_64  _JIT_CONTINUE
// 28e: 48 89 df                      movq    %rbx, %rdi
// 291: 4c 89 fe                      movq    %r15, %rsi
// 294: 4c 89 f2                      movq    %r14, %rdx
// 297: 48 83 c4 08                   addq    $0x8, %rsp
// 29b: 5b                            popq    %rbx
// 29c: 41 5c                         popq    %r12
// 29e: 41 5d                         popq    %r13
// 2a0: 41 5e                         popq    %r14
// 2a2: 41 5f                         popq    %r15
// 2a4: 5d                            popq    %rbp
// 2a5: ff e0                         jmpq    *%rax
// 2a7: 
static const unsigned char _LOAD_ATTR_SLOTplus_CALL_STR_1_code_body[680] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1a, 0x49, 0x89, 0xd6, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x17, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x27, 0x85, 0xc0, 0x79, 0x49, 0xeb, 0x5d, 0x4c, 0x89, 0xf8, 0xe9, 0xb4, 0x00, 0x00, 0x00, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xd9, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x95, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x83, 0xe1, 0x01, 0x49, 0x8d, 0x04, 0xcf, 0x89, 0xd6, 0xf7, 0xd6, 0x4c, 0x63, 0xe6, 0x49, 0x01, 0xcc, 0x4b, 0x83, 0x3c, 0xe7, 0x00, 0x75, 0x21, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xd6, 0x48, 0x63, 0xd6, 0x48, 0x01, 0xca, 0x4d, 0x8d, 0x2c, 0xd7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4d, 0x00, 0x74, 0x60, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x58, 0xff, 0xff, 0xff, 0xe9, 0x5a, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x83, 0xe0, 0x01, 0x48, 0x29, 0xc8, 0x49, 0x8b, 0x2c, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x95, 0x0a, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x96, 0x0a, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x74, 0x29, 0x4f, 0x8d, 0x3c, 0xe7, 0x49, 0x89, 0x45, 0x00, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x2c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x19, 0x4d, 0x89, 0xfd, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0xa4, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_ATTR_SLOTplus_CALL_STR_1_code_holes[26] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x53, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x68, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x72, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa8, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xbd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x17a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Str, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ce, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x1f0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1fa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x216, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x232, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x25a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x286, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_CALL_STR_1_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_CALL_STR_1_data_holes[1];

// _LOAD_ATTR_SLOTplus_CALL_TUPLE_1
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_CALL_TUPLE_1.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f7                      movq    %rsi, %r15
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 26: 4d 85 ed                      testq   %r13, %r13
// 29: 74 1a                         je      0x45 <_JIT_ENTRY+0x45>
// 2b: 49 89 d6                      movq    %rdx, %r14
// 2e: 41 8b 45 00                   movl    (%r13), %eax
// 32: ff c0                         incl    %eax
// 34: 75 17                         jne     0x4d <_JIT_ENTRY+0x4d>
// 36: 49 8b 04 24                   movq    (%r12), %rax
// 3a: 48 85 c0                      testq   %rax, %rax
// 3d: 7e 27                         jle     0x66 <_JIT_ENTRY+0x66>
// 3f: 85 c0                         testl   %eax, %eax
// 41: 79 49                         jns     0x8c <_JIT_ENTRY+0x8c>
// 43: eb 5d                         jmp     0xa2 <_JIT_ENTRY+0xa2>
// 45: 4c 89 f8                      movq    %r15, %rax
// 48: e9 b4 00 00 00                jmp     0x101 <_JIT_ENTRY+0x101>
// 4d: 41 89 45 00                   movl    %eax, (%r13)
// 51: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000053:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 5b: ff d0                         callq   *%rax
// 5d: 49 8b 04 24                   movq    (%r12), %rax
// 61: 48 85 c0                      testq   %rax, %rax
// 64: 7f d9                         jg      0x3f <_JIT_ENTRY+0x3f>
// 66: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000068:  R_X86_64_64  .rodata.str1.1
// 70: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000072:  R_X86_64_64  _Py_NegativeRefcount
// 7a: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 7f: 4c 89 e2                      movq    %r12, %rdx
// 82: ff d0                         callq   *%rax
// 84: 49 8b 04 24                   movq    (%r12), %rax
// 88: 85 c0                         testl   %eax, %eax
// 8a: 78 16                         js      0xa2 <_JIT_ENTRY+0xa2>
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 96: ff d0                         callq   *%rax
// 98: 49 ff 0c 24                   decq    (%r12)
// 9c: 0f 84 95 00 00 00             je      0x137 <_JIT_ENTRY+0x137>
// a2: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a8:  R_X86_64_64  _JIT_OPARG
// b0: a8 01                         testb   $0x1, %al
// b2: 74 07                         je      0xbb <_JIT_ENTRY+0xbb>
// b4: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// bb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000bd:  R_X86_64_64  _JIT_OPARG
// c5: 0f b7 d1                      movzwl  %cx, %edx
// c8: 83 e1 01                      andl    $0x1, %ecx
// cb: 49 8d 04 cf                   leaq    (%r15,%rcx,8), %rax
// cf: 89 d6                         movl    %edx, %esi
// d1: f7 d6                         notl    %esi
// d3: 4c 63 e6                      movslq  %esi, %r12
// d6: 49 01 cc                      addq    %rcx, %r12
// d9: 4b 83 3c e7 00                cmpq    $0x0, (%r15,%r12,8)
// de: 75 21                         jne     0x101 <_JIT_ENTRY+0x101>
// e0: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// e5: 29 d6                         subl    %edx, %esi
// e7: 48 63 d6                      movslq  %esi, %rdx
// ea: 48 01 ca                      addq    %rcx, %rdx
// ed: 4d 8d 2c d7                   leaq    (%r15,%rdx,8), %r13
// f1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000f3:  R_X86_64_64  PyTuple_Type
// fb: 49 39 4d 00                   cmpq    %rcx, (%r13)
// ff: 74 60                         je      0x161 <_JIT_ENTRY+0x161>
// 101: 48 29 d8                      subq    %rbx, %rax
// 104: 48 83 c0 b8                   addq    $-0x48, %rax
// 108: 48 c1 e8 03                   shrq    $0x3, %rax
// 10c: 89 43 40                      movl    %eax, 0x40(%rbx)
// 10f: 48 8b 03                      movq    (%rbx), %rax
// 112: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000114:  R_X86_64_64  _JIT_TARGET
// 11c: 89 c9                         movl    %ecx, %ecx
// 11e: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 122: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 128: 48 83 c4 08                   addq    $0x8, %rsp
// 12c: 5b                            popq    %rbx
// 12d: 41 5c                         popq    %r12
// 12f: 41 5d                         popq    %r13
// 131: 41 5e                         popq    %r14
// 133: 41 5f                         popq    %r15
// 135: 5d                            popq    %rbp
// 136: c3                            retq
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  _Py_Dealloc
// 141: 4c 89 e7                      movq    %r12, %rdi
// 144: ff d0                         callq   *%rax
// 146: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _JIT_OPARG
// 154: a8 01                         testb   $0x1, %al
// 156: 0f 85 58 ff ff ff             jne     0xb4 <_JIT_ENTRY+0xb4>
// 15c: e9 5a ff ff ff                jmp     0xbb <_JIT_ENTRY+0xbb>
// 161: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000163:  R_X86_64_64  _JIT_OPARG
// 16b: 0f b7 c8                      movzwl  %ax, %ecx
// 16e: 83 e0 01                      andl    $0x1, %eax
// 171: 48 29 c8                      subq    %rcx, %rax
// 174: 49 8b 2c c7                   movq    (%r15,%rax,8), %rbp
// 178: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017a:  R_X86_64_64  PySequence_Tuple
// 182: 48 89 ef                      movq    %rbp, %rdi
// 185: ff d0                         callq   *%rax
// 187: 48 89 04 24                   movq    %rax, (%rsp)
// 18b: 48 8b 45 00                   movq    (%rbp), %rax
// 18f: 48 85 c0                      testq   %rax, %rax
// 192: 7f 22                         jg      0x1b6 <_JIT_ENTRY+0x1b6>
// 194: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000196:  R_X86_64_64  .rodata.str1.1
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  _Py_NegativeRefcount
// 1a8: be ad 0a 00 00                movl    $0xaad, %esi            # imm = 0xAAD
// 1ad: 48 89 ea                      movq    %rbp, %rdx
// 1b0: ff d0                         callq   *%rax
// 1b2: 48 8b 45 00                   movq    (%rbp), %rax
// 1b6: 85 c0                         testl   %eax, %eax
// 1b8: 78 21                         js      0x1db <_JIT_ENTRY+0x1db>
// 1ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c4: ff d0                         callq   *%rax
// 1c6: 48 ff 4d 00                   decq    (%rbp)
// 1ca: 75 0f                         jne     0x1db <_JIT_ENTRY+0x1db>
// 1cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ce:  R_X86_64_64  _Py_Dealloc
// 1d6: 48 89 ef                      movq    %rbp, %rdi
// 1d9: ff d0                         callq   *%rax
// 1db: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000001dd:  R_X86_64_64  PyTuple_Type
// 1e5: 48 8b 45 00                   movq    (%rbp), %rax
// 1e9: 48 85 c0                      testq   %rax, %rax
// 1ec: 7f 22                         jg      0x210 <_JIT_ENTRY+0x210>
// 1ee: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f0:  R_X86_64_64  .rodata.str1.1
// 1f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fa:  R_X86_64_64  _Py_NegativeRefcount
// 202: be ae 0a 00 00                movl    $0xaae, %esi            # imm = 0xAAE
// 207: 48 89 ea                      movq    %rbp, %rdx
// 20a: ff d0                         callq   *%rax
// 20c: 48 8b 45 00                   movq    (%rbp), %rax
// 210: 85 c0                         testl   %eax, %eax
// 212: 78 28                         js      0x23c <_JIT_ENTRY+0x23c>
// 214: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000216:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 21e: ff d0                         callq   *%rax
// 220: 48 ff 4d 00                   decq    (%rbp)
// 224: 75 16                         jne     0x23c <_JIT_ENTRY+0x23c>
// 226: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000228:  R_X86_64_64  PyTuple_Type
// 230: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000232:  R_X86_64_64  _Py_Dealloc
// 23a: ff d0                         callq   *%rax
// 23c: 48 8b 04 24                   movq    (%rsp), %rax
// 240: 48 85 c0                      testq   %rax, %rax
// 243: 74 29                         je      0x26e <_JIT_ENTRY+0x26e>
// 245: 4f 8d 3c e7                   leaq    (%r15,%r12,8), %r15
// 249: 49 89 45 00                   movq    %rax, (%r13)
// 24d: 49 8b 46 10                   movq    0x10(%r14), %rax
// 251: 48 8b 00                      movq    (%rax), %rax
// 254: 84 c0                         testb   %al, %al
// 256: 74 2c                         je      0x284 <_JIT_ENTRY+0x284>
// 258: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025a:  R_X86_64_64  _Py_HandlePending
// 262: 4c 89 f7                      movq    %r14, %rdi
// 265: ff d0                         callq   *%rax
// 267: 85 c0                         testl   %eax, %eax
// 269: 74 19                         je      0x284 <_JIT_ENTRY+0x284>
// 26b: 4d 89 fd                      movq    %r15, %r13
// 26e: 49 29 dd                      subq    %rbx, %r13
// 271: 49 83 c5 b8                   addq    $-0x48, %r13
// 275: 49 c1 ed 03                   shrq    $0x3, %r13
// 279: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 27d: 31 c0                         xorl    %eax, %eax
// 27f: e9 a4 fe ff ff                jmp     0x128 <_JIT_ENTRY+0x128>
// 284: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000286:  R_X86_64_64  _JIT_CONTINUE
// 28e: 48 89 df                      movq    %rbx, %rdi
// 291: 4c 89 fe                      movq    %r15, %rsi
// 294: 4c 89 f2                      movq    %r14, %rdx
// 297: 48 83 c4 08                   addq    $0x8, %rsp
// 29b: 5b                            popq    %rbx
// 29c: 41 5c                         popq    %r12
// 29e: 41 5d                         popq    %r13
// 2a0: 41 5e                         popq    %r14
// 2a2: 41 5f                         popq    %r15
// 2a4: 5d                            popq    %rbp
// 2a5: ff e0                         jmpq    *%rax
// 2a7: 
static const unsigned char _LOAD_ATTR_SLOTplus_CALL_TUPLE_1_code_body[680] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1a, 0x49, 0x89, 0xd6, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x17, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x27, 0x85, 0xc0, 0x79, 0x49, 0xeb, 0x5d, 0x4c, 0x89, 0xf8, 0xe9, 0xb4, 0x00, 0x00, 0x00, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xd9, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x95, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x83, 0xe1, 0x01, 0x49, 0x8d, 0x04, 0xcf, 0x89, 0xd6, 0xf7, 0xd6, 0x4c, 0x63, 0xe6, 0x49, 0x01, 0xcc, 0x4b, 0x83, 0x3c, 0xe7, 0x00, 0x75, 0x21, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xd6, 0x48, 0x63, 0xd6, 0x48, 0x01, 0xca, 0x4d, 0x8d, 0x2c, 0xd7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4d, 0x00, 0x74, 0x60, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x58, 0xff, 0xff, 0xff, 0xe9, 0x5a, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x83, 0xe0, 0x01, 0x48, 0x29, 0xc8, 0x49, 0x8b, 0x2c, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xad, 0x0a, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x0a, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x74, 0x29, 0x4f, 0x8d, 0x3c, 0xe7, 0x49, 0x89, 0x45, 0x00, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x2c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x19, 0x4d, 0x89, 0xfd, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0xa4, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_ATTR_SLOTplus_CALL_TUPLE_1_code_holes[26] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x53, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x68, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x72, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa8, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xbd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x17a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySequence_Tuple, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ce, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x1f0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1fa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x216, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x232, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x25a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x286, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_CALL_TUPLE_1_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_CALL_TUPLE_1_data_holes[1];

// _LOAD_ATTR_SLOTplus_CALL_TYPE_1
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_CALL_TYPE_1.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f7                      movq    %rsi, %r15
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 26: 4d 85 ed                      testq   %r13, %r13
// 29: 74 1a                         je      0x45 <_JIT_ENTRY+0x45>
// 2b: 49 89 d6                      movq    %rdx, %r14
// 2e: 41 8b 45 00                   movl    (%r13), %eax
// 32: ff c0                         incl    %eax
// 34: 75 17                         jne     0x4d <_JIT_ENTRY+0x4d>
// 36: 49 8b 04 24                   movq    (%r12), %rax
// 3a: 48 85 c0                      testq   %rax, %rax
// 3d: 7e 27                         jle     0x66 <_JIT_ENTRY+0x66>
// 3f: 85 c0                         testl   %eax, %eax
// 41: 79 49                         jns     0x8c <_JIT_ENTRY+0x8c>
// 43: eb 5d                         jmp     0xa2 <_JIT_ENTRY+0xa2>
// 45: 4c 89 f8                      movq    %r15, %rax
// 48: e9 c3 00 00 00                jmp     0x110 <_JIT_ENTRY+0x110>
// 4d: 41 89 45 00                   movl    %eax, (%r13)
// 51: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000053:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 5b: ff d0                         callq   *%rax
// 5d: 49 8b 04 24                   movq    (%r12), %rax
// 61: 48 85 c0                      testq   %rax, %rax
// 64: 7f d9                         jg      0x3f <_JIT_ENTRY+0x3f>
// 66: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000068:  R_X86_64_64  .rodata.str1.1
// 70: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000072:  R_X86_64_64  _Py_NegativeRefcount
// 7a: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 7f: 4c 89 e2                      movq    %r12, %rdx
// 82: ff d0                         callq   *%rax
// 84: 49 8b 04 24                   movq    (%r12), %rax
// 88: 85 c0                         testl   %eax, %eax
// 8a: 78 16                         js      0xa2 <_JIT_ENTRY+0xa2>
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 96: ff d0                         callq   *%rax
// 98: 49 ff 0c 24                   decq    (%r12)
// 9c: 0f 84 a4 00 00 00             je      0x146 <_JIT_ENTRY+0x146>
// a2: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a8:  R_X86_64_64  _JIT_OPARG
// b0: a8 01                         testb   $0x1, %al
// b2: 74 07                         je      0xbb <_JIT_ENTRY+0xbb>
// b4: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// bb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000bd:  R_X86_64_64  _JIT_OPARG
// c5: 89 ca                         movl    %ecx, %edx
// c7: 83 e2 01                      andl    $0x1, %edx
// ca: 49 8d 04 d7                   leaq    (%r15,%rdx,8), %rax
// ce: f7 d1                         notl    %ecx
// d0: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// d6: 48 63 e9                      movslq  %ecx, %rbp
// d9: 48 01 d5                      addq    %rdx, %rbp
// dc: 49 83 3c ef 00                cmpq    $0x0, (%r15,%rbp,8)
// e1: 75 2d                         jne     0x110 <_JIT_ENTRY+0x110>
// e3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000e5:  R_X86_64_64  _JIT_OPARG
// ed: 0f b7 d1                      movzwl  %cx, %edx
// f0: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// f5: 29 d6                         subl    %edx, %esi
// f7: 48 63 d6                      movslq  %esi, %rdx
// fa: 83 e1 01                      andl    $0x1, %ecx
// fd: 48 01 d1                      addq    %rdx, %rcx
// 100: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000102:  R_X86_64_64  PyType_Type
// 10a: 4d 39 24 cf                   cmpq    %r12, (%r15,%rcx,8)
// 10e: 74 60                         je      0x170 <_JIT_ENTRY+0x170>
// 110: 48 29 d8                      subq    %rbx, %rax
// 113: 48 83 c0 b8                   addq    $-0x48, %rax
// 117: 48 c1 e8 03                   shrq    $0x3, %rax
// 11b: 89 43 40                      movl    %eax, 0x40(%rbx)
// 11e: 48 8b 03                      movq    (%rbx), %rax
// 121: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000123:  R_X86_64_64  _JIT_TARGET
// 12b: 89 c9                         movl    %ecx, %ecx
// 12d: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 131: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 137: 48 83 c4 08                   addq    $0x8, %rsp
// 13b: 5b                            popq    %rbx
// 13c: 41 5c                         popq    %r12
// 13e: 41 5d                         popq    %r13
// 140: 41 5e                         popq    %r14
// 142: 41 5f                         popq    %r15
// 144: 5d                            popq    %rbp
// 145: c3                            retq
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_Dealloc
// 150: 4c 89 e7                      movq    %r12, %rdi
// 153: ff d0                         callq   *%rax
// 155: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  _JIT_OPARG
// 163: a8 01                         testb   $0x1, %al
// 165: 0f 85 49 ff ff ff             jne     0xb4 <_JIT_ENTRY+0xb4>
// 16b: e9 4b ff ff ff                jmp     0xbb <_JIT_ENTRY+0xbb>
// 170: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000172:  R_X86_64_64  _JIT_OPARG
// 17a: 0f b7 c8                      movzwl  %ax, %ecx
// 17d: 83 e0 01                      andl    $0x1, %eax
// 180: 48 29 c8                      subq    %rcx, %rax
// 183: 4d 8b 2c c7                   movq    (%r15,%rax,8), %r13
// 187: 49 8b 45 08                   movq    0x8(%r13), %rax
// 18b: 48 89 04 24                   movq    %rax, (%rsp)
// 18f: 8b 00                         movl    (%rax), %eax
// 191: ff c0                         incl    %eax
// 193: 75 0f                         jne     0x1a4 <_JIT_ENTRY+0x1a4>
// 195: 49 8b 45 00                   movq    (%r13), %rax
// 199: 48 85 c0                      testq   %rax, %rax
// 19c: 7e 21                         jle     0x1bf <_JIT_ENTRY+0x1bf>
// 19e: 85 c0                         testl   %eax, %eax
// 1a0: 79 43                         jns     0x1e5 <_JIT_ENTRY+0x1e5>
// 1a2: eb 62                         jmp     0x206 <_JIT_ENTRY+0x206>
// 1a4: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1a8: 89 01                         movl    %eax, (%rcx)
// 1aa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ac:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1b4: ff d0                         callq   *%rax
// 1b6: 49 8b 45 00                   movq    (%r13), %rax
// 1ba: 48 85 c0                      testq   %rax, %rax
// 1bd: 7f df                         jg      0x19e <_JIT_ENTRY+0x19e>
// 1bf: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c1:  R_X86_64_64  .rodata.str1.1
// 1c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cb:  R_X86_64_64  _Py_NegativeRefcount
// 1d3: be 7f 0a 00 00                movl    $0xa7f, %esi            # imm = 0xA7F
// 1d8: 4c 89 ea                      movq    %r13, %rdx
// 1db: ff d0                         callq   *%rax
// 1dd: 49 8b 45 00                   movq    (%r13), %rax
// 1e1: 85 c0                         testl   %eax, %eax
// 1e3: 78 21                         js      0x206 <_JIT_ENTRY+0x206>
// 1e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ef: ff d0                         callq   *%rax
// 1f1: 49 ff 4d 00                   decq    (%r13)
// 1f5: 75 0f                         jne     0x206 <_JIT_ENTRY+0x206>
// 1f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f9:  R_X86_64_64  _Py_Dealloc
// 201: 4c 89 ef                      movq    %r13, %rdi
// 204: ff d0                         callq   *%rax
// 206: 49 8b 04 24                   movq    (%r12), %rax
// 20a: 48 85 c0                      testq   %rax, %rax
// 20d: 7f 22                         jg      0x231 <_JIT_ENTRY+0x231>
// 20f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000211:  R_X86_64_64  .rodata.str1.1
// 219: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021b:  R_X86_64_64  _Py_NegativeRefcount
// 223: be 80 0a 00 00                movl    $0xa80, %esi            # imm = 0xA80
// 228: 4c 89 e2                      movq    %r12, %rdx
// 22b: ff d0                         callq   *%rax
// 22d: 49 8b 04 24                   movq    (%r12), %rax
// 231: 4d 8d 2c ef                   leaq    (%r15,%rbp,8), %r13
// 235: 85 c0                         testl   %eax, %eax
// 237: 78 28                         js      0x261 <_JIT_ENTRY+0x261>
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 243: ff d0                         callq   *%rax
// 245: 49 ff 0c 24                   decq    (%r12)
// 249: 75 16                         jne     0x261 <_JIT_ENTRY+0x261>
// 24b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000024d:  R_X86_64_64  PyType_Type
// 255: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000257:  R_X86_64_64  _Py_Dealloc
// 25f: ff d0                         callq   *%rax
// 261: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000263:  R_X86_64_64  _JIT_OPARG
// 26b: 0f b7 c8                      movzwl  %ax, %ecx
// 26e: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 273: 29 ca                         subl    %ecx, %edx
// 275: 48 63 ca                      movslq  %edx, %rcx
// 278: 83 e0 01                      andl    $0x1, %eax
// 27b: 48 01 c8                      addq    %rcx, %rax
// 27e: 48 8b 0c 24                   movq    (%rsp), %rcx
// 282: 49 89 0c c7                   movq    %rcx, (%r15,%rax,8)
// 286: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000288:  R_X86_64_64  _JIT_CONTINUE
// 290: 48 89 df                      movq    %rbx, %rdi
// 293: 4c 89 ee                      movq    %r13, %rsi
// 296: 4c 89 f2                      movq    %r14, %rdx
// 299: 48 83 c4 08                   addq    $0x8, %rsp
// 29d: 5b                            popq    %rbx
// 29e: 41 5c                         popq    %r12
// 2a0: 41 5d                         popq    %r13
// 2a2: 41 5e                         popq    %r14
// 2a4: 41 5f                         popq    %r15
// 2a6: 5d                            popq    %rbp
// 2a7: ff e0                         jmpq    *%rax
// 2a9: 
static const unsigned char _LOAD_ATTR_SLOTplus_CALL_TYPE_1_code_body[682] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1a, 0x49, 0x89, 0xd6, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x17, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x27, 0x85, 0xc0, 0x79, 0x49, 0xeb, 0x5d, 0x4c, 0x89, 0xf8, 0xe9, 0xc3, 0x00, 0x00, 0x00, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xd9, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xa4, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xca, 0x83, 0xe2, 0x01, 0x49, 0x8d, 0x04, 0xd7, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xe9, 0x48, 0x01, 0xd5, 0x49, 0x83, 0x3c, 0xef, 0x00, 0x75, 0x2d, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xd6, 0x48, 0x63, 0xd6, 0x83, 0xe1, 0x01, 0x48, 0x01, 0xd1, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x39, 0x24, 0xcf, 0x74, 0x60, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x49, 0xff, 0xff, 0xff, 0xe9, 0x4b, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x83, 0xe0, 0x01, 0x48, 0x29, 0xc8, 0x4d, 0x8b, 0x2c, 0xc7, 0x49, 0x8b, 0x45, 0x08, 0x48, 0x89, 0x04, 0x24, 0x8b, 0x00, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x21, 0x85, 0xc0, 0x79, 0x43, 0xeb, 0x62, 0x48, 0x8b, 0x0c, 0x24, 0x89, 0x01, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xdf, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x7f, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x80, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x2c, 0xef, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xca, 0x83, 0xe0, 0x01, 0x48, 0x01, 0xc8, 0x48, 0x8b, 0x0c, 0x24, 0x49, 0x89, 0x0c, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_ATTR_SLOTplus_CALL_TYPE_1_code_holes[26] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x53, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x68, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x72, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa8, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xbd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyType_Type, 0x0},
    {0x123, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x172, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ac, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1f9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x211, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x21b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x24d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyType_Type, 0x0},
    {0x257, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x288, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_CALL_TYPE_1_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_CALL_TYPE_1_data_holes[1];

// _LOAD_ATTR_SLOTplus_CHECK_ATTR_CLASS
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_CHECK_ATTR_CLASS.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f6                      movq    %rsi, %r14
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 0f 84 d1 00 00 00             je      0xfe <_JIT_ENTRY+0xfe>
// 2d: 49 89 d7                      movq    %rdx, %r15
// 30: 41 8b 45 00                   movl    (%r13), %eax
// 34: ff c0                         incl    %eax
// 36: 75 0f                         jne     0x47 <_JIT_ENTRY+0x47>
// 38: 49 8b 04 24                   movq    (%r12), %rax
// 3c: 48 85 c0                      testq   %rax, %rax
// 3f: 7e 1f                         jle     0x60 <_JIT_ENTRY+0x60>
// 41: 85 c0                         testl   %eax, %eax
// 43: 79 41                         jns     0x86 <_JIT_ENTRY+0x86>
// 45: eb 55                         jmp     0x9c <_JIT_ENTRY+0x9c>
// 47: 41 89 45 00                   movl    %eax, (%r13)
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 55: ff d0                         callq   *%rax
// 57: 49 8b 04 24                   movq    (%r12), %rax
// 5b: 48 85 c0                      testq   %rax, %rax
// 5e: 7f e1                         jg      0x41 <_JIT_ENTRY+0x41>
// 60: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000062:  R_X86_64_64  .rodata.str1.1
// 6a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006c:  R_X86_64_64  _Py_NegativeRefcount
// 74: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 79: 4c 89 e2                      movq    %r12, %rdx
// 7c: ff d0                         callq   *%rax
// 7e: 49 8b 04 24                   movq    (%r12), %rax
// 82: 85 c0                         testl   %eax, %eax
// 84: 78 16                         js      0x9c <_JIT_ENTRY+0x9c>
// 86: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000088:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 90: ff d0                         callq   *%rax
// 92: 49 ff 0c 24                   decq    (%r12)
// 96: 0f 84 92 00 00 00             je      0x12e <_JIT_ENTRY+0x12e>
// 9c: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _JIT_OPARG
// aa: a8 01                         testb   $0x1, %al
// ac: 74 07                         je      0xb5 <_JIT_ENTRY+0xb5>
// ae: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// b5: 83 e0 01                      andl    $0x1, %eax
// b8: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// bc: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// c1: 48 8b 48 08                   movq    0x8(%rax), %rcx
// c5: f6 81 ab 00 00 00 80          testb   $-0x80, 0xab(%rcx)
// cc: 74 2d                         je      0xfb <_JIT_ENTRY+0xfb>
// ce: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d0:  R_X86_64_64  _JIT_OPERAND
// d8: 39 88 80 01 00 00             cmpl    %ecx, 0x180(%rax)
// de: 75 1b                         jne     0xfb <_JIT_ENTRY+0xfb>
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _JIT_CONTINUE
// ea: 48 89 df                      movq    %rbx, %rdi
// ed: 4c 89 fa                      movq    %r15, %rdx
// f0: 5b                            popq    %rbx
// f1: 41 5c                         popq    %r12
// f3: 41 5d                         popq    %r13
// f5: 41 5e                         popq    %r14
// f7: 41 5f                         popq    %r15
// f9: ff e0                         jmpq    *%rax
// fb: 49 89 f6                      movq    %rsi, %r14
// fe: 49 29 de                      subq    %rbx, %r14
// 101: 49 83 c6 b8                   addq    $-0x48, %r14
// 105: 49 c1 ee 03                   shrq    $0x3, %r14
// 109: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 10d: 48 8b 03                      movq    (%rbx), %rax
// 110: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000112:  R_X86_64_64  _JIT_TARGET
// 11a: 89 c9                         movl    %ecx, %ecx
// 11c: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 124: 5b                            popq    %rbx
// 125: 41 5c                         popq    %r12
// 127: 41 5d                         popq    %r13
// 129: 41 5e                         popq    %r14
// 12b: 41 5f                         popq    %r15
// 12d: c3                            retq
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  _Py_Dealloc
// 138: 4c 89 e7                      movq    %r12, %rdi
// 13b: ff d0                         callq   *%rax
// 13d: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 141: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000143:  R_X86_64_64  _JIT_OPARG
// 14b: a8 01                         testb   $0x1, %al
// 14d: 0f 85 5b ff ff ff             jne     0xae <_JIT_ENTRY+0xae>
// 153: e9 5d ff ff ff                jmp     0xb5 <_JIT_ENTRY+0xb5>
// 158: 
static const unsigned char _LOAD_ATTR_SLOTplus_CHECK_ATTR_CLASS_code_body[345] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xd1, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1f, 0x85, 0xc0, 0x79, 0x41, 0xeb, 0x55, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x92, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0x8b, 0x48, 0x08, 0xf6, 0x81, 0xab, 0x00, 0x00, 0x00, 0x80, 0x74, 0x2d, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x88, 0x80, 0x01, 0x00, 0x00, 0x75, 0x1b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x49, 0x89, 0xf6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x5b, 0xff, 0xff, 0xff, 0xe9, 0x5d, 0xff, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_CHECK_ATTR_CLASS_code_holes[12] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x143, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_CHECK_ATTR_CLASS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_CHECK_ATTR_CLASS_data_holes[1];

// _LOAD_ATTR_SLOTplus_CHECK_ATTR_METHOD_LAZY_DICT
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_CHECK_ATTR_METHOD_LAZY_DICT.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f6                      movq    %rsi, %r14
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 0f 84 a9 00 00 00             je      0xd6 <_JIT_ENTRY+0xd6>
// 2d: 49 89 d7                      movq    %rdx, %r15
// 30: 41 8b 45 00                   movl    (%r13), %eax
// 34: ff c0                         incl    %eax
// 36: 75 0f                         jne     0x47 <_JIT_ENTRY+0x47>
// 38: 49 8b 04 24                   movq    (%r12), %rax
// 3c: 48 85 c0                      testq   %rax, %rax
// 3f: 7e 1f                         jle     0x60 <_JIT_ENTRY+0x60>
// 41: 85 c0                         testl   %eax, %eax
// 43: 79 41                         jns     0x86 <_JIT_ENTRY+0x86>
// 45: eb 55                         jmp     0x9c <_JIT_ENTRY+0x9c>
// 47: 41 89 45 00                   movl    %eax, (%r13)
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 55: ff d0                         callq   *%rax
// 57: 49 8b 04 24                   movq    (%r12), %rax
// 5b: 48 85 c0                      testq   %rax, %rax
// 5e: 7f e1                         jg      0x41 <_JIT_ENTRY+0x41>
// 60: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000062:  R_X86_64_64  .rodata.str1.1
// 6a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006c:  R_X86_64_64  _Py_NegativeRefcount
// 74: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 79: 4c 89 e2                      movq    %r12, %rdx
// 7c: ff d0                         callq   *%rax
// 7e: 49 8b 04 24                   movq    (%r12), %rax
// 82: 85 c0                         testl   %eax, %eax
// 84: 78 16                         js      0x9c <_JIT_ENTRY+0x9c>
// 86: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000088:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 90: ff d0                         callq   *%rax
// 92: 49 ff 0c 24                   decq    (%r12)
// 96: 0f 84 85 00 00 00             je      0x121 <_JIT_ENTRY+0x121>
// 9c: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _JIT_OPARG
// aa: a8 01                         testb   $0x1, %al
// ac: 74 07                         je      0xb5 <_JIT_ENTRY+0xb5>
// ae: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// b5: 83 e0 01                      andl    $0x1, %eax
// b8: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// bc: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// c1: 48 8b 48 08                   movq    0x8(%rax), %rcx
// c5: 48 8b 89 20 01 00 00          movq    0x120(%rcx), %rcx
// cc: 48 83 3c 08 00                cmpq    $0x0, (%rax,%rcx)
// d1: 74 33                         je      0x106 <_JIT_ENTRY+0x106>
// d3: 49 89 f6                      movq    %rsi, %r14
// d6: 49 29 de                      subq    %rbx, %r14
// d9: 49 83 c6 b8                   addq    $-0x48, %r14
// dd: 49 c1 ee 03                   shrq    $0x3, %r14
// e1: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// e5: 48 8b 03                      movq    (%rbx), %rax
// e8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ea:  R_X86_64_64  _JIT_TARGET
// f2: 89 c9                         movl    %ecx, %ecx
// f4: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// fc: 5b                            popq    %rbx
// fd: 41 5c                         popq    %r12
// ff: 41 5d                         popq    %r13
// 101: 41 5e                         popq    %r14
// 103: 41 5f                         popq    %r15
// 105: c3                            retq
// 106: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000108:  R_X86_64_64  _JIT_CONTINUE
// 110: 48 89 df                      movq    %rbx, %rdi
// 113: 4c 89 fa                      movq    %r15, %rdx
// 116: 5b                            popq    %rbx
// 117: 41 5c                         popq    %r12
// 119: 41 5d                         popq    %r13
// 11b: 41 5e                         popq    %r14
// 11d: 41 5f                         popq    %r15
// 11f: ff e0                         jmpq    *%rax
// 121: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000123:  R_X86_64_64  _Py_Dealloc
// 12b: 4c 89 e7                      movq    %r12, %rdi
// 12e: ff d0                         callq   *%rax
// 130: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 134: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000136:  R_X86_64_64  _JIT_OPARG
// 13e: a8 01                         testb   $0x1, %al
// 140: 0f 85 68 ff ff ff             jne     0xae <_JIT_ENTRY+0xae>
// 146: e9 6a ff ff ff                jmp     0xb5 <_JIT_ENTRY+0xb5>
// 14b: 
static const unsigned char _LOAD_ATTR_SLOTplus_CHECK_ATTR_METHOD_LAZY_DICT_code_body[332] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xa9, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1f, 0x85, 0xc0, 0x79, 0x41, 0xeb, 0x55, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x85, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0x8b, 0x48, 0x08, 0x48, 0x8b, 0x89, 0x20, 0x01, 0x00, 0x00, 0x48, 0x83, 0x3c, 0x08, 0x00, 0x74, 0x33, 0x49, 0x89, 0xf6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x68, 0xff, 0xff, 0xff, 0xe9, 0x6a, 0xff, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_CHECK_ATTR_METHOD_LAZY_DICT_code_holes[11] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xea, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x123, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x136, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_CHECK_ATTR_METHOD_LAZY_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_CHECK_ATTR_METHOD_LAZY_DICT_data_holes[1];

// _LOAD_ATTR_SLOTplus_CHECK_ATTR_MODULE
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_CHECK_ATTR_MODULE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f7                      movq    %rsi, %r15
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 0f 84 d9 00 00 00             je      0x106 <_JIT_ENTRY+0x106>
// 2d: 49 89 d6                      movq    %rdx, %r14
// 30: 41 8b 45 00                   movl    (%r13), %eax
// 34: ff c0                         incl    %eax
// 36: 75 0f                         jne     0x47 <_JIT_ENTRY+0x47>
// 38: 49 8b 04 24                   movq    (%r12), %rax
// 3c: 48 85 c0                      testq   %rax, %rax
// 3f: 7e 1f                         jle     0x60 <_JIT_ENTRY+0x60>
// 41: 85 c0                         testl   %eax, %eax
// 43: 79 41                         jns     0x86 <_JIT_ENTRY+0x86>
// 45: eb 55                         jmp     0x9c <_JIT_ENTRY+0x9c>
// 47: 41 89 45 00                   movl    %eax, (%r13)
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 55: ff d0                         callq   *%rax
// 57: 49 8b 04 24                   movq    (%r12), %rax
// 5b: 48 85 c0                      testq   %rax, %rax
// 5e: 7f e1                         jg      0x41 <_JIT_ENTRY+0x41>
// 60: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000062:  R_X86_64_64  .rodata.str1.1
// 6a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006c:  R_X86_64_64  _Py_NegativeRefcount
// 74: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 79: 4c 89 e2                      movq    %r12, %rdx
// 7c: ff d0                         callq   *%rax
// 7e: 49 8b 04 24                   movq    (%r12), %rax
// 82: 85 c0                         testl   %eax, %eax
// 84: 78 16                         js      0x9c <_JIT_ENTRY+0x9c>
// 86: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000088:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 90: ff d0                         callq   *%rax
// 92: 49 ff 0c 24                   decq    (%r12)
// 96: 0f 84 9a 00 00 00             je      0x136 <_JIT_ENTRY+0x136>
// 9c: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _JIT_OPARG
// aa: a8 01                         testb   $0x1, %al
// ac: 74 07                         je      0xb5 <_JIT_ENTRY+0xb5>
// ae: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// b5: 83 e0 01                      andl    $0x1, %eax
// b8: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// bc: 49 8b 44 c7 f8                movq    -0x8(%r15,%rax,8), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  PyModule_Type
// cb: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// cf: 75 32                         jne     0x103 <_JIT_ENTRY+0x103>
// d1: 48 8b 40 10                   movq    0x10(%rax), %rax
// d5: 48 8b 40 20                   movq    0x20(%rax), %rax
// d9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000db:  R_X86_64_64  _JIT_OPERAND
// e3: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
// e6: 75 1b                         jne     0x103 <_JIT_ENTRY+0x103>
// e8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ea:  R_X86_64_64  _JIT_CONTINUE
// f2: 48 89 df                      movq    %rbx, %rdi
// f5: 4c 89 f2                      movq    %r14, %rdx
// f8: 5b                            popq    %rbx
// f9: 41 5c                         popq    %r12
// fb: 41 5d                         popq    %r13
// fd: 41 5e                         popq    %r14
// ff: 41 5f                         popq    %r15
// 101: ff e0                         jmpq    *%rax
// 103: 49 89 f7                      movq    %rsi, %r15
// 106: 49 29 df                      subq    %rbx, %r15
// 109: 49 83 c7 b8                   addq    $-0x48, %r15
// 10d: 49 c1 ef 03                   shrq    $0x3, %r15
// 111: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 115: 48 8b 03                      movq    (%rbx), %rax
// 118: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000011a:  R_X86_64_64  _JIT_TARGET
// 122: 89 c9                         movl    %ecx, %ecx
// 124: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 12c: 5b                            popq    %rbx
// 12d: 41 5c                         popq    %r12
// 12f: 41 5d                         popq    %r13
// 131: 41 5e                         popq    %r14
// 133: 41 5f                         popq    %r15
// 135: c3                            retq
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  _Py_Dealloc
// 140: 4c 89 e7                      movq    %r12, %rdi
// 143: ff d0                         callq   *%rax
// 145: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _JIT_OPARG
// 153: a8 01                         testb   $0x1, %al
// 155: 0f 85 53 ff ff ff             jne     0xae <_JIT_ENTRY+0xae>
// 15b: e9 55 ff ff ff                jmp     0xb5 <_JIT_ENTRY+0xb5>
// 160: 
static const unsigned char _LOAD_ATTR_SLOTplus_CHECK_ATTR_MODULE_code_body[353] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xd9, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd6, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1f, 0x85, 0xc0, 0x79, 0x41, 0xeb, 0x55, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x9a, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc7, 0x49, 0x8b, 0x44, 0xc7, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x32, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x48, 0x0c, 0x75, 0x1b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf2, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x49, 0x89, 0xf7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x53, 0xff, 0xff, 0xff, 0xe9, 0x55, 0xff, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_CHECK_ATTR_MODULE_code_holes[13] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyModule_Type, 0x0},
    {0xdb, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0xea, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x11a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_CHECK_ATTR_MODULE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_CHECK_ATTR_MODULE_data_holes[1];

// _LOAD_ATTR_SLOTplus_CHECK_ATTR_WITH_HINT
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_CHECK_ATTR_WITH_HINT.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f6                      movq    %rsi, %r14
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 0f 84 bf 00 00 00             je      0xec <_JIT_ENTRY+0xec>
// 2d: 49 89 d7                      movq    %rdx, %r15
// 30: 41 8b 45 00                   movl    (%r13), %eax
// 34: ff c0                         incl    %eax
// 36: 75 0f                         jne     0x47 <_JIT_ENTRY+0x47>
// 38: 49 8b 04 24                   movq    (%r12), %rax
// 3c: 48 85 c0                      testq   %rax, %rax
// 3f: 7e 1f                         jle     0x60 <_JIT_ENTRY+0x60>
// 41: 85 c0                         testl   %eax, %eax
// 43: 79 41                         jns     0x86 <_JIT_ENTRY+0x86>
// 45: eb 55                         jmp     0x9c <_JIT_ENTRY+0x9c>
// 47: 41 89 45 00                   movl    %eax, (%r13)
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 55: ff d0                         callq   *%rax
// 57: 49 8b 04 24                   movq    (%r12), %rax
// 5b: 48 85 c0                      testq   %rax, %rax
// 5e: 7f e1                         jg      0x41 <_JIT_ENTRY+0x41>
// 60: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000062:  R_X86_64_64  .rodata.str1.1
// 6a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006c:  R_X86_64_64  _Py_NegativeRefcount
// 74: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 79: 4c 89 e2                      movq    %r12, %rdx
// 7c: ff d0                         callq   *%rax
// 7e: 49 8b 04 24                   movq    (%r12), %rax
// 82: 85 c0                         testl   %eax, %eax
// 84: 78 16                         js      0x9c <_JIT_ENTRY+0x9c>
// 86: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000088:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 90: ff d0                         callq   *%rax
// 92: 49 ff 0c 24                   decq    (%r12)
// 96: 0f 84 80 00 00 00             je      0x11c <_JIT_ENTRY+0x11c>
// 9c: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _JIT_OPARG
// aa: a8 01                         testb   $0x1, %al
// ac: 74 07                         je      0xb5 <_JIT_ENTRY+0xb5>
// ae: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// b5: 83 e0 01                      andl    $0x1, %eax
// b8: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// bc: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// c1: 48 8b 40 e8                   movq    -0x18(%rax), %rax
// c5: a8 01                         testb   $0x1, %al
// c7: 75 20                         jne     0xe9 <_JIT_ENTRY+0xe9>
// c9: 48 85 c0                      testq   %rax, %rax
// cc: 74 1b                         je      0xe9 <_JIT_ENTRY+0xe9>
// ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d0:  R_X86_64_64  _JIT_CONTINUE
// d8: 48 89 df                      movq    %rbx, %rdi
// db: 4c 89 fa                      movq    %r15, %rdx
// de: 5b                            popq    %rbx
// df: 41 5c                         popq    %r12
// e1: 41 5d                         popq    %r13
// e3: 41 5e                         popq    %r14
// e5: 41 5f                         popq    %r15
// e7: ff e0                         jmpq    *%rax
// e9: 49 89 f6                      movq    %rsi, %r14
// ec: 49 29 de                      subq    %rbx, %r14
// ef: 49 83 c6 b8                   addq    $-0x48, %r14
// f3: 49 c1 ee 03                   shrq    $0x3, %r14
// f7: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// fb: 48 8b 03                      movq    (%rbx), %rax
// fe: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000100:  R_X86_64_64  _JIT_TARGET
// 108: 89 c9                         movl    %ecx, %ecx
// 10a: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 112: 5b                            popq    %rbx
// 113: 41 5c                         popq    %r12
// 115: 41 5d                         popq    %r13
// 117: 41 5e                         popq    %r14
// 119: 41 5f                         popq    %r15
// 11b: c3                            retq
// 11c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011e:  R_X86_64_64  _Py_Dealloc
// 126: 4c 89 e7                      movq    %r12, %rdi
// 129: ff d0                         callq   *%rax
// 12b: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _JIT_OPARG
// 139: a8 01                         testb   $0x1, %al
// 13b: 0f 85 6d ff ff ff             jne     0xae <_JIT_ENTRY+0xae>
// 141: e9 6f ff ff ff                jmp     0xb5 <_JIT_ENTRY+0xb5>
// 146: 
static const unsigned char _LOAD_ATTR_SLOTplus_CHECK_ATTR_WITH_HINT_code_body[327] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xbf, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1f, 0x85, 0xc0, 0x79, 0x41, 0xeb, 0x55, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x80, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0x8b, 0x40, 0xe8, 0xa8, 0x01, 0x75, 0x20, 0x48, 0x85, 0xc0, 0x74, 0x1b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x49, 0x89, 0xf6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x6d, 0xff, 0xff, 0xff, 0xe9, 0x6f, 0xff, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_CHECK_ATTR_WITH_HINT_code_holes[11] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x100, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x11e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_CHECK_ATTR_WITH_HINT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_CHECK_ATTR_WITH_HINT_data_holes[1];

// _LOAD_ATTR_SLOTplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f6                      movq    %rsi, %r14
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 0f 84 d8 00 00 00             je      0x105 <_JIT_ENTRY+0x105>
// 2d: 49 89 d7                      movq    %rdx, %r15
// 30: 41 8b 45 00                   movl    (%r13), %eax
// 34: ff c0                         incl    %eax
// 36: 75 0f                         jne     0x47 <_JIT_ENTRY+0x47>
// 38: 49 8b 04 24                   movq    (%r12), %rax
// 3c: 48 85 c0                      testq   %rax, %rax
// 3f: 7e 1f                         jle     0x60 <_JIT_ENTRY+0x60>
// 41: 85 c0                         testl   %eax, %eax
// 43: 79 41                         jns     0x86 <_JIT_ENTRY+0x86>
// 45: eb 55                         jmp     0x9c <_JIT_ENTRY+0x9c>
// 47: 41 89 45 00                   movl    %eax, (%r13)
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 55: ff d0                         callq   *%rax
// 57: 49 8b 04 24                   movq    (%r12), %rax
// 5b: 48 85 c0                      testq   %rax, %rax
// 5e: 7f e1                         jg      0x41 <_JIT_ENTRY+0x41>
// 60: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000062:  R_X86_64_64  .rodata.str1.1
// 6a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006c:  R_X86_64_64  _Py_NegativeRefcount
// 74: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 79: 4c 89 e2                      movq    %r12, %rdx
// 7c: ff d0                         callq   *%rax
// 7e: 49 8b 04 24                   movq    (%r12), %rax
// 82: 85 c0                         testl   %eax, %eax
// 84: 78 16                         js      0x9c <_JIT_ENTRY+0x9c>
// 86: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000088:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 90: ff d0                         callq   *%rax
// 92: 49 ff 0c 24                   decq    (%r12)
// 96: 0f 84 99 00 00 00             je      0x135 <_JIT_ENTRY+0x135>
// 9c: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _JIT_OPARG
// aa: a8 01                         testb   $0x1, %al
// ac: 74 07                         je      0xb5 <_JIT_ENTRY+0xb5>
// ae: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// b5: 89 c1                         movl    %eax, %ecx
// b7: 83 e1 01                      andl    $0x1, %ecx
// ba: 49 8d 34 ce                   leaq    (%r14,%rcx,8), %rsi
// be: f7 d0                         notl    %eax
// c0: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// c5: 48 98                         cltq
// c7: 48 01 c8                      addq    %rcx, %rax
// ca: 49 83 3c c6 00                cmpq    $0x0, (%r14,%rax,8)
// cf: 75 31                         jne     0x102 <_JIT_ENTRY+0x102>
// d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d3:  R_X86_64_64  _JIT_OPARG
// db: 0f b7 c8                      movzwl  %ax, %ecx
// de: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// e3: 29 ca                         subl    %ecx, %edx
// e5: 48 63 ca                      movslq  %edx, %rcx
// e8: 83 e0 01                      andl    $0x1, %eax
// eb: 48 01 c8                      addq    %rcx, %rax
// ee: 49 8b 04 c6                   movq    (%r14,%rax,8), %rax
// f2: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000f4:  R_X86_64_64  PyMethod_Type
// fc: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 100: 74 5d                         je      0x15f <_JIT_ENTRY+0x15f>
// 102: 49 89 f6                      movq    %rsi, %r14
// 105: 49 29 de                      subq    %rbx, %r14
// 108: 49 83 c6 b8                   addq    $-0x48, %r14
// 10c: 49 c1 ee 03                   shrq    $0x3, %r14
// 110: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 114: 48 8b 03                      movq    (%rbx), %rax
// 117: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000119:  R_X86_64_64  _JIT_TARGET
// 121: 89 c9                         movl    %ecx, %ecx
// 123: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 12b: 5b                            popq    %rbx
// 12c: 41 5c                         popq    %r12
// 12e: 41 5d                         popq    %r13
// 130: 41 5e                         popq    %r14
// 132: 41 5f                         popq    %r15
// 134: c3                            retq
// 135: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000137:  R_X86_64_64  _Py_Dealloc
// 13f: 4c 89 e7                      movq    %r12, %rdi
// 142: ff d0                         callq   *%rax
// 144: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 148: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014a:  R_X86_64_64  _JIT_OPARG
// 152: a8 01                         testb   $0x1, %al
// 154: 0f 85 54 ff ff ff             jne     0xae <_JIT_ENTRY+0xae>
// 15a: e9 56 ff ff ff                jmp     0xb5 <_JIT_ENTRY+0xb5>
// 15f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000161:  R_X86_64_64  _JIT_CONTINUE
// 169: 48 89 df                      movq    %rbx, %rdi
// 16c: 4c 89 fa                      movq    %r15, %rdx
// 16f: 5b                            popq    %rbx
// 170: 41 5c                         popq    %r12
// 172: 41 5d                         popq    %r13
// 174: 41 5e                         popq    %r14
// 176: 41 5f                         popq    %r15
// 178: ff e0                         jmpq    *%rax
// 17a: 
static const unsigned char _LOAD_ATTR_SLOTplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS_code_body[379] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xd8, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1f, 0x85, 0xc0, 0x79, 0x41, 0xeb, 0x55, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x99, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0x83, 0xe1, 0x01, 0x49, 0x8d, 0x34, 0xce, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x49, 0x83, 0x3c, 0xc6, 0x00, 0x75, 0x31, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xca, 0x83, 0xe0, 0x01, 0x48, 0x01, 0xc8, 0x49, 0x8b, 0x04, 0xc6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x5d, 0x49, 0x89, 0xf6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x54, 0xff, 0xff, 0xff, 0xe9, 0x56, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _LOAD_ATTR_SLOTplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS_code_holes[13] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethod_Type, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x137, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x14a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x161, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS_data_holes[1];

// _LOAD_ATTR_SLOTplus_CHECK_EG_MATCH
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_CHECK_EG_MATCH.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 18: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001a:  R_X86_64_64  _JIT_OPERAND
// 22: 0f b7 c0                      movzwl  %ax, %eax
// 25: 4d 8b 3c 04                   movq    (%r12,%rax), %r15
// 29: 4d 85 ff                      testq   %r15, %r15
// 2c: 74 1c                         je      0x4a <_JIT_ENTRY+0x4a>
// 2e: 48 89 d5                      movq    %rdx, %rbp
// 31: 41 8b 07                      movl    (%r15), %eax
// 34: ff c0                         incl    %eax
// 36: 75 3f                         jne     0x77 <_JIT_ENTRY+0x77>
// 38: 49 8b 04 24                   movq    (%r12), %rax
// 3c: 48 85 c0                      testq   %rax, %rax
// 3f: 7e 4e                         jle     0x8f <_JIT_ENTRY+0x8f>
// 41: 85 c0                         testl   %eax, %eax
// 43: 79 70                         jns     0xb5 <_JIT_ENTRY+0xb5>
// 45: e9 8c 00 00 00                jmp     0xd6 <_JIT_ENTRY+0xd6>
// 4a: 49 29 de                      subq    %rbx, %r14
// 4d: 49 83 c6 b8                   addq    $-0x48, %r14
// 51: 49 c1 ee 03                   shrq    $0x3, %r14
// 55: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 59: 48 8b 03                      movq    (%rbx), %rax
// 5c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005e:  R_X86_64_64  _JIT_TARGET
// 66: 89 c9                         movl    %ecx, %ecx
// 68: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 6c: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 72: e9 d7 02 00 00                jmp     0x34e <_JIT_ENTRY+0x34e>
// 77: 41 89 07                      movl    %eax, (%r15)
// 7a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007c:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 84: ff d0                         callq   *%rax
// 86: 49 8b 04 24                   movq    (%r12), %rax
// 8a: 48 85 c0                      testq   %rax, %rax
// 8d: 7f b2                         jg      0x41 <_JIT_ENTRY+0x41>
// 8f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000091:  R_X86_64_64  .rodata.str1.1
// 99: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009b:  R_X86_64_64  _Py_NegativeRefcount
// a3: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a8: 4c 89 e2                      movq    %r12, %rdx
// ab: ff d0                         callq   *%rax
// ad: 49 8b 04 24                   movq    (%r12), %rax
// b1: 85 c0                         testl   %eax, %eax
// b3: 78 21                         js      0xd6 <_JIT_ENTRY+0xd6>
// b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bf: ff d0                         callq   *%rax
// c1: 49 ff 0c 24                   decq    (%r12)
// c5: 75 0f                         jne     0xd6 <_JIT_ENTRY+0xd6>
// c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c9:  R_X86_64_64  _Py_Dealloc
// d1: 4c 89 e7                      movq    %r12, %rdi
// d4: ff d0                         callq   *%rax
// d6: 4d 89 7e f8                   movq    %r15, -0x8(%r14)
// da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000dc:  R_X86_64_64  _JIT_OPARG
// e4: a8 01                         testb   $0x1, %al
// e6: 74 07                         je      0xef <_JIT_ENTRY+0xef>
// e8: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// ef: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 00000000000000f1:  R_X86_64_64  _JIT_OPARG
// f9: 41 83 e7 01                   andl    $0x1, %r15d
// fd: 4f 8b 6c fe f0                movq    -0x10(%r14,%r15,8), %r13
// 102: 4f 8b 64 fe f8                movq    -0x8(%r14,%r15,8), %r12
// 107: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000109:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 111: 48 89 ef                      movq    %rbp, %rdi
// 114: 4c 89 e6                      movq    %r12, %rsi
// 117: ff d0                         callq   *%rax
// 119: 85 c0                         testl   %eax, %eax
// 11b: 78 41                         js      0x15e <_JIT_ENTRY+0x15e>
// 11d: 48 89 6c 24 10                movq    %rbp, 0x10(%rsp)
// 122: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 12a: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 133: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000135:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 13d: 48 89 e2                      movq    %rsp, %rdx
// 140: 48 8d 4c 24 08                leaq    0x8(%rsp), %rcx
// 145: 4c 89 ef                      movq    %r13, %rdi
// 148: 4c 89 e6                      movq    %r12, %rsi
// 14b: ff d0                         callq   *%rax
// 14d: 89 c5                         movl    %eax, %ebp
// 14f: 49 8b 45 00                   movq    (%r13), %rax
// 153: 48 85 c0                      testq   %rax, %rax
// 156: 7e 20                         jle     0x178 <_JIT_ENTRY+0x178>
// 158: 85 c0                         testl   %eax, %eax
// 15a: 79 42                         jns     0x19e <_JIT_ENTRY+0x19e>
// 15c: eb 61                         jmp     0x1bf <_JIT_ENTRY+0x1bf>
// 15e: 49 8b 45 00                   movq    (%r13), %rax
// 162: 48 85 c0                      testq   %rax, %rax
// 165: 0f 8e 15 01 00 00             jle     0x280 <_JIT_ENTRY+0x280>
// 16b: 85 c0                         testl   %eax, %eax
// 16d: 0f 89 33 01 00 00             jns     0x2a6 <_JIT_ENTRY+0x2a6>
// 173: e9 4f 01 00 00                jmp     0x2c7 <_JIT_ENTRY+0x2c7>
// 178: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000017a:  R_X86_64_64  .rodata.str1.1
// 182: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000184:  R_X86_64_64  _Py_NegativeRefcount
// 18c: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 191: 4c 89 ea                      movq    %r13, %rdx
// 194: ff d0                         callq   *%rax
// 196: 49 8b 45 00                   movq    (%r13), %rax
// 19a: 85 c0                         testl   %eax, %eax
// 19c: 78 21                         js      0x1bf <_JIT_ENTRY+0x1bf>
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1a8: ff d0                         callq   *%rax
// 1aa: 49 ff 4d 00                   decq    (%r13)
// 1ae: 75 0f                         jne     0x1bf <_JIT_ENTRY+0x1bf>
// 1b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b2:  R_X86_64_64  _Py_Dealloc
// 1ba: 4c 89 ef                      movq    %r13, %rdi
// 1bd: ff d0                         callq   *%rax
// 1bf: 49 8b 04 24                   movq    (%r12), %rax
// 1c3: 48 85 c0                      testq   %rax, %rax
// 1c6: 7e 06                         jle     0x1ce <_JIT_ENTRY+0x1ce>
// 1c8: 85 c0                         testl   %eax, %eax
// 1ca: 79 28                         jns     0x1f4 <_JIT_ENTRY+0x1f4>
// 1cc: eb 3c                         jmp     0x20a <_JIT_ENTRY+0x20a>
// 1ce: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d0:  R_X86_64_64  .rodata.str1.1
// 1d8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001da:  R_X86_64_64  _Py_NegativeRefcount
// 1e2: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 1e7: 4c 89 e2                      movq    %r12, %rdx
// 1ea: ff d0                         callq   *%rax
// 1ec: 49 8b 04 24                   movq    (%r12), %rax
// 1f0: 85 c0                         testl   %eax, %eax
// 1f2: 78 16                         js      0x20a <_JIT_ENTRY+0x20a>
// 1f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1fe: ff d0                         callq   *%rax
// 200: 49 ff 0c 24                   decq    (%r12)
// 204: 0f 84 15 01 00 00             je      0x31f <_JIT_ENTRY+0x31f>
// 20a: 85 ed                         testl   %ebp, %ebp
// 20c: 0f 88 24 01 00 00             js      0x336 <_JIT_ENTRY+0x336>
// 212: 48 8b 3c 24                   movq    (%rsp), %rdi
// 216: 48 85 ff                      testq   %rdi, %rdi
// 219: 0f 84 17 01 00 00             je      0x336 <_JIT_ENTRY+0x336>
// 21f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000221:  R_X86_64_64  _Py_NoneStruct
// 229: 48 39 c7                      cmpq    %rax, %rdi
// 22c: 74 10                         je      0x23e <_JIT_ENTRY+0x23e>
// 22e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000230:  R_X86_64_64  PyErr_SetHandledException
// 238: ff d0                         callq   *%rax
// 23a: 48 8b 04 24                   movq    (%rsp), %rax
// 23e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000240:  R_X86_64_64  _JIT_OPARG
// 248: 83 e1 01                      andl    $0x1, %ecx
// 24b: 49 8d 34 ce                   leaq    (%r14,%rcx,8), %rsi
// 24f: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 254: 49 89 54 ce f0                movq    %rdx, -0x10(%r14,%rcx,8)
// 259: 49 89 44 ce f8                movq    %rax, -0x8(%r14,%rcx,8)
// 25e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000260:  R_X86_64_64  _JIT_CONTINUE
// 268: 48 89 df                      movq    %rbx, %rdi
// 26b: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 270: 48 83 c4 18                   addq    $0x18, %rsp
// 274: 5b                            popq    %rbx
// 275: 41 5c                         popq    %r12
// 277: 41 5d                         popq    %r13
// 279: 41 5e                         popq    %r14
// 27b: 41 5f                         popq    %r15
// 27d: 5d                            popq    %rbp
// 27e: ff e0                         jmpq    *%rax
// 280: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000282:  R_X86_64_64  .rodata.str1.1
// 28a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028c:  R_X86_64_64  _Py_NegativeRefcount
// 294: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// 299: 4c 89 ea                      movq    %r13, %rdx
// 29c: ff d0                         callq   *%rax
// 29e: 49 8b 45 00                   movq    (%r13), %rax
// 2a2: 85 c0                         testl   %eax, %eax
// 2a4: 78 21                         js      0x2c7 <_JIT_ENTRY+0x2c7>
// 2a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2b0: ff d0                         callq   *%rax
// 2b2: 49 ff 4d 00                   decq    (%r13)
// 2b6: 75 0f                         jne     0x2c7 <_JIT_ENTRY+0x2c7>
// 2b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ba:  R_X86_64_64  _Py_Dealloc
// 2c2: 4c 89 ef                      movq    %r13, %rdi
// 2c5: ff d0                         callq   *%rax
// 2c7: 49 8b 04 24                   movq    (%r12), %rax
// 2cb: 48 85 c0                      testq   %rax, %rax
// 2ce: 7e 06                         jle     0x2d6 <_JIT_ENTRY+0x2d6>
// 2d0: 85 c0                         testl   %eax, %eax
// 2d2: 79 28                         jns     0x2fc <_JIT_ENTRY+0x2fc>
// 2d4: eb 60                         jmp     0x336 <_JIT_ENTRY+0x336>
// 2d6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002d8:  R_X86_64_64  .rodata.str1.1
// 2e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e2:  R_X86_64_64  _Py_NegativeRefcount
// 2ea: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 2ef: 4c 89 e2                      movq    %r12, %rdx
// 2f2: ff d0                         callq   *%rax
// 2f4: 49 8b 04 24                   movq    (%r12), %rax
// 2f8: 85 c0                         testl   %eax, %eax
// 2fa: 78 3a                         js      0x336 <_JIT_ENTRY+0x336>
// 2fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fe:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 306: ff d0                         callq   *%rax
// 308: 49 ff 0c 24                   decq    (%r12)
// 30c: 75 28                         jne     0x336 <_JIT_ENTRY+0x336>
// 30e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000310:  R_X86_64_64  _Py_Dealloc
// 318: 4c 89 e7                      movq    %r12, %rdi
// 31b: ff d0                         callq   *%rax
// 31d: eb 17                         jmp     0x336 <_JIT_ENTRY+0x336>
// 31f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000321:  R_X86_64_64  _Py_Dealloc
// 329: 4c 89 e7                      movq    %r12, %rdi
// 32c: ff d0                         callq   *%rax
// 32e: 85 ed                         testl   %ebp, %ebp
// 330: 0f 89 dc fe ff ff             jns     0x212 <_JIT_ENTRY+0x212>
// 336: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 33a: 48 83 c0 f0                   addq    $-0x10, %rax
// 33e: 48 29 d8                      subq    %rbx, %rax
// 341: 48 83 c0 b8                   addq    $-0x48, %rax
// 345: 48 c1 e8 03                   shrq    $0x3, %rax
// 349: 89 43 40                      movl    %eax, 0x40(%rbx)
// 34c: 31 c0                         xorl    %eax, %eax
// 34e: 48 83 c4 18                   addq    $0x18, %rsp
// 352: 5b                            popq    %rbx
// 353: 41 5c                         popq    %r12
// 355: 41 5d                         popq    %r13
// 357: 41 5e                         popq    %r14
// 359: 41 5f                         popq    %r15
// 35b: 5d                            popq    %rbp
// 35c: c3                            retq
// 35d: 
static const unsigned char _LOAD_ATTR_SLOTplus_CHECK_EG_MATCH_code_body[862] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x3c, 0x04, 0x4d, 0x85, 0xff, 0x74, 0x1c, 0x48, 0x89, 0xd5, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x75, 0x3f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4e, 0x85, 0xc0, 0x79, 0x70, 0xe9, 0x8c, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xd7, 0x02, 0x00, 0x00, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x83, 0xe7, 0x01, 0x4f, 0x8b, 0x6c, 0xfe, 0xf0, 0x4f, 0x8b, 0x64, 0xfe, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x41, 0x48, 0x89, 0x6c, 0x24, 0x10, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x08, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x20, 0x85, 0xc0, 0x79, 0x42, 0xeb, 0x61, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x15, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x33, 0x01, 0x00, 0x00, 0xe9, 0x4f, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x3c, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x15, 0x01, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x24, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x17, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe1, 0x01, 0x49, 0x8d, 0x34, 0xce, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x49, 0x89, 0x54, 0xce, 0xf0, 0x49, 0x89, 0x44, 0xce, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x60, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x3a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xeb, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0xdc, 0xfe, 0xff, 0xff, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x83, 0xc0, 0xf0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _LOAD_ATTR_SLOTplus_CHECK_EG_MATCH_code_holes[32] = {
    {0x1a, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5e, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xdc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x109, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x17a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1da, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x230, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x240, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x260, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x282, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x28c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2a8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2d8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2e2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2fe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x310, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x321, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_CHECK_EG_MATCH_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_CHECK_EG_MATCH_data_holes[1];

// _LOAD_ATTR_SLOTplus_CHECK_EXC_MATCH
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_CHECK_EXC_MATCH.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 26: 4d 85 ed                      testq   %r13, %r13
// 29: 74 1d                         je      0x48 <_JIT_ENTRY+0x48>
// 2b: 49 89 d7                      movq    %rdx, %r15
// 2e: 41 8b 45 00                   movl    (%r13), %eax
// 32: ff c0                         incl    %eax
// 34: 75 3f                         jne     0x75 <_JIT_ENTRY+0x75>
// 36: 49 8b 04 24                   movq    (%r12), %rax
// 3a: 48 85 c0                      testq   %rax, %rax
// 3d: 7e 4f                         jle     0x8e <_JIT_ENTRY+0x8e>
// 3f: 85 c0                         testl   %eax, %eax
// 41: 79 71                         jns     0xb4 <_JIT_ENTRY+0xb4>
// 43: e9 8d 00 00 00                jmp     0xd5 <_JIT_ENTRY+0xd5>
// 48: 49 29 de                      subq    %rbx, %r14
// 4b: 49 83 c6 b8                   addq    $-0x48, %r14
// 4f: 49 c1 ee 03                   shrq    $0x3, %r14
// 53: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 57: 48 8b 03                      movq    (%rbx), %rax
// 5a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005c:  R_X86_64_64  _JIT_TARGET
// 64: 89 c9                         movl    %ecx, %ecx
// 66: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 6a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 70: e9 e2 01 00 00                jmp     0x257 <_JIT_ENTRY+0x257>
// 75: 41 89 45 00                   movl    %eax, (%r13)
// 79: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007b:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 83: ff d0                         callq   *%rax
// 85: 49 8b 04 24                   movq    (%r12), %rax
// 89: 48 85 c0                      testq   %rax, %rax
// 8c: 7f b1                         jg      0x3f <_JIT_ENTRY+0x3f>
// 8e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000090:  R_X86_64_64  .rodata.str1.1
// 98: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009a:  R_X86_64_64  _Py_NegativeRefcount
// a2: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a7: 4c 89 e2                      movq    %r12, %rdx
// aa: ff d0                         callq   *%rax
// ac: 49 8b 04 24                   movq    (%r12), %rax
// b0: 85 c0                         testl   %eax, %eax
// b2: 78 21                         js      0xd5 <_JIT_ENTRY+0xd5>
// b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// be: ff d0                         callq   *%rax
// c0: 49 ff 0c 24                   decq    (%r12)
// c4: 75 0f                         jne     0xd5 <_JIT_ENTRY+0xd5>
// c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c8:  R_X86_64_64  _Py_Dealloc
// d0: 4c 89 e7                      movq    %r12, %rdi
// d3: ff d0                         callq   *%rax
// d5: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000db:  R_X86_64_64  _JIT_OPARG
// e3: a8 01                         testb   $0x1, %al
// e5: 74 07                         je      0xee <_JIT_ENTRY+0xee>
// e7: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// ee: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000000f0:  R_X86_64_64  _JIT_OPARG
// f8: 83 e5 01                      andl    $0x1, %ebp
// fb: 4d 8b 6c ee f0                movq    -0x10(%r14,%rbp,8), %r13
// 100: 4d 8b 64 ee f8                movq    -0x8(%r14,%rbp,8), %r12
// 105: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000107:  R_X86_64_64  _PyEval_CheckExceptTypeValid
// 10f: 4c 89 ff                      movq    %r15, %rdi
// 112: 4c 89 e6                      movq    %r12, %rsi
// 115: ff d0                         callq   *%rax
// 117: 85 c0                         testl   %eax, %eax
// 119: 78 23                         js      0x13e <_JIT_ENTRY+0x13e>
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  PyErr_GivenExceptionMatches
// 125: 4c 89 ef                      movq    %r13, %rdi
// 128: 4c 89 e6                      movq    %r12, %rsi
// 12b: ff d0                         callq   *%rax
// 12d: 89 c5                         movl    %eax, %ebp
// 12f: 49 8b 04 24                   movq    (%r12), %rax
// 133: 48 85 c0                      testq   %rax, %rax
// 136: 7e 28                         jle     0x160 <_JIT_ENTRY+0x160>
// 138: 85 c0                         testl   %eax, %eax
// 13a: 79 4a                         jns     0x186 <_JIT_ENTRY+0x186>
// 13c: eb 69                         jmp     0x1a7 <_JIT_ENTRY+0x1a7>
// 13e: 49 8b 04 24                   movq    (%r12), %rax
// 142: 48 85 c0                      testq   %rax, %rax
// 145: 0f 8e ac 00 00 00             jle     0x1f7 <_JIT_ENTRY+0x1f7>
// 14b: 4d 8d 34 ee                   leaq    (%r14,%rbp,8), %r14
// 14f: 49 83 c6 f8                   addq    $-0x8, %r14
// 153: 85 c0                         testl   %eax, %eax
// 155: 0f 89 ca 00 00 00             jns     0x225 <_JIT_ENTRY+0x225>
// 15b: e9 e6 00 00 00                jmp     0x246 <_JIT_ENTRY+0x246>
// 160: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000162:  R_X86_64_64  .rodata.str1.1
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_NegativeRefcount
// 174: be da 07 00 00                movl    $0x7da, %esi            # imm = 0x7DA
// 179: 4c 89 e2                      movq    %r12, %rdx
// 17c: ff d0                         callq   *%rax
// 17e: 49 8b 04 24                   movq    (%r12), %rax
// 182: 85 c0                         testl   %eax, %eax
// 184: 78 21                         js      0x1a7 <_JIT_ENTRY+0x1a7>
// 186: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000188:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 190: ff d0                         callq   *%rax
// 192: 49 ff 0c 24                   decq    (%r12)
// 196: 75 0f                         jne     0x1a7 <_JIT_ENTRY+0x1a7>
// 198: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019a:  R_X86_64_64  _Py_Dealloc
// 1a2: 4c 89 e7                      movq    %r12, %rdi
// 1a5: ff d0                         callq   *%rax
// 1a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a9:  R_X86_64_64  _JIT_OPARG
// 1b1: 83 e0 01                      andl    $0x1, %eax
// 1b4: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 1b8: 85 ed                         testl   %ebp, %ebp
// 1ba: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001bc:  R_X86_64_64  _Py_FalseStruct
// 1c4: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001c6:  R_X86_64_64  _Py_TrueStruct
// 1ce: 48 0f 44 d1                   cmoveq  %rcx, %rdx
// 1d2: 49 89 54 c6 f8                movq    %rdx, -0x8(%r14,%rax,8)
// 1d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d9:  R_X86_64_64  _JIT_CONTINUE
// 1e1: 48 89 df                      movq    %rbx, %rdi
// 1e4: 4c 89 fa                      movq    %r15, %rdx
// 1e7: 48 83 c4 08                   addq    $0x8, %rsp
// 1eb: 5b                            popq    %rbx
// 1ec: 41 5c                         popq    %r12
// 1ee: 41 5d                         popq    %r13
// 1f0: 41 5e                         popq    %r14
// 1f2: 41 5f                         popq    %r15
// 1f4: 5d                            popq    %rbp
// 1f5: ff e0                         jmpq    *%rax
// 1f7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f9:  R_X86_64_64  .rodata.str1.1
// 201: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000203:  R_X86_64_64  _Py_NegativeRefcount
// 20b: be d6 07 00 00                movl    $0x7d6, %esi            # imm = 0x7D6
// 210: 4c 89 e2                      movq    %r12, %rdx
// 213: ff d0                         callq   *%rax
// 215: 49 8b 04 24                   movq    (%r12), %rax
// 219: 4d 8d 34 ee                   leaq    (%r14,%rbp,8), %r14
// 21d: 49 83 c6 f8                   addq    $-0x8, %r14
// 221: 85 c0                         testl   %eax, %eax
// 223: 78 21                         js      0x246 <_JIT_ENTRY+0x246>
// 225: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000227:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 22f: ff d0                         callq   *%rax
// 231: 49 ff 0c 24                   decq    (%r12)
// 235: 75 0f                         jne     0x246 <_JIT_ENTRY+0x246>
// 237: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000239:  R_X86_64_64  _Py_Dealloc
// 241: 4c 89 e7                      movq    %r12, %rdi
// 244: ff d0                         callq   *%rax
// 246: 49 29 de                      subq    %rbx, %r14
// 249: 49 83 c6 b8                   addq    $-0x48, %r14
// 24d: 49 c1 ee 03                   shrq    $0x3, %r14
// 251: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 255: 31 c0                         xorl    %eax, %eax
// 257: 48 83 c4 08                   addq    $0x8, %rsp
// 25b: 5b                            popq    %rbx
// 25c: 41 5c                         popq    %r12
// 25e: 41 5d                         popq    %r13
// 260: 41 5e                         popq    %r14
// 262: 41 5f                         popq    %r15
// 264: 5d                            popq    %rbp
// 265: c3                            retq
// 266: 
static const unsigned char _LOAD_ATTR_SLOTplus_CHECK_EXC_MATCH_code_body[615] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1d, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x3f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4f, 0x85, 0xc0, 0x79, 0x71, 0xe9, 0x8d, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xe2, 0x01, 0x00, 0x00, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe5, 0x01, 0x4d, 0x8b, 0x6c, 0xee, 0xf0, 0x4d, 0x8b, 0x64, 0xee, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x28, 0x85, 0xc0, 0x79, 0x4a, 0xeb, 0x69, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xac, 0x00, 0x00, 0x00, 0x4d, 0x8d, 0x34, 0xee, 0x49, 0x83, 0xc6, 0xf8, 0x85, 0xc0, 0x0f, 0x89, 0xca, 0x00, 0x00, 0x00, 0xe9, 0xe6, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xda, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x85, 0xed, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xd1, 0x49, 0x89, 0x54, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd6, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x34, 0xee, 0x49, 0x83, 0xc6, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _LOAD_ATTR_SLOTplus_CHECK_EXC_MATCH_code_holes[24] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x90, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xc8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xdb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x107, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptTypeValid, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_GivenExceptionMatches, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x19a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x1c6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1f9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x203, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x227, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x239, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_CHECK_EXC_MATCH_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_CHECK_EXC_MATCH_data_holes[1];

// _LOAD_ATTR_SLOTplus_CHECK_FUNCTION_EXACT_ARGS
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_CHECK_FUNCTION_EXACT_ARGS.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f6                      movq    %rsi, %r14
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 0f 84 09 01 00 00             je      0x136 <_JIT_ENTRY+0x136>
// 2d: 49 89 d7                      movq    %rdx, %r15
// 30: 41 8b 45 00                   movl    (%r13), %eax
// 34: ff c0                         incl    %eax
// 36: 75 0f                         jne     0x47 <_JIT_ENTRY+0x47>
// 38: 49 8b 04 24                   movq    (%r12), %rax
// 3c: 48 85 c0                      testq   %rax, %rax
// 3f: 7e 1f                         jle     0x60 <_JIT_ENTRY+0x60>
// 41: 85 c0                         testl   %eax, %eax
// 43: 79 41                         jns     0x86 <_JIT_ENTRY+0x86>
// 45: eb 55                         jmp     0x9c <_JIT_ENTRY+0x9c>
// 47: 41 89 45 00                   movl    %eax, (%r13)
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 55: ff d0                         callq   *%rax
// 57: 49 8b 04 24                   movq    (%r12), %rax
// 5b: 48 85 c0                      testq   %rax, %rax
// 5e: 7f e1                         jg      0x41 <_JIT_ENTRY+0x41>
// 60: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000062:  R_X86_64_64  .rodata.str1.1
// 6a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006c:  R_X86_64_64  _Py_NegativeRefcount
// 74: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 79: 4c 89 e2                      movq    %r12, %rdx
// 7c: ff d0                         callq   *%rax
// 7e: 49 8b 04 24                   movq    (%r12), %rax
// 82: 85 c0                         testl   %eax, %eax
// 84: 78 16                         js      0x9c <_JIT_ENTRY+0x9c>
// 86: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000088:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 90: ff d0                         callq   *%rax
// 92: 49 ff 0c 24                   decq    (%r12)
// 96: 0f 84 ca 00 00 00             je      0x166 <_JIT_ENTRY+0x166>
// 9c: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _JIT_OPARG
// aa: a8 01                         testb   $0x1, %al
// ac: 74 07                         je      0xb5 <_JIT_ENTRY+0xb5>
// ae: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// b5: 0f b7 c8                      movzwl  %ax, %ecx
// b8: 83 e0 01                      andl    $0x1, %eax
// bb: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// bf: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// c4: 29 ca                         subl    %ecx, %edx
// c6: 48 63 d2                      movslq  %edx, %rdx
// c9: 48 01 c2                      addq    %rax, %rdx
// cc: 49 8b 14 d6                   movq    (%r14,%rdx,8), %rdx
// d0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d2:  R_X86_64_64  PyFunction_Type
// da: 48 39 7a 08                   cmpq    %rdi, 0x8(%rdx)
// de: 75 53                         jne     0x133 <_JIT_ENTRY+0x133>
// e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e2:  R_X86_64_64  _JIT_OPERAND
// ea: 39 ba 88 00 00 00             cmpl    %edi, 0x88(%rdx)
// f0: 75 41                         jne     0x133 <_JIT_ENTRY+0x133>
// f2: f7 d1                         notl    %ecx
// f4: 48 63 c9                      movslq  %ecx, %rcx
// f7: 48 01 c1                      addq    %rax, %rcx
// fa: 48 8b 42 30                   movq    0x30(%rdx), %rax
// fe: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000100:  R_X86_64_64  _JIT_OPARG
// 108: 0f b7 d2                      movzwl  %dx, %edx
// 10b: 49 83 3c ce 01                cmpq    $0x1, (%r14,%rcx,8)
// 110: 83 da ff                      sbbl    $-0x1, %edx
// 113: 39 50 34                      cmpl    %edx, 0x34(%rax)
// 116: 75 1b                         jne     0x133 <_JIT_ENTRY+0x133>
// 118: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011a:  R_X86_64_64  _JIT_CONTINUE
// 122: 48 89 df                      movq    %rbx, %rdi
// 125: 4c 89 fa                      movq    %r15, %rdx
// 128: 5b                            popq    %rbx
// 129: 41 5c                         popq    %r12
// 12b: 41 5d                         popq    %r13
// 12d: 41 5e                         popq    %r14
// 12f: 41 5f                         popq    %r15
// 131: ff e0                         jmpq    *%rax
// 133: 49 89 f6                      movq    %rsi, %r14
// 136: 49 29 de                      subq    %rbx, %r14
// 139: 49 83 c6 b8                   addq    $-0x48, %r14
// 13d: 49 c1 ee 03                   shrq    $0x3, %r14
// 141: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 145: 48 8b 03                      movq    (%rbx), %rax
// 148: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000014a:  R_X86_64_64  _JIT_TARGET
// 152: 89 c9                         movl    %ecx, %ecx
// 154: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 15c: 5b                            popq    %rbx
// 15d: 41 5c                         popq    %r12
// 15f: 41 5d                         popq    %r13
// 161: 41 5e                         popq    %r14
// 163: 41 5f                         popq    %r15
// 165: c3                            retq
// 166: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000168:  R_X86_64_64  _Py_Dealloc
// 170: 4c 89 e7                      movq    %r12, %rdi
// 173: ff d0                         callq   *%rax
// 175: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 179: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017b:  R_X86_64_64  _JIT_OPARG
// 183: a8 01                         testb   $0x1, %al
// 185: 0f 85 23 ff ff ff             jne     0xae <_JIT_ENTRY+0xae>
// 18b: e9 25 ff ff ff                jmp     0xb5 <_JIT_ENTRY+0xb5>
// 190: 
static const unsigned char _LOAD_ATTR_SLOTplus_CHECK_FUNCTION_EXACT_ARGS_code_body[401] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x09, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1f, 0x85, 0xc0, 0x79, 0x41, 0xeb, 0x55, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xca, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xd2, 0x48, 0x01, 0xc2, 0x49, 0x8b, 0x14, 0xd6, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x7a, 0x08, 0x75, 0x53, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0xba, 0x88, 0x00, 0x00, 0x00, 0x75, 0x41, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x48, 0x01, 0xc1, 0x48, 0x8b, 0x42, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x49, 0x83, 0x3c, 0xce, 0x01, 0x83, 0xda, 0xff, 0x39, 0x50, 0x34, 0x75, 0x1b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x49, 0x89, 0xf6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x23, 0xff, 0xff, 0xff, 0xe9, 0x25, 0xff, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_CHECK_FUNCTION_EXACT_ARGS_code_holes[14] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xd2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFunction_Type, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x100, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x11a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x14a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x168, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_CHECK_FUNCTION_EXACT_ARGS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_CHECK_FUNCTION_EXACT_ARGS_data_holes[1];

// _LOAD_ATTR_SLOTplus_CHECK_MANAGED_OBJECT_HAS_VALUES
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_CHECK_MANAGED_OBJECT_HAS_VALUES.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f7                      movq    %rsi, %r15
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 0f 84 cf 00 00 00             je      0xfc <_JIT_ENTRY+0xfc>
// 2d: 49 89 d6                      movq    %rdx, %r14
// 30: 41 8b 45 00                   movl    (%r13), %eax
// 34: ff c0                         incl    %eax
// 36: 75 0f                         jne     0x47 <_JIT_ENTRY+0x47>
// 38: 49 8b 04 24                   movq    (%r12), %rax
// 3c: 48 85 c0                      testq   %rax, %rax
// 3f: 7e 1f                         jle     0x60 <_JIT_ENTRY+0x60>
// 41: 85 c0                         testl   %eax, %eax
// 43: 79 41                         jns     0x86 <_JIT_ENTRY+0x86>
// 45: eb 55                         jmp     0x9c <_JIT_ENTRY+0x9c>
// 47: 41 89 45 00                   movl    %eax, (%r13)
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 55: ff d0                         callq   *%rax
// 57: 49 8b 04 24                   movq    (%r12), %rax
// 5b: 48 85 c0                      testq   %rax, %rax
// 5e: 7f e1                         jg      0x41 <_JIT_ENTRY+0x41>
// 60: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000062:  R_X86_64_64  .rodata.str1.1
// 6a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006c:  R_X86_64_64  _Py_NegativeRefcount
// 74: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 79: 4c 89 e2                      movq    %r12, %rdx
// 7c: ff d0                         callq   *%rax
// 7e: 49 8b 04 24                   movq    (%r12), %rax
// 82: 85 c0                         testl   %eax, %eax
// 84: 78 16                         js      0x9c <_JIT_ENTRY+0x9c>
// 86: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000088:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 90: ff d0                         callq   *%rax
// 92: 49 ff 0c 24                   decq    (%r12)
// 96: 0f 84 90 00 00 00             je      0x12c <_JIT_ENTRY+0x12c>
// 9c: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _JIT_OPARG
// aa: a8 01                         testb   $0x1, %al
// ac: 74 07                         je      0xb5 <_JIT_ENTRY+0xb5>
// ae: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// b5: 83 e0 01                      andl    $0x1, %eax
// b8: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// bc: 49 8b 7c c7 f8                movq    -0x8(%r15,%rax,8), %rdi
// c1: f6 47 e8 01                   testb   $0x1, -0x18(%rdi)
// c5: 75 14                         jne     0xdb <_JIT_ENTRY+0xdb>
// c7: 48 8d 77 e8                   leaq    -0x18(%rdi), %rsi
// cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cd:  R_X86_64_64  _PyObject_MakeInstanceAttributesFromDict
// d5: ff d0                         callq   *%rax
// d7: 84 c0                         testb   %al, %al
// d9: 74 1e                         je      0xf9 <_JIT_ENTRY+0xf9>
// db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000dd:  R_X86_64_64  _JIT_CONTINUE
// e5: 48 89 df                      movq    %rbx, %rdi
// e8: 4c 89 e6                      movq    %r12, %rsi
// eb: 4c 89 f2                      movq    %r14, %rdx
// ee: 5b                            popq    %rbx
// ef: 41 5c                         popq    %r12
// f1: 41 5d                         popq    %r13
// f3: 41 5e                         popq    %r14
// f5: 41 5f                         popq    %r15
// f7: ff e0                         jmpq    *%rax
// f9: 4d 89 e7                      movq    %r12, %r15
// fc: 49 29 df                      subq    %rbx, %r15
// ff: 49 83 c7 b8                   addq    $-0x48, %r15
// 103: 49 c1 ef 03                   shrq    $0x3, %r15
// 107: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 10b: 48 8b 03                      movq    (%rbx), %rax
// 10e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000110:  R_X86_64_64  _JIT_TARGET
// 118: 89 c9                         movl    %ecx, %ecx
// 11a: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 122: 5b                            popq    %rbx
// 123: 41 5c                         popq    %r12
// 125: 41 5d                         popq    %r13
// 127: 41 5e                         popq    %r14
// 129: 41 5f                         popq    %r15
// 12b: c3                            retq
// 12c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012e:  R_X86_64_64  _Py_Dealloc
// 136: 4c 89 e7                      movq    %r12, %rdi
// 139: ff d0                         callq   *%rax
// 13b: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// 13f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000141:  R_X86_64_64  _JIT_OPARG
// 149: a8 01                         testb   $0x1, %al
// 14b: 0f 85 5d ff ff ff             jne     0xae <_JIT_ENTRY+0xae>
// 151: e9 5f ff ff ff                jmp     0xb5 <_JIT_ENTRY+0xb5>
// 156: 
static const unsigned char _LOAD_ATTR_SLOTplus_CHECK_MANAGED_OBJECT_HAS_VALUES_code_body[343] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xcf, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd6, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1f, 0x85, 0xc0, 0x79, 0x41, 0xeb, 0x55, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x90, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x8b, 0x7c, 0xc7, 0xf8, 0xf6, 0x47, 0xe8, 0x01, 0x75, 0x14, 0x48, 0x8d, 0x77, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x84, 0xc0, 0x74, 0x1e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x4d, 0x89, 0xe7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x5d, 0xff, 0xff, 0xff, 0xe9, 0x5f, 0xff, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_CHECK_MANAGED_OBJECT_HAS_VALUES_code_holes[12] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_MakeInstanceAttributesFromDict, 0x0},
    {0xdd, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x12e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_CHECK_MANAGED_OBJECT_HAS_VALUES_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_CHECK_MANAGED_OBJECT_HAS_VALUES_data_holes[1];

// _LOAD_ATTR_SLOTplus_CHECK_PEP_523
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_CHECK_PEP_523.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 48 89 f3                      movq    %rsi, %rbx
// c: 49 89 fe                      movq    %rdi, %r14
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 0f 84 99 00 00 00             je      0xc6 <_JIT_ENTRY+0xc6>
// 2d: 49 89 d7                      movq    %rdx, %r15
// 30: 41 8b 45 00                   movl    (%r13), %eax
// 34: ff c0                         incl    %eax
// 36: 75 0f                         jne     0x47 <_JIT_ENTRY+0x47>
// 38: 49 8b 04 24                   movq    (%r12), %rax
// 3c: 48 85 c0                      testq   %rax, %rax
// 3f: 7e 1f                         jle     0x60 <_JIT_ENTRY+0x60>
// 41: 85 c0                         testl   %eax, %eax
// 43: 79 41                         jns     0x86 <_JIT_ENTRY+0x86>
// 45: eb 51                         jmp     0x98 <_JIT_ENTRY+0x98>
// 47: 41 89 45 00                   movl    %eax, (%r13)
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 55: ff d0                         callq   *%rax
// 57: 49 8b 04 24                   movq    (%r12), %rax
// 5b: 48 85 c0                      testq   %rax, %rax
// 5e: 7f e1                         jg      0x41 <_JIT_ENTRY+0x41>
// 60: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000062:  R_X86_64_64  .rodata.str1.1
// 6a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006c:  R_X86_64_64  _Py_NegativeRefcount
// 74: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 79: 4c 89 e2                      movq    %r12, %rdx
// 7c: ff d0                         callq   *%rax
// 7e: 49 8b 04 24                   movq    (%r12), %rax
// 82: 85 c0                         testl   %eax, %eax
// 84: 78 12                         js      0x98 <_JIT_ENTRY+0x98>
// 86: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000088:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 90: ff d0                         callq   *%rax
// 92: 49 ff 0c 24                   decq    (%r12)
// 96: 74 7c                         je      0x114 <_JIT_ENTRY+0x114>
// 98: 4c 89 6b f8                   movq    %r13, -0x8(%rbx)
// 9c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009e:  R_X86_64_64  _JIT_OPARG
// a6: a8 01                         testb   $0x1, %al
// a8: 74 07                         je      0xb1 <_JIT_ENTRY+0xb1>
// aa: 48 c7 03 00 00 00 00          movq    $0x0, (%rbx)
// b1: 83 e0 01                      andl    $0x1, %eax
// b4: 48 8d 1c c3                   leaq    (%rbx,%rax,8), %rbx
// b8: 49 8b 47 10                   movq    0x10(%r15), %rax
// bc: 48 83 b8 20 08 00 00 00       cmpq    $0x0, 0x820(%rax)
// c4: 74 30                         je      0xf6 <_JIT_ENTRY+0xf6>
// c6: 4c 29 f3                      subq    %r14, %rbx
// c9: 48 83 c3 b8                   addq    $-0x48, %rbx
// cd: 48 c1 eb 03                   shrq    $0x3, %rbx
// d1: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// d5: 49 8b 06                      movq    (%r14), %rax
// d8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000da:  R_X86_64_64  _JIT_TARGET
// e2: 89 c9                         movl    %ecx, %ecx
// e4: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// ec: 5b                            popq    %rbx
// ed: 41 5c                         popq    %r12
// ef: 41 5d                         popq    %r13
// f1: 41 5e                         popq    %r14
// f3: 41 5f                         popq    %r15
// f5: c3                            retq
// f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f8:  R_X86_64_64  _JIT_CONTINUE
// 100: 4c 89 f7                      movq    %r14, %rdi
// 103: 48 89 de                      movq    %rbx, %rsi
// 106: 4c 89 fa                      movq    %r15, %rdx
// 109: 5b                            popq    %rbx
// 10a: 41 5c                         popq    %r12
// 10c: 41 5d                         popq    %r13
// 10e: 41 5e                         popq    %r14
// 110: 41 5f                         popq    %r15
// 112: ff e0                         jmpq    *%rax
// 114: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000116:  R_X86_64_64  _Py_Dealloc
// 11e: 4c 89 e7                      movq    %r12, %rdi
// 121: ff d0                         callq   *%rax
// 123: 4c 89 6b f8                   movq    %r13, -0x8(%rbx)
// 127: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000129:  R_X86_64_64  _JIT_OPARG
// 131: a8 01                         testb   $0x1, %al
// 133: 0f 85 71 ff ff ff             jne     0xaa <_JIT_ENTRY+0xaa>
// 139: e9 73 ff ff ff                jmp     0xb1 <_JIT_ENTRY+0xb1>
// 13e: 
static const unsigned char _LOAD_ATTR_SLOTplus_CHECK_PEP_523_code_body[319] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x99, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1f, 0x85, 0xc0, 0x79, 0x41, 0xeb, 0x51, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x7c, 0x4c, 0x89, 0x6b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x48, 0xc7, 0x03, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x48, 0x8d, 0x1c, 0xc3, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x83, 0xb8, 0x20, 0x08, 0x00, 0x00, 0x00, 0x74, 0x30, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x71, 0xff, 0xff, 0xff, 0xe9, 0x73, 0xff, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_CHECK_PEP_523_code_holes[11] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x9e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xda, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xf8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x116, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x129, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_CHECK_PEP_523_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_CHECK_PEP_523_data_holes[1];

// _LOAD_ATTR_SLOTplus_CHECK_STACK_SPACE
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_CHECK_STACK_SPACE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f7                      movq    %rsi, %r15
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 0f 84 ec 00 00 00             je      0x119 <_JIT_ENTRY+0x119>
// 2d: 49 89 d6                      movq    %rdx, %r14
// 30: 41 8b 45 00                   movl    (%r13), %eax
// 34: ff c0                         incl    %eax
// 36: 75 0f                         jne     0x47 <_JIT_ENTRY+0x47>
// 38: 49 8b 04 24                   movq    (%r12), %rax
// 3c: 48 85 c0                      testq   %rax, %rax
// 3f: 7e 1f                         jle     0x60 <_JIT_ENTRY+0x60>
// 41: 85 c0                         testl   %eax, %eax
// 43: 79 41                         jns     0x86 <_JIT_ENTRY+0x86>
// 45: eb 60                         jmp     0xa7 <_JIT_ENTRY+0xa7>
// 47: 41 89 45 00                   movl    %eax, (%r13)
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 55: ff d0                         callq   *%rax
// 57: 49 8b 04 24                   movq    (%r12), %rax
// 5b: 48 85 c0                      testq   %rax, %rax
// 5e: 7f e1                         jg      0x41 <_JIT_ENTRY+0x41>
// 60: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000062:  R_X86_64_64  .rodata.str1.1
// 6a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006c:  R_X86_64_64  _Py_NegativeRefcount
// 74: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 79: 4c 89 e2                      movq    %r12, %rdx
// 7c: ff d0                         callq   *%rax
// 7e: 49 8b 04 24                   movq    (%r12), %rax
// 82: 85 c0                         testl   %eax, %eax
// 84: 78 21                         js      0xa7 <_JIT_ENTRY+0xa7>
// 86: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000088:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 90: ff d0                         callq   *%rax
// 92: 49 ff 0c 24                   decq    (%r12)
// 96: 75 0f                         jne     0xa7 <_JIT_ENTRY+0xa7>
// 98: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009a:  R_X86_64_64  _Py_Dealloc
// a2: 4c 89 e7                      movq    %r12, %rdi
// a5: ff d0                         callq   *%rax
// a7: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ad:  R_X86_64_64  _JIT_OPARG
// b5: a8 01                         testb   $0x1, %al
// b7: 74 07                         je      0xc0 <_JIT_ENTRY+0xc0>
// b9: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// c0: 83 e0 01                      andl    $0x1, %eax
// c3: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// c7: 49 8b 86 00 01 00 00          movq    0x100(%r14), %rax
// ce: 48 85 c0                      testq   %rax, %rax
// d1: 74 43                         je      0x116 <_JIT_ENTRY+0x116>
// d3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d5:  R_X86_64_64  _JIT_OPARG
// dd: 0f b7 d1                      movzwl  %cx, %edx
// e0: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// e5: 29 d7                         subl    %edx, %edi
// e7: 48 63 d7                      movslq  %edi, %rdx
// ea: 83 e1 01                      andl    $0x1, %ecx
// ed: 48 01 d1                      addq    %rdx, %rcx
// f0: 49 8b 0c cf                   movq    (%r15,%rcx,8), %rcx
// f4: 48 8b 49 30                   movq    0x30(%rcx), %rcx
// f8: 48 63 49 4c                   movslq  0x4c(%rcx), %rcx
// fc: 49 8b 96 08 01 00 00          movq    0x108(%r14), %rdx
// 103: 48 29 c2                      subq    %rax, %rdx
// 106: 48 c1 fa 03                   sarq    $0x3, %rdx
// 10a: 48 39 ca                      cmpq    %rcx, %rdx
// 10d: 7e 07                         jle     0x116 <_JIT_ENTRY+0x116>
// 10f: 41 83 7e 24 02                cmpl    $0x2, 0x24(%r14)
// 114: 7d 33                         jge     0x149 <_JIT_ENTRY+0x149>
// 116: 49 89 f7                      movq    %rsi, %r15
// 119: 49 29 df                      subq    %rbx, %r15
// 11c: 49 83 c7 b8                   addq    $-0x48, %r15
// 120: 49 c1 ef 03                   shrq    $0x3, %r15
// 124: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 128: 48 8b 03                      movq    (%rbx), %rax
// 12b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000012d:  R_X86_64_64  _JIT_TARGET
// 135: 89 c9                         movl    %ecx, %ecx
// 137: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 13f: 5b                            popq    %rbx
// 140: 41 5c                         popq    %r12
// 142: 41 5d                         popq    %r13
// 144: 41 5e                         popq    %r14
// 146: 41 5f                         popq    %r15
// 148: c3                            retq
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _JIT_CONTINUE
// 153: 48 89 df                      movq    %rbx, %rdi
// 156: 4c 89 f2                      movq    %r14, %rdx
// 159: 5b                            popq    %rbx
// 15a: 41 5c                         popq    %r12
// 15c: 41 5d                         popq    %r13
// 15e: 41 5e                         popq    %r14
// 160: 41 5f                         popq    %r15
// 162: ff e0                         jmpq    *%rax
// 164: 
static const unsigned char _LOAD_ATTR_SLOTplus_CHECK_STACK_SPACE_code_body[357] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd6, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1f, 0x85, 0xc0, 0x79, 0x41, 0xeb, 0x60, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc7, 0x49, 0x8b, 0x86, 0x00, 0x01, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x43, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xd7, 0x48, 0x63, 0xd7, 0x83, 0xe1, 0x01, 0x48, 0x01, 0xd1, 0x49, 0x8b, 0x0c, 0xcf, 0x48, 0x8b, 0x49, 0x30, 0x48, 0x63, 0x49, 0x4c, 0x49, 0x8b, 0x96, 0x08, 0x01, 0x00, 0x00, 0x48, 0x29, 0xc2, 0x48, 0xc1, 0xfa, 0x03, 0x48, 0x39, 0xca, 0x7e, 0x07, 0x41, 0x83, 0x7e, 0x24, 0x02, 0x7d, 0x33, 0x49, 0x89, 0xf7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf2, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _LOAD_ATTR_SLOTplus_CHECK_STACK_SPACE_code_holes[11] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x9a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_CHECK_STACK_SPACE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_CHECK_STACK_SPACE_data_holes[1];

// _LOAD_ATTR_SLOTplus_CHECK_VALIDITY
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_CHECK_VALIDITY.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 48 89 f3                      movq    %rsi, %rbx
// c: 49 89 fe                      movq    %rdi, %r14
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 0f 84 b9 00 00 00             je      0xe6 <_JIT_ENTRY+0xe6>
// 2d: 49 89 d7                      movq    %rdx, %r15
// 30: 41 8b 45 00                   movl    (%r13), %eax
// 34: ff c0                         incl    %eax
// 36: 75 0f                         jne     0x47 <_JIT_ENTRY+0x47>
// 38: 49 8b 04 24                   movq    (%r12), %rax
// 3c: 48 85 c0                      testq   %rax, %rax
// 3f: 7e 1f                         jle     0x60 <_JIT_ENTRY+0x60>
// 41: 85 c0                         testl   %eax, %eax
// 43: 79 41                         jns     0x86 <_JIT_ENTRY+0x86>
// 45: eb 51                         jmp     0x98 <_JIT_ENTRY+0x98>
// 47: 41 89 45 00                   movl    %eax, (%r13)
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 55: ff d0                         callq   *%rax
// 57: 49 8b 04 24                   movq    (%r12), %rax
// 5b: 48 85 c0                      testq   %rax, %rax
// 5e: 7f e1                         jg      0x41 <_JIT_ENTRY+0x41>
// 60: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000062:  R_X86_64_64  .rodata.str1.1
// 6a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006c:  R_X86_64_64  _Py_NegativeRefcount
// 74: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 79: 4c 89 e2                      movq    %r12, %rdx
// 7c: ff d0                         callq   *%rax
// 7e: 49 8b 04 24                   movq    (%r12), %rax
// 82: 85 c0                         testl   %eax, %eax
// 84: 78 12                         js      0x98 <_JIT_ENTRY+0x98>
// 86: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000088:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 90: ff d0                         callq   *%rax
// 92: 49 ff 0c 24                   decq    (%r12)
// 96: 74 7e                         je      0x116 <_JIT_ENTRY+0x116>
// 98: 4c 89 6b f8                   movq    %r13, -0x8(%rbx)
// 9c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009e:  R_X86_64_64  _JIT_OPARG
// a6: a8 01                         testb   $0x1, %al
// a8: 74 07                         je      0xb1 <_JIT_ENTRY+0xb1>
// aa: 48 c7 03 00 00 00 00          movq    $0x0, (%rbx)
// b1: 83 e0 01                      andl    $0x1, %eax
// b4: 48 8d 1c c3                   leaq    (%rbx,%rax,8), %rbx
// b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ba:  R_X86_64_64  _JIT_EXECUTOR
// c2: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// c6: 74 1e                         je      0xe6 <_JIT_ENTRY+0xe6>
// c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ca:  R_X86_64_64  _JIT_CONTINUE
// d2: 4c 89 f7                      movq    %r14, %rdi
// d5: 48 89 de                      movq    %rbx, %rsi
// d8: 4c 89 fa                      movq    %r15, %rdx
// db: 5b                            popq    %rbx
// dc: 41 5c                         popq    %r12
// de: 41 5d                         popq    %r13
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: ff e0                         jmpq    *%rax
// e6: 4c 29 f3                      subq    %r14, %rbx
// e9: 48 83 c3 b8                   addq    $-0x48, %rbx
// ed: 48 c1 eb 03                   shrq    $0x3, %rbx
// f1: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// f5: 49 8b 06                      movq    (%r14), %rax
// f8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000fa:  R_X86_64_64  _JIT_TARGET
// 102: 89 c9                         movl    %ecx, %ecx
// 104: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 10c: 5b                            popq    %rbx
// 10d: 41 5c                         popq    %r12
// 10f: 41 5d                         popq    %r13
// 111: 41 5e                         popq    %r14
// 113: 41 5f                         popq    %r15
// 115: c3                            retq
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_Dealloc
// 120: 4c 89 e7                      movq    %r12, %rdi
// 123: ff d0                         callq   *%rax
// 125: 4c 89 6b f8                   movq    %r13, -0x8(%rbx)
// 129: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012b:  R_X86_64_64  _JIT_OPARG
// 133: a8 01                         testb   $0x1, %al
// 135: 0f 85 6f ff ff ff             jne     0xaa <_JIT_ENTRY+0xaa>
// 13b: e9 71 ff ff ff                jmp     0xb1 <_JIT_ENTRY+0xb1>
// 140: 
static const unsigned char _LOAD_ATTR_SLOTplus_CHECK_VALIDITY_code_body[321] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xb9, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1f, 0x85, 0xc0, 0x79, 0x41, 0xeb, 0x51, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x7e, 0x4c, 0x89, 0x6b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x48, 0xc7, 0x03, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x48, 0x8d, 0x1c, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x1e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x6f, 0xff, 0xff, 0xff, 0xe9, 0x71, 0xff, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_CHECK_VALIDITY_code_holes[12] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x9e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xba, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0xca, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_CHECK_VALIDITY_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_CHECK_VALIDITY_data_holes[1];

// _LOAD_ATTR_SLOTplus_COMPARE_OP
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_COMPARE_OP.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 4d 8b 3c 04                   movq    (%r12,%rax), %r15
// 26: 4d 85 ff                      testq   %r15, %r15
// 29: 74 1c                         je      0x47 <_JIT_ENTRY+0x47>
// 2b: 49 89 d5                      movq    %rdx, %r13
// 2e: 41 8b 07                      movl    (%r15), %eax
// 31: ff c0                         incl    %eax
// 33: 75 3f                         jne     0x74 <_JIT_ENTRY+0x74>
// 35: 49 8b 04 24                   movq    (%r12), %rax
// 39: 48 85 c0                      testq   %rax, %rax
// 3c: 7e 4e                         jle     0x8c <_JIT_ENTRY+0x8c>
// 3e: 85 c0                         testl   %eax, %eax
// 40: 79 70                         jns     0xb2 <_JIT_ENTRY+0xb2>
// 42: e9 8c 00 00 00                jmp     0xd3 <_JIT_ENTRY+0xd3>
// 47: 49 29 de                      subq    %rbx, %r14
// 4a: 49 83 c6 b8                   addq    $-0x48, %r14
// 4e: 49 c1 ee 03                   shrq    $0x3, %r14
// 52: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 56: 48 8b 03                      movq    (%rbx), %rax
// 59: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005b:  R_X86_64_64  _JIT_TARGET
// 63: 89 c9                         movl    %ecx, %ecx
// 65: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 69: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 6f: e9 5c 02 00 00                jmp     0x2d0 <_JIT_ENTRY+0x2d0>
// 74: 41 89 07                      movl    %eax, (%r15)
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 81: ff d0                         callq   *%rax
// 83: 49 8b 04 24                   movq    (%r12), %rax
// 87: 48 85 c0                      testq   %rax, %rax
// 8a: 7f b2                         jg      0x3e <_JIT_ENTRY+0x3e>
// 8c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008e:  R_X86_64_64  .rodata.str1.1
// 96: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000098:  R_X86_64_64  _Py_NegativeRefcount
// a0: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a5: 4c 89 e2                      movq    %r12, %rdx
// a8: ff d0                         callq   *%rax
// aa: 49 8b 04 24                   movq    (%r12), %rax
// ae: 85 c0                         testl   %eax, %eax
// b0: 78 21                         js      0xd3 <_JIT_ENTRY+0xd3>
// b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: ff d0                         callq   *%rax
// be: 49 ff 0c 24                   decq    (%r12)
// c2: 75 0f                         jne     0xd3 <_JIT_ENTRY+0xd3>
// c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c6:  R_X86_64_64  _Py_Dealloc
// ce: 4c 89 e7                      movq    %r12, %rdi
// d1: ff d0                         callq   *%rax
// d3: 4c 89 2c 24                   movq    %r13, (%rsp)
// d7: 4d 89 7e f8                   movq    %r15, -0x8(%r14)
// db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000dd:  R_X86_64_64  _JIT_OPARG
// e5: a8 01                         testb   $0x1, %al
// e7: 74 07                         je      0xf0 <_JIT_ENTRY+0xf0>
// e9: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// f0: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 00000000000000f2:  R_X86_64_64  _JIT_OPARG
// fa: 41 0f b7 d7                   movzwl  %r15w, %edx
// fe: 41 83 e7 01                   andl    $0x1, %r15d
// 102: 4b 8b 6c fe f0                movq    -0x10(%r14,%r15,8), %rbp
// 107: 4f 8b 6c fe f8                movq    -0x8(%r14,%r15,8), %r13
// 10c: c1 ea 05                      shrl    $0x5, %edx
// 10f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000111:  R_X86_64_64  PyObject_RichCompare
// 119: 48 89 ef                      movq    %rbp, %rdi
// 11c: 4c 89 ee                      movq    %r13, %rsi
// 11f: ff d0                         callq   *%rax
// 121: 49 89 c4                      movq    %rax, %r12
// 124: 48 8b 45 00                   movq    (%rbp), %rax
// 128: 48 85 c0                      testq   %rax, %rax
// 12b: 7e 06                         jle     0x133 <_JIT_ENTRY+0x133>
// 12d: 85 c0                         testl   %eax, %eax
// 12f: 79 28                         jns     0x159 <_JIT_ENTRY+0x159>
// 131: eb 38                         jmp     0x16b <_JIT_ENTRY+0x16b>
// 133: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000135:  R_X86_64_64  .rodata.str1.1
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_NegativeRefcount
// 147: be 38 07 00 00                movl    $0x738, %esi            # imm = 0x738
// 14c: 48 89 ea                      movq    %rbp, %rdx
// 14f: ff d0                         callq   *%rax
// 151: 48 8b 45 00                   movq    (%rbp), %rax
// 155: 85 c0                         testl   %eax, %eax
// 157: 78 12                         js      0x16b <_JIT_ENTRY+0x16b>
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 163: ff d0                         callq   *%rax
// 165: 48 ff 4d 00                   decq    (%rbp)
// 169: 74 0f                         je      0x17a <_JIT_ENTRY+0x17a>
// 16b: 49 8b 45 00                   movq    (%r13), %rax
// 16f: 48 85 c0                      testq   %rax, %rax
// 172: 7e 1e                         jle     0x192 <_JIT_ENTRY+0x192>
// 174: 85 c0                         testl   %eax, %eax
// 176: 79 40                         jns     0x1b8 <_JIT_ENTRY+0x1b8>
// 178: eb 54                         jmp     0x1ce <_JIT_ENTRY+0x1ce>
// 17a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017c:  R_X86_64_64  _Py_Dealloc
// 184: 48 89 ef                      movq    %rbp, %rdi
// 187: ff d0                         callq   *%rax
// 189: 49 8b 45 00                   movq    (%r13), %rax
// 18d: 48 85 c0                      testq   %rax, %rax
// 190: 7f e2                         jg      0x174 <_JIT_ENTRY+0x174>
// 192: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000194:  R_X86_64_64  .rodata.str1.1
// 19c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019e:  R_X86_64_64  _Py_NegativeRefcount
// 1a6: be 39 07 00 00                movl    $0x739, %esi            # imm = 0x739
// 1ab: 4c 89 ea                      movq    %r13, %rdx
// 1ae: ff d0                         callq   *%rax
// 1b0: 49 8b 45 00                   movq    (%r13), %rax
// 1b4: 85 c0                         testl   %eax, %eax
// 1b6: 78 16                         js      0x1ce <_JIT_ENTRY+0x1ce>
// 1b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ba:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c2: ff d0                         callq   *%rax
// 1c4: 49 ff 4d 00                   decq    (%r13)
// 1c8: 0f 84 d2 00 00 00             je      0x2a0 <_JIT_ENTRY+0x2a0>
// 1ce: 4d 85 e4                      testq   %r12, %r12
// 1d1: 4c 8b 2c 24                   movq    (%rsp), %r13
// 1d5: 0f 84 e1 00 00 00             je      0x2bc <_JIT_ENTRY+0x2bc>
// 1db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dd:  R_X86_64_64  _JIT_OPARG
// 1e5: a8 10                         testb   $0x10, %al
// 1e7: 74 7d                         je      0x266 <_JIT_ENTRY+0x266>
// 1e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001eb:  R_X86_64_64  PyObject_IsTrue
// 1f3: 4c 89 e7                      movq    %r12, %rdi
// 1f6: ff d0                         callq   *%rax
// 1f8: 89 c5                         movl    %eax, %ebp
// 1fa: 49 8b 04 24                   movq    (%r12), %rax
// 1fe: 48 85 c0                      testq   %rax, %rax
// 201: 7f 22                         jg      0x225 <_JIT_ENTRY+0x225>
// 203: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000205:  R_X86_64_64  .rodata.str1.1
// 20d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020f:  R_X86_64_64  _Py_NegativeRefcount
// 217: be 3d 07 00 00                movl    $0x73d, %esi            # imm = 0x73D
// 21c: 4c 89 e2                      movq    %r12, %rdx
// 21f: ff d0                         callq   *%rax
// 221: 49 8b 04 24                   movq    (%r12), %rax
// 225: 85 c0                         testl   %eax, %eax
// 227: 78 21                         js      0x24a <_JIT_ENTRY+0x24a>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 233: ff d0                         callq   *%rax
// 235: 49 ff 0c 24                   decq    (%r12)
// 239: 75 0f                         jne     0x24a <_JIT_ENTRY+0x24a>
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: 4c 89 e7                      movq    %r12, %rdi
// 248: ff d0                         callq   *%rax
// 24a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024c:  R_X86_64_64  _Py_FalseStruct
// 254: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000256:  R_X86_64_64  _Py_TrueStruct
// 25e: 85 ed                         testl   %ebp, %ebp
// 260: 4c 0f 44 e0                   cmoveq  %rax, %r12
// 264: 78 56                         js      0x2bc <_JIT_ENTRY+0x2bc>
// 266: 4b 8d 34 fe                   leaq    (%r14,%r15,8), %rsi
// 26a: 48 83 c6 f8                   addq    $-0x8, %rsi
// 26e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000270:  R_X86_64_64  _JIT_OPARG
// 278: 83 e0 01                      andl    $0x1, %eax
// 27b: 4d 89 64 c6 f0                movq    %r12, -0x10(%r14,%rax,8)
// 280: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000282:  R_X86_64_64  _JIT_CONTINUE
// 28a: 48 89 df                      movq    %rbx, %rdi
// 28d: 4c 89 ea                      movq    %r13, %rdx
// 290: 48 83 c4 08                   addq    $0x8, %rsp
// 294: 5b                            popq    %rbx
// 295: 41 5c                         popq    %r12
// 297: 41 5d                         popq    %r13
// 299: 41 5e                         popq    %r14
// 29b: 41 5f                         popq    %r15
// 29d: 5d                            popq    %rbp
// 29e: ff e0                         jmpq    *%rax
// 2a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a2:  R_X86_64_64  _Py_Dealloc
// 2aa: 4c 89 ef                      movq    %r13, %rdi
// 2ad: ff d0                         callq   *%rax
// 2af: 4d 85 e4                      testq   %r12, %r12
// 2b2: 4c 8b 2c 24                   movq    (%rsp), %r13
// 2b6: 0f 85 1f ff ff ff             jne     0x1db <_JIT_ENTRY+0x1db>
// 2bc: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 2c0: 48 29 d8                      subq    %rbx, %rax
// 2c3: 48 83 c0 a8                   addq    $-0x58, %rax
// 2c7: 48 c1 e8 03                   shrq    $0x3, %rax
// 2cb: 89 43 40                      movl    %eax, 0x40(%rbx)
// 2ce: 31 c0                         xorl    %eax, %eax
// 2d0: 48 83 c4 08                   addq    $0x8, %rsp
// 2d4: 5b                            popq    %rbx
// 2d5: 41 5c                         popq    %r12
// 2d7: 41 5d                         popq    %r13
// 2d9: 41 5e                         popq    %r14
// 2db: 41 5f                         popq    %r15
// 2dd: 5d                            popq    %rbp
// 2de: c3                            retq
// 2df: 
static const unsigned char _LOAD_ATTR_SLOTplus_COMPARE_OP_code_body[736] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x3c, 0x04, 0x4d, 0x85, 0xff, 0x74, 0x1c, 0x49, 0x89, 0xd5, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x75, 0x3f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4e, 0x85, 0xc0, 0x79, 0x70, 0xe9, 0x8c, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x5c, 0x02, 0x00, 0x00, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x2c, 0x24, 0x4d, 0x89, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x0f, 0xb7, 0xd7, 0x41, 0x83, 0xe7, 0x01, 0x4b, 0x8b, 0x6c, 0xfe, 0xf0, 0x4f, 0x8b, 0x6c, 0xfe, 0xf8, 0xc1, 0xea, 0x05, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x07, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xd2, 0x00, 0x00, 0x00, 0x4d, 0x85, 0xe4, 0x4c, 0x8b, 0x2c, 0x24, 0x0f, 0x84, 0xe1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x10, 0x74, 0x7d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3d, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xed, 0x4c, 0x0f, 0x44, 0xe0, 0x78, 0x56, 0x4b, 0x8d, 0x34, 0xfe, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x4d, 0x89, 0x64, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x4c, 0x8b, 0x2c, 0x24, 0x0f, 0x85, 0x1f, 0xff, 0xff, 0xff, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xa8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _LOAD_ATTR_SLOTplus_COMPARE_OP_code_holes[29] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xc6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xdd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x111, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_RichCompare, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x194, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x19e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1eb, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_IsTrue, 0x0},
    {0x205, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x20f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x256, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x270, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x282, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2a2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_COMPARE_OP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_COMPARE_OP_data_holes[1];

// _LOAD_ATTR_SLOTplus_COMPARE_OP_FLOAT
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_COMPARE_OP_FLOAT.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 18: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001a:  R_X86_64_64  _JIT_OPERAND
// 22: 0f b7 c0                      movzwl  %ax, %eax
// 25: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 29: 4d 85 ed                      testq   %r13, %r13
// 2c: 74 1a                         je      0x48 <_JIT_ENTRY+0x48>
// 2e: 49 89 d6                      movq    %rdx, %r14
// 31: 41 8b 45 00                   movl    (%r13), %eax
// 35: ff c0                         incl    %eax
// 37: 75 17                         jne     0x50 <_JIT_ENTRY+0x50>
// 39: 49 8b 04 24                   movq    (%r12), %rax
// 3d: 48 85 c0                      testq   %rax, %rax
// 40: 7e 27                         jle     0x69 <_JIT_ENTRY+0x69>
// 42: 85 c0                         testl   %eax, %eax
// 44: 79 49                         jns     0x8f <_JIT_ENTRY+0x8f>
// 46: eb 5d                         jmp     0xa5 <_JIT_ENTRY+0xa5>
// 48: 4c 89 f8                      movq    %r15, %rax
// 4b: e9 a0 00 00 00                jmp     0xf0 <_JIT_ENTRY+0xf0>
// 50: 41 89 45 00                   movl    %eax, (%r13)
// 54: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000056:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 5e: ff d0                         callq   *%rax
// 60: 49 8b 04 24                   movq    (%r12), %rax
// 64: 48 85 c0                      testq   %rax, %rax
// 67: 7f d9                         jg      0x42 <_JIT_ENTRY+0x42>
// 69: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000006b:  R_X86_64_64  .rodata.str1.1
// 73: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000075:  R_X86_64_64  _Py_NegativeRefcount
// 7d: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 82: 4c 89 e2                      movq    %r12, %rdx
// 85: ff d0                         callq   *%rax
// 87: 49 8b 04 24                   movq    (%r12), %rax
// 8b: 85 c0                         testl   %eax, %eax
// 8d: 78 16                         js      0xa5 <_JIT_ENTRY+0xa5>
// 8f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000091:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 99: ff d0                         callq   *%rax
// 9b: 49 ff 0c 24                   decq    (%r12)
// 9f: 0f 84 81 00 00 00             je      0x126 <_JIT_ENTRY+0x126>
// a5: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ab:  R_X86_64_64  _JIT_OPARG
// b3: a8 01                         testb   $0x1, %al
// b5: 74 07                         je      0xbe <_JIT_ENTRY+0xbe>
// b7: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// be: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000000c0:  R_X86_64_64  _JIT_OPARG
// c8: 83 e5 01                      andl    $0x1, %ebp
// cb: 49 8d 04 ef                   leaq    (%r15,%rbp,8), %rax
// cf: 4d 8b 64 ef f0                movq    -0x10(%r15,%rbp,8), %r12
// d4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d6:  R_X86_64_64  PyFloat_Type
// de: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// e3: 75 0b                         jne     0xf0 <_JIT_ENTRY+0xf0>
// e5: 4d 8b 6c ef f8                movq    -0x8(%r15,%rbp,8), %r13
// ea: 49 39 4d 08                   cmpq    %rcx, 0x8(%r13)
// ee: 74 60                         je      0x150 <_JIT_ENTRY+0x150>
// f0: 48 29 d8                      subq    %rbx, %rax
// f3: 48 83 c0 b8                   addq    $-0x48, %rax
// f7: 48 c1 e8 03                   shrq    $0x3, %rax
// fb: 89 43 40                      movl    %eax, 0x40(%rbx)
// fe: 48 8b 03                      movq    (%rbx), %rax
// 101: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000103:  R_X86_64_64  _JIT_TARGET
// 10b: 89 c9                         movl    %ecx, %ecx
// 10d: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 111: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 117: 48 83 c4 18                   addq    $0x18, %rsp
// 11b: 5b                            popq    %rbx
// 11c: 41 5c                         popq    %r12
// 11e: 41 5d                         popq    %r13
// 120: 41 5e                         popq    %r14
// 122: 41 5f                         popq    %r15
// 124: 5d                            popq    %rbp
// 125: c3                            retq
// 126: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000128:  R_X86_64_64  _Py_Dealloc
// 130: 4c 89 e7                      movq    %r12, %rdi
// 133: ff d0                         callq   *%rax
// 135: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  _JIT_OPARG
// 143: a8 01                         testb   $0x1, %al
// 145: 0f 85 6c ff ff ff             jne     0xb7 <_JIT_ENTRY+0xb7>
// 14b: e9 6e ff ff ff                jmp     0xbe <_JIT_ENTRY+0xbe>
// 150: f2 41 0f 10 44 24 10          movsd   0x10(%r12), %xmm0       # xmm0 = mem[0],zero
// 157: f2 0f 11 44 24 10             movsd   %xmm0, 0x10(%rsp)
// 15d: f2 41 0f 10 45 10             movsd   0x10(%r13), %xmm0       # xmm0 = mem[0],zero
// 163: f2 0f 11 44 24 08             movsd   %xmm0, 0x8(%rsp)
// 169: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 16f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000171:  R_X86_64_64  PyInterpreterState_Get
// 179: 75 3c                         jne     0x1b7 <_JIT_ENTRY+0x1b7>
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  PyInterpreterState_Get
// 185: ff d0                         callq   *%rax
// 187: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 18e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000190:  R_X86_64_64  PyInterpreterState_Get
// 198: 49 ff 0c 24                   decq    (%r12)
// 19c: 75 19                         jne     0x1b7 <_JIT_ENTRY+0x1b7>
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  _PyFloat_ExactDealloc
// 1a8: 4c 89 e7                      movq    %r12, %rdi
// 1ab: ff d0                         callq   *%rax
// 1ad: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001af:  R_X86_64_64  PyInterpreterState_Get
// 1b7: 4d 8d 24 ef                   leaq    (%r15,%rbp,8), %r12
// 1bb: 49 83 c4 f8                   addq    $-0x8, %r12
// 1bf: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 1c4: 75 1e                         jne     0x1e4 <_JIT_ENTRY+0x1e4>
// 1c6: ff d1                         callq   *%rcx
// 1c8: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1cf: 49 ff 4d 00                   decq    (%r13)
// 1d3: 75 0f                         jne     0x1e4 <_JIT_ENTRY+0x1e4>
// 1d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d7:  R_X86_64_64  _PyFloat_ExactDealloc
// 1df: 4c 89 ef                      movq    %r13, %rdi
// 1e2: ff d0                         callq   *%rax
// 1e4: 31 c0                         xorl    %eax, %eax
// 1e6: f2 0f 10 44 24 10             movsd   0x10(%rsp), %xmm0       # xmm0 = mem[0],zero
// 1ec: f2 0f 10 4c 24 08             movsd   0x8(%rsp), %xmm1        # xmm1 = mem[0],zero
// 1f2: 66 0f 2e c1                   ucomisd %xmm1, %xmm0
// 1f6: 0f 93 c0                      setae   %al
// 1f9: 01 c0                         addl    %eax, %eax
// 1fb: 31 c9                         xorl    %ecx, %ecx
// 1fd: 66 0f 2e c8                   ucomisd %xmm0, %xmm1
// 201: 0f 93 c1                      setae   %cl
// 204: 09 c1                         orl     %eax, %ecx
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _JIT_OPARG
// 210: 0f a3 c8                      btl     %ecx, %eax
// 213: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000215:  R_X86_64_64  _Py_FalseStruct
// 21d: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000021f:  R_X86_64_64  _Py_TrueStruct
// 227: 48 0f 43 d1                   cmovaeq %rcx, %rdx
// 22b: 83 e0 01                      andl    $0x1, %eax
// 22e: 49 89 54 c7 f0                movq    %rdx, -0x10(%r15,%rax,8)
// 233: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000235:  R_X86_64_64  _JIT_CONTINUE
// 23d: 48 89 df                      movq    %rbx, %rdi
// 240: 4c 89 e6                      movq    %r12, %rsi
// 243: 4c 89 f2                      movq    %r14, %rdx
// 246: 48 83 c4 18                   addq    $0x18, %rsp
// 24a: 5b                            popq    %rbx
// 24b: 41 5c                         popq    %r12
// 24d: 41 5d                         popq    %r13
// 24f: 41 5e                         popq    %r14
// 251: 41 5f                         popq    %r15
// 253: 5d                            popq    %rbp
// 254: ff e0                         jmpq    *%rax
// 256: 
static const unsigned char _LOAD_ATTR_SLOTplus_COMPARE_OP_FLOAT_code_body[599] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1a, 0x49, 0x89, 0xd6, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x17, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x27, 0x85, 0xc0, 0x79, 0x49, 0xeb, 0x5d, 0x4c, 0x89, 0xf8, 0xe9, 0xa0, 0x00, 0x00, 0x00, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xd9, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x81, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe5, 0x01, 0x49, 0x8d, 0x04, 0xef, 0x4d, 0x8b, 0x64, 0xef, 0xf0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x0b, 0x4d, 0x8b, 0x6c, 0xef, 0xf8, 0x49, 0x39, 0x4d, 0x08, 0x74, 0x60, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x6c, 0xff, 0xff, 0xff, 0xe9, 0x6e, 0xff, 0xff, 0xff, 0xf2, 0x41, 0x0f, 0x10, 0x44, 0x24, 0x10, 0xf2, 0x0f, 0x11, 0x44, 0x24, 0x10, 0xf2, 0x41, 0x0f, 0x10, 0x45, 0x10, 0xf2, 0x0f, 0x11, 0x44, 0x24, 0x08, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x3c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x19, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8d, 0x24, 0xef, 0x49, 0x83, 0xc4, 0xf8, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x1e, 0xff, 0xd1, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x31, 0xc0, 0xf2, 0x0f, 0x10, 0x44, 0x24, 0x10, 0xf2, 0x0f, 0x10, 0x4c, 0x24, 0x08, 0x66, 0x0f, 0x2e, 0xc1, 0x0f, 0x93, 0xc0, 0x01, 0xc0, 0x31, 0xc9, 0x66, 0x0f, 0x2e, 0xc8, 0x0f, 0x93, 0xc1, 0x09, 0xc1, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xa3, 0xc8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x43, 0xd1, 0x83, 0xe0, 0x01, 0x49, 0x89, 0x54, 0xc7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_ATTR_SLOTplus_COMPARE_OP_FLOAT_code_holes[22] = {
    {0x1a, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x56, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x75, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xab, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xc0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_Type, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x128, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x171, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x1af, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x215, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x21f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_COMPARE_OP_FLOAT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_COMPARE_OP_FLOAT_data_holes[1];

// _LOAD_ATTR_SLOTplus_COMPARE_OP_INT
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_COMPARE_OP_INT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 18: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001a:  R_X86_64_64  _JIT_OPERAND
// 22: 0f b7 c0                      movzwl  %ax, %eax
// 25: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 29: 4d 85 ed                      testq   %r13, %r13
// 2c: 74 1a                         je      0x48 <_JIT_ENTRY+0x48>
// 2e: 49 89 d6                      movq    %rdx, %r14
// 31: 41 8b 45 00                   movl    (%r13), %eax
// 35: ff c0                         incl    %eax
// 37: 75 17                         jne     0x50 <_JIT_ENTRY+0x50>
// 39: 49 8b 04 24                   movq    (%r12), %rax
// 3d: 48 85 c0                      testq   %rax, %rax
// 40: 7e 27                         jle     0x69 <_JIT_ENTRY+0x69>
// 42: 85 c0                         testl   %eax, %eax
// 44: 79 49                         jns     0x8f <_JIT_ENTRY+0x8f>
// 46: eb 68                         jmp     0xb0 <_JIT_ENTRY+0xb0>
// 48: 4c 89 f8                      movq    %r15, %rax
// 4b: e9 c0 00 00 00                jmp     0x110 <_JIT_ENTRY+0x110>
// 50: 41 89 45 00                   movl    %eax, (%r13)
// 54: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000056:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 5e: ff d0                         callq   *%rax
// 60: 49 8b 04 24                   movq    (%r12), %rax
// 64: 48 85 c0                      testq   %rax, %rax
// 67: 7f d9                         jg      0x42 <_JIT_ENTRY+0x42>
// 69: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000006b:  R_X86_64_64  .rodata.str1.1
// 73: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000075:  R_X86_64_64  _Py_NegativeRefcount
// 7d: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 82: 4c 89 e2                      movq    %r12, %rdx
// 85: ff d0                         callq   *%rax
// 87: 49 8b 04 24                   movq    (%r12), %rax
// 8b: 85 c0                         testl   %eax, %eax
// 8d: 78 21                         js      0xb0 <_JIT_ENTRY+0xb0>
// 8f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000091:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 99: ff d0                         callq   *%rax
// 9b: 49 ff 0c 24                   decq    (%r12)
// 9f: 75 0f                         jne     0xb0 <_JIT_ENTRY+0xb0>
// a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a3:  R_X86_64_64  _Py_Dealloc
// ab: 4c 89 e7                      movq    %r12, %rdi
// ae: ff d0                         callq   *%rax
// b0: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b6:  R_X86_64_64  _JIT_OPARG
// be: a8 01                         testb   $0x1, %al
// c0: 74 07                         je      0xc9 <_JIT_ENTRY+0xc9>
// c2: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// c9: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000000cb:  R_X86_64_64  _JIT_OPARG
// d3: 83 e5 01                      andl    $0x1, %ebp
// d6: 49 8d 04 ef                   leaq    (%r15,%rbp,8), %rax
// da: 4d 8b 64 ef f0                movq    -0x10(%r15,%rbp,8), %r12
// df: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000e1:  R_X86_64_64  PyLong_Type
// e9: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// ee: 75 20                         jne     0x110 <_JIT_ENTRY+0x110>
// f0: 4d 8b 6c ef f8                movq    -0x8(%r15,%rbp,8), %r13
// f5: 49 39 4d 08                   cmpq    %rcx, 0x8(%r13)
// f9: 75 15                         jne     0x110 <_JIT_ENTRY+0x110>
// fb: 49 8b 54 24 10                movq    0x10(%r12), %rdx
// 100: 48 83 fa 0f                   cmpq    $0xf, %rdx
// 104: 77 0a                         ja      0x110 <_JIT_ENTRY+0x110>
// 106: 49 8b 4d 10                   movq    0x10(%r13), %rcx
// 10a: 48 83 f9 0f                   cmpq    $0xf, %rcx
// 10e: 76 36                         jbe     0x146 <_JIT_ENTRY+0x146>
// 110: 48 29 d8                      subq    %rbx, %rax
// 113: 48 83 c0 b8                   addq    $-0x48, %rax
// 117: 48 c1 e8 03                   shrq    $0x3, %rax
// 11b: 89 43 40                      movl    %eax, 0x40(%rbx)
// 11e: 48 8b 03                      movq    (%rbx), %rax
// 121: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000123:  R_X86_64_64  _JIT_TARGET
// 12b: 89 c9                         movl    %ecx, %ecx
// 12d: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 131: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 137: 48 83 c4 28                   addq    $0x28, %rsp
// 13b: 5b                            popq    %rbx
// 13c: 41 5c                         popq    %r12
// 13e: 41 5d                         popq    %r13
// 140: 41 5e                         popq    %r14
// 142: 41 5f                         popq    %r15
// 144: 5d                            popq    %rbp
// 145: c3                            retq
// 146: 48 89 4c 24 20                movq    %rcx, 0x20(%rsp)
// 14b: 41 8b 44 24 18                movl    0x18(%r12), %eax
// 150: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 155: 41 8b 45 18                   movl    0x18(%r13), %eax
// 159: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 15e: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 164: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000166:  R_X86_64_64  PyInterpreterState_Get
// 16e: 75 4b                         jne     0x1bb <_JIT_ENTRY+0x1bb>
// 170: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  PyInterpreterState_Get
// 17f: ff d0                         callq   *%rax
// 181: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 186: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 18d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000018f:  R_X86_64_64  PyInterpreterState_Get
// 197: 49 ff 0c 24                   decq    (%r12)
// 19b: 75 1e                         jne     0x1bb <_JIT_ENTRY+0x1bb>
// 19d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019f:  R_X86_64_64  PyObject_Free
// 1a7: 4c 89 e7                      movq    %r12, %rdi
// 1aa: ff d0                         callq   *%rax
// 1ac: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ae:  R_X86_64_64  PyInterpreterState_Get
// 1b6: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 1bb: 4d 8d 24 ef                   leaq    (%r15,%rbp,8), %r12
// 1bf: 49 83 c4 f8                   addq    $-0x8, %r12
// 1c3: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 1c8: 75 27                         jne     0x1f1 <_JIT_ENTRY+0x1f1>
// 1ca: 48 89 d5                      movq    %rdx, %rbp
// 1cd: ff d1                         callq   *%rcx
// 1cf: 48 89 ea                      movq    %rbp, %rdx
// 1d2: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1d9: 49 ff 4d 00                   decq    (%r13)
// 1dd: 75 12                         jne     0x1f1 <_JIT_ENTRY+0x1f1>
// 1df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e1:  R_X86_64_64  PyObject_Free
// 1e9: 4c 89 ef                      movq    %r13, %rdi
// 1ec: ff d0                         callq   *%rax
// 1ee: 48 89 ea                      movq    %rbp, %rdx
// 1f1: 83 e2 03                      andl    $0x3, %edx
// 1f4: b8 01 00 00 00                movl    $0x1, %eax
// 1f9: b9 01 00 00 00                movl    $0x1, %ecx
// 1fe: 48 29 d1                      subq    %rdx, %rcx
// 201: 48 0f af 4c 24 10             imulq   0x10(%rsp), %rcx
// 207: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// 20c: 83 e2 03                      andl    $0x3, %edx
// 20f: 48 29 d0                      subq    %rdx, %rax
// 212: 48 0f af 44 24 18             imulq   0x18(%rsp), %rax
// 218: 31 d2                         xorl    %edx, %edx
// 21a: 31 f6                         xorl    %esi, %esi
// 21c: 48 39 c1                      cmpq    %rax, %rcx
// 21f: 0f 9d c2                      setge   %dl
// 222: 40 0f 9e c6                   setle   %sil
// 226: 01 d2                         addl    %edx, %edx
// 228: 09 d6                         orl     %edx, %esi
// 22a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022c:  R_X86_64_64  _JIT_OPARG
// 234: 0f a3 f0                      btl     %esi, %eax
// 237: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000239:  R_X86_64_64  _Py_FalseStruct
// 241: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000243:  R_X86_64_64  _Py_TrueStruct
// 24b: 48 0f 43 d1                   cmovaeq %rcx, %rdx
// 24f: 83 e0 01                      andl    $0x1, %eax
// 252: 49 89 54 c7 f0                movq    %rdx, -0x10(%r15,%rax,8)
// 257: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000259:  R_X86_64_64  _JIT_CONTINUE
// 261: 48 89 df                      movq    %rbx, %rdi
// 264: 4c 89 e6                      movq    %r12, %rsi
// 267: 4c 89 f2                      movq    %r14, %rdx
// 26a: 48 83 c4 28                   addq    $0x28, %rsp
// 26e: 5b                            popq    %rbx
// 26f: 41 5c                         popq    %r12
// 271: 41 5d                         popq    %r13
// 273: 41 5e                         popq    %r14
// 275: 41 5f                         popq    %r15
// 277: 5d                            popq    %rbp
// 278: ff e0                         jmpq    *%rax
// 27a: 
static const unsigned char _LOAD_ATTR_SLOTplus_COMPARE_OP_INT_code_body[635] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1a, 0x49, 0x89, 0xd6, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x17, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x27, 0x85, 0xc0, 0x79, 0x49, 0xeb, 0x68, 0x4c, 0x89, 0xf8, 0xe9, 0xc0, 0x00, 0x00, 0x00, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xd9, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe5, 0x01, 0x49, 0x8d, 0x04, 0xef, 0x4d, 0x8b, 0x64, 0xef, 0xf0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x4d, 0x8b, 0x6c, 0xef, 0xf8, 0x49, 0x39, 0x4d, 0x08, 0x75, 0x15, 0x49, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xfa, 0x0f, 0x77, 0x0a, 0x49, 0x8b, 0x4d, 0x10, 0x48, 0x83, 0xf9, 0x0f, 0x76, 0x36, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x4c, 0x24, 0x20, 0x41, 0x8b, 0x44, 0x24, 0x18, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0x8b, 0x45, 0x18, 0x48, 0x89, 0x44, 0x24, 0x18, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x4b, 0x48, 0x89, 0x54, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x1e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x4d, 0x8d, 0x24, 0xef, 0x49, 0x83, 0xc4, 0xf8, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x27, 0x48, 0x89, 0xd5, 0xff, 0xd1, 0x48, 0x89, 0xea, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x89, 0xea, 0x83, 0xe2, 0x03, 0xb8, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x48, 0x29, 0xd1, 0x48, 0x0f, 0xaf, 0x4c, 0x24, 0x10, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x83, 0xe2, 0x03, 0x48, 0x29, 0xd0, 0x48, 0x0f, 0xaf, 0x44, 0x24, 0x18, 0x31, 0xd2, 0x31, 0xf6, 0x48, 0x39, 0xc1, 0x0f, 0x9d, 0xc2, 0x40, 0x0f, 0x9e, 0xc6, 0x01, 0xd2, 0x09, 0xd6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xa3, 0xf0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x43, 0xd1, 0x83, 0xe0, 0x01, 0x49, 0x89, 0x54, 0xc7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_ATTR_SLOTplus_COMPARE_OP_INT_code_holes[21] = {
    {0x1a, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x56, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x75, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xb6, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x123, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x19f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1e1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x22c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x239, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x243, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x259, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_COMPARE_OP_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_COMPARE_OP_INT_data_holes[1];

// _LOAD_ATTR_SLOTplus_COMPARE_OP_STR
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_COMPARE_OP_STR.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f7                      movq    %rsi, %r15
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 26: 4d 85 ed                      testq   %r13, %r13
// 29: 74 1a                         je      0x45 <_JIT_ENTRY+0x45>
// 2b: 49 89 d6                      movq    %rdx, %r14
// 2e: 41 8b 45 00                   movl    (%r13), %eax
// 32: ff c0                         incl    %eax
// 34: 75 17                         jne     0x4d <_JIT_ENTRY+0x4d>
// 36: 49 8b 04 24                   movq    (%r12), %rax
// 3a: 48 85 c0                      testq   %rax, %rax
// 3d: 7e 27                         jle     0x66 <_JIT_ENTRY+0x66>
// 3f: 85 c0                         testl   %eax, %eax
// 41: 79 49                         jns     0x8c <_JIT_ENTRY+0x8c>
// 43: eb 5d                         jmp     0xa2 <_JIT_ENTRY+0xa2>
// 45: 4c 89 f8                      movq    %r15, %rax
// 48: e9 a0 00 00 00                jmp     0xed <_JIT_ENTRY+0xed>
// 4d: 41 89 45 00                   movl    %eax, (%r13)
// 51: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000053:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 5b: ff d0                         callq   *%rax
// 5d: 49 8b 04 24                   movq    (%r12), %rax
// 61: 48 85 c0                      testq   %rax, %rax
// 64: 7f d9                         jg      0x3f <_JIT_ENTRY+0x3f>
// 66: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000068:  R_X86_64_64  .rodata.str1.1
// 70: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000072:  R_X86_64_64  _Py_NegativeRefcount
// 7a: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 7f: 4c 89 e2                      movq    %r12, %rdx
// 82: ff d0                         callq   *%rax
// 84: 49 8b 04 24                   movq    (%r12), %rax
// 88: 85 c0                         testl   %eax, %eax
// 8a: 78 16                         js      0xa2 <_JIT_ENTRY+0xa2>
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 96: ff d0                         callq   *%rax
// 98: 49 ff 0c 24                   decq    (%r12)
// 9c: 0f 84 81 00 00 00             je      0x123 <_JIT_ENTRY+0x123>
// a2: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a8:  R_X86_64_64  _JIT_OPARG
// b0: a8 01                         testb   $0x1, %al
// b2: 74 07                         je      0xbb <_JIT_ENTRY+0xbb>
// b4: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// bb: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000000bd:  R_X86_64_64  _JIT_OPARG
// c5: 83 e5 01                      andl    $0x1, %ebp
// c8: 49 8d 04 ef                   leaq    (%r15,%rbp,8), %rax
// cc: 4d 8b 6c ef f0                movq    -0x10(%r15,%rbp,8), %r13
// d1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d3:  R_X86_64_64  PyUnicode_Type
// db: 49 39 4d 08                   cmpq    %rcx, 0x8(%r13)
// df: 75 0c                         jne     0xed <_JIT_ENTRY+0xed>
// e1: 4d 8b 64 ef f8                movq    -0x8(%r15,%rbp,8), %r12
// e6: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// eb: 74 60                         je      0x14d <_JIT_ENTRY+0x14d>
// ed: 48 29 d8                      subq    %rbx, %rax
// f0: 48 83 c0 b8                   addq    $-0x48, %rax
// f4: 48 c1 e8 03                   shrq    $0x3, %rax
// f8: 89 43 40                      movl    %eax, 0x40(%rbx)
// fb: 48 8b 03                      movq    (%rbx), %rax
// fe: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000100:  R_X86_64_64  _JIT_TARGET
// 108: 89 c9                         movl    %ecx, %ecx
// 10a: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 10e: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 114: 48 83 c4 08                   addq    $0x8, %rsp
// 118: 5b                            popq    %rbx
// 119: 41 5c                         popq    %r12
// 11b: 41 5d                         popq    %r13
// 11d: 41 5e                         popq    %r14
// 11f: 41 5f                         popq    %r15
// 121: 5d                            popq    %rbp
// 122: c3                            retq
// 123: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000125:  R_X86_64_64  _Py_Dealloc
// 12d: 4c 89 e7                      movq    %r12, %rdi
// 130: ff d0                         callq   *%rax
// 132: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  _JIT_OPARG
// 140: a8 01                         testb   $0x1, %al
// 142: 0f 85 6c ff ff ff             jne     0xb4 <_JIT_ENTRY+0xb4>
// 148: e9 6e ff ff ff                jmp     0xbb <_JIT_ENTRY+0xbb>
// 14d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014f:  R_X86_64_64  _PyUnicode_Equal
// 157: 4c 89 ef                      movq    %r13, %rdi
// 15a: 4c 89 e6                      movq    %r12, %rsi
// 15d: ff d0                         callq   *%rax
// 15f: 89 44 24 04                   movl    %eax, 0x4(%rsp)
// 163: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 168: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000016a:  R_X86_64_64  PyInterpreterState_Get
// 172: 75 3c                         jne     0x1b0 <_JIT_ENTRY+0x1b0>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  PyInterpreterState_Get
// 17e: ff d0                         callq   *%rax
// 180: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 187: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000189:  R_X86_64_64  PyInterpreterState_Get
// 191: 49 ff 4d 00                   decq    (%r13)
// 195: 75 19                         jne     0x1b0 <_JIT_ENTRY+0x1b0>
// 197: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000199:  R_X86_64_64  _PyUnicode_ExactDealloc
// 1a1: 4c 89 ef                      movq    %r13, %rdi
// 1a4: ff d0                         callq   *%rax
// 1a6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a8:  R_X86_64_64  PyInterpreterState_Get
// 1b0: 4d 8d 2c ef                   leaq    (%r15,%rbp,8), %r13
// 1b4: 49 83 c5 f8                   addq    $-0x8, %r13
// 1b8: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 1be: 75 1e                         jne     0x1de <_JIT_ENTRY+0x1de>
// 1c0: ff d1                         callq   *%rcx
// 1c2: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1c9: 49 ff 0c 24                   decq    (%r12)
// 1cd: 75 0f                         jne     0x1de <_JIT_ENTRY+0x1de>
// 1cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d1:  R_X86_64_64  _PyUnicode_ExactDealloc
// 1d9: 4c 89 e7                      movq    %r12, %rdi
// 1dc: ff d0                         callq   *%rax
// 1de: 8b 4c 24 04                   movl    0x4(%rsp), %ecx
// 1e2: 83 c1 07                      addl    $0x7, %ecx
// 1e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e7:  R_X86_64_64  _JIT_OPARG
// 1ef: 66 85 c8                      testw   %cx, %ax
// 1f2: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001f4:  R_X86_64_64  _Py_FalseStruct
// 1fc: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001fe:  R_X86_64_64  _Py_TrueStruct
// 206: 48 0f 44 d1                   cmoveq  %rcx, %rdx
// 20a: 83 e0 01                      andl    $0x1, %eax
// 20d: 49 89 54 c7 f0                movq    %rdx, -0x10(%r15,%rax,8)
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _JIT_CONTINUE
// 21c: 48 89 df                      movq    %rbx, %rdi
// 21f: 4c 89 ee                      movq    %r13, %rsi
// 222: 4c 89 f2                      movq    %r14, %rdx
// 225: 48 83 c4 08                   addq    $0x8, %rsp
// 229: 5b                            popq    %rbx
// 22a: 41 5c                         popq    %r12
// 22c: 41 5d                         popq    %r13
// 22e: 41 5e                         popq    %r14
// 230: 41 5f                         popq    %r15
// 232: 5d                            popq    %rbp
// 233: ff e0                         jmpq    *%rax
// 235: 
static const unsigned char _LOAD_ATTR_SLOTplus_COMPARE_OP_STR_code_body[566] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1a, 0x49, 0x89, 0xd6, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x17, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x27, 0x85, 0xc0, 0x79, 0x49, 0xeb, 0x5d, 0x4c, 0x89, 0xf8, 0xe9, 0xa0, 0x00, 0x00, 0x00, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xd9, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x81, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe5, 0x01, 0x49, 0x8d, 0x04, 0xef, 0x4d, 0x8b, 0x6c, 0xef, 0xf0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4d, 0x08, 0x75, 0x0c, 0x4d, 0x8b, 0x64, 0xef, 0xf8, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x74, 0x60, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x6c, 0xff, 0xff, 0xff, 0xe9, 0x6e, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0x44, 0x24, 0x04, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x3c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x19, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8d, 0x2c, 0xef, 0x49, 0x83, 0xc5, 0xf8, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x1e, 0xff, 0xd1, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x8b, 0x4c, 0x24, 0x04, 0x83, 0xc1, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xd1, 0x83, 0xe0, 0x01, 0x49, 0x89, 0x54, 0xc7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_ATTR_SLOTplus_COMPARE_OP_STR_code_holes[23] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x53, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x68, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x72, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa8, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xbd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x100, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x125, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_Equal, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x199, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_ExactDealloc, 0x0},
    {0x1a8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1d1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_ExactDealloc, 0x0},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x1fe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_COMPARE_OP_STR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_COMPARE_OP_STR_data_holes[1];

// _LOAD_ATTR_SLOTplus_CONTAINS_OP
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_CONTAINS_OP.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 4d 8b 3c 04                   movq    (%r12,%rax), %r15
// 26: 4d 85 ff                      testq   %r15, %r15
// 29: 74 1d                         je      0x48 <_JIT_ENTRY+0x48>
// 2b: 48 89 14 24                   movq    %rdx, (%rsp)
// 2f: 41 8b 07                      movl    (%r15), %eax
// 32: ff c0                         incl    %eax
// 34: 75 3f                         jne     0x75 <_JIT_ENTRY+0x75>
// 36: 49 8b 04 24                   movq    (%r12), %rax
// 3a: 48 85 c0                      testq   %rax, %rax
// 3d: 7e 4e                         jle     0x8d <_JIT_ENTRY+0x8d>
// 3f: 85 c0                         testl   %eax, %eax
// 41: 79 70                         jns     0xb3 <_JIT_ENTRY+0xb3>
// 43: e9 81 00 00 00                jmp     0xc9 <_JIT_ENTRY+0xc9>
// 48: 49 29 de                      subq    %rbx, %r14
// 4b: 49 83 c6 b8                   addq    $-0x48, %r14
// 4f: 49 c1 ee 03                   shrq    $0x3, %r14
// 53: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 57: 48 8b 03                      movq    (%rbx), %rax
// 5a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005c:  R_X86_64_64  _JIT_TARGET
// 64: 89 c9                         movl    %ecx, %ecx
// 66: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 6a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 70: e9 ec 01 00 00                jmp     0x261 <_JIT_ENTRY+0x261>
// 75: 41 89 07                      movl    %eax, (%r15)
// 78: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007a:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 82: ff d0                         callq   *%rax
// 84: 49 8b 04 24                   movq    (%r12), %rax
// 88: 48 85 c0                      testq   %rax, %rax
// 8b: 7f b2                         jg      0x3f <_JIT_ENTRY+0x3f>
// 8d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008f:  R_X86_64_64  .rodata.str1.1
// 97: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000099:  R_X86_64_64  _Py_NegativeRefcount
// a1: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a6: 4c 89 e2                      movq    %r12, %rdx
// a9: ff d0                         callq   *%rax
// ab: 49 8b 04 24                   movq    (%r12), %rax
// af: 85 c0                         testl   %eax, %eax
// b1: 78 16                         js      0xc9 <_JIT_ENTRY+0xc9>
// b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bd: ff d0                         callq   *%rax
// bf: 49 ff 0c 24                   decq    (%r12)
// c3: 0f 84 9b 00 00 00             je      0x164 <_JIT_ENTRY+0x164>
// c9: 4d 89 7e f8                   movq    %r15, -0x8(%r14)
// cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cf:  R_X86_64_64  _JIT_OPARG
// d7: a8 01                         testb   $0x1, %al
// d9: 74 07                         je      0xe2 <_JIT_ENTRY+0xe2>
// db: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// e2: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 00000000000000e4:  R_X86_64_64  _JIT_OPARG
// ec: 41 83 e7 01                   andl    $0x1, %r15d
// f0: 4f 8b 6c fe f0                movq    -0x10(%r14,%r15,8), %r13
// f5: 4f 8b 64 fe f8                movq    -0x8(%r14,%r15,8), %r12
// fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fc:  R_X86_64_64  PySequence_Contains
// 104: 4c 89 e7                      movq    %r12, %rdi
// 107: 4c 89 ee                      movq    %r13, %rsi
// 10a: ff d0                         callq   *%rax
// 10c: 89 c5                         movl    %eax, %ebp
// 10e: 49 8b 45 00                   movq    (%r13), %rax
// 112: 48 85 c0                      testq   %rax, %rax
// 115: 7e 06                         jle     0x11d <_JIT_ENTRY+0x11d>
// 117: 85 c0                         testl   %eax, %eax
// 119: 79 28                         jns     0x143 <_JIT_ENTRY+0x143>
// 11b: eb 38                         jmp     0x155 <_JIT_ENTRY+0x155>
// 11d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011f:  R_X86_64_64  .rodata.str1.1
// 127: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000129:  R_X86_64_64  _Py_NegativeRefcount
// 131: be a8 07 00 00                movl    $0x7a8, %esi            # imm = 0x7A8
// 136: 4c 89 ea                      movq    %r13, %rdx
// 139: ff d0                         callq   *%rax
// 13b: 49 8b 45 00                   movq    (%r13), %rax
// 13f: 85 c0                         testl   %eax, %eax
// 141: 78 12                         js      0x155 <_JIT_ENTRY+0x155>
// 143: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000145:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 14d: ff d0                         callq   *%rax
// 14f: 49 ff 4d 00                   decq    (%r13)
// 153: 74 39                         je      0x18e <_JIT_ENTRY+0x18e>
// 155: 49 8b 04 24                   movq    (%r12), %rax
// 159: 48 85 c0                      testq   %rax, %rax
// 15c: 7e 48                         jle     0x1a6 <_JIT_ENTRY+0x1a6>
// 15e: 85 c0                         testl   %eax, %eax
// 160: 79 6a                         jns     0x1cc <_JIT_ENTRY+0x1cc>
// 162: eb 7a                         jmp     0x1de <_JIT_ENTRY+0x1de>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_Dealloc
// 16e: 4c 89 e7                      movq    %r12, %rdi
// 171: ff d0                         callq   *%rax
// 173: 4d 89 7e f8                   movq    %r15, -0x8(%r14)
// 177: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000179:  R_X86_64_64  _JIT_OPARG
// 181: a8 01                         testb   $0x1, %al
// 183: 0f 85 52 ff ff ff             jne     0xdb <_JIT_ENTRY+0xdb>
// 189: e9 54 ff ff ff                jmp     0xe2 <_JIT_ENTRY+0xe2>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_Dealloc
// 198: 4c 89 ef                      movq    %r13, %rdi
// 19b: ff d0                         callq   *%rax
// 19d: 49 8b 04 24                   movq    (%r12), %rax
// 1a1: 48 85 c0                      testq   %rax, %rax
// 1a4: 7f b8                         jg      0x15e <_JIT_ENTRY+0x15e>
// 1a6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a8:  R_X86_64_64  .rodata.str1.1
// 1b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b2:  R_X86_64_64  _Py_NegativeRefcount
// 1ba: be a9 07 00 00                movl    $0x7a9, %esi            # imm = 0x7A9
// 1bf: 4c 89 e2                      movq    %r12, %rdx
// 1c2: ff d0                         callq   *%rax
// 1c4: 49 8b 04 24                   movq    (%r12), %rax
// 1c8: 85 c0                         testl   %eax, %eax
// 1ca: 78 12                         js      0x1de <_JIT_ENTRY+0x1de>
// 1cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ce:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d6: ff d0                         callq   *%rax
// 1d8: 49 ff 0c 24                   decq    (%r12)
// 1dc: 74 5c                         je      0x23a <_JIT_ENTRY+0x23a>
// 1de: 85 ed                         testl   %ebp, %ebp
// 1e0: 78 6b                         js      0x24d <_JIT_ENTRY+0x24d>
// 1e2: 4b 8d 34 fe                   leaq    (%r14,%r15,8), %rsi
// 1e6: 48 83 c6 f8                   addq    $-0x8, %rsi
// 1ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ec:  R_X86_64_64  _JIT_OPARG
// 1f4: 0f b7 c8                      movzwl  %ax, %ecx
// 1f7: 39 cd                         cmpl    %ecx, %ebp
// 1f9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001fb:  R_X86_64_64  _Py_FalseStruct
// 203: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000205:  R_X86_64_64  _Py_TrueStruct
// 20d: 48 0f 44 d1                   cmoveq  %rcx, %rdx
// 211: 83 e0 01                      andl    $0x1, %eax
// 214: 49 89 54 c6 f0                movq    %rdx, -0x10(%r14,%rax,8)
// 219: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021b:  R_X86_64_64  _JIT_CONTINUE
// 223: 48 89 df                      movq    %rbx, %rdi
// 226: 48 8b 14 24                   movq    (%rsp), %rdx
// 22a: 48 83 c4 08                   addq    $0x8, %rsp
// 22e: 5b                            popq    %rbx
// 22f: 41 5c                         popq    %r12
// 231: 41 5d                         popq    %r13
// 233: 41 5e                         popq    %r14
// 235: 41 5f                         popq    %r15
// 237: 5d                            popq    %rbp
// 238: ff e0                         jmpq    *%rax
// 23a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023c:  R_X86_64_64  _Py_Dealloc
// 244: 4c 89 e7                      movq    %r12, %rdi
// 247: ff d0                         callq   *%rax
// 249: 85 ed                         testl   %ebp, %ebp
// 24b: 79 95                         jns     0x1e2 <_JIT_ENTRY+0x1e2>
// 24d: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 251: 48 29 d8                      subq    %rbx, %rax
// 254: 48 83 c0 a8                   addq    $-0x58, %rax
// 258: 48 c1 e8 03                   shrq    $0x3, %rax
// 25c: 89 43 40                      movl    %eax, 0x40(%rbx)
// 25f: 31 c0                         xorl    %eax, %eax
// 261: 48 83 c4 08                   addq    $0x8, %rsp
// 265: 5b                            popq    %rbx
// 266: 41 5c                         popq    %r12
// 268: 41 5d                         popq    %r13
// 26a: 41 5e                         popq    %r14
// 26c: 41 5f                         popq    %r15
// 26e: 5d                            popq    %rbp
// 26f: c3                            retq
// 270: 
static const unsigned char _LOAD_ATTR_SLOTplus_CONTAINS_OP_code_body[625] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x3c, 0x04, 0x4d, 0x85, 0xff, 0x74, 0x1d, 0x48, 0x89, 0x14, 0x24, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x75, 0x3f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4e, 0x85, 0xc0, 0x79, 0x70, 0xe9, 0x81, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xec, 0x01, 0x00, 0x00, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x9b, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x83, 0xe7, 0x01, 0x4f, 0x8b, 0x6c, 0xfe, 0xf0, 0x4f, 0x8b, 0x64, 0xfe, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xa8, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x39, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x48, 0x85, 0xc0, 0x79, 0x6a, 0xeb, 0x7a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x52, 0xff, 0xff, 0xff, 0xe9, 0x54, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb8, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xa9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x5c, 0x85, 0xed, 0x78, 0x6b, 0x4b, 0x8d, 0x34, 0xfe, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x39, 0xcd, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xd1, 0x83, 0xe0, 0x01, 0x49, 0x89, 0x54, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x79, 0x95, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xa8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _LOAD_ATTR_SLOTplus_CONTAINS_OP_code_holes[24] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x99, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xe4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySequence_Contains, 0x0},
    {0x11f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x129, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x179, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ce, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ec, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x205, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x21b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x23c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_CONTAINS_OP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_CONTAINS_OP_data_holes[1];

// _LOAD_ATTR_SLOTplus_CONVERT_VALUE
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_CONVERT_VALUE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 26: 4d 85 ed                      testq   %r13, %r13
// 29: 74 27                         je      0x52 <_JIT_ENTRY+0x52>
// 2b: 49 89 d7                      movq    %rdx, %r15
// 2e: 41 8b 45 00                   movl    (%r13), %eax
// 32: ff c0                         incl    %eax
// 34: 75 49                         jne     0x7f <_JIT_ENTRY+0x7f>
// 36: 49 8b 04 24                   movq    (%r12), %rax
// 3a: 48 85 c0                      testq   %rax, %rax
// 3d: 7e 59                         jle     0x98 <_JIT_ENTRY+0x98>
// 3f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000041:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 49: 85 c0                         testl   %eax, %eax
// 4b: 79 7b                         jns     0xc8 <_JIT_ENTRY+0xc8>
// 4d: e9 82 00 00 00                jmp     0xd4 <_JIT_ENTRY+0xd4>
// 52: 49 29 de                      subq    %rbx, %r14
// 55: 49 83 c6 b8                   addq    $-0x48, %r14
// 59: 49 c1 ee 03                   shrq    $0x3, %r14
// 5d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 61: 48 8b 03                      movq    (%rbx), %rax
// 64: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000066:  R_X86_64_64  _JIT_TARGET
// 6e: 89 c9                         movl    %ecx, %ecx
// 70: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 74: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 7a: e9 6e 01 00 00                jmp     0x1ed <_JIT_ENTRY+0x1ed>
// 7f: 41 89 45 00                   movl    %eax, (%r13)
// 83: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000085:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 8d: ff d0                         callq   *%rax
// 8f: 49 8b 04 24                   movq    (%r12), %rax
// 93: 48 85 c0                      testq   %rax, %rax
// 96: 7f a7                         jg      0x3f <_JIT_ENTRY+0x3f>
// 98: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000009a:  R_X86_64_64  .rodata.str1.1
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _Py_NegativeRefcount
// ac: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// b1: 4c 89 e2                      movq    %r12, %rdx
// b4: ff d0                         callq   *%rax
// b6: 49 8b 04 24                   movq    (%r12), %rax
// ba: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000bc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c4: 85 c0                         testl   %eax, %eax
// c6: 78 0c                         js      0xd4 <_JIT_ENTRY+0xd4>
// c8: ff d1                         callq   *%rcx
// ca: 49 ff 0c 24                   decq    (%r12)
// ce: 0f 84 c3 00 00 00             je      0x197 <_JIT_ENTRY+0x197>
// d4: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// d8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000da:  R_X86_64_64  _JIT_OPARG
// e2: a8 01                         testb   $0x1, %al
// e4: 74 07                         je      0xed <_JIT_ENTRY+0xed>
// e6: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// ed: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000000ef:  R_X86_64_64  _JIT_OPARG
// f7: 0f b7 c5                      movzwl  %bp, %eax
// fa: 83 e5 01                      andl    $0x1, %ebp
// fd: 4d 8b 6c ee f8                movq    -0x8(%r14,%rbp,8), %r13
// 102: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000104:  R_X86_64_64  .rodata
// 10c: 4c 89 ef                      movq    %r13, %rdi
// 10f: ff 14 c1                      callq   *(%rcx,%rax,8)
// 112: 49 89 c4                      movq    %rax, %r12
// 115: 49 8b 45 00                   movq    (%r13), %rax
// 119: 48 85 c0                      testq   %rax, %rax
// 11c: 7e 06                         jle     0x124 <_JIT_ENTRY+0x124>
// 11e: 85 c0                         testl   %eax, %eax
// 120: 79 28                         jns     0x14a <_JIT_ENTRY+0x14a>
// 122: eb 38                         jmp     0x15c <_JIT_ENTRY+0x15c>
// 124: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000126:  R_X86_64_64  .rodata.str1.1
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  _Py_NegativeRefcount
// 138: be 98 0c 00 00                movl    $0xc98, %esi            # imm = 0xC98
// 13d: 4c 89 ea                      movq    %r13, %rdx
// 140: ff d0                         callq   *%rax
// 142: 49 8b 45 00                   movq    (%r13), %rax
// 146: 85 c0                         testl   %eax, %eax
// 148: 78 12                         js      0x15c <_JIT_ENTRY+0x15c>
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 154: ff d0                         callq   *%rax
// 156: 49 ff 4d 00                   decq    (%r13)
// 15a: 74 65                         je      0x1c1 <_JIT_ENTRY+0x1c1>
// 15c: 4d 85 e4                      testq   %r12, %r12
// 15f: 74 74                         je      0x1d5 <_JIT_ENTRY+0x1d5>
// 161: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000163:  R_X86_64_64  _JIT_OPARG
// 16b: 83 e0 01                      andl    $0x1, %eax
// 16e: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 172: 4d 89 64 c6 f8                movq    %r12, -0x8(%r14,%rax,8)
// 177: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000179:  R_X86_64_64  _JIT_CONTINUE
// 181: 48 89 df                      movq    %rbx, %rdi
// 184: 4c 89 fa                      movq    %r15, %rdx
// 187: 48 83 c4 08                   addq    $0x8, %rsp
// 18b: 5b                            popq    %rbx
// 18c: 41 5c                         popq    %r12
// 18e: 41 5d                         popq    %r13
// 190: 41 5e                         popq    %r14
// 192: 41 5f                         popq    %r15
// 194: 5d                            popq    %rbp
// 195: ff e0                         jmpq    *%rax
// 197: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000199:  R_X86_64_64  _Py_Dealloc
// 1a1: 4c 89 e7                      movq    %r12, %rdi
// 1a4: ff d0                         callq   *%rax
// 1a6: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 1aa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ac:  R_X86_64_64  _JIT_OPARG
// 1b4: a8 01                         testb   $0x1, %al
// 1b6: 0f 85 2a ff ff ff             jne     0xe6 <_JIT_ENTRY+0xe6>
// 1bc: e9 2c ff ff ff                jmp     0xed <_JIT_ENTRY+0xed>
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_Dealloc
// 1cb: 4c 89 ef                      movq    %r13, %rdi
// 1ce: ff d0                         callq   *%rax
// 1d0: 4d 85 e4                      testq   %r12, %r12
// 1d3: 75 8c                         jne     0x161 <_JIT_ENTRY+0x161>
// 1d5: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 1d9: 48 83 c0 f8                   addq    $-0x8, %rax
// 1dd: 48 29 d8                      subq    %rbx, %rax
// 1e0: 48 83 c0 b8                   addq    $-0x48, %rax
// 1e4: 48 c1 e8 03                   shrq    $0x3, %rax
// 1e8: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1eb: 31 c0                         xorl    %eax, %eax
// 1ed: 48 83 c4 08                   addq    $0x8, %rsp
// 1f1: 5b                            popq    %rbx
// 1f2: 41 5c                         popq    %r12
// 1f4: 41 5d                         popq    %r13
// 1f6: 41 5e                         popq    %r14
// 1f8: 41 5f                         popq    %r15
// 1fa: 5d                            popq    %rbp
// 1fb: c3                            retq
// 1fc: 
static const unsigned char _LOAD_ATTR_SLOTplus_CONVERT_VALUE_code_body[509] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x27, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x49, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x59, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x79, 0x7b, 0xe9, 0x82, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x6e, 0x01, 0x00, 0x00, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xa7, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x0c, 0xff, 0xd1, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xc3, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc5, 0x83, 0xe5, 0x01, 0x4d, 0x8b, 0x6c, 0xee, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0x14, 0xc1, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x98, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x65, 0x4d, 0x85, 0xe4, 0x74, 0x74, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x4d, 0x89, 0x64, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x2a, 0xff, 0xff, 0xff, 0xe9, 0x2c, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x75, 0x8c, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x83, 0xc0, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _LOAD_ATTR_SLOTplus_CONVERT_VALUE_code_holes[19] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x41, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x66, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x9a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xbc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xda, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x126, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x179, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x199, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ac, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
// 59: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_CONVERT_VALUE_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_CONVERT_VALUE_data_holes[4] = {
    {0x41, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Str, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Repr, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_ASCII, 0x0},
};

// _LOAD_ATTR_SLOTplus_COPY
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_COPY.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 49 8b 2c 04                   movq    (%r12,%rax), %rbp
// 26: 48 85 ed                      testq   %rbp, %rbp
// 29: 74 23                         je      0x4e <_JIT_ENTRY+0x4e>
// 2b: 49 89 d7                      movq    %rdx, %r15
// 2e: 8b 45 00                      movl    (%rbp), %eax
// 31: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000033:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 3b: ff c0                         incl    %eax
// 3d: 75 46                         jne     0x85 <_JIT_ENTRY+0x85>
// 3f: 49 8b 04 24                   movq    (%r12), %rax
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 7e 4c                         jle     0x94 <_JIT_ENTRY+0x94>
// 48: 85 c0                         testl   %eax, %eax
// 4a: 79 6e                         jns     0xba <_JIT_ENTRY+0xba>
// 4c: eb 7e                         jmp     0xcc <_JIT_ENTRY+0xcc>
// 4e: 49 29 de                      subq    %rbx, %r14
// 51: 49 83 c6 b8                   addq    $-0x48, %r14
// 55: 49 c1 ee 03                   shrq    $0x3, %r14
// 59: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 5d: 48 8b 03                      movq    (%rbx), %rax
// 60: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000062:  R_X86_64_64  _JIT_TARGET
// 6a: 89 c9                         movl    %ecx, %ecx
// 6c: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 70: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 76: 48 83 c4 08                   addq    $0x8, %rsp
// 7a: 5b                            popq    %rbx
// 7b: 41 5c                         popq    %r12
// 7d: 41 5d                         popq    %r13
// 7f: 41 5e                         popq    %r14
// 81: 41 5f                         popq    %r15
// 83: 5d                            popq    %rbp
// 84: c3                            retq
// 85: 89 45 00                      movl    %eax, (%rbp)
// 88: 41 ff d5                      callq   *%r13
// 8b: 49 8b 04 24                   movq    (%r12), %rax
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 7f b4                         jg      0x48 <_JIT_ENTRY+0x48>
// 94: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000096:  R_X86_64_64  .rodata.str1.1
// 9e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a0:  R_X86_64_64  _Py_NegativeRefcount
// a8: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// ad: 4c 89 e2                      movq    %r12, %rdx
// b0: ff d0                         callq   *%rax
// b2: 49 8b 04 24                   movq    (%r12), %rax
// b6: 85 c0                         testl   %eax, %eax
// b8: 78 12                         js      0xcc <_JIT_ENTRY+0xcc>
// ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c4: ff d0                         callq   *%rax
// c6: 49 ff 0c 24                   decq    (%r12)
// ca: 74 6e                         je      0x13a <_JIT_ENTRY+0x13a>
// cc: 49 89 6e f8                   movq    %rbp, -0x8(%r14)
// d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d2:  R_X86_64_64  _JIT_OPARG
// da: a8 01                         testb   $0x1, %al
// dc: 74 07                         je      0xe5 <_JIT_ENTRY+0xe5>
// de: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// e5: 0f b7 c8                      movzwl  %ax, %ecx
// e8: 83 e0 01                      andl    $0x1, %eax
// eb: 48 29 c8                      subq    %rcx, %rax
// ee: 4d 8b 24 c6                   movq    (%r14,%rax,8), %r12
// f2: 41 8b 04 24                   movl    (%r12), %eax
// f6: ff c0                         incl    %eax
// f8: 74 07                         je      0x101 <_JIT_ENTRY+0x101>
// fa: 41 89 04 24                   movl    %eax, (%r12)
// fe: 41 ff d5                      callq   *%r13
// 101: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000103:  R_X86_64_64  _JIT_OPARG
// 10b: 83 e0 01                      andl    $0x1, %eax
// 10e: 4d 89 24 c6                   movq    %r12, (%r14,%rax,8)
// 112: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 116: 48 83 c6 08                   addq    $0x8, %rsi
// 11a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011c:  R_X86_64_64  _JIT_CONTINUE
// 124: 48 89 df                      movq    %rbx, %rdi
// 127: 4c 89 fa                      movq    %r15, %rdx
// 12a: 48 83 c4 08                   addq    $0x8, %rsp
// 12e: 5b                            popq    %rbx
// 12f: 41 5c                         popq    %r12
// 131: 41 5d                         popq    %r13
// 133: 41 5e                         popq    %r14
// 135: 41 5f                         popq    %r15
// 137: 5d                            popq    %rbp
// 138: ff e0                         jmpq    *%rax
// 13a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013c:  R_X86_64_64  _Py_Dealloc
// 144: 4c 89 e7                      movq    %r12, %rdi
// 147: ff d0                         callq   *%rax
// 149: 49 89 6e f8                   movq    %rbp, -0x8(%r14)
// 14d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014f:  R_X86_64_64  _JIT_OPARG
// 157: a8 01                         testb   $0x1, %al
// 159: 75 83                         jne     0xde <_JIT_ENTRY+0xde>
// 15b: eb 88                         jmp     0xe5 <_JIT_ENTRY+0xe5>
// 15d: 
static const unsigned char _LOAD_ATTR_SLOTplus_COPY_code_body[350] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8b, 0x2c, 0x04, 0x48, 0x85, 0xed, 0x74, 0x23, 0x49, 0x89, 0xd7, 0x8b, 0x45, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0x75, 0x46, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4c, 0x85, 0xc0, 0x79, 0x6e, 0xeb, 0x7e, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0x45, 0x00, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb4, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x6e, 0x49, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x83, 0xe0, 0x01, 0x48, 0x29, 0xc8, 0x4d, 0x8b, 0x24, 0xc6, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x07, 0x41, 0x89, 0x04, 0x24, 0x41, 0xff, 0xd5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x4d, 0x89, 0x24, 0xc6, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x75, 0x83, 0xeb, 0x88};
static const Hole _LOAD_ATTR_SLOTplus_COPY_code_holes[12] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x96, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xa0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xbc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x11c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_COPY_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_COPY_data_holes[1];

// _LOAD_ATTR_SLOTplus_COPY_FREE_VARS
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_COPY_FREE_VARS.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 18: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001a:  R_X86_64_64  _JIT_OPERAND
// 22: 0f b7 c0                      movzwl  %ax, %eax
// 25: 49 8b 2c 04                   movq    (%r12,%rax), %rbp
// 29: 48 85 ed                      testq   %rbp, %rbp
// 2c: 74 21                         je      0x4f <_JIT_ENTRY+0x4f>
// 2e: 49 89 d7                      movq    %rdx, %r15
// 31: 8b 45 00                      movl    (%rbp), %eax
// 34: ff c0                         incl    %eax
// 36: 75 4e                         jne     0x86 <_JIT_ENTRY+0x86>
// 38: 49 8b 04 24                   movq    (%r12), %rax
// 3c: 48 85 c0                      testq   %rax, %rax
// 3f: 7e 5d                         jle     0x9e <_JIT_ENTRY+0x9e>
// 41: 4c 89 7c 24 10                movq    %r15, 0x10(%rsp)
// 46: 85 c0                         testl   %eax, %eax
// 48: 79 7f                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 4a: e9 9b 00 00 00                jmp     0xea <_JIT_ENTRY+0xea>
// 4f: 49 29 de                      subq    %rbx, %r14
// 52: 49 83 c6 b8                   addq    $-0x48, %r14
// 56: 49 c1 ee 03                   shrq    $0x3, %r14
// 5a: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 5e: 48 8b 03                      movq    (%rbx), %rax
// 61: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000063:  R_X86_64_64  _JIT_TARGET
// 6b: 89 c9                         movl    %ecx, %ecx
// 6d: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 71: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 77: 48 83 c4 18                   addq    $0x18, %rsp
// 7b: 5b                            popq    %rbx
// 7c: 41 5c                         popq    %r12
// 7e: 41 5d                         popq    %r13
// 80: 41 5e                         popq    %r14
// 82: 41 5f                         popq    %r15
// 84: 5d                            popq    %rbp
// 85: c3                            retq
// 86: 89 45 00                      movl    %eax, (%rbp)
// 89: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008b:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 93: ff d0                         callq   *%rax
// 95: 49 8b 04 24                   movq    (%r12), %rax
// 99: 48 85 c0                      testq   %rax, %rax
// 9c: 7f a3                         jg      0x41 <_JIT_ENTRY+0x41>
// 9e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a0:  R_X86_64_64  .rodata.str1.1
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _Py_NegativeRefcount
// b2: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// b7: 4c 89 e2                      movq    %r12, %rdx
// ba: ff d0                         callq   *%rax
// bc: 49 8b 04 24                   movq    (%r12), %rax
// c0: 4c 89 7c 24 10                movq    %r15, 0x10(%rsp)
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 21                         js      0xea <_JIT_ENTRY+0xea>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 0c 24                   decq    (%r12)
// d9: 75 0f                         jne     0xea <_JIT_ENTRY+0xea>
// db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000dd:  R_X86_64_64  _Py_Dealloc
// e5: 4c 89 e7                      movq    %r12, %rdi
// e8: ff d0                         callq   *%rax
// ea: 48 89 5c 24 08                movq    %rbx, 0x8(%rsp)
// ef: 49 89 6e f8                   movq    %rbp, -0x8(%r14)
// f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f5:  R_X86_64_64  _JIT_OPARG
// fd: a8 01                         testb   $0x1, %al
// ff: 74 07                         je      0x108 <_JIT_ENTRY+0x108>
// 101: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// 108: 66 85 c0                      testw   %ax, %ax
// 10b: 74 6e                         je      0x17b <_JIT_ENTRY+0x17b>
// 10d: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 112: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 116: 4c 8b 60 48                   movq    0x48(%rax), %r12
// 11a: 48 8b 02                      movq    (%rdx), %rax
// 11d: 8b 40 48                      movl    0x48(%rax), %eax
// 120: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000122:  R_X86_64_64  _JIT_OPARG
// 12a: 0f b7 c9                      movzwl  %cx, %ecx
// 12d: 29 c8                         subl    %ecx, %eax
// 12f: 48 98                         cltq
// 131: 83 f9 02                      cmpl    $0x2, %ecx
// 134: bd 01 00 00 00                movl    $0x1, %ebp
// 139: 0f 43 e9                      cmovael %ecx, %ebp
// 13c: 4c 8d 3c c2                   leaq    (%rdx,%rax,8), %r15
// 140: 49 83 c7 48                   addq    $0x48, %r15
// 144: 31 db                         xorl    %ebx, %ebx
// 146: eb 14                         jmp     0x15c <_JIT_ENTRY+0x15c>
// 148: 0f 1f 84 00 00 00 00 00       nopl    (%rax,%rax)
// 150: 4d 89 2c df                   movq    %r13, (%r15,%rbx,8)
// 154: 48 ff c3                      incq    %rbx
// 157: 48 39 dd                      cmpq    %rbx, %rbp
// 15a: 74 1f                         je      0x17b <_JIT_ENTRY+0x17b>
// 15c: 4d 8b 6c dc 18                movq    0x18(%r12,%rbx,8), %r13
// 161: 41 8b 45 00                   movl    (%r13), %eax
// 165: ff c0                         incl    %eax
// 167: 74 e7                         je      0x150 <_JIT_ENTRY+0x150>
// 169: 41 89 45 00                   movl    %eax, (%r13)
// 16d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016f:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 177: ff d0                         callq   *%rax
// 179: eb d5                         jmp     0x150 <_JIT_ENTRY+0x150>
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _JIT_OPARG
// 185: 83 e0 01                      andl    $0x1, %eax
// 188: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _JIT_CONTINUE
// 196: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 19b: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 1a0: 48 83 c4 18                   addq    $0x18, %rsp
// 1a4: 5b                            popq    %rbx
// 1a5: 41 5c                         popq    %r12
// 1a7: 41 5d                         popq    %r13
// 1a9: 41 5e                         popq    %r14
// 1ab: 41 5f                         popq    %r15
// 1ad: 5d                            popq    %rbp
// 1ae: ff e0                         jmpq    *%rax
// 1b0: 
static const unsigned char _LOAD_ATTR_SLOTplus_COPY_FREE_VARS_code_body[433] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8b, 0x2c, 0x04, 0x48, 0x85, 0xed, 0x74, 0x21, 0x49, 0x89, 0xd7, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x4e, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x5d, 0x4c, 0x89, 0x7c, 0x24, 0x10, 0x85, 0xc0, 0x79, 0x7f, 0xe9, 0x9b, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xa3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x89, 0x7c, 0x24, 0x10, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x89, 0x5c, 0x24, 0x08, 0x49, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x74, 0x6e, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x4c, 0x8b, 0x60, 0x48, 0x48, 0x8b, 0x02, 0x8b, 0x40, 0x48, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x29, 0xc8, 0x48, 0x98, 0x83, 0xf9, 0x02, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x43, 0xe9, 0x4c, 0x8d, 0x3c, 0xc2, 0x49, 0x83, 0xc7, 0x48, 0x31, 0xdb, 0xeb, 0x14, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x2c, 0xdf, 0x48, 0xff, 0xc3, 0x48, 0x39, 0xdd, 0x74, 0x1f, 0x4d, 0x8b, 0x6c, 0xdc, 0x18, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0xe7, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xd5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_ATTR_SLOTplus_COPY_FREE_VARS_code_holes[13] = {
    {0x1a, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x63, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x8b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0xa0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xdd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xf5, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x122, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x16f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_COPY_FREE_VARS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_COPY_FREE_VARS_data_holes[1];

// _LOAD_ATTR_SLOTplus_DELETE_ATTR
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_DELETE_ATTR.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f7                      movq    %rsi, %r15
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 26: 4d 85 ed                      testq   %r13, %r13
// 29: 74 28                         je      0x53 <_JIT_ENTRY+0x53>
// 2b: 48 89 14 24                   movq    %rdx, (%rsp)
// 2f: 41 8b 45 00                   movl    (%r13), %eax
// 33: ff c0                         incl    %eax
// 35: 75 49                         jne     0x80 <_JIT_ENTRY+0x80>
// 37: 49 8b 04 24                   movq    (%r12), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 59                         jle     0x99 <_JIT_ENTRY+0x99>
// 40: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000042:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 4a: 85 c0                         testl   %eax, %eax
// 4c: 79 7b                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 4e: e9 82 00 00 00                jmp     0xd5 <_JIT_ENTRY+0xd5>
// 53: 49 29 df                      subq    %rbx, %r15
// 56: 49 83 c7 b8                   addq    $-0x48, %r15
// 5a: 49 c1 ef 03                   shrq    $0x3, %r15
// 5e: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 62: 48 8b 03                      movq    (%rbx), %rax
// 65: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000067:  R_X86_64_64  _JIT_TARGET
// 6f: 89 c9                         movl    %ecx, %ecx
// 71: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 75: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 7b: e9 1a 01 00 00                jmp     0x19a <_JIT_ENTRY+0x19a>
// 80: 41 89 45 00                   movl    %eax, (%r13)
// 84: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000086:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 8e: ff d0                         callq   *%rax
// 90: 49 8b 04 24                   movq    (%r12), %rax
// 94: 48 85 c0                      testq   %rax, %rax
// 97: 7f a7                         jg      0x40 <_JIT_ENTRY+0x40>
// 99: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000009b:  R_X86_64_64  .rodata.str1.1
// a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a5:  R_X86_64_64  _Py_NegativeRefcount
// ad: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// b2: 4c 89 e2                      movq    %r12, %rdx
// b5: ff d0                         callq   *%rax
// b7: 49 8b 04 24                   movq    (%r12), %rax
// bb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000bd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 0c                         js      0xd5 <_JIT_ENTRY+0xd5>
// c9: ff d1                         callq   *%rcx
// cb: 49 ff 0c 24                   decq    (%r12)
// cf: 0f 84 d4 00 00 00             je      0x1a9 <_JIT_ENTRY+0x1a9>
// d5: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000db:  R_X86_64_64  _JIT_OPARG
// e3: a8 01                         testb   $0x1, %al
// e5: 74 07                         je      0xee <_JIT_ENTRY+0xee>
// e7: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// ee: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 00000000000000f0:  R_X86_64_64  _JIT_OPARG
// f8: 41 0f b7 c6                   movzwl  %r14w, %eax
// fc: 41 83 e6 01                   andl    $0x1, %r14d
// 100: 4f 8b 64 f7 f8                movq    -0x8(%r15,%r14,8), %r12
// 105: 48 8b 0b                      movq    (%rbx), %rcx
// 108: 48 8b 49 20                   movq    0x20(%rcx), %rcx
// 10c: 48 8b 74 c1 18                movq    0x18(%rcx,%rax,8), %rsi
// 111: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000113:  R_X86_64_64  PyObject_DelAttr
// 11b: 4c 89 e7                      movq    %r12, %rdi
// 11e: ff d0                         callq   *%rax
// 120: 89 c5                         movl    %eax, %ebp
// 122: 49 8b 04 24                   movq    (%r12), %rax
// 126: 48 85 c0                      testq   %rax, %rax
// 129: 7e 12                         jle     0x13d <_JIT_ENTRY+0x13d>
// 12b: 4f 8d 2c f7                   leaq    (%r15,%r14,8), %r13
// 12f: 4f 8d 34 f7                   leaq    (%r15,%r14,8), %r14
// 133: 49 83 c6 f8                   addq    $-0x8, %r14
// 137: 85 c0                         testl   %eax, %eax
// 139: 79 34                         jns     0x16f <_JIT_ENTRY+0x16f>
// 13b: eb 44                         jmp     0x181 <_JIT_ENTRY+0x181>
// 13d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013f:  R_X86_64_64  .rodata.str1.1
// 147: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000149:  R_X86_64_64  _Py_NegativeRefcount
// 151: be d2 03 00 00                movl    $0x3d2, %esi            # imm = 0x3D2
// 156: 4c 89 e2                      movq    %r12, %rdx
// 159: ff d0                         callq   *%rax
// 15b: 49 8b 04 24                   movq    (%r12), %rax
// 15f: 4f 8d 2c f7                   leaq    (%r15,%r14,8), %r13
// 163: 4f 8d 34 f7                   leaq    (%r15,%r14,8), %r14
// 167: 49 83 c6 f8                   addq    $-0x8, %r14
// 16b: 85 c0                         testl   %eax, %eax
// 16d: 78 12                         js      0x181 <_JIT_ENTRY+0x181>
// 16f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000171:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 179: ff d0                         callq   *%rax
// 17b: 49 ff 0c 24                   decq    (%r12)
// 17f: 74 52                         je      0x1d3 <_JIT_ENTRY+0x1d3>
// 181: 85 ed                         testl   %ebp, %ebp
// 183: 4d 0f 44 ee                   cmoveq  %r14, %r13
// 187: 74 61                         je      0x1ea <_JIT_ENTRY+0x1ea>
// 189: 49 29 dd                      subq    %rbx, %r13
// 18c: 49 83 c5 b0                   addq    $-0x50, %r13
// 190: 49 c1 ed 03                   shrq    $0x3, %r13
// 194: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 198: 31 c0                         xorl    %eax, %eax
// 19a: 48 83 c4 08                   addq    $0x8, %rsp
// 19e: 5b                            popq    %rbx
// 19f: 41 5c                         popq    %r12
// 1a1: 41 5d                         popq    %r13
// 1a3: 41 5e                         popq    %r14
// 1a5: 41 5f                         popq    %r15
// 1a7: 5d                            popq    %rbp
// 1a8: c3                            retq
// 1a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ab:  R_X86_64_64  _Py_Dealloc
// 1b3: 4c 89 e7                      movq    %r12, %rdi
// 1b6: ff d0                         callq   *%rax
// 1b8: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// 1bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001be:  R_X86_64_64  _JIT_OPARG
// 1c6: a8 01                         testb   $0x1, %al
// 1c8: 0f 85 19 ff ff ff             jne     0xe7 <_JIT_ENTRY+0xe7>
// 1ce: e9 1b ff ff ff                jmp     0xee <_JIT_ENTRY+0xee>
// 1d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d5:  R_X86_64_64  _Py_Dealloc
// 1dd: 4c 89 e7                      movq    %r12, %rdi
// 1e0: ff d0                         callq   *%rax
// 1e2: 85 ed                         testl   %ebp, %ebp
// 1e4: 4d 0f 44 ee                   cmoveq  %r14, %r13
// 1e8: 75 9f                         jne     0x189 <_JIT_ENTRY+0x189>
// 1ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ec:  R_X86_64_64  _JIT_CONTINUE
// 1f4: 48 89 df                      movq    %rbx, %rdi
// 1f7: 4c 89 ee                      movq    %r13, %rsi
// 1fa: 48 8b 14 24                   movq    (%rsp), %rdx
// 1fe: 48 83 c4 08                   addq    $0x8, %rsp
// 202: 5b                            popq    %rbx
// 203: 41 5c                         popq    %r12
// 205: 41 5d                         popq    %r13
// 207: 41 5e                         popq    %r14
// 209: 41 5f                         popq    %r15
// 20b: 5d                            popq    %rbp
// 20c: ff e0                         jmpq    *%rax
// 20e: 
static const unsigned char _LOAD_ATTR_SLOTplus_DELETE_ATTR_code_body[527] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x28, 0x48, 0x89, 0x14, 0x24, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x49, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x59, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x79, 0x7b, 0xe9, 0x82, 0x00, 0x00, 0x00, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x1a, 0x01, 0x00, 0x00, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xa7, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x0c, 0xff, 0xd1, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xd4, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x0f, 0xb7, 0xc6, 0x41, 0x83, 0xe6, 0x01, 0x4f, 0x8b, 0x64, 0xf7, 0xf8, 0x48, 0x8b, 0x0b, 0x48, 0x8b, 0x49, 0x20, 0x48, 0x8b, 0x74, 0xc1, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x4f, 0x8d, 0x2c, 0xf7, 0x4f, 0x8d, 0x34, 0xf7, 0x49, 0x83, 0xc6, 0xf8, 0x85, 0xc0, 0x79, 0x34, 0xeb, 0x44, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd2, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4f, 0x8d, 0x2c, 0xf7, 0x4f, 0x8d, 0x34, 0xf7, 0x49, 0x83, 0xc6, 0xf8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x52, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xee, 0x74, 0x61, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb0, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x19, 0xff, 0xff, 0xff, 0xe9, 0x1b, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xee, 0x75, 0x9f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_ATTR_SLOTplus_DELETE_ATTR_code_holes[18] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x42, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x67, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x86, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xbd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xdb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x113, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_DelAttr, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x149, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x171, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ec, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_DELETE_ATTR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_DELETE_ATTR_data_holes[1];

// _LOAD_ATTR_SLOTplus_DELETE_DEREF
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_DELETE_DEREF.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f7                      movq    %rsi, %r15
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 74 1d                         je      0x46 <_JIT_ENTRY+0x46>
// 29: 49 89 d6                      movq    %rdx, %r14
// 2c: 41 8b 45 00                   movl    (%r13), %eax
// 30: ff c0                         incl    %eax
// 32: 75 3f                         jne     0x73 <_JIT_ENTRY+0x73>
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 4f                         jle     0x8c <_JIT_ENTRY+0x8c>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 71                         jns     0xb2 <_JIT_ENTRY+0xb2>
// 41: e9 82 00 00 00                jmp     0xc8 <_JIT_ENTRY+0xc8>
// 46: 49 29 df                      subq    %rbx, %r15
// 49: 49 83 c7 b8                   addq    $-0x48, %r15
// 4d: 49 c1 ef 03                   shrq    $0x3, %r15
// 51: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 55: 48 8b 03                      movq    (%rbx), %rax
// 58: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005a:  R_X86_64_64  _JIT_TARGET
// 62: 89 c9                         movl    %ecx, %ecx
// 64: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 68: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 6e: e9 d0 00 00 00                jmp     0x143 <_JIT_ENTRY+0x143>
// 73: 41 89 45 00                   movl    %eax, (%r13)
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 81: ff d0                         callq   *%rax
// 83: 49 8b 04 24                   movq    (%r12), %rax
// 87: 48 85 c0                      testq   %rax, %rax
// 8a: 7f b1                         jg      0x3d <_JIT_ENTRY+0x3d>
// 8c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008e:  R_X86_64_64  .rodata.str1.1
// 96: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000098:  R_X86_64_64  _Py_NegativeRefcount
// a0: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a5: 4c 89 e2                      movq    %r12, %rdx
// a8: ff d0                         callq   *%rax
// aa: 49 8b 04 24                   movq    (%r12), %rax
// ae: 85 c0                         testl   %eax, %eax
// b0: 78 16                         js      0xc8 <_JIT_ENTRY+0xc8>
// b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: ff d0                         callq   *%rax
// be: 49 ff 0c 24                   decq    (%r12)
// c2: 0f 84 ea 00 00 00             je      0x1b2 <_JIT_ENTRY+0x1b2>
// c8: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ce:  R_X86_64_64  _JIT_OPARG
// d6: a8 01                         testb   $0x1, %al
// d8: 74 07                         je      0xe1 <_JIT_ENTRY+0xe1>
// da: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// e1: 0f b7 c8                      movzwl  %ax, %ecx
// e4: 83 e0 01                      andl    $0x1, %eax
// e7: 4d 8d 3c c7                   leaq    (%r15,%rax,8), %r15
// eb: 48 8b 44 cb 48                movq    0x48(%rbx,%rcx,8), %rax
// f0: 4c 8b 60 10                   movq    0x10(%rax), %r12
// f4: 4d 85 e4                      testq   %r12, %r12
// f7: 74 1a                         je      0x113 <_JIT_ENTRY+0x113>
// f9: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 101: 49 8b 04 24                   movq    (%r12), %rax
// 105: 48 85 c0                      testq   %rax, %rax
// 108: 7e 43                         jle     0x14d <_JIT_ENTRY+0x14d>
// 10a: 85 c0                         testl   %eax, %eax
// 10c: 79 65                         jns     0x173 <_JIT_ENTRY+0x173>
// 10e: e9 81 00 00 00                jmp     0x194 <_JIT_ENTRY+0x194>
// 113: 48 8b 33                      movq    (%rbx), %rsi
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _JIT_OPARG
// 120: 0f b7 d0                      movzwl  %ax, %edx
// 123: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000125:  R_X86_64_64  _PyEval_FormatExcUnbound
// 12d: 4c 89 f7                      movq    %r14, %rdi
// 130: ff d0                         callq   *%rax
// 132: 49 29 df                      subq    %rbx, %r15
// 135: 49 83 c7 b8                   addq    $-0x48, %r15
// 139: 49 c1 ef 03                   shrq    $0x3, %r15
// 13d: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 141: 31 c0                         xorl    %eax, %eax
// 143: 5b                            popq    %rbx
// 144: 41 5c                         popq    %r12
// 146: 41 5d                         popq    %r13
// 148: 41 5e                         popq    %r14
// 14a: 41 5f                         popq    %r15
// 14c: c3                            retq
// 14d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000014f:  R_X86_64_64  .rodata.str1.1
// 157: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000159:  R_X86_64_64  _Py_NegativeRefcount
// 161: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 166: 4c 89 e2                      movq    %r12, %rdx
// 169: ff d0                         callq   *%rax
// 16b: 49 8b 04 24                   movq    (%r12), %rax
// 16f: 85 c0                         testl   %eax, %eax
// 171: 78 21                         js      0x194 <_JIT_ENTRY+0x194>
// 173: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000175:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17d: ff d0                         callq   *%rax
// 17f: 49 ff 0c 24                   decq    (%r12)
// 183: 75 0f                         jne     0x194 <_JIT_ENTRY+0x194>
// 185: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000187:  R_X86_64_64  _Py_Dealloc
// 18f: 4c 89 e7                      movq    %r12, %rdi
// 192: ff d0                         callq   *%rax
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  _JIT_CONTINUE
// 19e: 48 89 df                      movq    %rbx, %rdi
// 1a1: 4c 89 fe                      movq    %r15, %rsi
// 1a4: 4c 89 f2                      movq    %r14, %rdx
// 1a7: 5b                            popq    %rbx
// 1a8: 41 5c                         popq    %r12
// 1aa: 41 5d                         popq    %r13
// 1ac: 41 5e                         popq    %r14
// 1ae: 41 5f                         popq    %r15
// 1b0: ff e0                         jmpq    *%rax
// 1b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b4:  R_X86_64_64  _Py_Dealloc
// 1bc: 4c 89 e7                      movq    %r12, %rdi
// 1bf: ff d0                         callq   *%rax
// 1c1: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _JIT_OPARG
// 1cf: a8 01                         testb   $0x1, %al
// 1d1: 0f 85 03 ff ff ff             jne     0xda <_JIT_ENTRY+0xda>
// 1d7: e9 05 ff ff ff                jmp     0xe1 <_JIT_ENTRY+0xe1>
// 1dc: 
static const unsigned char _LOAD_ATTR_SLOTplus_DELETE_DEREF_code_body[477] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1d, 0x49, 0x89, 0xd6, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x3f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4f, 0x85, 0xc0, 0x79, 0x71, 0xe9, 0x82, 0x00, 0x00, 0x00, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xd0, 0x00, 0x00, 0x00, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xea, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x83, 0xe0, 0x01, 0x4d, 0x8d, 0x3c, 0xc7, 0x48, 0x8b, 0x44, 0xcb, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x1a, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x43, 0x85, 0xc0, 0x79, 0x65, 0xe9, 0x81, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x03, 0xff, 0xff, 0xff, 0xe9, 0x05, 0xff, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_DELETE_DEREF_code_holes[17] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x125, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x159, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x175, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x187, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_DELETE_DEREF_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_DELETE_DEREF_data_holes[1];

// _LOAD_ATTR_SLOTplus_DELETE_FAST
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_DELETE_FAST.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f7                      movq    %rsi, %r15
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 74 1d                         je      0x46 <_JIT_ENTRY+0x46>
// 29: 49 89 d6                      movq    %rdx, %r14
// 2c: 41 8b 45 00                   movl    (%r13), %eax
// 30: ff c0                         incl    %eax
// 32: 75 3f                         jne     0x73 <_JIT_ENTRY+0x73>
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 4f                         jle     0x8c <_JIT_ENTRY+0x8c>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 71                         jns     0xb2 <_JIT_ENTRY+0xb2>
// 41: e9 82 00 00 00                jmp     0xc8 <_JIT_ENTRY+0xc8>
// 46: 49 29 df                      subq    %rbx, %r15
// 49: 49 83 c7 b8                   addq    $-0x48, %r15
// 4d: 49 c1 ef 03                   shrq    $0x3, %r15
// 51: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 55: 48 8b 03                      movq    (%rbx), %rax
// 58: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005a:  R_X86_64_64  _JIT_TARGET
// 62: 89 c9                         movl    %ecx, %ecx
// 64: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 68: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 6e: e9 0c 01 00 00                jmp     0x17f <_JIT_ENTRY+0x17f>
// 73: 41 89 45 00                   movl    %eax, (%r13)
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 81: ff d0                         callq   *%rax
// 83: 49 8b 04 24                   movq    (%r12), %rax
// 87: 48 85 c0                      testq   %rax, %rax
// 8a: 7f b1                         jg      0x3d <_JIT_ENTRY+0x3d>
// 8c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008e:  R_X86_64_64  .rodata.str1.1
// 96: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000098:  R_X86_64_64  _Py_NegativeRefcount
// a0: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a5: 4c 89 e2                      movq    %r12, %rdx
// a8: ff d0                         callq   *%rax
// aa: 49 8b 04 24                   movq    (%r12), %rax
// ae: 85 c0                         testl   %eax, %eax
// b0: 78 16                         js      0xc8 <_JIT_ENTRY+0xc8>
// b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: ff d0                         callq   *%rax
// be: 49 ff 0c 24                   decq    (%r12)
// c2: 0f 84 26 01 00 00             je      0x1ee <_JIT_ENTRY+0x1ee>
// c8: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ce:  R_X86_64_64  _JIT_OPARG
// d6: a8 01                         testb   $0x1, %al
// d8: 74 07                         je      0xe1 <_JIT_ENTRY+0xe1>
// da: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// e1: 0f b7 c8                      movzwl  %ax, %ecx
// e4: 83 e0 01                      andl    $0x1, %eax
// e7: 4d 8d 3c c7                   leaq    (%r15,%rax,8), %r15
// eb: 4c 8b 64 cb 48                movq    0x48(%rbx,%rcx,8), %r12
// f0: 4d 85 e4                      testq   %r12, %r12
// f3: 74 2c                         je      0x121 <_JIT_ENTRY+0x121>
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _JIT_OPARG
// ff: 0f b7 c0                      movzwl  %ax, %eax
// 102: 48 c7 44 c3 48 00 00 00 00    movq    $0x0, 0x48(%rbx,%rax,8)
// 10b: 49 8b 04 24                   movq    (%r12), %rax
// 10f: 48 85 c0                      testq   %rax, %rax
// 112: 7e 75                         jle     0x189 <_JIT_ENTRY+0x189>
// 114: 85 c0                         testl   %eax, %eax
// 116: 0f 89 93 00 00 00             jns     0x1af <_JIT_ENTRY+0x1af>
// 11c: e9 af 00 00 00                jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 121: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000123:  R_X86_64_64  PyExc_UnboundLocalError
// 12b: 4c 8b 20                      movq    (%rax), %r12
// 12e: 48 8b 03                      movq    (%rbx), %rax
// 131: 48 8b 78 60                   movq    0x60(%rax), %rdi
// 135: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000137:  R_X86_64_64  _JIT_OPARG
// 13f: 0f b7 f0                      movzwl  %ax, %esi
// 142: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000144:  R_X86_64_64  PyTuple_GetItem
// 14c: ff d0                         callq   *%rax
// 14e: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000150:  R_X86_64_64  .rodata.str1.1+0x39
// 158: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000015a:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 162: 4c 89 f7                      movq    %r14, %rdi
// 165: 4c 89 e6                      movq    %r12, %rsi
// 168: 48 89 c1                      movq    %rax, %rcx
// 16b: 41 ff d0                      callq   *%r8
// 16e: 49 29 df                      subq    %rbx, %r15
// 171: 49 83 c7 b8                   addq    $-0x48, %r15
// 175: 49 c1 ef 03                   shrq    $0x3, %r15
// 179: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 17d: 31 c0                         xorl    %eax, %eax
// 17f: 5b                            popq    %rbx
// 180: 41 5c                         popq    %r12
// 182: 41 5d                         popq    %r13
// 184: 41 5e                         popq    %r14
// 186: 41 5f                         popq    %r15
// 188: c3                            retq
// 189: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018b:  R_X86_64_64  .rodata.str1.1+0x83
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_NegativeRefcount
// 19d: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 1a2: 4c 89 e2                      movq    %r12, %rdx
// 1a5: ff d0                         callq   *%rax
// 1a7: 49 8b 04 24                   movq    (%r12), %rax
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 78 21                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b9: ff d0                         callq   *%rax
// 1bb: 49 ff 0c 24                   decq    (%r12)
// 1bf: 75 0f                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_Dealloc
// 1cb: 4c 89 e7                      movq    %r12, %rdi
// 1ce: ff d0                         callq   *%rax
// 1d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d2:  R_X86_64_64  _JIT_CONTINUE
// 1da: 48 89 df                      movq    %rbx, %rdi
// 1dd: 4c 89 fe                      movq    %r15, %rsi
// 1e0: 4c 89 f2                      movq    %r14, %rdx
// 1e3: 5b                            popq    %rbx
// 1e4: 41 5c                         popq    %r12
// 1e6: 41 5d                         popq    %r13
// 1e8: 41 5e                         popq    %r14
// 1ea: 41 5f                         popq    %r15
// 1ec: ff e0                         jmpq    *%rax
// 1ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f0:  R_X86_64_64  _Py_Dealloc
// 1f8: 4c 89 e7                      movq    %r12, %rdi
// 1fb: ff d0                         callq   *%rax
// 1fd: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// 201: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000203:  R_X86_64_64  _JIT_OPARG
// 20b: a8 01                         testb   $0x1, %al
// 20d: 0f 85 c7 fe ff ff             jne     0xda <_JIT_ENTRY+0xda>
// 213: e9 c9 fe ff ff                jmp     0xe1 <_JIT_ENTRY+0xe1>
// 218: 
static const unsigned char _LOAD_ATTR_SLOTplus_DELETE_FAST_code_body[537] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1d, 0x49, 0x89, 0xd6, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x3f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4f, 0x85, 0xc0, 0x79, 0x71, 0xe9, 0x82, 0x00, 0x00, 0x00, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x0c, 0x01, 0x00, 0x00, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x26, 0x01, 0x00, 0x00, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x83, 0xe0, 0x01, 0x4d, 0x8d, 0x3c, 0xc7, 0x4c, 0x8b, 0x64, 0xcb, 0x48, 0x4d, 0x85, 0xe4, 0x74, 0x2c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc7, 0x44, 0xc3, 0x48, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x75, 0x85, 0xc0, 0x0f, 0x89, 0x93, 0x00, 0x00, 0x00, 0xe9, 0xaf, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x20, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x78, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xc1, 0x41, 0xff, 0xd0, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0xc7, 0xfe, 0xff, 0xff, 0xe9, 0xc9, 0xfe, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_DELETE_FAST_code_holes[21] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x123, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_UnboundLocalError, 0x0},
    {0x137, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_GetItem, 0x0},
    {0x150, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x83},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1f0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x203, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00cannot access local variable '%s' where it is not associated with a value\x00/home/jglass/Documents/cpython/Include/object.h\x00"
// b3: 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_DELETE_FAST_data_body[185] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x27, 0x25, 0x73, 0x27, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_DELETE_FAST_data_holes[1];

// _LOAD_ATTR_SLOTplus_DELETE_GLOBAL
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_DELETE_GLOBAL.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f7                      movq    %rsi, %r15
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 74 1d                         je      0x46 <_JIT_ENTRY+0x46>
// 29: 49 89 d6                      movq    %rdx, %r14
// 2c: 41 8b 45 00                   movl    (%r13), %eax
// 30: ff c0                         incl    %eax
// 32: 75 3f                         jne     0x73 <_JIT_ENTRY+0x73>
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 4f                         jle     0x8c <_JIT_ENTRY+0x8c>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 71                         jns     0xb2 <_JIT_ENTRY+0xb2>
// 41: e9 82 00 00 00                jmp     0xc8 <_JIT_ENTRY+0xc8>
// 46: 49 29 df                      subq    %rbx, %r15
// 49: 49 83 c7 b8                   addq    $-0x48, %r15
// 4d: 49 c1 ef 03                   shrq    $0x3, %r15
// 51: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 55: 48 8b 03                      movq    (%rbx), %rax
// 58: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005a:  R_X86_64_64  _JIT_TARGET
// 62: 89 c9                         movl    %ecx, %ecx
// 64: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 68: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 6e: e9 f5 00 00 00                jmp     0x168 <_JIT_ENTRY+0x168>
// 73: 41 89 45 00                   movl    %eax, (%r13)
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 81: ff d0                         callq   *%rax
// 83: 49 8b 04 24                   movq    (%r12), %rax
// 87: 48 85 c0                      testq   %rax, %rax
// 8a: 7f b1                         jg      0x3d <_JIT_ENTRY+0x3d>
// 8c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008e:  R_X86_64_64  .rodata.str1.1
// 96: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000098:  R_X86_64_64  _Py_NegativeRefcount
// a0: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a5: 4c 89 e2                      movq    %r12, %rdx
// a8: ff d0                         callq   *%rax
// aa: 49 8b 04 24                   movq    (%r12), %rax
// ae: 85 c0                         testl   %eax, %eax
// b0: 78 16                         js      0xc8 <_JIT_ENTRY+0xc8>
// b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: ff d0                         callq   *%rax
// be: 49 ff 0c 24                   decq    (%r12)
// c2: 0f 84 c8 00 00 00             je      0x190 <_JIT_ENTRY+0x190>
// c8: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ce:  R_X86_64_64  _JIT_OPARG
// d6: a8 01                         testb   $0x1, %al
// d8: 74 07                         je      0xe1 <_JIT_ENTRY+0xe1>
// da: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// e1: 0f b7 c8                      movzwl  %ax, %ecx
// e4: 83 e0 01                      andl    $0x1, %eax
// e7: 4d 8d 3c c7                   leaq    (%r15,%rax,8), %r15
// eb: 48 8b 03                      movq    (%rbx), %rax
// ee: 48 8b 7b 18                   movq    0x18(%rbx), %rdi
// f2: 48 8b 40 20                   movq    0x20(%rax), %rax
// f6: 4c 8b 64 c8 18                movq    0x18(%rax,%rcx,8), %r12
// fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fd:  R_X86_64_64  PyDict_DelItem
// 105: 4c 89 e6                      movq    %r12, %rsi
// 108: ff d0                         callq   *%rax
// 10a: 85 c0                         testl   %eax, %eax
// 10c: 74 64                         je      0x172 <_JIT_ENTRY+0x172>
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  PyExc_KeyError
// 118: 48 8b 30                      movq    (%rax), %rsi
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  _PyErr_ExceptionMatches
// 125: 4c 89 f7                      movq    %r14, %rdi
// 128: ff d0                         callq   *%rax
// 12a: 85 c0                         testl   %eax, %eax
// 12c: 74 29                         je      0x157 <_JIT_ENTRY+0x157>
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  PyExc_NameError
// 138: 48 8b 30                      movq    (%rax), %rsi
// 13b: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000013d:  R_X86_64_64  .rodata.str1.1+0x39
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 14f: 4c 89 f7                      movq    %r14, %rdi
// 152: 4c 89 e1                      movq    %r12, %rcx
// 155: ff d0                         callq   *%rax
// 157: 49 29 df                      subq    %rbx, %r15
// 15a: 49 83 c7 b8                   addq    $-0x48, %r15
// 15e: 49 c1 ef 03                   shrq    $0x3, %r15
// 162: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 166: 31 c0                         xorl    %eax, %eax
// 168: 5b                            popq    %rbx
// 169: 41 5c                         popq    %r12
// 16b: 41 5d                         popq    %r13
// 16d: 41 5e                         popq    %r14
// 16f: 41 5f                         popq    %r15
// 171: c3                            retq
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _JIT_CONTINUE
// 17c: 48 89 df                      movq    %rbx, %rdi
// 17f: 4c 89 fe                      movq    %r15, %rsi
// 182: 4c 89 f2                      movq    %r14, %rdx
// 185: 5b                            popq    %rbx
// 186: 41 5c                         popq    %r12
// 188: 41 5d                         popq    %r13
// 18a: 41 5e                         popq    %r14
// 18c: 41 5f                         popq    %r15
// 18e: ff e0                         jmpq    *%rax
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_Dealloc
// 19a: 4c 89 e7                      movq    %r12, %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// 1a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a5:  R_X86_64_64  _JIT_OPARG
// 1ad: a8 01                         testb   $0x1, %al
// 1af: 0f 85 25 ff ff ff             jne     0xda <_JIT_ENTRY+0xda>
// 1b5: e9 27 ff ff ff                jmp     0xe1 <_JIT_ENTRY+0xe1>
// 1ba: 
static const unsigned char _LOAD_ATTR_SLOTplus_DELETE_GLOBAL_code_body[443] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1d, 0x49, 0x89, 0xd6, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x3f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4f, 0x85, 0xc0, 0x79, 0x71, 0xe9, 0x82, 0x00, 0x00, 0x00, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xf5, 0x00, 0x00, 0x00, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xc8, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x83, 0xe0, 0x01, 0x4d, 0x8d, 0x3c, 0xc7, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x7b, 0x18, 0x48, 0x8b, 0x40, 0x20, 0x4c, 0x8b, 0x64, 0xc8, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x64, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xe1, 0xff, 0xd0, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x25, 0xff, 0xff, 0xff, 0xe9, 0x27, 0xff, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_DELETE_GLOBAL_code_holes[17] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xfd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_DelItem, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_KeyError, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_ExceptionMatches, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00name '%.200s' is not defined\x00"
// 56: 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_DELETE_GLOBAL_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_DELETE_GLOBAL_data_holes[1];

// _LOAD_ATTR_SLOTplus_DELETE_NAME
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_DELETE_NAME.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f7                      movq    %rsi, %r15
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 74 1d                         je      0x46 <_JIT_ENTRY+0x46>
// 29: 49 89 d6                      movq    %rdx, %r14
// 2c: 41 8b 45 00                   movl    (%r13), %eax
// 30: ff c0                         incl    %eax
// 32: 75 3f                         jne     0x73 <_JIT_ENTRY+0x73>
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 4f                         jle     0x8c <_JIT_ENTRY+0x8c>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 71                         jns     0xb2 <_JIT_ENTRY+0xb2>
// 41: e9 82 00 00 00                jmp     0xc8 <_JIT_ENTRY+0xc8>
// 46: 49 29 df                      subq    %rbx, %r15
// 49: 49 83 c7 b8                   addq    $-0x48, %r15
// 4d: 49 c1 ef 03                   shrq    $0x3, %r15
// 51: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 55: 48 8b 03                      movq    (%rbx), %rax
// 58: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005a:  R_X86_64_64  _JIT_TARGET
// 62: 89 c9                         movl    %ecx, %ecx
// 64: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 68: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 6e: e9 08 01 00 00                jmp     0x17b <_JIT_ENTRY+0x17b>
// 73: 41 89 45 00                   movl    %eax, (%r13)
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 81: ff d0                         callq   *%rax
// 83: 49 8b 04 24                   movq    (%r12), %rax
// 87: 48 85 c0                      testq   %rax, %rax
// 8a: 7f b1                         jg      0x3d <_JIT_ENTRY+0x3d>
// 8c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008e:  R_X86_64_64  .rodata.str1.1
// 96: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000098:  R_X86_64_64  _Py_NegativeRefcount
// a0: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a5: 4c 89 e2                      movq    %r12, %rdx
// a8: ff d0                         callq   *%rax
// aa: 49 8b 04 24                   movq    (%r12), %rax
// ae: 85 c0                         testl   %eax, %eax
// b0: 78 16                         js      0xc8 <_JIT_ENTRY+0xc8>
// b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: ff d0                         callq   *%rax
// be: 49 ff 0c 24                   decq    (%r12)
// c2: 0f 84 db 00 00 00             je      0x1a3 <_JIT_ENTRY+0x1a3>
// c8: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ce:  R_X86_64_64  _JIT_OPARG
// d6: a8 01                         testb   $0x1, %al
// d8: 74 07                         je      0xe1 <_JIT_ENTRY+0xe1>
// da: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// e1: 0f b7 c8                      movzwl  %ax, %ecx
// e4: 83 e0 01                      andl    $0x1, %eax
// e7: 4d 8d 3c c7                   leaq    (%r15,%rax,8), %r15
// eb: 48 8b 03                      movq    (%rbx), %rax
// ee: 48 8b 7b 28                   movq    0x28(%rbx), %rdi
// f2: 48 8b 40 20                   movq    0x20(%rax), %rax
// f6: 4c 8b 64 c8 18                movq    0x18(%rax,%rcx,8), %r12
// fb: 48 85 ff                      testq   %rdi, %rdi
// fe: 74 3e                         je      0x13e <_JIT_ENTRY+0x13e>
// 100: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000102:  R_X86_64_64  PyObject_DelItem
// 10a: 4c 89 e6                      movq    %r12, %rsi
// 10d: ff d0                         callq   *%rax
// 10f: 85 c0                         testl   %eax, %eax
// 111: 74 72                         je      0x185 <_JIT_ENTRY+0x185>
// 113: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000115:  R_X86_64_64  PyExc_NameError
// 11d: 48 8b 30                      movq    (%rax), %rsi
// 120: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000122:  R_X86_64_64  .rodata.str1.1+0x54
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 134: 4c 89 f7                      movq    %r14, %rdi
// 137: 4c 89 e1                      movq    %r12, %rcx
// 13a: ff d0                         callq   *%rax
// 13c: eb 2c                         jmp     0x16a <_JIT_ENTRY+0x16a>
// 13e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000140:  R_X86_64_64  PyExc_SystemError
// 148: 48 8b 30                      movq    (%rax), %rsi
// 14b: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000014d:  R_X86_64_64  .rodata.str1.1+0x39
// 155: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000157:  R_X86_64_64  _PyErr_Format
// 15f: 4c 89 f7                      movq    %r14, %rdi
// 162: 4c 89 e1                      movq    %r12, %rcx
// 165: 31 c0                         xorl    %eax, %eax
// 167: 41 ff d0                      callq   *%r8
// 16a: 49 29 df                      subq    %rbx, %r15
// 16d: 49 83 c7 b8                   addq    $-0x48, %r15
// 171: 49 c1 ef 03                   shrq    $0x3, %r15
// 175: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 179: 31 c0                         xorl    %eax, %eax
// 17b: 5b                            popq    %rbx
// 17c: 41 5c                         popq    %r12
// 17e: 41 5d                         popq    %r13
// 180: 41 5e                         popq    %r14
// 182: 41 5f                         popq    %r15
// 184: c3                            retq
// 185: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000187:  R_X86_64_64  _JIT_CONTINUE
// 18f: 48 89 df                      movq    %rbx, %rdi
// 192: 4c 89 fe                      movq    %r15, %rsi
// 195: 4c 89 f2                      movq    %r14, %rdx
// 198: 5b                            popq    %rbx
// 199: 41 5c                         popq    %r12
// 19b: 41 5d                         popq    %r13
// 19d: 41 5e                         popq    %r14
// 19f: 41 5f                         popq    %r15
// 1a1: ff e0                         jmpq    *%rax
// 1a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a5:  R_X86_64_64  _Py_Dealloc
// 1ad: 4c 89 e7                      movq    %r12, %rdi
// 1b0: ff d0                         callq   *%rax
// 1b2: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _JIT_OPARG
// 1c0: a8 01                         testb   $0x1, %al
// 1c2: 0f 85 12 ff ff ff             jne     0xda <_JIT_ENTRY+0xda>
// 1c8: e9 14 ff ff ff                jmp     0xe1 <_JIT_ENTRY+0xe1>
// 1cd: 
static const unsigned char _LOAD_ATTR_SLOTplus_DELETE_NAME_code_body[462] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1d, 0x49, 0x89, 0xd6, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x3f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4f, 0x85, 0xc0, 0x79, 0x71, 0xe9, 0x82, 0x00, 0x00, 0x00, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x08, 0x01, 0x00, 0x00, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xdb, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x83, 0xe0, 0x01, 0x4d, 0x8d, 0x3c, 0xc7, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x7b, 0x28, 0x48, 0x8b, 0x40, 0x20, 0x4c, 0x8b, 0x64, 0xc8, 0x18, 0x48, 0x85, 0xff, 0x74, 0x3e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x72, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xe1, 0xff, 0xd0, 0xeb, 0x2c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xe1, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x12, 0xff, 0xff, 0xff, 0xe9, 0x14, 0xff, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_DELETE_NAME_code_holes[18] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_DelItem, 0x0},
    {0x115, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x122, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x54},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
    {0x140, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x157, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x187, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00no locals when deleting %R\x00name '%.200s' is not defined\x00"
// 71: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_DELETE_NAME_data_body[121] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x25, 0x52, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_DELETE_NAME_data_holes[1];

// _LOAD_ATTR_SLOTplus_DELETE_SUBSCR
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_DELETE_SUBSCR.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f7                      movq    %rsi, %r15
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 4d 8b 34 04                   movq    (%r12,%rax), %r14
// 26: 4d 85 f6                      testq   %r14, %r14
// 29: 74 1d                         je      0x48 <_JIT_ENTRY+0x48>
// 2b: 48 89 14 24                   movq    %rdx, (%rsp)
// 2f: 41 8b 06                      movl    (%r14), %eax
// 32: ff c0                         incl    %eax
// 34: 75 3f                         jne     0x75 <_JIT_ENTRY+0x75>
// 36: 49 8b 04 24                   movq    (%r12), %rax
// 3a: 48 85 c0                      testq   %rax, %rax
// 3d: 7e 4e                         jle     0x8d <_JIT_ENTRY+0x8d>
// 3f: 85 c0                         testl   %eax, %eax
// 41: 79 70                         jns     0xb3 <_JIT_ENTRY+0xb3>
// 43: e9 81 00 00 00                jmp     0xc9 <_JIT_ENTRY+0xc9>
// 48: 49 29 df                      subq    %rbx, %r15
// 4b: 49 83 c7 b8                   addq    $-0x48, %r15
// 4f: 49 c1 ef 03                   shrq    $0x3, %r15
// 53: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 57: 48 8b 03                      movq    (%rbx), %rax
// 5a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005c:  R_X86_64_64  _JIT_TARGET
// 64: 89 c9                         movl    %ecx, %ecx
// 66: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 6a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 70: e9 9d 01 00 00                jmp     0x212 <_JIT_ENTRY+0x212>
// 75: 41 89 06                      movl    %eax, (%r14)
// 78: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007a:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 82: ff d0                         callq   *%rax
// 84: 49 8b 04 24                   movq    (%r12), %rax
// 88: 48 85 c0                      testq   %rax, %rax
// 8b: 7f b2                         jg      0x3f <_JIT_ENTRY+0x3f>
// 8d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008f:  R_X86_64_64  .rodata.str1.1
// 97: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000099:  R_X86_64_64  _Py_NegativeRefcount
// a1: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a6: 4c 89 e2                      movq    %r12, %rdx
// a9: ff d0                         callq   *%rax
// ab: 49 8b 04 24                   movq    (%r12), %rax
// af: 85 c0                         testl   %eax, %eax
// b1: 78 16                         js      0xc9 <_JIT_ENTRY+0xc9>
// b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bd: ff d0                         callq   *%rax
// bf: 49 ff 0c 24                   decq    (%r12)
// c3: 0f 84 aa 00 00 00             je      0x173 <_JIT_ENTRY+0x173>
// c9: 4d 89 77 f8                   movq    %r14, -0x8(%r15)
// cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cf:  R_X86_64_64  _JIT_OPARG
// d7: a8 01                         testb   $0x1, %al
// d9: 74 07                         je      0xe2 <_JIT_ENTRY+0xe2>
// db: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// e2: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 00000000000000e4:  R_X86_64_64  _JIT_OPARG
// ec: 41 83 e6 01                   andl    $0x1, %r14d
// f0: 4f 8b 6c f7 f0                movq    -0x10(%r15,%r14,8), %r13
// f5: 4f 8b 64 f7 f8                movq    -0x8(%r15,%r14,8), %r12
// fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fc:  R_X86_64_64  PyObject_DelItem
// 104: 4c 89 ef                      movq    %r13, %rdi
// 107: 4c 89 e6                      movq    %r12, %rsi
// 10a: ff d0                         callq   *%rax
// 10c: 89 c5                         movl    %eax, %ebp
// 10e: 49 8b 45 00                   movq    (%r13), %rax
// 112: 48 85 c0                      testq   %rax, %rax
// 115: 7e 06                         jle     0x11d <_JIT_ENTRY+0x11d>
// 117: 85 c0                         testl   %eax, %eax
// 119: 79 28                         jns     0x143 <_JIT_ENTRY+0x143>
// 11b: eb 38                         jmp     0x155 <_JIT_ENTRY+0x155>
// 11d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011f:  R_X86_64_64  .rodata.str1.1
// 127: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000129:  R_X86_64_64  _Py_NegativeRefcount
// 131: be 70 02 00 00                movl    $0x270, %esi            # imm = 0x270
// 136: 4c 89 ea                      movq    %r13, %rdx
// 139: ff d0                         callq   *%rax
// 13b: 49 8b 45 00                   movq    (%r13), %rax
// 13f: 85 c0                         testl   %eax, %eax
// 141: 78 12                         js      0x155 <_JIT_ENTRY+0x155>
// 143: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000145:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 14d: ff d0                         callq   *%rax
// 14f: 49 ff 4d 00                   decq    (%r13)
// 153: 74 48                         je      0x19d <_JIT_ENTRY+0x19d>
// 155: 49 8b 04 24                   movq    (%r12), %rax
// 159: 48 85 c0                      testq   %rax, %rax
// 15c: 7e 57                         jle     0x1b5 <_JIT_ENTRY+0x1b5>
// 15e: 4f 8d 2c f7                   leaq    (%r15,%r14,8), %r13
// 162: 4f 8d 34 f7                   leaq    (%r15,%r14,8), %r14
// 166: 49 83 c6 f0                   addq    $-0x10, %r14
// 16a: 85 c0                         testl   %eax, %eax
// 16c: 79 79                         jns     0x1e7 <_JIT_ENTRY+0x1e7>
// 16e: e9 86 00 00 00                jmp     0x1f9 <_JIT_ENTRY+0x1f9>
// 173: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000175:  R_X86_64_64  _Py_Dealloc
// 17d: 4c 89 e7                      movq    %r12, %rdi
// 180: ff d0                         callq   *%rax
// 182: 4d 89 77 f8                   movq    %r14, -0x8(%r15)
// 186: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000188:  R_X86_64_64  _JIT_OPARG
// 190: a8 01                         testb   $0x1, %al
// 192: 0f 85 43 ff ff ff             jne     0xdb <_JIT_ENTRY+0xdb>
// 198: e9 45 ff ff ff                jmp     0xe2 <_JIT_ENTRY+0xe2>
// 19d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019f:  R_X86_64_64  _Py_Dealloc
// 1a7: 4c 89 ef                      movq    %r13, %rdi
// 1aa: ff d0                         callq   *%rax
// 1ac: 49 8b 04 24                   movq    (%r12), %rax
// 1b0: 48 85 c0                      testq   %rax, %rax
// 1b3: 7f a9                         jg      0x15e <_JIT_ENTRY+0x15e>
// 1b5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b7:  R_X86_64_64  .rodata.str1.1
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  _Py_NegativeRefcount
// 1c9: be 71 02 00 00                movl    $0x271, %esi            # imm = 0x271
// 1ce: 4c 89 e2                      movq    %r12, %rdx
// 1d1: ff d0                         callq   *%rax
// 1d3: 49 8b 04 24                   movq    (%r12), %rax
// 1d7: 4f 8d 2c f7                   leaq    (%r15,%r14,8), %r13
// 1db: 4f 8d 34 f7                   leaq    (%r15,%r14,8), %r14
// 1df: 49 83 c6 f0                   addq    $-0x10, %r14
// 1e3: 85 c0                         testl   %eax, %eax
// 1e5: 78 12                         js      0x1f9 <_JIT_ENTRY+0x1f9>
// 1e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f1: ff d0                         callq   *%rax
// 1f3: 49 ff 0c 24                   decq    (%r12)
// 1f7: 74 28                         je      0x221 <_JIT_ENTRY+0x221>
// 1f9: 85 ed                         testl   %ebp, %ebp
// 1fb: 4d 0f 44 ee                   cmoveq  %r14, %r13
// 1ff: 74 37                         je      0x238 <_JIT_ENTRY+0x238>
// 201: 49 29 dd                      subq    %rbx, %r13
// 204: 49 83 c5 a8                   addq    $-0x58, %r13
// 208: 49 c1 ed 03                   shrq    $0x3, %r13
// 20c: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 210: 31 c0                         xorl    %eax, %eax
// 212: 48 83 c4 08                   addq    $0x8, %rsp
// 216: 5b                            popq    %rbx
// 217: 41 5c                         popq    %r12
// 219: 41 5d                         popq    %r13
// 21b: 41 5e                         popq    %r14
// 21d: 41 5f                         popq    %r15
// 21f: 5d                            popq    %rbp
// 220: c3                            retq
// 221: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000223:  R_X86_64_64  _Py_Dealloc
// 22b: 4c 89 e7                      movq    %r12, %rdi
// 22e: ff d0                         callq   *%rax
// 230: 85 ed                         testl   %ebp, %ebp
// 232: 4d 0f 44 ee                   cmoveq  %r14, %r13
// 236: 75 c9                         jne     0x201 <_JIT_ENTRY+0x201>
// 238: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023a:  R_X86_64_64  _JIT_CONTINUE
// 242: 48 89 df                      movq    %rbx, %rdi
// 245: 4c 89 ee                      movq    %r13, %rsi
// 248: 48 8b 14 24                   movq    (%rsp), %rdx
// 24c: 48 83 c4 08                   addq    $0x8, %rsp
// 250: 5b                            popq    %rbx
// 251: 41 5c                         popq    %r12
// 253: 41 5d                         popq    %r13
// 255: 41 5e                         popq    %r14
// 257: 41 5f                         popq    %r15
// 259: 5d                            popq    %rbp
// 25a: ff e0                         jmpq    *%rax
// 25c: 
static const unsigned char _LOAD_ATTR_SLOTplus_DELETE_SUBSCR_code_body[605] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x34, 0x04, 0x4d, 0x85, 0xf6, 0x74, 0x1d, 0x48, 0x89, 0x14, 0x24, 0x41, 0x8b, 0x06, 0xff, 0xc0, 0x75, 0x3f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4e, 0x85, 0xc0, 0x79, 0x70, 0xe9, 0x81, 0x00, 0x00, 0x00, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x9d, 0x01, 0x00, 0x00, 0x41, 0x89, 0x06, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xaa, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x77, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x83, 0xe6, 0x01, 0x4f, 0x8b, 0x6c, 0xf7, 0xf0, 0x4f, 0x8b, 0x64, 0xf7, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x70, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x48, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x4f, 0x8d, 0x2c, 0xf7, 0x4f, 0x8d, 0x34, 0xf7, 0x49, 0x83, 0xc6, 0xf0, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x86, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x77, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x43, 0xff, 0xff, 0xff, 0xe9, 0x45, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xa9, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x71, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4f, 0x8d, 0x2c, 0xf7, 0x4f, 0x8d, 0x34, 0xf7, 0x49, 0x83, 0xc6, 0xf0, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x28, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xee, 0x74, 0x37, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xa8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xee, 0x75, 0xc9, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_ATTR_SLOTplus_DELETE_SUBSCR_code_holes[21] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x99, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xe4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_DelItem, 0x0},
    {0x11f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x129, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x175, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x19f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x223, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_DELETE_SUBSCR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_DELETE_SUBSCR_data_holes[1];

// _LOAD_ATTR_SLOTplus_DICT_MERGE
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_DICT_MERGE.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 26: 4d 85 ed                      testq   %r13, %r13
// 29: 74 1d                         je      0x48 <_JIT_ENTRY+0x48>
// 2b: 49 89 d7                      movq    %rdx, %r15
// 2e: 41 8b 45 00                   movl    (%r13), %eax
// 32: ff c0                         incl    %eax
// 34: 75 3f                         jne     0x75 <_JIT_ENTRY+0x75>
// 36: 49 8b 04 24                   movq    (%r12), %rax
// 3a: 48 85 c0                      testq   %rax, %rax
// 3d: 7e 4f                         jle     0x8e <_JIT_ENTRY+0x8e>
// 3f: 85 c0                         testl   %eax, %eax
// 41: 79 71                         jns     0xb4 <_JIT_ENTRY+0xb4>
// 43: e9 8d 00 00 00                jmp     0xd5 <_JIT_ENTRY+0xd5>
// 48: 49 29 de                      subq    %rbx, %r14
// 4b: 49 83 c6 b8                   addq    $-0x48, %r14
// 4f: 49 c1 ee 03                   shrq    $0x3, %r14
// 53: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 57: 48 8b 03                      movq    (%rbx), %rax
// 5a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005c:  R_X86_64_64  _JIT_TARGET
// 64: 89 c9                         movl    %ecx, %ecx
// 66: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 6a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 70: e9 dd 01 00 00                jmp     0x252 <_JIT_ENTRY+0x252>
// 75: 41 89 45 00                   movl    %eax, (%r13)
// 79: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007b:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 83: ff d0                         callq   *%rax
// 85: 49 8b 04 24                   movq    (%r12), %rax
// 89: 48 85 c0                      testq   %rax, %rax
// 8c: 7f b1                         jg      0x3f <_JIT_ENTRY+0x3f>
// 8e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000090:  R_X86_64_64  .rodata.str1.1
// 98: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009a:  R_X86_64_64  _Py_NegativeRefcount
// a2: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a7: 4c 89 e2                      movq    %r12, %rdx
// aa: ff d0                         callq   *%rax
// ac: 49 8b 04 24                   movq    (%r12), %rax
// b0: 85 c0                         testl   %eax, %eax
// b2: 78 21                         js      0xd5 <_JIT_ENTRY+0xd5>
// b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// be: ff d0                         callq   *%rax
// c0: 49 ff 0c 24                   decq    (%r12)
// c4: 75 0f                         jne     0xd5 <_JIT_ENTRY+0xd5>
// c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c8:  R_X86_64_64  _Py_Dealloc
// d0: 4c 89 e7                      movq    %r12, %rdi
// d3: ff d0                         callq   *%rax
// d5: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000db:  R_X86_64_64  _JIT_OPARG
// e3: a8 01                         testb   $0x1, %al
// e5: 74 07                         je      0xee <_JIT_ENTRY+0xee>
// e7: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// ee: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000000f0:  R_X86_64_64  _JIT_OPARG
// f8: 0f b7 c5                      movzwl  %bp, %eax
// fb: 83 e5 01                      andl    $0x1, %ebp
// fe: 4d 8b 64 ee f8                movq    -0x8(%r14,%rbp,8), %r12
// 103: b9 fc ff ff ff                movl    $0xfffffffc, %ecx       # imm = 0xFFFFFFFC
// 108: 29 c1                         subl    %eax, %ecx
// 10a: f7 d0                         notl    %eax
// 10c: 48 98                         cltq
// 10e: 48 01 e8                      addq    %rbp, %rax
// 111: 49 8b 3c c6                   movq    (%r14,%rax,8), %rdi
// 115: 48 63 c1                      movslq  %ecx, %rax
// 118: 48 01 e8                      addq    %rbp, %rax
// 11b: 4d 8b 2c c6                   movq    (%r14,%rax,8), %r13
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _PyDict_MergeEx
// 129: 4c 89 e6                      movq    %r12, %rsi
// 12c: ba 02 00 00 00                movl    $0x2, %edx
// 131: ff d0                         callq   *%rax
// 133: 85 c0                         testl   %eax, %eax
// 135: 78 1a                         js      0x151 <_JIT_ENTRY+0x151>
// 137: 49 8b 04 24                   movq    (%r12), %rax
// 13b: 48 85 c0                      testq   %rax, %rax
// 13e: 7e 44                         jle     0x184 <_JIT_ENTRY+0x184>
// 140: 4d 8d 34 ee                   leaq    (%r14,%rbp,8), %r14
// 144: 49 83 c6 f8                   addq    $-0x8, %r14
// 148: 85 c0                         testl   %eax, %eax
// 14a: 79 66                         jns     0x1b2 <_JIT_ENTRY+0x1b2>
// 14c: e9 82 00 00 00                jmp     0x1d3 <_JIT_ENTRY+0x1d3>
// 151: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000153:  R_X86_64_64  _PyEval_FormatKwargsError
// 15b: 4c 89 ff                      movq    %r15, %rdi
// 15e: 4c 89 ee                      movq    %r13, %rsi
// 161: 4c 89 e2                      movq    %r12, %rdx
// 164: ff d0                         callq   *%rax
// 166: 49 8b 04 24                   movq    (%r12), %rax
// 16a: 48 85 c0                      testq   %rax, %rax
// 16d: 0f 8e 83 00 00 00             jle     0x1f6 <_JIT_ENTRY+0x1f6>
// 173: 4d 8d 34 ee                   leaq    (%r14,%rbp,8), %r14
// 177: 85 c0                         testl   %eax, %eax
// 179: 0f 89 a1 00 00 00             jns     0x220 <_JIT_ENTRY+0x220>
// 17f: e9 bd 00 00 00                jmp     0x241 <_JIT_ENTRY+0x241>
// 184: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000186:  R_X86_64_64  .rodata.str1.1
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_NegativeRefcount
// 198: be d6 05 00 00                movl    $0x5d6, %esi            # imm = 0x5D6
// 19d: 4c 89 e2                      movq    %r12, %rdx
// 1a0: ff d0                         callq   *%rax
// 1a2: 49 8b 04 24                   movq    (%r12), %rax
// 1a6: 4d 8d 34 ee                   leaq    (%r14,%rbp,8), %r14
// 1aa: 49 83 c6 f8                   addq    $-0x8, %r14
// 1ae: 85 c0                         testl   %eax, %eax
// 1b0: 78 21                         js      0x1d3 <_JIT_ENTRY+0x1d3>
// 1b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1bc: ff d0                         callq   *%rax
// 1be: 49 ff 0c 24                   decq    (%r12)
// 1c2: 75 0f                         jne     0x1d3 <_JIT_ENTRY+0x1d3>
// 1c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c6:  R_X86_64_64  _Py_Dealloc
// 1ce: 4c 89 e7                      movq    %r12, %rdi
// 1d1: ff d0                         callq   *%rax
// 1d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d5:  R_X86_64_64  _JIT_CONTINUE
// 1dd: 48 89 df                      movq    %rbx, %rdi
// 1e0: 4c 89 f6                      movq    %r14, %rsi
// 1e3: 4c 89 fa                      movq    %r15, %rdx
// 1e6: 48 83 c4 08                   addq    $0x8, %rsp
// 1ea: 5b                            popq    %rbx
// 1eb: 41 5c                         popq    %r12
// 1ed: 41 5d                         popq    %r13
// 1ef: 41 5e                         popq    %r14
// 1f1: 41 5f                         popq    %r15
// 1f3: 5d                            popq    %rbp
// 1f4: ff e0                         jmpq    *%rax
// 1f6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f8:  R_X86_64_64  .rodata.str1.1
// 200: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000202:  R_X86_64_64  _Py_NegativeRefcount
// 20a: be d3 05 00 00                movl    $0x5d3, %esi            # imm = 0x5D3
// 20f: 4c 89 e2                      movq    %r12, %rdx
// 212: ff d0                         callq   *%rax
// 214: 49 8b 04 24                   movq    (%r12), %rax
// 218: 4d 8d 34 ee                   leaq    (%r14,%rbp,8), %r14
// 21c: 85 c0                         testl   %eax, %eax
// 21e: 78 21                         js      0x241 <_JIT_ENTRY+0x241>
// 220: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000222:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 22a: ff d0                         callq   *%rax
// 22c: 49 ff 0c 24                   decq    (%r12)
// 230: 75 0f                         jne     0x241 <_JIT_ENTRY+0x241>
// 232: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000234:  R_X86_64_64  _Py_Dealloc
// 23c: 4c 89 e7                      movq    %r12, %rdi
// 23f: ff d0                         callq   *%rax
// 241: 49 29 de                      subq    %rbx, %r14
// 244: 49 83 c6 b0                   addq    $-0x50, %r14
// 248: 49 c1 ee 03                   shrq    $0x3, %r14
// 24c: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 250: 31 c0                         xorl    %eax, %eax
// 252: 48 83 c4 08                   addq    $0x8, %rsp
// 256: 5b                            popq    %rbx
// 257: 41 5c                         popq    %r12
// 259: 41 5d                         popq    %r13
// 25b: 41 5e                         popq    %r14
// 25d: 41 5f                         popq    %r15
// 25f: 5d                            popq    %rbp
// 260: c3                            retq
// 261: 
static const unsigned char _LOAD_ATTR_SLOTplus_DICT_MERGE_code_body[610] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1d, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x3f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4f, 0x85, 0xc0, 0x79, 0x71, 0xe9, 0x8d, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xdd, 0x01, 0x00, 0x00, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc5, 0x83, 0xe5, 0x01, 0x4d, 0x8b, 0x64, 0xee, 0xf8, 0xb9, 0xfc, 0xff, 0xff, 0xff, 0x29, 0xc1, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x01, 0xe8, 0x49, 0x8b, 0x3c, 0xc6, 0x48, 0x63, 0xc1, 0x48, 0x01, 0xe8, 0x4d, 0x8b, 0x2c, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xba, 0x02, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x1a, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x44, 0x4d, 0x8d, 0x34, 0xee, 0x49, 0x83, 0xc6, 0xf8, 0x85, 0xc0, 0x79, 0x66, 0xe9, 0x82, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x83, 0x00, 0x00, 0x00, 0x4d, 0x8d, 0x34, 0xee, 0x85, 0xc0, 0x0f, 0x89, 0xa1, 0x00, 0x00, 0x00, 0xe9, 0xbd, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd6, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x34, 0xee, 0x49, 0x83, 0xc6, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd3, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x34, 0xee, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb0, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _LOAD_ATTR_SLOTplus_DICT_MERGE_code_holes[21] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x90, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xc8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xdb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_MergeEx, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatKwargsError, 0x0},
    {0x186, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1f8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x222, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x234, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_DICT_MERGE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_DICT_MERGE_data_holes[1];

// _LOAD_ATTR_SLOTplus_DICT_UPDATE
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_DICT_UPDATE.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f6                      movq    %rsi, %r14
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 74 1d                         je      0x46 <_JIT_ENTRY+0x46>
// 29: 49 89 d7                      movq    %rdx, %r15
// 2c: 41 8b 45 00                   movl    (%r13), %eax
// 30: ff c0                         incl    %eax
// 32: 75 3f                         jne     0x73 <_JIT_ENTRY+0x73>
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 4f                         jle     0x8c <_JIT_ENTRY+0x8c>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 71                         jns     0xb2 <_JIT_ENTRY+0xb2>
// 41: e9 8d 00 00 00                jmp     0xd3 <_JIT_ENTRY+0xd3>
// 46: 49 29 de                      subq    %rbx, %r14
// 49: 49 83 c6 b8                   addq    $-0x48, %r14
// 4d: 49 c1 ee 03                   shrq    $0x3, %r14
// 51: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 55: 48 8b 03                      movq    (%rbx), %rax
// 58: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005a:  R_X86_64_64  _JIT_TARGET
// 62: 89 c9                         movl    %ecx, %ecx
// 64: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 68: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 6e: e9 ff 01 00 00                jmp     0x272 <_JIT_ENTRY+0x272>
// 73: 41 89 45 00                   movl    %eax, (%r13)
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 81: ff d0                         callq   *%rax
// 83: 49 8b 04 24                   movq    (%r12), %rax
// 87: 48 85 c0                      testq   %rax, %rax
// 8a: 7f b1                         jg      0x3d <_JIT_ENTRY+0x3d>
// 8c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008e:  R_X86_64_64  .rodata.str1.1
// 96: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000098:  R_X86_64_64  _Py_NegativeRefcount
// a0: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a5: 4c 89 e2                      movq    %r12, %rdx
// a8: ff d0                         callq   *%rax
// aa: 49 8b 04 24                   movq    (%r12), %rax
// ae: 85 c0                         testl   %eax, %eax
// b0: 78 21                         js      0xd3 <_JIT_ENTRY+0xd3>
// b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: ff d0                         callq   *%rax
// be: 49 ff 0c 24                   decq    (%r12)
// c2: 75 0f                         jne     0xd3 <_JIT_ENTRY+0xd3>
// c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c6:  R_X86_64_64  _Py_Dealloc
// ce: 4c 89 e7                      movq    %r12, %rdi
// d1: ff d0                         callq   *%rax
// d3: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d9:  R_X86_64_64  _JIT_OPARG
// e1: a8 01                         testb   $0x1, %al
// e3: 74 07                         je      0xec <_JIT_ENTRY+0xec>
// e5: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// ec: 41 89 c5                      movl    %eax, %r13d
// ef: 41 83 e5 01                   andl    $0x1, %r13d
// f3: f7 d0                         notl    %eax
// f5: 4f 8b 64 ee f8                movq    -0x8(%r14,%r13,8), %r12
// fa: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// ff: 48 98                         cltq
// 101: 4c 01 e8                      addq    %r13, %rax
// 104: 49 8b 3c c6                   movq    (%r14,%rax,8), %rdi
// 108: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010a:  R_X86_64_64  PyDict_Update
// 112: 4c 89 e6                      movq    %r12, %rsi
// 115: ff d0                         callq   *%rax
// 117: 85 c0                         testl   %eax, %eax
// 119: 78 22                         js      0x13d <_JIT_ENTRY+0x13d>
// 11b: 49 8b 04 24                   movq    (%r12), %rax
// 11f: 48 85 c0                      testq   %rax, %rax
// 122: 0f 8e 81 00 00 00             jle     0x1a9 <_JIT_ENTRY+0x1a9>
// 128: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 12c: 49 83 c6 f8                   addq    $-0x8, %r14
// 130: 85 c0                         testl   %eax, %eax
// 132: 0f 89 9f 00 00 00             jns     0x1d7 <_JIT_ENTRY+0x1d7>
// 138: e9 bb 00 00 00                jmp     0x1f8 <_JIT_ENTRY+0x1f8>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  PyExc_AttributeError
// 147: 48 8b 30                      movq    (%rax), %rsi
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _PyErr_ExceptionMatches
// 154: 4c 89 ff                      movq    %r15, %rdi
// 157: ff d0                         callq   *%rax
// 159: 85 c0                         testl   %eax, %eax
// 15b: 74 32                         je      0x18f <_JIT_ENTRY+0x18f>
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  PyExc_TypeError
// 167: 48 8b 30                      movq    (%rax), %rsi
// 16a: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 16f: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 173: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000175:  R_X86_64_64  .rodata.str1.1+0x39
// 17d: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000017f:  R_X86_64_64  _PyErr_Format
// 187: 4c 89 ff                      movq    %r15, %rdi
// 18a: 31 c0                         xorl    %eax, %eax
// 18c: 41 ff d0                      callq   *%r8
// 18f: 49 8b 04 24                   movq    (%r12), %rax
// 193: 48 85 c0                      testq   %rax, %rax
// 196: 7e 7e                         jle     0x216 <_JIT_ENTRY+0x216>
// 198: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 19c: 85 c0                         testl   %eax, %eax
// 19e: 0f 89 9c 00 00 00             jns     0x240 <_JIT_ENTRY+0x240>
// 1a4: e9 b8 00 00 00                jmp     0x261 <_JIT_ENTRY+0x261>
// 1a9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ab:  R_X86_64_64  .rodata.str1.1
// 1b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b5:  R_X86_64_64  _Py_NegativeRefcount
// 1bd: be c4 05 00 00                movl    $0x5c4, %esi            # imm = 0x5C4
// 1c2: 4c 89 e2                      movq    %r12, %rdx
// 1c5: ff d0                         callq   *%rax
// 1c7: 49 8b 04 24                   movq    (%r12), %rax
// 1cb: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 1cf: 49 83 c6 f8                   addq    $-0x8, %r14
// 1d3: 85 c0                         testl   %eax, %eax
// 1d5: 78 21                         js      0x1f8 <_JIT_ENTRY+0x1f8>
// 1d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e1: ff d0                         callq   *%rax
// 1e3: 49 ff 0c 24                   decq    (%r12)
// 1e7: 75 0f                         jne     0x1f8 <_JIT_ENTRY+0x1f8>
// 1e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001eb:  R_X86_64_64  _Py_Dealloc
// 1f3: 4c 89 e7                      movq    %r12, %rdi
// 1f6: ff d0                         callq   *%rax
// 1f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fa:  R_X86_64_64  _JIT_CONTINUE
// 202: 48 89 df                      movq    %rbx, %rdi
// 205: 4c 89 f6                      movq    %r14, %rsi
// 208: 4c 89 fa                      movq    %r15, %rdx
// 20b: 5b                            popq    %rbx
// 20c: 41 5c                         popq    %r12
// 20e: 41 5d                         popq    %r13
// 210: 41 5e                         popq    %r14
// 212: 41 5f                         popq    %r15
// 214: ff e0                         jmpq    *%rax
// 216: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000218:  R_X86_64_64  .rodata.str1.1
// 220: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000222:  R_X86_64_64  _Py_NegativeRefcount
// 22a: be c1 05 00 00                movl    $0x5c1, %esi            # imm = 0x5C1
// 22f: 4c 89 e2                      movq    %r12, %rdx
// 232: ff d0                         callq   *%rax
// 234: 49 8b 04 24                   movq    (%r12), %rax
// 238: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 23c: 85 c0                         testl   %eax, %eax
// 23e: 78 21                         js      0x261 <_JIT_ENTRY+0x261>
// 240: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000242:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 24a: ff d0                         callq   *%rax
// 24c: 49 ff 0c 24                   decq    (%r12)
// 250: 75 0f                         jne     0x261 <_JIT_ENTRY+0x261>
// 252: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000254:  R_X86_64_64  _Py_Dealloc
// 25c: 4c 89 e7                      movq    %r12, %rdi
// 25f: ff d0                         callq   *%rax
// 261: 49 29 de                      subq    %rbx, %r14
// 264: 49 83 c6 b0                   addq    $-0x50, %r14
// 268: 49 c1 ee 03                   shrq    $0x3, %r14
// 26c: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 270: 31 c0                         xorl    %eax, %eax
// 272: 5b                            popq    %rbx
// 273: 41 5c                         popq    %r12
// 275: 41 5d                         popq    %r13
// 277: 41 5e                         popq    %r14
// 279: 41 5f                         popq    %r15
// 27b: c3                            retq
// 27c: 
static const unsigned char _LOAD_ATTR_SLOTplus_DICT_UPDATE_code_body[637] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1d, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x3f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4f, 0x85, 0xc0, 0x79, 0x71, 0xe9, 0x8d, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xff, 0x01, 0x00, 0x00, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x41, 0x89, 0xc5, 0x41, 0x83, 0xe5, 0x01, 0xf7, 0xd0, 0x4f, 0x8b, 0x64, 0xee, 0xf8, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4c, 0x01, 0xe8, 0x49, 0x8b, 0x3c, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x22, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x81, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x83, 0xc6, 0xf8, 0x85, 0xc0, 0x0f, 0x89, 0x9f, 0x00, 0x00, 0x00, 0xe9, 0xbb, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x32, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7e, 0x4f, 0x8d, 0x34, 0xee, 0x85, 0xc0, 0x0f, 0x89, 0x9c, 0x00, 0x00, 0x00, 0xe9, 0xb8, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x83, 0xc6, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4f, 0x8d, 0x34, 0xee, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb0, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _LOAD_ATTR_SLOTplus_DICT_UPDATE_code_holes[24] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xc6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Update, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_AttributeError, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_ExceptionMatches, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x175, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x17f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1eb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1fa, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x222, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x242, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x254, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'%.200s' object is not a mapping\x00"
// 5a: 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_DICT_UPDATE_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x20, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_DICT_UPDATE_data_holes[1];

// _LOAD_ATTR_SLOTplus_END_SEND
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_END_SEND.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 26: 4d 85 ed                      testq   %r13, %r13
// 29: 74 2b                         je      0x56 <_JIT_ENTRY+0x56>
// 2b: 49 89 d7                      movq    %rdx, %r15
// 2e: 41 8b 45 00                   movl    (%r13), %eax
// 32: ff c0                         incl    %eax
// 34: 75 57                         jne     0x8d <_JIT_ENTRY+0x8d>
// 36: 49 8b 04 24                   movq    (%r12), %rax
// 3a: 48 85 c0                      testq   %rax, %rax
// 3d: 7e 67                         jle     0xa6 <_JIT_ENTRY+0xa6>
// 3f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000041:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 49: 85 c0                         testl   %eax, %eax
// 4b: 0f 89 85 00 00 00             jns     0xd6 <_JIT_ENTRY+0xd6>
// 51: e9 8c 00 00 00                jmp     0xe2 <_JIT_ENTRY+0xe2>
// 56: 49 29 de                      subq    %rbx, %r14
// 59: 49 83 c6 b8                   addq    $-0x48, %r14
// 5d: 49 c1 ee 03                   shrq    $0x3, %r14
// 61: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 65: 48 8b 03                      movq    (%rbx), %rax
// 68: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000006a:  R_X86_64_64  _JIT_TARGET
// 72: 89 c9                         movl    %ecx, %ecx
// 74: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 78: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 7e: 48 83 c4 08                   addq    $0x8, %rsp
// 82: 5b                            popq    %rbx
// 83: 41 5c                         popq    %r12
// 85: 41 5d                         popq    %r13
// 87: 41 5e                         popq    %r14
// 89: 41 5f                         popq    %r15
// 8b: 5d                            popq    %rbp
// 8c: c3                            retq
// 8d: 41 89 45 00                   movl    %eax, (%r13)
// 91: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000093:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 9b: ff d0                         callq   *%rax
// 9d: 49 8b 04 24                   movq    (%r12), %rax
// a1: 48 85 c0                      testq   %rax, %rax
// a4: 7f 99                         jg      0x3f <_JIT_ENTRY+0x3f>
// a6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a8:  R_X86_64_64  .rodata.str1.1
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  _Py_NegativeRefcount
// ba: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// bf: 4c 89 e2                      movq    %r12, %rdx
// c2: ff d0                         callq   *%rax
// c4: 49 8b 04 24                   movq    (%r12), %rax
// c8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ca:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d2: 85 c0                         testl   %eax, %eax
// d4: 78 0c                         js      0xe2 <_JIT_ENTRY+0xe2>
// d6: ff d1                         callq   *%rcx
// d8: 49 ff 0c 24                   decq    (%r12)
// dc: 0f 84 cc 00 00 00             je      0x1ae <_JIT_ENTRY+0x1ae>
// e2: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e8:  R_X86_64_64  _JIT_OPARG
// f0: a8 01                         testb   $0x1, %al
// f2: 74 07                         je      0xfb <_JIT_ENTRY+0xfb>
// f4: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// fb: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000000fd:  R_X86_64_64  _JIT_OPARG
// 105: 41 83 e5 01                   andl    $0x1, %r13d
// 109: 4f 8b 64 ee f0                movq    -0x10(%r14,%r13,8), %r12
// 10e: 4b 8b 6c ee f8                movq    -0x8(%r14,%r13,8), %rbp
// 113: 49 8b 04 24                   movq    (%r12), %rax
// 117: 48 85 c0                      testq   %rax, %rax
// 11a: 7e 0e                         jle     0x12a <_JIT_ENTRY+0x12a>
// 11c: 4f 8d 2c ee                   leaq    (%r14,%r13,8), %r13
// 120: 49 83 c5 f8                   addq    $-0x8, %r13
// 124: 85 c0                         testl   %eax, %eax
// 126: 79 30                         jns     0x158 <_JIT_ENTRY+0x158>
// 128: eb 4f                         jmp     0x179 <_JIT_ENTRY+0x179>
// 12a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000012c:  R_X86_64_64  .rodata.str1.1
// 134: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000136:  R_X86_64_64  _Py_NegativeRefcount
// 13e: be 66 00 00 00                movl    $0x66, %esi
// 143: 4c 89 e2                      movq    %r12, %rdx
// 146: ff d0                         callq   *%rax
// 148: 49 8b 04 24                   movq    (%r12), %rax
// 14c: 4f 8d 2c ee                   leaq    (%r14,%r13,8), %r13
// 150: 49 83 c5 f8                   addq    $-0x8, %r13
// 154: 85 c0                         testl   %eax, %eax
// 156: 78 21                         js      0x179 <_JIT_ENTRY+0x179>
// 158: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 162: ff d0                         callq   *%rax
// 164: 49 ff 0c 24                   decq    (%r12)
// 168: 75 0f                         jne     0x179 <_JIT_ENTRY+0x179>
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_Dealloc
// 174: 4c 89 e7                      movq    %r12, %rdi
// 177: ff d0                         callq   *%rax
// 179: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017b:  R_X86_64_64  _JIT_OPARG
// 183: 83 e0 01                      andl    $0x1, %eax
// 186: 49 89 6c c6 f0                movq    %rbp, -0x10(%r14,%rax,8)
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _JIT_CONTINUE
// 195: 48 89 df                      movq    %rbx, %rdi
// 198: 4c 89 ee                      movq    %r13, %rsi
// 19b: 4c 89 fa                      movq    %r15, %rdx
// 19e: 48 83 c4 08                   addq    $0x8, %rsp
// 1a2: 5b                            popq    %rbx
// 1a3: 41 5c                         popq    %r12
// 1a5: 41 5d                         popq    %r13
// 1a7: 41 5e                         popq    %r14
// 1a9: 41 5f                         popq    %r15
// 1ab: 5d                            popq    %rbp
// 1ac: ff e0                         jmpq    *%rax
// 1ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b0:  R_X86_64_64  _Py_Dealloc
// 1b8: 4c 89 e7                      movq    %r12, %rdi
// 1bb: ff d0                         callq   *%rax
// 1bd: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _JIT_OPARG
// 1cb: a8 01                         testb   $0x1, %al
// 1cd: 0f 85 21 ff ff ff             jne     0xf4 <_JIT_ENTRY+0xf4>
// 1d3: e9 23 ff ff ff                jmp     0xfb <_JIT_ENTRY+0xfb>
// 1d8: 
static const unsigned char _LOAD_ATTR_SLOTplus_END_SEND_code_body[473] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x2b, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x57, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x67, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x85, 0x00, 0x00, 0x00, 0xe9, 0x8c, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x99, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x0c, 0xff, 0xd1, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xcc, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x83, 0xe5, 0x01, 0x4f, 0x8b, 0x64, 0xee, 0xf0, 0x4b, 0x8b, 0x6c, 0xee, 0xf8, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x0e, 0x4f, 0x8d, 0x2c, 0xee, 0x49, 0x83, 0xc5, 0xf8, 0x85, 0xc0, 0x79, 0x30, 0xeb, 0x4f, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4f, 0x8d, 0x2c, 0xee, 0x49, 0x83, 0xc5, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x89, 0x6c, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x21, 0xff, 0xff, 0xff, 0xe9, 0x23, 0xff, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_END_SEND_code_holes[18] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x41, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x93, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0xa8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe8, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xfd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x136, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_END_SEND_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_END_SEND_data_holes[1];

// _LOAD_ATTR_SLOTplus_EXIT_INIT_CHECK
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_EXIT_INIT_CHECK.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f6                      movq    %rsi, %r14
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 74 1d                         je      0x46 <_JIT_ENTRY+0x46>
// 29: 49 89 d7                      movq    %rdx, %r15
// 2c: 41 8b 45 00                   movl    (%r13), %eax
// 30: ff c0                         incl    %eax
// 32: 75 40                         jne     0x74 <_JIT_ENTRY+0x74>
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 50                         jle     0x8d <_JIT_ENTRY+0x8d>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 72                         jns     0xb3 <_JIT_ENTRY+0xb3>
// 41: e9 83 00 00 00                jmp     0xc9 <_JIT_ENTRY+0xc9>
// 46: 49 29 de                      subq    %rbx, %r14
// 49: 49 83 c6 b8                   addq    $-0x48, %r14
// 4d: 49 c1 ee 03                   shrq    $0x3, %r14
// 51: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 55: 48 8b 03                      movq    (%rbx), %rax
// 58: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005a:  R_X86_64_64  _JIT_TARGET
// 62: 89 c9                         movl    %ecx, %ecx
// 64: 4c 8d 34 48                   leaq    (%rax,%rcx,2), %r14
// 68: 49 81 c6 c8 00 00 00          addq    $0xc8, %r14
// 6f: e9 df 00 00 00                jmp     0x153 <_JIT_ENTRY+0x153>
// 74: 41 89 45 00                   movl    %eax, (%r13)
// 78: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007a:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 82: ff d0                         callq   *%rax
// 84: 49 8b 04 24                   movq    (%r12), %rax
// 88: 48 85 c0                      testq   %rax, %rax
// 8b: 7f b0                         jg      0x3d <_JIT_ENTRY+0x3d>
// 8d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008f:  R_X86_64_64  .rodata.str1.1
// 97: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000099:  R_X86_64_64  _Py_NegativeRefcount
// a1: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a6: 4c 89 e2                      movq    %r12, %rdx
// a9: ff d0                         callq   *%rax
// ab: 49 8b 04 24                   movq    (%r12), %rax
// af: 85 c0                         testl   %eax, %eax
// b1: 78 16                         js      0xc9 <_JIT_ENTRY+0xc9>
// b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bd: ff d0                         callq   *%rax
// bf: 49 ff 0c 24                   decq    (%r12)
// c3: 0f 84 ba 00 00 00             je      0x183 <_JIT_ENTRY+0x183>
// c9: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cf:  R_X86_64_64  _JIT_OPARG
// d7: a8 01                         testb   $0x1, %al
// d9: 74 07                         je      0xe2 <_JIT_ENTRY+0xe2>
// db: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// e2: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000e4:  R_X86_64_64  _JIT_OPARG
// ec: 83 e1 01                      andl    $0x1, %ecx
// ef: 49 8b 44 ce f8                movq    -0x8(%r14,%rcx,8), %rax
// f4: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000000f6:  R_X86_64_64  _Py_NoneStruct
// fe: 48 39 d0                      cmpq    %rdx, %rax
// 101: 74 5d                         je      0x160 <_JIT_ENTRY+0x160>
// 103: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000105:  R_X86_64_64  _JIT_OPARG
// 10d: 83 e1 01                      andl    $0x1, %ecx
// 110: 4d 8d 3c ce                   leaq    (%r14,%rcx,8), %r15
// 114: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000116:  R_X86_64_64  PyExc_TypeError
// 11e: 48 8b 39                      movq    (%rcx), %rdi
// 121: 48 8b 40 08                   movq    0x8(%rax), %rax
// 125: 48 8b 50 18                   movq    0x18(%rax), %rdx
// 129: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000012b:  R_X86_64_64  .rodata.str1.1+0x39
// 133: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000135:  R_X86_64_64  PyErr_Format
// 13d: 45 31 f6                      xorl    %r14d, %r14d
// 140: 31 c0                         xorl    %eax, %eax
// 142: ff d1                         callq   *%rcx
// 144: 49 29 df                      subq    %rbx, %r15
// 147: 49 83 c7 b8                   addq    $-0x48, %r15
// 14b: 49 c1 ef 03                   shrq    $0x3, %r15
// 14f: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 153: 4c 89 f0                      movq    %r14, %rax
// 156: 5b                            popq    %rbx
// 157: 41 5c                         popq    %r12
// 159: 41 5d                         popq    %r13
// 15b: 41 5e                         popq    %r14
// 15d: 41 5f                         popq    %r15
// 15f: c3                            retq
// 160: 49 8d 34 ce                   leaq    (%r14,%rcx,8), %rsi
// 164: 48 83 c6 f8                   addq    $-0x8, %rsi
// 168: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016a:  R_X86_64_64  _JIT_CONTINUE
// 172: 48 89 df                      movq    %rbx, %rdi
// 175: 4c 89 fa                      movq    %r15, %rdx
// 178: 5b                            popq    %rbx
// 179: 41 5c                         popq    %r12
// 17b: 41 5d                         popq    %r13
// 17d: 41 5e                         popq    %r14
// 17f: 41 5f                         popq    %r15
// 181: ff e0                         jmpq    *%rax
// 183: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000185:  R_X86_64_64  _Py_Dealloc
// 18d: 4c 89 e7                      movq    %r12, %rdi
// 190: ff d0                         callq   *%rax
// 192: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 196: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000198:  R_X86_64_64  _JIT_OPARG
// 1a0: a8 01                         testb   $0x1, %al
// 1a2: 0f 85 33 ff ff ff             jne     0xdb <_JIT_ENTRY+0xdb>
// 1a8: e9 35 ff ff ff                jmp     0xe2 <_JIT_ENTRY+0xe2>
// 1ad: 
static const unsigned char _LOAD_ATTR_SLOTplus_EXIT_INIT_CHECK_code_body[430] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1d, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x40, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x50, 0x85, 0xc0, 0x79, 0x72, 0xe9, 0x83, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x4c, 0x8d, 0x34, 0x48, 0x49, 0x81, 0xc6, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xdf, 0x00, 0x00, 0x00, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xba, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe1, 0x01, 0x49, 0x8b, 0x44, 0xce, 0xf8, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xd0, 0x74, 0x5d, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe1, 0x01, 0x4d, 0x8d, 0x3c, 0xce, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x39, 0x48, 0x8b, 0x40, 0x08, 0x48, 0x8b, 0x50, 0x18, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x31, 0xf6, 0x31, 0xc0, 0xff, 0xd1, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x4c, 0x89, 0xf0, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x49, 0x8d, 0x34, 0xce, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x33, 0xff, 0xff, 0xff, 0xe9, 0x35, 0xff, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_EXIT_INIT_CHECK_code_holes[17] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x99, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xe4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x116, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x135, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_Format, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x185, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x198, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00__init__() should return None, not '%.200s'\x00"
// 65: 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_EXIT_INIT_CHECK_data_body[105] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x5f, 0x28, 0x29, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x4e, 0x6f, 0x6e, 0x65, 0x2c, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_EXIT_INIT_CHECK_data_holes[1];

// _LOAD_ATTR_SLOTplus_EXIT_TRACE
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_EXIT_TRACE.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 f6                      movq    %rsi, %r14
// b: 48 89 fb                      movq    %rdi, %rbx
// e: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 12: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000014:  R_X86_64_64  _JIT_OPERAND
// 1c: 0f b7 c0                      movzwl  %ax, %eax
// 1f: 4d 8b 24 07                   movq    (%r15,%rax), %r12
// 23: 4d 85 e4                      testq   %r12, %r12
// 26: 0f 84 84 00 00 00             je      0xb0 <_JIT_ENTRY+0xb0>
// 2c: 41 8b 04 24                   movl    (%r12), %eax
// 30: ff c0                         incl    %eax
// 32: 75 0e                         jne     0x42 <_JIT_ENTRY+0x42>
// 34: 49 8b 07                      movq    (%r15), %rax
// 37: 48 85 c0                      testq   %rax, %rax
// 3a: 7e 1e                         jle     0x5a <_JIT_ENTRY+0x5a>
// 3c: 85 c0                         testl   %eax, %eax
// 3e: 79 3f                         jns     0x7f <_JIT_ENTRY+0x7f>
// 40: eb 4e                         jmp     0x90 <_JIT_ENTRY+0x90>
// 42: 41 89 04 24                   movl    %eax, (%r12)
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 50: ff d0                         callq   *%rax
// 52: 49 8b 07                      movq    (%r15), %rax
// 55: 48 85 c0                      testq   %rax, %rax
// 58: 7f e2                         jg      0x3c <_JIT_ENTRY+0x3c>
// 5a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000005c:  R_X86_64_64  .rodata.str1.1
// 64: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000066:  R_X86_64_64  _Py_NegativeRefcount
// 6e: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 73: 4c 89 fa                      movq    %r15, %rdx
// 76: ff d0                         callq   *%rax
// 78: 49 8b 07                      movq    (%r15), %rax
// 7b: 85 c0                         testl   %eax, %eax
// 7d: 78 11                         js      0x90 <_JIT_ENTRY+0x90>
// 7f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000081:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 89: ff d0                         callq   *%rax
// 8b: 49 ff 0f                      decq    (%r15)
// 8e: 74 54                         je      0xe4 <_JIT_ENTRY+0xe4>
// 90: 4d 89 66 f8                   movq    %r12, -0x8(%r14)
// 94: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000096:  R_X86_64_64  _JIT_OPARG
// 9e: a8 01                         testb   $0x1, %al
// a0: 74 07                         je      0xa9 <_JIT_ENTRY+0xa9>
// a2: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// a9: 83 e0 01                      andl    $0x1, %eax
// ac: 4d 8d 34 c6                   leaq    (%r14,%rax,8), %r14
// b0: 49 29 de                      subq    %rbx, %r14
// b3: 49 83 c6 b8                   addq    $-0x48, %r14
// b7: 49 c1 ee 03                   shrq    $0x3, %r14
// bb: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// bf: 48 8b 03                      movq    (%rbx), %rax
// c2: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c4:  R_X86_64_64  _JIT_TARGET
// cc: 89 c9                         movl    %ecx, %ecx
// ce: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d2: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d8: 48 83 c4 08                   addq    $0x8, %rsp
// dc: 5b                            popq    %rbx
// dd: 41 5c                         popq    %r12
// df: 41 5e                         popq    %r14
// e1: 41 5f                         popq    %r15
// e3: c3                            retq
// e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e6:  R_X86_64_64  _Py_Dealloc
// ee: 4c 89 ff                      movq    %r15, %rdi
// f1: ff d0                         callq   *%rax
// f3: 4d 89 66 f8                   movq    %r12, -0x8(%r14)
// f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f9:  R_X86_64_64  _JIT_OPARG
// 101: a8 01                         testb   $0x1, %al
// 103: 75 9d                         jne     0xa2 <_JIT_ENTRY+0xa2>
// 105: eb a2                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 107: 
static const unsigned char _LOAD_ATTR_SLOTplus_EXIT_TRACE_code_body[264] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x24, 0x07, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0x84, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x75, 0x0e, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x3f, 0xeb, 0x4e, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x54, 0x4d, 0x89, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x4d, 0x8d, 0x34, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4d, 0x89, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x75, 0x9d, 0xeb, 0xa2};
static const Hole _LOAD_ATTR_SLOTplus_EXIT_TRACE_code_holes[10] = {
    {0x14, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x5c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x66, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x81, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x96, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xc4, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xe6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xf9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_EXIT_TRACE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_EXIT_TRACE_data_holes[1];

// _LOAD_ATTR_SLOTplus_FORMAT_SIMPLE
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_FORMAT_SIMPLE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 26: 4d 85 ed                      testq   %r13, %r13
// 29: 74 1d                         je      0x48 <_JIT_ENTRY+0x48>
// 2b: 49 89 d7                      movq    %rdx, %r15
// 2e: 41 8b 45 00                   movl    (%r13), %eax
// 32: ff c0                         incl    %eax
// 34: 75 3f                         jne     0x75 <_JIT_ENTRY+0x75>
// 36: 49 8b 04 24                   movq    (%r12), %rax
// 3a: 48 85 c0                      testq   %rax, %rax
// 3d: 7e 4f                         jle     0x8e <_JIT_ENTRY+0x8e>
// 3f: 85 c0                         testl   %eax, %eax
// 41: 79 71                         jns     0xb4 <_JIT_ENTRY+0xb4>
// 43: e9 82 00 00 00                jmp     0xca <_JIT_ENTRY+0xca>
// 48: 49 29 de                      subq    %rbx, %r14
// 4b: 49 83 c6 b8                   addq    $-0x48, %r14
// 4f: 49 c1 ee 03                   shrq    $0x3, %r14
// 53: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 57: 48 8b 03                      movq    (%rbx), %rax
// 5a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005c:  R_X86_64_64  _JIT_TARGET
// 64: 89 c9                         movl    %ecx, %ecx
// 66: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 6a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 70: e9 83 01 00 00                jmp     0x1f8 <_JIT_ENTRY+0x1f8>
// 75: 41 89 45 00                   movl    %eax, (%r13)
// 79: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007b:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 83: ff d0                         callq   *%rax
// 85: 49 8b 04 24                   movq    (%r12), %rax
// 89: 48 85 c0                      testq   %rax, %rax
// 8c: 7f b1                         jg      0x3f <_JIT_ENTRY+0x3f>
// 8e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000090:  R_X86_64_64  .rodata.str1.1
// 98: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009a:  R_X86_64_64  _Py_NegativeRefcount
// a2: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a7: 4c 89 e2                      movq    %r12, %rdx
// aa: ff d0                         callq   *%rax
// ac: 49 8b 04 24                   movq    (%r12), %rax
// b0: 85 c0                         testl   %eax, %eax
// b2: 78 16                         js      0xca <_JIT_ENTRY+0xca>
// b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// be: ff d0                         callq   *%rax
// c0: 49 ff 0c 24                   decq    (%r12)
// c4: 0f 84 d5 00 00 00             je      0x19f <_JIT_ENTRY+0x19f>
// ca: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d0:  R_X86_64_64  _JIT_OPARG
// d8: a8 01                         testb   $0x1, %al
// da: 74 07                         je      0xe3 <_JIT_ENTRY+0xe3>
// dc: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// e3: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000000e5:  R_X86_64_64  _JIT_OPARG
// ed: 83 e5 01                      andl    $0x1, %ebp
// f0: 4d 8b 64 ee f8                movq    -0x8(%r14,%rbp,8), %r12
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  PyUnicode_Type
// ff: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 104: 74 63                         je      0x169 <_JIT_ENTRY+0x169>
// 106: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000108:  R_X86_64_64  PyObject_Format
// 110: 4c 89 e7                      movq    %r12, %rdi
// 113: 31 f6                         xorl    %esi, %esi
// 115: ff d0                         callq   *%rax
// 117: 49 89 c5                      movq    %rax, %r13
// 11a: 49 8b 04 24                   movq    (%r12), %rax
// 11e: 48 85 c0                      testq   %rax, %rax
// 121: 7e 06                         jle     0x129 <_JIT_ENTRY+0x129>
// 123: 85 c0                         testl   %eax, %eax
// 125: 79 28                         jns     0x14f <_JIT_ENTRY+0x14f>
// 127: eb 38                         jmp     0x161 <_JIT_ENTRY+0x161>
// 129: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000012b:  R_X86_64_64  .rodata.str1.1
// 133: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000135:  R_X86_64_64  _Py_NegativeRefcount
// 13d: be a6 0c 00 00                movl    $0xca6, %esi            # imm = 0xCA6
// 142: 4c 89 e2                      movq    %r12, %rdx
// 145: ff d0                         callq   *%rax
// 147: 49 8b 04 24                   movq    (%r12), %rax
// 14b: 85 c0                         testl   %eax, %eax
// 14d: 78 12                         js      0x161 <_JIT_ENTRY+0x161>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 159: ff d0                         callq   *%rax
// 15b: 49 ff 0c 24                   decq    (%r12)
// 15f: 74 68                         je      0x1c9 <_JIT_ENTRY+0x1c9>
// 161: 4d 89 ec                      movq    %r13, %r12
// 164: 4d 85 ed                      testq   %r13, %r13
// 167: 74 77                         je      0x1e0 <_JIT_ENTRY+0x1e0>
// 169: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016b:  R_X86_64_64  _JIT_OPARG
// 173: 83 e0 01                      andl    $0x1, %eax
// 176: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 17a: 4d 89 64 c6 f8                movq    %r12, -0x8(%r14,%rax,8)
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _JIT_CONTINUE
// 189: 48 89 df                      movq    %rbx, %rdi
// 18c: 4c 89 fa                      movq    %r15, %rdx
// 18f: 48 83 c4 08                   addq    $0x8, %rsp
// 193: 5b                            popq    %rbx
// 194: 41 5c                         popq    %r12
// 196: 41 5d                         popq    %r13
// 198: 41 5e                         popq    %r14
// 19a: 41 5f                         popq    %r15
// 19c: 5d                            popq    %rbp
// 19d: ff e0                         jmpq    *%rax
// 19f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a1:  R_X86_64_64  _Py_Dealloc
// 1a9: 4c 89 e7                      movq    %r12, %rdi
// 1ac: ff d0                         callq   *%rax
// 1ae: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 1b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b4:  R_X86_64_64  _JIT_OPARG
// 1bc: a8 01                         testb   $0x1, %al
// 1be: 0f 85 18 ff ff ff             jne     0xdc <_JIT_ENTRY+0xdc>
// 1c4: e9 1a ff ff ff                jmp     0xe3 <_JIT_ENTRY+0xe3>
// 1c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cb:  R_X86_64_64  _Py_Dealloc
// 1d3: 4c 89 e7                      movq    %r12, %rdi
// 1d6: ff d0                         callq   *%rax
// 1d8: 4d 89 ec                      movq    %r13, %r12
// 1db: 4d 85 ed                      testq   %r13, %r13
// 1de: 75 89                         jne     0x169 <_JIT_ENTRY+0x169>
// 1e0: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 1e4: 48 83 c0 f8                   addq    $-0x8, %rax
// 1e8: 48 29 d8                      subq    %rbx, %rax
// 1eb: 48 83 c0 b8                   addq    $-0x48, %rax
// 1ef: 48 c1 e8 03                   shrq    $0x3, %rax
// 1f3: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1f6: 31 c0                         xorl    %eax, %eax
// 1f8: 48 83 c4 08                   addq    $0x8, %rsp
// 1fc: 5b                            popq    %rbx
// 1fd: 41 5c                         popq    %r12
// 1ff: 41 5d                         popq    %r13
// 201: 41 5e                         popq    %r14
// 203: 41 5f                         popq    %r15
// 205: 5d                            popq    %rbp
// 206: c3                            retq
// 207: 
static const unsigned char _LOAD_ATTR_SLOTplus_FORMAT_SIMPLE_code_body[520] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1d, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x3f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4f, 0x85, 0xc0, 0x79, 0x71, 0xe9, 0x82, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x83, 0x01, 0x00, 0x00, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xd5, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe5, 0x01, 0x4d, 0x8b, 0x64, 0xee, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x74, 0x63, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x31, 0xf6, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xa6, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x68, 0x4d, 0x89, 0xec, 0x4d, 0x85, 0xed, 0x74, 0x77, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x4d, 0x89, 0x64, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x18, 0xff, 0xff, 0xff, 0xe9, 0x1a, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0xec, 0x4d, 0x85, 0xed, 0x75, 0x89, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x83, 0xc0, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _LOAD_ATTR_SLOTplus_FORMAT_SIMPLE_code_holes[19] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x90, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Format, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1a1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_FORMAT_SIMPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_FORMAT_SIMPLE_data_holes[1];

// _LOAD_ATTR_SLOTplus_FORMAT_WITH_SPEC
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_FORMAT_WITH_SPEC.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 4d 8b 3c 04                   movq    (%r12,%rax), %r15
// 26: 4d 85 ff                      testq   %r15, %r15
// 29: 74 1d                         je      0x48 <_JIT_ENTRY+0x48>
// 2b: 48 89 14 24                   movq    %rdx, (%rsp)
// 2f: 41 8b 07                      movl    (%r15), %eax
// 32: ff c0                         incl    %eax
// 34: 75 3f                         jne     0x75 <_JIT_ENTRY+0x75>
// 36: 49 8b 04 24                   movq    (%r12), %rax
// 3a: 48 85 c0                      testq   %rax, %rax
// 3d: 7e 4e                         jle     0x8d <_JIT_ENTRY+0x8d>
// 3f: 85 c0                         testl   %eax, %eax
// 41: 79 70                         jns     0xb3 <_JIT_ENTRY+0xb3>
// 43: e9 81 00 00 00                jmp     0xc9 <_JIT_ENTRY+0xc9>
// 48: 49 29 de                      subq    %rbx, %r14
// 4b: 49 83 c6 b8                   addq    $-0x48, %r14
// 4f: 49 c1 ee 03                   shrq    $0x3, %r14
// 53: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 57: 48 8b 03                      movq    (%rbx), %rax
// 5a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005c:  R_X86_64_64  _JIT_TARGET
// 64: 89 c9                         movl    %ecx, %ecx
// 66: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 6a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 70: e9 d2 01 00 00                jmp     0x247 <_JIT_ENTRY+0x247>
// 75: 41 89 07                      movl    %eax, (%r15)
// 78: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007a:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 82: ff d0                         callq   *%rax
// 84: 49 8b 04 24                   movq    (%r12), %rax
// 88: 48 85 c0                      testq   %rax, %rax
// 8b: 7f b2                         jg      0x3f <_JIT_ENTRY+0x3f>
// 8d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008f:  R_X86_64_64  .rodata.str1.1
// 97: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000099:  R_X86_64_64  _Py_NegativeRefcount
// a1: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a6: 4c 89 e2                      movq    %r12, %rdx
// a9: ff d0                         callq   *%rax
// ab: 49 8b 04 24                   movq    (%r12), %rax
// af: 85 c0                         testl   %eax, %eax
// b1: 78 16                         js      0xc9 <_JIT_ENTRY+0xc9>
// b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bd: ff d0                         callq   *%rax
// bf: 49 ff 0c 24                   decq    (%r12)
// c3: 0f 84 9c 00 00 00             je      0x165 <_JIT_ENTRY+0x165>
// c9: 4d 89 7e f8                   movq    %r15, -0x8(%r14)
// cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cf:  R_X86_64_64  _JIT_OPARG
// d7: a8 01                         testb   $0x1, %al
// d9: 74 07                         je      0xe2 <_JIT_ENTRY+0xe2>
// db: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// e2: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 00000000000000e4:  R_X86_64_64  _JIT_OPARG
// ec: 41 83 e7 01                   andl    $0x1, %r15d
// f0: 4b 8b 6c fe f0                movq    -0x10(%r14,%r15,8), %rbp
// f5: 4f 8b 6c fe f8                movq    -0x8(%r14,%r15,8), %r13
// fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fc:  R_X86_64_64  PyObject_Format
// 104: 48 89 ef                      movq    %rbp, %rdi
// 107: 4c 89 ee                      movq    %r13, %rsi
// 10a: ff d0                         callq   *%rax
// 10c: 49 89 c4                      movq    %rax, %r12
// 10f: 48 8b 45 00                   movq    (%rbp), %rax
// 113: 48 85 c0                      testq   %rax, %rax
// 116: 7e 06                         jle     0x11e <_JIT_ENTRY+0x11e>
// 118: 85 c0                         testl   %eax, %eax
// 11a: 79 28                         jns     0x144 <_JIT_ENTRY+0x144>
// 11c: eb 38                         jmp     0x156 <_JIT_ENTRY+0x156>
// 11e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000120:  R_X86_64_64  .rodata.str1.1
// 128: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012a:  R_X86_64_64  _Py_NegativeRefcount
// 132: be b7 0c 00 00                movl    $0xcb7, %esi            # imm = 0xCB7
// 137: 48 89 ea                      movq    %rbp, %rdx
// 13a: ff d0                         callq   *%rax
// 13c: 48 8b 45 00                   movq    (%rbp), %rax
// 140: 85 c0                         testl   %eax, %eax
// 142: 78 12                         js      0x156 <_JIT_ENTRY+0x156>
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 14e: ff d0                         callq   *%rax
// 150: 48 ff 4d 00                   decq    (%rbp)
// 154: 74 39                         je      0x18f <_JIT_ENTRY+0x18f>
// 156: 49 8b 45 00                   movq    (%r13), %rax
// 15a: 48 85 c0                      testq   %rax, %rax
// 15d: 7e 48                         jle     0x1a7 <_JIT_ENTRY+0x1a7>
// 15f: 85 c0                         testl   %eax, %eax
// 161: 79 6a                         jns     0x1cd <_JIT_ENTRY+0x1cd>
// 163: eb 7a                         jmp     0x1df <_JIT_ENTRY+0x1df>
// 165: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000167:  R_X86_64_64  _Py_Dealloc
// 16f: 4c 89 e7                      movq    %r12, %rdi
// 172: ff d0                         callq   *%rax
// 174: 4d 89 7e f8                   movq    %r15, -0x8(%r14)
// 178: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017a:  R_X86_64_64  _JIT_OPARG
// 182: a8 01                         testb   $0x1, %al
// 184: 0f 85 51 ff ff ff             jne     0xdb <_JIT_ENTRY+0xdb>
// 18a: e9 53 ff ff ff                jmp     0xe2 <_JIT_ENTRY+0xe2>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _Py_Dealloc
// 199: 48 89 ef                      movq    %rbp, %rdi
// 19c: ff d0                         callq   *%rax
// 19e: 49 8b 45 00                   movq    (%r13), %rax
// 1a2: 48 85 c0                      testq   %rax, %rax
// 1a5: 7f b8                         jg      0x15f <_JIT_ENTRY+0x15f>
// 1a7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a9:  R_X86_64_64  .rodata.str1.1
// 1b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b3:  R_X86_64_64  _Py_NegativeRefcount
// 1bb: be b8 0c 00 00                movl    $0xcb8, %esi            # imm = 0xCB8
// 1c0: 4c 89 ea                      movq    %r13, %rdx
// 1c3: ff d0                         callq   *%rax
// 1c5: 49 8b 45 00                   movq    (%r13), %rax
// 1c9: 85 c0                         testl   %eax, %eax
// 1cb: 78 12                         js      0x1df <_JIT_ENTRY+0x1df>
// 1cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cf:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d7: ff d0                         callq   *%rax
// 1d9: 49 ff 4d 00                   decq    (%r13)
// 1dd: 74 40                         je      0x21f <_JIT_ENTRY+0x21f>
// 1df: 4d 85 e4                      testq   %r12, %r12
// 1e2: 74 4f                         je      0x233 <_JIT_ENTRY+0x233>
// 1e4: 4b 8d 34 fe                   leaq    (%r14,%r15,8), %rsi
// 1e8: 48 83 c6 f8                   addq    $-0x8, %rsi
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _JIT_OPARG
// 1f6: 83 e0 01                      andl    $0x1, %eax
// 1f9: 4d 89 64 c6 f0                movq    %r12, -0x10(%r14,%rax,8)
// 1fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000200:  R_X86_64_64  _JIT_CONTINUE
// 208: 48 89 df                      movq    %rbx, %rdi
// 20b: 48 8b 14 24                   movq    (%rsp), %rdx
// 20f: 48 83 c4 08                   addq    $0x8, %rsp
// 213: 5b                            popq    %rbx
// 214: 41 5c                         popq    %r12
// 216: 41 5d                         popq    %r13
// 218: 41 5e                         popq    %r14
// 21a: 41 5f                         popq    %r15
// 21c: 5d                            popq    %rbp
// 21d: ff e0                         jmpq    *%rax
// 21f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000221:  R_X86_64_64  _Py_Dealloc
// 229: 4c 89 ef                      movq    %r13, %rdi
// 22c: ff d0                         callq   *%rax
// 22e: 4d 85 e4                      testq   %r12, %r12
// 231: 75 b1                         jne     0x1e4 <_JIT_ENTRY+0x1e4>
// 233: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 237: 48 29 d8                      subq    %rbx, %rax
// 23a: 48 83 c0 a8                   addq    $-0x58, %rax
// 23e: 48 c1 e8 03                   shrq    $0x3, %rax
// 242: 89 43 40                      movl    %eax, 0x40(%rbx)
// 245: 31 c0                         xorl    %eax, %eax
// 247: 48 83 c4 08                   addq    $0x8, %rsp
// 24b: 5b                            popq    %rbx
// 24c: 41 5c                         popq    %r12
// 24e: 41 5d                         popq    %r13
// 250: 41 5e                         popq    %r14
// 252: 41 5f                         popq    %r15
// 254: 5d                            popq    %rbp
// 255: c3                            retq
// 256: 
static const unsigned char _LOAD_ATTR_SLOTplus_FORMAT_WITH_SPEC_code_body[599] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x3c, 0x04, 0x4d, 0x85, 0xff, 0x74, 0x1d, 0x48, 0x89, 0x14, 0x24, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x75, 0x3f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4e, 0x85, 0xc0, 0x79, 0x70, 0xe9, 0x81, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xd2, 0x01, 0x00, 0x00, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x9c, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x83, 0xe7, 0x01, 0x4b, 0x8b, 0x6c, 0xfe, 0xf0, 0x4f, 0x8b, 0x6c, 0xfe, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb7, 0x0c, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x74, 0x39, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x48, 0x85, 0xc0, 0x79, 0x6a, 0xeb, 0x7a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x51, 0xff, 0xff, 0xff, 0xe9, 0x53, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xb8, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb8, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x40, 0x4d, 0x85, 0xe4, 0x74, 0x4f, 0x4b, 0x8d, 0x34, 0xfe, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x4d, 0x89, 0x64, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x75, 0xb1, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xa8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _LOAD_ATTR_SLOTplus_FORMAT_WITH_SPEC_code_holes[22] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x99, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xe4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Format, 0x0},
    {0x120, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x17a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1cf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x200, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_FORMAT_WITH_SPEC_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_FORMAT_WITH_SPEC_data_holes[1];

// _LOAD_ATTR_SLOTplus_FOR_ITER_TIER_TWO
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_FOR_ITER_TIER_TWO.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f6                      movq    %rsi, %r14
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 0f 84 88 01 00 00             je      0x1b5 <_JIT_ENTRY+0x1b5>
// 2d: 49 89 d7                      movq    %rdx, %r15
// 30: 41 8b 45 00                   movl    (%r13), %eax
// 34: ff c0                         incl    %eax
// 36: 75 0f                         jne     0x47 <_JIT_ENTRY+0x47>
// 38: 49 8b 04 24                   movq    (%r12), %rax
// 3c: 48 85 c0                      testq   %rax, %rax
// 3f: 7e 1f                         jle     0x60 <_JIT_ENTRY+0x60>
// 41: 85 c0                         testl   %eax, %eax
// 43: 79 41                         jns     0x86 <_JIT_ENTRY+0x86>
// 45: eb 60                         jmp     0xa7 <_JIT_ENTRY+0xa7>
// 47: 41 89 45 00                   movl    %eax, (%r13)
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 55: ff d0                         callq   *%rax
// 57: 49 8b 04 24                   movq    (%r12), %rax
// 5b: 48 85 c0                      testq   %rax, %rax
// 5e: 7f e1                         jg      0x41 <_JIT_ENTRY+0x41>
// 60: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000062:  R_X86_64_64  .rodata.str1.1
// 6a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006c:  R_X86_64_64  _Py_NegativeRefcount
// 74: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 79: 4c 89 e2                      movq    %r12, %rdx
// 7c: ff d0                         callq   *%rax
// 7e: 49 8b 04 24                   movq    (%r12), %rax
// 82: 85 c0                         testl   %eax, %eax
// 84: 78 21                         js      0xa7 <_JIT_ENTRY+0xa7>
// 86: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000088:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 90: ff d0                         callq   *%rax
// 92: 49 ff 0c 24                   decq    (%r12)
// 96: 75 0f                         jne     0xa7 <_JIT_ENTRY+0xa7>
// 98: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009a:  R_X86_64_64  _Py_Dealloc
// a2: 4c 89 e7                      movq    %r12, %rdi
// a5: ff d0                         callq   *%rax
// a7: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ad:  R_X86_64_64  _JIT_OPARG
// b5: a8 01                         testb   $0x1, %al
// b7: 74 07                         je      0xc0 <_JIT_ENTRY+0xc0>
// b9: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// c0: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000000c2:  R_X86_64_64  _JIT_OPARG
// ca: 41 83 e5 01                   andl    $0x1, %r13d
// ce: 4f 8b 64 ee f8                movq    -0x8(%r14,%r13,8), %r12
// d3: 49 8b 44 24 08                movq    0x8(%r12), %rax
// d8: 4c 89 e7                      movq    %r12, %rdi
// db: ff 90 e0 00 00 00             callq   *0xe0(%rax)
// e1: 48 85 c0                      testq   %rax, %rax
// e4: 74 34                         je      0x11a <_JIT_ENTRY+0x11a>
// e6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000e8:  R_X86_64_64  _JIT_OPARG
// f0: 83 e1 01                      andl    $0x1, %ecx
// f3: 49 89 04 ce                   movq    %rax, (%r14,%rcx,8)
// f7: 49 8d 34 ce                   leaq    (%r14,%rcx,8), %rsi
// fb: 48 83 c6 08                   addq    $0x8, %rsi
// ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000101:  R_X86_64_64  _JIT_CONTINUE
// 109: 48 89 df                      movq    %rbx, %rdi
// 10c: 4c 89 fa                      movq    %r15, %rdx
// 10f: 5b                            popq    %rbx
// 110: 41 5c                         popq    %r12
// 112: 41 5d                         popq    %r13
// 114: 41 5e                         popq    %r14
// 116: 41 5f                         popq    %r15
// 118: ff e0                         jmpq    *%rax
// 11a: 49 8b 47 68                   movq    0x68(%r15), %rax
// 11e: 48 85 c0                      testq   %rax, %rax
// 121: 74 3a                         je      0x15d <_JIT_ENTRY+0x15d>
// 123: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 128: 74 33                         je      0x15d <_JIT_ENTRY+0x15d>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  PyExc_StopIteration
// 134: 48 8b 30                      movq    (%rax), %rsi
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  _PyErr_ExceptionMatches
// 141: 4c 89 ff                      movq    %r15, %rdi
// 144: ff d0                         callq   *%rax
// 146: 85 c0                         testl   %eax, %eax
// 148: 0f 84 99 00 00 00             je      0x1e7 <_JIT_ENTRY+0x1e7>
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _PyErr_Clear
// 158: 4c 89 ff                      movq    %r15, %rdi
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 04 24                   movq    (%r12), %rax
// 161: 48 85 c0                      testq   %rax, %rax
// 164: 7f 22                         jg      0x188 <_JIT_ENTRY+0x188>
// 166: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000168:  R_X86_64_64  .rodata.str1.1
// 170: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000172:  R_X86_64_64  _Py_NegativeRefcount
// 17a: be 80 08 00 00                movl    $0x880, %esi            # imm = 0x880
// 17f: 4c 89 e2                      movq    %r12, %rdx
// 182: ff d0                         callq   *%rax
// 184: 49 8b 04 24                   movq    (%r12), %rax
// 188: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 18c: 49 83 c6 f8                   addq    $-0x8, %r14
// 190: 85 c0                         testl   %eax, %eax
// 192: 78 21                         js      0x1b5 <_JIT_ENTRY+0x1b5>
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 19e: ff d0                         callq   *%rax
// 1a0: 49 ff 0c 24                   decq    (%r12)
// 1a4: 75 0f                         jne     0x1b5 <_JIT_ENTRY+0x1b5>
// 1a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a8:  R_X86_64_64  _Py_Dealloc
// 1b0: 4c 89 e7                      movq    %r12, %rdi
// 1b3: ff d0                         callq   *%rax
// 1b5: 49 29 de                      subq    %rbx, %r14
// 1b8: 49 83 c6 b8                   addq    $-0x48, %r14
// 1bc: 49 c1 ee 03                   shrq    $0x3, %r14
// 1c0: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1c4: 48 8b 03                      movq    (%rbx), %rax
// 1c7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c9:  R_X86_64_64  _JIT_TARGET
// 1d1: 89 c9                         movl    %ecx, %ecx
// 1d3: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1d7: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1dd: 5b                            popq    %rbx
// 1de: 41 5c                         popq    %r12
// 1e0: 41 5d                         popq    %r13
// 1e2: 41 5e                         popq    %r14
// 1e4: 41 5f                         popq    %r15
// 1e6: c3                            retq
// 1e7: 4b 8d 04 ee                   leaq    (%r14,%r13,8), %rax
// 1eb: 48 29 d8                      subq    %rbx, %rax
// 1ee: 48 83 c0 b8                   addq    $-0x48, %rax
// 1f2: 48 c1 e8 03                   shrq    $0x3, %rax
// 1f6: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1f9: 31 c0                         xorl    %eax, %eax
// 1fb: eb e0                         jmp     0x1dd <_JIT_ENTRY+0x1dd>
// 1fd: 
static const unsigned char _LOAD_ATTR_SLOTplus_FOR_ITER_TIER_TWO_code_body[510] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x88, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1f, 0x85, 0xc0, 0x79, 0x41, 0xeb, 0x60, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x83, 0xe5, 0x01, 0x4f, 0x8b, 0x64, 0xee, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x4c, 0x89, 0xe7, 0xff, 0x90, 0xe0, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x34, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe1, 0x01, 0x49, 0x89, 0x04, 0xce, 0x49, 0x8d, 0x34, 0xce, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x49, 0x8b, 0x47, 0x68, 0x48, 0x85, 0xc0, 0x74, 0x3a, 0x48, 0x83, 0x78, 0x08, 0x00, 0x74, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x99, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x80, 0x08, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x83, 0xc6, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x4b, 0x8d, 0x04, 0xee, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xeb, 0xe0};
static const Hole _LOAD_ATTR_SLOTplus_FOR_ITER_TIER_TWO_code_holes[19] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x9a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xe8, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x101, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_StopIteration, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_ExceptionMatches, 0x0},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Clear, 0x0},
    {0x168, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x172, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1a8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1c9, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_FOR_ITER_TIER_TWO_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_FOR_ITER_TIER_TWO_data_holes[1];

// _LOAD_ATTR_SLOTplus_GET_AITER
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_GET_AITER.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 26: 4d 85 ed                      testq   %r13, %r13
// 29: 74 1d                         je      0x48 <_JIT_ENTRY+0x48>
// 2b: 49 89 d7                      movq    %rdx, %r15
// 2e: 41 8b 45 00                   movl    (%r13), %eax
// 32: ff c0                         incl    %eax
// 34: 75 3f                         jne     0x75 <_JIT_ENTRY+0x75>
// 36: 49 8b 04 24                   movq    (%r12), %rax
// 3a: 48 85 c0                      testq   %rax, %rax
// 3d: 7e 4f                         jle     0x8e <_JIT_ENTRY+0x8e>
// 3f: 85 c0                         testl   %eax, %eax
// 41: 79 71                         jns     0xb4 <_JIT_ENTRY+0xb4>
// 43: e9 82 00 00 00                jmp     0xca <_JIT_ENTRY+0xca>
// 48: 49 29 de                      subq    %rbx, %r14
// 4b: 49 83 c6 b8                   addq    $-0x48, %r14
// 4f: 49 c1 ee 03                   shrq    $0x3, %r14
// 53: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 57: 48 8b 03                      movq    (%rbx), %rax
// 5a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005c:  R_X86_64_64  _JIT_TARGET
// 64: 89 c9                         movl    %ecx, %ecx
// 66: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 6a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 70: e9 aa 02 00 00                jmp     0x31f <_JIT_ENTRY+0x31f>
// 75: 41 89 45 00                   movl    %eax, (%r13)
// 79: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007b:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 83: ff d0                         callq   *%rax
// 85: 49 8b 04 24                   movq    (%r12), %rax
// 89: 48 85 c0                      testq   %rax, %rax
// 8c: 7f b1                         jg      0x3f <_JIT_ENTRY+0x3f>
// 8e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000090:  R_X86_64_64  .rodata.str1.1
// 98: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009a:  R_X86_64_64  _Py_NegativeRefcount
// a2: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a7: 4c 89 e2                      movq    %r12, %rdx
// aa: ff d0                         callq   *%rax
// ac: 49 8b 04 24                   movq    (%r12), %rax
// b0: 85 c0                         testl   %eax, %eax
// b2: 78 16                         js      0xca <_JIT_ENTRY+0xca>
// b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// be: ff d0                         callq   *%rax
// c0: 49 ff 0c 24                   decq    (%r12)
// c4: 0f 84 85 01 00 00             je      0x24f <_JIT_ENTRY+0x24f>
// ca: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d0:  R_X86_64_64  _JIT_OPARG
// d8: a8 01                         testb   $0x1, %al
// da: 74 07                         je      0xe3 <_JIT_ENTRY+0xe3>
// dc: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// e3: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000000e5:  R_X86_64_64  _JIT_OPARG
// ed: 83 e5 01                      andl    $0x1, %ebp
// f0: 4d 8b 64 ee f8                movq    -0x8(%r14,%rbp,8), %r12
// f5: 49 8b 44 24 08                movq    0x8(%r12), %rax
// fa: 48 8b 48 50                   movq    0x50(%rax), %rcx
// fe: 48 85 c9                      testq   %rcx, %rcx
// 101: 0f 84 b5 00 00 00             je      0x1bc <_JIT_ENTRY+0x1bc>
// 107: 48 8b 49 08                   movq    0x8(%rcx), %rcx
// 10b: 48 85 c9                      testq   %rcx, %rcx
// 10e: 0f 84 a8 00 00 00             je      0x1bc <_JIT_ENTRY+0x1bc>
// 114: 4c 89 e7                      movq    %r12, %rdi
// 117: ff d1                         callq   *%rcx
// 119: 49 89 c5                      movq    %rax, %r13
// 11c: 49 8b 04 24                   movq    (%r12), %rax
// 120: 48 85 c0                      testq   %rax, %rax
// 123: 7f 22                         jg      0x147 <_JIT_ENTRY+0x147>
// 125: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000127:  R_X86_64_64  .rodata.str1.1
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_NegativeRefcount
// 139: be c5 02 00 00                movl    $0x2c5, %esi            # imm = 0x2C5
// 13e: 4c 89 e2                      movq    %r12, %rdx
// 141: ff d0                         callq   *%rax
// 143: 49 8b 04 24                   movq    (%r12), %rax
// 147: 85 c0                         testl   %eax, %eax
// 149: 78 16                         js      0x161 <_JIT_ENTRY+0x161>
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 155: ff d0                         callq   *%rax
// 157: 49 ff 0c 24                   decq    (%r12)
// 15b: 0f 84 8e 01 00 00             je      0x2ef <_JIT_ENTRY+0x2ef>
// 161: 4d 85 ed                      testq   %r13, %r13
// 164: 0f 84 9d 01 00 00             je      0x307 <_JIT_ENTRY+0x307>
// 16a: 49 8b 45 08                   movq    0x8(%r13), %rax
// 16e: 48 8b 48 50                   movq    0x50(%rax), %rcx
// 172: 48 85 c9                      testq   %rcx, %rcx
// 175: 0f 84 fe 00 00 00             je      0x279 <_JIT_ENTRY+0x279>
// 17b: 48 83 79 10 00                cmpq    $0x0, 0x10(%rcx)
// 180: 0f 84 f3 00 00 00             je      0x279 <_JIT_ENTRY+0x279>
// 186: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000188:  R_X86_64_64  _JIT_OPARG
// 190: 83 e0 01                      andl    $0x1, %eax
// 193: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 197: 4d 89 6c c6 f8                movq    %r13, -0x8(%r14,%rax,8)
// 19c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019e:  R_X86_64_64  _JIT_CONTINUE
// 1a6: 48 89 df                      movq    %rbx, %rdi
// 1a9: 4c 89 fa                      movq    %r15, %rdx
// 1ac: 48 83 c4 08                   addq    $0x8, %rsp
// 1b0: 5b                            popq    %rbx
// 1b1: 41 5c                         popq    %r12
// 1b3: 41 5d                         popq    %r13
// 1b5: 41 5e                         popq    %r14
// 1b7: 41 5f                         popq    %r15
// 1b9: 5d                            popq    %rbp
// 1ba: ff e0                         jmpq    *%rax
// 1bc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001be:  R_X86_64_64  PyExc_TypeError
// 1c6: 48 8b 31                      movq    (%rcx), %rsi
// 1c9: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 1cd: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001cf:  R_X86_64_64  .rodata.str1.1+0x39
// 1d7: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000001d9:  R_X86_64_64  _PyErr_Format
// 1e1: 4c 89 ff                      movq    %r15, %rdi
// 1e4: 31 c0                         xorl    %eax, %eax
// 1e6: 41 ff d0                      callq   *%r8
// 1e9: 49 8b 04 24                   movq    (%r12), %rax
// 1ed: 48 85 c0                      testq   %rax, %rax
// 1f0: 7e 09                         jle     0x1fb <_JIT_ENTRY+0x1fb>
// 1f2: 85 c0                         testl   %eax, %eax
// 1f4: 79 2f                         jns     0x225 <_JIT_ENTRY+0x225>
// 1f6: e9 0c 01 00 00                jmp     0x307 <_JIT_ENTRY+0x307>
// 1fb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001fd:  R_X86_64_64  .rodata.str1.1
// 205: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000207:  R_X86_64_64  _Py_NegativeRefcount
// 20f: be c1 02 00 00                movl    $0x2c1, %esi            # imm = 0x2C1
// 214: 4c 89 e2                      movq    %r12, %rdx
// 217: ff d0                         callq   *%rax
// 219: 49 8b 04 24                   movq    (%r12), %rax
// 21d: 85 c0                         testl   %eax, %eax
// 21f: 0f 88 e2 00 00 00             js      0x307 <_JIT_ENTRY+0x307>
// 225: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000227:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 22f: ff d0                         callq   *%rax
// 231: 49 ff 0c 24                   decq    (%r12)
// 235: 0f 85 cc 00 00 00             jne     0x307 <_JIT_ENTRY+0x307>
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: 4c 89 e7                      movq    %r12, %rdi
// 248: ff d0                         callq   *%rax
// 24a: e9 b8 00 00 00                jmp     0x307 <_JIT_ENTRY+0x307>
// 24f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000251:  R_X86_64_64  _Py_Dealloc
// 259: 4c 89 e7                      movq    %r12, %rdi
// 25c: ff d0                         callq   *%rax
// 25e: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 262: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000264:  R_X86_64_64  _JIT_OPARG
// 26c: a8 01                         testb   $0x1, %al
// 26e: 0f 85 68 fe ff ff             jne     0xdc <_JIT_ENTRY+0xdc>
// 274: e9 6a fe ff ff                jmp     0xe3 <_JIT_ENTRY+0xe3>
// 279: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000027b:  R_X86_64_64  PyExc_TypeError
// 283: 48 8b 31                      movq    (%rcx), %rsi
// 286: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 28a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000028c:  R_X86_64_64  .rodata.str1.1+0x7a
// 294: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000296:  R_X86_64_64  _PyErr_Format
// 29e: 4c 89 ff                      movq    %r15, %rdi
// 2a1: 31 c0                         xorl    %eax, %eax
// 2a3: 41 ff d0                      callq   *%r8
// 2a6: 49 8b 45 00                   movq    (%r13), %rax
// 2aa: 48 85 c0                      testq   %rax, %rax
// 2ad: 7f 22                         jg      0x2d1 <_JIT_ENTRY+0x2d1>
// 2af: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002b1:  R_X86_64_64  .rodata.str1.1
// 2b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bb:  R_X86_64_64  _Py_NegativeRefcount
// 2c3: be cd 02 00 00                movl    $0x2cd, %esi            # imm = 0x2CD
// 2c8: 4c 89 ea                      movq    %r13, %rdx
// 2cb: ff d0                         callq   *%rax
// 2cd: 49 8b 45 00                   movq    (%r13), %rax
// 2d1: 85 c0                         testl   %eax, %eax
// 2d3: 78 32                         js      0x307 <_JIT_ENTRY+0x307>
// 2d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2df: ff d0                         callq   *%rax
// 2e1: 49 ff 4d 00                   decq    (%r13)
// 2e5: 4d 89 ec                      movq    %r13, %r12
// 2e8: 75 1d                         jne     0x307 <_JIT_ENTRY+0x307>
// 2ea: e9 4c ff ff ff                jmp     0x23b <_JIT_ENTRY+0x23b>
// 2ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f1:  R_X86_64_64  _Py_Dealloc
// 2f9: 4c 89 e7                      movq    %r12, %rdi
// 2fc: ff d0                         callq   *%rax
// 2fe: 4d 85 ed                      testq   %r13, %r13
// 301: 0f 85 63 fe ff ff             jne     0x16a <_JIT_ENTRY+0x16a>
// 307: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 30b: 48 83 c0 f8                   addq    $-0x8, %rax
// 30f: 48 29 d8                      subq    %rbx, %rax
// 312: 48 83 c0 b8                   addq    $-0x48, %rax
// 316: 48 c1 e8 03                   shrq    $0x3, %rax
// 31a: 89 43 40                      movl    %eax, 0x40(%rbx)
// 31d: 31 c0                         xorl    %eax, %eax
// 31f: 48 83 c4 08                   addq    $0x8, %rsp
// 323: 5b                            popq    %rbx
// 324: 41 5c                         popq    %r12
// 326: 41 5d                         popq    %r13
// 328: 41 5e                         popq    %r14
// 32a: 41 5f                         popq    %r15
// 32c: 5d                            popq    %rbp
// 32d: c3                            retq
// 32e: 
static const unsigned char _LOAD_ATTR_SLOTplus_GET_AITER_code_body[815] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1d, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x3f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4f, 0x85, 0xc0, 0x79, 0x71, 0xe9, 0x82, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x02, 0x00, 0x00, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x85, 0x01, 0x00, 0x00, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe5, 0x01, 0x4d, 0x8b, 0x64, 0xee, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x48, 0x50, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xb5, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x49, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xa8, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd1, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc5, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x8e, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x9d, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x50, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xfe, 0x00, 0x00, 0x00, 0x48, 0x83, 0x79, 0x10, 0x00, 0x0f, 0x84, 0xf3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x4d, 0x89, 0x6c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x31, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x09, 0x85, 0xc0, 0x79, 0x2f, 0xe9, 0x0c, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0xe2, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0xcc, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0xb8, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x68, 0xfe, 0xff, 0xff, 0xe9, 0x6a, 0xfe, 0xff, 0xff, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x31, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xcd, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x32, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x4d, 0x89, 0xec, 0x75, 0x1d, 0xe9, 0x4c, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x0f, 0x85, 0x63, 0xfe, 0xff, 0xff, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x83, 0xc0, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _LOAD_ATTR_SLOTplus_GET_AITER_code_holes[30] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x90, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x19e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x1cf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x207, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x227, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x251, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x27b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x28c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x7a},
    {0x296, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x2b1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2d7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2f1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'async for' requires an object with __aiter__ method, got %.100s\x00'async for' received an object from __aiter__ that does not implement __anext__: %.100s\x00"
// d2: 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_GET_AITER_data_body[217] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x5f, 0x5f, 0x61, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x5f, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x2c, 0x20, 0x67, 0x6f, 0x74, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73, 0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x5f, 0x5f, 0x61, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x5f, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x5f, 0x5f, 0x61, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x5f, 0x3a, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_GET_AITER_data_holes[1];

// _LOAD_ATTR_SLOTplus_GET_ANEXT
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_GET_ANEXT.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 26: 4d 85 ed                      testq   %r13, %r13
// 29: 74 1d                         je      0x48 <_JIT_ENTRY+0x48>
// 2b: 49 89 d7                      movq    %rdx, %r15
// 2e: 41 8b 45 00                   movl    (%r13), %eax
// 32: ff c0                         incl    %eax
// 34: 75 3f                         jne     0x75 <_JIT_ENTRY+0x75>
// 36: 49 8b 04 24                   movq    (%r12), %rax
// 3a: 48 85 c0                      testq   %rax, %rax
// 3d: 7e 4f                         jle     0x8e <_JIT_ENTRY+0x8e>
// 3f: 85 c0                         testl   %eax, %eax
// 41: 79 71                         jns     0xb4 <_JIT_ENTRY+0xb4>
// 43: e9 8d 00 00 00                jmp     0xd5 <_JIT_ENTRY+0xd5>
// 48: 49 29 de                      subq    %rbx, %r14
// 4b: 49 83 c6 b8                   addq    $-0x48, %r14
// 4f: 49 c1 ee 03                   shrq    $0x3, %r14
// 53: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 57: 48 8b 03                      movq    (%rbx), %rax
// 5a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005c:  R_X86_64_64  _JIT_TARGET
// 64: 89 c9                         movl    %ecx, %ecx
// 66: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 6a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 70: e9 43 02 00 00                jmp     0x2b8 <_JIT_ENTRY+0x2b8>
// 75: 41 89 45 00                   movl    %eax, (%r13)
// 79: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007b:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 83: ff d0                         callq   *%rax
// 85: 49 8b 04 24                   movq    (%r12), %rax
// 89: 48 85 c0                      testq   %rax, %rax
// 8c: 7f b1                         jg      0x3f <_JIT_ENTRY+0x3f>
// 8e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000090:  R_X86_64_64  .rodata.str1.1
// 98: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009a:  R_X86_64_64  _Py_NegativeRefcount
// a2: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a7: 4c 89 e2                      movq    %r12, %rdx
// aa: ff d0                         callq   *%rax
// ac: 49 8b 04 24                   movq    (%r12), %rax
// b0: 85 c0                         testl   %eax, %eax
// b2: 78 21                         js      0xd5 <_JIT_ENTRY+0xd5>
// b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// be: ff d0                         callq   *%rax
// c0: 49 ff 0c 24                   decq    (%r12)
// c4: 75 0f                         jne     0xd5 <_JIT_ENTRY+0xd5>
// c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c8:  R_X86_64_64  _Py_Dealloc
// d0: 4c 89 e7                      movq    %r12, %rdi
// d3: ff d0                         callq   *%rax
// d5: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000db:  R_X86_64_64  _JIT_OPARG
// e3: a8 01                         testb   $0x1, %al
// e5: 74 07                         je      0xee <_JIT_ENTRY+0xee>
// e7: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// ee: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000000f0:  R_X86_64_64  _JIT_OPARG
// f8: 83 e5 01                      andl    $0x1, %ebp
// fb: 49 8b 7c ee f8                movq    -0x8(%r14,%rbp,8), %rdi
// 100: 48 8b 47 08                   movq    0x8(%rdi), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  PyAsyncGen_Type
// 10e: 48 39 c8                      cmpq    %rcx, %rax
// 111: 0f 84 c3 00 00 00             je      0x1da <_JIT_ENTRY+0x1da>
// 117: 48 8b 48 50                   movq    0x50(%rax), %rcx
// 11b: 48 85 c9                      testq   %rcx, %rcx
// 11e: 0f 84 84 00 00 00             je      0x1a8 <_JIT_ENTRY+0x1a8>
// 124: 48 8b 49 10                   movq    0x10(%rcx), %rcx
// 128: 48 85 c9                      testq   %rcx, %rcx
// 12b: 74 7b                         je      0x1a8 <_JIT_ENTRY+0x1a8>
// 12d: ff d1                         callq   *%rcx
// 12f: 48 85 c0                      testq   %rax, %rax
// 132: 0f 84 6c 01 00 00             je      0x2a4 <_JIT_ENTRY+0x2a4>
// 138: 49 89 c4                      movq    %rax, %r12
// 13b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013d:  R_X86_64_64  _PyCoro_GetAwaitableIter
// 145: 4c 89 e7                      movq    %r12, %rdi
// 148: ff d0                         callq   *%rax
// 14a: 48 85 c0                      testq   %rax, %rax
// 14d: 0f 84 d3 00 00 00             je      0x226 <_JIT_ENTRY+0x226>
// 153: 49 89 c5                      movq    %rax, %r13
// 156: 49 8b 04 24                   movq    (%r12), %rax
// 15a: 48 85 c0                      testq   %rax, %rax
// 15d: 7f 22                         jg      0x181 <_JIT_ENTRY+0x181>
// 15f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000161:  R_X86_64_64  .rodata.str1.1
// 169: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016b:  R_X86_64_64  _Py_NegativeRefcount
// 173: be fb 02 00 00                movl    $0x2fb, %esi            # imm = 0x2FB
// 178: 4c 89 e2                      movq    %r12, %rdx
// 17b: ff d0                         callq   *%rax
// 17d: 49 8b 04 24                   movq    (%r12), %rax
// 181: 85 c0                         testl   %eax, %eax
// 183: 78 68                         js      0x1ed <_JIT_ENTRY+0x1ed>
// 185: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000187:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 18f: ff d0                         callq   *%rax
// 191: 49 ff 0c 24                   decq    (%r12)
// 195: 75 56                         jne     0x1ed <_JIT_ENTRY+0x1ed>
// 197: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000199:  R_X86_64_64  _Py_Dealloc
// 1a1: 4c 89 e7                      movq    %r12, %rdi
// 1a4: ff d0                         callq   *%rax
// 1a6: eb 45                         jmp     0x1ed <_JIT_ENTRY+0x1ed>
// 1a8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001aa:  R_X86_64_64  PyExc_TypeError
// 1b2: 48 8b 31                      movq    (%rcx), %rsi
// 1b5: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 1b9: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001bb:  R_X86_64_64  .rodata.str1.1+0x39
// 1c3: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000001c5:  R_X86_64_64  _PyErr_Format
// 1cd: 4c 89 ff                      movq    %r15, %rdi
// 1d0: 31 c0                         xorl    %eax, %eax
// 1d2: 41 ff d0                      callq   *%r8
// 1d5: e9 ca 00 00 00                jmp     0x2a4 <_JIT_ENTRY+0x2a4>
// 1da: 48 8b 41 50                   movq    0x50(%rcx), %rax
// 1de: ff 50 10                      callq   *0x10(%rax)
// 1e1: 49 89 c5                      movq    %rax, %r13
// 1e4: 48 85 c0                      testq   %rax, %rax
// 1e7: 0f 84 b7 00 00 00             je      0x2a4 <_JIT_ENTRY+0x2a4>
// 1ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ef:  R_X86_64_64  _JIT_OPARG
// 1f7: 83 e0 01                      andl    $0x1, %eax
// 1fa: 4d 89 2c c6                   movq    %r13, (%r14,%rax,8)
// 1fe: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 202: 48 83 c6 08                   addq    $0x8, %rsi
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _JIT_CONTINUE
// 210: 48 89 df                      movq    %rbx, %rdi
// 213: 4c 89 fa                      movq    %r15, %rdx
// 216: 48 83 c4 08                   addq    $0x8, %rsp
// 21a: 5b                            popq    %rbx
// 21b: 41 5c                         popq    %r12
// 21d: 41 5d                         popq    %r13
// 21f: 41 5e                         popq    %r14
// 221: 41 5f                         popq    %r15
// 223: 5d                            popq    %rbp
// 224: ff e0                         jmpq    *%rax
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  PyExc_TypeError
// 230: 48 8b 38                      movq    (%rax), %rdi
// 233: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 238: 48 8b 50 18                   movq    0x18(%rax), %rdx
// 23c: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000023e:  R_X86_64_64  .rodata.str1.1+0x7c
// 246: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000248:  R_X86_64_64  _PyErr_FormatFromCause
// 250: 31 c0                         xorl    %eax, %eax
// 252: ff d1                         callq   *%rcx
// 254: 49 8b 04 24                   movq    (%r12), %rax
// 258: 48 85 c0                      testq   %rax, %rax
// 25b: 7f 22                         jg      0x27f <_JIT_ENTRY+0x27f>
// 25d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000025f:  R_X86_64_64  .rodata.str1.1
// 267: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000269:  R_X86_64_64  _Py_NegativeRefcount
// 271: be f8 02 00 00                movl    $0x2f8, %esi            # imm = 0x2F8
// 276: 4c 89 e2                      movq    %r12, %rdx
// 279: ff d0                         callq   *%rax
// 27b: 49 8b 04 24                   movq    (%r12), %rax
// 27f: 85 c0                         testl   %eax, %eax
// 281: 78 21                         js      0x2a4 <_JIT_ENTRY+0x2a4>
// 283: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000285:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 28d: ff d0                         callq   *%rax
// 28f: 49 ff 0c 24                   decq    (%r12)
// 293: 75 0f                         jne     0x2a4 <_JIT_ENTRY+0x2a4>
// 295: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000297:  R_X86_64_64  _Py_Dealloc
// 29f: 4c 89 e7                      movq    %r12, %rdi
// 2a2: ff d0                         callq   *%rax
// 2a4: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 2a8: 48 29 d8                      subq    %rbx, %rax
// 2ab: 48 83 c0 b8                   addq    $-0x48, %rax
// 2af: 48 c1 e8 03                   shrq    $0x3, %rax
// 2b3: 89 43 40                      movl    %eax, 0x40(%rbx)
// 2b6: 31 c0                         xorl    %eax, %eax
// 2b8: 48 83 c4 08                   addq    $0x8, %rsp
// 2bc: 5b                            popq    %rbx
// 2bd: 41 5c                         popq    %r12
// 2bf: 41 5d                         popq    %r13
// 2c1: 41 5e                         popq    %r14
// 2c3: 41 5f                         popq    %r15
// 2c5: 5d                            popq    %rbp
// 2c6: c3                            retq
// 2c7: 
static const unsigned char _LOAD_ATTR_SLOTplus_GET_ANEXT_code_body[712] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1d, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x3f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4f, 0x85, 0xc0, 0x79, 0x71, 0xe9, 0x8d, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x43, 0x02, 0x00, 0x00, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe5, 0x01, 0x49, 0x8b, 0x7c, 0xee, 0xf8, 0x48, 0x8b, 0x47, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc8, 0x0f, 0x84, 0xc3, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x48, 0x50, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x84, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x49, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x7b, 0xff, 0xd1, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x6c, 0x01, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xd3, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfb, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x68, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x56, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xeb, 0x45, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x31, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0xe9, 0xca, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x41, 0x50, 0xff, 0x50, 0x10, 0x49, 0x89, 0xc5, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xb7, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x4d, 0x89, 0x2c, 0xc6, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x38, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x50, 0x18, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xc0, 0xff, 0xd1, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xf8, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _LOAD_ATTR_SLOTplus_GET_ANEXT_code_holes[28] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x90, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xc8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xdb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyAsyncGen_Type, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyCoro_GetAwaitableIter, 0x0},
    {0x161, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x16b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x187, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x199, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1aa, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1c5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x1ef, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x7c},
    {0x248, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_FormatFromCause, 0x0},
    {0x25f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x269, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x285, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x297, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'async for' requires an iterator with __anext__ method, got %.100s\x00'async for' received an invalid object from __anext__: %.100s\x00"
// ba: 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_GET_ANEXT_data_body[193] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x5f, 0x5f, 0x61, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x5f, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x2c, 0x20, 0x67, 0x6f, 0x74, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73, 0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x5f, 0x5f, 0x61, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x5f, 0x3a, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_GET_ANEXT_data_holes[1];

// _LOAD_ATTR_SLOTplus_GET_AWAITABLE
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_GET_AWAITABLE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 26: 4d 85 ed                      testq   %r13, %r13
// 29: 74 1d                         je      0x48 <_JIT_ENTRY+0x48>
// 2b: 49 89 d7                      movq    %rdx, %r15
// 2e: 41 8b 45 00                   movl    (%r13), %eax
// 32: ff c0                         incl    %eax
// 34: 75 3f                         jne     0x75 <_JIT_ENTRY+0x75>
// 36: 49 8b 04 24                   movq    (%r12), %rax
// 3a: 48 85 c0                      testq   %rax, %rax
// 3d: 7e 4f                         jle     0x8e <_JIT_ENTRY+0x8e>
// 3f: 85 c0                         testl   %eax, %eax
// 41: 79 71                         jns     0xb4 <_JIT_ENTRY+0xb4>
// 43: e9 8d 00 00 00                jmp     0xd5 <_JIT_ENTRY+0xd5>
// 48: 49 29 de                      subq    %rbx, %r14
// 4b: 49 83 c6 b8                   addq    $-0x48, %r14
// 4f: 49 c1 ee 03                   shrq    $0x3, %r14
// 53: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 57: 48 8b 03                      movq    (%rbx), %rax
// 5a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005c:  R_X86_64_64  _JIT_TARGET
// 64: 89 c9                         movl    %ecx, %ecx
// 66: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 6a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 70: e9 74 02 00 00                jmp     0x2e9 <_JIT_ENTRY+0x2e9>
// 75: 41 89 45 00                   movl    %eax, (%r13)
// 79: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007b:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 83: ff d0                         callq   *%rax
// 85: 49 8b 04 24                   movq    (%r12), %rax
// 89: 48 85 c0                      testq   %rax, %rax
// 8c: 7f b1                         jg      0x3f <_JIT_ENTRY+0x3f>
// 8e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000090:  R_X86_64_64  .rodata.str1.1
// 98: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009a:  R_X86_64_64  _Py_NegativeRefcount
// a2: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a7: 4c 89 e2                      movq    %r12, %rdx
// aa: ff d0                         callq   *%rax
// ac: 49 8b 04 24                   movq    (%r12), %rax
// b0: 85 c0                         testl   %eax, %eax
// b2: 78 21                         js      0xd5 <_JIT_ENTRY+0xd5>
// b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// be: ff d0                         callq   *%rax
// c0: 49 ff 0c 24                   decq    (%r12)
// c4: 75 0f                         jne     0xd5 <_JIT_ENTRY+0xd5>
// c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c8:  R_X86_64_64  _Py_Dealloc
// d0: 4c 89 e7                      movq    %r12, %rdi
// d3: ff d0                         callq   *%rax
// d5: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000db:  R_X86_64_64  _JIT_OPARG
// e3: a8 01                         testb   $0x1, %al
// e5: 74 07                         je      0xee <_JIT_ENTRY+0xee>
// e7: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// ee: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000000f0:  R_X86_64_64  _JIT_OPARG
// f8: 83 e5 01                      andl    $0x1, %ebp
// fb: 4d 8b 6c ee f8                movq    -0x8(%r14,%rbp,8), %r13
// 100: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000102:  R_X86_64_64  _PyCoro_GetAwaitableIter
// 10a: 4c 89 ef                      movq    %r13, %rdi
// 10d: ff d0                         callq   *%rax
// 10f: 49 89 c4                      movq    %rax, %r12
// 112: 48 85 c0                      testq   %rax, %rax
// 115: 74 0f                         je      0x126 <_JIT_ENTRY+0x126>
// 117: 49 8b 45 00                   movq    (%r13), %rax
// 11b: 48 85 c0                      testq   %rax, %rax
// 11e: 7e 2f                         jle     0x14f <_JIT_ENTRY+0x14f>
// 120: 85 c0                         testl   %eax, %eax
// 122: 79 51                         jns     0x175 <_JIT_ENTRY+0x175>
// 124: eb 65                         jmp     0x18b <_JIT_ENTRY+0x18b>
// 126: 49 8b 75 08                   movq    0x8(%r13), %rsi
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _JIT_OPARG
// 134: 0f b7 d0                      movzwl  %ax, %edx
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  _PyEval_FormatAwaitableError
// 141: 4c 89 ff                      movq    %r15, %rdi
// 144: ff d0                         callq   *%rax
// 146: 49 8b 45 00                   movq    (%r13), %rax
// 14a: 48 85 c0                      testq   %rax, %rax
// 14d: 7f d1                         jg      0x120 <_JIT_ENTRY+0x120>
// 14f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000151:  R_X86_64_64  .rodata.str1.1
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  _Py_NegativeRefcount
// 163: be 0c 03 00 00                movl    $0x30c, %esi            # imm = 0x30C
// 168: 4c 89 ea                      movq    %r13, %rdx
// 16b: ff d0                         callq   *%rax
// 16d: 49 8b 45 00                   movq    (%r13), %rax
// 171: 85 c0                         testl   %eax, %eax
// 173: 78 16                         js      0x18b <_JIT_ENTRY+0x18b>
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17f: ff d0                         callq   *%rax
// 181: 49 ff 4d 00                   decq    (%r13)
// 185: 0f 84 2e 01 00 00             je      0x2b9 <_JIT_ENTRY+0x2b9>
// 18b: 4d 85 e4                      testq   %r12, %r12
// 18e: 0f 84 3d 01 00 00             je      0x2d1 <_JIT_ENTRY+0x2d1>
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  PyCoro_Type
// 19e: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 1a3: 74 36                         je      0x1db <_JIT_ENTRY+0x1db>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _JIT_OPARG
// 1af: 83 e0 01                      andl    $0x1, %eax
// 1b2: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 1b6: 4d 89 64 c6 f8                movq    %r12, -0x8(%r14,%rax,8)
// 1bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bd:  R_X86_64_64  _JIT_CONTINUE
// 1c5: 48 89 df                      movq    %rbx, %rdi
// 1c8: 4c 89 fa                      movq    %r15, %rdx
// 1cb: 48 83 c4 08                   addq    $0x8, %rsp
// 1cf: 5b                            popq    %rbx
// 1d0: 41 5c                         popq    %r12
// 1d2: 41 5d                         popq    %r13
// 1d4: 41 5e                         popq    %r14
// 1d6: 41 5f                         popq    %r15
// 1d8: 5d                            popq    %rbp
// 1d9: ff e0                         jmpq    *%rax
// 1db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dd:  R_X86_64_64  _PyGen_yf
// 1e5: 4c 89 e7                      movq    %r12, %rdi
// 1e8: ff d0                         callq   *%rax
// 1ea: 48 85 c0                      testq   %rax, %rax
// 1ed: 74 b6                         je      0x1a5 <_JIT_ENTRY+0x1a5>
// 1ef: 49 89 c5                      movq    %rax, %r13
// 1f2: 48 8b 00                      movq    (%rax), %rax
// 1f5: 48 85 c0                      testq   %rax, %rax
// 1f8: 7f 22                         jg      0x21c <_JIT_ENTRY+0x21c>
// 1fa: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001fc:  R_X86_64_64  .rodata.str1.1
// 204: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000206:  R_X86_64_64  _Py_NegativeRefcount
// 20e: be 13 03 00 00                movl    $0x313, %esi            # imm = 0x313
// 213: 4c 89 ea                      movq    %r13, %rdx
// 216: ff d0                         callq   *%rax
// 218: 49 8b 45 00                   movq    (%r13), %rax
// 21c: 85 c0                         testl   %eax, %eax
// 21e: 78 21                         js      0x241 <_JIT_ENTRY+0x241>
// 220: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000222:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 22a: ff d0                         callq   *%rax
// 22c: 49 ff 4d 00                   decq    (%r13)
// 230: 75 0f                         jne     0x241 <_JIT_ENTRY+0x241>
// 232: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000234:  R_X86_64_64  _Py_Dealloc
// 23c: 4c 89 ef                      movq    %r13, %rdi
// 23f: ff d0                         callq   *%rax
// 241: 49 8b 04 24                   movq    (%r12), %rax
// 245: 48 85 c0                      testq   %rax, %rax
// 248: 7f 22                         jg      0x26c <_JIT_ENTRY+0x26c>
// 24a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000024c:  R_X86_64_64  .rodata.str1.1
// 254: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000256:  R_X86_64_64  _Py_NegativeRefcount
// 25e: be 14 03 00 00                movl    $0x314, %esi            # imm = 0x314
// 263: 4c 89 e2                      movq    %r12, %rdx
// 266: ff d0                         callq   *%rax
// 268: 49 8b 04 24                   movq    (%r12), %rax
// 26c: 85 c0                         testl   %eax, %eax
// 26e: 78 21                         js      0x291 <_JIT_ENTRY+0x291>
// 270: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000272:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 27a: ff d0                         callq   *%rax
// 27c: 49 ff 0c 24                   decq    (%r12)
// 280: 75 0f                         jne     0x291 <_JIT_ENTRY+0x291>
// 282: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000284:  R_X86_64_64  _Py_Dealloc
// 28c: 4c 89 e7                      movq    %r12, %rdi
// 28f: ff d0                         callq   *%rax
// 291: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000293:  R_X86_64_64  PyExc_RuntimeError
// 29b: 48 8b 30                      movq    (%rax), %rsi
// 29e: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002a0:  R_X86_64_64  .rodata.str1.1+0x39
// 2a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002aa:  R_X86_64_64  _PyErr_SetString
// 2b2: 4c 89 ff                      movq    %r15, %rdi
// 2b5: ff d0                         callq   *%rax
// 2b7: eb 18                         jmp     0x2d1 <_JIT_ENTRY+0x2d1>
// 2b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bb:  R_X86_64_64  _Py_Dealloc
// 2c3: 4c 89 ef                      movq    %r13, %rdi
// 2c6: ff d0                         callq   *%rax
// 2c8: 4d 85 e4                      testq   %r12, %r12
// 2cb: 0f 85 c3 fe ff ff             jne     0x194 <_JIT_ENTRY+0x194>
// 2d1: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 2d5: 48 83 c0 f8                   addq    $-0x8, %rax
// 2d9: 48 29 d8                      subq    %rbx, %rax
// 2dc: 48 83 c0 b8                   addq    $-0x48, %rax
// 2e0: 48 c1 e8 03                   shrq    $0x3, %rax
// 2e4: 89 43 40                      movl    %eax, 0x40(%rbx)
// 2e7: 31 c0                         xorl    %eax, %eax
// 2e9: 48 83 c4 08                   addq    $0x8, %rsp
// 2ed: 5b                            popq    %rbx
// 2ee: 41 5c                         popq    %r12
// 2f0: 41 5d                         popq    %r13
// 2f2: 41 5e                         popq    %r14
// 2f4: 41 5f                         popq    %r15
// 2f6: 5d                            popq    %rbp
// 2f7: c3                            retq
// 2f8: 
static const unsigned char _LOAD_ATTR_SLOTplus_GET_AWAITABLE_code_body[761] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1d, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x3f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4f, 0x85, 0xc0, 0x79, 0x71, 0xe9, 0x8d, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x74, 0x02, 0x00, 0x00, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe5, 0x01, 0x4d, 0x8b, 0x6c, 0xee, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x48, 0x85, 0xc0, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x2f, 0x85, 0xc0, 0x79, 0x51, 0xeb, 0x65, 0x49, 0x8b, 0x75, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xd1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x0c, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x2e, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0x3d, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x74, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x4d, 0x89, 0x64, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0xb6, 0x49, 0x89, 0xc5, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x13, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x14, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xeb, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x0f, 0x85, 0xc3, 0xfe, 0xff, 0xff, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x83, 0xc0, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _LOAD_ATTR_SLOTplus_GET_AWAITABLE_code_holes[32] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x90, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xc8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xdb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyCoro_GetAwaitableIter, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatAwaitableError, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCoro_Type, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1bd, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyGen_yf, 0x0},
    {0x1fc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x206, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x222, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x234, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x256, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x272, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x284, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x293, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_RuntimeError, 0x0},
    {0x2a0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2aa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x2bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00coroutine is being awaited already\x00'
// 5c: 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_GET_AWAITABLE_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x63, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x20, 0x69, 0x73, 0x20, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x77, 0x61, 0x69, 0x74, 0x65, 0x64, 0x20, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_GET_AWAITABLE_data_holes[1];

// _LOAD_ATTR_SLOTplus_GET_ITER
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_GET_ITER.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 26: 4d 85 ed                      testq   %r13, %r13
// 29: 74 27                         je      0x52 <_JIT_ENTRY+0x52>
// 2b: 49 89 d7                      movq    %rdx, %r15
// 2e: 41 8b 45 00                   movl    (%r13), %eax
// 32: ff c0                         incl    %eax
// 34: 75 49                         jne     0x7f <_JIT_ENTRY+0x7f>
// 36: 49 8b 04 24                   movq    (%r12), %rax
// 3a: 48 85 c0                      testq   %rax, %rax
// 3d: 7e 59                         jle     0x98 <_JIT_ENTRY+0x98>
// 3f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000041:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 49: 85 c0                         testl   %eax, %eax
// 4b: 79 7b                         jns     0xc8 <_JIT_ENTRY+0xc8>
// 4d: e9 82 00 00 00                jmp     0xd4 <_JIT_ENTRY+0xd4>
// 52: 49 29 de                      subq    %rbx, %r14
// 55: 49 83 c6 b8                   addq    $-0x48, %r14
// 59: 49 c1 ee 03                   shrq    $0x3, %r14
// 5d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 61: 48 8b 03                      movq    (%rbx), %rax
// 64: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000066:  R_X86_64_64  _JIT_TARGET
// 6e: 89 c9                         movl    %ecx, %ecx
// 70: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 74: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 7a: e9 6a 01 00 00                jmp     0x1e9 <_JIT_ENTRY+0x1e9>
// 7f: 41 89 45 00                   movl    %eax, (%r13)
// 83: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000085:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 8d: ff d0                         callq   *%rax
// 8f: 49 8b 04 24                   movq    (%r12), %rax
// 93: 48 85 c0                      testq   %rax, %rax
// 96: 7f a7                         jg      0x3f <_JIT_ENTRY+0x3f>
// 98: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000009a:  R_X86_64_64  .rodata.str1.1
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _Py_NegativeRefcount
// ac: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// b1: 4c 89 e2                      movq    %r12, %rdx
// b4: ff d0                         callq   *%rax
// b6: 49 8b 04 24                   movq    (%r12), %rax
// ba: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000bc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c4: 85 c0                         testl   %eax, %eax
// c6: 78 0c                         js      0xd4 <_JIT_ENTRY+0xd4>
// c8: ff d1                         callq   *%rcx
// ca: 49 ff 0c 24                   decq    (%r12)
// ce: 0f 84 bf 00 00 00             je      0x193 <_JIT_ENTRY+0x193>
// d4: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// d8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000da:  R_X86_64_64  _JIT_OPARG
// e2: a8 01                         testb   $0x1, %al
// e4: 74 07                         je      0xed <_JIT_ENTRY+0xed>
// e6: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// ed: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000000ef:  R_X86_64_64  _JIT_OPARG
// f7: 83 e5 01                      andl    $0x1, %ebp
// fa: 4d 8b 6c ee f8                movq    -0x8(%r14,%rbp,8), %r13
// ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000101:  R_X86_64_64  PyObject_GetIter
// 109: 4c 89 ef                      movq    %r13, %rdi
// 10c: ff d0                         callq   *%rax
// 10e: 49 89 c4                      movq    %rax, %r12
// 111: 49 8b 45 00                   movq    (%r13), %rax
// 115: 48 85 c0                      testq   %rax, %rax
// 118: 7e 06                         jle     0x120 <_JIT_ENTRY+0x120>
// 11a: 85 c0                         testl   %eax, %eax
// 11c: 79 28                         jns     0x146 <_JIT_ENTRY+0x146>
// 11e: eb 38                         jmp     0x158 <_JIT_ENTRY+0x158>
// 120: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000122:  R_X86_64_64  .rodata.str1.1
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_NegativeRefcount
// 134: be 4a 08 00 00                movl    $0x84a, %esi            # imm = 0x84A
// 139: 4c 89 ea                      movq    %r13, %rdx
// 13c: ff d0                         callq   *%rax
// 13e: 49 8b 45 00                   movq    (%r13), %rax
// 142: 85 c0                         testl   %eax, %eax
// 144: 78 12                         js      0x158 <_JIT_ENTRY+0x158>
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 150: ff d0                         callq   *%rax
// 152: 49 ff 4d 00                   decq    (%r13)
// 156: 74 65                         je      0x1bd <_JIT_ENTRY+0x1bd>
// 158: 4d 85 e4                      testq   %r12, %r12
// 15b: 74 74                         je      0x1d1 <_JIT_ENTRY+0x1d1>
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _JIT_OPARG
// 167: 83 e0 01                      andl    $0x1, %eax
// 16a: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 16e: 4d 89 64 c6 f8                movq    %r12, -0x8(%r14,%rax,8)
// 173: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000175:  R_X86_64_64  _JIT_CONTINUE
// 17d: 48 89 df                      movq    %rbx, %rdi
// 180: 4c 89 fa                      movq    %r15, %rdx
// 183: 48 83 c4 08                   addq    $0x8, %rsp
// 187: 5b                            popq    %rbx
// 188: 41 5c                         popq    %r12
// 18a: 41 5d                         popq    %r13
// 18c: 41 5e                         popq    %r14
// 18e: 41 5f                         popq    %r15
// 190: 5d                            popq    %rbp
// 191: ff e0                         jmpq    *%rax
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_Dealloc
// 19d: 4c 89 e7                      movq    %r12, %rdi
// 1a0: ff d0                         callq   *%rax
// 1a2: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 1a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a8:  R_X86_64_64  _JIT_OPARG
// 1b0: a8 01                         testb   $0x1, %al
// 1b2: 0f 85 2e ff ff ff             jne     0xe6 <_JIT_ENTRY+0xe6>
// 1b8: e9 30 ff ff ff                jmp     0xed <_JIT_ENTRY+0xed>
// 1bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bf:  R_X86_64_64  _Py_Dealloc
// 1c7: 4c 89 ef                      movq    %r13, %rdi
// 1ca: ff d0                         callq   *%rax
// 1cc: 4d 85 e4                      testq   %r12, %r12
// 1cf: 75 8c                         jne     0x15d <_JIT_ENTRY+0x15d>
// 1d1: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 1d5: 48 83 c0 f8                   addq    $-0x8, %rax
// 1d9: 48 29 d8                      subq    %rbx, %rax
// 1dc: 48 83 c0 b8                   addq    $-0x48, %rax
// 1e0: 48 c1 e8 03                   shrq    $0x3, %rax
// 1e4: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1e7: 31 c0                         xorl    %eax, %eax
// 1e9: 48 83 c4 08                   addq    $0x8, %rsp
// 1ed: 5b                            popq    %rbx
// 1ee: 41 5c                         popq    %r12
// 1f0: 41 5d                         popq    %r13
// 1f2: 41 5e                         popq    %r14
// 1f4: 41 5f                         popq    %r15
// 1f6: 5d                            popq    %rbp
// 1f7: c3                            retq
// 1f8: 
static const unsigned char _LOAD_ATTR_SLOTplus_GET_ITER_code_body[505] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x27, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x49, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x59, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x79, 0x7b, 0xe9, 0x82, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x6a, 0x01, 0x00, 0x00, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xa7, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x0c, 0xff, 0xd1, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xbf, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe5, 0x01, 0x4d, 0x8b, 0x6c, 0xee, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4a, 0x08, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x65, 0x4d, 0x85, 0xe4, 0x74, 0x74, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x4d, 0x89, 0x64, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x2e, 0xff, 0xff, 0xff, 0xe9, 0x30, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x75, 0x8c, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x83, 0xc0, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _LOAD_ATTR_SLOTplus_GET_ITER_code_holes[19] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x41, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x66, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x9a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xbc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xda, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x101, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetIter, 0x0},
    {0x122, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x175, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a8, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1bf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_GET_ITER_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_GET_ITER_data_holes[1];

// _LOAD_ATTR_SLOTplus_GET_LEN
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_GET_LEN.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f6                      movq    %rsi, %r14
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 74 1d                         je      0x46 <_JIT_ENTRY+0x46>
// 29: 49 89 d7                      movq    %rdx, %r15
// 2c: 41 8b 45 00                   movl    (%r13), %eax
// 30: ff c0                         incl    %eax
// 32: 75 3f                         jne     0x73 <_JIT_ENTRY+0x73>
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 4f                         jle     0x8c <_JIT_ENTRY+0x8c>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 71                         jns     0xb2 <_JIT_ENTRY+0xb2>
// 41: e9 82 00 00 00                jmp     0xc8 <_JIT_ENTRY+0xc8>
// 46: 49 29 de                      subq    %rbx, %r14
// 49: 49 83 c6 b8                   addq    $-0x48, %r14
// 4d: 49 c1 ee 03                   shrq    $0x3, %r14
// 51: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 55: 48 8b 03                      movq    (%rbx), %rax
// 58: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005a:  R_X86_64_64  _JIT_TARGET
// 62: 89 c9                         movl    %ecx, %ecx
// 64: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 68: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 6e: e9 ee 00 00 00                jmp     0x161 <_JIT_ENTRY+0x161>
// 73: 41 89 45 00                   movl    %eax, (%r13)
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 81: ff d0                         callq   *%rax
// 83: 49 8b 04 24                   movq    (%r12), %rax
// 87: 48 85 c0                      testq   %rax, %rax
// 8a: 7f b1                         jg      0x3d <_JIT_ENTRY+0x3d>
// 8c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008e:  R_X86_64_64  .rodata.str1.1
// 96: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000098:  R_X86_64_64  _Py_NegativeRefcount
// a0: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a5: 4c 89 e2                      movq    %r12, %rdx
// a8: ff d0                         callq   *%rax
// aa: 49 8b 04 24                   movq    (%r12), %rax
// ae: 85 c0                         testl   %eax, %eax
// b0: 78 16                         js      0xc8 <_JIT_ENTRY+0xc8>
// b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: ff d0                         callq   *%rax
// be: 49 ff 0c 24                   decq    (%r12)
// c2: 0f 84 a3 00 00 00             je      0x16b <_JIT_ENTRY+0x16b>
// c8: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ce:  R_X86_64_64  _JIT_OPARG
// d6: a8 01                         testb   $0x1, %al
// d8: 74 07                         je      0xe1 <_JIT_ENTRY+0xe1>
// da: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// e1: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 00000000000000e3:  R_X86_64_64  _JIT_OPARG
// eb: 41 83 e4 01                   andl    $0x1, %r12d
// ef: 4b 8b 7c e6 f8                movq    -0x8(%r14,%r12,8), %rdi
// f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f6:  R_X86_64_64  PyObject_Size
// fe: ff d0                         callq   *%rax
// 100: 48 85 c0                      testq   %rax, %rax
// 103: 78 48                         js      0x14d <_JIT_ENTRY+0x14d>
// 105: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000107:  R_X86_64_64  PyLong_FromSsize_t
// 10f: 48 89 c7                      movq    %rax, %rdi
// 112: ff d1                         callq   *%rcx
// 114: 48 85 c0                      testq   %rax, %rax
// 117: 74 34                         je      0x14d <_JIT_ENTRY+0x14d>
// 119: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000011b:  R_X86_64_64  _JIT_OPARG
// 123: 83 e1 01                      andl    $0x1, %ecx
// 126: 49 89 04 ce                   movq    %rax, (%r14,%rcx,8)
// 12a: 49 8d 34 ce                   leaq    (%r14,%rcx,8), %rsi
// 12e: 48 83 c6 08                   addq    $0x8, %rsi
// 132: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000134:  R_X86_64_64  _JIT_CONTINUE
// 13c: 48 89 df                      movq    %rbx, %rdi
// 13f: 4c 89 fa                      movq    %r15, %rdx
// 142: 5b                            popq    %rbx
// 143: 41 5c                         popq    %r12
// 145: 41 5d                         popq    %r13
// 147: 41 5e                         popq    %r14
// 149: 41 5f                         popq    %r15
// 14b: ff e0                         jmpq    *%rax
// 14d: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 151: 48 29 d8                      subq    %rbx, %rax
// 154: 48 83 c0 b8                   addq    $-0x48, %rax
// 158: 48 c1 e8 03                   shrq    $0x3, %rax
// 15c: 89 43 40                      movl    %eax, 0x40(%rbx)
// 15f: 31 c0                         xorl    %eax, %eax
// 161: 5b                            popq    %rbx
// 162: 41 5c                         popq    %r12
// 164: 41 5d                         popq    %r13
// 166: 41 5e                         popq    %r14
// 168: 41 5f                         popq    %r15
// 16a: c3                            retq
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_Dealloc
// 175: 4c 89 e7                      movq    %r12, %rdi
// 178: ff d0                         callq   *%rax
// 17a: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _JIT_OPARG
// 188: a8 01                         testb   $0x1, %al
// 18a: 0f 85 4a ff ff ff             jne     0xda <_JIT_ENTRY+0xda>
// 190: e9 4c ff ff ff                jmp     0xe1 <_JIT_ENTRY+0xe1>
// 195: 
static const unsigned char _LOAD_ATTR_SLOTplus_GET_LEN_code_body[406] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1d, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x3f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4f, 0x85, 0xc0, 0x79, 0x71, 0xe9, 0x82, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xee, 0x00, 0x00, 0x00, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xa3, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x83, 0xe4, 0x01, 0x4b, 0x8b, 0x7c, 0xe6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x78, 0x48, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x85, 0xc0, 0x74, 0x34, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe1, 0x01, 0x49, 0x89, 0x04, 0xce, 0x49, 0x8d, 0x34, 0xce, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x4a, 0xff, 0xff, 0xff, 0xe9, 0x4c, 0xff, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_GET_LEN_code_holes[15] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xe3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0x107, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0x11b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x134, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_GET_LEN_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_GET_LEN_data_holes[1];

// _LOAD_ATTR_SLOTplus_GET_YIELD_FROM_ITER
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_GET_YIELD_FROM_ITER.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f7                      movq    %rsi, %r15
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 26: 4d 85 ed                      testq   %r13, %r13
// 29: 74 1d                         je      0x48 <_JIT_ENTRY+0x48>
// 2b: 49 89 d6                      movq    %rdx, %r14
// 2e: 41 8b 45 00                   movl    (%r13), %eax
// 32: ff c0                         incl    %eax
// 34: 75 3f                         jne     0x75 <_JIT_ENTRY+0x75>
// 36: 49 8b 04 24                   movq    (%r12), %rax
// 3a: 48 85 c0                      testq   %rax, %rax
// 3d: 7e 4f                         jle     0x8e <_JIT_ENTRY+0x8e>
// 3f: 85 c0                         testl   %eax, %eax
// 41: 79 71                         jns     0xb4 <_JIT_ENTRY+0xb4>
// 43: e9 82 00 00 00                jmp     0xca <_JIT_ENTRY+0xca>
// 48: 49 29 df                      subq    %rbx, %r15
// 4b: 49 83 c7 b8                   addq    $-0x48, %r15
// 4f: 49 c1 ef 03                   shrq    $0x3, %r15
// 53: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 57: 48 8b 03                      movq    (%rbx), %rax
// 5a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005c:  R_X86_64_64  _JIT_TARGET
// 64: 89 c9                         movl    %ecx, %ecx
// 66: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 6a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 70: e9 b0 01 00 00                jmp     0x225 <_JIT_ENTRY+0x225>
// 75: 41 89 45 00                   movl    %eax, (%r13)
// 79: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007b:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 83: ff d0                         callq   *%rax
// 85: 49 8b 04 24                   movq    (%r12), %rax
// 89: 48 85 c0                      testq   %rax, %rax
// 8c: 7f b1                         jg      0x3f <_JIT_ENTRY+0x3f>
// 8e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000090:  R_X86_64_64  .rodata.str1.1
// 98: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009a:  R_X86_64_64  _Py_NegativeRefcount
// a2: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a7: 4c 89 e2                      movq    %r12, %rdx
// aa: ff d0                         callq   *%rax
// ac: 49 8b 04 24                   movq    (%r12), %rax
// b0: 85 c0                         testl   %eax, %eax
// b2: 78 16                         js      0xca <_JIT_ENTRY+0xca>
// b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// be: ff d0                         callq   *%rax
// c0: 49 ff 0c 24                   decq    (%r12)
// c4: 0f 84 fa 00 00 00             je      0x1c4 <_JIT_ENTRY+0x1c4>
// ca: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d0:  R_X86_64_64  _JIT_OPARG
// d8: a8 01                         testb   $0x1, %al
// da: 74 07                         je      0xe3 <_JIT_ENTRY+0xe3>
// dc: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// e3: 83 e0 01                      andl    $0x1, %eax
// e6: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// ea: 4d 8b 6c c7 f8                movq    -0x8(%r15,%rax,8), %r13
// ef: 49 8b 45 08                   movq    0x8(%r13), %rax
// f3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000f5:  R_X86_64_64  PyCoro_Type
// fd: 48 39 c8                      cmpq    %rcx, %rax
// 100: 74 7f                         je      0x181 <_JIT_ENTRY+0x181>
// 102: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000104:  R_X86_64_64  PyGen_Type
// 10c: 48 39 c8                      cmpq    %rcx, %rax
// 10f: 74 7e                         je      0x18f <_JIT_ENTRY+0x18f>
// 111: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000113:  R_X86_64_64  PyObject_GetIter
// 11b: 4c 89 ef                      movq    %r13, %rdi
// 11e: ff d0                         callq   *%rax
// 120: 48 85 c0                      testq   %rax, %rax
// 123: 0f 84 eb 00 00 00             je      0x214 <_JIT_ENTRY+0x214>
// 129: 48 89 c5                      movq    %rax, %rbp
// 12c: 49 8b 45 00                   movq    (%r13), %rax
// 130: 48 85 c0                      testq   %rax, %rax
// 133: 7f 22                         jg      0x157 <_JIT_ENTRY+0x157>
// 135: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000137:  R_X86_64_64  .rodata.str1.1
// 13f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000141:  R_X86_64_64  _Py_NegativeRefcount
// 149: be 6a 08 00 00                movl    $0x86a, %esi            # imm = 0x86A
// 14e: 4c 89 ea                      movq    %r13, %rdx
// 151: ff d0                         callq   *%rax
// 153: 49 8b 45 00                   movq    (%r13), %rax
// 157: 85 c0                         testl   %eax, %eax
// 159: 78 21                         js      0x17c <_JIT_ENTRY+0x17c>
// 15b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 165: ff d0                         callq   *%rax
// 167: 49 ff 4d 00                   decq    (%r13)
// 16b: 75 0f                         jne     0x17c <_JIT_ENTRY+0x17c>
// 16d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016f:  R_X86_64_64  _Py_Dealloc
// 177: 4c 89 ef                      movq    %r13, %rdi
// 17a: ff d0                         callq   *%rax
// 17c: 49 89 ed                      movq    %rbp, %r13
// 17f: eb 0e                         jmp     0x18f <_JIT_ENTRY+0x18f>
// 181: 48 8b 03                      movq    (%rbx), %rax
// 184: 0f b7 40 30                   movzwl  0x30(%rax), %eax
// 188: a9 80 01 00 00                testl   $0x180, %eax            # imm = 0x180
// 18d: 74 5f                         je      0x1ee <_JIT_ENTRY+0x1ee>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _JIT_OPARG
// 199: 83 e0 01                      andl    $0x1, %eax
// 19c: 4d 89 6c c7 f8                movq    %r13, -0x8(%r15,%rax,8)
// 1a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a3:  R_X86_64_64  _JIT_CONTINUE
// 1ab: 48 89 df                      movq    %rbx, %rdi
// 1ae: 4c 89 e6                      movq    %r12, %rsi
// 1b1: 4c 89 f2                      movq    %r14, %rdx
// 1b4: 48 83 c4 08                   addq    $0x8, %rsp
// 1b8: 5b                            popq    %rbx
// 1b9: 41 5c                         popq    %r12
// 1bb: 41 5d                         popq    %r13
// 1bd: 41 5e                         popq    %r14
// 1bf: 41 5f                         popq    %r15
// 1c1: 5d                            popq    %rbp
// 1c2: ff e0                         jmpq    *%rax
// 1c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c6:  R_X86_64_64  _Py_Dealloc
// 1ce: 4c 89 e7                      movq    %r12, %rdi
// 1d1: ff d0                         callq   *%rax
// 1d3: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// 1d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d9:  R_X86_64_64  _JIT_OPARG
// 1e1: a8 01                         testb   $0x1, %al
// 1e3: 0f 85 f3 fe ff ff             jne     0xdc <_JIT_ENTRY+0xdc>
// 1e9: e9 f5 fe ff ff                jmp     0xe3 <_JIT_ENTRY+0xe3>
// 1ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f0:  R_X86_64_64  PyExc_TypeError
// 1f8: 48 8b 30                      movq    (%rax), %rsi
// 1fb: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001fd:  R_X86_64_64  .rodata.str1.1+0x39
// 205: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000207:  R_X86_64_64  _PyErr_SetString
// 20f: 4c 89 f7                      movq    %r14, %rdi
// 212: ff d0                         callq   *%rax
// 214: 49 29 dc                      subq    %rbx, %r12
// 217: 49 83 c4 b8                   addq    $-0x48, %r12
// 21b: 49 c1 ec 03                   shrq    $0x3, %r12
// 21f: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 223: 31 c0                         xorl    %eax, %eax
// 225: 48 83 c4 08                   addq    $0x8, %rsp
// 229: 5b                            popq    %rbx
// 22a: 41 5c                         popq    %r12
// 22c: 41 5d                         popq    %r13
// 22e: 41 5e                         popq    %r14
// 230: 41 5f                         popq    %r15
// 232: 5d                            popq    %rbp
// 233: c3                            retq
// 234: 
static const unsigned char _LOAD_ATTR_SLOTplus_GET_YIELD_FROM_ITER_code_body[565] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1d, 0x49, 0x89, 0xd6, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x3f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4f, 0x85, 0xc0, 0x79, 0x71, 0xe9, 0x82, 0x00, 0x00, 0x00, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xb0, 0x01, 0x00, 0x00, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xfa, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x4d, 0x8d, 0x24, 0xc7, 0x4d, 0x8b, 0x6c, 0xc7, 0xf8, 0x49, 0x8b, 0x45, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc8, 0x74, 0x7f, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc8, 0x74, 0x7e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xeb, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x6a, 0x08, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xed, 0xeb, 0x0e, 0x48, 0x8b, 0x03, 0x0f, 0xb7, 0x40, 0x30, 0xa9, 0x80, 0x01, 0x00, 0x00, 0x74, 0x5f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x4d, 0x89, 0x6c, 0xc7, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0xf3, 0xfe, 0xff, 0xff, 0xe9, 0xf5, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _LOAD_ATTR_SLOTplus_GET_YIELD_FROM_ITER_code_holes[22] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x90, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCoro_Type, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyGen_Type, 0x0},
    {0x113, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetIter, 0x0},
    {0x137, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1c6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x207, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00cannot 'yield from' a coroutine object in a non-coroutine generator\x00"
// 7d: 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_GET_YIELD_FROM_ITER_data_body[129] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x27, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x27, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x6e, 0x6f, 0x6e, 0x2d, 0x63, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_GET_YIELD_FROM_ITER_data_holes[1];

// _LOAD_ATTR_SLOTplus_GUARD_BOTH_FLOAT
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_GUARD_BOTH_FLOAT.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f6                      movq    %rsi, %r14
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 0f 84 bf 00 00 00             je      0xec <_JIT_ENTRY+0xec>
// 2d: 49 89 d7                      movq    %rdx, %r15
// 30: 41 8b 45 00                   movl    (%r13), %eax
// 34: ff c0                         incl    %eax
// 36: 75 0f                         jne     0x47 <_JIT_ENTRY+0x47>
// 38: 49 8b 04 24                   movq    (%r12), %rax
// 3c: 48 85 c0                      testq   %rax, %rax
// 3f: 7e 1f                         jle     0x60 <_JIT_ENTRY+0x60>
// 41: 85 c0                         testl   %eax, %eax
// 43: 79 41                         jns     0x86 <_JIT_ENTRY+0x86>
// 45: eb 55                         jmp     0x9c <_JIT_ENTRY+0x9c>
// 47: 41 89 45 00                   movl    %eax, (%r13)
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 55: ff d0                         callq   *%rax
// 57: 49 8b 04 24                   movq    (%r12), %rax
// 5b: 48 85 c0                      testq   %rax, %rax
// 5e: 7f e1                         jg      0x41 <_JIT_ENTRY+0x41>
// 60: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000062:  R_X86_64_64  .rodata.str1.1
// 6a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006c:  R_X86_64_64  _Py_NegativeRefcount
// 74: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 79: 4c 89 e2                      movq    %r12, %rdx
// 7c: ff d0                         callq   *%rax
// 7e: 49 8b 04 24                   movq    (%r12), %rax
// 82: 85 c0                         testl   %eax, %eax
// 84: 78 16                         js      0x9c <_JIT_ENTRY+0x9c>
// 86: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000088:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 90: ff d0                         callq   *%rax
// 92: 49 ff 0c 24                   decq    (%r12)
// 96: 0f 84 80 00 00 00             je      0x11c <_JIT_ENTRY+0x11c>
// 9c: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _JIT_OPARG
// aa: a8 01                         testb   $0x1, %al
// ac: 74 07                         je      0xb5 <_JIT_ENTRY+0xb5>
// ae: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// b5: 83 e0 01                      andl    $0x1, %eax
// b8: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// bc: 49 8b 4c c6 f0                movq    -0x10(%r14,%rax,8), %rcx
// c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c3:  R_X86_64_64  PyFloat_Type
// cb: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// cf: 75 18                         jne     0xe9 <_JIT_ENTRY+0xe9>
// d1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d3:  R_X86_64_64  _JIT_OPARG
// db: 83 e1 01                      andl    $0x1, %ecx
// de: 49 8b 4c ce f8                movq    -0x8(%r14,%rcx,8), %rcx
// e3: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// e7: 74 5d                         je      0x146 <_JIT_ENTRY+0x146>
// e9: 49 89 f6                      movq    %rsi, %r14
// ec: 49 29 de                      subq    %rbx, %r14
// ef: 49 83 c6 b8                   addq    $-0x48, %r14
// f3: 49 c1 ee 03                   shrq    $0x3, %r14
// f7: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// fb: 48 8b 03                      movq    (%rbx), %rax
// fe: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000100:  R_X86_64_64  _JIT_TARGET
// 108: 89 c9                         movl    %ecx, %ecx
// 10a: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 112: 5b                            popq    %rbx
// 113: 41 5c                         popq    %r12
// 115: 41 5d                         popq    %r13
// 117: 41 5e                         popq    %r14
// 119: 41 5f                         popq    %r15
// 11b: c3                            retq
// 11c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011e:  R_X86_64_64  _Py_Dealloc
// 126: 4c 89 e7                      movq    %r12, %rdi
// 129: ff d0                         callq   *%rax
// 12b: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _JIT_OPARG
// 139: a8 01                         testb   $0x1, %al
// 13b: 0f 85 6d ff ff ff             jne     0xae <_JIT_ENTRY+0xae>
// 141: e9 6f ff ff ff                jmp     0xb5 <_JIT_ENTRY+0xb5>
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _JIT_CONTINUE
// 150: 48 89 df                      movq    %rbx, %rdi
// 153: 4c 89 fa                      movq    %r15, %rdx
// 156: 5b                            popq    %rbx
// 157: 41 5c                         popq    %r12
// 159: 41 5d                         popq    %r13
// 15b: 41 5e                         popq    %r14
// 15d: 41 5f                         popq    %r15
// 15f: ff e0                         jmpq    *%rax
// 161: 
static const unsigned char _LOAD_ATTR_SLOTplus_GUARD_BOTH_FLOAT_code_body[354] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xbf, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1f, 0x85, 0xc0, 0x79, 0x41, 0xeb, 0x55, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x80, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x49, 0x8b, 0x4c, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x41, 0x08, 0x75, 0x18, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe1, 0x01, 0x49, 0x8b, 0x4c, 0xce, 0xf8, 0x48, 0x39, 0x41, 0x08, 0x74, 0x5d, 0x49, 0x89, 0xf6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x6d, 0xff, 0xff, 0xff, 0xe9, 0x6f, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _LOAD_ATTR_SLOTplus_GUARD_BOTH_FLOAT_code_holes[13] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_Type, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x100, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x11e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_GUARD_BOTH_FLOAT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_GUARD_BOTH_FLOAT_data_holes[1];

// _LOAD_ATTR_SLOTplus_GUARD_BOTH_INT
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_GUARD_BOTH_INT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f6                      movq    %rsi, %r14
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 0f 84 bf 00 00 00             je      0xec <_JIT_ENTRY+0xec>
// 2d: 49 89 d7                      movq    %rdx, %r15
// 30: 41 8b 45 00                   movl    (%r13), %eax
// 34: ff c0                         incl    %eax
// 36: 75 0f                         jne     0x47 <_JIT_ENTRY+0x47>
// 38: 49 8b 04 24                   movq    (%r12), %rax
// 3c: 48 85 c0                      testq   %rax, %rax
// 3f: 7e 1f                         jle     0x60 <_JIT_ENTRY+0x60>
// 41: 85 c0                         testl   %eax, %eax
// 43: 79 41                         jns     0x86 <_JIT_ENTRY+0x86>
// 45: eb 55                         jmp     0x9c <_JIT_ENTRY+0x9c>
// 47: 41 89 45 00                   movl    %eax, (%r13)
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 55: ff d0                         callq   *%rax
// 57: 49 8b 04 24                   movq    (%r12), %rax
// 5b: 48 85 c0                      testq   %rax, %rax
// 5e: 7f e1                         jg      0x41 <_JIT_ENTRY+0x41>
// 60: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000062:  R_X86_64_64  .rodata.str1.1
// 6a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006c:  R_X86_64_64  _Py_NegativeRefcount
// 74: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 79: 4c 89 e2                      movq    %r12, %rdx
// 7c: ff d0                         callq   *%rax
// 7e: 49 8b 04 24                   movq    (%r12), %rax
// 82: 85 c0                         testl   %eax, %eax
// 84: 78 16                         js      0x9c <_JIT_ENTRY+0x9c>
// 86: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000088:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 90: ff d0                         callq   *%rax
// 92: 49 ff 0c 24                   decq    (%r12)
// 96: 0f 84 80 00 00 00             je      0x11c <_JIT_ENTRY+0x11c>
// 9c: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _JIT_OPARG
// aa: a8 01                         testb   $0x1, %al
// ac: 74 07                         je      0xb5 <_JIT_ENTRY+0xb5>
// ae: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// b5: 83 e0 01                      andl    $0x1, %eax
// b8: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// bc: 49 8b 4c c6 f0                movq    -0x10(%r14,%rax,8), %rcx
// c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c3:  R_X86_64_64  PyLong_Type
// cb: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// cf: 75 18                         jne     0xe9 <_JIT_ENTRY+0xe9>
// d1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d3:  R_X86_64_64  _JIT_OPARG
// db: 83 e1 01                      andl    $0x1, %ecx
// de: 49 8b 4c ce f8                movq    -0x8(%r14,%rcx,8), %rcx
// e3: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// e7: 74 5d                         je      0x146 <_JIT_ENTRY+0x146>
// e9: 49 89 f6                      movq    %rsi, %r14
// ec: 49 29 de                      subq    %rbx, %r14
// ef: 49 83 c6 b8                   addq    $-0x48, %r14
// f3: 49 c1 ee 03                   shrq    $0x3, %r14
// f7: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// fb: 48 8b 03                      movq    (%rbx), %rax
// fe: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000100:  R_X86_64_64  _JIT_TARGET
// 108: 89 c9                         movl    %ecx, %ecx
// 10a: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 112: 5b                            popq    %rbx
// 113: 41 5c                         popq    %r12
// 115: 41 5d                         popq    %r13
// 117: 41 5e                         popq    %r14
// 119: 41 5f                         popq    %r15
// 11b: c3                            retq
// 11c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011e:  R_X86_64_64  _Py_Dealloc
// 126: 4c 89 e7                      movq    %r12, %rdi
// 129: ff d0                         callq   *%rax
// 12b: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _JIT_OPARG
// 139: a8 01                         testb   $0x1, %al
// 13b: 0f 85 6d ff ff ff             jne     0xae <_JIT_ENTRY+0xae>
// 141: e9 6f ff ff ff                jmp     0xb5 <_JIT_ENTRY+0xb5>
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _JIT_CONTINUE
// 150: 48 89 df                      movq    %rbx, %rdi
// 153: 4c 89 fa                      movq    %r15, %rdx
// 156: 5b                            popq    %rbx
// 157: 41 5c                         popq    %r12
// 159: 41 5d                         popq    %r13
// 15b: 41 5e                         popq    %r14
// 15d: 41 5f                         popq    %r15
// 15f: ff e0                         jmpq    *%rax
// 161: 
static const unsigned char _LOAD_ATTR_SLOTplus_GUARD_BOTH_INT_code_body[354] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xbf, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1f, 0x85, 0xc0, 0x79, 0x41, 0xeb, 0x55, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x80, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x49, 0x8b, 0x4c, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x41, 0x08, 0x75, 0x18, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe1, 0x01, 0x49, 0x8b, 0x4c, 0xce, 0xf8, 0x48, 0x39, 0x41, 0x08, 0x74, 0x5d, 0x49, 0x89, 0xf6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x6d, 0xff, 0xff, 0xff, 0xe9, 0x6f, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _LOAD_ATTR_SLOTplus_GUARD_BOTH_INT_code_holes[13] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x100, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x11e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_GUARD_BOTH_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_GUARD_BOTH_INT_data_holes[1];

// _LOAD_ATTR_SLOTplus_GUARD_BOTH_UNICODE
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_GUARD_BOTH_UNICODE.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f6                      movq    %rsi, %r14
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 0f 84 bf 00 00 00             je      0xec <_JIT_ENTRY+0xec>
// 2d: 49 89 d7                      movq    %rdx, %r15
// 30: 41 8b 45 00                   movl    (%r13), %eax
// 34: ff c0                         incl    %eax
// 36: 75 0f                         jne     0x47 <_JIT_ENTRY+0x47>
// 38: 49 8b 04 24                   movq    (%r12), %rax
// 3c: 48 85 c0                      testq   %rax, %rax
// 3f: 7e 1f                         jle     0x60 <_JIT_ENTRY+0x60>
// 41: 85 c0                         testl   %eax, %eax
// 43: 79 41                         jns     0x86 <_JIT_ENTRY+0x86>
// 45: eb 55                         jmp     0x9c <_JIT_ENTRY+0x9c>
// 47: 41 89 45 00                   movl    %eax, (%r13)
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 55: ff d0                         callq   *%rax
// 57: 49 8b 04 24                   movq    (%r12), %rax
// 5b: 48 85 c0                      testq   %rax, %rax
// 5e: 7f e1                         jg      0x41 <_JIT_ENTRY+0x41>
// 60: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000062:  R_X86_64_64  .rodata.str1.1
// 6a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006c:  R_X86_64_64  _Py_NegativeRefcount
// 74: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 79: 4c 89 e2                      movq    %r12, %rdx
// 7c: ff d0                         callq   *%rax
// 7e: 49 8b 04 24                   movq    (%r12), %rax
// 82: 85 c0                         testl   %eax, %eax
// 84: 78 16                         js      0x9c <_JIT_ENTRY+0x9c>
// 86: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000088:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 90: ff d0                         callq   *%rax
// 92: 49 ff 0c 24                   decq    (%r12)
// 96: 0f 84 80 00 00 00             je      0x11c <_JIT_ENTRY+0x11c>
// 9c: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _JIT_OPARG
// aa: a8 01                         testb   $0x1, %al
// ac: 74 07                         je      0xb5 <_JIT_ENTRY+0xb5>
// ae: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// b5: 83 e0 01                      andl    $0x1, %eax
// b8: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// bc: 49 8b 4c c6 f0                movq    -0x10(%r14,%rax,8), %rcx
// c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c3:  R_X86_64_64  PyUnicode_Type
// cb: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// cf: 75 18                         jne     0xe9 <_JIT_ENTRY+0xe9>
// d1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d3:  R_X86_64_64  _JIT_OPARG
// db: 83 e1 01                      andl    $0x1, %ecx
// de: 49 8b 4c ce f8                movq    -0x8(%r14,%rcx,8), %rcx
// e3: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// e7: 74 5d                         je      0x146 <_JIT_ENTRY+0x146>
// e9: 49 89 f6                      movq    %rsi, %r14
// ec: 49 29 de                      subq    %rbx, %r14
// ef: 49 83 c6 b8                   addq    $-0x48, %r14
// f3: 49 c1 ee 03                   shrq    $0x3, %r14
// f7: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// fb: 48 8b 03                      movq    (%rbx), %rax
// fe: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000100:  R_X86_64_64  _JIT_TARGET
// 108: 89 c9                         movl    %ecx, %ecx
// 10a: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 112: 5b                            popq    %rbx
// 113: 41 5c                         popq    %r12
// 115: 41 5d                         popq    %r13
// 117: 41 5e                         popq    %r14
// 119: 41 5f                         popq    %r15
// 11b: c3                            retq
// 11c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011e:  R_X86_64_64  _Py_Dealloc
// 126: 4c 89 e7                      movq    %r12, %rdi
// 129: ff d0                         callq   *%rax
// 12b: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _JIT_OPARG
// 139: a8 01                         testb   $0x1, %al
// 13b: 0f 85 6d ff ff ff             jne     0xae <_JIT_ENTRY+0xae>
// 141: e9 6f ff ff ff                jmp     0xb5 <_JIT_ENTRY+0xb5>
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _JIT_CONTINUE
// 150: 48 89 df                      movq    %rbx, %rdi
// 153: 4c 89 fa                      movq    %r15, %rdx
// 156: 5b                            popq    %rbx
// 157: 41 5c                         popq    %r12
// 159: 41 5d                         popq    %r13
// 15b: 41 5e                         popq    %r14
// 15d: 41 5f                         popq    %r15
// 15f: ff e0                         jmpq    *%rax
// 161: 
static const unsigned char _LOAD_ATTR_SLOTplus_GUARD_BOTH_UNICODE_code_body[354] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xbf, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1f, 0x85, 0xc0, 0x79, 0x41, 0xeb, 0x55, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x80, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x49, 0x8b, 0x4c, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x41, 0x08, 0x75, 0x18, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe1, 0x01, 0x49, 0x8b, 0x4c, 0xce, 0xf8, 0x48, 0x39, 0x41, 0x08, 0x74, 0x5d, 0x49, 0x89, 0xf6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x6d, 0xff, 0xff, 0xff, 0xe9, 0x6f, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _LOAD_ATTR_SLOTplus_GUARD_BOTH_UNICODE_code_holes[13] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x100, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x11e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_GUARD_BOTH_UNICODE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_GUARD_BOTH_UNICODE_data_holes[1];

// _LOAD_ATTR_SLOTplus_GUARD_BUILTINS_VERSION
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_GUARD_BUILTINS_VERSION.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 48 89 f3                      movq    %rsi, %rbx
// c: 49 89 fe                      movq    %rdi, %r14
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 0f 84 d7 00 00 00             je      0x104 <_JIT_ENTRY+0x104>
// 2d: 49 89 d7                      movq    %rdx, %r15
// 30: 41 8b 45 00                   movl    (%r13), %eax
// 34: ff c0                         incl    %eax
// 36: 75 0f                         jne     0x47 <_JIT_ENTRY+0x47>
// 38: 49 8b 04 24                   movq    (%r12), %rax
// 3c: 48 85 c0                      testq   %rax, %rax
// 3f: 7e 1f                         jle     0x60 <_JIT_ENTRY+0x60>
// 41: 85 c0                         testl   %eax, %eax
// 43: 79 41                         jns     0x86 <_JIT_ENTRY+0x86>
// 45: eb 55                         jmp     0x9c <_JIT_ENTRY+0x9c>
// 47: 41 89 45 00                   movl    %eax, (%r13)
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 55: ff d0                         callq   *%rax
// 57: 49 8b 04 24                   movq    (%r12), %rax
// 5b: 48 85 c0                      testq   %rax, %rax
// 5e: 7f e1                         jg      0x41 <_JIT_ENTRY+0x41>
// 60: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000062:  R_X86_64_64  .rodata.str1.1
// 6a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006c:  R_X86_64_64  _Py_NegativeRefcount
// 74: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 79: 4c 89 e2                      movq    %r12, %rdx
// 7c: ff d0                         callq   *%rax
// 7e: 49 8b 04 24                   movq    (%r12), %rax
// 82: 85 c0                         testl   %eax, %eax
// 84: 78 16                         js      0x9c <_JIT_ENTRY+0x9c>
// 86: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000088:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 90: ff d0                         callq   *%rax
// 92: 49 ff 0c 24                   decq    (%r12)
// 96: 0f 84 98 00 00 00             je      0x134 <_JIT_ENTRY+0x134>
// 9c: 4c 89 6b f8                   movq    %r13, -0x8(%rbx)
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _JIT_OPARG
// aa: a8 01                         testb   $0x1, %al
// ac: 74 07                         je      0xb5 <_JIT_ENTRY+0xb5>
// ae: 48 c7 03 00 00 00 00          movq    $0x0, (%rbx)
// b5: 83 e0 01                      andl    $0x1, %eax
// b8: 48 8d 1c c3                   leaq    (%rbx,%rax,8), %rbx
// bc: 49 8b 46 20                   movq    0x20(%r14), %rax
// c0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c2:  R_X86_64_64  PyDict_Type
// ca: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// ce: 75 34                         jne     0x104 <_JIT_ENTRY+0x104>
// d0: 48 8b 40 20                   movq    0x20(%rax), %rax
// d4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d6:  R_X86_64_64  _JIT_OPERAND
// de: 0f b7 c9                      movzwl  %cx, %ecx
// e1: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
// e4: 75 1e                         jne     0x104 <_JIT_ENTRY+0x104>
// e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e8:  R_X86_64_64  _JIT_CONTINUE
// f0: 4c 89 f7                      movq    %r14, %rdi
// f3: 48 89 de                      movq    %rbx, %rsi
// f6: 4c 89 fa                      movq    %r15, %rdx
// f9: 5b                            popq    %rbx
// fa: 41 5c                         popq    %r12
// fc: 41 5d                         popq    %r13
// fe: 41 5e                         popq    %r14
// 100: 41 5f                         popq    %r15
// 102: ff e0                         jmpq    *%rax
// 104: 4c 29 f3                      subq    %r14, %rbx
// 107: 48 83 c3 b8                   addq    $-0x48, %rbx
// 10b: 48 c1 eb 03                   shrq    $0x3, %rbx
// 10f: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 113: 49 8b 06                      movq    (%r14), %rax
// 116: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000118:  R_X86_64_64  _JIT_TARGET
// 120: 89 c9                         movl    %ecx, %ecx
// 122: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 12a: 5b                            popq    %rbx
// 12b: 41 5c                         popq    %r12
// 12d: 41 5d                         popq    %r13
// 12f: 41 5e                         popq    %r14
// 131: 41 5f                         popq    %r15
// 133: c3                            retq
// 134: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000136:  R_X86_64_64  _Py_Dealloc
// 13e: 4c 89 e7                      movq    %r12, %rdi
// 141: ff d0                         callq   *%rax
// 143: 4c 89 6b f8                   movq    %r13, -0x8(%rbx)
// 147: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000149:  R_X86_64_64  _JIT_OPARG
// 151: a8 01                         testb   $0x1, %al
// 153: 0f 85 55 ff ff ff             jne     0xae <_JIT_ENTRY+0xae>
// 159: e9 57 ff ff ff                jmp     0xb5 <_JIT_ENTRY+0xb5>
// 15e: 
static const unsigned char _LOAD_ATTR_SLOTplus_GUARD_BUILTINS_VERSION_code_body[351] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xd7, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1f, 0x85, 0xc0, 0x79, 0x41, 0xeb, 0x55, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x98, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x6b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x48, 0xc7, 0x03, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x48, 0x8d, 0x1c, 0xc3, 0x49, 0x8b, 0x46, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x34, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x39, 0x48, 0x0c, 0x75, 0x1e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x55, 0xff, 0xff, 0xff, 0xe9, 0x57, 0xff, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_GUARD_BUILTINS_VERSION_code_holes[13] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0xe8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x136, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x149, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_GUARD_BUILTINS_VERSION_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_GUARD_BUILTINS_VERSION_data_holes[1];

// _LOAD_ATTR_SLOTplus_GUARD_DORV_VALUES
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_GUARD_DORV_VALUES.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f6                      movq    %rsi, %r14
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 0f 84 99 00 00 00             je      0xc6 <_JIT_ENTRY+0xc6>
// 2d: 49 89 d7                      movq    %rdx, %r15
// 30: 41 8b 45 00                   movl    (%r13), %eax
// 34: ff c0                         incl    %eax
// 36: 75 0f                         jne     0x47 <_JIT_ENTRY+0x47>
// 38: 49 8b 04 24                   movq    (%r12), %rax
// 3c: 48 85 c0                      testq   %rax, %rax
// 3f: 7e 1f                         jle     0x60 <_JIT_ENTRY+0x60>
// 41: 85 c0                         testl   %eax, %eax
// 43: 79 41                         jns     0x86 <_JIT_ENTRY+0x86>
// 45: eb 51                         jmp     0x98 <_JIT_ENTRY+0x98>
// 47: 41 89 45 00                   movl    %eax, (%r13)
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 55: ff d0                         callq   *%rax
// 57: 49 8b 04 24                   movq    (%r12), %rax
// 5b: 48 85 c0                      testq   %rax, %rax
// 5e: 7f e1                         jg      0x41 <_JIT_ENTRY+0x41>
// 60: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000062:  R_X86_64_64  .rodata.str1.1
// 6a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006c:  R_X86_64_64  _Py_NegativeRefcount
// 74: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 79: 4c 89 e2                      movq    %r12, %rdx
// 7c: ff d0                         callq   *%rax
// 7e: 49 8b 04 24                   movq    (%r12), %rax
// 82: 85 c0                         testl   %eax, %eax
// 84: 78 12                         js      0x98 <_JIT_ENTRY+0x98>
// 86: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000088:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 90: ff d0                         callq   *%rax
// 92: 49 ff 0c 24                   decq    (%r12)
// 96: 74 79                         je      0x111 <_JIT_ENTRY+0x111>
// 98: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 9c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009e:  R_X86_64_64  _JIT_OPARG
// a6: a8 01                         testb   $0x1, %al
// a8: 74 07                         je      0xb1 <_JIT_ENTRY+0xb1>
// aa: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// b1: 83 e0 01                      andl    $0x1, %eax
// b4: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// b8: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// bd: f6 40 e8 01                   testb   $0x1, -0x18(%rax)
// c1: 75 33                         jne     0xf6 <_JIT_ENTRY+0xf6>
// c3: 49 89 f6                      movq    %rsi, %r14
// c6: 49 29 de                      subq    %rbx, %r14
// c9: 49 83 c6 b8                   addq    $-0x48, %r14
// cd: 49 c1 ee 03                   shrq    $0x3, %r14
// d1: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// d5: 48 8b 03                      movq    (%rbx), %rax
// d8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000da:  R_X86_64_64  _JIT_TARGET
// e2: 89 c9                         movl    %ecx, %ecx
// e4: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// ec: 5b                            popq    %rbx
// ed: 41 5c                         popq    %r12
// ef: 41 5d                         popq    %r13
// f1: 41 5e                         popq    %r14
// f3: 41 5f                         popq    %r15
// f5: c3                            retq
// f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f8:  R_X86_64_64  _JIT_CONTINUE
// 100: 48 89 df                      movq    %rbx, %rdi
// 103: 4c 89 fa                      movq    %r15, %rdx
// 106: 5b                            popq    %rbx
// 107: 41 5c                         popq    %r12
// 109: 41 5d                         popq    %r13
// 10b: 41 5e                         popq    %r14
// 10d: 41 5f                         popq    %r15
// 10f: ff e0                         jmpq    *%rax
// 111: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000113:  R_X86_64_64  _Py_Dealloc
// 11b: 4c 89 e7                      movq    %r12, %rdi
// 11e: ff d0                         callq   *%rax
// 120: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 124: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000126:  R_X86_64_64  _JIT_OPARG
// 12e: a8 01                         testb   $0x1, %al
// 130: 0f 85 74 ff ff ff             jne     0xaa <_JIT_ENTRY+0xaa>
// 136: e9 76 ff ff ff                jmp     0xb1 <_JIT_ENTRY+0xb1>
// 13b: 
static const unsigned char _LOAD_ATTR_SLOTplus_GUARD_DORV_VALUES_code_body[316] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x99, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1f, 0x85, 0xc0, 0x79, 0x41, 0xeb, 0x51, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x79, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0xf6, 0x40, 0xe8, 0x01, 0x75, 0x33, 0x49, 0x89, 0xf6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x74, 0xff, 0xff, 0xff, 0xe9, 0x76, 0xff, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_GUARD_DORV_VALUES_code_holes[11] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x9e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xda, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xf8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x113, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x126, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_GUARD_DORV_VALUES_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_GUARD_DORV_VALUES_data_holes[1];

// _LOAD_ATTR_SLOTplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f7                      movq    %rsi, %r15
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 0f 84 cf 00 00 00             je      0xfc <_JIT_ENTRY+0xfc>
// 2d: 49 89 d6                      movq    %rdx, %r14
// 30: 41 8b 45 00                   movl    (%r13), %eax
// 34: ff c0                         incl    %eax
// 36: 75 0f                         jne     0x47 <_JIT_ENTRY+0x47>
// 38: 49 8b 04 24                   movq    (%r12), %rax
// 3c: 48 85 c0                      testq   %rax, %rax
// 3f: 7e 1f                         jle     0x60 <_JIT_ENTRY+0x60>
// 41: 85 c0                         testl   %eax, %eax
// 43: 79 41                         jns     0x86 <_JIT_ENTRY+0x86>
// 45: eb 55                         jmp     0x9c <_JIT_ENTRY+0x9c>
// 47: 41 89 45 00                   movl    %eax, (%r13)
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 55: ff d0                         callq   *%rax
// 57: 49 8b 04 24                   movq    (%r12), %rax
// 5b: 48 85 c0                      testq   %rax, %rax
// 5e: 7f e1                         jg      0x41 <_JIT_ENTRY+0x41>
// 60: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000062:  R_X86_64_64  .rodata.str1.1
// 6a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006c:  R_X86_64_64  _Py_NegativeRefcount
// 74: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 79: 4c 89 e2                      movq    %r12, %rdx
// 7c: ff d0                         callq   *%rax
// 7e: 49 8b 04 24                   movq    (%r12), %rax
// 82: 85 c0                         testl   %eax, %eax
// 84: 78 16                         js      0x9c <_JIT_ENTRY+0x9c>
// 86: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000088:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 90: ff d0                         callq   *%rax
// 92: 49 ff 0c 24                   decq    (%r12)
// 96: 0f 84 90 00 00 00             je      0x12c <_JIT_ENTRY+0x12c>
// 9c: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _JIT_OPARG
// aa: a8 01                         testb   $0x1, %al
// ac: 74 07                         je      0xb5 <_JIT_ENTRY+0xb5>
// ae: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// b5: 83 e0 01                      andl    $0x1, %eax
// b8: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// bc: 49 8b 7c c7 f8                movq    -0x8(%r15,%rax,8), %rdi
// c1: f6 47 e8 01                   testb   $0x1, -0x18(%rdi)
// c5: 75 14                         jne     0xdb <_JIT_ENTRY+0xdb>
// c7: 48 8d 77 e8                   leaq    -0x18(%rdi), %rsi
// cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cd:  R_X86_64_64  _PyObject_MakeInstanceAttributesFromDict
// d5: ff d0                         callq   *%rax
// d7: 84 c0                         testb   %al, %al
// d9: 74 1e                         je      0xf9 <_JIT_ENTRY+0xf9>
// db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000dd:  R_X86_64_64  _JIT_CONTINUE
// e5: 48 89 df                      movq    %rbx, %rdi
// e8: 4c 89 e6                      movq    %r12, %rsi
// eb: 4c 89 f2                      movq    %r14, %rdx
// ee: 5b                            popq    %rbx
// ef: 41 5c                         popq    %r12
// f1: 41 5d                         popq    %r13
// f3: 41 5e                         popq    %r14
// f5: 41 5f                         popq    %r15
// f7: ff e0                         jmpq    *%rax
// f9: 4d 89 e7                      movq    %r12, %r15
// fc: 49 29 df                      subq    %rbx, %r15
// ff: 49 83 c7 b8                   addq    $-0x48, %r15
// 103: 49 c1 ef 03                   shrq    $0x3, %r15
// 107: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 10b: 48 8b 03                      movq    (%rbx), %rax
// 10e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000110:  R_X86_64_64  _JIT_TARGET
// 118: 89 c9                         movl    %ecx, %ecx
// 11a: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 122: 5b                            popq    %rbx
// 123: 41 5c                         popq    %r12
// 125: 41 5d                         popq    %r13
// 127: 41 5e                         popq    %r14
// 129: 41 5f                         popq    %r15
// 12b: c3                            retq
// 12c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012e:  R_X86_64_64  _Py_Dealloc
// 136: 4c 89 e7                      movq    %r12, %rdi
// 139: ff d0                         callq   *%rax
// 13b: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// 13f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000141:  R_X86_64_64  _JIT_OPARG
// 149: a8 01                         testb   $0x1, %al
// 14b: 0f 85 5d ff ff ff             jne     0xae <_JIT_ENTRY+0xae>
// 151: e9 5f ff ff ff                jmp     0xb5 <_JIT_ENTRY+0xb5>
// 156: 
static const unsigned char _LOAD_ATTR_SLOTplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT_code_body[343] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xcf, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd6, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1f, 0x85, 0xc0, 0x79, 0x41, 0xeb, 0x55, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x90, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x8b, 0x7c, 0xc7, 0xf8, 0xf6, 0x47, 0xe8, 0x01, 0x75, 0x14, 0x48, 0x8d, 0x77, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x84, 0xc0, 0x74, 0x1e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x4d, 0x89, 0xe7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x5d, 0xff, 0xff, 0xff, 0xe9, 0x5f, 0xff, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT_code_holes[12] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_MakeInstanceAttributesFromDict, 0x0},
    {0xdd, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x12e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT_data_holes[1];

// _LOAD_ATTR_SLOTplus_GUARD_GLOBALS_VERSION
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_GUARD_GLOBALS_VERSION.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 48 89 f3                      movq    %rsi, %rbx
// c: 49 89 fe                      movq    %rdi, %r14
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 0f 84 d7 00 00 00             je      0x104 <_JIT_ENTRY+0x104>
// 2d: 49 89 d7                      movq    %rdx, %r15
// 30: 41 8b 45 00                   movl    (%r13), %eax
// 34: ff c0                         incl    %eax
// 36: 75 0f                         jne     0x47 <_JIT_ENTRY+0x47>
// 38: 49 8b 04 24                   movq    (%r12), %rax
// 3c: 48 85 c0                      testq   %rax, %rax
// 3f: 7e 1f                         jle     0x60 <_JIT_ENTRY+0x60>
// 41: 85 c0                         testl   %eax, %eax
// 43: 79 41                         jns     0x86 <_JIT_ENTRY+0x86>
// 45: eb 55                         jmp     0x9c <_JIT_ENTRY+0x9c>
// 47: 41 89 45 00                   movl    %eax, (%r13)
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 55: ff d0                         callq   *%rax
// 57: 49 8b 04 24                   movq    (%r12), %rax
// 5b: 48 85 c0                      testq   %rax, %rax
// 5e: 7f e1                         jg      0x41 <_JIT_ENTRY+0x41>
// 60: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000062:  R_X86_64_64  .rodata.str1.1
// 6a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006c:  R_X86_64_64  _Py_NegativeRefcount
// 74: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 79: 4c 89 e2                      movq    %r12, %rdx
// 7c: ff d0                         callq   *%rax
// 7e: 49 8b 04 24                   movq    (%r12), %rax
// 82: 85 c0                         testl   %eax, %eax
// 84: 78 16                         js      0x9c <_JIT_ENTRY+0x9c>
// 86: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000088:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 90: ff d0                         callq   *%rax
// 92: 49 ff 0c 24                   decq    (%r12)
// 96: 0f 84 98 00 00 00             je      0x134 <_JIT_ENTRY+0x134>
// 9c: 4c 89 6b f8                   movq    %r13, -0x8(%rbx)
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _JIT_OPARG
// aa: a8 01                         testb   $0x1, %al
// ac: 74 07                         je      0xb5 <_JIT_ENTRY+0xb5>
// ae: 48 c7 03 00 00 00 00          movq    $0x0, (%rbx)
// b5: 83 e0 01                      andl    $0x1, %eax
// b8: 48 8d 1c c3                   leaq    (%rbx,%rax,8), %rbx
// bc: 49 8b 46 18                   movq    0x18(%r14), %rax
// c0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c2:  R_X86_64_64  PyDict_Type
// ca: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// ce: 75 34                         jne     0x104 <_JIT_ENTRY+0x104>
// d0: 48 8b 40 20                   movq    0x20(%rax), %rax
// d4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d6:  R_X86_64_64  _JIT_OPERAND
// de: 0f b7 c9                      movzwl  %cx, %ecx
// e1: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
// e4: 75 1e                         jne     0x104 <_JIT_ENTRY+0x104>
// e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e8:  R_X86_64_64  _JIT_CONTINUE
// f0: 4c 89 f7                      movq    %r14, %rdi
// f3: 48 89 de                      movq    %rbx, %rsi
// f6: 4c 89 fa                      movq    %r15, %rdx
// f9: 5b                            popq    %rbx
// fa: 41 5c                         popq    %r12
// fc: 41 5d                         popq    %r13
// fe: 41 5e                         popq    %r14
// 100: 41 5f                         popq    %r15
// 102: ff e0                         jmpq    *%rax
// 104: 4c 29 f3                      subq    %r14, %rbx
// 107: 48 83 c3 b8                   addq    $-0x48, %rbx
// 10b: 48 c1 eb 03                   shrq    $0x3, %rbx
// 10f: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 113: 49 8b 06                      movq    (%r14), %rax
// 116: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000118:  R_X86_64_64  _JIT_TARGET
// 120: 89 c9                         movl    %ecx, %ecx
// 122: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 12a: 5b                            popq    %rbx
// 12b: 41 5c                         popq    %r12
// 12d: 41 5d                         popq    %r13
// 12f: 41 5e                         popq    %r14
// 131: 41 5f                         popq    %r15
// 133: c3                            retq
// 134: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000136:  R_X86_64_64  _Py_Dealloc
// 13e: 4c 89 e7                      movq    %r12, %rdi
// 141: ff d0                         callq   *%rax
// 143: 4c 89 6b f8                   movq    %r13, -0x8(%rbx)
// 147: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000149:  R_X86_64_64  _JIT_OPARG
// 151: a8 01                         testb   $0x1, %al
// 153: 0f 85 55 ff ff ff             jne     0xae <_JIT_ENTRY+0xae>
// 159: e9 57 ff ff ff                jmp     0xb5 <_JIT_ENTRY+0xb5>
// 15e: 
static const unsigned char _LOAD_ATTR_SLOTplus_GUARD_GLOBALS_VERSION_code_body[351] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xd7, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1f, 0x85, 0xc0, 0x79, 0x41, 0xeb, 0x55, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x98, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x6b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x48, 0xc7, 0x03, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x48, 0x8d, 0x1c, 0xc3, 0x49, 0x8b, 0x46, 0x18, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x34, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x39, 0x48, 0x0c, 0x75, 0x1e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x55, 0xff, 0xff, 0xff, 0xe9, 0x57, 0xff, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_GUARD_GLOBALS_VERSION_code_holes[13] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0xe8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x136, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x149, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_GUARD_GLOBALS_VERSION_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_GUARD_GLOBALS_VERSION_data_holes[1];

// _LOAD_ATTR_SLOTplus_GUARD_IS_FALSE_POP
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_GUARD_IS_FALSE_POP.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f6                      movq    %rsi, %r14
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 0f 84 c3 00 00 00             je      0xf0 <_JIT_ENTRY+0xf0>
// 2d: 49 89 d7                      movq    %rdx, %r15
// 30: 41 8b 45 00                   movl    (%r13), %eax
// 34: ff c0                         incl    %eax
// 36: 75 0f                         jne     0x47 <_JIT_ENTRY+0x47>
// 38: 49 8b 04 24                   movq    (%r12), %rax
// 3c: 48 85 c0                      testq   %rax, %rax
// 3f: 7e 1f                         jle     0x60 <_JIT_ENTRY+0x60>
// 41: 85 c0                         testl   %eax, %eax
// 43: 79 41                         jns     0x86 <_JIT_ENTRY+0x86>
// 45: eb 55                         jmp     0x9c <_JIT_ENTRY+0x9c>
// 47: 41 89 45 00                   movl    %eax, (%r13)
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 55: ff d0                         callq   *%rax
// 57: 49 8b 04 24                   movq    (%r12), %rax
// 5b: 48 85 c0                      testq   %rax, %rax
// 5e: 7f e1                         jg      0x41 <_JIT_ENTRY+0x41>
// 60: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000062:  R_X86_64_64  .rodata.str1.1
// 6a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006c:  R_X86_64_64  _Py_NegativeRefcount
// 74: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 79: 4c 89 e2                      movq    %r12, %rdx
// 7c: ff d0                         callq   *%rax
// 7e: 49 8b 04 24                   movq    (%r12), %rax
// 82: 85 c0                         testl   %eax, %eax
// 84: 78 16                         js      0x9c <_JIT_ENTRY+0x9c>
// 86: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000088:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 90: ff d0                         callq   *%rax
// 92: 49 ff 0c 24                   decq    (%r12)
// 96: 0f 84 84 00 00 00             je      0x120 <_JIT_ENTRY+0x120>
// 9c: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _JIT_OPARG
// aa: a8 01                         testb   $0x1, %al
// ac: 74 07                         je      0xb5 <_JIT_ENTRY+0xb5>
// ae: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// b5: 83 e0 01                      andl    $0x1, %eax
// b8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ba:  R_X86_64_64  _Py_TrueStruct
// c2: 49 39 4c c6 f8                cmpq    %rcx, -0x8(%r14,%rax,8)
// c7: 74 23                         je      0xec <_JIT_ENTRY+0xec>
// c9: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// cd: 48 83 c6 f8                   addq    $-0x8, %rsi
// d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d3:  R_X86_64_64  _JIT_CONTINUE
// db: 48 89 df                      movq    %rbx, %rdi
// de: 4c 89 fa                      movq    %r15, %rdx
// e1: 5b                            popq    %rbx
// e2: 41 5c                         popq    %r12
// e4: 41 5d                         popq    %r13
// e6: 41 5e                         popq    %r14
// e8: 41 5f                         popq    %r15
// ea: ff e0                         jmpq    *%rax
// ec: 4d 8d 34 c6                   leaq    (%r14,%rax,8), %r14
// f0: 49 29 de                      subq    %rbx, %r14
// f3: 49 83 c6 b8                   addq    $-0x48, %r14
// f7: 49 c1 ee 03                   shrq    $0x3, %r14
// fb: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// ff: 48 8b 03                      movq    (%rbx), %rax
// 102: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000104:  R_X86_64_64  _JIT_TARGET
// 10c: 89 c9                         movl    %ecx, %ecx
// 10e: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 116: 5b                            popq    %rbx
// 117: 41 5c                         popq    %r12
// 119: 41 5d                         popq    %r13
// 11b: 41 5e                         popq    %r14
// 11d: 41 5f                         popq    %r15
// 11f: c3                            retq
// 120: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000122:  R_X86_64_64  _Py_Dealloc
// 12a: 4c 89 e7                      movq    %r12, %rdi
// 12d: ff d0                         callq   *%rax
// 12f: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 133: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000135:  R_X86_64_64  _JIT_OPARG
// 13d: a8 01                         testb   $0x1, %al
// 13f: 0f 85 69 ff ff ff             jne     0xae <_JIT_ENTRY+0xae>
// 145: e9 6b ff ff ff                jmp     0xb5 <_JIT_ENTRY+0xb5>
// 14a: 
static const unsigned char _LOAD_ATTR_SLOTplus_GUARD_IS_FALSE_POP_code_body[331] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xc3, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1f, 0x85, 0xc0, 0x79, 0x41, 0xeb, 0x55, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x84, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0xc6, 0xf8, 0x74, 0x23, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x4d, 0x8d, 0x34, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x69, 0xff, 0xff, 0xff, 0xe9, 0x6b, 0xff, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_GUARD_IS_FALSE_POP_code_holes[12] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x122, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_GUARD_IS_FALSE_POP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_GUARD_IS_FALSE_POP_data_holes[1];

// _LOAD_ATTR_SLOTplus_GUARD_IS_NONE_POP
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_GUARD_IS_NONE_POP.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f6                      movq    %rsi, %r14
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 0f 84 a0 00 00 00             je      0xcd <_JIT_ENTRY+0xcd>
// 2d: 49 89 d7                      movq    %rdx, %r15
// 30: 41 8b 45 00                   movl    (%r13), %eax
// 34: ff c0                         incl    %eax
// 36: 75 0f                         jne     0x47 <_JIT_ENTRY+0x47>
// 38: 49 8b 04 24                   movq    (%r12), %rax
// 3c: 48 85 c0                      testq   %rax, %rax
// 3f: 7e 1f                         jle     0x60 <_JIT_ENTRY+0x60>
// 41: 85 c0                         testl   %eax, %eax
// 43: 79 41                         jns     0x86 <_JIT_ENTRY+0x86>
// 45: eb 55                         jmp     0x9c <_JIT_ENTRY+0x9c>
// 47: 41 89 45 00                   movl    %eax, (%r13)
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 55: ff d0                         callq   *%rax
// 57: 49 8b 04 24                   movq    (%r12), %rax
// 5b: 48 85 c0                      testq   %rax, %rax
// 5e: 7f e1                         jg      0x41 <_JIT_ENTRY+0x41>
// 60: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000062:  R_X86_64_64  .rodata.str1.1
// 6a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006c:  R_X86_64_64  _Py_NegativeRefcount
// 74: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 79: 4c 89 e2                      movq    %r12, %rdx
// 7c: ff d0                         callq   *%rax
// 7e: 49 8b 04 24                   movq    (%r12), %rax
// 82: 85 c0                         testl   %eax, %eax
// 84: 78 16                         js      0x9c <_JIT_ENTRY+0x9c>
// 86: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000088:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 90: ff d0                         callq   *%rax
// 92: 49 ff 0c 24                   decq    (%r12)
// 96: 0f 84 84 00 00 00             je      0x120 <_JIT_ENTRY+0x120>
// 9c: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _JIT_OPARG
// aa: a8 01                         testb   $0x1, %al
// ac: 74 07                         je      0xb5 <_JIT_ENTRY+0xb5>
// ae: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// b5: 83 e0 01                      andl    $0x1, %eax
// b8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ba:  R_X86_64_64  _Py_NoneStruct
// c2: 49 39 4c c6 f8                cmpq    %rcx, -0x8(%r14,%rax,8)
// c7: 74 34                         je      0xfd <_JIT_ENTRY+0xfd>
// c9: 4d 8d 34 c6                   leaq    (%r14,%rax,8), %r14
// cd: 49 29 de                      subq    %rbx, %r14
// d0: 49 83 c6 b8                   addq    $-0x48, %r14
// d4: 49 c1 ee 03                   shrq    $0x3, %r14
// d8: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// dc: 48 8b 03                      movq    (%rbx), %rax
// df: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000e1:  R_X86_64_64  _JIT_TARGET
// e9: 89 c9                         movl    %ecx, %ecx
// eb: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// f3: 5b                            popq    %rbx
// f4: 41 5c                         popq    %r12
// f6: 41 5d                         popq    %r13
// f8: 41 5e                         popq    %r14
// fa: 41 5f                         popq    %r15
// fc: c3                            retq
// fd: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 101: 48 83 c6 f8                   addq    $-0x8, %rsi
// 105: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000107:  R_X86_64_64  _JIT_CONTINUE
// 10f: 48 89 df                      movq    %rbx, %rdi
// 112: 4c 89 fa                      movq    %r15, %rdx
// 115: 5b                            popq    %rbx
// 116: 41 5c                         popq    %r12
// 118: 41 5d                         popq    %r13
// 11a: 41 5e                         popq    %r14
// 11c: 41 5f                         popq    %r15
// 11e: ff e0                         jmpq    *%rax
// 120: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000122:  R_X86_64_64  _Py_Dealloc
// 12a: 4c 89 e7                      movq    %r12, %rdi
// 12d: ff d0                         callq   *%rax
// 12f: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 133: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000135:  R_X86_64_64  _JIT_OPARG
// 13d: a8 01                         testb   $0x1, %al
// 13f: 0f 85 69 ff ff ff             jne     0xae <_JIT_ENTRY+0xae>
// 145: e9 6b ff ff ff                jmp     0xb5 <_JIT_ENTRY+0xb5>
// 14a: 
static const unsigned char _LOAD_ATTR_SLOTplus_GUARD_IS_NONE_POP_code_body[331] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xa0, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1f, 0x85, 0xc0, 0x79, 0x41, 0xeb, 0x55, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x84, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0xc6, 0xf8, 0x74, 0x34, 0x4d, 0x8d, 0x34, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x69, 0xff, 0xff, 0xff, 0xe9, 0x6b, 0xff, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_GUARD_IS_NONE_POP_code_holes[12] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x107, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x122, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_GUARD_IS_NONE_POP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_GUARD_IS_NONE_POP_data_holes[1];

// _LOAD_ATTR_SLOTplus_GUARD_IS_NOT_NONE_POP
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_GUARD_IS_NOT_NONE_POP.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f7                      movq    %rsi, %r15
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 0f 84 c8 00 00 00             je      0xf5 <_JIT_ENTRY+0xf5>
// 2d: 49 89 d6                      movq    %rdx, %r14
// 30: 41 8b 45 00                   movl    (%r13), %eax
// 34: ff c0                         incl    %eax
// 36: 75 0f                         jne     0x47 <_JIT_ENTRY+0x47>
// 38: 49 8b 04 24                   movq    (%r12), %rax
// 3c: 48 85 c0                      testq   %rax, %rax
// 3f: 7e 1f                         jle     0x60 <_JIT_ENTRY+0x60>
// 41: 85 c0                         testl   %eax, %eax
// 43: 79 41                         jns     0x86 <_JIT_ENTRY+0x86>
// 45: eb 55                         jmp     0x9c <_JIT_ENTRY+0x9c>
// 47: 41 89 45 00                   movl    %eax, (%r13)
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 55: ff d0                         callq   *%rax
// 57: 49 8b 04 24                   movq    (%r12), %rax
// 5b: 48 85 c0                      testq   %rax, %rax
// 5e: 7f e1                         jg      0x41 <_JIT_ENTRY+0x41>
// 60: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000062:  R_X86_64_64  .rodata.str1.1
// 6a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006c:  R_X86_64_64  _Py_NegativeRefcount
// 74: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 79: 4c 89 e2                      movq    %r12, %rdx
// 7c: ff d0                         callq   *%rax
// 7e: 49 8b 04 24                   movq    (%r12), %rax
// 82: 85 c0                         testl   %eax, %eax
// 84: 78 16                         js      0x9c <_JIT_ENTRY+0x9c>
// 86: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000088:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 90: ff d0                         callq   *%rax
// 92: 49 ff 0c 24                   decq    (%r12)
// 96: 0f 84 f6 00 00 00             je      0x192 <_JIT_ENTRY+0x192>
// 9c: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _JIT_OPARG
// aa: a8 01                         testb   $0x1, %al
// ac: 74 07                         je      0xb5 <_JIT_ENTRY+0xb5>
// ae: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// b5: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000000b7:  R_X86_64_64  _JIT_OPARG
// bf: 41 83 e5 01                   andl    $0x1, %r13d
// c3: 4f 8b 64 ef f8                movq    -0x8(%r15,%r13,8), %r12
// c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ca:  R_X86_64_64  _Py_NoneStruct
// d2: 49 39 c4                      cmpq    %rax, %r12
// d5: 74 1a                         je      0xf1 <_JIT_ENTRY+0xf1>
// d7: 49 8b 04 24                   movq    (%r12), %rax
// db: 48 85 c0                      testq   %rax, %rax
// de: 7e 45                         jle     0x125 <_JIT_ENTRY+0x125>
// e0: 4f 8d 3c ef                   leaq    (%r15,%r13,8), %r15
// e4: 49 83 c7 f8                   addq    $-0x8, %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 67                         jns     0x153 <_JIT_ENTRY+0x153>
// ec: e9 83 00 00 00                jmp     0x174 <_JIT_ENTRY+0x174>
// f1: 4f 8d 3c ef                   leaq    (%r15,%r13,8), %r15
// f5: 49 29 df                      subq    %rbx, %r15
// f8: 49 83 c7 b8                   addq    $-0x48, %r15
// fc: 49 c1 ef 03                   shrq    $0x3, %r15
// 100: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 104: 48 8b 03                      movq    (%rbx), %rax
// 107: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000109:  R_X86_64_64  _JIT_TARGET
// 111: 89 c9                         movl    %ecx, %ecx
// 113: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 11b: 5b                            popq    %rbx
// 11c: 41 5c                         popq    %r12
// 11e: 41 5d                         popq    %r13
// 120: 41 5e                         popq    %r14
// 122: 41 5f                         popq    %r15
// 124: c3                            retq
// 125: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000127:  R_X86_64_64  .rodata.str1.1
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_NegativeRefcount
// 139: be 14 0d 00 00                movl    $0xd14, %esi            # imm = 0xD14
// 13e: 4c 89 e2                      movq    %r12, %rdx
// 141: ff d0                         callq   *%rax
// 143: 49 8b 04 24                   movq    (%r12), %rax
// 147: 4f 8d 3c ef                   leaq    (%r15,%r13,8), %r15
// 14b: 49 83 c7 f8                   addq    $-0x8, %r15
// 14f: 85 c0                         testl   %eax, %eax
// 151: 78 21                         js      0x174 <_JIT_ENTRY+0x174>
// 153: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000155:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 15d: ff d0                         callq   *%rax
// 15f: 49 ff 0c 24                   decq    (%r12)
// 163: 75 0f                         jne     0x174 <_JIT_ENTRY+0x174>
// 165: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000167:  R_X86_64_64  _Py_Dealloc
// 16f: 4c 89 e7                      movq    %r12, %rdi
// 172: ff d0                         callq   *%rax
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _JIT_CONTINUE
// 17e: 48 89 df                      movq    %rbx, %rdi
// 181: 4c 89 fe                      movq    %r15, %rsi
// 184: 4c 89 f2                      movq    %r14, %rdx
// 187: 5b                            popq    %rbx
// 188: 41 5c                         popq    %r12
// 18a: 41 5d                         popq    %r13
// 18c: 41 5e                         popq    %r14
// 18e: 41 5f                         popq    %r15
// 190: ff e0                         jmpq    *%rax
// 192: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000194:  R_X86_64_64  _Py_Dealloc
// 19c: 4c 89 e7                      movq    %r12, %rdi
// 19f: ff d0                         callq   *%rax
// 1a1: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _JIT_OPARG
// 1af: a8 01                         testb   $0x1, %al
// 1b1: 0f 85 f7 fe ff ff             jne     0xae <_JIT_ENTRY+0xae>
// 1b7: e9 f9 fe ff ff                jmp     0xb5 <_JIT_ENTRY+0xb5>
// 1bc: 
static const unsigned char _LOAD_ATTR_SLOTplus_GUARD_IS_NOT_NONE_POP_code_body[445] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xc8, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd6, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1f, 0x85, 0xc0, 0x79, 0x41, 0xeb, 0x55, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xf6, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x83, 0xe5, 0x01, 0x4f, 0x8b, 0x64, 0xef, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0xc4, 0x74, 0x1a, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x45, 0x4f, 0x8d, 0x3c, 0xef, 0x49, 0x83, 0xc7, 0xf8, 0x85, 0xc0, 0x79, 0x67, 0xe9, 0x83, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x3c, 0xef, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x14, 0x0d, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4f, 0x8d, 0x3c, 0xef, 0x49, 0x83, 0xc7, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0xf7, 0xfe, 0xff, 0xff, 0xe9, 0xf9, 0xfe, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_GUARD_IS_NOT_NONE_POP_code_holes[17] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x109, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x155, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x194, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_GUARD_IS_NOT_NONE_POP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_GUARD_IS_NOT_NONE_POP_data_holes[1];

// _LOAD_ATTR_SLOTplus_GUARD_IS_TRUE_POP
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_GUARD_IS_TRUE_POP.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f6                      movq    %rsi, %r14
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 0f 84 c3 00 00 00             je      0xf0 <_JIT_ENTRY+0xf0>
// 2d: 49 89 d7                      movq    %rdx, %r15
// 30: 41 8b 45 00                   movl    (%r13), %eax
// 34: ff c0                         incl    %eax
// 36: 75 0f                         jne     0x47 <_JIT_ENTRY+0x47>
// 38: 49 8b 04 24                   movq    (%r12), %rax
// 3c: 48 85 c0                      testq   %rax, %rax
// 3f: 7e 1f                         jle     0x60 <_JIT_ENTRY+0x60>
// 41: 85 c0                         testl   %eax, %eax
// 43: 79 41                         jns     0x86 <_JIT_ENTRY+0x86>
// 45: eb 55                         jmp     0x9c <_JIT_ENTRY+0x9c>
// 47: 41 89 45 00                   movl    %eax, (%r13)
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 55: ff d0                         callq   *%rax
// 57: 49 8b 04 24                   movq    (%r12), %rax
// 5b: 48 85 c0                      testq   %rax, %rax
// 5e: 7f e1                         jg      0x41 <_JIT_ENTRY+0x41>
// 60: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000062:  R_X86_64_64  .rodata.str1.1
// 6a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006c:  R_X86_64_64  _Py_NegativeRefcount
// 74: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 79: 4c 89 e2                      movq    %r12, %rdx
// 7c: ff d0                         callq   *%rax
// 7e: 49 8b 04 24                   movq    (%r12), %rax
// 82: 85 c0                         testl   %eax, %eax
// 84: 78 16                         js      0x9c <_JIT_ENTRY+0x9c>
// 86: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000088:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 90: ff d0                         callq   *%rax
// 92: 49 ff 0c 24                   decq    (%r12)
// 96: 0f 84 84 00 00 00             je      0x120 <_JIT_ENTRY+0x120>
// 9c: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _JIT_OPARG
// aa: a8 01                         testb   $0x1, %al
// ac: 74 07                         je      0xb5 <_JIT_ENTRY+0xb5>
// ae: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// b5: 83 e0 01                      andl    $0x1, %eax
// b8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ba:  R_X86_64_64  _Py_FalseStruct
// c2: 49 39 4c c6 f8                cmpq    %rcx, -0x8(%r14,%rax,8)
// c7: 74 23                         je      0xec <_JIT_ENTRY+0xec>
// c9: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// cd: 48 83 c6 f8                   addq    $-0x8, %rsi
// d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d3:  R_X86_64_64  _JIT_CONTINUE
// db: 48 89 df                      movq    %rbx, %rdi
// de: 4c 89 fa                      movq    %r15, %rdx
// e1: 5b                            popq    %rbx
// e2: 41 5c                         popq    %r12
// e4: 41 5d                         popq    %r13
// e6: 41 5e                         popq    %r14
// e8: 41 5f                         popq    %r15
// ea: ff e0                         jmpq    *%rax
// ec: 4d 8d 34 c6                   leaq    (%r14,%rax,8), %r14
// f0: 49 29 de                      subq    %rbx, %r14
// f3: 49 83 c6 b8                   addq    $-0x48, %r14
// f7: 49 c1 ee 03                   shrq    $0x3, %r14
// fb: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// ff: 48 8b 03                      movq    (%rbx), %rax
// 102: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000104:  R_X86_64_64  _JIT_TARGET
// 10c: 89 c9                         movl    %ecx, %ecx
// 10e: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 116: 5b                            popq    %rbx
// 117: 41 5c                         popq    %r12
// 119: 41 5d                         popq    %r13
// 11b: 41 5e                         popq    %r14
// 11d: 41 5f                         popq    %r15
// 11f: c3                            retq
// 120: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000122:  R_X86_64_64  _Py_Dealloc
// 12a: 4c 89 e7                      movq    %r12, %rdi
// 12d: ff d0                         callq   *%rax
// 12f: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 133: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000135:  R_X86_64_64  _JIT_OPARG
// 13d: a8 01                         testb   $0x1, %al
// 13f: 0f 85 69 ff ff ff             jne     0xae <_JIT_ENTRY+0xae>
// 145: e9 6b ff ff ff                jmp     0xb5 <_JIT_ENTRY+0xb5>
// 14a: 
static const unsigned char _LOAD_ATTR_SLOTplus_GUARD_IS_TRUE_POP_code_body[331] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xc3, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1f, 0x85, 0xc0, 0x79, 0x41, 0xeb, 0x55, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x84, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0xc6, 0xf8, 0x74, 0x23, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x4d, 0x8d, 0x34, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x69, 0xff, 0xff, 0xff, 0xe9, 0x6b, 0xff, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_GUARD_IS_TRUE_POP_code_holes[12] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x122, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_GUARD_IS_TRUE_POP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_GUARD_IS_TRUE_POP_data_holes[1];

// _LOAD_ATTR_SLOTplus_GUARD_KEYS_VERSION
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_GUARD_KEYS_VERSION.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f6                      movq    %rsi, %r14
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 0f 84 cc 00 00 00             je      0xf9 <_JIT_ENTRY+0xf9>
// 2d: 49 89 d7                      movq    %rdx, %r15
// 30: 41 8b 45 00                   movl    (%r13), %eax
// 34: ff c0                         incl    %eax
// 36: 75 0f                         jne     0x47 <_JIT_ENTRY+0x47>
// 38: 49 8b 04 24                   movq    (%r12), %rax
// 3c: 48 85 c0                      testq   %rax, %rax
// 3f: 7e 1f                         jle     0x60 <_JIT_ENTRY+0x60>
// 41: 85 c0                         testl   %eax, %eax
// 43: 79 41                         jns     0x86 <_JIT_ENTRY+0x86>
// 45: eb 55                         jmp     0x9c <_JIT_ENTRY+0x9c>
// 47: 41 89 45 00                   movl    %eax, (%r13)
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 55: ff d0                         callq   *%rax
// 57: 49 8b 04 24                   movq    (%r12), %rax
// 5b: 48 85 c0                      testq   %rax, %rax
// 5e: 7f e1                         jg      0x41 <_JIT_ENTRY+0x41>
// 60: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000062:  R_X86_64_64  .rodata.str1.1
// 6a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006c:  R_X86_64_64  _Py_NegativeRefcount
// 74: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 79: 4c 89 e2                      movq    %r12, %rdx
// 7c: ff d0                         callq   *%rax
// 7e: 49 8b 04 24                   movq    (%r12), %rax
// 82: 85 c0                         testl   %eax, %eax
// 84: 78 16                         js      0x9c <_JIT_ENTRY+0x9c>
// 86: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000088:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 90: ff d0                         callq   *%rax
// 92: 49 ff 0c 24                   decq    (%r12)
// 96: 0f 84 8d 00 00 00             je      0x129 <_JIT_ENTRY+0x129>
// 9c: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _JIT_OPARG
// aa: a8 01                         testb   $0x1, %al
// ac: 74 07                         je      0xb5 <_JIT_ENTRY+0xb5>
// ae: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// b5: 83 e0 01                      andl    $0x1, %eax
// b8: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// bc: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// c1: 48 8b 40 08                   movq    0x8(%rax), %rax
// c5: 48 8b 80 70 03 00 00          movq    0x370(%rax), %rax
// cc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ce:  R_X86_64_64  _JIT_OPERAND
// d6: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
// d9: 75 1b                         jne     0xf6 <_JIT_ENTRY+0xf6>
// db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000dd:  R_X86_64_64  _JIT_CONTINUE
// e5: 48 89 df                      movq    %rbx, %rdi
// e8: 4c 89 fa                      movq    %r15, %rdx
// eb: 5b                            popq    %rbx
// ec: 41 5c                         popq    %r12
// ee: 41 5d                         popq    %r13
// f0: 41 5e                         popq    %r14
// f2: 41 5f                         popq    %r15
// f4: ff e0                         jmpq    *%rax
// f6: 49 89 f6                      movq    %rsi, %r14
// f9: 49 29 de                      subq    %rbx, %r14
// fc: 49 83 c6 b8                   addq    $-0x48, %r14
// 100: 49 c1 ee 03                   shrq    $0x3, %r14
// 104: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 108: 48 8b 03                      movq    (%rbx), %rax
// 10b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000010d:  R_X86_64_64  _JIT_TARGET
// 115: 89 c9                         movl    %ecx, %ecx
// 117: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 11f: 5b                            popq    %rbx
// 120: 41 5c                         popq    %r12
// 122: 41 5d                         popq    %r13
// 124: 41 5e                         popq    %r14
// 126: 41 5f                         popq    %r15
// 128: c3                            retq
// 129: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012b:  R_X86_64_64  _Py_Dealloc
// 133: 4c 89 e7                      movq    %r12, %rdi
// 136: ff d0                         callq   *%rax
// 138: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _JIT_OPARG
// 146: a8 01                         testb   $0x1, %al
// 148: 0f 85 60 ff ff ff             jne     0xae <_JIT_ENTRY+0xae>
// 14e: e9 62 ff ff ff                jmp     0xb5 <_JIT_ENTRY+0xb5>
// 153: 
static const unsigned char _LOAD_ATTR_SLOTplus_GUARD_KEYS_VERSION_code_body[340] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xcc, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1f, 0x85, 0xc0, 0x79, 0x41, 0xeb, 0x55, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x8d, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0x8b, 0x40, 0x08, 0x48, 0x8b, 0x80, 0x70, 0x03, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x48, 0x0c, 0x75, 0x1b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x49, 0x89, 0xf6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x60, 0xff, 0xff, 0xff, 0xe9, 0x62, 0xff, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_GUARD_KEYS_VERSION_code_holes[12] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0xdd, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x10d, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_GUARD_KEYS_VERSION_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_GUARD_KEYS_VERSION_data_holes[1];

// _LOAD_ATTR_SLOTplus_GUARD_NOT_EXHAUSTED_LIST
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_GUARD_NOT_EXHAUSTED_LIST.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f6                      movq    %rsi, %r14
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 0f 84 c5 00 00 00             je      0xf2 <_JIT_ENTRY+0xf2>
// 2d: 49 89 d7                      movq    %rdx, %r15
// 30: 41 8b 45 00                   movl    (%r13), %eax
// 34: ff c0                         incl    %eax
// 36: 75 0f                         jne     0x47 <_JIT_ENTRY+0x47>
// 38: 49 8b 04 24                   movq    (%r12), %rax
// 3c: 48 85 c0                      testq   %rax, %rax
// 3f: 7e 1f                         jle     0x60 <_JIT_ENTRY+0x60>
// 41: 85 c0                         testl   %eax, %eax
// 43: 79 41                         jns     0x86 <_JIT_ENTRY+0x86>
// 45: eb 55                         jmp     0x9c <_JIT_ENTRY+0x9c>
// 47: 41 89 45 00                   movl    %eax, (%r13)
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 55: ff d0                         callq   *%rax
// 57: 49 8b 04 24                   movq    (%r12), %rax
// 5b: 48 85 c0                      testq   %rax, %rax
// 5e: 7f e1                         jg      0x41 <_JIT_ENTRY+0x41>
// 60: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000062:  R_X86_64_64  .rodata.str1.1
// 6a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006c:  R_X86_64_64  _Py_NegativeRefcount
// 74: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 79: 4c 89 e2                      movq    %r12, %rdx
// 7c: ff d0                         callq   *%rax
// 7e: 49 8b 04 24                   movq    (%r12), %rax
// 82: 85 c0                         testl   %eax, %eax
// 84: 78 16                         js      0x9c <_JIT_ENTRY+0x9c>
// 86: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000088:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 90: ff d0                         callq   *%rax
// 92: 49 ff 0c 24                   decq    (%r12)
// 96: 0f 84 86 00 00 00             je      0x122 <_JIT_ENTRY+0x122>
// 9c: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _JIT_OPARG
// aa: a8 01                         testb   $0x1, %al
// ac: 74 07                         je      0xb5 <_JIT_ENTRY+0xb5>
// ae: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// b5: 83 e0 01                      andl    $0x1, %eax
// b8: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// bc: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// c1: 48 8b 48 18                   movq    0x18(%rax), %rcx
// c5: 48 85 c9                      testq   %rcx, %rcx
// c8: 74 25                         je      0xef <_JIT_ENTRY+0xef>
// ca: 48 8b 40 10                   movq    0x10(%rax), %rax
// ce: 48 3b 41 10                   cmpq    0x10(%rcx), %rax
// d2: 7d 1b                         jge     0xef <_JIT_ENTRY+0xef>
// d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d6:  R_X86_64_64  _JIT_CONTINUE
// de: 48 89 df                      movq    %rbx, %rdi
// e1: 4c 89 fa                      movq    %r15, %rdx
// e4: 5b                            popq    %rbx
// e5: 41 5c                         popq    %r12
// e7: 41 5d                         popq    %r13
// e9: 41 5e                         popq    %r14
// eb: 41 5f                         popq    %r15
// ed: ff e0                         jmpq    *%rax
// ef: 49 89 f6                      movq    %rsi, %r14
// f2: 49 29 de                      subq    %rbx, %r14
// f5: 49 83 c6 b8                   addq    $-0x48, %r14
// f9: 49 c1 ee 03                   shrq    $0x3, %r14
// fd: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 101: 48 8b 03                      movq    (%rbx), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 118: 5b                            popq    %rbx
// 119: 41 5c                         popq    %r12
// 11b: 41 5d                         popq    %r13
// 11d: 41 5e                         popq    %r14
// 11f: 41 5f                         popq    %r15
// 121: c3                            retq
// 122: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000124:  R_X86_64_64  _Py_Dealloc
// 12c: 4c 89 e7                      movq    %r12, %rdi
// 12f: ff d0                         callq   *%rax
// 131: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 135: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000137:  R_X86_64_64  _JIT_OPARG
// 13f: a8 01                         testb   $0x1, %al
// 141: 0f 85 67 ff ff ff             jne     0xae <_JIT_ENTRY+0xae>
// 147: e9 69 ff ff ff                jmp     0xb5 <_JIT_ENTRY+0xb5>
// 14c: 
static const unsigned char _LOAD_ATTR_SLOTplus_GUARD_NOT_EXHAUSTED_LIST_code_body[333] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xc5, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1f, 0x85, 0xc0, 0x79, 0x41, 0xeb, 0x55, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x86, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0x8b, 0x48, 0x18, 0x48, 0x85, 0xc9, 0x74, 0x25, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x3b, 0x41, 0x10, 0x7d, 0x1b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x49, 0x89, 0xf6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x67, 0xff, 0xff, 0xff, 0xe9, 0x69, 0xff, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_GUARD_NOT_EXHAUSTED_LIST_code_holes[11] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x124, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x137, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_GUARD_NOT_EXHAUSTED_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_GUARD_NOT_EXHAUSTED_LIST_data_holes[1];

// _LOAD_ATTR_SLOTplus_GUARD_NOT_EXHAUSTED_RANGE
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_GUARD_NOT_EXHAUSTED_RANGE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f6                      movq    %rsi, %r14
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 0f 84 b5 00 00 00             je      0xe2 <_JIT_ENTRY+0xe2>
// 2d: 49 89 d7                      movq    %rdx, %r15
// 30: 41 8b 45 00                   movl    (%r13), %eax
// 34: ff c0                         incl    %eax
// 36: 75 0f                         jne     0x47 <_JIT_ENTRY+0x47>
// 38: 49 8b 04 24                   movq    (%r12), %rax
// 3c: 48 85 c0                      testq   %rax, %rax
// 3f: 7e 1f                         jle     0x60 <_JIT_ENTRY+0x60>
// 41: 85 c0                         testl   %eax, %eax
// 43: 79 41                         jns     0x86 <_JIT_ENTRY+0x86>
// 45: eb 51                         jmp     0x98 <_JIT_ENTRY+0x98>
// 47: 41 89 45 00                   movl    %eax, (%r13)
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 55: ff d0                         callq   *%rax
// 57: 49 8b 04 24                   movq    (%r12), %rax
// 5b: 48 85 c0                      testq   %rax, %rax
// 5e: 7f e1                         jg      0x41 <_JIT_ENTRY+0x41>
// 60: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000062:  R_X86_64_64  .rodata.str1.1
// 6a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006c:  R_X86_64_64  _Py_NegativeRefcount
// 74: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 79: 4c 89 e2                      movq    %r12, %rdx
// 7c: ff d0                         callq   *%rax
// 7e: 49 8b 04 24                   movq    (%r12), %rax
// 82: 85 c0                         testl   %eax, %eax
// 84: 78 12                         js      0x98 <_JIT_ENTRY+0x98>
// 86: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000088:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 90: ff d0                         callq   *%rax
// 92: 49 ff 0c 24                   decq    (%r12)
// 96: 74 7a                         je      0x112 <_JIT_ENTRY+0x112>
// 98: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 9c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009e:  R_X86_64_64  _JIT_OPARG
// a6: a8 01                         testb   $0x1, %al
// a8: 74 07                         je      0xb1 <_JIT_ENTRY+0xb1>
// aa: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// b1: 83 e0 01                      andl    $0x1, %eax
// b4: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// b8: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// bd: 48 83 78 20 00                cmpq    $0x0, 0x20(%rax)
// c2: 7e 1b                         jle     0xdf <_JIT_ENTRY+0xdf>
// c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c6:  R_X86_64_64  _JIT_CONTINUE
// ce: 48 89 df                      movq    %rbx, %rdi
// d1: 4c 89 fa                      movq    %r15, %rdx
// d4: 5b                            popq    %rbx
// d5: 41 5c                         popq    %r12
// d7: 41 5d                         popq    %r13
// d9: 41 5e                         popq    %r14
// db: 41 5f                         popq    %r15
// dd: ff e0                         jmpq    *%rax
// df: 49 89 f6                      movq    %rsi, %r14
// e2: 49 29 de                      subq    %rbx, %r14
// e5: 49 83 c6 b8                   addq    $-0x48, %r14
// e9: 49 c1 ee 03                   shrq    $0x3, %r14
// ed: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// f1: 48 8b 03                      movq    (%rbx), %rax
// f4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000f6:  R_X86_64_64  _JIT_TARGET
// fe: 89 c9                         movl    %ecx, %ecx
// 100: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 108: 5b                            popq    %rbx
// 109: 41 5c                         popq    %r12
// 10b: 41 5d                         popq    %r13
// 10d: 41 5e                         popq    %r14
// 10f: 41 5f                         popq    %r15
// 111: c3                            retq
// 112: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000114:  R_X86_64_64  _Py_Dealloc
// 11c: 4c 89 e7                      movq    %r12, %rdi
// 11f: ff d0                         callq   *%rax
// 121: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 125: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000127:  R_X86_64_64  _JIT_OPARG
// 12f: a8 01                         testb   $0x1, %al
// 131: 0f 85 73 ff ff ff             jne     0xaa <_JIT_ENTRY+0xaa>
// 137: e9 75 ff ff ff                jmp     0xb1 <_JIT_ENTRY+0xb1>
// 13c: 
static const unsigned char _LOAD_ATTR_SLOTplus_GUARD_NOT_EXHAUSTED_RANGE_code_body[317] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xb5, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1f, 0x85, 0xc0, 0x79, 0x41, 0xeb, 0x51, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x7a, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0x83, 0x78, 0x20, 0x00, 0x7e, 0x1b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x49, 0x89, 0xf6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x73, 0xff, 0xff, 0xff, 0xe9, 0x75, 0xff, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_GUARD_NOT_EXHAUSTED_RANGE_code_holes[11] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x9e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xc6, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0xf6, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_GUARD_NOT_EXHAUSTED_RANGE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_GUARD_NOT_EXHAUSTED_RANGE_data_holes[1];

// _LOAD_ATTR_SLOTplus_GUARD_NOT_EXHAUSTED_TUPLE
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_GUARD_NOT_EXHAUSTED_TUPLE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f6                      movq    %rsi, %r14
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 0f 84 c5 00 00 00             je      0xf2 <_JIT_ENTRY+0xf2>
// 2d: 49 89 d7                      movq    %rdx, %r15
// 30: 41 8b 45 00                   movl    (%r13), %eax
// 34: ff c0                         incl    %eax
// 36: 75 0f                         jne     0x47 <_JIT_ENTRY+0x47>
// 38: 49 8b 04 24                   movq    (%r12), %rax
// 3c: 48 85 c0                      testq   %rax, %rax
// 3f: 7e 1f                         jle     0x60 <_JIT_ENTRY+0x60>
// 41: 85 c0                         testl   %eax, %eax
// 43: 79 41                         jns     0x86 <_JIT_ENTRY+0x86>
// 45: eb 55                         jmp     0x9c <_JIT_ENTRY+0x9c>
// 47: 41 89 45 00                   movl    %eax, (%r13)
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 55: ff d0                         callq   *%rax
// 57: 49 8b 04 24                   movq    (%r12), %rax
// 5b: 48 85 c0                      testq   %rax, %rax
// 5e: 7f e1                         jg      0x41 <_JIT_ENTRY+0x41>
// 60: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000062:  R_X86_64_64  .rodata.str1.1
// 6a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006c:  R_X86_64_64  _Py_NegativeRefcount
// 74: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 79: 4c 89 e2                      movq    %r12, %rdx
// 7c: ff d0                         callq   *%rax
// 7e: 49 8b 04 24                   movq    (%r12), %rax
// 82: 85 c0                         testl   %eax, %eax
// 84: 78 16                         js      0x9c <_JIT_ENTRY+0x9c>
// 86: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000088:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 90: ff d0                         callq   *%rax
// 92: 49 ff 0c 24                   decq    (%r12)
// 96: 0f 84 86 00 00 00             je      0x122 <_JIT_ENTRY+0x122>
// 9c: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _JIT_OPARG
// aa: a8 01                         testb   $0x1, %al
// ac: 74 07                         je      0xb5 <_JIT_ENTRY+0xb5>
// ae: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// b5: 83 e0 01                      andl    $0x1, %eax
// b8: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// bc: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// c1: 48 8b 48 18                   movq    0x18(%rax), %rcx
// c5: 48 85 c9                      testq   %rcx, %rcx
// c8: 74 25                         je      0xef <_JIT_ENTRY+0xef>
// ca: 48 8b 40 10                   movq    0x10(%rax), %rax
// ce: 48 3b 41 10                   cmpq    0x10(%rcx), %rax
// d2: 7d 1b                         jge     0xef <_JIT_ENTRY+0xef>
// d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d6:  R_X86_64_64  _JIT_CONTINUE
// de: 48 89 df                      movq    %rbx, %rdi
// e1: 4c 89 fa                      movq    %r15, %rdx
// e4: 5b                            popq    %rbx
// e5: 41 5c                         popq    %r12
// e7: 41 5d                         popq    %r13
// e9: 41 5e                         popq    %r14
// eb: 41 5f                         popq    %r15
// ed: ff e0                         jmpq    *%rax
// ef: 49 89 f6                      movq    %rsi, %r14
// f2: 49 29 de                      subq    %rbx, %r14
// f5: 49 83 c6 b8                   addq    $-0x48, %r14
// f9: 49 c1 ee 03                   shrq    $0x3, %r14
// fd: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 101: 48 8b 03                      movq    (%rbx), %rax
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_TARGET
// 10e: 89 c9                         movl    %ecx, %ecx
// 110: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 118: 5b                            popq    %rbx
// 119: 41 5c                         popq    %r12
// 11b: 41 5d                         popq    %r13
// 11d: 41 5e                         popq    %r14
// 11f: 41 5f                         popq    %r15
// 121: c3                            retq
// 122: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000124:  R_X86_64_64  _Py_Dealloc
// 12c: 4c 89 e7                      movq    %r12, %rdi
// 12f: ff d0                         callq   *%rax
// 131: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 135: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000137:  R_X86_64_64  _JIT_OPARG
// 13f: a8 01                         testb   $0x1, %al
// 141: 0f 85 67 ff ff ff             jne     0xae <_JIT_ENTRY+0xae>
// 147: e9 69 ff ff ff                jmp     0xb5 <_JIT_ENTRY+0xb5>
// 14c: 
static const unsigned char _LOAD_ATTR_SLOTplus_GUARD_NOT_EXHAUSTED_TUPLE_code_body[333] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xc5, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1f, 0x85, 0xc0, 0x79, 0x41, 0xeb, 0x55, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x86, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0x8b, 0x48, 0x18, 0x48, 0x85, 0xc9, 0x74, 0x25, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x3b, 0x41, 0x10, 0x7d, 0x1b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x49, 0x89, 0xf6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x67, 0xff, 0xff, 0xff, 0xe9, 0x69, 0xff, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_GUARD_NOT_EXHAUSTED_TUPLE_code_holes[11] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x124, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x137, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_GUARD_NOT_EXHAUSTED_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_GUARD_NOT_EXHAUSTED_TUPLE_data_holes[1];

// _LOAD_ATTR_SLOTplus_GUARD_TYPE_VERSION
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_GUARD_TYPE_VERSION.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f6                      movq    %rsi, %r14
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 0f 84 c8 00 00 00             je      0xf5 <_JIT_ENTRY+0xf5>
// 2d: 49 89 d7                      movq    %rdx, %r15
// 30: 41 8b 45 00                   movl    (%r13), %eax
// 34: ff c0                         incl    %eax
// 36: 75 0f                         jne     0x47 <_JIT_ENTRY+0x47>
// 38: 49 8b 04 24                   movq    (%r12), %rax
// 3c: 48 85 c0                      testq   %rax, %rax
// 3f: 7e 1f                         jle     0x60 <_JIT_ENTRY+0x60>
// 41: 85 c0                         testl   %eax, %eax
// 43: 79 41                         jns     0x86 <_JIT_ENTRY+0x86>
// 45: eb 55                         jmp     0x9c <_JIT_ENTRY+0x9c>
// 47: 41 89 45 00                   movl    %eax, (%r13)
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 55: ff d0                         callq   *%rax
// 57: 49 8b 04 24                   movq    (%r12), %rax
// 5b: 48 85 c0                      testq   %rax, %rax
// 5e: 7f e1                         jg      0x41 <_JIT_ENTRY+0x41>
// 60: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000062:  R_X86_64_64  .rodata.str1.1
// 6a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006c:  R_X86_64_64  _Py_NegativeRefcount
// 74: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 79: 4c 89 e2                      movq    %r12, %rdx
// 7c: ff d0                         callq   *%rax
// 7e: 49 8b 04 24                   movq    (%r12), %rax
// 82: 85 c0                         testl   %eax, %eax
// 84: 78 16                         js      0x9c <_JIT_ENTRY+0x9c>
// 86: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000088:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 90: ff d0                         callq   *%rax
// 92: 49 ff 0c 24                   decq    (%r12)
// 96: 0f 84 89 00 00 00             je      0x125 <_JIT_ENTRY+0x125>
// 9c: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _JIT_OPARG
// aa: a8 01                         testb   $0x1, %al
// ac: 74 07                         je      0xb5 <_JIT_ENTRY+0xb5>
// ae: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// b5: 83 e0 01                      andl    $0x1, %eax
// b8: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// bc: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// c1: 48 8b 40 08                   movq    0x8(%rax), %rax
// c5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c7:  R_X86_64_64  _JIT_OPERAND
// cf: 39 88 80 01 00 00             cmpl    %ecx, 0x180(%rax)
// d5: 75 1b                         jne     0xf2 <_JIT_ENTRY+0xf2>
// d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d9:  R_X86_64_64  _JIT_CONTINUE
// e1: 48 89 df                      movq    %rbx, %rdi
// e4: 4c 89 fa                      movq    %r15, %rdx
// e7: 5b                            popq    %rbx
// e8: 41 5c                         popq    %r12
// ea: 41 5d                         popq    %r13
// ec: 41 5e                         popq    %r14
// ee: 41 5f                         popq    %r15
// f0: ff e0                         jmpq    *%rax
// f2: 49 89 f6                      movq    %rsi, %r14
// f5: 49 29 de                      subq    %rbx, %r14
// f8: 49 83 c6 b8                   addq    $-0x48, %r14
// fc: 49 c1 ee 03                   shrq    $0x3, %r14
// 100: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 104: 48 8b 03                      movq    (%rbx), %rax
// 107: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000109:  R_X86_64_64  _JIT_TARGET
// 111: 89 c9                         movl    %ecx, %ecx
// 113: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 11b: 5b                            popq    %rbx
// 11c: 41 5c                         popq    %r12
// 11e: 41 5d                         popq    %r13
// 120: 41 5e                         popq    %r14
// 122: 41 5f                         popq    %r15
// 124: c3                            retq
// 125: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000127:  R_X86_64_64  _Py_Dealloc
// 12f: 4c 89 e7                      movq    %r12, %rdi
// 132: ff d0                         callq   *%rax
// 134: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 138: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013a:  R_X86_64_64  _JIT_OPARG
// 142: a8 01                         testb   $0x1, %al
// 144: 0f 85 64 ff ff ff             jne     0xae <_JIT_ENTRY+0xae>
// 14a: e9 66 ff ff ff                jmp     0xb5 <_JIT_ENTRY+0xb5>
// 14f: 
static const unsigned char _LOAD_ATTR_SLOTplus_GUARD_TYPE_VERSION_code_body[336] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xc8, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1f, 0x85, 0xc0, 0x79, 0x41, 0xeb, 0x55, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x89, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0x8b, 0x40, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x88, 0x80, 0x01, 0x00, 0x00, 0x75, 0x1b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x49, 0x89, 0xf6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x64, 0xff, 0xff, 0xff, 0xe9, 0x66, 0xff, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_GUARD_TYPE_VERSION_code_holes[12] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xc7, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x109, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_GUARD_TYPE_VERSION_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_GUARD_TYPE_VERSION_data_holes[1];

// _LOAD_ATTR_SLOTplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 26: 4d 85 ed                      testq   %r13, %r13
// 29: 74 2b                         je      0x56 <_JIT_ENTRY+0x56>
// 2b: 49 89 d7                      movq    %rdx, %r15
// 2e: 41 8b 45 00                   movl    (%r13), %eax
// 32: ff c0                         incl    %eax
// 34: 75 57                         jne     0x8d <_JIT_ENTRY+0x8d>
// 36: 49 8b 04 24                   movq    (%r12), %rax
// 3a: 48 85 c0                      testq   %rax, %rax
// 3d: 7e 67                         jle     0xa6 <_JIT_ENTRY+0xa6>
// 3f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000041:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 49: 85 c0                         testl   %eax, %eax
// 4b: 0f 89 85 00 00 00             jns     0xd6 <_JIT_ENTRY+0xd6>
// 51: e9 8c 00 00 00                jmp     0xe2 <_JIT_ENTRY+0xe2>
// 56: 49 29 de                      subq    %rbx, %r14
// 59: 49 83 c6 b8                   addq    $-0x48, %r14
// 5d: 49 c1 ee 03                   shrq    $0x3, %r14
// 61: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 65: 48 8b 03                      movq    (%rbx), %rax
// 68: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000006a:  R_X86_64_64  _JIT_TARGET
// 72: 89 c9                         movl    %ecx, %ecx
// 74: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 78: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 7e: 48 83 c4 08                   addq    $0x8, %rsp
// 82: 5b                            popq    %rbx
// 83: 41 5c                         popq    %r12
// 85: 41 5d                         popq    %r13
// 87: 41 5e                         popq    %r14
// 89: 41 5f                         popq    %r15
// 8b: 5d                            popq    %rbp
// 8c: c3                            retq
// 8d: 41 89 45 00                   movl    %eax, (%r13)
// 91: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000093:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 9b: ff d0                         callq   *%rax
// 9d: 49 8b 04 24                   movq    (%r12), %rax
// a1: 48 85 c0                      testq   %rax, %rax
// a4: 7f 99                         jg      0x3f <_JIT_ENTRY+0x3f>
// a6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a8:  R_X86_64_64  .rodata.str1.1
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  _Py_NegativeRefcount
// ba: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// bf: 4c 89 e2                      movq    %r12, %rdx
// c2: ff d0                         callq   *%rax
// c4: 49 8b 04 24                   movq    (%r12), %rax
// c8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ca:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d2: 85 c0                         testl   %eax, %eax
// d4: 78 0c                         js      0xe2 <_JIT_ENTRY+0xe2>
// d6: ff d1                         callq   *%rcx
// d8: 49 ff 0c 24                   decq    (%r12)
// dc: 0f 84 4f 01 00 00             je      0x231 <_JIT_ENTRY+0x231>
// e2: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e8:  R_X86_64_64  _JIT_OPARG
// f0: a8 01                         testb   $0x1, %al
// f2: 74 07                         je      0xfb <_JIT_ENTRY+0xfb>
// f4: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// fb: 0f b7 c8                      movzwl  %ax, %ecx
// fe: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 103: 29 ca                         subl    %ecx, %edx
// 105: 48 63 ca                      movslq  %edx, %rcx
// 108: 83 e0 01                      andl    $0x1, %eax
// 10b: 48 01 c8                      addq    %rcx, %rax
// 10e: 4d 8b 24 c6                   movq    (%r14,%rax,8), %r12
// 112: 49 8b 6c 24 18                movq    0x18(%r12), %rbp
// 117: 8b 45 00                      movl    (%rbp), %eax
// 11a: ff c0                         incl    %eax
// 11c: 74 0f                         je      0x12d <_JIT_ENTRY+0x12d>
// 11e: 89 45 00                      movl    %eax, (%rbp)
// 121: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000123:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 12b: ff d0                         callq   *%rax
// 12d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012f:  R_X86_64_64  _JIT_OPARG
// 137: 89 c1                         movl    %eax, %ecx
// 139: 83 e1 01                      andl    $0x1, %ecx
// 13c: f7 d0                         notl    %eax
// 13e: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 143: 48 98                         cltq
// 145: 48 01 c8                      addq    %rcx, %rax
// 148: 49 89 2c c6                   movq    %rbp, (%r14,%rax,8)
// 14c: 4d 8b 6c 24 10                movq    0x10(%r12), %r13
// 151: 41 8b 45 00                   movl    (%r13), %eax
// 155: ff c0                         incl    %eax
// 157: 74 10                         je      0x169 <_JIT_ENTRY+0x169>
// 159: 41 89 45 00                   movl    %eax, (%r13)
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 167: ff d0                         callq   *%rax
// 169: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016b:  R_X86_64_64  _JIT_OPARG
// 173: 0f b7 c8                      movzwl  %ax, %ecx
// 176: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 17b: 29 ca                         subl    %ecx, %edx
// 17d: 48 63 ca                      movslq  %edx, %rcx
// 180: 83 e0 01                      andl    $0x1, %eax
// 183: 48 01 c8                      addq    %rcx, %rax
// 186: 4d 89 2c c6                   movq    %r13, (%r14,%rax,8)
// 18a: 49 8b 04 24                   movq    (%r12), %rax
// 18e: 48 85 c0                      testq   %rax, %rax
// 191: 7e 06                         jle     0x199 <_JIT_ENTRY+0x199>
// 193: 85 c0                         testl   %eax, %eax
// 195: 79 28                         jns     0x1bf <_JIT_ENTRY+0x1bf>
// 197: eb 47                         jmp     0x1e0 <_JIT_ENTRY+0x1e0>
// 199: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000019b:  R_X86_64_64  .rodata.str1.1
// 1a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a5:  R_X86_64_64  _Py_NegativeRefcount
// 1ad: be 18 0a 00 00                movl    $0xa18, %esi            # imm = 0xA18
// 1b2: 4c 89 e2                      movq    %r12, %rdx
// 1b5: ff d0                         callq   *%rax
// 1b7: 49 8b 04 24                   movq    (%r12), %rax
// 1bb: 85 c0                         testl   %eax, %eax
// 1bd: 78 21                         js      0x1e0 <_JIT_ENTRY+0x1e0>
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c9: ff d0                         callq   *%rax
// 1cb: 49 ff 0c 24                   decq    (%r12)
// 1cf: 75 0f                         jne     0x1e0 <_JIT_ENTRY+0x1e0>
// 1d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d3:  R_X86_64_64  _Py_Dealloc
// 1db: 4c 89 e7                      movq    %r12, %rdi
// 1de: ff d0                         callq   *%rax
// 1e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e2:  R_X86_64_64  _JIT_OPARG
// 1ea: 0f b7 c8                      movzwl  %ax, %ecx
// 1ed: 83 e0 01                      andl    $0x1, %eax
// 1f0: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 1f4: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 1f9: 29 ca                         subl    %ecx, %edx
// 1fb: 48 63 d2                      movslq  %edx, %rdx
// 1fe: 48 01 c2                      addq    %rax, %rdx
// 201: 4d 89 2c d6                   movq    %r13, (%r14,%rdx,8)
// 205: f7 d1                         notl    %ecx
// 207: 48 63 c9                      movslq  %ecx, %rcx
// 20a: 48 01 c1                      addq    %rax, %rcx
// 20d: 49 89 2c ce                   movq    %rbp, (%r14,%rcx,8)
// 211: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000213:  R_X86_64_64  _JIT_CONTINUE
// 21b: 48 89 df                      movq    %rbx, %rdi
// 21e: 4c 89 fa                      movq    %r15, %rdx
// 221: 48 83 c4 08                   addq    $0x8, %rsp
// 225: 5b                            popq    %rbx
// 226: 41 5c                         popq    %r12
// 228: 41 5d                         popq    %r13
// 22a: 41 5e                         popq    %r14
// 22c: 41 5f                         popq    %r15
// 22e: 5d                            popq    %rbp
// 22f: ff e0                         jmpq    *%rax
// 231: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000233:  R_X86_64_64  _Py_Dealloc
// 23b: 4c 89 e7                      movq    %r12, %rdi
// 23e: ff d0                         callq   *%rax
// 240: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 244: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000246:  R_X86_64_64  _JIT_OPARG
// 24e: a8 01                         testb   $0x1, %al
// 250: 0f 85 9e fe ff ff             jne     0xf4 <_JIT_ENTRY+0xf4>
// 256: e9 a0 fe ff ff                jmp     0xfb <_JIT_ENTRY+0xfb>
// 25b: 
static const unsigned char _LOAD_ATTR_SLOTplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS_code_body[604] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x2b, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x57, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x67, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x85, 0x00, 0x00, 0x00, 0xe9, 0x8c, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x99, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x0c, 0xff, 0xd1, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x4f, 0x01, 0x00, 0x00, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xca, 0x83, 0xe0, 0x01, 0x48, 0x01, 0xc8, 0x4d, 0x8b, 0x24, 0xc6, 0x49, 0x8b, 0x6c, 0x24, 0x18, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x0f, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0x83, 0xe1, 0x01, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x49, 0x89, 0x2c, 0xc6, 0x4d, 0x8b, 0x6c, 0x24, 0x10, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xca, 0x83, 0xe0, 0x01, 0x48, 0x01, 0xc8, 0x4d, 0x89, 0x2c, 0xc6, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x47, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x18, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xd2, 0x48, 0x01, 0xc2, 0x4d, 0x89, 0x2c, 0xd6, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x48, 0x01, 0xc1, 0x49, 0x89, 0x2c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x9e, 0xfe, 0xff, 0xff, 0xe9, 0xa0, 0xfe, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS_code_holes[21] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x41, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x93, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0xa8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe8, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x123, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x12f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x16b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1d3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x233, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x246, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS_data_holes[1];

// _LOAD_ATTR_SLOTplus_INIT_CALL_PY_EXACT_ARGS
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_INIT_CALL_PY_EXACT_ARGS.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 26: 4d 85 ed                      testq   %r13, %r13
// 29: 74 22                         je      0x4d <_JIT_ENTRY+0x4d>
// 2b: 49 89 d7                      movq    %rdx, %r15
// 2e: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// 33: 41 8b 45 00                   movl    (%r13), %eax
// 37: ff c0                         incl    %eax
// 39: 75 49                         jne     0x84 <_JIT_ENTRY+0x84>
// 3b: 49 8b 04 24                   movq    (%r12), %rax
// 3f: 48 85 c0                      testq   %rax, %rax
// 42: 7e 59                         jle     0x9d <_JIT_ENTRY+0x9d>
// 44: 85 c0                         testl   %eax, %eax
// 46: 79 7b                         jns     0xc3 <_JIT_ENTRY+0xc3>
// 48: e9 8c 00 00 00                jmp     0xd9 <_JIT_ENTRY+0xd9>
// 4d: 49 29 fe                      subq    %rdi, %r14
// 50: 49 83 c6 b8                   addq    $-0x48, %r14
// 54: 49 c1 ee 03                   shrq    $0x3, %r14
// 58: 44 89 77 40                   movl    %r14d, 0x40(%rdi)
// 5c: 48 8b 07                      movq    (%rdi), %rax
// 5f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000061:  R_X86_64_64  _JIT_TARGET
// 69: 89 c9                         movl    %ecx, %ecx
// 6b: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 6f: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 75: 48 83 c4 18                   addq    $0x18, %rsp
// 79: 5b                            popq    %rbx
// 7a: 41 5c                         popq    %r12
// 7c: 41 5d                         popq    %r13
// 7e: 41 5e                         popq    %r14
// 80: 41 5f                         popq    %r15
// 82: 5d                            popq    %rbp
// 83: c3                            retq
// 84: 41 89 45 00                   movl    %eax, (%r13)
// 88: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008a:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 92: ff d0                         callq   *%rax
// 94: 49 8b 04 24                   movq    (%r12), %rax
// 98: 48 85 c0                      testq   %rax, %rax
// 9b: 7f a7                         jg      0x44 <_JIT_ENTRY+0x44>
// 9d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000009f:  R_X86_64_64  .rodata.str1.1
// a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a9:  R_X86_64_64  _Py_NegativeRefcount
// b1: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// b6: 4c 89 e2                      movq    %r12, %rdx
// b9: ff d0                         callq   *%rax
// bb: 49 8b 04 24                   movq    (%r12), %rax
// bf: 85 c0                         testl   %eax, %eax
// c1: 78 16                         js      0xd9 <_JIT_ENTRY+0xd9>
// c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// cd: ff d0                         callq   *%rax
// cf: 49 ff 0c 24                   decq    (%r12)
// d3: 0f 84 15 02 00 00             je      0x2ee <_JIT_ENTRY+0x2ee>
// d9: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000df:  R_X86_64_64  _JIT_OPARG
// e7: a8 01                         testb   $0x1, %al
// e9: 74 07                         je      0xf2 <_JIT_ENTRY+0xf2>
// eb: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// f2: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000000f4:  R_X86_64_64  _JIT_OPARG
// fc: 0f b7 c5                      movzwl  %bp, %eax
// ff: 83 e5 01                      andl    $0x1, %ebp
// 102: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 107: 29 c1                         subl    %eax, %ecx
// 109: f7 d0                         notl    %eax
// 10b: 48 63 d0                      movslq  %eax, %rdx
// 10e: 48 01 ea                      addq    %rbp, %rdx
// 111: 48 63 c1                      movslq  %ecx, %rax
// 114: 48 01 e8                      addq    %rbp, %rax
// 117: 49 8b 1c c6                   movq    (%r14,%rax,8), %rbx
// 11b: 49 8b 0c d6                   movq    (%r14,%rdx,8), %rcx
// 11f: 4c 8b 63 30                   movq    0x30(%rbx), %r12
// 123: 4d 8b af 00 01 00 00          movq    0x100(%r15), %r13
// 12a: 49 63 44 24 4c                movslq  0x4c(%r12), %rax
// 12f: 49 8d 44 c5 00                leaq    (%r13,%rax,8), %rax
// 134: 49 89 87 00 01 00 00          movq    %rax, 0x100(%r15)
// 13b: 49 89 5d 10                   movq    %rbx, 0x10(%r13)
// 13f: 41 8b 04 24                   movl    (%r12), %eax
// 143: ff c0                         incl    %eax
// 145: 49 8d 14 d6                   leaq    (%r14,%rdx,8), %rdx
// 149: 48 85 c9                      testq   %rcx, %rcx
// 14c: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 151: 0f 84 c9 00 00 00             je      0x220 <_JIT_ENTRY+0x220>
// 157: 85 c0                         testl   %eax, %eax
// 159: 74 10                         je      0x16b <_JIT_ENTRY+0x16b>
// 15b: 41 89 04 24                   movl    %eax, (%r12)
// 15f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000161:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 169: ff d0                         callq   *%rax
// 16b: 4d 89 65 00                   movq    %r12, (%r13)
// 16f: 0f 10 43 10                   movups  0x10(%rbx), %xmm0
// 173: 41 0f 11 45 18                movups  %xmm0, 0x18(%r13)
// 178: 49 c7 45 28 00 00 00 00       movq    $0x0, 0x28(%r13)
// 180: 41 8b 4c 24 48                movl    0x48(%r12), %ecx
// 185: 41 89 4d 40                   movl    %ecx, 0x40(%r13)
// 189: 49 c7 45 30 00 00 00 00       movq    $0x0, 0x30(%r13)
// 191: 49 81 c4 c8 00 00 00          addq    $0xc8, %r12
// 198: 4d 89 65 38                   movq    %r12, 0x38(%r13)
// 19c: 66 41 c7 45 44 00 00          movw    $0x0, 0x44(%r13)
// 1a3: 41 c6 45 46 00                movb    $0x0, 0x46(%r13)
// 1a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001aa:  R_X86_64_64  _JIT_OPARG
// 1b2: 44 0f b7 e0                   movzwl  %ax, %r12d
// 1b6: 41 ff c4                      incl    %r12d
// 1b9: 45 85 e4                      testl   %r12d, %r12d
// 1bc: 0f 9f c2                      setg    %dl
// 1bf: 44 39 e1                      cmpl    %r12d, %ecx
// 1c2: 0f 8e 14 01 00 00             jle     0x2dc <_JIT_ENTRY+0x2dc>
// 1c8: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000001ca:  R_X86_64_64  _JIT_OPARG
// 1d2: 44 0f b7 e3                   movzwl  %bx, %r12d
// 1d6: 41 ff c4                      incl    %r12d
// 1d9: 4a 8d 3c e5 48 00 00 00       leaq    0x48(,%r12,8), %rdi
// 1e1: 4c 01 ef                      addq    %r13, %rdi
// 1e4: 44 89 e0                      movl    %r12d, %eax
// 1e7: f7 d0                         notl    %eax
// 1e9: 01 c1                         addl    %eax, %ecx
// 1eb: 48 8d 14 cd 08 00 00 00       leaq    0x8(,%rcx,8), %rdx
// 1f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f5:  R_X86_64_64  memset
// 1fd: 31 f6                         xorl    %esi, %esi
// 1ff: ff d0                         callq   *%rax
// 201: 45 85 e4                      testl   %r12d, %r12d
// 204: 0f 8e ed 01 00 00             jle     0x3f7 <_JIT_ENTRY+0x3f7>
// 20a: 0f b7 c3                      movzwl  %bx, %eax
// 20d: 83 e3 01                      andl    $0x1, %ebx
// 210: 48 29 c3                      subq    %rax, %rbx
// 213: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 217: 48 83 c0 f8                   addq    $-0x8, %rax
// 21b: e9 0f 01 00 00                jmp     0x32f <_JIT_ENTRY+0x32f>
// 220: 85 c0                         testl   %eax, %eax
// 222: 74 10                         je      0x234 <_JIT_ENTRY+0x234>
// 224: 41 89 04 24                   movl    %eax, (%r12)
// 228: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022a:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 232: ff d0                         callq   *%rax
// 234: 4d 89 65 00                   movq    %r12, (%r13)
// 238: 0f 10 43 10                   movups  0x10(%rbx), %xmm0
// 23c: 41 0f 11 45 18                movups  %xmm0, 0x18(%r13)
// 241: 49 c7 45 28 00 00 00 00       movq    $0x0, 0x28(%r13)
// 249: 41 8b 44 24 48                movl    0x48(%r12), %eax
// 24e: 41 89 45 40                   movl    %eax, 0x40(%r13)
// 252: 49 c7 45 30 00 00 00 00       movq    $0x0, 0x30(%r13)
// 25a: 49 81 c4 c8 00 00 00          addq    $0xc8, %r12
// 261: 4d 89 65 38                   movq    %r12, 0x38(%r13)
// 265: 66 41 c7 45 44 00 00          movw    $0x0, 0x44(%r13)
// 26c: 41 c6 45 46 00                movb    $0x0, 0x46(%r13)
// 271: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000273:  R_X86_64_64  _JIT_OPARG
// 27b: 44 0f b7 e1                   movzwl  %cx, %r12d
// 27f: 45 85 e4                      testl   %r12d, %r12d
// 282: 0f 9f c2                      setg    %dl
// 285: 44 39 e0                      cmpl    %r12d, %eax
// 288: 0f 8e 8a 00 00 00             jle     0x318 <_JIT_ENTRY+0x318>
// 28e: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000290:  R_X86_64_64  _JIT_OPARG
// 298: 0f b7 eb                      movzwl  %bx, %ebp
// 29b: 48 8d 3c ed 48 00 00 00       leaq    0x48(,%rbp,8), %rdi
// 2a3: 4c 01 ef                      addq    %r13, %rdi
// 2a6: 44 0f b7 e3                   movzwl  %bx, %r12d
// 2aa: 44 89 e1                      movl    %r12d, %ecx
// 2ad: f7 d1                         notl    %ecx
// 2af: 01 c8                         addl    %ecx, %eax
// 2b1: 48 8d 14 c5 08 00 00 00       leaq    0x8(,%rax,8), %rdx
// 2b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bb:  R_X86_64_64  memset
// 2c3: 31 f6                         xorl    %esi, %esi
// 2c5: ff d0                         callq   *%rax
// 2c7: 45 85 e4                      testl   %r12d, %r12d
// 2ca: 0f 8e 27 01 00 00             jle     0x3f7 <_JIT_ENTRY+0x3f7>
// 2d0: 83 e3 01                      andl    $0x1, %ebx
// 2d3: 48 29 eb                      subq    %rbp, %rbx
// 2d6: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 2da: eb 53                         jmp     0x32f <_JIT_ENTRY+0x32f>
// 2dc: f7 d0                         notl    %eax
// 2de: 48 0d 00 00 ff ff             orq     $-0x10000, %rax         # imm = 0xFFFF0000
// 2e4: f6 c2 01                      testb   $0x1, %dl
// 2e7: 75 3e                         jne     0x327 <_JIT_ENTRY+0x327>
// 2e9: e9 09 01 00 00                jmp     0x3f7 <_JIT_ENTRY+0x3f7>
// 2ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f0:  R_X86_64_64  _Py_Dealloc
// 2f8: 4c 89 e7                      movq    %r12, %rdi
// 2fb: ff d0                         callq   *%rax
// 2fd: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 301: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000303:  R_X86_64_64  _JIT_OPARG
// 30b: a8 01                         testb   $0x1, %al
// 30d: 0f 85 d8 fd ff ff             jne     0xeb <_JIT_ENTRY+0xeb>
// 313: e9 da fd ff ff                jmp     0xf2 <_JIT_ENTRY+0xf2>
// 318: 0f b7 c1                      movzwl  %cx, %eax
// 31b: 48 f7 d8                      negq    %rax
// 31e: f6 c2 01                      testb   $0x1, %dl
// 321: 0f 84 d0 00 00 00             je      0x3f7 <_JIT_ENTRY+0x3f7>
// 327: 49 8d 0c ee                   leaq    (%r14,%rbp,8), %rcx
// 32b: 48 8d 04 c1                   leaq    (%rcx,%rax,8), %rax
// 32f: 41 83 fc 02                   cmpl    $0x2, %r12d
// 333: b9 01 00 00 00                movl    $0x1, %ecx
// 338: 41 0f 4d cc                   cmovgel %r12d, %ecx
// 33c: 83 f9 08                      cmpl    $0x8, %ecx
// 33f: 72 10                         jb      0x351 <_JIT_ENTRY+0x351>
// 341: 4c 89 ea                      movq    %r13, %rdx
// 344: 48 29 c2                      subq    %rax, %rdx
// 347: 48 83 c2 48                   addq    $0x48, %rdx
// 34b: 48 83 fa 20                   cmpq    $0x20, %rdx
// 34f: 73 71                         jae     0x3c2 <_JIT_ENTRY+0x3c2>
// 351: 31 d2                         xorl    %edx, %edx
// 353: 48 89 d6                      movq    %rdx, %rsi
// 356: 48 f7 d6                      notq    %rsi
// 359: 48 01 ce                      addq    %rcx, %rsi
// 35c: 48 89 cf                      movq    %rcx, %rdi
// 35f: 48 83 e7 03                   andq    $0x3, %rdi
// 363: 74 1c                         je      0x381 <_JIT_ENTRY+0x381>
// 365: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// 370: 4c 8b 04 d0                   movq    (%rax,%rdx,8), %r8
// 374: 4d 89 44 d5 48                movq    %r8, 0x48(%r13,%rdx,8)
// 379: 48 ff c2                      incq    %rdx
// 37c: 48 ff cf                      decq    %rdi
// 37f: 75 ef                         jne     0x370 <_JIT_ENTRY+0x370>
// 381: 48 83 fe 03                   cmpq    $0x3, %rsi
// 385: 72 70                         jb      0x3f7 <_JIT_ENTRY+0x3f7>
// 387: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 390: 48 8b 34 d0                   movq    (%rax,%rdx,8), %rsi
// 394: 49 89 74 d5 48                movq    %rsi, 0x48(%r13,%rdx,8)
// 399: 48 8b 74 d0 08                movq    0x8(%rax,%rdx,8), %rsi
// 39e: 49 89 74 d5 50                movq    %rsi, 0x50(%r13,%rdx,8)
// 3a3: 48 8b 74 d0 10                movq    0x10(%rax,%rdx,8), %rsi
// 3a8: 49 89 74 d5 58                movq    %rsi, 0x58(%r13,%rdx,8)
// 3ad: 48 8b 74 d0 18                movq    0x18(%rax,%rdx,8), %rsi
// 3b2: 49 89 74 d5 60                movq    %rsi, 0x60(%r13,%rdx,8)
// 3b7: 48 83 c2 04                   addq    $0x4, %rdx
// 3bb: 48 39 d1                      cmpq    %rdx, %rcx
// 3be: 75 d0                         jne     0x390 <_JIT_ENTRY+0x390>
// 3c0: eb 35                         jmp     0x3f7 <_JIT_ENTRY+0x3f7>
// 3c2: 89 ca                         movl    %ecx, %edx
// 3c4: 81 e2 fc ff ff 7f             andl    $0x7ffffffc, %edx       # imm = 0x7FFFFFFC
// 3ca: 31 f6                         xorl    %esi, %esi
// 3cc: 0f 1f 40 00                   nopl    (%rax)
// 3d0: 0f 10 04 f0                   movups  (%rax,%rsi,8), %xmm0
// 3d4: 0f 10 4c f0 10                movups  0x10(%rax,%rsi,8), %xmm1
// 3d9: 41 0f 11 44 f5 48             movups  %xmm0, 0x48(%r13,%rsi,8)
// 3df: 41 0f 11 4c f5 58             movups  %xmm1, 0x58(%r13,%rsi,8)
// 3e5: 48 83 c6 04                   addq    $0x4, %rsi
// 3e9: 48 39 f2                      cmpq    %rsi, %rdx
// 3ec: 75 e2                         jne     0x3d0 <_JIT_ENTRY+0x3d0>
// 3ee: 48 39 ca                      cmpq    %rcx, %rdx
// 3f1: 0f 85 5c ff ff ff             jne     0x353 <_JIT_ENTRY+0x353>
// 3f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003f9:  R_X86_64_64  _JIT_OPARG
// 401: 0f b7 c8                      movzwl  %ax, %ecx
// 404: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 409: 29 ca                         subl    %ecx, %edx
// 40b: 48 63 ca                      movslq  %edx, %rcx
// 40e: 83 e0 01                      andl    $0x1, %eax
// 411: 48 01 c8                      addq    %rcx, %rax
// 414: 4d 89 2c c6                   movq    %r13, (%r14,%rax,8)
// 418: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000041a:  R_X86_64_64  _JIT_CONTINUE
// 422: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 427: 48 8b 74 24 08                movq    0x8(%rsp), %rsi
// 42c: 4c 89 fa                      movq    %r15, %rdx
// 42f: 48 83 c4 18                   addq    $0x18, %rsp
// 433: 5b                            popq    %rbx
// 434: 41 5c                         popq    %r12
// 436: 41 5d                         popq    %r13
// 438: 41 5e                         popq    %r14
// 43a: 41 5f                         popq    %r15
// 43c: 5d                            popq    %rbp
// 43d: ff e0                         jmpq    *%rax
// 43f: 
static const unsigned char _LOAD_ATTR_SLOTplus_INIT_CALL_PY_EXACT_ARGS_code_body[1088] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x22, 0x49, 0x89, 0xd7, 0x48, 0x89, 0x7c, 0x24, 0x10, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x49, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x59, 0x85, 0xc0, 0x79, 0x7b, 0xe9, 0x8c, 0x00, 0x00, 0x00, 0x49, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xa7, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x15, 0x02, 0x00, 0x00, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc5, 0x83, 0xe5, 0x01, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0xf7, 0xd0, 0x48, 0x63, 0xd0, 0x48, 0x01, 0xea, 0x48, 0x63, 0xc1, 0x48, 0x01, 0xe8, 0x49, 0x8b, 0x1c, 0xc6, 0x49, 0x8b, 0x0c, 0xd6, 0x4c, 0x8b, 0x63, 0x30, 0x4d, 0x8b, 0xaf, 0x00, 0x01, 0x00, 0x00, 0x49, 0x63, 0x44, 0x24, 0x4c, 0x49, 0x8d, 0x44, 0xc5, 0x00, 0x49, 0x89, 0x87, 0x00, 0x01, 0x00, 0x00, 0x49, 0x89, 0x5d, 0x10, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x49, 0x8d, 0x14, 0xd6, 0x48, 0x85, 0xc9, 0x48, 0x89, 0x54, 0x24, 0x08, 0x0f, 0x84, 0xc9, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0x65, 0x00, 0x0f, 0x10, 0x43, 0x10, 0x41, 0x0f, 0x11, 0x45, 0x18, 0x49, 0xc7, 0x45, 0x28, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x4c, 0x24, 0x48, 0x41, 0x89, 0x4d, 0x40, 0x49, 0xc7, 0x45, 0x30, 0x00, 0x00, 0x00, 0x00, 0x49, 0x81, 0xc4, 0xc8, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x65, 0x38, 0x66, 0x41, 0xc7, 0x45, 0x44, 0x00, 0x00, 0x41, 0xc6, 0x45, 0x46, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xe0, 0x41, 0xff, 0xc4, 0x45, 0x85, 0xe4, 0x0f, 0x9f, 0xc2, 0x44, 0x39, 0xe1, 0x0f, 0x8e, 0x14, 0x01, 0x00, 0x00, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xe3, 0x41, 0xff, 0xc4, 0x4a, 0x8d, 0x3c, 0xe5, 0x48, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xef, 0x44, 0x89, 0xe0, 0xf7, 0xd0, 0x01, 0xc1, 0x48, 0x8d, 0x14, 0xcd, 0x08, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xf6, 0xff, 0xd0, 0x45, 0x85, 0xe4, 0x0f, 0x8e, 0xed, 0x01, 0x00, 0x00, 0x0f, 0xb7, 0xc3, 0x83, 0xe3, 0x01, 0x48, 0x29, 0xc3, 0x49, 0x8d, 0x04, 0xde, 0x48, 0x83, 0xc0, 0xf8, 0xe9, 0x0f, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0x65, 0x00, 0x0f, 0x10, 0x43, 0x10, 0x41, 0x0f, 0x11, 0x45, 0x18, 0x49, 0xc7, 0x45, 0x28, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x44, 0x24, 0x48, 0x41, 0x89, 0x45, 0x40, 0x49, 0xc7, 0x45, 0x30, 0x00, 0x00, 0x00, 0x00, 0x49, 0x81, 0xc4, 0xc8, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x65, 0x38, 0x66, 0x41, 0xc7, 0x45, 0x44, 0x00, 0x00, 0x41, 0xc6, 0x45, 0x46, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xe1, 0x45, 0x85, 0xe4, 0x0f, 0x9f, 0xc2, 0x44, 0x39, 0xe0, 0x0f, 0x8e, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xeb, 0x48, 0x8d, 0x3c, 0xed, 0x48, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xef, 0x44, 0x0f, 0xb7, 0xe3, 0x44, 0x89, 0xe1, 0xf7, 0xd1, 0x01, 0xc8, 0x48, 0x8d, 0x14, 0xc5, 0x08, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xf6, 0xff, 0xd0, 0x45, 0x85, 0xe4, 0x0f, 0x8e, 0x27, 0x01, 0x00, 0x00, 0x83, 0xe3, 0x01, 0x48, 0x29, 0xeb, 0x49, 0x8d, 0x04, 0xde, 0xeb, 0x53, 0xf7, 0xd0, 0x48, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xf6, 0xc2, 0x01, 0x75, 0x3e, 0xe9, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0xd8, 0xfd, 0xff, 0xff, 0xe9, 0xda, 0xfd, 0xff, 0xff, 0x0f, 0xb7, 0xc1, 0x48, 0xf7, 0xd8, 0xf6, 0xc2, 0x01, 0x0f, 0x84, 0xd0, 0x00, 0x00, 0x00, 0x49, 0x8d, 0x0c, 0xee, 0x48, 0x8d, 0x04, 0xc1, 0x41, 0x83, 0xfc, 0x02, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x4d, 0xcc, 0x83, 0xf9, 0x08, 0x72, 0x10, 0x4c, 0x89, 0xea, 0x48, 0x29, 0xc2, 0x48, 0x83, 0xc2, 0x48, 0x48, 0x83, 0xfa, 0x20, 0x73, 0x71, 0x31, 0xd2, 0x48, 0x89, 0xd6, 0x48, 0xf7, 0xd6, 0x48, 0x01, 0xce, 0x48, 0x89, 0xcf, 0x48, 0x83, 0xe7, 0x03, 0x74, 0x1c, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x04, 0xd0, 0x4d, 0x89, 0x44, 0xd5, 0x48, 0x48, 0xff, 0xc2, 0x48, 0xff, 0xcf, 0x75, 0xef, 0x48, 0x83, 0xfe, 0x03, 0x72, 0x70, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x34, 0xd0, 0x49, 0x89, 0x74, 0xd5, 0x48, 0x48, 0x8b, 0x74, 0xd0, 0x08, 0x49, 0x89, 0x74, 0xd5, 0x50, 0x48, 0x8b, 0x74, 0xd0, 0x10, 0x49, 0x89, 0x74, 0xd5, 0x58, 0x48, 0x8b, 0x74, 0xd0, 0x18, 0x49, 0x89, 0x74, 0xd5, 0x60, 0x48, 0x83, 0xc2, 0x04, 0x48, 0x39, 0xd1, 0x75, 0xd0, 0xeb, 0x35, 0x89, 0xca, 0x81, 0xe2, 0xfc, 0xff, 0xff, 0x7f, 0x31, 0xf6, 0x0f, 0x1f, 0x40, 0x00, 0x0f, 0x10, 0x04, 0xf0, 0x0f, 0x10, 0x4c, 0xf0, 0x10, 0x41, 0x0f, 0x11, 0x44, 0xf5, 0x48, 0x41, 0x0f, 0x11, 0x4c, 0xf5, 0x58, 0x48, 0x83, 0xc6, 0x04, 0x48, 0x39, 0xf2, 0x75, 0xe2, 0x48, 0x39, 0xca, 0x0f, 0x85, 0x5c, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xca, 0x83, 0xe0, 0x01, 0x48, 0x01, 0xc8, 0x4d, 0x89, 0x2c, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x48, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_ATTR_SLOTplus_INIT_CALL_PY_EXACT_ARGS_code_holes[21] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x9f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xa9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xc5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x161, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1aa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f5, HoleKind_R_X86_64_64, HoleValue_ZERO, &memset, 0x0},
    {0x22a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x273, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x290, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &memset, 0x0},
    {0x2f0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x303, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3f9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x41a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_INIT_CALL_PY_EXACT_ARGS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_INIT_CALL_PY_EXACT_ARGS_data_holes[1];

// _LOAD_ATTR_SLOTplus_INSERT
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_INSERT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 26: 4d 85 ed                      testq   %r13, %r13
// 29: 74 1d                         je      0x48 <_JIT_ENTRY+0x48>
// 2b: 49 89 d7                      movq    %rdx, %r15
// 2e: 41 8b 45 00                   movl    (%r13), %eax
// 32: ff c0                         incl    %eax
// 34: 75 49                         jne     0x7f <_JIT_ENTRY+0x7f>
// 36: 49 8b 04 24                   movq    (%r12), %rax
// 3a: 48 85 c0                      testq   %rax, %rax
// 3d: 7e 59                         jle     0x98 <_JIT_ENTRY+0x98>
// 3f: 85 c0                         testl   %eax, %eax
// 41: 79 7b                         jns     0xbe <_JIT_ENTRY+0xbe>
// 43: e9 88 00 00 00                jmp     0xd0 <_JIT_ENTRY+0xd0>
// 48: 49 29 de                      subq    %rbx, %r14
// 4b: 49 83 c6 b8                   addq    $-0x48, %r14
// 4f: 49 c1 ee 03                   shrq    $0x3, %r14
// 53: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 57: 48 8b 03                      movq    (%rbx), %rax
// 5a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005c:  R_X86_64_64  _JIT_TARGET
// 64: 89 c9                         movl    %ecx, %ecx
// 66: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 6a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 70: 48 83 c4 08                   addq    $0x8, %rsp
// 74: 5b                            popq    %rbx
// 75: 41 5c                         popq    %r12
// 77: 41 5d                         popq    %r13
// 79: 41 5e                         popq    %r14
// 7b: 41 5f                         popq    %r15
// 7d: 5d                            popq    %rbp
// 7e: c3                            retq
// 7f: 41 89 45 00                   movl    %eax, (%r13)
// 83: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000085:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 8d: ff d0                         callq   *%rax
// 8f: 49 8b 04 24                   movq    (%r12), %rax
// 93: 48 85 c0                      testq   %rax, %rax
// 96: 7f a7                         jg      0x3f <_JIT_ENTRY+0x3f>
// 98: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000009a:  R_X86_64_64  .rodata.str1.1
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _Py_NegativeRefcount
// ac: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// b1: 4c 89 e2                      movq    %r12, %rdx
// b4: ff d0                         callq   *%rax
// b6: 49 8b 04 24                   movq    (%r12), %rax
// ba: 85 c0                         testl   %eax, %eax
// bc: 78 12                         js      0xd0 <_JIT_ENTRY+0xd0>
// be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c8: ff d0                         callq   *%rax
// ca: 49 ff 0c 24                   decq    (%r12)
// ce: 74 7a                         je      0x14a <_JIT_ENTRY+0x14a>
// d0: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d6:  R_X86_64_64  _JIT_OPARG
// de: a8 01                         testb   $0x1, %al
// e0: 74 07                         je      0xe9 <_JIT_ENTRY+0xe9>
// e2: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// e9: 89 c1                         movl    %eax, %ecx
// eb: 0f b7 d0                      movzwl  %ax, %edx
// ee: 83 e0 01                      andl    $0x1, %eax
// f1: 4d 8d 24 c6                   leaq    (%r14,%rax,8), %r12
// f5: f7 d1                         notl    %ecx
// f7: 4d 8b 6c c6 f8                movq    -0x8(%r14,%rax,8), %r13
// fc: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 102: 48 63 e9                      movslq  %ecx, %rbp
// 105: 48 01 c5                      addq    %rax, %rbp
// 108: 49 8d 3c ee                   leaq    (%r14,%rbp,8), %rdi
// 10c: 48 29 d0                      subq    %rdx, %rax
// 10f: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 113: 48 c1 e2 03                   shlq    $0x3, %rdx
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  memmove
// 121: ff d0                         callq   *%rax
// 123: 4d 89 2c ee                   movq    %r13, (%r14,%rbp,8)
// 127: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000129:  R_X86_64_64  _JIT_CONTINUE
// 131: 48 89 df                      movq    %rbx, %rdi
// 134: 4c 89 e6                      movq    %r12, %rsi
// 137: 4c 89 fa                      movq    %r15, %rdx
// 13a: 48 83 c4 08                   addq    $0x8, %rsp
// 13e: 5b                            popq    %rbx
// 13f: 41 5c                         popq    %r12
// 141: 41 5d                         popq    %r13
// 143: 41 5e                         popq    %r14
// 145: 41 5f                         popq    %r15
// 147: 5d                            popq    %rbp
// 148: ff e0                         jmpq    *%rax
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_Dealloc
// 154: 4c 89 e7                      movq    %r12, %rdi
// 157: ff d0                         callq   *%rax
// 159: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _JIT_OPARG
// 167: a8 01                         testb   $0x1, %al
// 169: 0f 85 73 ff ff ff             jne     0xe2 <_JIT_ENTRY+0xe2>
// 16f: e9 75 ff ff ff                jmp     0xe9 <_JIT_ENTRY+0xe9>
// 174: 
static const unsigned char _LOAD_ATTR_SLOTplus_INSERT_code_body[373] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1d, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x49, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x59, 0x85, 0xc0, 0x79, 0x7b, 0xe9, 0x88, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xa7, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x7a, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0x0f, 0xb7, 0xd0, 0x83, 0xe0, 0x01, 0x4d, 0x8d, 0x24, 0xc6, 0xf7, 0xd1, 0x4d, 0x8b, 0x6c, 0xc6, 0xf8, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xe9, 0x48, 0x01, 0xc5, 0x49, 0x8d, 0x3c, 0xee, 0x48, 0x29, 0xd0, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xc1, 0xe2, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0x2c, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x73, 0xff, 0xff, 0xff, 0xe9, 0x75, 0xff, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_INSERT_code_holes[12] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x9a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xc0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &memmove, 0x0},
    {0x129, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_INSERT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_INSERT_data_holes[1];

// _LOAD_ATTR_SLOTplus_IS_NONE
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_IS_NONE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f6                      movq    %rsi, %r14
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 74 1d                         je      0x46 <_JIT_ENTRY+0x46>
// 29: 49 89 d7                      movq    %rdx, %r15
// 2c: 41 8b 45 00                   movl    (%r13), %eax
// 30: ff c0                         incl    %eax
// 32: 75 42                         jne     0x76 <_JIT_ENTRY+0x76>
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 52                         jle     0x8f <_JIT_ENTRY+0x8f>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 74                         jns     0xb5 <_JIT_ENTRY+0xb5>
// 41: e9 85 00 00 00                jmp     0xcb <_JIT_ENTRY+0xcb>
// 46: 49 29 de                      subq    %rbx, %r14
// 49: 49 83 c6 b8                   addq    $-0x48, %r14
// 4d: 49 c1 ee 03                   shrq    $0x3, %r14
// 51: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 55: 48 8b 03                      movq    (%rbx), %rax
// 58: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005a:  R_X86_64_64  _JIT_TARGET
// 62: 89 c9                         movl    %ecx, %ecx
// 64: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 6c: 5b                            popq    %rbx
// 6d: 41 5c                         popq    %r12
// 6f: 41 5d                         popq    %r13
// 71: 41 5e                         popq    %r14
// 73: 41 5f                         popq    %r15
// 75: c3                            retq
// 76: 41 89 45 00                   movl    %eax, (%r13)
// 7a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007c:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 84: ff d0                         callq   *%rax
// 86: 49 8b 04 24                   movq    (%r12), %rax
// 8a: 48 85 c0                      testq   %rax, %rax
// 8d: 7f ae                         jg      0x3d <_JIT_ENTRY+0x3d>
// 8f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000091:  R_X86_64_64  .rodata.str1.1
// 99: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009b:  R_X86_64_64  _Py_NegativeRefcount
// a3: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a8: 4c 89 e2                      movq    %r12, %rdx
// ab: ff d0                         callq   *%rax
// ad: 49 8b 04 24                   movq    (%r12), %rax
// b1: 85 c0                         testl   %eax, %eax
// b3: 78 16                         js      0xcb <_JIT_ENTRY+0xcb>
// b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bf: ff d0                         callq   *%rax
// c1: 49 ff 0c 24                   decq    (%r12)
// c5: 0f 84 d7 00 00 00             je      0x1a2 <_JIT_ENTRY+0x1a2>
// cb: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d1:  R_X86_64_64  _JIT_OPARG
// d9: a8 01                         testb   $0x1, %al
// db: 74 07                         je      0xe4 <_JIT_ENTRY+0xe4>
// dd: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// e4: 83 e0 01                      andl    $0x1, %eax
// e7: 4d 8b 64 c6 f8                movq    -0x8(%r14,%rax,8), %r12
// ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ee:  R_X86_64_64  _Py_NoneStruct
// f6: 49 39 c4                      cmpq    %rax, %r12
// f9: 74 19                         je      0x114 <_JIT_ENTRY+0x114>
// fb: 49 8b 04 24                   movq    (%r12), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7e 1c                         jle     0x120 <_JIT_ENTRY+0x120>
// 104: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000106:  R_X86_64_64  _Py_FalseStruct
// 10e: 85 c0                         testl   %eax, %eax
// 110: 79 3e                         jns     0x150 <_JIT_ENTRY+0x150>
// 112: eb 5d                         jmp     0x171 <_JIT_ENTRY+0x171>
// 114: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000116:  R_X86_64_64  _Py_TrueStruct
// 11e: eb 51                         jmp     0x171 <_JIT_ENTRY+0x171>
// 120: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000122:  R_X86_64_64  .rodata.str1.1
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_NegativeRefcount
// 134: be ef 07 00 00                movl    $0x7ef, %esi            # imm = 0x7EF
// 139: 4c 89 e2                      movq    %r12, %rdx
// 13c: ff d0                         callq   *%rax
// 13e: 49 8b 04 24                   movq    (%r12), %rax
// 142: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000144:  R_X86_64_64  _Py_FalseStruct
// 14c: 85 c0                         testl   %eax, %eax
// 14e: 78 21                         js      0x171 <_JIT_ENTRY+0x171>
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 15a: ff d0                         callq   *%rax
// 15c: 49 ff 0c 24                   decq    (%r12)
// 160: 75 0f                         jne     0x171 <_JIT_ENTRY+0x171>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_Dealloc
// 16c: 4c 89 e7                      movq    %r12, %rdi
// 16f: ff d0                         callq   *%rax
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _JIT_OPARG
// 17b: 83 e0 01                      andl    $0x1, %eax
// 17e: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 182: 4d 89 6c c6 f8                movq    %r13, -0x8(%r14,%rax,8)
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _JIT_CONTINUE
// 191: 48 89 df                      movq    %rbx, %rdi
// 194: 4c 89 fa                      movq    %r15, %rdx
// 197: 5b                            popq    %rbx
// 198: 41 5c                         popq    %r12
// 19a: 41 5d                         popq    %r13
// 19c: 41 5e                         popq    %r14
// 19e: 41 5f                         popq    %r15
// 1a0: ff e0                         jmpq    *%rax
// 1a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a4:  R_X86_64_64  _Py_Dealloc
// 1ac: 4c 89 e7                      movq    %r12, %rdi
// 1af: ff d0                         callq   *%rax
// 1b1: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 1b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b7:  R_X86_64_64  _JIT_OPARG
// 1bf: a8 01                         testb   $0x1, %al
// 1c1: 0f 85 16 ff ff ff             jne     0xdd <_JIT_ENTRY+0xdd>
// 1c7: e9 18 ff ff ff                jmp     0xe4 <_JIT_ENTRY+0xe4>
// 1cc: 
static const unsigned char _LOAD_ATTR_SLOTplus_IS_NONE_code_body[461] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1d, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x42, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x52, 0x85, 0xc0, 0x79, 0x74, 0xe9, 0x85, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xae, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xd7, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x4d, 0x8b, 0x64, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0xc4, 0x74, 0x19, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1c, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x79, 0x3e, 0xeb, 0x5d, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x51, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xef, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x4d, 0x89, 0x6c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x16, 0xff, 0xff, 0xff, 0xe9, 0x18, 0xff, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_IS_NONE_code_holes[20] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x116, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x122, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1a4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_IS_NONE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_IS_NONE_data_holes[1];

// _LOAD_ATTR_SLOTplus_IS_OP
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_IS_OP.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 26: 4d 85 ed                      testq   %r13, %r13
// 29: 74 1d                         je      0x48 <_JIT_ENTRY+0x48>
// 2b: 49 89 d7                      movq    %rdx, %r15
// 2e: 41 8b 45 00                   movl    (%r13), %eax
// 32: ff c0                         incl    %eax
// 34: 75 49                         jne     0x7f <_JIT_ENTRY+0x7f>
// 36: 49 8b 04 24                   movq    (%r12), %rax
// 3a: 48 85 c0                      testq   %rax, %rax
// 3d: 7e 59                         jle     0x98 <_JIT_ENTRY+0x98>
// 3f: 85 c0                         testl   %eax, %eax
// 41: 79 7b                         jns     0xbe <_JIT_ENTRY+0xbe>
// 43: e9 8c 00 00 00                jmp     0xd4 <_JIT_ENTRY+0xd4>
// 48: 49 29 de                      subq    %rbx, %r14
// 4b: 49 83 c6 b8                   addq    $-0x48, %r14
// 4f: 49 c1 ee 03                   shrq    $0x3, %r14
// 53: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 57: 48 8b 03                      movq    (%rbx), %rax
// 5a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005c:  R_X86_64_64  _JIT_TARGET
// 64: 89 c9                         movl    %ecx, %ecx
// 66: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 6a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 70: 48 83 c4 08                   addq    $0x8, %rsp
// 74: 5b                            popq    %rbx
// 75: 41 5c                         popq    %r12
// 77: 41 5d                         popq    %r13
// 79: 41 5e                         popq    %r14
// 7b: 41 5f                         popq    %r15
// 7d: 5d                            popq    %rbp
// 7e: c3                            retq
// 7f: 41 89 45 00                   movl    %eax, (%r13)
// 83: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000085:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 8d: ff d0                         callq   *%rax
// 8f: 49 8b 04 24                   movq    (%r12), %rax
// 93: 48 85 c0                      testq   %rax, %rax
// 96: 7f a7                         jg      0x3f <_JIT_ENTRY+0x3f>
// 98: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000009a:  R_X86_64_64  .rodata.str1.1
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _Py_NegativeRefcount
// ac: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// b1: 4c 89 e2                      movq    %r12, %rdx
// b4: ff d0                         callq   *%rax
// b6: 49 8b 04 24                   movq    (%r12), %rax
// ba: 85 c0                         testl   %eax, %eax
// bc: 78 16                         js      0xd4 <_JIT_ENTRY+0xd4>
// be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c8: ff d0                         callq   *%rax
// ca: 49 ff 0c 24                   decq    (%r12)
// ce: 0f 84 91 00 00 00             je      0x165 <_JIT_ENTRY+0x165>
// d4: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// d8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000da:  R_X86_64_64  _JIT_OPARG
// e2: a8 01                         testb   $0x1, %al
// e4: 74 07                         je      0xed <_JIT_ENTRY+0xed>
// e6: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// ed: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000000ef:  R_X86_64_64  _JIT_OPARG
// f7: 83 e5 01                      andl    $0x1, %ebp
// fa: 4d 8b 64 ee f0                movq    -0x10(%r14,%rbp,8), %r12
// ff: 4d 8b 6c ee f8                movq    -0x8(%r14,%rbp,8), %r13
// 104: 49 8b 04 24                   movq    (%r12), %rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 7e 06                         jle     0x113 <_JIT_ENTRY+0x113>
// 10d: 85 c0                         testl   %eax, %eax
// 10f: 79 28                         jns     0x139 <_JIT_ENTRY+0x139>
// 111: eb 38                         jmp     0x14b <_JIT_ENTRY+0x14b>
// 113: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000115:  R_X86_64_64  .rodata.str1.1
// 11d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011f:  R_X86_64_64  _Py_NegativeRefcount
// 127: be 98 07 00 00                movl    $0x798, %esi            # imm = 0x798
// 12c: 4c 89 e2                      movq    %r12, %rdx
// 12f: ff d0                         callq   *%rax
// 131: 49 8b 04 24                   movq    (%r12), %rax
// 135: 85 c0                         testl   %eax, %eax
// 137: 78 12                         js      0x14b <_JIT_ENTRY+0x14b>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 143: ff d0                         callq   *%rax
// 145: 49 ff 0c 24                   decq    (%r12)
// 149: 74 44                         je      0x18f <_JIT_ENTRY+0x18f>
// 14b: 49 8b 45 00                   movq    (%r13), %rax
// 14f: 48 85 c0                      testq   %rax, %rax
// 152: 7e 53                         jle     0x1a7 <_JIT_ENTRY+0x1a7>
// 154: 49 8d 2c ee                   leaq    (%r14,%rbp,8), %rbp
// 158: 48 83 c5 f8                   addq    $-0x8, %rbp
// 15c: 85 c0                         testl   %eax, %eax
// 15e: 79 75                         jns     0x1d5 <_JIT_ENTRY+0x1d5>
// 160: e9 91 00 00 00                jmp     0x1f6 <_JIT_ENTRY+0x1f6>
// 165: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000167:  R_X86_64_64  _Py_Dealloc
// 16f: 4c 89 e7                      movq    %r12, %rdi
// 172: ff d0                         callq   *%rax
// 174: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 178: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017a:  R_X86_64_64  _JIT_OPARG
// 182: a8 01                         testb   $0x1, %al
// 184: 0f 85 5c ff ff ff             jne     0xe6 <_JIT_ENTRY+0xe6>
// 18a: e9 5e ff ff ff                jmp     0xed <_JIT_ENTRY+0xed>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _Py_Dealloc
// 199: 4c 89 e7                      movq    %r12, %rdi
// 19c: ff d0                         callq   *%rax
// 19e: 49 8b 45 00                   movq    (%r13), %rax
// 1a2: 48 85 c0                      testq   %rax, %rax
// 1a5: 7f ad                         jg      0x154 <_JIT_ENTRY+0x154>
// 1a7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a9:  R_X86_64_64  .rodata.str1.1
// 1b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b3:  R_X86_64_64  _Py_NegativeRefcount
// 1bb: be 99 07 00 00                movl    $0x799, %esi            # imm = 0x799
// 1c0: 4c 89 ea                      movq    %r13, %rdx
// 1c3: ff d0                         callq   *%rax
// 1c5: 49 8b 45 00                   movq    (%r13), %rax
// 1c9: 49 8d 2c ee                   leaq    (%r14,%rbp,8), %rbp
// 1cd: 48 83 c5 f8                   addq    $-0x8, %rbp
// 1d1: 85 c0                         testl   %eax, %eax
// 1d3: 78 21                         js      0x1f6 <_JIT_ENTRY+0x1f6>
// 1d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1df: ff d0                         callq   *%rax
// 1e1: 49 ff 4d 00                   decq    (%r13)
// 1e5: 75 0f                         jne     0x1f6 <_JIT_ENTRY+0x1f6>
// 1e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e9:  R_X86_64_64  _Py_Dealloc
// 1f1: 4c 89 ef                      movq    %r13, %rdi
// 1f4: ff d0                         callq   *%rax
// 1f6: 31 c0                         xorl    %eax, %eax
// 1f8: 4d 39 ec                      cmpq    %r13, %r12
// 1fb: 0f 94 c0                      sete    %al
// 1fe: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000200:  R_X86_64_64  _JIT_OPARG
// 208: 66 39 c8                      cmpw    %cx, %ax
// 20b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020d:  R_X86_64_64  _Py_FalseStruct
// 215: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000217:  R_X86_64_64  _Py_TrueStruct
// 21f: 48 0f 44 d0                   cmoveq  %rax, %rdx
// 223: 83 e1 01                      andl    $0x1, %ecx
// 226: 49 89 54 ce f0                movq    %rdx, -0x10(%r14,%rcx,8)
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _JIT_CONTINUE
// 235: 48 89 df                      movq    %rbx, %rdi
// 238: 48 89 ee                      movq    %rbp, %rsi
// 23b: 4c 89 fa                      movq    %r15, %rdx
// 23e: 48 83 c4 08                   addq    $0x8, %rsp
// 242: 5b                            popq    %rbx
// 243: 41 5c                         popq    %r12
// 245: 41 5d                         popq    %r13
// 247: 41 5e                         popq    %r14
// 249: 41 5f                         popq    %r15
// 24b: 5d                            popq    %rbp
// 24c: ff e0                         jmpq    *%rax
// 24e: 
static const unsigned char _LOAD_ATTR_SLOTplus_IS_OP_code_body[591] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1d, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x49, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x59, 0x85, 0xc0, 0x79, 0x7b, 0xe9, 0x8c, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xa7, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x91, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe5, 0x01, 0x4d, 0x8b, 0x64, 0xee, 0xf0, 0x4d, 0x8b, 0x6c, 0xee, 0xf8, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x98, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x44, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x53, 0x49, 0x8d, 0x2c, 0xee, 0x48, 0x83, 0xc5, 0xf8, 0x85, 0xc0, 0x79, 0x75, 0xe9, 0x91, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x5c, 0xff, 0xff, 0xff, 0xe9, 0x5e, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xad, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x99, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x49, 0x8d, 0x2c, 0xee, 0x48, 0x83, 0xc5, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x31, 0xc0, 0x4d, 0x39, 0xec, 0x0f, 0x94, 0xc0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x39, 0xc8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xd0, 0x83, 0xe1, 0x01, 0x49, 0x89, 0x54, 0xce, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x89, 0xee, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_ATTR_SLOTplus_IS_OP_code_holes[23] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x9a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xc0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xda, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x115, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x11f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x17a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1e9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x200, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x217, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_IS_OP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_IS_OP_data_holes[1];

// _LOAD_ATTR_SLOTplus_ITER_CHECK_LIST
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_ITER_CHECK_LIST.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f6                      movq    %rsi, %r14
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 0f 84 a7 00 00 00             je      0xd4 <_JIT_ENTRY+0xd4>
// 2d: 49 89 d7                      movq    %rdx, %r15
// 30: 41 8b 45 00                   movl    (%r13), %eax
// 34: ff c0                         incl    %eax
// 36: 75 0f                         jne     0x47 <_JIT_ENTRY+0x47>
// 38: 49 8b 04 24                   movq    (%r12), %rax
// 3c: 48 85 c0                      testq   %rax, %rax
// 3f: 7e 1f                         jle     0x60 <_JIT_ENTRY+0x60>
// 41: 85 c0                         testl   %eax, %eax
// 43: 79 41                         jns     0x86 <_JIT_ENTRY+0x86>
// 45: eb 55                         jmp     0x9c <_JIT_ENTRY+0x9c>
// 47: 41 89 45 00                   movl    %eax, (%r13)
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 55: ff d0                         callq   *%rax
// 57: 49 8b 04 24                   movq    (%r12), %rax
// 5b: 48 85 c0                      testq   %rax, %rax
// 5e: 7f e1                         jg      0x41 <_JIT_ENTRY+0x41>
// 60: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000062:  R_X86_64_64  .rodata.str1.1
// 6a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006c:  R_X86_64_64  _Py_NegativeRefcount
// 74: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 79: 4c 89 e2                      movq    %r12, %rdx
// 7c: ff d0                         callq   *%rax
// 7e: 49 8b 04 24                   movq    (%r12), %rax
// 82: 85 c0                         testl   %eax, %eax
// 84: 78 16                         js      0x9c <_JIT_ENTRY+0x9c>
// 86: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000088:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 90: ff d0                         callq   *%rax
// 92: 49 ff 0c 24                   decq    (%r12)
// 96: 0f 84 83 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 9c: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _JIT_OPARG
// aa: a8 01                         testb   $0x1, %al
// ac: 74 07                         je      0xb5 <_JIT_ENTRY+0xb5>
// ae: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// b5: 83 e0 01                      andl    $0x1, %eax
// b8: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// bc: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  PyListIter_Type
// cb: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// cf: 74 33                         je      0x104 <_JIT_ENTRY+0x104>
// d1: 49 89 f6                      movq    %rsi, %r14
// d4: 49 29 de                      subq    %rbx, %r14
// d7: 49 83 c6 b8                   addq    $-0x48, %r14
// db: 49 c1 ee 03                   shrq    $0x3, %r14
// df: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// e3: 48 8b 03                      movq    (%rbx), %rax
// e6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000e8:  R_X86_64_64  _JIT_TARGET
// f0: 89 c9                         movl    %ecx, %ecx
// f2: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// fa: 5b                            popq    %rbx
// fb: 41 5c                         popq    %r12
// fd: 41 5d                         popq    %r13
// ff: 41 5e                         popq    %r14
// 101: 41 5f                         popq    %r15
// 103: c3                            retq
// 104: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000106:  R_X86_64_64  _JIT_CONTINUE
// 10e: 48 89 df                      movq    %rbx, %rdi
// 111: 4c 89 fa                      movq    %r15, %rdx
// 114: 5b                            popq    %rbx
// 115: 41 5c                         popq    %r12
// 117: 41 5d                         popq    %r13
// 119: 41 5e                         popq    %r14
// 11b: 41 5f                         popq    %r15
// 11d: ff e0                         jmpq    *%rax
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 4c 89 e7                      movq    %r12, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 132: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000134:  R_X86_64_64  _JIT_OPARG
// 13c: a8 01                         testb   $0x1, %al
// 13e: 0f 85 6a ff ff ff             jne     0xae <_JIT_ENTRY+0xae>
// 144: e9 6c ff ff ff                jmp     0xb5 <_JIT_ENTRY+0xb5>
// 149: 
static const unsigned char _LOAD_ATTR_SLOTplus_ITER_CHECK_LIST_code_body[330] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xa7, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1f, 0x85, 0xc0, 0x79, 0x41, 0xeb, 0x55, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x83, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x33, 0x49, 0x89, 0xf6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x6a, 0xff, 0xff, 0xff, 0xe9, 0x6c, 0xff, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_ITER_CHECK_LIST_code_holes[12] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyListIter_Type, 0x0},
    {0xe8, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x134, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_ITER_CHECK_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_ITER_CHECK_LIST_data_holes[1];

// _LOAD_ATTR_SLOTplus_ITER_CHECK_RANGE
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_ITER_CHECK_RANGE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f6                      movq    %rsi, %r14
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 0f 84 a7 00 00 00             je      0xd4 <_JIT_ENTRY+0xd4>
// 2d: 49 89 d7                      movq    %rdx, %r15
// 30: 41 8b 45 00                   movl    (%r13), %eax
// 34: ff c0                         incl    %eax
// 36: 75 0f                         jne     0x47 <_JIT_ENTRY+0x47>
// 38: 49 8b 04 24                   movq    (%r12), %rax
// 3c: 48 85 c0                      testq   %rax, %rax
// 3f: 7e 1f                         jle     0x60 <_JIT_ENTRY+0x60>
// 41: 85 c0                         testl   %eax, %eax
// 43: 79 41                         jns     0x86 <_JIT_ENTRY+0x86>
// 45: eb 55                         jmp     0x9c <_JIT_ENTRY+0x9c>
// 47: 41 89 45 00                   movl    %eax, (%r13)
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 55: ff d0                         callq   *%rax
// 57: 49 8b 04 24                   movq    (%r12), %rax
// 5b: 48 85 c0                      testq   %rax, %rax
// 5e: 7f e1                         jg      0x41 <_JIT_ENTRY+0x41>
// 60: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000062:  R_X86_64_64  .rodata.str1.1
// 6a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006c:  R_X86_64_64  _Py_NegativeRefcount
// 74: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 79: 4c 89 e2                      movq    %r12, %rdx
// 7c: ff d0                         callq   *%rax
// 7e: 49 8b 04 24                   movq    (%r12), %rax
// 82: 85 c0                         testl   %eax, %eax
// 84: 78 16                         js      0x9c <_JIT_ENTRY+0x9c>
// 86: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000088:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 90: ff d0                         callq   *%rax
// 92: 49 ff 0c 24                   decq    (%r12)
// 96: 0f 84 83 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 9c: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _JIT_OPARG
// aa: a8 01                         testb   $0x1, %al
// ac: 74 07                         je      0xb5 <_JIT_ENTRY+0xb5>
// ae: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// b5: 83 e0 01                      andl    $0x1, %eax
// b8: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// bc: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  PyRangeIter_Type
// cb: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// cf: 74 33                         je      0x104 <_JIT_ENTRY+0x104>
// d1: 49 89 f6                      movq    %rsi, %r14
// d4: 49 29 de                      subq    %rbx, %r14
// d7: 49 83 c6 b8                   addq    $-0x48, %r14
// db: 49 c1 ee 03                   shrq    $0x3, %r14
// df: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// e3: 48 8b 03                      movq    (%rbx), %rax
// e6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000e8:  R_X86_64_64  _JIT_TARGET
// f0: 89 c9                         movl    %ecx, %ecx
// f2: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// fa: 5b                            popq    %rbx
// fb: 41 5c                         popq    %r12
// fd: 41 5d                         popq    %r13
// ff: 41 5e                         popq    %r14
// 101: 41 5f                         popq    %r15
// 103: c3                            retq
// 104: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000106:  R_X86_64_64  _JIT_CONTINUE
// 10e: 48 89 df                      movq    %rbx, %rdi
// 111: 4c 89 fa                      movq    %r15, %rdx
// 114: 5b                            popq    %rbx
// 115: 41 5c                         popq    %r12
// 117: 41 5d                         popq    %r13
// 119: 41 5e                         popq    %r14
// 11b: 41 5f                         popq    %r15
// 11d: ff e0                         jmpq    *%rax
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 4c 89 e7                      movq    %r12, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 132: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000134:  R_X86_64_64  _JIT_OPARG
// 13c: a8 01                         testb   $0x1, %al
// 13e: 0f 85 6a ff ff ff             jne     0xae <_JIT_ENTRY+0xae>
// 144: e9 6c ff ff ff                jmp     0xb5 <_JIT_ENTRY+0xb5>
// 149: 
static const unsigned char _LOAD_ATTR_SLOTplus_ITER_CHECK_RANGE_code_body[330] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xa7, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1f, 0x85, 0xc0, 0x79, 0x41, 0xeb, 0x55, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x83, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x33, 0x49, 0x89, 0xf6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x6a, 0xff, 0xff, 0xff, 0xe9, 0x6c, 0xff, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_ITER_CHECK_RANGE_code_holes[12] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyRangeIter_Type, 0x0},
    {0xe8, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x134, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_ITER_CHECK_RANGE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_ITER_CHECK_RANGE_data_holes[1];

// _LOAD_ATTR_SLOTplus_ITER_CHECK_TUPLE
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_ITER_CHECK_TUPLE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f6                      movq    %rsi, %r14
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 0f 84 a7 00 00 00             je      0xd4 <_JIT_ENTRY+0xd4>
// 2d: 49 89 d7                      movq    %rdx, %r15
// 30: 41 8b 45 00                   movl    (%r13), %eax
// 34: ff c0                         incl    %eax
// 36: 75 0f                         jne     0x47 <_JIT_ENTRY+0x47>
// 38: 49 8b 04 24                   movq    (%r12), %rax
// 3c: 48 85 c0                      testq   %rax, %rax
// 3f: 7e 1f                         jle     0x60 <_JIT_ENTRY+0x60>
// 41: 85 c0                         testl   %eax, %eax
// 43: 79 41                         jns     0x86 <_JIT_ENTRY+0x86>
// 45: eb 55                         jmp     0x9c <_JIT_ENTRY+0x9c>
// 47: 41 89 45 00                   movl    %eax, (%r13)
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 55: ff d0                         callq   *%rax
// 57: 49 8b 04 24                   movq    (%r12), %rax
// 5b: 48 85 c0                      testq   %rax, %rax
// 5e: 7f e1                         jg      0x41 <_JIT_ENTRY+0x41>
// 60: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000062:  R_X86_64_64  .rodata.str1.1
// 6a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006c:  R_X86_64_64  _Py_NegativeRefcount
// 74: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 79: 4c 89 e2                      movq    %r12, %rdx
// 7c: ff d0                         callq   *%rax
// 7e: 49 8b 04 24                   movq    (%r12), %rax
// 82: 85 c0                         testl   %eax, %eax
// 84: 78 16                         js      0x9c <_JIT_ENTRY+0x9c>
// 86: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000088:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 90: ff d0                         callq   *%rax
// 92: 49 ff 0c 24                   decq    (%r12)
// 96: 0f 84 83 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 9c: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _JIT_OPARG
// aa: a8 01                         testb   $0x1, %al
// ac: 74 07                         je      0xb5 <_JIT_ENTRY+0xb5>
// ae: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// b5: 83 e0 01                      andl    $0x1, %eax
// b8: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// bc: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  PyTupleIter_Type
// cb: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// cf: 74 33                         je      0x104 <_JIT_ENTRY+0x104>
// d1: 49 89 f6                      movq    %rsi, %r14
// d4: 49 29 de                      subq    %rbx, %r14
// d7: 49 83 c6 b8                   addq    $-0x48, %r14
// db: 49 c1 ee 03                   shrq    $0x3, %r14
// df: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// e3: 48 8b 03                      movq    (%rbx), %rax
// e6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000e8:  R_X86_64_64  _JIT_TARGET
// f0: 89 c9                         movl    %ecx, %ecx
// f2: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// fa: 5b                            popq    %rbx
// fb: 41 5c                         popq    %r12
// fd: 41 5d                         popq    %r13
// ff: 41 5e                         popq    %r14
// 101: 41 5f                         popq    %r15
// 103: c3                            retq
// 104: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000106:  R_X86_64_64  _JIT_CONTINUE
// 10e: 48 89 df                      movq    %rbx, %rdi
// 111: 4c 89 fa                      movq    %r15, %rdx
// 114: 5b                            popq    %rbx
// 115: 41 5c                         popq    %r12
// 117: 41 5d                         popq    %r13
// 119: 41 5e                         popq    %r14
// 11b: 41 5f                         popq    %r15
// 11d: ff e0                         jmpq    *%rax
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 4c 89 e7                      movq    %r12, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 132: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000134:  R_X86_64_64  _JIT_OPARG
// 13c: a8 01                         testb   $0x1, %al
// 13e: 0f 85 6a ff ff ff             jne     0xae <_JIT_ENTRY+0xae>
// 144: e9 6c ff ff ff                jmp     0xb5 <_JIT_ENTRY+0xb5>
// 149: 
static const unsigned char _LOAD_ATTR_SLOTplus_ITER_CHECK_TUPLE_code_body[330] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xa7, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1f, 0x85, 0xc0, 0x79, 0x41, 0xeb, 0x55, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x83, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x33, 0x49, 0x89, 0xf6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x6a, 0xff, 0xff, 0xff, 0xe9, 0x6c, 0xff, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_ITER_CHECK_TUPLE_code_holes[12] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTupleIter_Type, 0x0},
    {0xe8, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x134, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_ITER_CHECK_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_ITER_CHECK_TUPLE_data_holes[1];

// _LOAD_ATTR_SLOTplus_ITER_NEXT_LIST
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_ITER_NEXT_LIST.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 49 8b 2c 04                   movq    (%r12,%rax), %rbp
// 26: 48 85 ed                      testq   %rbp, %rbp
// 29: 74 26                         je      0x51 <_JIT_ENTRY+0x51>
// 2b: 49 89 d7                      movq    %rdx, %r15
// 2e: 8b 45 00                      movl    (%rbp), %eax
// 31: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000033:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 3b: ff c0                         incl    %eax
// 3d: 75 49                         jne     0x88 <_JIT_ENTRY+0x88>
// 3f: 49 8b 04 24                   movq    (%r12), %rax
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 7e 4f                         jle     0x97 <_JIT_ENTRY+0x97>
// 48: 85 c0                         testl   %eax, %eax
// 4a: 79 71                         jns     0xbd <_JIT_ENTRY+0xbd>
// 4c: e9 82 00 00 00                jmp     0xd3 <_JIT_ENTRY+0xd3>
// 51: 49 29 de                      subq    %rbx, %r14
// 54: 49 83 c6 b8                   addq    $-0x48, %r14
// 58: 49 c1 ee 03                   shrq    $0x3, %r14
// 5c: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 60: 48 8b 03                      movq    (%rbx), %rax
// 63: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000065:  R_X86_64_64  _JIT_TARGET
// 6d: 89 c9                         movl    %ecx, %ecx
// 6f: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 73: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 79: 48 83 c4 08                   addq    $0x8, %rsp
// 7d: 5b                            popq    %rbx
// 7e: 41 5c                         popq    %r12
// 80: 41 5d                         popq    %r13
// 82: 41 5e                         popq    %r14
// 84: 41 5f                         popq    %r15
// 86: 5d                            popq    %rbp
// 87: c3                            retq
// 88: 89 45 00                      movl    %eax, (%rbp)
// 8b: 41 ff d5                      callq   *%r13
// 8e: 49 8b 04 24                   movq    (%r12), %rax
// 92: 48 85 c0                      testq   %rax, %rax
// 95: 7f b1                         jg      0x48 <_JIT_ENTRY+0x48>
// 97: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000099:  R_X86_64_64  .rodata.str1.1
// a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a3:  R_X86_64_64  _Py_NegativeRefcount
// ab: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// b0: 4c 89 e2                      movq    %r12, %rdx
// b3: ff d0                         callq   *%rax
// b5: 49 8b 04 24                   movq    (%r12), %rax
// b9: 85 c0                         testl   %eax, %eax
// bb: 78 16                         js      0xd3 <_JIT_ENTRY+0xd3>
// bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bf:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c7: ff d0                         callq   *%rax
// c9: 49 ff 0c 24                   decq    (%r12)
// cd: 0f 84 81 00 00 00             je      0x154 <_JIT_ENTRY+0x154>
// d3: 49 89 6e f8                   movq    %rbp, -0x8(%r14)
// d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d9:  R_X86_64_64  _JIT_OPARG
// e1: a8 01                         testb   $0x1, %al
// e3: 74 07                         je      0xec <_JIT_ENTRY+0xec>
// e5: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// ec: 83 e0 01                      andl    $0x1, %eax
// ef: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// f4: 48 8b 48 10                   movq    0x10(%rax), %rcx
// f8: 48 8b 50 18                   movq    0x18(%rax), %rdx
// fc: 48 8b 52 18                   movq    0x18(%rdx), %rdx
// 100: 48 8d 71 01                   leaq    0x1(%rcx), %rsi
// 104: 48 89 70 10                   movq    %rsi, 0x10(%rax)
// 108: 4c 8b 24 ca                   movq    (%rdx,%rcx,8), %r12
// 10c: 41 8b 04 24                   movl    (%r12), %eax
// 110: ff c0                         incl    %eax
// 112: 74 07                         je      0x11b <_JIT_ENTRY+0x11b>
// 114: 41 89 04 24                   movl    %eax, (%r12)
// 118: 41 ff d5                      callq   *%r13
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  _JIT_OPARG
// 125: 83 e0 01                      andl    $0x1, %eax
// 128: 4d 89 24 c6                   movq    %r12, (%r14,%rax,8)
// 12c: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 130: 48 83 c6 08                   addq    $0x8, %rsi
// 134: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000136:  R_X86_64_64  _JIT_CONTINUE
// 13e: 48 89 df                      movq    %rbx, %rdi
// 141: 4c 89 fa                      movq    %r15, %rdx
// 144: 48 83 c4 08                   addq    $0x8, %rsp
// 148: 5b                            popq    %rbx
// 149: 41 5c                         popq    %r12
// 14b: 41 5d                         popq    %r13
// 14d: 41 5e                         popq    %r14
// 14f: 41 5f                         popq    %r15
// 151: 5d                            popq    %rbp
// 152: ff e0                         jmpq    *%rax
// 154: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000156:  R_X86_64_64  _Py_Dealloc
// 15e: 4c 89 e7                      movq    %r12, %rdi
// 161: ff d0                         callq   *%rax
// 163: 49 89 6e f8                   movq    %rbp, -0x8(%r14)
// 167: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000169:  R_X86_64_64  _JIT_OPARG
// 171: a8 01                         testb   $0x1, %al
// 173: 0f 85 6c ff ff ff             jne     0xe5 <_JIT_ENTRY+0xe5>
// 179: e9 6e ff ff ff                jmp     0xec <_JIT_ENTRY+0xec>
// 17e: 
static const unsigned char _LOAD_ATTR_SLOTplus_ITER_NEXT_LIST_code_body[383] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8b, 0x2c, 0x04, 0x48, 0x85, 0xed, 0x74, 0x26, 0x49, 0x89, 0xd7, 0x8b, 0x45, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0x75, 0x49, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4f, 0x85, 0xc0, 0x79, 0x71, 0xe9, 0x82, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0x45, 0x00, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x81, 0x00, 0x00, 0x00, 0x49, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0x8b, 0x48, 0x10, 0x48, 0x8b, 0x50, 0x18, 0x48, 0x8b, 0x52, 0x18, 0x48, 0x8d, 0x71, 0x01, 0x48, 0x89, 0x70, 0x10, 0x4c, 0x8b, 0x24, 0xca, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x07, 0x41, 0x89, 0x04, 0x24, 0x41, 0xff, 0xd5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x4d, 0x89, 0x24, 0xc6, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x6c, 0xff, 0xff, 0xff, 0xe9, 0x6e, 0xff, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_ITER_NEXT_LIST_code_holes[12] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x65, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x99, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xa3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xbf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x136, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x169, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_ITER_NEXT_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_ITER_NEXT_LIST_data_holes[1];

// _LOAD_ATTR_SLOTplus_ITER_NEXT_RANGE
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_ITER_NEXT_RANGE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f6                      movq    %rsi, %r14
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 74 1d                         je      0x46 <_JIT_ENTRY+0x46>
// 29: 49 89 d7                      movq    %rdx, %r15
// 2c: 41 8b 45 00                   movl    (%r13), %eax
// 30: ff c0                         incl    %eax
// 32: 75 3f                         jne     0x73 <_JIT_ENTRY+0x73>
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 4f                         jle     0x8c <_JIT_ENTRY+0x8c>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 71                         jns     0xb2 <_JIT_ENTRY+0xb2>
// 41: e9 82 00 00 00                jmp     0xc8 <_JIT_ENTRY+0xc8>
// 46: 49 29 de                      subq    %rbx, %r14
// 49: 49 83 c6 b8                   addq    $-0x48, %r14
// 4d: 49 c1 ee 03                   shrq    $0x3, %r14
// 51: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 55: 48 8b 03                      movq    (%rbx), %rax
// 58: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005a:  R_X86_64_64  _JIT_TARGET
// 62: 89 c9                         movl    %ecx, %ecx
// 64: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 68: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 6e: e9 ed 00 00 00                jmp     0x160 <_JIT_ENTRY+0x160>
// 73: 41 89 45 00                   movl    %eax, (%r13)
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 81: ff d0                         callq   *%rax
// 83: 49 8b 04 24                   movq    (%r12), %rax
// 87: 48 85 c0                      testq   %rax, %rax
// 8a: 7f b1                         jg      0x3d <_JIT_ENTRY+0x3d>
// 8c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008e:  R_X86_64_64  .rodata.str1.1
// 96: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000098:  R_X86_64_64  _Py_NegativeRefcount
// a0: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a5: 4c 89 e2                      movq    %r12, %rdx
// a8: ff d0                         callq   *%rax
// aa: 49 8b 04 24                   movq    (%r12), %rax
// ae: 85 c0                         testl   %eax, %eax
// b0: 78 16                         js      0xc8 <_JIT_ENTRY+0xc8>
// b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: ff d0                         callq   *%rax
// be: 49 ff 0c 24                   decq    (%r12)
// c2: 0f 84 a2 00 00 00             je      0x16a <_JIT_ENTRY+0x16a>
// c8: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ce:  R_X86_64_64  _JIT_OPARG
// d6: a8 01                         testb   $0x1, %al
// d8: 74 07                         je      0xe1 <_JIT_ENTRY+0xe1>
// da: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// e1: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 00000000000000e3:  R_X86_64_64  _JIT_OPARG
// eb: 41 83 e4 01                   andl    $0x1, %r12d
// ef: 4b 8b 44 e6 f8                movq    -0x8(%r14,%r12,8), %rax
// f4: 48 8b 78 10                   movq    0x10(%rax), %rdi
// f8: 48 8b 48 18                   movq    0x18(%rax), %rcx
// fc: 48 01 f9                      addq    %rdi, %rcx
// ff: 48 89 48 10                   movq    %rcx, 0x10(%rax)
// 103: 48 ff 48 20                   decq    0x20(%rax)
// 107: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000109:  R_X86_64_64  PyLong_FromLong
// 111: ff d0                         callq   *%rax
// 113: 48 85 c0                      testq   %rax, %rax
// 116: 74 34                         je      0x14c <_JIT_ENTRY+0x14c>
// 118: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000011a:  R_X86_64_64  _JIT_OPARG
// 122: 83 e1 01                      andl    $0x1, %ecx
// 125: 49 89 04 ce                   movq    %rax, (%r14,%rcx,8)
// 129: 49 8d 34 ce                   leaq    (%r14,%rcx,8), %rsi
// 12d: 48 83 c6 08                   addq    $0x8, %rsi
// 131: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000133:  R_X86_64_64  _JIT_CONTINUE
// 13b: 48 89 df                      movq    %rbx, %rdi
// 13e: 4c 89 fa                      movq    %r15, %rdx
// 141: 5b                            popq    %rbx
// 142: 41 5c                         popq    %r12
// 144: 41 5d                         popq    %r13
// 146: 41 5e                         popq    %r14
// 148: 41 5f                         popq    %r15
// 14a: ff e0                         jmpq    *%rax
// 14c: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 150: 48 29 d8                      subq    %rbx, %rax
// 153: 48 83 c0 b8                   addq    $-0x48, %rax
// 157: 48 c1 e8 03                   shrq    $0x3, %rax
// 15b: 89 43 40                      movl    %eax, 0x40(%rbx)
// 15e: 31 c0                         xorl    %eax, %eax
// 160: 5b                            popq    %rbx
// 161: 41 5c                         popq    %r12
// 163: 41 5d                         popq    %r13
// 165: 41 5e                         popq    %r14
// 167: 41 5f                         popq    %r15
// 169: c3                            retq
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_Dealloc
// 174: 4c 89 e7                      movq    %r12, %rdi
// 177: ff d0                         callq   *%rax
// 179: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 17d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017f:  R_X86_64_64  _JIT_OPARG
// 187: a8 01                         testb   $0x1, %al
// 189: 0f 85 4b ff ff ff             jne     0xda <_JIT_ENTRY+0xda>
// 18f: e9 4d ff ff ff                jmp     0xe1 <_JIT_ENTRY+0xe1>
// 194: 
static const unsigned char _LOAD_ATTR_SLOTplus_ITER_NEXT_RANGE_code_body[405] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1d, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x3f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4f, 0x85, 0xc0, 0x79, 0x71, 0xe9, 0x82, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xed, 0x00, 0x00, 0x00, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xa2, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x83, 0xe4, 0x01, 0x4b, 0x8b, 0x44, 0xe6, 0xf8, 0x48, 0x8b, 0x78, 0x10, 0x48, 0x8b, 0x48, 0x18, 0x48, 0x01, 0xf9, 0x48, 0x89, 0x48, 0x10, 0x48, 0xff, 0x48, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x34, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe1, 0x01, 0x49, 0x89, 0x04, 0xce, 0x49, 0x8d, 0x34, 0xce, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x4b, 0xff, 0xff, 0xff, 0xe9, 0x4d, 0xff, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_ITER_NEXT_RANGE_code_holes[14] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xe3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x109, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromLong, 0x0},
    {0x11a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x133, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x17f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_ITER_NEXT_RANGE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_ITER_NEXT_RANGE_data_holes[1];

// _LOAD_ATTR_SLOTplus_ITER_NEXT_TUPLE
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_ITER_NEXT_TUPLE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 49 8b 2c 04                   movq    (%r12,%rax), %rbp
// 26: 48 85 ed                      testq   %rbp, %rbp
// 29: 74 23                         je      0x4e <_JIT_ENTRY+0x4e>
// 2b: 49 89 d7                      movq    %rdx, %r15
// 2e: 8b 45 00                      movl    (%rbp), %eax
// 31: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000033:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 3b: ff c0                         incl    %eax
// 3d: 75 46                         jne     0x85 <_JIT_ENTRY+0x85>
// 3f: 49 8b 04 24                   movq    (%r12), %rax
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 7e 4c                         jle     0x94 <_JIT_ENTRY+0x94>
// 48: 85 c0                         testl   %eax, %eax
// 4a: 79 6e                         jns     0xba <_JIT_ENTRY+0xba>
// 4c: eb 7e                         jmp     0xcc <_JIT_ENTRY+0xcc>
// 4e: 49 29 de                      subq    %rbx, %r14
// 51: 49 83 c6 b8                   addq    $-0x48, %r14
// 55: 49 c1 ee 03                   shrq    $0x3, %r14
// 59: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 5d: 48 8b 03                      movq    (%rbx), %rax
// 60: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000062:  R_X86_64_64  _JIT_TARGET
// 6a: 89 c9                         movl    %ecx, %ecx
// 6c: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 70: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 76: 48 83 c4 08                   addq    $0x8, %rsp
// 7a: 5b                            popq    %rbx
// 7b: 41 5c                         popq    %r12
// 7d: 41 5d                         popq    %r13
// 7f: 41 5e                         popq    %r14
// 81: 41 5f                         popq    %r15
// 83: 5d                            popq    %rbp
// 84: c3                            retq
// 85: 89 45 00                      movl    %eax, (%rbp)
// 88: 41 ff d5                      callq   *%r13
// 8b: 49 8b 04 24                   movq    (%r12), %rax
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 7f b4                         jg      0x48 <_JIT_ENTRY+0x48>
// 94: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000096:  R_X86_64_64  .rodata.str1.1
// 9e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a0:  R_X86_64_64  _Py_NegativeRefcount
// a8: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// ad: 4c 89 e2                      movq    %r12, %rdx
// b0: ff d0                         callq   *%rax
// b2: 49 8b 04 24                   movq    (%r12), %rax
// b6: 85 c0                         testl   %eax, %eax
// b8: 78 12                         js      0xcc <_JIT_ENTRY+0xcc>
// ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c4: ff d0                         callq   *%rax
// c6: 49 ff 0c 24                   decq    (%r12)
// ca: 74 7e                         je      0x14a <_JIT_ENTRY+0x14a>
// cc: 49 89 6e f8                   movq    %rbp, -0x8(%r14)
// d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d2:  R_X86_64_64  _JIT_OPARG
// da: a8 01                         testb   $0x1, %al
// dc: 74 07                         je      0xe5 <_JIT_ENTRY+0xe5>
// de: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// e5: 83 e0 01                      andl    $0x1, %eax
// e8: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// ed: 48 8b 48 10                   movq    0x10(%rax), %rcx
// f1: 48 8b 50 18                   movq    0x18(%rax), %rdx
// f5: 48 8d 71 01                   leaq    0x1(%rcx), %rsi
// f9: 48 89 70 10                   movq    %rsi, 0x10(%rax)
// fd: 4c 8b 64 ca 18                movq    0x18(%rdx,%rcx,8), %r12
// 102: 41 8b 04 24                   movl    (%r12), %eax
// 106: ff c0                         incl    %eax
// 108: 74 07                         je      0x111 <_JIT_ENTRY+0x111>
// 10a: 41 89 04 24                   movl    %eax, (%r12)
// 10e: 41 ff d5                      callq   *%r13
// 111: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000113:  R_X86_64_64  _JIT_OPARG
// 11b: 83 e0 01                      andl    $0x1, %eax
// 11e: 4d 89 24 c6                   movq    %r12, (%r14,%rax,8)
// 122: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 126: 48 83 c6 08                   addq    $0x8, %rsi
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _JIT_CONTINUE
// 134: 48 89 df                      movq    %rbx, %rdi
// 137: 4c 89 fa                      movq    %r15, %rdx
// 13a: 48 83 c4 08                   addq    $0x8, %rsp
// 13e: 5b                            popq    %rbx
// 13f: 41 5c                         popq    %r12
// 141: 41 5d                         popq    %r13
// 143: 41 5e                         popq    %r14
// 145: 41 5f                         popq    %r15
// 147: 5d                            popq    %rbp
// 148: ff e0                         jmpq    *%rax
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_Dealloc
// 154: 4c 89 e7                      movq    %r12, %rdi
// 157: ff d0                         callq   *%rax
// 159: 49 89 6e f8                   movq    %rbp, -0x8(%r14)
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _JIT_OPARG
// 167: a8 01                         testb   $0x1, %al
// 169: 0f 85 6f ff ff ff             jne     0xde <_JIT_ENTRY+0xde>
// 16f: e9 71 ff ff ff                jmp     0xe5 <_JIT_ENTRY+0xe5>
// 174: 
static const unsigned char _LOAD_ATTR_SLOTplus_ITER_NEXT_TUPLE_code_body[373] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8b, 0x2c, 0x04, 0x48, 0x85, 0xed, 0x74, 0x23, 0x49, 0x89, 0xd7, 0x8b, 0x45, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0x75, 0x46, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4c, 0x85, 0xc0, 0x79, 0x6e, 0xeb, 0x7e, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0x45, 0x00, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb4, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x7e, 0x49, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0x8b, 0x48, 0x10, 0x48, 0x8b, 0x50, 0x18, 0x48, 0x8d, 0x71, 0x01, 0x48, 0x89, 0x70, 0x10, 0x4c, 0x8b, 0x64, 0xca, 0x18, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x07, 0x41, 0x89, 0x04, 0x24, 0x41, 0xff, 0xd5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x4d, 0x89, 0x24, 0xc6, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x6f, 0xff, 0xff, 0xff, 0xe9, 0x71, 0xff, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_ITER_NEXT_TUPLE_code_holes[12] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x96, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xa0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xbc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x113, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_ITER_NEXT_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_ITER_NEXT_TUPLE_data_holes[1];

// _LOAD_ATTR_SLOTplus_JUMP_TO_TOP
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_JUMP_TO_TOP.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f7                      movq    %rsi, %r15
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 74 1a                         je      0x43 <_JIT_ENTRY+0x43>
// 29: 49 89 d6                      movq    %rdx, %r14
// 2c: 41 8b 45 00                   movl    (%r13), %eax
// 30: ff c0                         incl    %eax
// 32: 75 3c                         jne     0x70 <_JIT_ENTRY+0x70>
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 4c                         jle     0x89 <_JIT_ENTRY+0x89>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 6e                         jns     0xaf <_JIT_ENTRY+0xaf>
// 41: eb 7e                         jmp     0xc1 <_JIT_ENTRY+0xc1>
// 43: 49 29 df                      subq    %rbx, %r15
// 46: 49 83 c7 b8                   addq    $-0x48, %r15
// 4a: 49 c1 ef 03                   shrq    $0x3, %r15
// 4e: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 52: 48 8b 03                      movq    (%rbx), %rax
// 55: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000057:  R_X86_64_64  _JIT_TARGET
// 5f: 89 c9                         movl    %ecx, %ecx
// 61: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 65: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 6b: e9 a0 00 00 00                jmp     0x110 <_JIT_ENTRY+0x110>
// 70: 41 89 45 00                   movl    %eax, (%r13)
// 74: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000076:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 7e: ff d0                         callq   *%rax
// 80: 49 8b 04 24                   movq    (%r12), %rax
// 84: 48 85 c0                      testq   %rax, %rax
// 87: 7f b4                         jg      0x3d <_JIT_ENTRY+0x3d>
// 89: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008b:  R_X86_64_64  .rodata.str1.1
// 93: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000095:  R_X86_64_64  _Py_NegativeRefcount
// 9d: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a2: 4c 89 e2                      movq    %r12, %rdx
// a5: ff d0                         callq   *%rax
// a7: 49 8b 04 24                   movq    (%r12), %rax
// ab: 85 c0                         testl   %eax, %eax
// ad: 78 12                         js      0xc1 <_JIT_ENTRY+0xc1>
// af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b9: ff d0                         callq   *%rax
// bb: 49 ff 0c 24                   decq    (%r12)
// bf: 74 77                         je      0x138 <_JIT_ENTRY+0x138>
// c1: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c7:  R_X86_64_64  _JIT_OPARG
// cf: a8 01                         testb   $0x1, %al
// d1: 74 07                         je      0xda <_JIT_ENTRY+0xda>
// d3: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// da: 83 e0 01                      andl    $0x1, %eax
// dd: 4d 8d 3c c7                   leaq    (%r15,%rax,8), %r15
// e1: 49 8b 46 10                   movq    0x10(%r14), %rax
// e5: 48 8b 00                      movq    (%rax), %rax
// e8: 84 c0                         testb   %al, %al
// ea: 74 2e                         je      0x11a <_JIT_ENTRY+0x11a>
// ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ee:  R_X86_64_64  _Py_HandlePending
// f6: 4c 89 f7                      movq    %r14, %rdi
// f9: ff d0                         callq   *%rax
// fb: 85 c0                         testl   %eax, %eax
// fd: 74 1b                         je      0x11a <_JIT_ENTRY+0x11a>
// ff: 49 29 df                      subq    %rbx, %r15
// 102: 49 83 c7 b8                   addq    $-0x48, %r15
// 106: 49 c1 ef 03                   shrq    $0x3, %r15
// 10a: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 10e: 31 c0                         xorl    %eax, %eax
// 110: 5b                            popq    %rbx
// 111: 41 5c                         popq    %r12
// 113: 41 5d                         popq    %r13
// 115: 41 5e                         popq    %r14
// 117: 41 5f                         popq    %r15
// 119: c3                            retq
// 11a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011c:  R_X86_64_64  _JIT_CONTINUE
// 124: 48 89 df                      movq    %rbx, %rdi
// 127: 4c 89 fe                      movq    %r15, %rsi
// 12a: 4c 89 f2                      movq    %r14, %rdx
// 12d: 5b                            popq    %rbx
// 12e: 41 5c                         popq    %r12
// 130: 41 5d                         popq    %r13
// 132: 41 5e                         popq    %r14
// 134: 41 5f                         popq    %r15
// 136: ff e0                         jmpq    *%rax
// 138: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013a:  R_X86_64_64  _Py_Dealloc
// 142: 4c 89 e7                      movq    %r12, %rdi
// 145: ff d0                         callq   *%rax
// 147: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _JIT_OPARG
// 155: a8 01                         testb   $0x1, %al
// 157: 0f 85 76 ff ff ff             jne     0xd3 <_JIT_ENTRY+0xd3>
// 15d: e9 78 ff ff ff                jmp     0xda <_JIT_ENTRY+0xda>
// 162: 
static const unsigned char _LOAD_ATTR_SLOTplus_JUMP_TO_TOP_code_body[355] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1a, 0x49, 0x89, 0xd6, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x3c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4c, 0x85, 0xc0, 0x79, 0x6e, 0xeb, 0x7e, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xa0, 0x00, 0x00, 0x00, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb4, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x77, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x4d, 0x8d, 0x3c, 0xc7, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x2e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x1b, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x76, 0xff, 0xff, 0xff, 0xe9, 0x78, 0xff, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_JUMP_TO_TOP_code_holes[12] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x57, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x76, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x8b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x95, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xc7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x11c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_JUMP_TO_TOP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_JUMP_TO_TOP_data_holes[1];

// _LOAD_ATTR_SLOTplus_LIST_APPEND
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_LIST_APPEND.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f6                      movq    %rsi, %r14
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 74 1d                         je      0x46 <_JIT_ENTRY+0x46>
// 29: 49 89 d7                      movq    %rdx, %r15
// 2c: 41 8b 45 00                   movl    (%r13), %eax
// 30: ff c0                         incl    %eax
// 32: 75 3f                         jne     0x73 <_JIT_ENTRY+0x73>
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 4f                         jle     0x8c <_JIT_ENTRY+0x8c>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 71                         jns     0xb2 <_JIT_ENTRY+0xb2>
// 41: e9 82 00 00 00                jmp     0xc8 <_JIT_ENTRY+0xc8>
// 46: 49 29 de                      subq    %rbx, %r14
// 49: 49 83 c6 b8                   addq    $-0x48, %r14
// 4d: 49 c1 ee 03                   shrq    $0x3, %r14
// 51: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 55: 48 8b 03                      movq    (%rbx), %rax
// 58: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005a:  R_X86_64_64  _JIT_TARGET
// 62: 89 c9                         movl    %ecx, %ecx
// 64: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 68: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 6e: e9 23 01 00 00                jmp     0x196 <_JIT_ENTRY+0x196>
// 73: 41 89 45 00                   movl    %eax, (%r13)
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 81: ff d0                         callq   *%rax
// 83: 49 8b 04 24                   movq    (%r12), %rax
// 87: 48 85 c0                      testq   %rax, %rax
// 8a: 7f b1                         jg      0x3d <_JIT_ENTRY+0x3d>
// 8c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008e:  R_X86_64_64  .rodata.str1.1
// 96: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000098:  R_X86_64_64  _Py_NegativeRefcount
// a0: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a5: 4c 89 e2                      movq    %r12, %rdx
// a8: ff d0                         callq   *%rax
// aa: 49 8b 04 24                   movq    (%r12), %rax
// ae: 85 c0                         testl   %eax, %eax
// b0: 78 16                         js      0xc8 <_JIT_ENTRY+0xc8>
// b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: ff d0                         callq   *%rax
// be: 49 ff 0c 24                   decq    (%r12)
// c2: 0f 84 83 00 00 00             je      0x14b <_JIT_ENTRY+0x14b>
// c8: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ce:  R_X86_64_64  _JIT_OPARG
// d6: a8 01                         testb   $0x1, %al
// d8: 74 07                         je      0xe1 <_JIT_ENTRY+0xe1>
// da: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// e1: 41 89 c4                      movl    %eax, %r12d
// e4: 41 83 e4 01                   andl    $0x1, %r12d
// e8: f7 d0                         notl    %eax
// ea: 4b 8b 74 e6 f8                movq    -0x8(%r14,%r12,8), %rsi
// ef: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// f4: 48 98                         cltq
// f6: 4c 01 e0                      addq    %r12, %rax
// f9: 49 8b 3c c6                   movq    (%r14,%rax,8), %rdi
// fd: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 101: 48 39 47 20                   cmpq    %rax, 0x20(%rdi)
// 105: 7e 11                         jle     0x118 <_JIT_ENTRY+0x118>
// 107: 48 8b 4f 18                   movq    0x18(%rdi), %rcx
// 10b: 48 89 34 c1                   movq    %rsi, (%rcx,%rax,8)
// 10f: 48 ff c0                      incq    %rax
// 112: 48 89 47 10                   movq    %rax, 0x10(%rdi)
// 116: eb 10                         jmp     0x128 <_JIT_ENTRY+0x128>
// 118: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011a:  R_X86_64_64  _PyList_AppendTakeRefListResize
// 122: ff d0                         callq   *%rax
// 124: 85 c0                         testl   %eax, %eax
// 126: 78 4d                         js      0x175 <_JIT_ENTRY+0x175>
// 128: 4b 8d 34 e6                   leaq    (%r14,%r12,8), %rsi
// 12c: 48 83 c6 f8                   addq    $-0x8, %rsi
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _JIT_CONTINUE
// 13a: 48 89 df                      movq    %rbx, %rdi
// 13d: 4c 89 fa                      movq    %r15, %rdx
// 140: 5b                            popq    %rbx
// 141: 41 5c                         popq    %r12
// 143: 41 5d                         popq    %r13
// 145: 41 5e                         popq    %r14
// 147: 41 5f                         popq    %r15
// 149: ff e0                         jmpq    *%rax
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_Dealloc
// 155: 4c 89 e7                      movq    %r12, %rdi
// 158: ff d0                         callq   *%rax
// 15a: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _JIT_OPARG
// 168: a8 01                         testb   $0x1, %al
// 16a: 0f 85 6a ff ff ff             jne     0xda <_JIT_ENTRY+0xda>
// 170: e9 6c ff ff ff                jmp     0xe1 <_JIT_ENTRY+0xe1>
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _JIT_OPARG
// 17f: 83 e0 01                      andl    $0x1, %eax
// 182: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 186: 48 29 d8                      subq    %rbx, %rax
// 189: 48 83 c0 b0                   addq    $-0x50, %rax
// 18d: 48 c1 e8 03                   shrq    $0x3, %rax
// 191: 89 43 40                      movl    %eax, 0x40(%rbx)
// 194: 31 c0                         xorl    %eax, %eax
// 196: 5b                            popq    %rbx
// 197: 41 5c                         popq    %r12
// 199: 41 5d                         popq    %r13
// 19b: 41 5e                         popq    %r14
// 19d: 41 5f                         popq    %r15
// 19f: c3                            retq
// 1a0: 
static const unsigned char _LOAD_ATTR_SLOTplus_LIST_APPEND_code_body[417] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1d, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x3f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4f, 0x85, 0xc0, 0x79, 0x71, 0xe9, 0x82, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x23, 0x01, 0x00, 0x00, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x83, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x41, 0x89, 0xc4, 0x41, 0x83, 0xe4, 0x01, 0xf7, 0xd0, 0x4b, 0x8b, 0x74, 0xe6, 0xf8, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4c, 0x01, 0xe0, 0x49, 0x8b, 0x3c, 0xc6, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x39, 0x47, 0x20, 0x7e, 0x11, 0x48, 0x8b, 0x4f, 0x18, 0x48, 0x89, 0x34, 0xc1, 0x48, 0xff, 0xc0, 0x48, 0x89, 0x47, 0x10, 0xeb, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x4d, 0x4b, 0x8d, 0x34, 0xe6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x6a, 0xff, 0xff, 0xff, 0xe9, 0x6c, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb0, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _LOAD_ATTR_SLOTplus_LIST_APPEND_code_holes[13] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x11a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyList_AppendTakeRefListResize, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_LIST_APPEND_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_LIST_APPEND_data_holes[1];

// _LOAD_ATTR_SLOTplus_LIST_EXTEND
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_LIST_EXTEND.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 26: 4d 85 ed                      testq   %r13, %r13
// 29: 74 1d                         je      0x48 <_JIT_ENTRY+0x48>
// 2b: 49 89 d7                      movq    %rdx, %r15
// 2e: 41 8b 45 00                   movl    (%r13), %eax
// 32: ff c0                         incl    %eax
// 34: 75 3f                         jne     0x75 <_JIT_ENTRY+0x75>
// 36: 49 8b 04 24                   movq    (%r12), %rax
// 3a: 48 85 c0                      testq   %rax, %rax
// 3d: 7e 4f                         jle     0x8e <_JIT_ENTRY+0x8e>
// 3f: 85 c0                         testl   %eax, %eax
// 41: 79 71                         jns     0xb4 <_JIT_ENTRY+0xb4>
// 43: e9 82 00 00 00                jmp     0xca <_JIT_ENTRY+0xca>
// 48: 49 29 de                      subq    %rbx, %r14
// 4b: 49 83 c6 b8                   addq    $-0x48, %r14
// 4f: 49 c1 ee 03                   shrq    $0x3, %r14
// 53: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 57: 48 8b 03                      movq    (%rbx), %rax
// 5a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005c:  R_X86_64_64  _JIT_TARGET
// 64: 89 c9                         movl    %ecx, %ecx
// 66: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 6a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 70: e9 a0 01 00 00                jmp     0x215 <_JIT_ENTRY+0x215>
// 75: 41 89 45 00                   movl    %eax, (%r13)
// 79: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007b:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 83: ff d0                         callq   *%rax
// 85: 49 8b 04 24                   movq    (%r12), %rax
// 89: 48 85 c0                      testq   %rax, %rax
// 8c: 7f b1                         jg      0x3f <_JIT_ENTRY+0x3f>
// 8e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000090:  R_X86_64_64  .rodata.str1.1
// 98: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009a:  R_X86_64_64  _Py_NegativeRefcount
// a2: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a7: 4c 89 e2                      movq    %r12, %rdx
// aa: ff d0                         callq   *%rax
// ac: 49 8b 04 24                   movq    (%r12), %rax
// b0: 85 c0                         testl   %eax, %eax
// b2: 78 16                         js      0xca <_JIT_ENTRY+0xca>
// b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// be: ff d0                         callq   *%rax
// c0: 49 ff 0c 24                   decq    (%r12)
// c4: 0f 84 cc 01 00 00             je      0x296 <_JIT_ENTRY+0x296>
// ca: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d0:  R_X86_64_64  _JIT_OPARG
// d8: a8 01                         testb   $0x1, %al
// da: 74 07                         je      0xe3 <_JIT_ENTRY+0xe3>
// dc: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// e3: 41 89 c5                      movl    %eax, %r13d
// e6: 41 83 e5 01                   andl    $0x1, %r13d
// ea: f7 d0                         notl    %eax
// ec: 4f 8b 64 ee f8                movq    -0x8(%r14,%r13,8), %r12
// f1: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// f6: 48 98                         cltq
// f8: 4c 01 e8                      addq    %r13, %rax
// fb: 49 8b 3c c6                   movq    (%r14,%rax,8), %rdi
// ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000101:  R_X86_64_64  _PyList_Extend
// 109: 4c 89 e6                      movq    %r12, %rsi
// 10c: ff d0                         callq   *%rax
// 10e: 48 85 c0                      testq   %rax, %rax
// 111: 74 22                         je      0x135 <_JIT_ENTRY+0x135>
// 113: 49 8b 04 24                   movq    (%r12), %rax
// 117: 48 85 c0                      testq   %rax, %rax
// 11a: 0f 8e 04 01 00 00             jle     0x224 <_JIT_ENTRY+0x224>
// 120: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 124: 49 83 c6 f8                   addq    $-0x8, %r14
// 128: 85 c0                         testl   %eax, %eax
// 12a: 0f 89 22 01 00 00             jns     0x252 <_JIT_ENTRY+0x252>
// 130: e9 3e 01 00 00                jmp     0x273 <_JIT_ENTRY+0x273>
// 135: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000137:  R_X86_64_64  PyExc_TypeError
// 13f: 48 8b 75 00                   movq    (%rbp), %rsi
// 143: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000145:  R_X86_64_64  _PyErr_ExceptionMatches
// 14d: 4c 89 ff                      movq    %r15, %rdi
// 150: ff d0                         callq   *%rax
// 152: 85 c0                         testl   %eax, %eax
// 154: 74 5a                         je      0x1b0 <_JIT_ENTRY+0x1b0>
// 156: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 15b: 48 83 b8 d8 00 00 00 00       cmpq    $0x0, 0xd8(%rax)
// 163: 75 4b                         jne     0x1b0 <_JIT_ENTRY+0x1b0>
// 165: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000167:  R_X86_64_64  PySequence_Check
// 16f: 4c 89 e7                      movq    %r12, %rdi
// 172: ff d0                         callq   *%rax
// 174: 85 c0                         testl   %eax, %eax
// 176: 75 38                         jne     0x1b0 <_JIT_ENTRY+0x1b0>
// 178: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017a:  R_X86_64_64  _PyErr_Clear
// 182: 4c 89 ff                      movq    %r15, %rdi
// 185: ff d0                         callq   *%rax
// 187: 48 8b 75 00                   movq    (%rbp), %rsi
// 18b: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 190: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 194: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000196:  R_X86_64_64  .rodata.str1.1+0x39
// 19e: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000001a0:  R_X86_64_64  _PyErr_Format
// 1a8: 4c 89 ff                      movq    %r15, %rdi
// 1ab: 31 c0                         xorl    %eax, %eax
// 1ad: 41 ff d0                      callq   *%r8
// 1b0: 49 8b 04 24                   movq    (%r12), %rax
// 1b4: 48 85 c0                      testq   %rax, %rax
// 1b7: 7f 22                         jg      0x1db <_JIT_ENTRY+0x1db>
// 1b9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001bb:  R_X86_64_64  .rodata.str1.1
// 1c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c5:  R_X86_64_64  _Py_NegativeRefcount
// 1cd: be 43 05 00 00                movl    $0x543, %esi            # imm = 0x543
// 1d2: 4c 89 e2                      movq    %r12, %rdx
// 1d5: ff d0                         callq   *%rax
// 1d7: 49 8b 04 24                   movq    (%r12), %rax
// 1db: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 1df: 85 c0                         testl   %eax, %eax
// 1e1: 78 21                         js      0x204 <_JIT_ENTRY+0x204>
// 1e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ed: ff d0                         callq   *%rax
// 1ef: 49 ff 0c 24                   decq    (%r12)
// 1f3: 75 0f                         jne     0x204 <_JIT_ENTRY+0x204>
// 1f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f7:  R_X86_64_64  _Py_Dealloc
// 1ff: 4c 89 e7                      movq    %r12, %rdi
// 202: ff d0                         callq   *%rax
// 204: 49 29 de                      subq    %rbx, %r14
// 207: 49 83 c6 b0                   addq    $-0x50, %r14
// 20b: 49 c1 ee 03                   shrq    $0x3, %r14
// 20f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 213: 31 c0                         xorl    %eax, %eax
// 215: 48 83 c4 08                   addq    $0x8, %rsp
// 219: 5b                            popq    %rbx
// 21a: 41 5c                         popq    %r12
// 21c: 41 5d                         popq    %r13
// 21e: 41 5e                         popq    %r14
// 220: 41 5f                         popq    %r15
// 222: 5d                            popq    %rbp
// 223: c3                            retq
// 224: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000226:  R_X86_64_64  .rodata.str1.1
// 22e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000230:  R_X86_64_64  _Py_NegativeRefcount
// 238: be 47 05 00 00                movl    $0x547, %esi            # imm = 0x547
// 23d: 4c 89 e2                      movq    %r12, %rdx
// 240: ff d0                         callq   *%rax
// 242: 49 8b 04 24                   movq    (%r12), %rax
// 246: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 24a: 49 83 c6 f8                   addq    $-0x8, %r14
// 24e: 85 c0                         testl   %eax, %eax
// 250: 78 21                         js      0x273 <_JIT_ENTRY+0x273>
// 252: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000254:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 25c: ff d0                         callq   *%rax
// 25e: 49 ff 0c 24                   decq    (%r12)
// 262: 75 0f                         jne     0x273 <_JIT_ENTRY+0x273>
// 264: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000266:  R_X86_64_64  _Py_Dealloc
// 26e: 4c 89 e7                      movq    %r12, %rdi
// 271: ff d0                         callq   *%rax
// 273: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000275:  R_X86_64_64  _JIT_CONTINUE
// 27d: 48 89 df                      movq    %rbx, %rdi
// 280: 4c 89 f6                      movq    %r14, %rsi
// 283: 4c 89 fa                      movq    %r15, %rdx
// 286: 48 83 c4 08                   addq    $0x8, %rsp
// 28a: 5b                            popq    %rbx
// 28b: 41 5c                         popq    %r12
// 28d: 41 5d                         popq    %r13
// 28f: 41 5e                         popq    %r14
// 291: 41 5f                         popq    %r15
// 293: 5d                            popq    %rbp
// 294: ff e0                         jmpq    *%rax
// 296: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000298:  R_X86_64_64  _Py_Dealloc
// 2a0: 4c 89 e7                      movq    %r12, %rdi
// 2a3: ff d0                         callq   *%rax
// 2a5: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 2a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ab:  R_X86_64_64  _JIT_OPARG
// 2b3: a8 01                         testb   $0x1, %al
// 2b5: 0f 85 21 fe ff ff             jne     0xdc <_JIT_ENTRY+0xdc>
// 2bb: e9 23 fe ff ff                jmp     0xe3 <_JIT_ENTRY+0xe3>
// 2c0: 
static const unsigned char _LOAD_ATTR_SLOTplus_LIST_EXTEND_code_body[705] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1d, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x3f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4f, 0x85, 0xc0, 0x79, 0x71, 0xe9, 0x82, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xa0, 0x01, 0x00, 0x00, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xcc, 0x01, 0x00, 0x00, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x41, 0x89, 0xc5, 0x41, 0x83, 0xe5, 0x01, 0xf7, 0xd0, 0x4f, 0x8b, 0x64, 0xee, 0xf8, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4c, 0x01, 0xe8, 0x49, 0x8b, 0x3c, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x22, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x04, 0x01, 0x00, 0x00, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x83, 0xc6, 0xf8, 0x85, 0xc0, 0x0f, 0x89, 0x22, 0x01, 0x00, 0x00, 0xe9, 0x3e, 0x01, 0x00, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x75, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x5a, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x83, 0xb8, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x75, 0x4b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xc0, 0x75, 0x38, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x8b, 0x75, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x43, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4f, 0x8d, 0x34, 0xee, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb0, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x47, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x83, 0xc6, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x21, 0xfe, 0xff, 0xff, 0xe9, 0x23, 0xfe, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_LIST_EXTEND_code_holes[26] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x90, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x101, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyList_Extend, 0x0},
    {0x137, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_ExceptionMatches, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySequence_Check, 0x0},
    {0x17a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Clear, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1f7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x226, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x230, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x254, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x266, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x275, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x298, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2ab, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00Value after * must be an iterable, not %.200s\x00'
// 67: 00
static const unsigned char _LOAD_ATTR_SLOTplus_LIST_EXTEND_data_body[105] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x2a, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x74, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x2c, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_LIST_EXTEND_data_holes[1];

// _LOAD_ATTR_SLOTplus_LOAD_ASSERTION_ERROR
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_LOAD_ASSERTION_ERROR.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 49 8b 2c 04                   movq    (%r12,%rax), %rbp
// 26: 48 85 ed                      testq   %rbp, %rbp
// 29: 74 23                         je      0x4e <_JIT_ENTRY+0x4e>
// 2b: 49 89 d7                      movq    %rdx, %r15
// 2e: 8b 45 00                      movl    (%rbp), %eax
// 31: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000033:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 3b: ff c0                         incl    %eax
// 3d: 75 46                         jne     0x85 <_JIT_ENTRY+0x85>
// 3f: 49 8b 04 24                   movq    (%r12), %rax
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 7e 4c                         jle     0x94 <_JIT_ENTRY+0x94>
// 48: 85 c0                         testl   %eax, %eax
// 4a: 79 6e                         jns     0xba <_JIT_ENTRY+0xba>
// 4c: eb 7e                         jmp     0xcc <_JIT_ENTRY+0xcc>
// 4e: 49 29 de                      subq    %rbx, %r14
// 51: 49 83 c6 b8                   addq    $-0x48, %r14
// 55: 49 c1 ee 03                   shrq    $0x3, %r14
// 59: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 5d: 48 8b 03                      movq    (%rbx), %rax
// 60: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000062:  R_X86_64_64  _JIT_TARGET
// 6a: 89 c9                         movl    %ecx, %ecx
// 6c: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 70: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 76: 48 83 c4 08                   addq    $0x8, %rsp
// 7a: 5b                            popq    %rbx
// 7b: 41 5c                         popq    %r12
// 7d: 41 5d                         popq    %r13
// 7f: 41 5e                         popq    %r14
// 81: 41 5f                         popq    %r15
// 83: 5d                            popq    %rbp
// 84: c3                            retq
// 85: 89 45 00                      movl    %eax, (%rbp)
// 88: 41 ff d5                      callq   *%r13
// 8b: 49 8b 04 24                   movq    (%r12), %rax
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 7f b4                         jg      0x48 <_JIT_ENTRY+0x48>
// 94: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000096:  R_X86_64_64  .rodata.str1.1
// 9e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a0:  R_X86_64_64  _Py_NegativeRefcount
// a8: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// ad: 4c 89 e2                      movq    %r12, %rdx
// b0: ff d0                         callq   *%rax
// b2: 49 8b 04 24                   movq    (%r12), %rax
// b6: 85 c0                         testl   %eax, %eax
// b8: 78 12                         js      0xcc <_JIT_ENTRY+0xcc>
// ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c4: ff d0                         callq   *%rax
// c6: 49 ff 0c 24                   decq    (%r12)
// ca: 74 6e                         je      0x13a <_JIT_ENTRY+0x13a>
// cc: 49 89 6e f8                   movq    %rbp, -0x8(%r14)
// d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d2:  R_X86_64_64  _JIT_OPARG
// da: a8 01                         testb   $0x1, %al
// dc: 74 07                         je      0xe5 <_JIT_ENTRY+0xe5>
// de: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e7:  R_X86_64_64  PyExc_AssertionError
// ef: 4c 8b 20                      movq    (%rax), %r12
// f2: 41 8b 04 24                   movl    (%r12), %eax
// f6: ff c0                         incl    %eax
// f8: 74 07                         je      0x101 <_JIT_ENTRY+0x101>
// fa: 41 89 04 24                   movl    %eax, (%r12)
// fe: 41 ff d5                      callq   *%r13
// 101: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000103:  R_X86_64_64  _JIT_OPARG
// 10b: 83 e0 01                      andl    $0x1, %eax
// 10e: 4d 89 24 c6                   movq    %r12, (%r14,%rax,8)
// 112: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 116: 48 83 c6 08                   addq    $0x8, %rsi
// 11a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011c:  R_X86_64_64  _JIT_CONTINUE
// 124: 48 89 df                      movq    %rbx, %rdi
// 127: 4c 89 fa                      movq    %r15, %rdx
// 12a: 48 83 c4 08                   addq    $0x8, %rsp
// 12e: 5b                            popq    %rbx
// 12f: 41 5c                         popq    %r12
// 131: 41 5d                         popq    %r13
// 133: 41 5e                         popq    %r14
// 135: 41 5f                         popq    %r15
// 137: 5d                            popq    %rbp
// 138: ff e0                         jmpq    *%rax
// 13a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013c:  R_X86_64_64  _Py_Dealloc
// 144: 4c 89 e7                      movq    %r12, %rdi
// 147: ff d0                         callq   *%rax
// 149: 49 89 6e f8                   movq    %rbp, -0x8(%r14)
// 14d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014f:  R_X86_64_64  _JIT_OPARG
// 157: a8 01                         testb   $0x1, %al
// 159: 75 83                         jne     0xde <_JIT_ENTRY+0xde>
// 15b: eb 88                         jmp     0xe5 <_JIT_ENTRY+0xe5>
// 15d: 
static const unsigned char _LOAD_ATTR_SLOTplus_LOAD_ASSERTION_ERROR_code_body[350] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8b, 0x2c, 0x04, 0x48, 0x85, 0xed, 0x74, 0x23, 0x49, 0x89, 0xd7, 0x8b, 0x45, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0x75, 0x46, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4c, 0x85, 0xc0, 0x79, 0x6e, 0xeb, 0x7e, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0x45, 0x00, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb4, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x6e, 0x49, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x20, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x07, 0x41, 0x89, 0x04, 0x24, 0x41, 0xff, 0xd5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x4d, 0x89, 0x24, 0xc6, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x75, 0x83, 0xeb, 0x88};
static const Hole _LOAD_ATTR_SLOTplus_LOAD_ASSERTION_ERROR_code_holes[13] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x96, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xa0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xbc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_AssertionError, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x11c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_LOAD_ASSERTION_ERROR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_LOAD_ASSERTION_ERROR_data_holes[1];

// _LOAD_ATTR_SLOTplus_LOAD_ATTR
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_LOAD_ATTR.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 48 83 ec 10                   subq    $0x10, %rsp
// d: 49 89 f6                      movq    %rsi, %r14
// 10: 48 89 fb                      movq    %rdi, %rbx
// 13: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  _JIT_OPERAND
// 21: 0f b7 c0                      movzwl  %ax, %eax
// 24: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 28: 4d 85 ed                      testq   %r13, %r13
// 2b: 74 1d                         je      0x4a <_JIT_ENTRY+0x4a>
// 2d: 49 89 d7                      movq    %rdx, %r15
// 30: 41 8b 45 00                   movl    (%r13), %eax
// 34: ff c0                         incl    %eax
// 36: 75 3f                         jne     0x77 <_JIT_ENTRY+0x77>
// 38: 49 8b 04 24                   movq    (%r12), %rax
// 3c: 48 85 c0                      testq   %rax, %rax
// 3f: 7e 4f                         jle     0x90 <_JIT_ENTRY+0x90>
// 41: 85 c0                         testl   %eax, %eax
// 43: 79 71                         jns     0xb6 <_JIT_ENTRY+0xb6>
// 45: e9 8d 00 00 00                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 4a: 49 29 de                      subq    %rbx, %r14
// 4d: 49 83 c6 b8                   addq    $-0x48, %r14
// 51: 49 c1 ee 03                   shrq    $0x3, %r14
// 55: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 59: 48 8b 03                      movq    (%rbx), %rax
// 5c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005e:  R_X86_64_64  _JIT_TARGET
// 66: 89 c9                         movl    %ecx, %ecx
// 68: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 6c: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 72: e9 dd 01 00 00                jmp     0x254 <_JIT_ENTRY+0x254>
// 77: 41 89 45 00                   movl    %eax, (%r13)
// 7b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007d:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 85: ff d0                         callq   *%rax
// 87: 49 8b 04 24                   movq    (%r12), %rax
// 8b: 48 85 c0                      testq   %rax, %rax
// 8e: 7f b1                         jg      0x41 <_JIT_ENTRY+0x41>
// 90: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000092:  R_X86_64_64  .rodata.str1.1
// 9a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009c:  R_X86_64_64  _Py_NegativeRefcount
// a4: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a9: 4c 89 e2                      movq    %r12, %rdx
// ac: ff d0                         callq   *%rax
// ae: 49 8b 04 24                   movq    (%r12), %rax
// b2: 85 c0                         testl   %eax, %eax
// b4: 78 21                         js      0xd7 <_JIT_ENTRY+0xd7>
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c0: ff d0                         callq   *%rax
// c2: 49 ff 0c 24                   decq    (%r12)
// c6: 75 0f                         jne     0xd7 <_JIT_ENTRY+0xd7>
// c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ca:  R_X86_64_64  _Py_Dealloc
// d2: 4c 89 e7                      movq    %r12, %rdi
// d5: ff d0                         callq   *%rax
// d7: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000dd:  R_X86_64_64  _JIT_OPARG
// e5: a8 01                         testb   $0x1, %al
// e7: 74 07                         je      0xf0 <_JIT_ENTRY+0xf0>
// e9: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// f0: 89 c1                         movl    %eax, %ecx
// f2: 83 e1 01                      andl    $0x1, %ecx
// f5: 4d 8d 2c ce                   leaq    (%r14,%rcx,8), %r13
// f9: 49 83 c5 f8                   addq    $-0x8, %r13
// fd: 4d 8b 64 ce f8                movq    -0x8(%r14,%rcx,8), %r12
// 102: 48 8b 13                      movq    (%rbx), %rdx
// 105: 48 8b 52 20                   movq    0x20(%rdx), %rdx
// 109: 25 fe ff 00 00                andl    $0xfffe, %eax           # imm = 0xFFFE
// 10e: 48 8b 74 82 18                movq    0x18(%rdx,%rax,4), %rsi
// 113: 85 c9                         testl   %ecx, %ecx
// 115: 74 41                         je      0x158 <_JIT_ENTRY+0x158>
// 117: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 120: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000122:  R_X86_64_64  _PyObject_GetMethod
// 12a: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 12f: 4c 89 e7                      movq    %r12, %rdi
// 132: ff d0                         callq   *%rax
// 134: 85 c0                         testl   %eax, %eax
// 136: 74 58                         je      0x190 <_JIT_ENTRY+0x190>
// 138: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 13d: 49 89 45 00                   movq    %rax, (%r13)
// 141: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000143:  R_X86_64_64  _JIT_OPARG
// 14b: a8 01                         testb   $0x1, %al
// 14d: 0f 85 9d 00 00 00             jne     0x1f0 <_JIT_ENTRY+0x1f0>
// 153: e9 9f 00 00 00                jmp     0x1f7 <_JIT_ENTRY+0x1f7>
// 158: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015a:  R_X86_64_64  PyObject_GetAttr
// 162: 4c 89 e7                      movq    %r12, %rdi
// 165: ff d0                         callq   *%rax
// 167: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 16c: 49 8b 04 24                   movq    (%r12), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 7f 46                         jg      0x1bb <_JIT_ENTRY+0x1bb>
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_NegativeRefcount
// 189: be 4b 06 00 00                movl    $0x64b, %esi            # imm = 0x64B
// 18e: eb 22                         jmp     0x1b2 <_JIT_ENTRY+0x1b2>
// 190: 49 8b 04 24                   movq    (%r12), %rax
// 194: 48 85 c0                      testq   %rax, %rax
// 197: 7f 22                         jg      0x1bb <_JIT_ENTRY+0x1bb>
// 199: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000019b:  R_X86_64_64  .rodata.str1.1
// 1a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a5:  R_X86_64_64  _Py_NegativeRefcount
// 1ad: be 43 06 00 00                movl    $0x643, %esi            # imm = 0x643
// 1b2: 4c 89 e2                      movq    %r12, %rdx
// 1b5: ff d0                         callq   *%rax
// 1b7: 49 8b 04 24                   movq    (%r12), %rax
// 1bb: 85 c0                         testl   %eax, %eax
// 1bd: 78 12                         js      0x1d1 <_JIT_ENTRY+0x1d1>
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c9: ff d0                         callq   *%rax
// 1cb: 49 ff 0c 24                   decq    (%r12)
// 1cf: 74 59                         je      0x22a <_JIT_ENTRY+0x22a>
// 1d1: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1d6: 48 85 c0                      testq   %rax, %rax
// 1d9: 74 68                         je      0x243 <_JIT_ENTRY+0x243>
// 1db: 45 31 e4                      xorl    %r12d, %r12d
// 1de: 49 89 45 00                   movq    %rax, (%r13)
// 1e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e4:  R_X86_64_64  _JIT_OPARG
// 1ec: a8 01                         testb   $0x1, %al
// 1ee: 74 07                         je      0x1f7 <_JIT_ENTRY+0x1f7>
// 1f0: 83 e0 01                      andl    $0x1, %eax
// 1f3: 4d 89 24 c6                   movq    %r12, (%r14,%rax,8)
// 1f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f9:  R_X86_64_64  _JIT_OPARG
// 201: 83 e0 01                      andl    $0x1, %eax
// 204: 48 01 c0                      addq    %rax, %rax
// 207: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 20b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020d:  R_X86_64_64  _JIT_CONTINUE
// 215: 48 89 df                      movq    %rbx, %rdi
// 218: 4c 89 fa                      movq    %r15, %rdx
// 21b: 48 83 c4 10                   addq    $0x10, %rsp
// 21f: 5b                            popq    %rbx
// 220: 41 5c                         popq    %r12
// 222: 41 5d                         popq    %r13
// 224: 41 5e                         popq    %r14
// 226: 41 5f                         popq    %r15
// 228: ff e0                         jmpq    *%rax
// 22a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022c:  R_X86_64_64  _Py_Dealloc
// 234: 4c 89 e7                      movq    %r12, %rdi
// 237: ff d0                         callq   *%rax
// 239: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 23e: 48 85 c0                      testq   %rax, %rax
// 241: 75 98                         jne     0x1db <_JIT_ENTRY+0x1db>
// 243: 49 29 dd                      subq    %rbx, %r13
// 246: 49 83 c5 b8                   addq    $-0x48, %r13
// 24a: 49 c1 ed 03                   shrq    $0x3, %r13
// 24e: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 252: 31 c0                         xorl    %eax, %eax
// 254: 48 83 c4 10                   addq    $0x10, %rsp
// 258: 5b                            popq    %rbx
// 259: 41 5c                         popq    %r12
// 25b: 41 5d                         popq    %r13
// 25d: 41 5e                         popq    %r14
// 25f: 41 5f                         popq    %r15
// 261: c3                            retq
// 262: 
static const unsigned char _LOAD_ATTR_SLOTplus_LOAD_ATTR_code_body[611] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x10, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1d, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x3f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4f, 0x85, 0xc0, 0x79, 0x71, 0xe9, 0x8d, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xdd, 0x01, 0x00, 0x00, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0x83, 0xe1, 0x01, 0x4d, 0x8d, 0x2c, 0xce, 0x49, 0x83, 0xc5, 0xf8, 0x4d, 0x8b, 0x64, 0xce, 0xf8, 0x48, 0x8b, 0x13, 0x48, 0x8b, 0x52, 0x20, 0x25, 0xfe, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x74, 0x82, 0x18, 0x85, 0xc9, 0x74, 0x41, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x58, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x9d, 0x00, 0x00, 0x00, 0xe9, 0x9f, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x46, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4b, 0x06, 0x00, 0x00, 0xeb, 0x22, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x43, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x59, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x74, 0x68, 0x45, 0x31, 0xe4, 0x49, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x83, 0xe0, 0x01, 0x4d, 0x89, 0x24, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x48, 0x01, 0xc0, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x10, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x75, 0x98, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x10, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _LOAD_ATTR_SLOTplus_LOAD_ATTR_code_holes[21] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5e, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xdd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x122, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_GetMethod, 0x0},
    {0x143, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetAttr, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1e4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x22c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_LOAD_ATTR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_LOAD_ATTR_data_holes[1];

// _LOAD_ATTR_SLOTplus_LOAD_ATTR_CLASS
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_LOAD_ATTR_CLASS.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 41 0f b7 c5                   movzwl  %r13w, %eax
// 23: 49 8b 2c 04                   movq    (%r12,%rax), %rbp
// 27: 48 85 ed                      testq   %rbp, %rbp
// 2a: 74 1c                         je      0x48 <_JIT_ENTRY+0x48>
// 2c: 49 89 d7                      movq    %rdx, %r15
// 2f: 8b 45 00                      movl    (%rbp), %eax
// 32: ff c0                         incl    %eax
// 34: 75 49                         jne     0x7f <_JIT_ENTRY+0x7f>
// 36: 49 8b 04 24                   movq    (%r12), %rax
// 3a: 48 85 c0                      testq   %rax, %rax
// 3d: 7e 58                         jle     0x97 <_JIT_ENTRY+0x97>
// 3f: 85 c0                         testl   %eax, %eax
// 41: 79 7a                         jns     0xbd <_JIT_ENTRY+0xbd>
// 43: e9 8b 00 00 00                jmp     0xd3 <_JIT_ENTRY+0xd3>
// 48: 49 29 de                      subq    %rbx, %r14
// 4b: 49 83 c6 b8                   addq    $-0x48, %r14
// 4f: 49 c1 ee 03                   shrq    $0x3, %r14
// 53: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 57: 48 8b 03                      movq    (%rbx), %rax
// 5a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005c:  R_X86_64_64  _JIT_TARGET
// 64: 89 c9                         movl    %ecx, %ecx
// 66: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 6a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 70: 48 83 c4 08                   addq    $0x8, %rsp
// 74: 5b                            popq    %rbx
// 75: 41 5c                         popq    %r12
// 77: 41 5d                         popq    %r13
// 79: 41 5e                         popq    %r14
// 7b: 41 5f                         popq    %r15
// 7d: 5d                            popq    %rbp
// 7e: c3                            retq
// 7f: 89 45 00                      movl    %eax, (%rbp)
// 82: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000084:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 8c: ff d0                         callq   *%rax
// 8e: 49 8b 04 24                   movq    (%r12), %rax
// 92: 48 85 c0                      testq   %rax, %rax
// 95: 7f a8                         jg      0x3f <_JIT_ENTRY+0x3f>
// 97: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000099:  R_X86_64_64  .rodata.str1.1
// a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a3:  R_X86_64_64  _Py_NegativeRefcount
// ab: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// b0: 4c 89 e2                      movq    %r12, %rdx
// b3: ff d0                         callq   *%rax
// b5: 49 8b 04 24                   movq    (%r12), %rax
// b9: 85 c0                         testl   %eax, %eax
// bb: 78 16                         js      0xd3 <_JIT_ENTRY+0xd3>
// bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bf:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c7: ff d0                         callq   *%rax
// c9: 49 ff 0c 24                   decq    (%r12)
// cd: 0f 84 ea 00 00 00             je      0x1bd <_JIT_ENTRY+0x1bd>
// d3: 49 89 6e f8                   movq    %rbp, -0x8(%r14)
// d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d9:  R_X86_64_64  _JIT_OPARG
// e1: a8 01                         testb   $0x1, %al
// e3: 74 07                         je      0xec <_JIT_ENTRY+0xec>
// e5: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// ec: 83 e0 01                      andl    $0x1, %eax
// ef: 4d 8b 64 c6 f8                movq    -0x8(%r14,%rax,8), %r12
// f4: 41 8b 45 00                   movl    (%r13), %eax
// f8: ff c0                         incl    %eax
// fa: 75 0f                         jne     0x10b <_JIT_ENTRY+0x10b>
// fc: 49 8b 04 24                   movq    (%r12), %rax
// 100: 48 85 c0                      testq   %rax, %rax
// 103: 7e 1f                         jle     0x124 <_JIT_ENTRY+0x124>
// 105: 85 c0                         testl   %eax, %eax
// 107: 79 41                         jns     0x14a <_JIT_ENTRY+0x14a>
// 109: eb 55                         jmp     0x160 <_JIT_ENTRY+0x160>
// 10b: 41 89 45 00                   movl    %eax, (%r13)
// 10f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000111:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 119: ff d0                         callq   *%rax
// 11b: 49 8b 04 24                   movq    (%r12), %rax
// 11f: 48 85 c0                      testq   %rax, %rax
// 122: 7f e1                         jg      0x105 <_JIT_ENTRY+0x105>
// 124: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000126:  R_X86_64_64  .rodata.str1.1
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  _Py_NegativeRefcount
// 138: be f3 06 00 00                movl    $0x6f3, %esi            # imm = 0x6F3
// 13d: 4c 89 e2                      movq    %r12, %rdx
// 140: ff d0                         callq   *%rax
// 142: 49 8b 04 24                   movq    (%r12), %rax
// 146: 85 c0                         testl   %eax, %eax
// 148: 78 16                         js      0x160 <_JIT_ENTRY+0x160>
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 154: ff d0                         callq   *%rax
// 156: 49 ff 0c 24                   decq    (%r12)
// 15a: 0f 84 87 00 00 00             je      0x1e7 <_JIT_ENTRY+0x1e7>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _JIT_OPARG
// 16a: 83 e0 01                      andl    $0x1, %eax
// 16d: 4d 89 6c c6 f8                movq    %r13, -0x8(%r14,%rax,8)
// 172: 74 15                         je      0x189 <_JIT_ENTRY+0x189>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _JIT_OPARG
// 17e: 83 e0 01                      andl    $0x1, %eax
// 181: 49 c7 04 c6 00 00 00 00       movq    $0x0, (%r14,%rax,8)
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _JIT_OPARG
// 193: 83 e0 01                      andl    $0x1, %eax
// 196: 48 01 c0                      addq    %rax, %rax
// 199: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 19d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019f:  R_X86_64_64  _JIT_CONTINUE
// 1a7: 48 89 df                      movq    %rbx, %rdi
// 1aa: 4c 89 fa                      movq    %r15, %rdx
// 1ad: 48 83 c4 08                   addq    $0x8, %rsp
// 1b1: 5b                            popq    %rbx
// 1b2: 41 5c                         popq    %r12
// 1b4: 41 5d                         popq    %r13
// 1b6: 41 5e                         popq    %r14
// 1b8: 41 5f                         popq    %r15
// 1ba: 5d                            popq    %rbp
// 1bb: ff e0                         jmpq    *%rax
// 1bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bf:  R_X86_64_64  _Py_Dealloc
// 1c7: 4c 89 e7                      movq    %r12, %rdi
// 1ca: ff d0                         callq   *%rax
// 1cc: 49 89 6e f8                   movq    %rbp, -0x8(%r14)
// 1d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d2:  R_X86_64_64  _JIT_OPARG
// 1da: a8 01                         testb   $0x1, %al
// 1dc: 0f 85 03 ff ff ff             jne     0xe5 <_JIT_ENTRY+0xe5>
// 1e2: e9 05 ff ff ff                jmp     0xec <_JIT_ENTRY+0xec>
// 1e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e9:  R_X86_64_64  _Py_Dealloc
// 1f1: 4c 89 e7                      movq    %r12, %rdi
// 1f4: ff d0                         callq   *%rax
// 1f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f8:  R_X86_64_64  _JIT_OPARG
// 200: 83 e0 01                      andl    $0x1, %eax
// 203: 4d 89 6c c6 f8                movq    %r13, -0x8(%r14,%rax,8)
// 208: 0f 85 66 ff ff ff             jne     0x174 <_JIT_ENTRY+0x174>
// 20e: e9 76 ff ff ff                jmp     0x189 <_JIT_ENTRY+0x189>
// 213: 
static const unsigned char _LOAD_ATTR_SLOTplus_LOAD_ATTR_CLASS_code_body[532] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x0f, 0xb7, 0xc5, 0x49, 0x8b, 0x2c, 0x04, 0x48, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x89, 0xd7, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x49, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x58, 0x85, 0xc0, 0x79, 0x7a, 0xe9, 0x8b, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xa8, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xea, 0x00, 0x00, 0x00, 0x49, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x4d, 0x8b, 0x64, 0xc6, 0xf8, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1f, 0x85, 0xc0, 0x79, 0x41, 0xeb, 0x55, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xf3, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x87, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x4d, 0x89, 0x6c, 0xc6, 0xf8, 0x74, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0xc7, 0x04, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x48, 0x01, 0xc0, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x03, 0xff, 0xff, 0xff, 0xe9, 0x05, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x4d, 0x89, 0x6c, 0xc6, 0xf8, 0x0f, 0x85, 0x66, 0xff, 0xff, 0xff, 0xe9, 0x76, 0xff, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_LOAD_ATTR_CLASS_code_holes[20] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x99, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xa3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xbf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x111, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x126, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x19f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1bf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1f8, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_LOAD_ATTR_CLASS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_LOAD_ATTR_CLASS_data_holes[1];

// _LOAD_ATTR_SLOTplus_LOAD_ATTR_INSTANCE_VALUE
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_LOAD_ATTR_INSTANCE_VALUE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 26: 4d 85 ed                      testq   %r13, %r13
// 29: 0f 84 cc 00 00 00             je      0xfb <_JIT_ENTRY+0xfb>
// 2f: 49 89 d7                      movq    %rdx, %r15
// 32: 41 8b 45 00                   movl    (%r13), %eax
// 36: ff c0                         incl    %eax
// 38: 75 0f                         jne     0x49 <_JIT_ENTRY+0x49>
// 3a: 49 8b 04 24                   movq    (%r12), %rax
// 3e: 48 85 c0                      testq   %rax, %rax
// 41: 7e 1f                         jle     0x62 <_JIT_ENTRY+0x62>
// 43: 85 c0                         testl   %eax, %eax
// 45: 79 41                         jns     0x88 <_JIT_ENTRY+0x88>
// 47: eb 55                         jmp     0x9e <_JIT_ENTRY+0x9e>
// 49: 41 89 45 00                   movl    %eax, (%r13)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 57: ff d0                         callq   *%rax
// 59: 49 8b 04 24                   movq    (%r12), %rax
// 5d: 48 85 c0                      testq   %rax, %rax
// 60: 7f e1                         jg      0x43 <_JIT_ENTRY+0x43>
// 62: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000064:  R_X86_64_64  .rodata.str1.1
// 6c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006e:  R_X86_64_64  _Py_NegativeRefcount
// 76: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 7b: 4c 89 e2                      movq    %r12, %rdx
// 7e: ff d0                         callq   *%rax
// 80: 49 8b 04 24                   movq    (%r12), %rax
// 84: 85 c0                         testl   %eax, %eax
// 86: 78 16                         js      0x9e <_JIT_ENTRY+0x9e>
// 88: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 92: ff d0                         callq   *%rax
// 94: 49 ff 0c 24                   decq    (%r12)
// 98: 0f 84 43 01 00 00             je      0x1e1 <_JIT_ENTRY+0x1e1>
// 9e: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: a8 01                         testb   $0x1, %al
// ae: 74 07                         je      0xb7 <_JIT_ENTRY+0xb7>
// b0: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// b7: 83 e0 01                      andl    $0x1, %eax
// ba: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// be: 4d 8b 64 c6 f8                movq    -0x8(%r14,%rax,8), %r12
// c3: 49 8b 44 24 e8                movq    -0x18(%r12), %rax
// c8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ca:  R_X86_64_64  _JIT_OPERAND
// d2: 0f b7 c9                      movzwl  %cx, %ecx
// d5: 48 8b 6c c8 01                movq    0x1(%rax,%rcx,8), %rbp
// da: 48 85 ed                      testq   %rbp, %rbp
// dd: 74 19                         je      0xf8 <_JIT_ENTRY+0xf8>
// df: 8b 45 00                      movl    (%rbp), %eax
// e2: ff c0                         incl    %eax
// e4: 75 4c                         jne     0x132 <_JIT_ENTRY+0x132>
// e6: 49 8b 04 24                   movq    (%r12), %rax
// ea: 48 85 c0                      testq   %rax, %rax
// ed: 7e 5b                         jle     0x14a <_JIT_ENTRY+0x14a>
// ef: 85 c0                         testl   %eax, %eax
// f1: 79 7d                         jns     0x170 <_JIT_ENTRY+0x170>
// f3: e9 99 00 00 00                jmp     0x191 <_JIT_ENTRY+0x191>
// f8: 4d 89 ee                      movq    %r13, %r14
// fb: 49 29 de                      subq    %rbx, %r14
// fe: 49 83 c6 b8                   addq    $-0x48, %r14
// 102: 49 c1 ee 03                   shrq    $0x3, %r14
// 106: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 10a: 48 8b 03                      movq    (%rbx), %rax
// 10d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000010f:  R_X86_64_64  _JIT_TARGET
// 117: 89 c9                         movl    %ecx, %ecx
// 119: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 11d: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 123: 48 83 c4 08                   addq    $0x8, %rsp
// 127: 5b                            popq    %rbx
// 128: 41 5c                         popq    %r12
// 12a: 41 5d                         popq    %r13
// 12c: 41 5e                         popq    %r14
// 12e: 41 5f                         popq    %r15
// 130: 5d                            popq    %rbp
// 131: c3                            retq
// 132: 89 45 00                      movl    %eax, (%rbp)
// 135: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000137:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 13f: ff d0                         callq   *%rax
// 141: 49 8b 04 24                   movq    (%r12), %rax
// 145: 48 85 c0                      testq   %rax, %rax
// 148: 7f a5                         jg      0xef <_JIT_ENTRY+0xef>
// 14a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000014c:  R_X86_64_64  .rodata.str1.1
// 154: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000156:  R_X86_64_64  _Py_NegativeRefcount
// 15e: be 75 06 00 00                movl    $0x675, %esi            # imm = 0x675
// 163: 4c 89 e2                      movq    %r12, %rdx
// 166: ff d0                         callq   *%rax
// 168: 49 8b 04 24                   movq    (%r12), %rax
// 16c: 85 c0                         testl   %eax, %eax
// 16e: 78 21                         js      0x191 <_JIT_ENTRY+0x191>
// 170: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000172:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17a: ff d0                         callq   *%rax
// 17c: 49 ff 0c 24                   decq    (%r12)
// 180: 75 0f                         jne     0x191 <_JIT_ENTRY+0x191>
// 182: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000184:  R_X86_64_64  _Py_Dealloc
// 18c: 4c 89 e7                      movq    %r12, %rdi
// 18f: ff d0                         callq   *%rax
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _JIT_OPARG
// 19b: 83 e0 01                      andl    $0x1, %eax
// 19e: 49 89 6c c6 f8                movq    %rbp, -0x8(%r14,%rax,8)
// 1a3: 74 08                         je      0x1ad <_JIT_ENTRY+0x1ad>
// 1a5: 49 c7 45 00 00 00 00 00       movq    $0x0, (%r13)
// 1ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001af:  R_X86_64_64  _JIT_OPARG
// 1b7: 83 e0 01                      andl    $0x1, %eax
// 1ba: 48 01 c0                      addq    %rax, %rax
// 1bd: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _JIT_CONTINUE
// 1cb: 48 89 df                      movq    %rbx, %rdi
// 1ce: 4c 89 fa                      movq    %r15, %rdx
// 1d1: 48 83 c4 08                   addq    $0x8, %rsp
// 1d5: 5b                            popq    %rbx
// 1d6: 41 5c                         popq    %r12
// 1d8: 41 5d                         popq    %r13
// 1da: 41 5e                         popq    %r14
// 1dc: 41 5f                         popq    %r15
// 1de: 5d                            popq    %rbp
// 1df: ff e0                         jmpq    *%rax
// 1e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e3:  R_X86_64_64  _Py_Dealloc
// 1eb: 4c 89 e7                      movq    %r12, %rdi
// 1ee: ff d0                         callq   *%rax
// 1f0: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 1f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f6:  R_X86_64_64  _JIT_OPARG
// 1fe: a8 01                         testb   $0x1, %al
// 200: 0f 85 aa fe ff ff             jne     0xb0 <_JIT_ENTRY+0xb0>
// 206: e9 ac fe ff ff                jmp     0xb7 <_JIT_ENTRY+0xb7>
// 20b: 
static const unsigned char _LOAD_ATTR_SLOTplus_LOAD_ATTR_INSTANCE_VALUE_code_body[524] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xcc, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1f, 0x85, 0xc0, 0x79, 0x41, 0xeb, 0x55, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x43, 0x01, 0x00, 0x00, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x4d, 0x8d, 0x2c, 0xc6, 0x4d, 0x8b, 0x64, 0xc6, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0xe8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x8b, 0x6c, 0xc8, 0x01, 0x48, 0x85, 0xed, 0x74, 0x19, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x4c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x5b, 0x85, 0xc0, 0x79, 0x7d, 0xe9, 0x99, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xa5, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x75, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x89, 0x6c, 0xc6, 0xf8, 0x74, 0x08, 0x49, 0xc7, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x48, 0x01, 0xc0, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0xaa, 0xfe, 0xff, 0xff, 0xe9, 0xac, 0xfe, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_LOAD_ATTR_INSTANCE_VALUE_code_holes[19] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x64, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xca, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x137, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x172, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1af, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1e3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_LOAD_ATTR_INSTANCE_VALUE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_LOAD_ATTR_INSTANCE_VALUE_data_holes[1];

// _LOAD_ATTR_SLOTplus_LOAD_ATTR_METHOD_LAZY_DICT
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_LOAD_ATTR_METHOD_LAZY_DICT.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 41 0f b7 c5                   movzwl  %r13w, %eax
// 23: 49 8b 2c 04                   movq    (%r12,%rax), %rbp
// 27: 48 85 ed                      testq   %rbp, %rbp
// 2a: 74 1c                         je      0x48 <_JIT_ENTRY+0x48>
// 2c: 49 89 d7                      movq    %rdx, %r15
// 2f: 8b 45 00                      movl    (%rbp), %eax
// 32: ff c0                         incl    %eax
// 34: 75 49                         jne     0x7f <_JIT_ENTRY+0x7f>
// 36: 49 8b 04 24                   movq    (%r12), %rax
// 3a: 48 85 c0                      testq   %rax, %rax
// 3d: 7e 58                         jle     0x97 <_JIT_ENTRY+0x97>
// 3f: 85 c0                         testl   %eax, %eax
// 41: 79 7a                         jns     0xbd <_JIT_ENTRY+0xbd>
// 43: e9 87 00 00 00                jmp     0xcf <_JIT_ENTRY+0xcf>
// 48: 49 29 de                      subq    %rbx, %r14
// 4b: 49 83 c6 b8                   addq    $-0x48, %r14
// 4f: 49 c1 ee 03                   shrq    $0x3, %r14
// 53: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 57: 48 8b 03                      movq    (%rbx), %rax
// 5a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005c:  R_X86_64_64  _JIT_TARGET
// 64: 89 c9                         movl    %ecx, %ecx
// 66: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 6a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 70: 48 83 c4 08                   addq    $0x8, %rsp
// 74: 5b                            popq    %rbx
// 75: 41 5c                         popq    %r12
// 77: 41 5d                         popq    %r13
// 79: 41 5e                         popq    %r14
// 7b: 41 5f                         popq    %r15
// 7d: 5d                            popq    %rbp
// 7e: c3                            retq
// 7f: 89 45 00                      movl    %eax, (%rbp)
// 82: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000084:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 8c: ff d0                         callq   *%rax
// 8e: 49 8b 04 24                   movq    (%r12), %rax
// 92: 48 85 c0                      testq   %rax, %rax
// 95: 7f a8                         jg      0x3f <_JIT_ENTRY+0x3f>
// 97: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000099:  R_X86_64_64  .rodata.str1.1
// a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a3:  R_X86_64_64  _Py_NegativeRefcount
// ab: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// b0: 4c 89 e2                      movq    %r12, %rdx
// b3: ff d0                         callq   *%rax
// b5: 49 8b 04 24                   movq    (%r12), %rax
// b9: 85 c0                         testl   %eax, %eax
// bb: 78 12                         js      0xcf <_JIT_ENTRY+0xcf>
// bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bf:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c7: ff d0                         callq   *%rax
// c9: 49 ff 0c 24                   decq    (%r12)
// cd: 74 77                         je      0x146 <_JIT_ENTRY+0x146>
// cf: 49 89 6e f8                   movq    %rbp, -0x8(%r14)
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _JIT_OPARG
// dd: a8 01                         testb   $0x1, %al
// df: 74 07                         je      0xe8 <_JIT_ENTRY+0xe8>
// e1: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// e8: 83 e0 01                      andl    $0x1, %eax
// eb: 4d 8b 64 c6 f8                movq    -0x8(%r14,%rax,8), %r12
// f0: 41 8b 45 00                   movl    (%r13), %eax
// f4: ff c0                         incl    %eax
// f6: 74 10                         je      0x108 <_JIT_ENTRY+0x108>
// f8: 41 89 45 00                   movl    %eax, (%r13)
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 106: ff d0                         callq   *%rax
// 108: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010a:  R_X86_64_64  _JIT_OPARG
// 112: 83 e0 01                      andl    $0x1, %eax
// 115: 4d 89 6c c6 f8                movq    %r13, -0x8(%r14,%rax,8)
// 11a: 4d 89 24 c6                   movq    %r12, (%r14,%rax,8)
// 11e: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 122: 48 83 c6 08                   addq    $0x8, %rsi
// 126: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000128:  R_X86_64_64  _JIT_CONTINUE
// 130: 48 89 df                      movq    %rbx, %rdi
// 133: 4c 89 fa                      movq    %r15, %rdx
// 136: 48 83 c4 08                   addq    $0x8, %rsp
// 13a: 5b                            popq    %rbx
// 13b: 41 5c                         popq    %r12
// 13d: 41 5d                         popq    %r13
// 13f: 41 5e                         popq    %r14
// 141: 41 5f                         popq    %r15
// 143: 5d                            popq    %rbp
// 144: ff e0                         jmpq    *%rax
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_Dealloc
// 150: 4c 89 e7                      movq    %r12, %rdi
// 153: ff d0                         callq   *%rax
// 155: 49 89 6e f8                   movq    %rbp, -0x8(%r14)
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  _JIT_OPARG
// 163: a8 01                         testb   $0x1, %al
// 165: 0f 85 76 ff ff ff             jne     0xe1 <_JIT_ENTRY+0xe1>
// 16b: e9 78 ff ff ff                jmp     0xe8 <_JIT_ENTRY+0xe8>
// 170: 
static const unsigned char _LOAD_ATTR_SLOTplus_LOAD_ATTR_METHOD_LAZY_DICT_code_body[369] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x0f, 0xb7, 0xc5, 0x49, 0x8b, 0x2c, 0x04, 0x48, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x89, 0xd7, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x49, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x58, 0x85, 0xc0, 0x79, 0x7a, 0xe9, 0x87, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xa8, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x77, 0x49, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x4d, 0x8b, 0x64, 0xc6, 0xf8, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x4d, 0x89, 0x6c, 0xc6, 0xf8, 0x4d, 0x89, 0x24, 0xc6, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x76, 0xff, 0xff, 0xff, 0xe9, 0x78, 0xff, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_LOAD_ATTR_METHOD_LAZY_DICT_code_holes[13] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x99, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xa3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xbf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x10a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x128, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_LOAD_ATTR_METHOD_LAZY_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_LOAD_ATTR_METHOD_LAZY_DICT_data_holes[1];

// _LOAD_ATTR_SLOTplus_LOAD_ATTR_METHOD_NO_DICT
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_LOAD_ATTR_METHOD_NO_DICT.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 41 0f b7 c5                   movzwl  %r13w, %eax
// 23: 49 8b 2c 04                   movq    (%r12,%rax), %rbp
// 27: 48 85 ed                      testq   %rbp, %rbp
// 2a: 74 1c                         je      0x48 <_JIT_ENTRY+0x48>
// 2c: 49 89 d7                      movq    %rdx, %r15
// 2f: 8b 45 00                      movl    (%rbp), %eax
// 32: ff c0                         incl    %eax
// 34: 75 49                         jne     0x7f <_JIT_ENTRY+0x7f>
// 36: 49 8b 04 24                   movq    (%r12), %rax
// 3a: 48 85 c0                      testq   %rax, %rax
// 3d: 7e 58                         jle     0x97 <_JIT_ENTRY+0x97>
// 3f: 85 c0                         testl   %eax, %eax
// 41: 79 7a                         jns     0xbd <_JIT_ENTRY+0xbd>
// 43: e9 87 00 00 00                jmp     0xcf <_JIT_ENTRY+0xcf>
// 48: 49 29 de                      subq    %rbx, %r14
// 4b: 49 83 c6 b8                   addq    $-0x48, %r14
// 4f: 49 c1 ee 03                   shrq    $0x3, %r14
// 53: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 57: 48 8b 03                      movq    (%rbx), %rax
// 5a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005c:  R_X86_64_64  _JIT_TARGET
// 64: 89 c9                         movl    %ecx, %ecx
// 66: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 6a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 70: 48 83 c4 08                   addq    $0x8, %rsp
// 74: 5b                            popq    %rbx
// 75: 41 5c                         popq    %r12
// 77: 41 5d                         popq    %r13
// 79: 41 5e                         popq    %r14
// 7b: 41 5f                         popq    %r15
// 7d: 5d                            popq    %rbp
// 7e: c3                            retq
// 7f: 89 45 00                      movl    %eax, (%rbp)
// 82: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000084:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 8c: ff d0                         callq   *%rax
// 8e: 49 8b 04 24                   movq    (%r12), %rax
// 92: 48 85 c0                      testq   %rax, %rax
// 95: 7f a8                         jg      0x3f <_JIT_ENTRY+0x3f>
// 97: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000099:  R_X86_64_64  .rodata.str1.1
// a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a3:  R_X86_64_64  _Py_NegativeRefcount
// ab: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// b0: 4c 89 e2                      movq    %r12, %rdx
// b3: ff d0                         callq   *%rax
// b5: 49 8b 04 24                   movq    (%r12), %rax
// b9: 85 c0                         testl   %eax, %eax
// bb: 78 12                         js      0xcf <_JIT_ENTRY+0xcf>
// bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bf:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c7: ff d0                         callq   *%rax
// c9: 49 ff 0c 24                   decq    (%r12)
// cd: 74 77                         je      0x146 <_JIT_ENTRY+0x146>
// cf: 49 89 6e f8                   movq    %rbp, -0x8(%r14)
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _JIT_OPARG
// dd: a8 01                         testb   $0x1, %al
// df: 74 07                         je      0xe8 <_JIT_ENTRY+0xe8>
// e1: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// e8: 83 e0 01                      andl    $0x1, %eax
// eb: 4d 8b 64 c6 f8                movq    -0x8(%r14,%rax,8), %r12
// f0: 41 8b 45 00                   movl    (%r13), %eax
// f4: ff c0                         incl    %eax
// f6: 74 10                         je      0x108 <_JIT_ENTRY+0x108>
// f8: 41 89 45 00                   movl    %eax, (%r13)
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 106: ff d0                         callq   *%rax
// 108: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010a:  R_X86_64_64  _JIT_OPARG
// 112: 83 e0 01                      andl    $0x1, %eax
// 115: 4d 89 6c c6 f8                movq    %r13, -0x8(%r14,%rax,8)
// 11a: 4d 89 24 c6                   movq    %r12, (%r14,%rax,8)
// 11e: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 122: 48 83 c6 08                   addq    $0x8, %rsi
// 126: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000128:  R_X86_64_64  _JIT_CONTINUE
// 130: 48 89 df                      movq    %rbx, %rdi
// 133: 4c 89 fa                      movq    %r15, %rdx
// 136: 48 83 c4 08                   addq    $0x8, %rsp
// 13a: 5b                            popq    %rbx
// 13b: 41 5c                         popq    %r12
// 13d: 41 5d                         popq    %r13
// 13f: 41 5e                         popq    %r14
// 141: 41 5f                         popq    %r15
// 143: 5d                            popq    %rbp
// 144: ff e0                         jmpq    *%rax
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_Dealloc
// 150: 4c 89 e7                      movq    %r12, %rdi
// 153: ff d0                         callq   *%rax
// 155: 49 89 6e f8                   movq    %rbp, -0x8(%r14)
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  _JIT_OPARG
// 163: a8 01                         testb   $0x1, %al
// 165: 0f 85 76 ff ff ff             jne     0xe1 <_JIT_ENTRY+0xe1>
// 16b: e9 78 ff ff ff                jmp     0xe8 <_JIT_ENTRY+0xe8>
// 170: 
static const unsigned char _LOAD_ATTR_SLOTplus_LOAD_ATTR_METHOD_NO_DICT_code_body[369] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x0f, 0xb7, 0xc5, 0x49, 0x8b, 0x2c, 0x04, 0x48, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x89, 0xd7, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x49, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x58, 0x85, 0xc0, 0x79, 0x7a, 0xe9, 0x87, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xa8, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x77, 0x49, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x4d, 0x8b, 0x64, 0xc6, 0xf8, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x4d, 0x89, 0x6c, 0xc6, 0xf8, 0x4d, 0x89, 0x24, 0xc6, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x76, 0xff, 0xff, 0xff, 0xe9, 0x78, 0xff, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_LOAD_ATTR_METHOD_NO_DICT_code_holes[13] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x99, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xa3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xbf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x10a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x128, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_LOAD_ATTR_METHOD_NO_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_LOAD_ATTR_METHOD_NO_DICT_data_holes[1];

// _LOAD_ATTR_SLOTplus_LOAD_ATTR_METHOD_WITH_VALUES
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_LOAD_ATTR_METHOD_WITH_VALUES.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 41 0f b7 c5                   movzwl  %r13w, %eax
// 23: 49 8b 2c 04                   movq    (%r12,%rax), %rbp
// 27: 48 85 ed                      testq   %rbp, %rbp
// 2a: 74 1c                         je      0x48 <_JIT_ENTRY+0x48>
// 2c: 49 89 d7                      movq    %rdx, %r15
// 2f: 8b 45 00                      movl    (%rbp), %eax
// 32: ff c0                         incl    %eax
// 34: 75 49                         jne     0x7f <_JIT_ENTRY+0x7f>
// 36: 49 8b 04 24                   movq    (%r12), %rax
// 3a: 48 85 c0                      testq   %rax, %rax
// 3d: 7e 58                         jle     0x97 <_JIT_ENTRY+0x97>
// 3f: 85 c0                         testl   %eax, %eax
// 41: 79 7a                         jns     0xbd <_JIT_ENTRY+0xbd>
// 43: e9 87 00 00 00                jmp     0xcf <_JIT_ENTRY+0xcf>
// 48: 49 29 de                      subq    %rbx, %r14
// 4b: 49 83 c6 b8                   addq    $-0x48, %r14
// 4f: 49 c1 ee 03                   shrq    $0x3, %r14
// 53: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 57: 48 8b 03                      movq    (%rbx), %rax
// 5a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005c:  R_X86_64_64  _JIT_TARGET
// 64: 89 c9                         movl    %ecx, %ecx
// 66: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 6a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 70: 48 83 c4 08                   addq    $0x8, %rsp
// 74: 5b                            popq    %rbx
// 75: 41 5c                         popq    %r12
// 77: 41 5d                         popq    %r13
// 79: 41 5e                         popq    %r14
// 7b: 41 5f                         popq    %r15
// 7d: 5d                            popq    %rbp
// 7e: c3                            retq
// 7f: 89 45 00                      movl    %eax, (%rbp)
// 82: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000084:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 8c: ff d0                         callq   *%rax
// 8e: 49 8b 04 24                   movq    (%r12), %rax
// 92: 48 85 c0                      testq   %rax, %rax
// 95: 7f a8                         jg      0x3f <_JIT_ENTRY+0x3f>
// 97: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000099:  R_X86_64_64  .rodata.str1.1
// a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a3:  R_X86_64_64  _Py_NegativeRefcount
// ab: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// b0: 4c 89 e2                      movq    %r12, %rdx
// b3: ff d0                         callq   *%rax
// b5: 49 8b 04 24                   movq    (%r12), %rax
// b9: 85 c0                         testl   %eax, %eax
// bb: 78 12                         js      0xcf <_JIT_ENTRY+0xcf>
// bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bf:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c7: ff d0                         callq   *%rax
// c9: 49 ff 0c 24                   decq    (%r12)
// cd: 74 77                         je      0x146 <_JIT_ENTRY+0x146>
// cf: 49 89 6e f8                   movq    %rbp, -0x8(%r14)
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _JIT_OPARG
// dd: a8 01                         testb   $0x1, %al
// df: 74 07                         je      0xe8 <_JIT_ENTRY+0xe8>
// e1: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// e8: 83 e0 01                      andl    $0x1, %eax
// eb: 4d 8b 64 c6 f8                movq    -0x8(%r14,%rax,8), %r12
// f0: 41 8b 45 00                   movl    (%r13), %eax
// f4: ff c0                         incl    %eax
// f6: 74 10                         je      0x108 <_JIT_ENTRY+0x108>
// f8: 41 89 45 00                   movl    %eax, (%r13)
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 106: ff d0                         callq   *%rax
// 108: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010a:  R_X86_64_64  _JIT_OPARG
// 112: 83 e0 01                      andl    $0x1, %eax
// 115: 4d 89 6c c6 f8                movq    %r13, -0x8(%r14,%rax,8)
// 11a: 4d 89 24 c6                   movq    %r12, (%r14,%rax,8)
// 11e: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 122: 48 83 c6 08                   addq    $0x8, %rsi
// 126: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000128:  R_X86_64_64  _JIT_CONTINUE
// 130: 48 89 df                      movq    %rbx, %rdi
// 133: 4c 89 fa                      movq    %r15, %rdx
// 136: 48 83 c4 08                   addq    $0x8, %rsp
// 13a: 5b                            popq    %rbx
// 13b: 41 5c                         popq    %r12
// 13d: 41 5d                         popq    %r13
// 13f: 41 5e                         popq    %r14
// 141: 41 5f                         popq    %r15
// 143: 5d                            popq    %rbp
// 144: ff e0                         jmpq    *%rax
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_Dealloc
// 150: 4c 89 e7                      movq    %r12, %rdi
// 153: ff d0                         callq   *%rax
// 155: 49 89 6e f8                   movq    %rbp, -0x8(%r14)
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  _JIT_OPARG
// 163: a8 01                         testb   $0x1, %al
// 165: 0f 85 76 ff ff ff             jne     0xe1 <_JIT_ENTRY+0xe1>
// 16b: e9 78 ff ff ff                jmp     0xe8 <_JIT_ENTRY+0xe8>
// 170: 
static const unsigned char _LOAD_ATTR_SLOTplus_LOAD_ATTR_METHOD_WITH_VALUES_code_body[369] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x0f, 0xb7, 0xc5, 0x49, 0x8b, 0x2c, 0x04, 0x48, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x89, 0xd7, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x49, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x58, 0x85, 0xc0, 0x79, 0x7a, 0xe9, 0x87, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xa8, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x77, 0x49, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x4d, 0x8b, 0x64, 0xc6, 0xf8, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x4d, 0x89, 0x6c, 0xc6, 0xf8, 0x4d, 0x89, 0x24, 0xc6, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x76, 0xff, 0xff, 0xff, 0xe9, 0x78, 0xff, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_LOAD_ATTR_METHOD_WITH_VALUES_code_holes[13] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x99, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xa3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xbf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x10a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x128, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_LOAD_ATTR_METHOD_WITH_VALUES_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_LOAD_ATTR_METHOD_WITH_VALUES_data_holes[1];

// _LOAD_ATTR_SLOTplus_LOAD_ATTR_MODULE
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_LOAD_ATTR_MODULE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 26: 4d 85 ed                      testq   %r13, %r13
// 29: 0f 84 e3 00 00 00             je      0x112 <_JIT_ENTRY+0x112>
// 2f: 49 89 d7                      movq    %rdx, %r15
// 32: 41 8b 45 00                   movl    (%r13), %eax
// 36: ff c0                         incl    %eax
// 38: 75 0f                         jne     0x49 <_JIT_ENTRY+0x49>
// 3a: 49 8b 04 24                   movq    (%r12), %rax
// 3e: 48 85 c0                      testq   %rax, %rax
// 41: 7e 1f                         jle     0x62 <_JIT_ENTRY+0x62>
// 43: 85 c0                         testl   %eax, %eax
// 45: 79 41                         jns     0x88 <_JIT_ENTRY+0x88>
// 47: eb 55                         jmp     0x9e <_JIT_ENTRY+0x9e>
// 49: 41 89 45 00                   movl    %eax, (%r13)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 57: ff d0                         callq   *%rax
// 59: 49 8b 04 24                   movq    (%r12), %rax
// 5d: 48 85 c0                      testq   %rax, %rax
// 60: 7f e1                         jg      0x43 <_JIT_ENTRY+0x43>
// 62: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000064:  R_X86_64_64  .rodata.str1.1
// 6c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006e:  R_X86_64_64  _Py_NegativeRefcount
// 76: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 7b: 4c 89 e2                      movq    %r12, %rdx
// 7e: ff d0                         callq   *%rax
// 80: 49 8b 04 24                   movq    (%r12), %rax
// 84: 85 c0                         testl   %eax, %eax
// 86: 78 16                         js      0x9e <_JIT_ENTRY+0x9e>
// 88: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 92: ff d0                         callq   *%rax
// 94: 49 ff 0c 24                   decq    (%r12)
// 98: 0f 84 5a 01 00 00             je      0x1f8 <_JIT_ENTRY+0x1f8>
// 9e: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: a8 01                         testb   $0x1, %al
// ae: 74 07                         je      0xb7 <_JIT_ENTRY+0xb7>
// b0: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// b7: 83 e0 01                      andl    $0x1, %eax
// ba: 4d 8b 64 c6 f8                movq    -0x8(%r14,%rax,8), %r12
// bf: 49 8b 4c 24 10                movq    0x10(%r12), %rcx
// c4: 48 8b 51 20                   movq    0x20(%rcx), %rdx
// c8: 0f b6 4a 09                   movzbl  0x9(%rdx), %ecx
// cc: be 01 00 00 00                movl    $0x1, %esi
// d1: 48 d3 e6                      shlq    %cl, %rsi
// d4: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// d8: 48 01 d6                      addq    %rdx, %rsi
// db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000dd:  R_X86_64_64  _JIT_OPERAND
// e5: 0f b7 c0                      movzwl  %ax, %eax
// e8: 48 c1 e0 04                   shlq    $0x4, %rax
// ec: 48 8b 6c 30 28                movq    0x28(%rax,%rsi), %rbp
// f1: 48 85 ed                      testq   %rbp, %rbp
// f4: 74 19                         je      0x10f <_JIT_ENTRY+0x10f>
// f6: 8b 45 00                      movl    (%rbp), %eax
// f9: ff c0                         incl    %eax
// fb: 75 4c                         jne     0x149 <_JIT_ENTRY+0x149>
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7e 5b                         jle     0x161 <_JIT_ENTRY+0x161>
// 106: 85 c0                         testl   %eax, %eax
// 108: 79 7d                         jns     0x187 <_JIT_ENTRY+0x187>
// 10a: e9 99 00 00 00                jmp     0x1a8 <_JIT_ENTRY+0x1a8>
// 10f: 4d 89 ee                      movq    %r13, %r14
// 112: 49 29 de                      subq    %rbx, %r14
// 115: 49 83 c6 b8                   addq    $-0x48, %r14
// 119: 49 c1 ee 03                   shrq    $0x3, %r14
// 11d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 121: 48 8b 03                      movq    (%rbx), %rax
// 124: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000126:  R_X86_64_64  _JIT_TARGET
// 12e: 89 c9                         movl    %ecx, %ecx
// 130: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 134: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 13a: 48 83 c4 08                   addq    $0x8, %rsp
// 13e: 5b                            popq    %rbx
// 13f: 41 5c                         popq    %r12
// 141: 41 5d                         popq    %r13
// 143: 41 5e                         popq    %r14
// 145: 41 5f                         popq    %r15
// 147: 5d                            popq    %rbp
// 148: c3                            retq
// 149: 89 45 00                      movl    %eax, (%rbp)
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 156: ff d0                         callq   *%rax
// 158: 49 8b 04 24                   movq    (%r12), %rax
// 15c: 48 85 c0                      testq   %rax, %rax
// 15f: 7f a5                         jg      0x106 <_JIT_ENTRY+0x106>
// 161: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000163:  R_X86_64_64  .rodata.str1.1
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_NegativeRefcount
// 175: be 97 06 00 00                movl    $0x697, %esi            # imm = 0x697
// 17a: 4c 89 e2                      movq    %r12, %rdx
// 17d: ff d0                         callq   *%rax
// 17f: 49 8b 04 24                   movq    (%r12), %rax
// 183: 85 c0                         testl   %eax, %eax
// 185: 78 21                         js      0x1a8 <_JIT_ENTRY+0x1a8>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 191: ff d0                         callq   *%rax
// 193: 49 ff 0c 24                   decq    (%r12)
// 197: 75 0f                         jne     0x1a8 <_JIT_ENTRY+0x1a8>
// 199: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019b:  R_X86_64_64  _Py_Dealloc
// 1a3: 4c 89 e7                      movq    %r12, %rdi
// 1a6: ff d0                         callq   *%rax
// 1a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001aa:  R_X86_64_64  _JIT_OPARG
// 1b2: 83 e0 01                      andl    $0x1, %eax
// 1b5: 49 89 6c c6 f8                movq    %rbp, -0x8(%r14,%rax,8)
// 1ba: 74 08                         je      0x1c4 <_JIT_ENTRY+0x1c4>
// 1bc: 49 c7 45 00 00 00 00 00       movq    $0x0, (%r13)
// 1c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c6:  R_X86_64_64  _JIT_OPARG
// 1ce: 83 e0 01                      andl    $0x1, %eax
// 1d1: 48 01 c0                      addq    %rax, %rax
// 1d4: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 1d8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001da:  R_X86_64_64  _JIT_CONTINUE
// 1e2: 48 89 df                      movq    %rbx, %rdi
// 1e5: 4c 89 fa                      movq    %r15, %rdx
// 1e8: 48 83 c4 08                   addq    $0x8, %rsp
// 1ec: 5b                            popq    %rbx
// 1ed: 41 5c                         popq    %r12
// 1ef: 41 5d                         popq    %r13
// 1f1: 41 5e                         popq    %r14
// 1f3: 41 5f                         popq    %r15
// 1f5: 5d                            popq    %rbp
// 1f6: ff e0                         jmpq    *%rax
// 1f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fa:  R_X86_64_64  _Py_Dealloc
// 202: 4c 89 e7                      movq    %r12, %rdi
// 205: ff d0                         callq   *%rax
// 207: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 20b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020d:  R_X86_64_64  _JIT_OPARG
// 215: a8 01                         testb   $0x1, %al
// 217: 0f 85 93 fe ff ff             jne     0xb0 <_JIT_ENTRY+0xb0>
// 21d: e9 95 fe ff ff                jmp     0xb7 <_JIT_ENTRY+0xb7>
// 222: 
static const unsigned char _LOAD_ATTR_SLOTplus_LOAD_ATTR_MODULE_code_body[547] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xe3, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1f, 0x85, 0xc0, 0x79, 0x41, 0xeb, 0x55, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x5a, 0x01, 0x00, 0x00, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x4d, 0x8b, 0x64, 0xc6, 0xf8, 0x49, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x8b, 0x51, 0x20, 0x0f, 0xb6, 0x4a, 0x09, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x48, 0xd3, 0xe6, 0x4d, 0x8d, 0x2c, 0xc6, 0x48, 0x01, 0xd6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x04, 0x48, 0x8b, 0x6c, 0x30, 0x28, 0x48, 0x85, 0xed, 0x74, 0x19, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x4c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x5b, 0x85, 0xc0, 0x79, 0x7d, 0xe9, 0x99, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xa5, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x97, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x89, 0x6c, 0xc6, 0xf8, 0x74, 0x08, 0x49, 0xc7, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x48, 0x01, 0xc0, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x93, 0xfe, 0xff, 0xff, 0xe9, 0x95, 0xfe, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_LOAD_ATTR_MODULE_code_holes[19] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x64, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xdd, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x126, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1aa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c6, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1da, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1fa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x20d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_LOAD_ATTR_MODULE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_LOAD_ATTR_MODULE_data_holes[1];

// _LOAD_ATTR_SLOTplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 41 0f b7 c5                   movzwl  %r13w, %eax
// 23: 49 8b 2c 04                   movq    (%r12,%rax), %rbp
// 27: 48 85 ed                      testq   %rbp, %rbp
// 2a: 74 1c                         je      0x48 <_JIT_ENTRY+0x48>
// 2c: 49 89 d7                      movq    %rdx, %r15
// 2f: 8b 45 00                      movl    (%rbp), %eax
// 32: ff c0                         incl    %eax
// 34: 75 49                         jne     0x7f <_JIT_ENTRY+0x7f>
// 36: 49 8b 04 24                   movq    (%r12), %rax
// 3a: 48 85 c0                      testq   %rax, %rax
// 3d: 7e 58                         jle     0x97 <_JIT_ENTRY+0x97>
// 3f: 85 c0                         testl   %eax, %eax
// 41: 79 7a                         jns     0xbd <_JIT_ENTRY+0xbd>
// 43: e9 8b 00 00 00                jmp     0xd3 <_JIT_ENTRY+0xd3>
// 48: 49 29 de                      subq    %rbx, %r14
// 4b: 49 83 c6 b8                   addq    $-0x48, %r14
// 4f: 49 c1 ee 03                   shrq    $0x3, %r14
// 53: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 57: 48 8b 03                      movq    (%rbx), %rax
// 5a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005c:  R_X86_64_64  _JIT_TARGET
// 64: 89 c9                         movl    %ecx, %ecx
// 66: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 6a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 70: 48 83 c4 08                   addq    $0x8, %rsp
// 74: 5b                            popq    %rbx
// 75: 41 5c                         popq    %r12
// 77: 41 5d                         popq    %r13
// 79: 41 5e                         popq    %r14
// 7b: 41 5f                         popq    %r15
// 7d: 5d                            popq    %rbp
// 7e: c3                            retq
// 7f: 89 45 00                      movl    %eax, (%rbp)
// 82: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000084:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 8c: ff d0                         callq   *%rax
// 8e: 49 8b 04 24                   movq    (%r12), %rax
// 92: 48 85 c0                      testq   %rax, %rax
// 95: 7f a8                         jg      0x3f <_JIT_ENTRY+0x3f>
// 97: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000099:  R_X86_64_64  .rodata.str1.1
// a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a3:  R_X86_64_64  _Py_NegativeRefcount
// ab: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// b0: 4c 89 e2                      movq    %r12, %rdx
// b3: ff d0                         callq   *%rax
// b5: 49 8b 04 24                   movq    (%r12), %rax
// b9: 85 c0                         testl   %eax, %eax
// bb: 78 16                         js      0xd3 <_JIT_ENTRY+0xd3>
// bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bf:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c7: ff d0                         callq   *%rax
// c9: 49 ff 0c 24                   decq    (%r12)
// cd: 0f 84 b6 00 00 00             je      0x189 <_JIT_ENTRY+0x189>
// d3: 49 89 6e f8                   movq    %rbp, -0x8(%r14)
// d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d9:  R_X86_64_64  _JIT_OPARG
// e1: a8 01                         testb   $0x1, %al
// e3: 74 07                         je      0xec <_JIT_ENTRY+0xec>
// e5: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// ec: 83 e0 01                      andl    $0x1, %eax
// ef: 4d 8b 64 c6 f8                movq    -0x8(%r14,%rax,8), %r12
// f4: 49 8b 04 24                   movq    (%r12), %rax
// f8: 48 85 c0                      testq   %rax, %rax
// fb: 7e 06                         jle     0x103 <_JIT_ENTRY+0x103>
// fd: 85 c0                         testl   %eax, %eax
// ff: 79 28                         jns     0x129 <_JIT_ENTRY+0x129>
// 101: eb 38                         jmp     0x13b <_JIT_ENTRY+0x13b>
// 103: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000105:  R_X86_64_64  .rodata.str1.1
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_NegativeRefcount
// 117: be d9 09 00 00                movl    $0x9d9, %esi            # imm = 0x9D9
// 11c: 4c 89 e2                      movq    %r12, %rdx
// 11f: ff d0                         callq   *%rax
// 121: 49 8b 04 24                   movq    (%r12), %rax
// 125: 85 c0                         testl   %eax, %eax
// 127: 78 12                         js      0x13b <_JIT_ENTRY+0x13b>
// 129: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 133: ff d0                         callq   *%rax
// 135: 49 ff 0c 24                   decq    (%r12)
// 139: 74 78                         je      0x1b3 <_JIT_ENTRY+0x1b3>
// 13b: 41 8b 45 00                   movl    (%r13), %eax
// 13f: ff c0                         incl    %eax
// 141: 74 10                         je      0x153 <_JIT_ENTRY+0x153>
// 143: 41 89 45 00                   movl    %eax, (%r13)
// 147: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000149:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 151: ff d0                         callq   *%rax
// 153: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000155:  R_X86_64_64  _JIT_OPARG
// 15d: 83 e0 01                      andl    $0x1, %eax
// 160: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 164: 4d 89 6c c6 f8                movq    %r13, -0x8(%r14,%rax,8)
// 169: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016b:  R_X86_64_64  _JIT_CONTINUE
// 173: 48 89 df                      movq    %rbx, %rdi
// 176: 4c 89 fa                      movq    %r15, %rdx
// 179: 48 83 c4 08                   addq    $0x8, %rsp
// 17d: 5b                            popq    %rbx
// 17e: 41 5c                         popq    %r12
// 180: 41 5d                         popq    %r13
// 182: 41 5e                         popq    %r14
// 184: 41 5f                         popq    %r15
// 186: 5d                            popq    %rbp
// 187: ff e0                         jmpq    *%rax
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_Dealloc
// 193: 4c 89 e7                      movq    %r12, %rdi
// 196: ff d0                         callq   *%rax
// 198: 49 89 6e f8                   movq    %rbp, -0x8(%r14)
// 19c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019e:  R_X86_64_64  _JIT_OPARG
// 1a6: a8 01                         testb   $0x1, %al
// 1a8: 0f 85 37 ff ff ff             jne     0xe5 <_JIT_ENTRY+0xe5>
// 1ae: e9 39 ff ff ff                jmp     0xec <_JIT_ENTRY+0xec>
// 1b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b5:  R_X86_64_64  _Py_Dealloc
// 1bd: 4c 89 e7                      movq    %r12, %rdi
// 1c0: ff d0                         callq   *%rax
// 1c2: 41 8b 45 00                   movl    (%r13), %eax
// 1c6: ff c0                         incl    %eax
// 1c8: 0f 85 75 ff ff ff             jne     0x143 <_JIT_ENTRY+0x143>
// 1ce: eb 83                         jmp     0x153 <_JIT_ENTRY+0x153>
// 1d0: 
static const unsigned char _LOAD_ATTR_SLOTplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT_code_body[465] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x0f, 0xb7, 0xc5, 0x49, 0x8b, 0x2c, 0x04, 0x48, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x89, 0xd7, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x49, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x58, 0x85, 0xc0, 0x79, 0x7a, 0xe9, 0x8b, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xa8, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xb6, 0x00, 0x00, 0x00, 0x49, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x4d, 0x8b, 0x64, 0xc6, 0xf8, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd9, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x78, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x4d, 0x89, 0x6c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x37, 0xff, 0xff, 0xff, 0xe9, 0x39, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x0f, 0x85, 0x75, 0xff, 0xff, 0xff, 0xeb, 0x83};
static const Hole _LOAD_ATTR_SLOTplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT_code_holes[17] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x99, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xa3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xbf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x149, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x155, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x16b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT_data_holes[1];

// _LOAD_ATTR_SLOTplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 41 0f b7 c5                   movzwl  %r13w, %eax
// 23: 49 8b 2c 04                   movq    (%r12,%rax), %rbp
// 27: 48 85 ed                      testq   %rbp, %rbp
// 2a: 74 1c                         je      0x48 <_JIT_ENTRY+0x48>
// 2c: 49 89 d7                      movq    %rdx, %r15
// 2f: 8b 45 00                      movl    (%rbp), %eax
// 32: ff c0                         incl    %eax
// 34: 75 49                         jne     0x7f <_JIT_ENTRY+0x7f>
// 36: 49 8b 04 24                   movq    (%r12), %rax
// 3a: 48 85 c0                      testq   %rax, %rax
// 3d: 7e 58                         jle     0x97 <_JIT_ENTRY+0x97>
// 3f: 85 c0                         testl   %eax, %eax
// 41: 79 7a                         jns     0xbd <_JIT_ENTRY+0xbd>
// 43: e9 8b 00 00 00                jmp     0xd3 <_JIT_ENTRY+0xd3>
// 48: 49 29 de                      subq    %rbx, %r14
// 4b: 49 83 c6 b8                   addq    $-0x48, %r14
// 4f: 49 c1 ee 03                   shrq    $0x3, %r14
// 53: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 57: 48 8b 03                      movq    (%rbx), %rax
// 5a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005c:  R_X86_64_64  _JIT_TARGET
// 64: 89 c9                         movl    %ecx, %ecx
// 66: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 6a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 70: 48 83 c4 08                   addq    $0x8, %rsp
// 74: 5b                            popq    %rbx
// 75: 41 5c                         popq    %r12
// 77: 41 5d                         popq    %r13
// 79: 41 5e                         popq    %r14
// 7b: 41 5f                         popq    %r15
// 7d: 5d                            popq    %rbp
// 7e: c3                            retq
// 7f: 89 45 00                      movl    %eax, (%rbp)
// 82: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000084:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 8c: ff d0                         callq   *%rax
// 8e: 49 8b 04 24                   movq    (%r12), %rax
// 92: 48 85 c0                      testq   %rax, %rax
// 95: 7f a8                         jg      0x3f <_JIT_ENTRY+0x3f>
// 97: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000099:  R_X86_64_64  .rodata.str1.1
// a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a3:  R_X86_64_64  _Py_NegativeRefcount
// ab: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// b0: 4c 89 e2                      movq    %r12, %rdx
// b3: ff d0                         callq   *%rax
// b5: 49 8b 04 24                   movq    (%r12), %rax
// b9: 85 c0                         testl   %eax, %eax
// bb: 78 16                         js      0xd3 <_JIT_ENTRY+0xd3>
// bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bf:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c7: ff d0                         callq   *%rax
// c9: 49 ff 0c 24                   decq    (%r12)
// cd: 0f 84 b6 00 00 00             je      0x189 <_JIT_ENTRY+0x189>
// d3: 49 89 6e f8                   movq    %rbp, -0x8(%r14)
// d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d9:  R_X86_64_64  _JIT_OPARG
// e1: a8 01                         testb   $0x1, %al
// e3: 74 07                         je      0xec <_JIT_ENTRY+0xec>
// e5: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// ec: 83 e0 01                      andl    $0x1, %eax
// ef: 4d 8b 64 c6 f8                movq    -0x8(%r14,%rax,8), %r12
// f4: 49 8b 04 24                   movq    (%r12), %rax
// f8: 48 85 c0                      testq   %rax, %rax
// fb: 7e 06                         jle     0x103 <_JIT_ENTRY+0x103>
// fd: 85 c0                         testl   %eax, %eax
// ff: 79 28                         jns     0x129 <_JIT_ENTRY+0x129>
// 101: eb 38                         jmp     0x13b <_JIT_ENTRY+0x13b>
// 103: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000105:  R_X86_64_64  .rodata.str1.1
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_NegativeRefcount
// 117: be c8 09 00 00                movl    $0x9c8, %esi            # imm = 0x9C8
// 11c: 4c 89 e2                      movq    %r12, %rdx
// 11f: ff d0                         callq   *%rax
// 121: 49 8b 04 24                   movq    (%r12), %rax
// 125: 85 c0                         testl   %eax, %eax
// 127: 78 12                         js      0x13b <_JIT_ENTRY+0x13b>
// 129: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 133: ff d0                         callq   *%rax
// 135: 49 ff 0c 24                   decq    (%r12)
// 139: 74 78                         je      0x1b3 <_JIT_ENTRY+0x1b3>
// 13b: 41 8b 45 00                   movl    (%r13), %eax
// 13f: ff c0                         incl    %eax
// 141: 74 10                         je      0x153 <_JIT_ENTRY+0x153>
// 143: 41 89 45 00                   movl    %eax, (%r13)
// 147: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000149:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 151: ff d0                         callq   *%rax
// 153: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000155:  R_X86_64_64  _JIT_OPARG
// 15d: 83 e0 01                      andl    $0x1, %eax
// 160: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 164: 4d 89 6c c6 f8                movq    %r13, -0x8(%r14,%rax,8)
// 169: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016b:  R_X86_64_64  _JIT_CONTINUE
// 173: 48 89 df                      movq    %rbx, %rdi
// 176: 4c 89 fa                      movq    %r15, %rdx
// 179: 48 83 c4 08                   addq    $0x8, %rsp
// 17d: 5b                            popq    %rbx
// 17e: 41 5c                         popq    %r12
// 180: 41 5d                         popq    %r13
// 182: 41 5e                         popq    %r14
// 184: 41 5f                         popq    %r15
// 186: 5d                            popq    %rbp
// 187: ff e0                         jmpq    *%rax
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_Dealloc
// 193: 4c 89 e7                      movq    %r12, %rdi
// 196: ff d0                         callq   *%rax
// 198: 49 89 6e f8                   movq    %rbp, -0x8(%r14)
// 19c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019e:  R_X86_64_64  _JIT_OPARG
// 1a6: a8 01                         testb   $0x1, %al
// 1a8: 0f 85 37 ff ff ff             jne     0xe5 <_JIT_ENTRY+0xe5>
// 1ae: e9 39 ff ff ff                jmp     0xec <_JIT_ENTRY+0xec>
// 1b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b5:  R_X86_64_64  _Py_Dealloc
// 1bd: 4c 89 e7                      movq    %r12, %rdi
// 1c0: ff d0                         callq   *%rax
// 1c2: 41 8b 45 00                   movl    (%r13), %eax
// 1c6: ff c0                         incl    %eax
// 1c8: 0f 85 75 ff ff ff             jne     0x143 <_JIT_ENTRY+0x143>
// 1ce: eb 83                         jmp     0x153 <_JIT_ENTRY+0x153>
// 1d0: 
static const unsigned char _LOAD_ATTR_SLOTplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES_code_body[465] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x0f, 0xb7, 0xc5, 0x49, 0x8b, 0x2c, 0x04, 0x48, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x89, 0xd7, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x49, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x58, 0x85, 0xc0, 0x79, 0x7a, 0xe9, 0x8b, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xa8, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xb6, 0x00, 0x00, 0x00, 0x49, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x4d, 0x8b, 0x64, 0xc6, 0xf8, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc8, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x78, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x4d, 0x89, 0x6c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x37, 0xff, 0xff, 0xff, 0xe9, 0x39, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x0f, 0x85, 0x75, 0xff, 0xff, 0xff, 0xeb, 0x83};
static const Hole _LOAD_ATTR_SLOTplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES_code_holes[17] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x99, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xa3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xbf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x149, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x155, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x16b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES_data_holes[1];

// _LOAD_ATTR_SLOTplus_LOAD_ATTR_SLOT
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_LOAD_ATTR_SLOT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 26: 4d 85 ed                      testq   %r13, %r13
// 29: 0f 84 c6 00 00 00             je      0xf5 <_JIT_ENTRY+0xf5>
// 2f: 49 89 d7                      movq    %rdx, %r15
// 32: 41 8b 45 00                   movl    (%r13), %eax
// 36: ff c0                         incl    %eax
// 38: 75 0f                         jne     0x49 <_JIT_ENTRY+0x49>
// 3a: 49 8b 04 24                   movq    (%r12), %rax
// 3e: 48 85 c0                      testq   %rax, %rax
// 41: 7e 1f                         jle     0x62 <_JIT_ENTRY+0x62>
// 43: 85 c0                         testl   %eax, %eax
// 45: 79 41                         jns     0x88 <_JIT_ENTRY+0x88>
// 47: eb 55                         jmp     0x9e <_JIT_ENTRY+0x9e>
// 49: 41 89 45 00                   movl    %eax, (%r13)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 57: ff d0                         callq   *%rax
// 59: 49 8b 04 24                   movq    (%r12), %rax
// 5d: 48 85 c0                      testq   %rax, %rax
// 60: 7f e1                         jg      0x43 <_JIT_ENTRY+0x43>
// 62: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000064:  R_X86_64_64  .rodata.str1.1
// 6c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006e:  R_X86_64_64  _Py_NegativeRefcount
// 76: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 7b: 4c 89 e2                      movq    %r12, %rdx
// 7e: ff d0                         callq   *%rax
// 80: 49 8b 04 24                   movq    (%r12), %rax
// 84: 85 c0                         testl   %eax, %eax
// 86: 78 16                         js      0x9e <_JIT_ENTRY+0x9e>
// 88: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 92: ff d0                         callq   *%rax
// 94: 49 ff 0c 24                   decq    (%r12)
// 98: 0f 84 3d 01 00 00             je      0x1db <_JIT_ENTRY+0x1db>
// 9e: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: a8 01                         testb   $0x1, %al
// ae: 74 07                         je      0xb7 <_JIT_ENTRY+0xb7>
// b0: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// b7: 83 e0 01                      andl    $0x1, %eax
// ba: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// be: 4d 8b 64 c6 f8                movq    -0x8(%r14,%rax,8), %r12
// c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c5:  R_X86_64_64  _JIT_OPERAND
// cd: 0f b7 c0                      movzwl  %ax, %eax
// d0: 49 8b 2c 04                   movq    (%r12,%rax), %rbp
// d4: 48 85 ed                      testq   %rbp, %rbp
// d7: 74 19                         je      0xf2 <_JIT_ENTRY+0xf2>
// d9: 8b 45 00                      movl    (%rbp), %eax
// dc: ff c0                         incl    %eax
// de: 75 4c                         jne     0x12c <_JIT_ENTRY+0x12c>
// e0: 49 8b 04 24                   movq    (%r12), %rax
// e4: 48 85 c0                      testq   %rax, %rax
// e7: 7e 5b                         jle     0x144 <_JIT_ENTRY+0x144>
// e9: 85 c0                         testl   %eax, %eax
// eb: 79 7d                         jns     0x16a <_JIT_ENTRY+0x16a>
// ed: e9 99 00 00 00                jmp     0x18b <_JIT_ENTRY+0x18b>
// f2: 4d 89 ee                      movq    %r13, %r14
// f5: 49 29 de                      subq    %rbx, %r14
// f8: 49 83 c6 b8                   addq    $-0x48, %r14
// fc: 49 c1 ee 03                   shrq    $0x3, %r14
// 100: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 104: 48 8b 03                      movq    (%rbx), %rax
// 107: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000109:  R_X86_64_64  _JIT_TARGET
// 111: 89 c9                         movl    %ecx, %ecx
// 113: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 117: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11d: 48 83 c4 08                   addq    $0x8, %rsp
// 121: 5b                            popq    %rbx
// 122: 41 5c                         popq    %r12
// 124: 41 5d                         popq    %r13
// 126: 41 5e                         popq    %r14
// 128: 41 5f                         popq    %r15
// 12a: 5d                            popq    %rbp
// 12b: c3                            retq
// 12c: 89 45 00                      movl    %eax, (%rbp)
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 139: ff d0                         callq   *%rax
// 13b: 49 8b 04 24                   movq    (%r12), %rax
// 13f: 48 85 c0                      testq   %rax, %rax
// 142: 7f a5                         jg      0xe9 <_JIT_ENTRY+0xe9>
// 144: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000146:  R_X86_64_64  .rodata.str1.1
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _Py_NegativeRefcount
// 158: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 15d: 4c 89 e2                      movq    %r12, %rdx
// 160: ff d0                         callq   *%rax
// 162: 49 8b 04 24                   movq    (%r12), %rax
// 166: 85 c0                         testl   %eax, %eax
// 168: 78 21                         js      0x18b <_JIT_ENTRY+0x18b>
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 174: ff d0                         callq   *%rax
// 176: 49 ff 0c 24                   decq    (%r12)
// 17a: 75 0f                         jne     0x18b <_JIT_ENTRY+0x18b>
// 17c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017e:  R_X86_64_64  _Py_Dealloc
// 186: 4c 89 e7                      movq    %r12, %rdi
// 189: ff d0                         callq   *%rax
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _JIT_OPARG
// 195: 83 e0 01                      andl    $0x1, %eax
// 198: 49 89 6c c6 f8                movq    %rbp, -0x8(%r14,%rax,8)
// 19d: 74 08                         je      0x1a7 <_JIT_ENTRY+0x1a7>
// 19f: 49 c7 45 00 00 00 00 00       movq    $0x0, (%r13)
// 1a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a9:  R_X86_64_64  _JIT_OPARG
// 1b1: 83 e0 01                      andl    $0x1, %eax
// 1b4: 48 01 c0                      addq    %rax, %rax
// 1b7: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 1bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bd:  R_X86_64_64  _JIT_CONTINUE
// 1c5: 48 89 df                      movq    %rbx, %rdi
// 1c8: 4c 89 fa                      movq    %r15, %rdx
// 1cb: 48 83 c4 08                   addq    $0x8, %rsp
// 1cf: 5b                            popq    %rbx
// 1d0: 41 5c                         popq    %r12
// 1d2: 41 5d                         popq    %r13
// 1d4: 41 5e                         popq    %r14
// 1d6: 41 5f                         popq    %r15
// 1d8: 5d                            popq    %rbp
// 1d9: ff e0                         jmpq    *%rax
// 1db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dd:  R_X86_64_64  _Py_Dealloc
// 1e5: 4c 89 e7                      movq    %r12, %rdi
// 1e8: ff d0                         callq   *%rax
// 1ea: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 1ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f0:  R_X86_64_64  _JIT_OPARG
// 1f8: a8 01                         testb   $0x1, %al
// 1fa: 0f 85 b0 fe ff ff             jne     0xb0 <_JIT_ENTRY+0xb0>
// 200: e9 b2 fe ff ff                jmp     0xb7 <_JIT_ENTRY+0xb7>
// 205: 
static const unsigned char _LOAD_ATTR_SLOTplus_LOAD_ATTR_SLOT_code_body[518] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xc6, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1f, 0x85, 0xc0, 0x79, 0x41, 0xeb, 0x55, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x3d, 0x01, 0x00, 0x00, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x4d, 0x8d, 0x2c, 0xc6, 0x4d, 0x8b, 0x64, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8b, 0x2c, 0x04, 0x48, 0x85, 0xed, 0x74, 0x19, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x4c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x5b, 0x85, 0xc0, 0x79, 0x7d, 0xe9, 0x99, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xa5, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x89, 0x6c, 0xc6, 0xf8, 0x74, 0x08, 0x49, 0xc7, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x48, 0x01, 0xc0, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0xb0, 0xfe, 0xff, 0xff, 0xe9, 0xb2, 0xfe, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_LOAD_ATTR_SLOT_code_holes[19] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x64, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xc5, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x109, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1a9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1bd, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1f0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_LOAD_ATTR_SLOT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_LOAD_ATTR_SLOT_data_holes[1];

// _LOAD_ATTR_SLOTplus_LOAD_ATTR_WITH_HINT
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_LOAD_ATTR_WITH_HINT.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 26: 4d 85 ed                      testq   %r13, %r13
// 29: 0f 84 35 01 00 00             je      0x164 <_JIT_ENTRY+0x164>
// 2f: 49 89 d7                      movq    %rdx, %r15
// 32: 41 8b 45 00                   movl    (%r13), %eax
// 36: ff c0                         incl    %eax
// 38: 75 0f                         jne     0x49 <_JIT_ENTRY+0x49>
// 3a: 49 8b 04 24                   movq    (%r12), %rax
// 3e: 48 85 c0                      testq   %rax, %rax
// 41: 7e 1f                         jle     0x62 <_JIT_ENTRY+0x62>
// 43: 85 c0                         testl   %eax, %eax
// 45: 79 41                         jns     0x88 <_JIT_ENTRY+0x88>
// 47: eb 60                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 49: 41 89 45 00                   movl    %eax, (%r13)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 57: ff d0                         callq   *%rax
// 59: 49 8b 04 24                   movq    (%r12), %rax
// 5d: 48 85 c0                      testq   %rax, %rax
// 60: 7f e1                         jg      0x43 <_JIT_ENTRY+0x43>
// 62: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000064:  R_X86_64_64  .rodata.str1.1
// 6c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006e:  R_X86_64_64  _Py_NegativeRefcount
// 76: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 7b: 4c 89 e2                      movq    %r12, %rdx
// 7e: ff d0                         callq   *%rax
// 80: 49 8b 04 24                   movq    (%r12), %rax
// 84: 85 c0                         testl   %eax, %eax
// 86: 78 21                         js      0xa9 <_JIT_ENTRY+0xa9>
// 88: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 92: ff d0                         callq   *%rax
// 94: 49 ff 0c 24                   decq    (%r12)
// 98: 75 0f                         jne     0xa9 <_JIT_ENTRY+0xa9>
// 9a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009c:  R_X86_64_64  _Py_Dealloc
// a4: 4c 89 e7                      movq    %r12, %rdi
// a7: ff d0                         callq   *%rax
// a9: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _JIT_OPARG
// b7: a8 01                         testb   $0x1, %al
// b9: 74 07                         je      0xc2 <_JIT_ENTRY+0xc2>
// bb: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// c2: 83 e0 01                      andl    $0x1, %eax
// c5: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// c9: 4d 8b 64 c6 f8                movq    -0x8(%r14,%rax,8), %r12
// ce: 49 8b 44 24 e8                movq    -0x18(%r12), %rax
// d3: 48 8b 40 20                   movq    0x20(%rax), %rax
// d7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d9:  R_X86_64_64  _JIT_OPERAND
// e1: 0f b7 c9                      movzwl  %cx, %ecx
// e4: 48 39 48 18                   cmpq    %rcx, 0x18(%rax)
// e8: 76 77                         jbe     0x161 <_JIT_ENTRY+0x161>
// ea: 48 8b 0b                      movq    (%rbx), %rcx
// ed: 48 8b 51 20                   movq    0x20(%rcx), %rdx
// f1: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000f3:  R_X86_64_64  _JIT_OPARG
// fb: 81 e6 fe ff 00 00             andl    $0xfffe, %esi           # imm = 0xFFFE
// 101: 0f b6 48 09                   movzbl  0x9(%rax), %ecx
// 105: bf 01 00 00 00                movl    $0x1, %edi
// 10a: 48 d3 e7                      shlq    %cl, %rdi
// 10d: 48 8b 4c b2 18                movq    0x18(%rdx,%rsi,4), %rcx
// 112: 80 78 0a 00                   cmpb    $0x0, 0xa(%rax)
// 116: 48 8d 44 38 20                leaq    0x20(%rax,%rdi), %rax
// 11b: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000011d:  R_X86_64_64  _JIT_OPERAND
// 125: 0f b7 d2                      movzwl  %dx, %edx
// 128: 74 2c                         je      0x156 <_JIT_ENTRY+0x156>
// 12a: 48 c1 e2 04                   shlq    $0x4, %rdx
// 12e: 48 39 0c 10                   cmpq    %rcx, (%rax,%rdx)
// 132: 75 2d                         jne     0x161 <_JIT_ENTRY+0x161>
// 134: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000136:  R_X86_64_64  _JIT_OPERAND
// 13e: 0f b7 c9                      movzwl  %cx, %ecx
// 141: 48 c1 e1 04                   shlq    $0x4, %rcx
// 145: 48 01 c8                      addq    %rcx, %rax
// 148: 48 83 c0 08                   addq    $0x8, %rax
// 14c: 48 8b 28                      movq    (%rax), %rbp
// 14f: 48 85 ed                      testq   %rbp, %rbp
// 152: 75 68                         jne     0x1bc <_JIT_ENTRY+0x1bc>
// 154: eb 0b                         jmp     0x161 <_JIT_ENTRY+0x161>
// 156: 48 8d 14 52                   leaq    (%rdx,%rdx,2), %rdx
// 15a: 48 39 4c d0 08                cmpq    %rcx, 0x8(%rax,%rdx,8)
// 15f: 74 3a                         je      0x19b <_JIT_ENTRY+0x19b>
// 161: 4d 89 ee                      movq    %r13, %r14
// 164: 49 29 de                      subq    %rbx, %r14
// 167: 49 83 c6 b8                   addq    $-0x48, %r14
// 16b: 49 c1 ee 03                   shrq    $0x3, %r14
// 16f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 173: 48 8b 03                      movq    (%rbx), %rax
// 176: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000178:  R_X86_64_64  _JIT_TARGET
// 180: 89 c9                         movl    %ecx, %ecx
// 182: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 186: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 18c: 48 83 c4 08                   addq    $0x8, %rsp
// 190: 5b                            popq    %rbx
// 191: 41 5c                         popq    %r12
// 193: 41 5d                         popq    %r13
// 195: 41 5e                         popq    %r14
// 197: 41 5f                         popq    %r15
// 199: 5d                            popq    %rbp
// 19a: c3                            retq
// 19b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000019d:  R_X86_64_64  _JIT_OPERAND
// 1a5: 0f b7 c9                      movzwl  %cx, %ecx
// 1a8: 48 8d 0c 49                   leaq    (%rcx,%rcx,2), %rcx
// 1ac: 48 8d 04 c8                   leaq    (%rax,%rcx,8), %rax
// 1b0: 48 83 c0 10                   addq    $0x10, %rax
// 1b4: 48 8b 28                      movq    (%rax), %rbp
// 1b7: 48 85 ed                      testq   %rbp, %rbp
// 1ba: 74 a5                         je      0x161 <_JIT_ENTRY+0x161>
// 1bc: 8b 45 00                      movl    (%rbp), %eax
// 1bf: ff c0                         incl    %eax
// 1c1: 75 0f                         jne     0x1d2 <_JIT_ENTRY+0x1d2>
// 1c3: 49 8b 04 24                   movq    (%r12), %rax
// 1c7: 48 85 c0                      testq   %rax, %rax
// 1ca: 7e 1e                         jle     0x1ea <_JIT_ENTRY+0x1ea>
// 1cc: 85 c0                         testl   %eax, %eax
// 1ce: 79 40                         jns     0x210 <_JIT_ENTRY+0x210>
// 1d0: eb 5f                         jmp     0x231 <_JIT_ENTRY+0x231>
// 1d2: 89 45 00                      movl    %eax, (%rbp)
// 1d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d7:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1df: ff d0                         callq   *%rax
// 1e1: 49 8b 04 24                   movq    (%r12), %rax
// 1e5: 48 85 c0                      testq   %rax, %rax
// 1e8: 7f e2                         jg      0x1cc <_JIT_ENTRY+0x1cc>
// 1ea: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ec:  R_X86_64_64  .rodata.str1.1
// 1f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f6:  R_X86_64_64  _Py_NegativeRefcount
// 1fe: be c3 06 00 00                movl    $0x6c3, %esi            # imm = 0x6C3
// 203: 4c 89 e2                      movq    %r12, %rdx
// 206: ff d0                         callq   *%rax
// 208: 49 8b 04 24                   movq    (%r12), %rax
// 20c: 85 c0                         testl   %eax, %eax
// 20e: 78 21                         js      0x231 <_JIT_ENTRY+0x231>
// 210: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000212:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 21a: ff d0                         callq   *%rax
// 21c: 49 ff 0c 24                   decq    (%r12)
// 220: 75 0f                         jne     0x231 <_JIT_ENTRY+0x231>
// 222: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000224:  R_X86_64_64  _Py_Dealloc
// 22c: 4c 89 e7                      movq    %r12, %rdi
// 22f: ff d0                         callq   *%rax
// 231: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000233:  R_X86_64_64  _JIT_OPARG
// 23b: 83 e0 01                      andl    $0x1, %eax
// 23e: 49 89 6c c6 f8                movq    %rbp, -0x8(%r14,%rax,8)
// 243: 74 08                         je      0x24d <_JIT_ENTRY+0x24d>
// 245: 49 c7 45 00 00 00 00 00       movq    $0x0, (%r13)
// 24d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024f:  R_X86_64_64  _JIT_OPARG
// 257: 83 e0 01                      andl    $0x1, %eax
// 25a: 48 01 c0                      addq    %rax, %rax
// 25d: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 261: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000263:  R_X86_64_64  _JIT_CONTINUE
// 26b: 48 89 df                      movq    %rbx, %rdi
// 26e: 4c 89 fa                      movq    %r15, %rdx
// 271: 48 83 c4 08                   addq    $0x8, %rsp
// 275: 5b                            popq    %rbx
// 276: 41 5c                         popq    %r12
// 278: 41 5d                         popq    %r13
// 27a: 41 5e                         popq    %r14
// 27c: 41 5f                         popq    %r15
// 27e: 5d                            popq    %rbp
// 27f: ff e0                         jmpq    *%rax
// 281: 
static const unsigned char _LOAD_ATTR_SLOTplus_LOAD_ATTR_WITH_HINT_code_body[642] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x35, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1f, 0x85, 0xc0, 0x79, 0x41, 0xeb, 0x60, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x4d, 0x8d, 0x2c, 0xc6, 0x4d, 0x8b, 0x64, 0xc6, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0xe8, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x39, 0x48, 0x18, 0x76, 0x77, 0x48, 0x8b, 0x0b, 0x48, 0x8b, 0x51, 0x20, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe6, 0xfe, 0xff, 0x00, 0x00, 0x0f, 0xb6, 0x48, 0x09, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x48, 0xd3, 0xe7, 0x48, 0x8b, 0x4c, 0xb2, 0x18, 0x80, 0x78, 0x0a, 0x00, 0x48, 0x8d, 0x44, 0x38, 0x20, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x74, 0x2c, 0x48, 0xc1, 0xe2, 0x04, 0x48, 0x39, 0x0c, 0x10, 0x75, 0x2d, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0xc1, 0xe1, 0x04, 0x48, 0x01, 0xc8, 0x48, 0x83, 0xc0, 0x08, 0x48, 0x8b, 0x28, 0x48, 0x85, 0xed, 0x75, 0x68, 0xeb, 0x0b, 0x48, 0x8d, 0x14, 0x52, 0x48, 0x39, 0x4c, 0xd0, 0x08, 0x74, 0x3a, 0x4d, 0x89, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x8d, 0x0c, 0x49, 0x48, 0x8d, 0x04, 0xc8, 0x48, 0x83, 0xc0, 0x10, 0x48, 0x8b, 0x28, 0x48, 0x85, 0xed, 0x74, 0xa5, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x5f, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc3, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x89, 0x6c, 0xc6, 0xf8, 0x74, 0x08, 0x49, 0xc7, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x48, 0x01, 0xc0, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_ATTR_SLOTplus_LOAD_ATTR_WITH_HINT_code_holes[22] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x64, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x136, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x178, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1ec, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x224, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x233, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x24f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_LOAD_ATTR_WITH_HINT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_LOAD_ATTR_WITH_HINT_data_holes[1];

// _LOAD_ATTR_SLOTplus_LOAD_BUILD_CLASS
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_LOAD_BUILD_CLASS.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 48 83 ec 10                   subq    $0x10, %rsp
// d: 49 89 f6                      movq    %rsi, %r14
// 10: 48 89 fb                      movq    %rdi, %rbx
// 13: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  _JIT_OPERAND
// 21: 0f b7 c0                      movzwl  %ax, %eax
// 24: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 28: 4d 85 ed                      testq   %r13, %r13
// 2b: 74 1d                         je      0x4a <_JIT_ENTRY+0x4a>
// 2d: 49 89 d7                      movq    %rdx, %r15
// 30: 41 8b 45 00                   movl    (%r13), %eax
// 34: ff c0                         incl    %eax
// 36: 75 3f                         jne     0x77 <_JIT_ENTRY+0x77>
// 38: 49 8b 04 24                   movq    (%r12), %rax
// 3c: 48 85 c0                      testq   %rax, %rax
// 3f: 7e 4f                         jle     0x90 <_JIT_ENTRY+0x90>
// 41: 85 c0                         testl   %eax, %eax
// 43: 79 71                         jns     0xb6 <_JIT_ENTRY+0xb6>
// 45: e9 82 00 00 00                jmp     0xcc <_JIT_ENTRY+0xcc>
// 4a: 49 29 de                      subq    %rbx, %r14
// 4d: 49 83 c6 b8                   addq    $-0x48, %r14
// 51: 49 c1 ee 03                   shrq    $0x3, %r14
// 55: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 59: 48 8b 03                      movq    (%rbx), %rax
// 5c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005e:  R_X86_64_64  _JIT_TARGET
// 66: 89 c9                         movl    %ecx, %ecx
// 68: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 6c: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 72: e9 21 01 00 00                jmp     0x198 <_JIT_ENTRY+0x198>
// 77: 41 89 45 00                   movl    %eax, (%r13)
// 7b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007d:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 85: ff d0                         callq   *%rax
// 87: 49 8b 04 24                   movq    (%r12), %rax
// 8b: 48 85 c0                      testq   %rax, %rax
// 8e: 7f b1                         jg      0x41 <_JIT_ENTRY+0x41>
// 90: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000092:  R_X86_64_64  .rodata.str1.1
// 9a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009c:  R_X86_64_64  _Py_NegativeRefcount
// a4: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a9: 4c 89 e2                      movq    %r12, %rdx
// ac: ff d0                         callq   *%rax
// ae: 49 8b 04 24                   movq    (%r12), %rax
// b2: 85 c0                         testl   %eax, %eax
// b4: 78 16                         js      0xcc <_JIT_ENTRY+0xcc>
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c0: ff d0                         callq   *%rax
// c2: 49 ff 0c 24                   decq    (%r12)
// c6: 0f 84 da 00 00 00             je      0x1a6 <_JIT_ENTRY+0x1a6>
// cc: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d2:  R_X86_64_64  _JIT_OPARG
// da: a8 01                         testb   $0x1, %al
// dc: 74 07                         je      0xe5 <_JIT_ENTRY+0xe5>
// de: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// e5: 48 8b 7b 20                   movq    0x20(%rbx), %rdi
// e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000eb:  R_X86_64_64  PyMapping_GetOptionalItem
// f3: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000f5:  R_X86_64_64  _PyRuntime
// fd: 48 81 c6 40 a9 00 00          addq    $0xa940, %rsi           # imm = 0xA940
// 104: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 109: ff d0                         callq   *%rax
// 10b: 85 c0                         testl   %eax, %eax
// 10d: 78 68                         js      0x177 <_JIT_ENTRY+0x177>
// 10f: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 114: 48 85 c0                      testq   %rax, %rax
// 117: 74 38                         je      0x151 <_JIT_ENTRY+0x151>
// 119: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000011b:  R_X86_64_64  _JIT_OPARG
// 123: 83 e1 01                      andl    $0x1, %ecx
// 126: 49 89 04 ce                   movq    %rax, (%r14,%rcx,8)
// 12a: 49 8d 34 ce                   leaq    (%r14,%rcx,8), %rsi
// 12e: 48 83 c6 08                   addq    $0x8, %rsi
// 132: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000134:  R_X86_64_64  _JIT_CONTINUE
// 13c: 48 89 df                      movq    %rbx, %rdi
// 13f: 4c 89 fa                      movq    %r15, %rdx
// 142: 48 83 c4 10                   addq    $0x10, %rsp
// 146: 5b                            popq    %rbx
// 147: 41 5c                         popq    %r12
// 149: 41 5d                         popq    %r13
// 14b: 41 5e                         popq    %r14
// 14d: 41 5f                         popq    %r15
// 14f: ff e0                         jmpq    *%rax
// 151: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000153:  R_X86_64_64  PyExc_NameError
// 15b: 48 8b 30                      movq    (%rax), %rsi
// 15e: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000160:  R_X86_64_64  .rodata.str1.1+0x39
// 168: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016a:  R_X86_64_64  _PyErr_SetString
// 172: 4c 89 ff                      movq    %r15, %rdi
// 175: ff d0                         callq   *%rax
// 177: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000179:  R_X86_64_64  _JIT_OPARG
// 181: 83 e0 01                      andl    $0x1, %eax
// 184: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 188: 48 29 d8                      subq    %rbx, %rax
// 18b: 48 83 c0 b8                   addq    $-0x48, %rax
// 18f: 48 c1 e8 03                   shrq    $0x3, %rax
// 193: 89 43 40                      movl    %eax, 0x40(%rbx)
// 196: 31 c0                         xorl    %eax, %eax
// 198: 48 83 c4 10                   addq    $0x10, %rsp
// 19c: 5b                            popq    %rbx
// 19d: 41 5c                         popq    %r12
// 19f: 41 5d                         popq    %r13
// 1a1: 41 5e                         popq    %r14
// 1a3: 41 5f                         popq    %r15
// 1a5: c3                            retq
// 1a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a8:  R_X86_64_64  _Py_Dealloc
// 1b0: 4c 89 e7                      movq    %r12, %rdi
// 1b3: ff d0                         callq   *%rax
// 1b5: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 1b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bb:  R_X86_64_64  _JIT_OPARG
// 1c3: a8 01                         testb   $0x1, %al
// 1c5: 0f 85 13 ff ff ff             jne     0xde <_JIT_ENTRY+0xde>
// 1cb: e9 15 ff ff ff                jmp     0xe5 <_JIT_ENTRY+0xe5>
// 1d0: 
static const unsigned char _LOAD_ATTR_SLOTplus_LOAD_BUILD_CLASS_code_body[465] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x10, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1d, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x3f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4f, 0x85, 0xc0, 0x79, 0x71, 0xe9, 0x82, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x21, 0x01, 0x00, 0x00, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xda, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7b, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc6, 0x40, 0xa9, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x68, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x74, 0x38, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe1, 0x01, 0x49, 0x89, 0x04, 0xce, 0x49, 0x8d, 0x34, 0xce, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x10, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x10, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x13, 0xff, 0xff, 0xff, 0xe9, 0x15, 0xff, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_LOAD_BUILD_CLASS_code_holes[18] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5e, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xeb, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0xf5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x11b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x134, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x179, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1a8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00__build_class__ not found\x00'
// 53: 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_LOAD_BUILD_CLASS_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x5f, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_LOAD_BUILD_CLASS_data_holes[1];

// _LOAD_ATTR_SLOTplus_LOAD_CONST
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_LOAD_CONST.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 49 8b 2c 04                   movq    (%r12,%rax), %rbp
// 26: 48 85 ed                      testq   %rbp, %rbp
// 29: 74 23                         je      0x4e <_JIT_ENTRY+0x4e>
// 2b: 49 89 d7                      movq    %rdx, %r15
// 2e: 8b 45 00                      movl    (%rbp), %eax
// 31: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000033:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 3b: ff c0                         incl    %eax
// 3d: 75 46                         jne     0x85 <_JIT_ENTRY+0x85>
// 3f: 49 8b 04 24                   movq    (%r12), %rax
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 7e 4c                         jle     0x94 <_JIT_ENTRY+0x94>
// 48: 85 c0                         testl   %eax, %eax
// 4a: 79 6e                         jns     0xba <_JIT_ENTRY+0xba>
// 4c: eb 7e                         jmp     0xcc <_JIT_ENTRY+0xcc>
// 4e: 49 29 de                      subq    %rbx, %r14
// 51: 49 83 c6 b8                   addq    $-0x48, %r14
// 55: 49 c1 ee 03                   shrq    $0x3, %r14
// 59: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 5d: 48 8b 03                      movq    (%rbx), %rax
// 60: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000062:  R_X86_64_64  _JIT_TARGET
// 6a: 89 c9                         movl    %ecx, %ecx
// 6c: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 70: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 76: 48 83 c4 08                   addq    $0x8, %rsp
// 7a: 5b                            popq    %rbx
// 7b: 41 5c                         popq    %r12
// 7d: 41 5d                         popq    %r13
// 7f: 41 5e                         popq    %r14
// 81: 41 5f                         popq    %r15
// 83: 5d                            popq    %rbp
// 84: c3                            retq
// 85: 89 45 00                      movl    %eax, (%rbp)
// 88: 41 ff d5                      callq   *%r13
// 8b: 49 8b 04 24                   movq    (%r12), %rax
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 7f b4                         jg      0x48 <_JIT_ENTRY+0x48>
// 94: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000096:  R_X86_64_64  .rodata.str1.1
// 9e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a0:  R_X86_64_64  _Py_NegativeRefcount
// a8: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// ad: 4c 89 e2                      movq    %r12, %rdx
// b0: ff d0                         callq   *%rax
// b2: 49 8b 04 24                   movq    (%r12), %rax
// b6: 85 c0                         testl   %eax, %eax
// b8: 78 12                         js      0xcc <_JIT_ENTRY+0xcc>
// ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c4: ff d0                         callq   *%rax
// c6: 49 ff 0c 24                   decq    (%r12)
// ca: 74 7a                         je      0x146 <_JIT_ENTRY+0x146>
// cc: 49 89 6e f8                   movq    %rbp, -0x8(%r14)
// d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d2:  R_X86_64_64  _JIT_OPARG
// da: a8 01                         testb   $0x1, %al
// dc: 74 07                         je      0xe5 <_JIT_ENTRY+0xe5>
// de: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// e5: 48 8b 03                      movq    (%rbx), %rax
// e8: 48 8b 40 18                   movq    0x18(%rax), %rax
// ec: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ee:  R_X86_64_64  _JIT_OPARG
// f6: 0f b7 c9                      movzwl  %cx, %ecx
// f9: 4c 8b 64 c8 18                movq    0x18(%rax,%rcx,8), %r12
// fe: 41 8b 04 24                   movl    (%r12), %eax
// 102: ff c0                         incl    %eax
// 104: 74 07                         je      0x10d <_JIT_ENTRY+0x10d>
// 106: 41 89 04 24                   movl    %eax, (%r12)
// 10a: 41 ff d5                      callq   *%r13
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _JIT_OPARG
// 117: 83 e0 01                      andl    $0x1, %eax
// 11a: 4d 89 24 c6                   movq    %r12, (%r14,%rax,8)
// 11e: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 122: 48 83 c6 08                   addq    $0x8, %rsi
// 126: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000128:  R_X86_64_64  _JIT_CONTINUE
// 130: 48 89 df                      movq    %rbx, %rdi
// 133: 4c 89 fa                      movq    %r15, %rdx
// 136: 48 83 c4 08                   addq    $0x8, %rsp
// 13a: 5b                            popq    %rbx
// 13b: 41 5c                         popq    %r12
// 13d: 41 5d                         popq    %r13
// 13f: 41 5e                         popq    %r14
// 141: 41 5f                         popq    %r15
// 143: 5d                            popq    %rbp
// 144: ff e0                         jmpq    *%rax
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_Dealloc
// 150: 4c 89 e7                      movq    %r12, %rdi
// 153: ff d0                         callq   *%rax
// 155: 49 89 6e f8                   movq    %rbp, -0x8(%r14)
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  _JIT_OPARG
// 163: a8 01                         testb   $0x1, %al
// 165: 0f 85 73 ff ff ff             jne     0xde <_JIT_ENTRY+0xde>
// 16b: e9 75 ff ff ff                jmp     0xe5 <_JIT_ENTRY+0xe5>
// 170: 
static const unsigned char _LOAD_ATTR_SLOTplus_LOAD_CONST_code_body[369] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8b, 0x2c, 0x04, 0x48, 0x85, 0xed, 0x74, 0x23, 0x49, 0x89, 0xd7, 0x8b, 0x45, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0x75, 0x46, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4c, 0x85, 0xc0, 0x79, 0x6e, 0xeb, 0x7e, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0x45, 0x00, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb4, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x7a, 0x49, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x18, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x64, 0xc8, 0x18, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x07, 0x41, 0x89, 0x04, 0x24, 0x41, 0xff, 0xd5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x4d, 0x89, 0x24, 0xc6, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x73, 0xff, 0xff, 0xff, 0xe9, 0x75, 0xff, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_LOAD_CONST_code_holes[13] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x96, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xa0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xbc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xee, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x128, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_LOAD_CONST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_LOAD_CONST_data_holes[1];

// _LOAD_ATTR_SLOTplus_LOAD_DEREF
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_LOAD_DEREF.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f7                      movq    %rsi, %r15
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 74 1d                         je      0x46 <_JIT_ENTRY+0x46>
// 29: 49 89 d6                      movq    %rdx, %r14
// 2c: 41 8b 45 00                   movl    (%r13), %eax
// 30: ff c0                         incl    %eax
// 32: 75 3f                         jne     0x73 <_JIT_ENTRY+0x73>
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 4f                         jle     0x8c <_JIT_ENTRY+0x8c>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 71                         jns     0xb2 <_JIT_ENTRY+0xb2>
// 41: e9 82 00 00 00                jmp     0xc8 <_JIT_ENTRY+0xc8>
// 46: 49 29 df                      subq    %rbx, %r15
// 49: 49 83 c7 b8                   addq    $-0x48, %r15
// 4d: 49 c1 ef 03                   shrq    $0x3, %r15
// 51: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 55: 48 8b 03                      movq    (%rbx), %rax
// 58: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005a:  R_X86_64_64  _JIT_TARGET
// 62: 89 c9                         movl    %ecx, %ecx
// 64: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 68: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 6e: e9 02 01 00 00                jmp     0x175 <_JIT_ENTRY+0x175>
// 73: 41 89 45 00                   movl    %eax, (%r13)
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 81: ff d0                         callq   *%rax
// 83: 49 8b 04 24                   movq    (%r12), %rax
// 87: 48 85 c0                      testq   %rax, %rax
// 8a: 7f b1                         jg      0x3d <_JIT_ENTRY+0x3d>
// 8c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008e:  R_X86_64_64  .rodata.str1.1
// 96: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000098:  R_X86_64_64  _Py_NegativeRefcount
// a0: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a5: 4c 89 e2                      movq    %r12, %rdx
// a8: ff d0                         callq   *%rax
// aa: 49 8b 04 24                   movq    (%r12), %rax
// ae: 85 c0                         testl   %eax, %eax
// b0: 78 16                         js      0xc8 <_JIT_ENTRY+0xc8>
// b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: ff d0                         callq   *%rax
// be: 49 ff 0c 24                   decq    (%r12)
// c2: 0f 84 b7 00 00 00             je      0x17f <_JIT_ENTRY+0x17f>
// c8: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ce:  R_X86_64_64  _JIT_OPARG
// d6: a8 01                         testb   $0x1, %al
// d8: 74 07                         je      0xe1 <_JIT_ENTRY+0xe1>
// da: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// e1: 0f b7 c8                      movzwl  %ax, %ecx
// e4: 48 8b 4c cb 48                movq    0x48(%rbx,%rcx,8), %rcx
// e9: 4c 8b 61 10                   movq    0x10(%rcx), %r12
// ed: 4d 85 e4                      testq   %r12, %r12
// f0: 74 4c                         je      0x13e <_JIT_ENTRY+0x13e>
// f2: 41 8b 04 24                   movl    (%r12), %eax
// f6: ff c0                         incl    %eax
// f8: 74 10                         je      0x10a <_JIT_ENTRY+0x10a>
// fa: 41 89 04 24                   movl    %eax, (%r12)
// fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000100:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 108: ff d0                         callq   *%rax
// 10a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010c:  R_X86_64_64  _JIT_OPARG
// 114: 83 e0 01                      andl    $0x1, %eax
// 117: 4d 89 24 c7                   movq    %r12, (%r15,%rax,8)
// 11b: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 11f: 48 83 c6 08                   addq    $0x8, %rsi
// 123: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000125:  R_X86_64_64  _JIT_CONTINUE
// 12d: 48 89 df                      movq    %rbx, %rdi
// 130: 4c 89 f2                      movq    %r14, %rdx
// 133: 5b                            popq    %rbx
// 134: 41 5c                         popq    %r12
// 136: 41 5d                         popq    %r13
// 138: 41 5e                         popq    %r14
// 13a: 41 5f                         popq    %r15
// 13c: ff e0                         jmpq    *%rax
// 13e: 83 e0 01                      andl    $0x1, %eax
// 141: 4d 8d 3c c7                   leaq    (%r15,%rax,8), %r15
// 145: 48 8b 33                      movq    (%rbx), %rsi
// 148: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014a:  R_X86_64_64  _JIT_OPARG
// 152: 0f b7 d0                      movzwl  %ax, %edx
// 155: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000157:  R_X86_64_64  _PyEval_FormatExcUnbound
// 15f: 4c 89 f7                      movq    %r14, %rdi
// 162: ff d0                         callq   *%rax
// 164: 49 29 df                      subq    %rbx, %r15
// 167: 49 83 c7 b8                   addq    $-0x48, %r15
// 16b: 49 c1 ef 03                   shrq    $0x3, %r15
// 16f: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 173: 31 c0                         xorl    %eax, %eax
// 175: 5b                            popq    %rbx
// 176: 41 5c                         popq    %r12
// 178: 41 5d                         popq    %r13
// 17a: 41 5e                         popq    %r14
// 17c: 41 5f                         popq    %r15
// 17e: c3                            retq
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_Dealloc
// 189: 4c 89 e7                      movq    %r12, %rdi
// 18c: ff d0                         callq   *%rax
// 18e: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// 192: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000194:  R_X86_64_64  _JIT_OPARG
// 19c: a8 01                         testb   $0x1, %al
// 19e: 0f 85 36 ff ff ff             jne     0xda <_JIT_ENTRY+0xda>
// 1a4: e9 38 ff ff ff                jmp     0xe1 <_JIT_ENTRY+0xe1>
// 1a9: 
static const unsigned char _LOAD_ATTR_SLOTplus_LOAD_DEREF_code_body[426] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1d, 0x49, 0x89, 0xd6, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x3f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4f, 0x85, 0xc0, 0x79, 0x71, 0xe9, 0x82, 0x00, 0x00, 0x00, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x02, 0x01, 0x00, 0x00, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xb7, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x48, 0x8b, 0x4c, 0xcb, 0x48, 0x4c, 0x8b, 0x61, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x4c, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x4d, 0x89, 0x24, 0xc7, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf2, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x83, 0xe0, 0x01, 0x4d, 0x8d, 0x3c, 0xc7, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x36, 0xff, 0xff, 0xff, 0xe9, 0x38, 0xff, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_LOAD_DEREF_code_holes[15] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x100, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x125, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x14a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x157, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x194, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_LOAD_DEREF_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_LOAD_DEREF_data_holes[1];

// _LOAD_ATTR_SLOTplus_LOAD_FAST
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_LOAD_FAST.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 49 8b 2c 04                   movq    (%r12,%rax), %rbp
// 26: 48 85 ed                      testq   %rbp, %rbp
// 29: 74 23                         je      0x4e <_JIT_ENTRY+0x4e>
// 2b: 49 89 d7                      movq    %rdx, %r15
// 2e: 8b 45 00                      movl    (%rbp), %eax
// 31: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000033:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 3b: ff c0                         incl    %eax
// 3d: 75 46                         jne     0x85 <_JIT_ENTRY+0x85>
// 3f: 49 8b 04 24                   movq    (%r12), %rax
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 7e 4c                         jle     0x94 <_JIT_ENTRY+0x94>
// 48: 85 c0                         testl   %eax, %eax
// 4a: 79 6e                         jns     0xba <_JIT_ENTRY+0xba>
// 4c: eb 7e                         jmp     0xcc <_JIT_ENTRY+0xcc>
// 4e: 49 29 de                      subq    %rbx, %r14
// 51: 49 83 c6 b8                   addq    $-0x48, %r14
// 55: 49 c1 ee 03                   shrq    $0x3, %r14
// 59: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 5d: 48 8b 03                      movq    (%rbx), %rax
// 60: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000062:  R_X86_64_64  _JIT_TARGET
// 6a: 89 c9                         movl    %ecx, %ecx
// 6c: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 70: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 76: 48 83 c4 08                   addq    $0x8, %rsp
// 7a: 5b                            popq    %rbx
// 7b: 41 5c                         popq    %r12
// 7d: 41 5d                         popq    %r13
// 7f: 41 5e                         popq    %r14
// 81: 41 5f                         popq    %r15
// 83: 5d                            popq    %rbp
// 84: c3                            retq
// 85: 89 45 00                      movl    %eax, (%rbp)
// 88: 41 ff d5                      callq   *%r13
// 8b: 49 8b 04 24                   movq    (%r12), %rax
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 7f b4                         jg      0x48 <_JIT_ENTRY+0x48>
// 94: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000096:  R_X86_64_64  .rodata.str1.1
// 9e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a0:  R_X86_64_64  _Py_NegativeRefcount
// a8: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// ad: 4c 89 e2                      movq    %r12, %rdx
// b0: ff d0                         callq   *%rax
// b2: 49 8b 04 24                   movq    (%r12), %rax
// b6: 85 c0                         testl   %eax, %eax
// b8: 78 12                         js      0xcc <_JIT_ENTRY+0xcc>
// ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c4: ff d0                         callq   *%rax
// c6: 49 ff 0c 24                   decq    (%r12)
// ca: 74 69                         je      0x135 <_JIT_ENTRY+0x135>
// cc: 49 89 6e f8                   movq    %rbp, -0x8(%r14)
// d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d2:  R_X86_64_64  _JIT_OPARG
// da: a8 01                         testb   $0x1, %al
// dc: 74 07                         je      0xe5 <_JIT_ENTRY+0xe5>
// de: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// e5: 0f b7 c0                      movzwl  %ax, %eax
// e8: 4c 8b 64 c3 48                movq    0x48(%rbx,%rax,8), %r12
// ed: 41 8b 04 24                   movl    (%r12), %eax
// f1: ff c0                         incl    %eax
// f3: 74 07                         je      0xfc <_JIT_ENTRY+0xfc>
// f5: 41 89 04 24                   movl    %eax, (%r12)
// f9: 41 ff d5                      callq   *%r13
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 83 e0 01                      andl    $0x1, %eax
// 109: 4d 89 24 c6                   movq    %r12, (%r14,%rax,8)
// 10d: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 111: 48 83 c6 08                   addq    $0x8, %rsi
// 115: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000117:  R_X86_64_64  _JIT_CONTINUE
// 11f: 48 89 df                      movq    %rbx, %rdi
// 122: 4c 89 fa                      movq    %r15, %rdx
// 125: 48 83 c4 08                   addq    $0x8, %rsp
// 129: 5b                            popq    %rbx
// 12a: 41 5c                         popq    %r12
// 12c: 41 5d                         popq    %r13
// 12e: 41 5e                         popq    %r14
// 130: 41 5f                         popq    %r15
// 132: 5d                            popq    %rbp
// 133: ff e0                         jmpq    *%rax
// 135: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000137:  R_X86_64_64  _Py_Dealloc
// 13f: 4c 89 e7                      movq    %r12, %rdi
// 142: ff d0                         callq   *%rax
// 144: 49 89 6e f8                   movq    %rbp, -0x8(%r14)
// 148: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014a:  R_X86_64_64  _JIT_OPARG
// 152: a8 01                         testb   $0x1, %al
// 154: 75 88                         jne     0xde <_JIT_ENTRY+0xde>
// 156: eb 8d                         jmp     0xe5 <_JIT_ENTRY+0xe5>
// 158: 
static const unsigned char _LOAD_ATTR_SLOTplus_LOAD_FAST_code_body[345] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8b, 0x2c, 0x04, 0x48, 0x85, 0xed, 0x74, 0x23, 0x49, 0x89, 0xd7, 0x8b, 0x45, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0x75, 0x46, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4c, 0x85, 0xc0, 0x79, 0x6e, 0xeb, 0x7e, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0x45, 0x00, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb4, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x69, 0x49, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4c, 0x8b, 0x64, 0xc3, 0x48, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x07, 0x41, 0x89, 0x04, 0x24, 0x41, 0xff, 0xd5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x4d, 0x89, 0x24, 0xc6, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x75, 0x88, 0xeb, 0x8d};
static const Hole _LOAD_ATTR_SLOTplus_LOAD_FAST_code_holes[12] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x96, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xa0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xbc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x117, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x137, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x14a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_LOAD_FAST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_LOAD_FAST_data_holes[1];

// _LOAD_ATTR_SLOTplus_LOAD_FAST_AND_CLEAR
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_LOAD_FAST_AND_CLEAR.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f6                      movq    %rsi, %r14
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 74 1d                         je      0x46 <_JIT_ENTRY+0x46>
// 29: 49 89 d7                      movq    %rdx, %r15
// 2c: 41 8b 45 00                   movl    (%r13), %eax
// 30: ff c0                         incl    %eax
// 32: 75 42                         jne     0x76 <_JIT_ENTRY+0x76>
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 52                         jle     0x8f <_JIT_ENTRY+0x8f>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 74                         jns     0xb5 <_JIT_ENTRY+0xb5>
// 41: e9 81 00 00 00                jmp     0xc7 <_JIT_ENTRY+0xc7>
// 46: 49 29 de                      subq    %rbx, %r14
// 49: 49 83 c6 b8                   addq    $-0x48, %r14
// 4d: 49 c1 ee 03                   shrq    $0x3, %r14
// 51: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 55: 48 8b 03                      movq    (%rbx), %rax
// 58: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005a:  R_X86_64_64  _JIT_TARGET
// 62: 89 c9                         movl    %ecx, %ecx
// 64: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 6c: 5b                            popq    %rbx
// 6d: 41 5c                         popq    %r12
// 6f: 41 5d                         popq    %r13
// 71: 41 5e                         popq    %r14
// 73: 41 5f                         popq    %r15
// 75: c3                            retq
// 76: 41 89 45 00                   movl    %eax, (%r13)
// 7a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007c:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 84: ff d0                         callq   *%rax
// 86: 49 8b 04 24                   movq    (%r12), %rax
// 8a: 48 85 c0                      testq   %rax, %rax
// 8d: 7f ae                         jg      0x3d <_JIT_ENTRY+0x3d>
// 8f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000091:  R_X86_64_64  .rodata.str1.1
// 99: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009b:  R_X86_64_64  _Py_NegativeRefcount
// a3: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a8: 4c 89 e2                      movq    %r12, %rdx
// ab: ff d0                         callq   *%rax
// ad: 49 8b 04 24                   movq    (%r12), %rax
// b1: 85 c0                         testl   %eax, %eax
// b3: 78 12                         js      0xc7 <_JIT_ENTRY+0xc7>
// b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bf: ff d0                         callq   *%rax
// c1: 49 ff 0c 24                   decq    (%r12)
// c5: 74 54                         je      0x11b <_JIT_ENTRY+0x11b>
// c7: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cd:  R_X86_64_64  _JIT_OPARG
// d5: a8 01                         testb   $0x1, %al
// d7: 74 07                         je      0xe0 <_JIT_ENTRY+0xe0>
// d9: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// e0: 0f b7 c8                      movzwl  %ax, %ecx
// e3: 83 e0 01                      andl    $0x1, %eax
// e6: 48 8b 54 cb 48                movq    0x48(%rbx,%rcx,8), %rdx
// eb: 48 c7 44 cb 48 00 00 00 00    movq    $0x0, 0x48(%rbx,%rcx,8)
// f4: 49 89 14 c6                   movq    %rdx, (%r14,%rax,8)
// f8: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// fc: 48 83 c6 08                   addq    $0x8, %rsi
// 100: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000102:  R_X86_64_64  _JIT_CONTINUE
// 10a: 48 89 df                      movq    %rbx, %rdi
// 10d: 4c 89 fa                      movq    %r15, %rdx
// 110: 5b                            popq    %rbx
// 111: 41 5c                         popq    %r12
// 113: 41 5d                         popq    %r13
// 115: 41 5e                         popq    %r14
// 117: 41 5f                         popq    %r15
// 119: ff e0                         jmpq    *%rax
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  _Py_Dealloc
// 125: 4c 89 e7                      movq    %r12, %rdi
// 128: ff d0                         callq   *%rax
// 12a: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  _JIT_OPARG
// 138: a8 01                         testb   $0x1, %al
// 13a: 75 9d                         jne     0xd9 <_JIT_ENTRY+0xd9>
// 13c: eb a2                         jmp     0xe0 <_JIT_ENTRY+0xe0>
// 13e: 
static const unsigned char _LOAD_ATTR_SLOTplus_LOAD_FAST_AND_CLEAR_code_body[319] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1d, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x42, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x52, 0x85, 0xc0, 0x79, 0x74, 0xe9, 0x81, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xae, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x54, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x83, 0xe0, 0x01, 0x48, 0x8b, 0x54, 0xcb, 0x48, 0x48, 0xc7, 0x44, 0xcb, 0x48, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x14, 0xc6, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x75, 0x9d, 0xeb, 0xa2};
static const Hole _LOAD_ATTR_SLOTplus_LOAD_FAST_AND_CLEAR_code_holes[11] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xcd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_LOAD_FAST_AND_CLEAR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_LOAD_FAST_AND_CLEAR_data_holes[1];

// _LOAD_ATTR_SLOTplus_LOAD_FAST_CHECK
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_LOAD_FAST_CHECK.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f7                      movq    %rsi, %r15
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 74 1d                         je      0x46 <_JIT_ENTRY+0x46>
// 29: 49 89 d6                      movq    %rdx, %r14
// 2c: 41 8b 45 00                   movl    (%r13), %eax
// 30: ff c0                         incl    %eax
// 32: 75 3f                         jne     0x73 <_JIT_ENTRY+0x73>
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 4f                         jle     0x8c <_JIT_ENTRY+0x8c>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 71                         jns     0xb2 <_JIT_ENTRY+0xb2>
// 41: e9 82 00 00 00                jmp     0xc8 <_JIT_ENTRY+0xc8>
// 46: 49 29 df                      subq    %rbx, %r15
// 49: 49 83 c7 b8                   addq    $-0x48, %r15
// 4d: 49 c1 ef 03                   shrq    $0x3, %r15
// 51: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 55: 48 8b 03                      movq    (%rbx), %rax
// 58: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005a:  R_X86_64_64  _JIT_TARGET
// 62: 89 c9                         movl    %ecx, %ecx
// 64: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 68: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 6e: e9 2c 01 00 00                jmp     0x19f <_JIT_ENTRY+0x19f>
// 73: 41 89 45 00                   movl    %eax, (%r13)
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 81: ff d0                         callq   *%rax
// 83: 49 8b 04 24                   movq    (%r12), %rax
// 87: 48 85 c0                      testq   %rax, %rax
// 8a: 7f b1                         jg      0x3d <_JIT_ENTRY+0x3d>
// 8c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008e:  R_X86_64_64  .rodata.str1.1
// 96: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000098:  R_X86_64_64  _Py_NegativeRefcount
// a0: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a5: 4c 89 e2                      movq    %r12, %rdx
// a8: ff d0                         callq   *%rax
// aa: 49 8b 04 24                   movq    (%r12), %rax
// ae: 85 c0                         testl   %eax, %eax
// b0: 78 16                         js      0xc8 <_JIT_ENTRY+0xc8>
// b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: ff d0                         callq   *%rax
// be: 49 ff 0c 24                   decq    (%r12)
// c2: 0f 84 e1 00 00 00             je      0x1a9 <_JIT_ENTRY+0x1a9>
// c8: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ce:  R_X86_64_64  _JIT_OPARG
// d6: a8 01                         testb   $0x1, %al
// d8: 74 07                         je      0xe1 <_JIT_ENTRY+0xe1>
// da: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// e1: 0f b7 c8                      movzwl  %ax, %ecx
// e4: 4c 8b 64 cb 48                movq    0x48(%rbx,%rcx,8), %r12
// e9: 4d 85 e4                      testq   %r12, %r12
// ec: 74 4c                         je      0x13a <_JIT_ENTRY+0x13a>
// ee: 41 8b 04 24                   movl    (%r12), %eax
// f2: ff c0                         incl    %eax
// f4: 74 10                         je      0x106 <_JIT_ENTRY+0x106>
// f6: 41 89 04 24                   movl    %eax, (%r12)
// fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fc:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 104: ff d0                         callq   *%rax
// 106: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000108:  R_X86_64_64  _JIT_OPARG
// 110: 83 e0 01                      andl    $0x1, %eax
// 113: 4d 89 24 c7                   movq    %r12, (%r15,%rax,8)
// 117: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 11b: 48 83 c6 08                   addq    $0x8, %rsi
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _JIT_CONTINUE
// 129: 48 89 df                      movq    %rbx, %rdi
// 12c: 4c 89 f2                      movq    %r14, %rdx
// 12f: 5b                            popq    %rbx
// 130: 41 5c                         popq    %r12
// 132: 41 5d                         popq    %r13
// 134: 41 5e                         popq    %r14
// 136: 41 5f                         popq    %r15
// 138: ff e0                         jmpq    *%rax
// 13a: 83 e0 01                      andl    $0x1, %eax
// 13d: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 141: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000143:  R_X86_64_64  PyExc_UnboundLocalError
// 14b: 4c 8b 38                      movq    (%rax), %r15
// 14e: 48 8b 03                      movq    (%rbx), %rax
// 151: 48 8b 78 60                   movq    0x60(%rax), %rdi
// 155: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000157:  R_X86_64_64  _JIT_OPARG
// 15f: 0f b7 f0                      movzwl  %ax, %esi
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  PyTuple_GetItem
// 16c: ff d0                         callq   *%rax
// 16e: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000170:  R_X86_64_64  .rodata.str1.1+0x39
// 178: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000017a:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 182: 4c 89 f7                      movq    %r14, %rdi
// 185: 4c 89 fe                      movq    %r15, %rsi
// 188: 48 89 c1                      movq    %rax, %rcx
// 18b: 41 ff d0                      callq   *%r8
// 18e: 49 29 dc                      subq    %rbx, %r12
// 191: 49 83 c4 b8                   addq    $-0x48, %r12
// 195: 49 c1 ec 03                   shrq    $0x3, %r12
// 199: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 19d: 31 c0                         xorl    %eax, %eax
// 19f: 5b                            popq    %rbx
// 1a0: 41 5c                         popq    %r12
// 1a2: 41 5d                         popq    %r13
// 1a4: 41 5e                         popq    %r14
// 1a6: 41 5f                         popq    %r15
// 1a8: c3                            retq
// 1a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ab:  R_X86_64_64  _Py_Dealloc
// 1b3: 4c 89 e7                      movq    %r12, %rdi
// 1b6: ff d0                         callq   *%rax
// 1b8: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// 1bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001be:  R_X86_64_64  _JIT_OPARG
// 1c6: a8 01                         testb   $0x1, %al
// 1c8: 0f 85 0c ff ff ff             jne     0xda <_JIT_ENTRY+0xda>
// 1ce: e9 0e ff ff ff                jmp     0xe1 <_JIT_ENTRY+0xe1>
// 1d3: 
static const unsigned char _LOAD_ATTR_SLOTplus_LOAD_FAST_CHECK_code_body[468] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1d, 0x49, 0x89, 0xd6, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x3f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4f, 0x85, 0xc0, 0x79, 0x71, 0xe9, 0x82, 0x00, 0x00, 0x00, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x2c, 0x01, 0x00, 0x00, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xe1, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x4c, 0x8b, 0x64, 0xcb, 0x48, 0x4d, 0x85, 0xe4, 0x74, 0x4c, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x4d, 0x89, 0x24, 0xc7, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf2, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x83, 0xe0, 0x01, 0x4d, 0x8d, 0x24, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x38, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x78, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xfe, 0x48, 0x89, 0xc1, 0x41, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x0c, 0xff, 0xff, 0xff, 0xe9, 0x0e, 0xff, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_LOAD_FAST_CHECK_code_holes[18] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x143, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_UnboundLocalError, 0x0},
    {0x157, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_GetItem, 0x0},
    {0x170, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x17a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00cannot access local variable '%s' where it is not associated with a value\x00"
// 83: 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_LOAD_FAST_CHECK_data_body[137] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x27, 0x25, 0x73, 0x27, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_LOAD_FAST_CHECK_data_holes[1];

// _LOAD_ATTR_SLOTplus_LOAD_FROM_DICT_OR_DEREF
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_LOAD_FROM_DICT_OR_DEREF.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 48 83 ec 10                   subq    $0x10, %rsp
// d: 49 89 f7                      movq    %rsi, %r15
// 10: 48 89 fb                      movq    %rdi, %rbx
// 13: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  _JIT_OPERAND
// 21: 0f b7 c0                      movzwl  %ax, %eax
// 24: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 28: 4d 85 ed                      testq   %r13, %r13
// 2b: 74 1d                         je      0x4a <_JIT_ENTRY+0x4a>
// 2d: 49 89 d6                      movq    %rdx, %r14
// 30: 41 8b 45 00                   movl    (%r13), %eax
// 34: ff c0                         incl    %eax
// 36: 75 3f                         jne     0x77 <_JIT_ENTRY+0x77>
// 38: 49 8b 04 24                   movq    (%r12), %rax
// 3c: 48 85 c0                      testq   %rax, %rax
// 3f: 7e 4f                         jle     0x90 <_JIT_ENTRY+0x90>
// 41: 85 c0                         testl   %eax, %eax
// 43: 79 71                         jns     0xb6 <_JIT_ENTRY+0xb6>
// 45: e9 8d 00 00 00                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 4a: 49 29 df                      subq    %rbx, %r15
// 4d: 49 83 c7 b8                   addq    $-0x48, %r15
// 51: 49 c1 ef 03                   shrq    $0x3, %r15
// 55: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 59: 48 8b 03                      movq    (%rbx), %rax
// 5c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005e:  R_X86_64_64  _JIT_TARGET
// 66: 89 c9                         movl    %ecx, %ecx
// 68: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 6c: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 72: e9 b4 01 00 00                jmp     0x22b <_JIT_ENTRY+0x22b>
// 77: 41 89 45 00                   movl    %eax, (%r13)
// 7b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007d:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 85: ff d0                         callq   *%rax
// 87: 49 8b 04 24                   movq    (%r12), %rax
// 8b: 48 85 c0                      testq   %rax, %rax
// 8e: 7f b1                         jg      0x41 <_JIT_ENTRY+0x41>
// 90: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000092:  R_X86_64_64  .rodata.str1.1
// 9a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009c:  R_X86_64_64  _Py_NegativeRefcount
// a4: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a9: 4c 89 e2                      movq    %r12, %rdx
// ac: ff d0                         callq   *%rax
// ae: 49 8b 04 24                   movq    (%r12), %rax
// b2: 85 c0                         testl   %eax, %eax
// b4: 78 21                         js      0xd7 <_JIT_ENTRY+0xd7>
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c0: ff d0                         callq   *%rax
// c2: 49 ff 0c 24                   decq    (%r12)
// c6: 75 0f                         jne     0xd7 <_JIT_ENTRY+0xd7>
// c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ca:  R_X86_64_64  _Py_Dealloc
// d2: 4c 89 e7                      movq    %r12, %rdi
// d5: ff d0                         callq   *%rax
// d7: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000dd:  R_X86_64_64  _JIT_OPARG
// e5: a8 01                         testb   $0x1, %al
// e7: 74 07                         je      0xf0 <_JIT_ENTRY+0xf0>
// e9: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// f0: 0f b7 c8                      movzwl  %ax, %ecx
// f3: 83 e0 01                      andl    $0x1, %eax
// f6: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// fa: 4d 8b 6c c7 f8                movq    -0x8(%r15,%rax,8), %r13
// ff: 48 8b 03                      movq    (%rbx), %rax
// 102: 48 8b 40 60                   movq    0x60(%rax), %rax
// 106: 48 8b 74 c8 18                movq    0x18(%rax,%rcx,8), %rsi
// 10b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010d:  R_X86_64_64  PyMapping_GetOptionalItem
// 115: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 11a: 4c 89 ef                      movq    %r13, %rdi
// 11d: ff d0                         callq   *%rax
// 11f: 85 c0                         testl   %eax, %eax
// 121: 0f 88 f3 00 00 00             js      0x21a <_JIT_ENTRY+0x21a>
// 127: 48 83 7c 24 08 00             cmpq    $0x0, 0x8(%rsp)
// 12d: 74 12                         je      0x141 <_JIT_ENTRY+0x141>
// 12f: 49 8b 45 00                   movq    (%r13), %rax
// 133: 48 85 c0                      testq   %rax, %rax
// 136: 7e 43                         jle     0x17b <_JIT_ENTRY+0x17b>
// 138: 85 c0                         testl   %eax, %eax
// 13a: 79 65                         jns     0x1a1 <_JIT_ENTRY+0x1a1>
// 13c: e9 81 00 00 00                jmp     0x1c2 <_JIT_ENTRY+0x1c2>
// 141: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000143:  R_X86_64_64  _JIT_OPARG
// 14b: 0f b7 c0                      movzwl  %ax, %eax
// 14e: 48 8b 44 c3 48                movq    0x48(%rbx,%rax,8), %rax
// 153: 48 8b 40 10                   movq    0x10(%rax), %rax
// 157: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 15c: 48 85 c0                      testq   %rax, %rax
// 15f: 0f 84 96 00 00 00             je      0x1fb <_JIT_ENTRY+0x1fb>
// 165: 8b 08                         movl    (%rax), %ecx
// 167: ff c1                         incl    %ecx
// 169: 74 c4                         je      0x12f <_JIT_ENTRY+0x12f>
// 16b: 89 08                         movl    %ecx, (%rax)
// 16d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016f:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 177: ff d0                         callq   *%rax
// 179: eb b4                         jmp     0x12f <_JIT_ENTRY+0x12f>
// 17b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000017d:  R_X86_64_64  .rodata.str1.1
// 185: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000187:  R_X86_64_64  _Py_NegativeRefcount
// 18f: be dd 04 00 00                movl    $0x4dd, %esi            # imm = 0x4DD
// 194: 4c 89 ea                      movq    %r13, %rdx
// 197: ff d0                         callq   *%rax
// 199: 49 8b 45 00                   movq    (%r13), %rax
// 19d: 85 c0                         testl   %eax, %eax
// 19f: 78 21                         js      0x1c2 <_JIT_ENTRY+0x1c2>
// 1a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ab: ff d0                         callq   *%rax
// 1ad: 49 ff 4d 00                   decq    (%r13)
// 1b1: 75 0f                         jne     0x1c2 <_JIT_ENTRY+0x1c2>
// 1b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b5:  R_X86_64_64  _Py_Dealloc
// 1bd: 4c 89 ef                      movq    %r13, %rdi
// 1c0: ff d0                         callq   *%rax
// 1c2: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1c7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c9:  R_X86_64_64  _JIT_OPARG
// 1d1: 83 e1 01                      andl    $0x1, %ecx
// 1d4: 49 89 44 cf f8                movq    %rax, -0x8(%r15,%rcx,8)
// 1d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001db:  R_X86_64_64  _JIT_CONTINUE
// 1e3: 48 89 df                      movq    %rbx, %rdi
// 1e6: 4c 89 e6                      movq    %r12, %rsi
// 1e9: 4c 89 f2                      movq    %r14, %rdx
// 1ec: 48 83 c4 10                   addq    $0x10, %rsp
// 1f0: 5b                            popq    %rbx
// 1f1: 41 5c                         popq    %r12
// 1f3: 41 5d                         popq    %r13
// 1f5: 41 5e                         popq    %r14
// 1f7: 41 5f                         popq    %r15
// 1f9: ff e0                         jmpq    *%rax
// 1fb: 48 8b 33                      movq    (%rbx), %rsi
// 1fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000200:  R_X86_64_64  _JIT_OPARG
// 208: 0f b7 d0                      movzwl  %ax, %edx
// 20b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020d:  R_X86_64_64  _PyEval_FormatExcUnbound
// 215: 4c 89 f7                      movq    %r14, %rdi
// 218: ff d0                         callq   *%rax
// 21a: 49 29 dc                      subq    %rbx, %r12
// 21d: 49 83 c4 b8                   addq    $-0x48, %r12
// 221: 49 c1 ec 03                   shrq    $0x3, %r12
// 225: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 229: 31 c0                         xorl    %eax, %eax
// 22b: 48 83 c4 10                   addq    $0x10, %rsp
// 22f: 5b                            popq    %rbx
// 230: 41 5c                         popq    %r12
// 232: 41 5d                         popq    %r13
// 234: 41 5e                         popq    %r14
// 236: 41 5f                         popq    %r15
// 238: c3                            retq
// 239: 
static const unsigned char _LOAD_ATTR_SLOTplus_LOAD_FROM_DICT_OR_DEREF_code_body[570] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x10, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1d, 0x49, 0x89, 0xd6, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x3f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4f, 0x85, 0xc0, 0x79, 0x71, 0xe9, 0x8d, 0x00, 0x00, 0x00, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xb4, 0x01, 0x00, 0x00, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x83, 0xe0, 0x01, 0x4d, 0x8d, 0x24, 0xc7, 0x4d, 0x8b, 0x6c, 0xc7, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x60, 0x48, 0x8b, 0x74, 0xc8, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x88, 0xf3, 0x00, 0x00, 0x00, 0x48, 0x83, 0x7c, 0x24, 0x08, 0x00, 0x74, 0x12, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x43, 0x85, 0xc0, 0x79, 0x65, 0xe9, 0x81, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc3, 0x48, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x8b, 0x08, 0xff, 0xc1, 0x74, 0xc4, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb4, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe1, 0x01, 0x49, 0x89, 0x44, 0xcf, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x10, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x10, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _LOAD_ATTR_SLOTplus_LOAD_FROM_DICT_OR_DEREF_code_holes[20] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5e, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xdd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x143, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x16f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x187, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1c9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x200, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_LOAD_FROM_DICT_OR_DEREF_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_LOAD_FROM_DICT_OR_DEREF_data_holes[1];

// _LOAD_ATTR_SLOTplus_LOAD_FROM_DICT_OR_GLOBALS
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_LOAD_FROM_DICT_OR_GLOBALS.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 18: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001a:  R_X86_64_64  _JIT_OPERAND
// 22: 0f b7 c0                      movzwl  %ax, %eax
// 25: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 29: 4d 85 ed                      testq   %r13, %r13
// 2c: 74 1f                         je      0x4d <_JIT_ENTRY+0x4d>
// 2e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 33: 41 8b 45 00                   movl    (%r13), %eax
// 37: ff c0                         incl    %eax
// 39: 75 3f                         jne     0x7a <_JIT_ENTRY+0x7a>
// 3b: 49 8b 04 24                   movq    (%r12), %rax
// 3f: 48 85 c0                      testq   %rax, %rax
// 42: 7e 4f                         jle     0x93 <_JIT_ENTRY+0x93>
// 44: 85 c0                         testl   %eax, %eax
// 46: 79 71                         jns     0xb9 <_JIT_ENTRY+0xb9>
// 48: e9 8d 00 00 00                jmp     0xda <_JIT_ENTRY+0xda>
// 4d: 49 29 df                      subq    %rbx, %r15
// 50: 49 83 c7 b8                   addq    $-0x48, %r15
// 54: 49 c1 ef 03                   shrq    $0x3, %r15
// 58: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 5c: 48 8b 03                      movq    (%rbx), %rax
// 5f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000061:  R_X86_64_64  _JIT_TARGET
// 69: 89 c9                         movl    %ecx, %ecx
// 6b: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 6f: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 75: e9 51 01 00 00                jmp     0x1cb <_JIT_ENTRY+0x1cb>
// 7a: 41 89 45 00                   movl    %eax, (%r13)
// 7e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000080:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 88: ff d0                         callq   *%rax
// 8a: 49 8b 04 24                   movq    (%r12), %rax
// 8e: 48 85 c0                      testq   %rax, %rax
// 91: 7f b1                         jg      0x44 <_JIT_ENTRY+0x44>
// 93: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000095:  R_X86_64_64  .rodata.str1.1
// 9d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009f:  R_X86_64_64  _Py_NegativeRefcount
// a7: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// ac: 4c 89 e2                      movq    %r12, %rdx
// af: ff d0                         callq   *%rax
// b1: 49 8b 04 24                   movq    (%r12), %rax
// b5: 85 c0                         testl   %eax, %eax
// b7: 78 21                         js      0xda <_JIT_ENTRY+0xda>
// b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c3: ff d0                         callq   *%rax
// c5: 49 ff 0c 24                   decq    (%r12)
// c9: 75 0f                         jne     0xda <_JIT_ENTRY+0xda>
// cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cd:  R_X86_64_64  _Py_Dealloc
// d5: 4c 89 e7                      movq    %r12, %rdi
// d8: ff d0                         callq   *%rax
// da: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _JIT_OPARG
// e8: a8 01                         testb   $0x1, %al
// ea: 74 07                         je      0xf3 <_JIT_ENTRY+0xf3>
// ec: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// f3: 0f b7 c8                      movzwl  %ax, %ecx
// f6: 83 e0 01                      andl    $0x1, %eax
// f9: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// fd: 4d 8b 6c c7 f8                movq    -0x8(%r15,%rax,8), %r13
// 102: 48 8b 03                      movq    (%rbx), %rax
// 105: 48 8b 40 20                   movq    0x20(%rax), %rax
// 109: 48 8b 6c c8 18                movq    0x18(%rax,%rcx,8), %rbp
// 10e: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000110:  R_X86_64_64  PyMapping_GetOptionalItem
// 118: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 11d: 4c 89 ef                      movq    %r13, %rdi
// 120: 48 89 ee                      movq    %rbp, %rsi
// 123: 41 ff d6                      callq   *%r14
// 126: 85 c0                         testl   %eax, %eax
// 128: 0f 88 8c 00 00 00             js      0x1ba <_JIT_ENTRY+0x1ba>
// 12e: 48 83 7c 24 08 00             cmpq    $0x0, 0x8(%rsp)
// 134: 74 1a                         je      0x150 <_JIT_ENTRY+0x150>
// 136: 49 8b 45 00                   movq    (%r13), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 0f 8e 97 00 00 00             jle     0x1da <_JIT_ENTRY+0x1da>
// 143: 85 c0                         testl   %eax, %eax
// 145: 0f 89 b5 00 00 00             jns     0x200 <_JIT_ENTRY+0x200>
// 14b: e9 d1 00 00 00                jmp     0x221 <_JIT_ENTRY+0x221>
// 150: 48 8b 7b 18                   movq    0x18(%rbx), %rdi
// 154: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000156:  R_X86_64_64  PyDict_GetItemRef
// 15e: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 163: 48 89 ee                      movq    %rbp, %rsi
// 166: ff d0                         callq   *%rax
// 168: 85 c0                         testl   %eax, %eax
// 16a: 78 4e                         js      0x1ba <_JIT_ENTRY+0x1ba>
// 16c: 48 83 7c 24 08 00             cmpq    $0x0, 0x8(%rsp)
// 172: 75 c2                         jne     0x136 <_JIT_ENTRY+0x136>
// 174: 48 8b 7b 20                   movq    0x20(%rbx), %rdi
// 178: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 17d: 48 89 ee                      movq    %rbp, %rsi
// 180: 41 ff d6                      callq   *%r14
// 183: 85 c0                         testl   %eax, %eax
// 185: 78 33                         js      0x1ba <_JIT_ENTRY+0x1ba>
// 187: 48 83 7c 24 08 00             cmpq    $0x0, 0x8(%rsp)
// 18d: 75 a7                         jne     0x136 <_JIT_ENTRY+0x136>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  PyExc_NameError
// 199: 48 8b 30                      movq    (%rax), %rsi
// 19c: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000019e:  R_X86_64_64  .rodata.str1.1+0x39
// 1a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a8:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 1b0: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 1b5: 48 89 e9                      movq    %rbp, %rcx
// 1b8: ff d0                         callq   *%rax
// 1ba: 49 29 dc                      subq    %rbx, %r12
// 1bd: 49 83 c4 b8                   addq    $-0x48, %r12
// 1c1: 49 c1 ec 03                   shrq    $0x3, %r12
// 1c5: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 1c9: 31 c0                         xorl    %eax, %eax
// 1cb: 48 83 c4 18                   addq    $0x18, %rsp
// 1cf: 5b                            popq    %rbx
// 1d0: 41 5c                         popq    %r12
// 1d2: 41 5d                         popq    %r13
// 1d4: 41 5e                         popq    %r14
// 1d6: 41 5f                         popq    %r15
// 1d8: 5d                            popq    %rbp
// 1d9: c3                            retq
// 1da: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001dc:  R_X86_64_64  .rodata.str1.1
// 1e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e6:  R_X86_64_64  _Py_NegativeRefcount
// 1ee: be 1b 04 00 00                movl    $0x41b, %esi            # imm = 0x41B
// 1f3: 4c 89 ea                      movq    %r13, %rdx
// 1f6: ff d0                         callq   *%rax
// 1f8: 49 8b 45 00                   movq    (%r13), %rax
// 1fc: 85 c0                         testl   %eax, %eax
// 1fe: 78 21                         js      0x221 <_JIT_ENTRY+0x221>
// 200: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000202:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 20a: ff d0                         callq   *%rax
// 20c: 49 ff 4d 00                   decq    (%r13)
// 210: 75 0f                         jne     0x221 <_JIT_ENTRY+0x221>
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_Dealloc
// 21c: 4c 89 ef                      movq    %r13, %rdi
// 21f: ff d0                         callq   *%rax
// 221: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 226: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000228:  R_X86_64_64  _JIT_OPARG
// 230: 83 e1 01                      andl    $0x1, %ecx
// 233: 49 89 44 cf f8                movq    %rax, -0x8(%r15,%rcx,8)
// 238: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023a:  R_X86_64_64  _JIT_CONTINUE
// 242: 48 89 df                      movq    %rbx, %rdi
// 245: 4c 89 e6                      movq    %r12, %rsi
// 248: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 24d: 48 83 c4 18                   addq    $0x18, %rsp
// 251: 5b                            popq    %rbx
// 252: 41 5c                         popq    %r12
// 254: 41 5d                         popq    %r13
// 256: 41 5e                         popq    %r14
// 258: 41 5f                         popq    %r15
// 25a: 5d                            popq    %rbp
// 25b: ff e0                         jmpq    *%rax
// 25d: 
static const unsigned char _LOAD_ATTR_SLOTplus_LOAD_FROM_DICT_OR_GLOBALS_code_body[606] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1f, 0x48, 0x89, 0x54, 0x24, 0x10, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x3f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4f, 0x85, 0xc0, 0x79, 0x71, 0xe9, 0x8d, 0x00, 0x00, 0x00, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x51, 0x01, 0x00, 0x00, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x83, 0xe0, 0x01, 0x4d, 0x8d, 0x24, 0xc7, 0x4d, 0x8b, 0x6c, 0xc7, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0x8b, 0x6c, 0xc8, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xee, 0x41, 0xff, 0xd6, 0x85, 0xc0, 0x0f, 0x88, 0x8c, 0x00, 0x00, 0x00, 0x48, 0x83, 0x7c, 0x24, 0x08, 0x00, 0x74, 0x1a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x97, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xb5, 0x00, 0x00, 0x00, 0xe9, 0xd1, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7b, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x4e, 0x48, 0x83, 0x7c, 0x24, 0x08, 0x00, 0x75, 0xc2, 0x48, 0x8b, 0x7b, 0x20, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x89, 0xee, 0x41, 0xff, 0xd6, 0x85, 0xc0, 0x78, 0x33, 0x48, 0x83, 0x7c, 0x24, 0x08, 0x00, 0x75, 0xa7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x48, 0x89, 0xe9, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x1b, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe1, 0x01, 0x49, 0x89, 0x44, 0xcf, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_ATTR_SLOTplus_LOAD_FROM_DICT_OR_GLOBALS_code_holes[20] = {
    {0x1a, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x95, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xbb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xcd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_GetItemRef, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x19e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1a8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1e6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x23a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00name '%.200s' is not defined\x00"
// 56: 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_LOAD_FROM_DICT_OR_GLOBALS_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_LOAD_FROM_DICT_OR_GLOBALS_data_holes[1];

// _LOAD_ATTR_SLOTplus_LOAD_GLOBAL
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_LOAD_GLOBAL.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f7                      movq    %rsi, %r15
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 26: 4d 85 ed                      testq   %r13, %r13
// 29: 74 1d                         je      0x48 <_JIT_ENTRY+0x48>
// 2b: 49 89 d6                      movq    %rdx, %r14
// 2e: 41 8b 45 00                   movl    (%r13), %eax
// 32: ff c0                         incl    %eax
// 34: 75 3f                         jne     0x75 <_JIT_ENTRY+0x75>
// 36: 49 8b 04 24                   movq    (%r12), %rax
// 3a: 48 85 c0                      testq   %rax, %rax
// 3d: 7e 4f                         jle     0x8e <_JIT_ENTRY+0x8e>
// 3f: 85 c0                         testl   %eax, %eax
// 41: 79 71                         jns     0xb4 <_JIT_ENTRY+0xb4>
// 43: e9 82 00 00 00                jmp     0xca <_JIT_ENTRY+0xca>
// 48: 49 29 df                      subq    %rbx, %r15
// 4b: 49 83 c7 b8                   addq    $-0x48, %r15
// 4f: 49 c1 ef 03                   shrq    $0x3, %r15
// 53: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 57: 48 8b 03                      movq    (%rbx), %rax
// 5a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005c:  R_X86_64_64  _JIT_TARGET
// 64: 89 c9                         movl    %ecx, %ecx
// 66: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 6a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 70: e9 ef 01 00 00                jmp     0x264 <_JIT_ENTRY+0x264>
// 75: 41 89 45 00                   movl    %eax, (%r13)
// 79: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007b:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 83: ff d0                         callq   *%rax
// 85: 49 8b 04 24                   movq    (%r12), %rax
// 89: 48 85 c0                      testq   %rax, %rax
// 8c: 7f b1                         jg      0x3f <_JIT_ENTRY+0x3f>
// 8e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000090:  R_X86_64_64  .rodata.str1.1
// 98: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009a:  R_X86_64_64  _Py_NegativeRefcount
// a2: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a7: 4c 89 e2                      movq    %r12, %rdx
// aa: ff d0                         callq   *%rax
// ac: 49 8b 04 24                   movq    (%r12), %rax
// b0: 85 c0                         testl   %eax, %eax
// b2: 78 16                         js      0xca <_JIT_ENTRY+0xca>
// b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// be: ff d0                         callq   *%rax
// c0: 49 ff 0c 24                   decq    (%r12)
// c4: 0f 84 ed 00 00 00             je      0x1b7 <_JIT_ENTRY+0x1b7>
// ca: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d0:  R_X86_64_64  _JIT_OPARG
// d8: a8 01                         testb   $0x1, %al
// da: 74 07                         je      0xe3 <_JIT_ENTRY+0xe3>
// dc: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// e3: 89 c1                         movl    %eax, %ecx
// e5: 83 e1 01                      andl    $0x1, %ecx
// e8: 4d 8d 2c cf                   leaq    (%r15,%rcx,8), %r13
// ec: 48 8b 0b                      movq    (%rbx), %rcx
// ef: 48 8b 7b 18                   movq    0x18(%rbx), %rdi
// f3: 48 8b 49 20                   movq    0x20(%rcx), %rcx
// f7: 25 fe ff 00 00                andl    $0xfffe, %eax           # imm = 0xFFFE
// fc: 4c 8b 64 81 18                movq    0x18(%rcx,%rax,4), %r12
// 101: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000103:  R_X86_64_64  PyDict_Type
// 10b: 48 39 47 08                   cmpq    %rax, 0x8(%rdi)
// 10f: 75 0e                         jne     0x11f <_JIT_ENTRY+0x11f>
// 111: 48 8b 73 20                   movq    0x20(%rbx), %rsi
// 115: 48 39 46 08                   cmpq    %rax, 0x8(%rsi)
// 119: 0f 84 c2 00 00 00             je      0x1e1 <_JIT_ENTRY+0x1e1>
// 11f: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000121:  R_X86_64_64  PyMapping_GetOptionalItem
// 129: 48 89 e2                      movq    %rsp, %rdx
// 12c: 4c 89 e6                      movq    %r12, %rsi
// 12f: ff d5                         callq   *%rbp
// 131: 85 c0                         testl   %eax, %eax
// 133: 0f 88 1a 01 00 00             js      0x253 <_JIT_ENTRY+0x253>
// 139: 48 8b 04 24                   movq    (%rsp), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 74 56                         je      0x198 <_JIT_ENTRY+0x198>
// 142: 49 89 45 00                   movq    %rax, (%r13)
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _JIT_OPARG
// 150: a8 01                         testb   $0x1, %al
// 152: 74 0c                         je      0x160 <_JIT_ENTRY+0x160>
// 154: 83 e0 01                      andl    $0x1, %eax
// 157: 49 c7 44 c7 08 00 00 00 00    movq    $0x0, 0x8(%r15,%rax,8)
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _JIT_OPARG
// 16a: 83 e0 01                      andl    $0x1, %eax
// 16d: 89 c1                         movl    %eax, %ecx
// 16f: ff c1                         incl    %ecx
// 171: 48 01 c1                      addq    %rax, %rcx
// 174: 49 8d 34 cf                   leaq    (%r15,%rcx,8), %rsi
// 178: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017a:  R_X86_64_64  _JIT_CONTINUE
// 182: 48 89 df                      movq    %rbx, %rdi
// 185: 4c 89 f2                      movq    %r14, %rdx
// 188: 48 83 c4 08                   addq    $0x8, %rsp
// 18c: 5b                            popq    %rbx
// 18d: 41 5c                         popq    %r12
// 18f: 41 5d                         popq    %r13
// 191: 41 5e                         popq    %r14
// 193: 41 5f                         popq    %r15
// 195: 5d                            popq    %rbp
// 196: ff e0                         jmpq    *%rax
// 198: 48 8b 7b 20                   movq    0x20(%rbx), %rdi
// 19c: 48 89 e2                      movq    %rsp, %rdx
// 19f: 4c 89 e6                      movq    %r12, %rsi
// 1a2: ff d5                         callq   *%rbp
// 1a4: 85 c0                         testl   %eax, %eax
// 1a6: 0f 88 a7 00 00 00             js      0x253 <_JIT_ENTRY+0x253>
// 1ac: 48 8b 04 24                   movq    (%rsp), %rax
// 1b0: 48 85 c0                      testq   %rax, %rax
// 1b3: 75 8d                         jne     0x142 <_JIT_ENTRY+0x142>
// 1b5: eb 73                         jmp     0x22a <_JIT_ENTRY+0x22a>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_Dealloc
// 1c1: 4c 89 e7                      movq    %r12, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// 1ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cc:  R_X86_64_64  _JIT_OPARG
// 1d4: a8 01                         testb   $0x1, %al
// 1d6: 0f 85 00 ff ff ff             jne     0xdc <_JIT_ENTRY+0xdc>
// 1dc: e9 02 ff ff ff                jmp     0xe3 <_JIT_ENTRY+0xe3>
// 1e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e3:  R_X86_64_64  _PyDict_LoadGlobal
// 1eb: 4c 89 e2                      movq    %r12, %rdx
// 1ee: ff d0                         callq   *%rax
// 1f0: 48 89 04 24                   movq    %rax, (%rsp)
// 1f4: 48 85 c0                      testq   %rax, %rax
// 1f7: 74 21                         je      0x21a <_JIT_ENTRY+0x21a>
// 1f9: 8b 08                         movl    (%rax), %ecx
// 1fb: ff c1                         incl    %ecx
// 1fd: 0f 84 3f ff ff ff             je      0x142 <_JIT_ENTRY+0x142>
// 203: 89 08                         movl    %ecx, (%rax)
// 205: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000207:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 20f: ff d0                         callq   *%rax
// 211: 48 8b 04 24                   movq    (%rsp), %rax
// 215: e9 28 ff ff ff                jmp     0x142 <_JIT_ENTRY+0x142>
// 21a: 49 8b 46 68                   movq    0x68(%r14), %rax
// 21e: 48 85 c0                      testq   %rax, %rax
// 221: 74 07                         je      0x22a <_JIT_ENTRY+0x22a>
// 223: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 228: 75 29                         jne     0x253 <_JIT_ENTRY+0x253>
// 22a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022c:  R_X86_64_64  PyExc_NameError
// 234: 48 8b 30                      movq    (%rax), %rsi
// 237: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000239:  R_X86_64_64  .rodata.str1.1+0x39
// 241: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000243:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 24b: 4c 89 f7                      movq    %r14, %rdi
// 24e: 4c 89 e1                      movq    %r12, %rcx
// 251: ff d0                         callq   *%rax
// 253: 49 29 dd                      subq    %rbx, %r13
// 256: 49 83 c5 b8                   addq    $-0x48, %r13
// 25a: 49 c1 ed 03                   shrq    $0x3, %r13
// 25e: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 262: 31 c0                         xorl    %eax, %eax
// 264: 48 83 c4 08                   addq    $0x8, %rsp
// 268: 5b                            popq    %rbx
// 269: 41 5c                         popq    %r12
// 26b: 41 5d                         popq    %r13
// 26d: 41 5e                         popq    %r14
// 26f: 41 5f                         popq    %r15
// 271: 5d                            popq    %rbp
// 272: c3                            retq
// 273: 
static const unsigned char _LOAD_ATTR_SLOTplus_LOAD_GLOBAL_code_body[628] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1d, 0x49, 0x89, 0xd6, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x3f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4f, 0x85, 0xc0, 0x79, 0x71, 0xe9, 0x82, 0x00, 0x00, 0x00, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xef, 0x01, 0x00, 0x00, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xed, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0x83, 0xe1, 0x01, 0x4d, 0x8d, 0x2c, 0xcf, 0x48, 0x8b, 0x0b, 0x48, 0x8b, 0x7b, 0x18, 0x48, 0x8b, 0x49, 0x20, 0x25, 0xfe, 0xff, 0x00, 0x00, 0x4c, 0x8b, 0x64, 0x81, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x47, 0x08, 0x75, 0x0e, 0x48, 0x8b, 0x73, 0x20, 0x48, 0x39, 0x46, 0x08, 0x0f, 0x84, 0xc2, 0x00, 0x00, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x4c, 0x89, 0xe6, 0xff, 0xd5, 0x85, 0xc0, 0x0f, 0x88, 0x1a, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x74, 0x56, 0x49, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x0c, 0x83, 0xe0, 0x01, 0x49, 0xc7, 0x44, 0xc7, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x89, 0xc1, 0xff, 0xc1, 0x48, 0x01, 0xc1, 0x49, 0x8d, 0x34, 0xcf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x7b, 0x20, 0x48, 0x89, 0xe2, 0x4c, 0x89, 0xe6, 0xff, 0xd5, 0x85, 0xc0, 0x0f, 0x88, 0xa7, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x75, 0x8d, 0xeb, 0x73, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x00, 0xff, 0xff, 0xff, 0xe9, 0x02, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x74, 0x21, 0x8b, 0x08, 0xff, 0xc1, 0x0f, 0x84, 0x3f, 0xff, 0xff, 0xff, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0xe9, 0x28, 0xff, 0xff, 0xff, 0x49, 0x8b, 0x46, 0x68, 0x48, 0x85, 0xc0, 0x74, 0x07, 0x48, 0x83, 0x78, 0x08, 0x00, 0x75, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xe1, 0xff, 0xd0, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _LOAD_ATTR_SLOTplus_LOAD_GLOBAL_code_holes[20] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x90, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x17a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1cc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_LoadGlobal, 0x0},
    {0x207, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x22c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x239, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x243, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00name '%.200s' is not defined\x00"
// 56: 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_LOAD_GLOBAL_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_LOAD_GLOBAL_data_holes[1];

// _LOAD_ATTR_SLOTplus_LOAD_GLOBAL_BUILTINS
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_LOAD_GLOBAL_BUILTINS.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f6                      movq    %rsi, %r14
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 0f 84 2d 01 00 00             je      0x15a <_JIT_ENTRY+0x15a>
// 2d: 49 89 d7                      movq    %rdx, %r15
// 30: 41 8b 45 00                   movl    (%r13), %eax
// 34: ff c0                         incl    %eax
// 36: 75 0f                         jne     0x47 <_JIT_ENTRY+0x47>
// 38: 49 8b 04 24                   movq    (%r12), %rax
// 3c: 48 85 c0                      testq   %rax, %rax
// 3f: 7e 1f                         jle     0x60 <_JIT_ENTRY+0x60>
// 41: 85 c0                         testl   %eax, %eax
// 43: 79 41                         jns     0x86 <_JIT_ENTRY+0x86>
// 45: eb 55                         jmp     0x9c <_JIT_ENTRY+0x9c>
// 47: 41 89 45 00                   movl    %eax, (%r13)
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 55: ff d0                         callq   *%rax
// 57: 49 8b 04 24                   movq    (%r12), %rax
// 5b: 48 85 c0                      testq   %rax, %rax
// 5e: 7f e1                         jg      0x41 <_JIT_ENTRY+0x41>
// 60: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000062:  R_X86_64_64  .rodata.str1.1
// 6a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006c:  R_X86_64_64  _Py_NegativeRefcount
// 74: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 79: 4c 89 e2                      movq    %r12, %rdx
// 7c: ff d0                         callq   *%rax
// 7e: 49 8b 04 24                   movq    (%r12), %rax
// 82: 85 c0                         testl   %eax, %eax
// 84: 78 16                         js      0x9c <_JIT_ENTRY+0x9c>
// 86: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000088:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 90: ff d0                         callq   *%rax
// 92: 49 ff 0c 24                   decq    (%r12)
// 96: 0f 84 ee 00 00 00             je      0x18a <_JIT_ENTRY+0x18a>
// 9c: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _JIT_OPARG
// aa: a8 01                         testb   $0x1, %al
// ac: 74 07                         je      0xb5 <_JIT_ENTRY+0xb5>
// ae: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// b5: 48 8b 4b 20                   movq    0x20(%rbx), %rcx
// b9: 48 8b 51 20                   movq    0x20(%rcx), %rdx
// bd: 0f b6 4a 09                   movzbl  0x9(%rdx), %ecx
// c1: be 01 00 00 00                movl    $0x1, %esi
// c6: 48 d3 e6                      shlq    %cl, %rsi
// c9: 83 e0 01                      andl    $0x1, %eax
// cc: 4d 8d 24 c6                   leaq    (%r14,%rax,8), %r12
// d0: 48 01 d6                      addq    %rdx, %rsi
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _JIT_OPERAND
// dd: 0f b7 c0                      movzwl  %ax, %eax
// e0: 48 c1 e0 04                   shlq    $0x4, %rax
// e4: 4c 8b 6c 30 28                movq    0x28(%rax,%rsi), %r13
// e9: 4d 85 ed                      testq   %r13, %r13
// ec: 74 69                         je      0x157 <_JIT_ENTRY+0x157>
// ee: 41 8b 45 00                   movl    (%r13), %eax
// f2: ff c0                         incl    %eax
// f4: 74 10                         je      0x106 <_JIT_ENTRY+0x106>
// f6: 41 89 45 00                   movl    %eax, (%r13)
// fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fc:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 104: ff d0                         callq   *%rax
// 106: 4d 89 2c 24                   movq    %r13, (%r12)
// 10a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010c:  R_X86_64_64  _JIT_OPARG
// 114: a8 01                         testb   $0x1, %al
// 116: 74 0c                         je      0x124 <_JIT_ENTRY+0x124>
// 118: 83 e0 01                      andl    $0x1, %eax
// 11b: 49 c7 44 c6 08 00 00 00 00    movq    $0x0, 0x8(%r14,%rax,8)
// 124: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000126:  R_X86_64_64  _JIT_OPARG
// 12e: 83 e0 01                      andl    $0x1, %eax
// 131: 89 c1                         movl    %eax, %ecx
// 133: ff c1                         incl    %ecx
// 135: 48 01 c1                      addq    %rax, %rcx
// 138: 49 8d 34 ce                   leaq    (%r14,%rcx,8), %rsi
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _JIT_CONTINUE
// 146: 48 89 df                      movq    %rbx, %rdi
// 149: 4c 89 fa                      movq    %r15, %rdx
// 14c: 5b                            popq    %rbx
// 14d: 41 5c                         popq    %r12
// 14f: 41 5d                         popq    %r13
// 151: 41 5e                         popq    %r14
// 153: 41 5f                         popq    %r15
// 155: ff e0                         jmpq    *%rax
// 157: 4d 89 e6                      movq    %r12, %r14
// 15a: 49 29 de                      subq    %rbx, %r14
// 15d: 49 83 c6 b8                   addq    $-0x48, %r14
// 161: 49 c1 ee 03                   shrq    $0x3, %r14
// 165: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 169: 48 8b 03                      movq    (%rbx), %rax
// 16c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000016e:  R_X86_64_64  _JIT_TARGET
// 176: 89 c9                         movl    %ecx, %ecx
// 178: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 180: 5b                            popq    %rbx
// 181: 41 5c                         popq    %r12
// 183: 41 5d                         popq    %r13
// 185: 41 5e                         popq    %r14
// 187: 41 5f                         popq    %r15
// 189: c3                            retq
// 18a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018c:  R_X86_64_64  _Py_Dealloc
// 194: 4c 89 e7                      movq    %r12, %rdi
// 197: ff d0                         callq   *%rax
// 199: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 19d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019f:  R_X86_64_64  _JIT_OPARG
// 1a7: a8 01                         testb   $0x1, %al
// 1a9: 0f 85 ff fe ff ff             jne     0xae <_JIT_ENTRY+0xae>
// 1af: e9 01 ff ff ff                jmp     0xb5 <_JIT_ENTRY+0xb5>
// 1b4: 
static const unsigned char _LOAD_ATTR_SLOTplus_LOAD_GLOBAL_BUILTINS_code_body[437] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x2d, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1f, 0x85, 0xc0, 0x79, 0x41, 0xeb, 0x55, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xee, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x4b, 0x20, 0x48, 0x8b, 0x51, 0x20, 0x0f, 0xb6, 0x4a, 0x09, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x48, 0xd3, 0xe6, 0x83, 0xe0, 0x01, 0x4d, 0x8d, 0x24, 0xc6, 0x48, 0x01, 0xd6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x04, 0x4c, 0x8b, 0x6c, 0x30, 0x28, 0x4d, 0x85, 0xed, 0x74, 0x69, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0x2c, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x0c, 0x83, 0xe0, 0x01, 0x49, 0xc7, 0x44, 0xc6, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x89, 0xc1, 0xff, 0xc1, 0x48, 0x01, 0xc1, 0x49, 0x8d, 0x34, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0xff, 0xfe, 0xff, 0xff, 0xe9, 0x01, 0xff, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_LOAD_GLOBAL_BUILTINS_code_holes[15] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x126, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x16e, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x18c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_LOAD_GLOBAL_BUILTINS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_LOAD_GLOBAL_BUILTINS_data_holes[1];

// _LOAD_ATTR_SLOTplus_LOAD_GLOBAL_MODULE
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_LOAD_GLOBAL_MODULE.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f6                      movq    %rsi, %r14
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 0f 84 2d 01 00 00             je      0x15a <_JIT_ENTRY+0x15a>
// 2d: 49 89 d7                      movq    %rdx, %r15
// 30: 41 8b 45 00                   movl    (%r13), %eax
// 34: ff c0                         incl    %eax
// 36: 75 0f                         jne     0x47 <_JIT_ENTRY+0x47>
// 38: 49 8b 04 24                   movq    (%r12), %rax
// 3c: 48 85 c0                      testq   %rax, %rax
// 3f: 7e 1f                         jle     0x60 <_JIT_ENTRY+0x60>
// 41: 85 c0                         testl   %eax, %eax
// 43: 79 41                         jns     0x86 <_JIT_ENTRY+0x86>
// 45: eb 55                         jmp     0x9c <_JIT_ENTRY+0x9c>
// 47: 41 89 45 00                   movl    %eax, (%r13)
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 55: ff d0                         callq   *%rax
// 57: 49 8b 04 24                   movq    (%r12), %rax
// 5b: 48 85 c0                      testq   %rax, %rax
// 5e: 7f e1                         jg      0x41 <_JIT_ENTRY+0x41>
// 60: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000062:  R_X86_64_64  .rodata.str1.1
// 6a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006c:  R_X86_64_64  _Py_NegativeRefcount
// 74: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 79: 4c 89 e2                      movq    %r12, %rdx
// 7c: ff d0                         callq   *%rax
// 7e: 49 8b 04 24                   movq    (%r12), %rax
// 82: 85 c0                         testl   %eax, %eax
// 84: 78 16                         js      0x9c <_JIT_ENTRY+0x9c>
// 86: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000088:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 90: ff d0                         callq   *%rax
// 92: 49 ff 0c 24                   decq    (%r12)
// 96: 0f 84 ee 00 00 00             je      0x18a <_JIT_ENTRY+0x18a>
// 9c: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _JIT_OPARG
// aa: a8 01                         testb   $0x1, %al
// ac: 74 07                         je      0xb5 <_JIT_ENTRY+0xb5>
// ae: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// b5: 48 8b 4b 18                   movq    0x18(%rbx), %rcx
// b9: 48 8b 51 20                   movq    0x20(%rcx), %rdx
// bd: 0f b6 4a 09                   movzbl  0x9(%rdx), %ecx
// c1: be 01 00 00 00                movl    $0x1, %esi
// c6: 48 d3 e6                      shlq    %cl, %rsi
// c9: 83 e0 01                      andl    $0x1, %eax
// cc: 4d 8d 24 c6                   leaq    (%r14,%rax,8), %r12
// d0: 48 01 d6                      addq    %rdx, %rsi
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _JIT_OPERAND
// dd: 0f b7 c0                      movzwl  %ax, %eax
// e0: 48 c1 e0 04                   shlq    $0x4, %rax
// e4: 4c 8b 6c 30 28                movq    0x28(%rax,%rsi), %r13
// e9: 4d 85 ed                      testq   %r13, %r13
// ec: 74 69                         je      0x157 <_JIT_ENTRY+0x157>
// ee: 41 8b 45 00                   movl    (%r13), %eax
// f2: ff c0                         incl    %eax
// f4: 74 10                         je      0x106 <_JIT_ENTRY+0x106>
// f6: 41 89 45 00                   movl    %eax, (%r13)
// fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fc:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 104: ff d0                         callq   *%rax
// 106: 4d 89 2c 24                   movq    %r13, (%r12)
// 10a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010c:  R_X86_64_64  _JIT_OPARG
// 114: a8 01                         testb   $0x1, %al
// 116: 74 0c                         je      0x124 <_JIT_ENTRY+0x124>
// 118: 83 e0 01                      andl    $0x1, %eax
// 11b: 49 c7 44 c6 08 00 00 00 00    movq    $0x0, 0x8(%r14,%rax,8)
// 124: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000126:  R_X86_64_64  _JIT_OPARG
// 12e: 83 e0 01                      andl    $0x1, %eax
// 131: 89 c1                         movl    %eax, %ecx
// 133: ff c1                         incl    %ecx
// 135: 48 01 c1                      addq    %rax, %rcx
// 138: 49 8d 34 ce                   leaq    (%r14,%rcx,8), %rsi
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _JIT_CONTINUE
// 146: 48 89 df                      movq    %rbx, %rdi
// 149: 4c 89 fa                      movq    %r15, %rdx
// 14c: 5b                            popq    %rbx
// 14d: 41 5c                         popq    %r12
// 14f: 41 5d                         popq    %r13
// 151: 41 5e                         popq    %r14
// 153: 41 5f                         popq    %r15
// 155: ff e0                         jmpq    *%rax
// 157: 4d 89 e6                      movq    %r12, %r14
// 15a: 49 29 de                      subq    %rbx, %r14
// 15d: 49 83 c6 b8                   addq    $-0x48, %r14
// 161: 49 c1 ee 03                   shrq    $0x3, %r14
// 165: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 169: 48 8b 03                      movq    (%rbx), %rax
// 16c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000016e:  R_X86_64_64  _JIT_TARGET
// 176: 89 c9                         movl    %ecx, %ecx
// 178: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 180: 5b                            popq    %rbx
// 181: 41 5c                         popq    %r12
// 183: 41 5d                         popq    %r13
// 185: 41 5e                         popq    %r14
// 187: 41 5f                         popq    %r15
// 189: c3                            retq
// 18a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018c:  R_X86_64_64  _Py_Dealloc
// 194: 4c 89 e7                      movq    %r12, %rdi
// 197: ff d0                         callq   *%rax
// 199: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 19d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019f:  R_X86_64_64  _JIT_OPARG
// 1a7: a8 01                         testb   $0x1, %al
// 1a9: 0f 85 ff fe ff ff             jne     0xae <_JIT_ENTRY+0xae>
// 1af: e9 01 ff ff ff                jmp     0xb5 <_JIT_ENTRY+0xb5>
// 1b4: 
static const unsigned char _LOAD_ATTR_SLOTplus_LOAD_GLOBAL_MODULE_code_body[437] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x2d, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1f, 0x85, 0xc0, 0x79, 0x41, 0xeb, 0x55, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xee, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x4b, 0x18, 0x48, 0x8b, 0x51, 0x20, 0x0f, 0xb6, 0x4a, 0x09, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x48, 0xd3, 0xe6, 0x83, 0xe0, 0x01, 0x4d, 0x8d, 0x24, 0xc6, 0x48, 0x01, 0xd6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x04, 0x4c, 0x8b, 0x6c, 0x30, 0x28, 0x4d, 0x85, 0xed, 0x74, 0x69, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0x2c, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x0c, 0x83, 0xe0, 0x01, 0x49, 0xc7, 0x44, 0xc6, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x89, 0xc1, 0xff, 0xc1, 0x48, 0x01, 0xc1, 0x49, 0x8d, 0x34, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0xff, 0xfe, 0xff, 0xff, 0xe9, 0x01, 0xff, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_LOAD_GLOBAL_MODULE_code_holes[15] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x126, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x16e, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x18c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_LOAD_GLOBAL_MODULE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_LOAD_GLOBAL_MODULE_data_holes[1];

// _LOAD_ATTR_SLOTplus_LOAD_LOCALS
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_LOAD_LOCALS.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f7                      movq    %rsi, %r15
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 74 1d                         je      0x46 <_JIT_ENTRY+0x46>
// 29: 49 89 d6                      movq    %rdx, %r14
// 2c: 41 8b 45 00                   movl    (%r13), %eax
// 30: ff c0                         incl    %eax
// 32: 75 3f                         jne     0x73 <_JIT_ENTRY+0x73>
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 4f                         jle     0x8c <_JIT_ENTRY+0x8c>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 71                         jns     0xb2 <_JIT_ENTRY+0xb2>
// 41: e9 82 00 00 00                jmp     0xc8 <_JIT_ENTRY+0xc8>
// 46: 49 29 df                      subq    %rbx, %r15
// 49: 49 83 c7 b8                   addq    $-0x48, %r15
// 4d: 49 c1 ef 03                   shrq    $0x3, %r15
// 51: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 55: 48 8b 03                      movq    (%rbx), %rax
// 58: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005a:  R_X86_64_64  _JIT_TARGET
// 62: 89 c9                         movl    %ecx, %ecx
// 64: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 68: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 6e: e9 01 01 00 00                jmp     0x174 <_JIT_ENTRY+0x174>
// 73: 41 89 45 00                   movl    %eax, (%r13)
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 81: ff d0                         callq   *%rax
// 83: 49 8b 04 24                   movq    (%r12), %rax
// 87: 48 85 c0                      testq   %rax, %rax
// 8a: 7f b1                         jg      0x3d <_JIT_ENTRY+0x3d>
// 8c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008e:  R_X86_64_64  .rodata.str1.1
// 96: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000098:  R_X86_64_64  _Py_NegativeRefcount
// a0: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a5: 4c 89 e2                      movq    %r12, %rdx
// a8: ff d0                         callq   *%rax
// aa: 49 8b 04 24                   movq    (%r12), %rax
// ae: 85 c0                         testl   %eax, %eax
// b0: 78 16                         js      0xc8 <_JIT_ENTRY+0xc8>
// b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: ff d0                         callq   *%rax
// be: 49 ff 0c 24                   decq    (%r12)
// c2: 0f 84 b6 00 00 00             je      0x17e <_JIT_ENTRY+0x17e>
// c8: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ce:  R_X86_64_64  _JIT_OPARG
// d6: a8 01                         testb   $0x1, %al
// d8: 74 07                         je      0xe1 <_JIT_ENTRY+0xe1>
// da: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// e1: 4c 8b 63 28                   movq    0x28(%rbx), %r12
// e5: 4d 85 e4                      testq   %r12, %r12
// e8: 74 4c                         je      0x136 <_JIT_ENTRY+0x136>
// ea: 41 8b 04 24                   movl    (%r12), %eax
// ee: ff c0                         incl    %eax
// f0: 74 10                         je      0x102 <_JIT_ENTRY+0x102>
// f2: 41 89 04 24                   movl    %eax, (%r12)
// f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f8:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 100: ff d0                         callq   *%rax
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _JIT_OPARG
// 10c: 83 e0 01                      andl    $0x1, %eax
// 10f: 4d 89 24 c7                   movq    %r12, (%r15,%rax,8)
// 113: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 117: 48 83 c6 08                   addq    $0x8, %rsi
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  _JIT_CONTINUE
// 125: 48 89 df                      movq    %rbx, %rdi
// 128: 4c 89 f2                      movq    %r14, %rdx
// 12b: 5b                            popq    %rbx
// 12c: 41 5c                         popq    %r12
// 12e: 41 5d                         popq    %r13
// 130: 41 5e                         popq    %r14
// 132: 41 5f                         popq    %r15
// 134: ff e0                         jmpq    *%rax
// 136: 83 e0 01                      andl    $0x1, %eax
// 139: 4d 8d 3c c7                   leaq    (%r15,%rax,8), %r15
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  PyExc_SystemError
// 147: 48 8b 30                      movq    (%rax), %rsi
// 14a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000014c:  R_X86_64_64  .rodata.str1.1+0x39
// 154: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000156:  R_X86_64_64  _PyErr_SetString
// 15e: 4c 89 f7                      movq    %r14, %rdi
// 161: ff d0                         callq   *%rax
// 163: 49 29 df                      subq    %rbx, %r15
// 166: 49 83 c7 b8                   addq    $-0x48, %r15
// 16a: 49 c1 ef 03                   shrq    $0x3, %r15
// 16e: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 172: 31 c0                         xorl    %eax, %eax
// 174: 5b                            popq    %rbx
// 175: 41 5c                         popq    %r12
// 177: 41 5d                         popq    %r13
// 179: 41 5e                         popq    %r14
// 17b: 41 5f                         popq    %r15
// 17d: c3                            retq
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_Dealloc
// 188: 4c 89 e7                      movq    %r12, %rdi
// 18b: ff d0                         callq   *%rax
// 18d: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _JIT_OPARG
// 19b: a8 01                         testb   $0x1, %al
// 19d: 0f 85 37 ff ff ff             jne     0xda <_JIT_ENTRY+0xda>
// 1a3: e9 39 ff ff ff                jmp     0xe1 <_JIT_ENTRY+0xe1>
// 1a8: 
static const unsigned char _LOAD_ATTR_SLOTplus_LOAD_LOCALS_code_body[425] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1d, 0x49, 0x89, 0xd6, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x3f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4f, 0x85, 0xc0, 0x79, 0x71, 0xe9, 0x82, 0x00, 0x00, 0x00, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x01, 0x01, 0x00, 0x00, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xb6, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0x28, 0x4d, 0x85, 0xe4, 0x74, 0x4c, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x4d, 0x89, 0x24, 0xc7, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf2, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x83, 0xe0, 0x01, 0x4d, 0x8d, 0x3c, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x37, 0xff, 0xff, 0xff, 0xe9, 0x39, 0xff, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_LOAD_LOCALS_code_holes[16] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x156, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00no locals found\x00'
// 49: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_LOAD_LOCALS_data_body[81] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_LOAD_LOCALS_data_holes[1];

// _LOAD_ATTR_SLOTplus_LOAD_NAME
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_LOAD_NAME.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 48 83 ec 10                   subq    $0x10, %rsp
// d: 49 89 f6                      movq    %rsi, %r14
// 10: 48 89 fb                      movq    %rdi, %rbx
// 13: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  _JIT_OPERAND
// 21: 0f b7 c0                      movzwl  %ax, %eax
// 24: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 28: 4d 85 ed                      testq   %r13, %r13
// 2b: 74 1d                         je      0x4a <_JIT_ENTRY+0x4a>
// 2d: 49 89 d7                      movq    %rdx, %r15
// 30: 41 8b 45 00                   movl    (%r13), %eax
// 34: ff c0                         incl    %eax
// 36: 75 3f                         jne     0x77 <_JIT_ENTRY+0x77>
// 38: 49 8b 04 24                   movq    (%r12), %rax
// 3c: 48 85 c0                      testq   %rax, %rax
// 3f: 7e 4f                         jle     0x90 <_JIT_ENTRY+0x90>
// 41: 85 c0                         testl   %eax, %eax
// 43: 79 71                         jns     0xb6 <_JIT_ENTRY+0xb6>
// 45: e9 8d 00 00 00                jmp     0xd7 <_JIT_ENTRY+0xd7>
// 4a: 49 29 de                      subq    %rbx, %r14
// 4d: 49 83 c6 b8                   addq    $-0x48, %r14
// 51: 49 c1 ee 03                   shrq    $0x3, %r14
// 55: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 59: 48 8b 03                      movq    (%rbx), %rax
// 5c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005e:  R_X86_64_64  _JIT_TARGET
// 66: 89 c9                         movl    %ecx, %ecx
// 68: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 6c: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 72: e9 41 01 00 00                jmp     0x1b8 <_JIT_ENTRY+0x1b8>
// 77: 41 89 45 00                   movl    %eax, (%r13)
// 7b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007d:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 85: ff d0                         callq   *%rax
// 87: 49 8b 04 24                   movq    (%r12), %rax
// 8b: 48 85 c0                      testq   %rax, %rax
// 8e: 7f b1                         jg      0x41 <_JIT_ENTRY+0x41>
// 90: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000092:  R_X86_64_64  .rodata.str1.1
// 9a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009c:  R_X86_64_64  _Py_NegativeRefcount
// a4: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a9: 4c 89 e2                      movq    %r12, %rdx
// ac: ff d0                         callq   *%rax
// ae: 49 8b 04 24                   movq    (%r12), %rax
// b2: 85 c0                         testl   %eax, %eax
// b4: 78 21                         js      0xd7 <_JIT_ENTRY+0xd7>
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c0: ff d0                         callq   *%rax
// c2: 49 ff 0c 24                   decq    (%r12)
// c6: 75 0f                         jne     0xd7 <_JIT_ENTRY+0xd7>
// c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ca:  R_X86_64_64  _Py_Dealloc
// d2: 4c 89 e7                      movq    %r12, %rdi
// d5: ff d0                         callq   *%rax
// d7: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000dd:  R_X86_64_64  _JIT_OPARG
// e5: a8 01                         testb   $0x1, %al
// e7: 74 07                         je      0xf0 <_JIT_ENTRY+0xf0>
// e9: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// f0: 48 8b 7b 28                   movq    0x28(%rbx), %rdi
// f4: 48 85 ff                      testq   %rdi, %rdi
// f7: 74 78                         je      0x171 <_JIT_ENTRY+0x171>
// f9: 48 8b 03                      movq    (%rbx), %rax
// fc: 48 8b 40 20                   movq    0x20(%rax), %rax
// 100: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000102:  R_X86_64_64  _JIT_OPARG
// 10a: 0f b7 c9                      movzwl  %cx, %ecx
// 10d: 4c 8b 64 c8 18                movq    0x18(%rax,%rcx,8), %r12
// 112: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000114:  R_X86_64_64  PyMapping_GetOptionalItem
// 11c: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 121: 4c 89 e6                      movq    %r12, %rsi
// 124: 41 ff d5                      callq   *%r13
// 127: 85 c0                         testl   %eax, %eax
// 129: 78 6c                         js      0x197 <_JIT_ENTRY+0x197>
// 12b: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 130: 48 85 c0                      testq   %rax, %rax
// 133: 0f 84 8d 00 00 00             je      0x1c6 <_JIT_ENTRY+0x1c6>
// 139: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000013b:  R_X86_64_64  _JIT_OPARG
// 143: 83 e1 01                      andl    $0x1, %ecx
// 146: 49 89 04 ce                   movq    %rax, (%r14,%rcx,8)
// 14a: 49 8d 34 ce                   leaq    (%r14,%rcx,8), %rsi
// 14e: 48 83 c6 08                   addq    $0x8, %rsi
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  _JIT_CONTINUE
// 15c: 48 89 df                      movq    %rbx, %rdi
// 15f: 4c 89 fa                      movq    %r15, %rdx
// 162: 48 83 c4 10                   addq    $0x10, %rsp
// 166: 5b                            popq    %rbx
// 167: 41 5c                         popq    %r12
// 169: 41 5d                         popq    %r13
// 16b: 41 5e                         popq    %r14
// 16d: 41 5f                         popq    %r15
// 16f: ff e0                         jmpq    *%rax
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  PyExc_SystemError
// 17b: 48 8b 30                      movq    (%rax), %rsi
// 17e: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000180:  R_X86_64_64  .rodata.str1.1+0x56
// 188: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018a:  R_X86_64_64  _PyErr_SetString
// 192: 4c 89 ff                      movq    %r15, %rdi
// 195: ff d0                         callq   *%rax
// 197: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000199:  R_X86_64_64  _JIT_OPARG
// 1a1: 83 e0 01                      andl    $0x1, %eax
// 1a4: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 1a8: 48 29 d8                      subq    %rbx, %rax
// 1ab: 48 83 c0 b8                   addq    $-0x48, %rax
// 1af: 48 c1 e8 03                   shrq    $0x3, %rax
// 1b3: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1b6: 31 c0                         xorl    %eax, %eax
// 1b8: 48 83 c4 10                   addq    $0x10, %rsp
// 1bc: 5b                            popq    %rbx
// 1bd: 41 5c                         popq    %r12
// 1bf: 41 5d                         popq    %r13
// 1c1: 41 5e                         popq    %r14
// 1c3: 41 5f                         popq    %r15
// 1c5: c3                            retq
// 1c6: 48 8b 7b 18                   movq    0x18(%rbx), %rdi
// 1ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cc:  R_X86_64_64  PyDict_GetItemRef
// 1d4: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 1d9: 4c 89 e6                      movq    %r12, %rsi
// 1dc: ff d0                         callq   *%rax
// 1de: 85 c0                         testl   %eax, %eax
// 1e0: 78 b5                         js      0x197 <_JIT_ENTRY+0x197>
// 1e2: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1e7: 48 85 c0                      testq   %rax, %rax
// 1ea: 0f 85 49 ff ff ff             jne     0x139 <_JIT_ENTRY+0x139>
// 1f0: 48 8b 7b 20                   movq    0x20(%rbx), %rdi
// 1f4: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 1f9: 4c 89 e6                      movq    %r12, %rsi
// 1fc: 41 ff d5                      callq   *%r13
// 1ff: 85 c0                         testl   %eax, %eax
// 201: 78 94                         js      0x197 <_JIT_ENTRY+0x197>
// 203: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 208: 48 85 c0                      testq   %rax, %rax
// 20b: 0f 85 28 ff ff ff             jne     0x139 <_JIT_ENTRY+0x139>
// 211: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000213:  R_X86_64_64  PyExc_NameError
// 21b: 48 8b 30                      movq    (%rax), %rsi
// 21e: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000220:  R_X86_64_64  .rodata.str1.1+0x39
// 228: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022a:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 232: 4c 89 ff                      movq    %r15, %rdi
// 235: 4c 89 e1                      movq    %r12, %rcx
// 238: ff d0                         callq   *%rax
// 23a: e9 58 ff ff ff                jmp     0x197 <_JIT_ENTRY+0x197>
// 23f: 
static const unsigned char _LOAD_ATTR_SLOTplus_LOAD_NAME_code_body[576] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x10, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1d, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x3f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4f, 0x85, 0xc0, 0x79, 0x71, 0xe9, 0x8d, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x41, 0x01, 0x00, 0x00, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7b, 0x28, 0x48, 0x85, 0xff, 0x74, 0x78, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x64, 0xc8, 0x18, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0x41, 0xff, 0xd5, 0x85, 0xc0, 0x78, 0x6c, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x8d, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe1, 0x01, 0x49, 0x89, 0x04, 0xce, 0x49, 0x8d, 0x34, 0xce, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x10, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x10, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0x8b, 0x7b, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0xb5, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x85, 0x49, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x7b, 0x20, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0x41, 0xff, 0xd5, 0x85, 0xc0, 0x78, 0x94, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x85, 0x28, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe1, 0xff, 0xd0, 0xe9, 0x58, 0xff, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_LOAD_NAME_code_holes[21] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5e, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xdd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x56},
    {0x18a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x199, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1cc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_GetItemRef, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x220, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x22a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00name '%.200s' is not defined\x00no locals found\x00"
// 66: 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_LOAD_NAME_data_body[105] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_LOAD_NAME_data_holes[1];

// _LOAD_ATTR_SLOTplus_LOAD_SUPER_ATTR_ATTR
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_LOAD_SUPER_ATTR_ATTR.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 18: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001a:  R_X86_64_64  _JIT_OPERAND
// 22: 0f b7 c0                      movzwl  %ax, %eax
// 25: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 29: 4d 85 ed                      testq   %r13, %r13
// 2c: 74 1a                         je      0x48 <_JIT_ENTRY+0x48>
// 2e: 49 89 d6                      movq    %rdx, %r14
// 31: 41 8b 45 00                   movl    (%r13), %eax
// 35: ff c0                         incl    %eax
// 37: 75 17                         jne     0x50 <_JIT_ENTRY+0x50>
// 39: 49 8b 04 24                   movq    (%r12), %rax
// 3d: 48 85 c0                      testq   %rax, %rax
// 40: 7e 27                         jle     0x69 <_JIT_ENTRY+0x69>
// 42: 85 c0                         testl   %eax, %eax
// 44: 79 49                         jns     0x8f <_JIT_ENTRY+0x8f>
// 46: eb 68                         jmp     0xb0 <_JIT_ENTRY+0xb0>
// 48: 4c 89 f8                      movq    %r15, %rax
// 4b: e9 ae 00 00 00                jmp     0xfe <_JIT_ENTRY+0xfe>
// 50: 41 89 45 00                   movl    %eax, (%r13)
// 54: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000056:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 5e: ff d0                         callq   *%rax
// 60: 49 8b 04 24                   movq    (%r12), %rax
// 64: 48 85 c0                      testq   %rax, %rax
// 67: 7f d9                         jg      0x42 <_JIT_ENTRY+0x42>
// 69: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000006b:  R_X86_64_64  .rodata.str1.1
// 73: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000075:  R_X86_64_64  _Py_NegativeRefcount
// 7d: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 82: 4c 89 e2                      movq    %r12, %rdx
// 85: ff d0                         callq   *%rax
// 87: 49 8b 04 24                   movq    (%r12), %rax
// 8b: 85 c0                         testl   %eax, %eax
// 8d: 78 21                         js      0xb0 <_JIT_ENTRY+0xb0>
// 8f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000091:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 99: ff d0                         callq   *%rax
// 9b: 49 ff 0c 24                   decq    (%r12)
// 9f: 75 0f                         jne     0xb0 <_JIT_ENTRY+0xb0>
// a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a3:  R_X86_64_64  _Py_Dealloc
// ab: 4c 89 e7                      movq    %r12, %rdi
// ae: ff d0                         callq   *%rax
// b0: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b6:  R_X86_64_64  _JIT_OPARG
// be: a8 01                         testb   $0x1, %al
// c0: 74 07                         je      0xc9 <_JIT_ENTRY+0xc9>
// c2: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// c9: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 00000000000000cb:  R_X86_64_64  _JIT_OPARG
// d3: 41 83 e4 01                   andl    $0x1, %r12d
// d7: 4b 8d 04 e7                   leaq    (%r15,%r12,8), %rax
// db: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000000dd:  R_X86_64_64  PySuper_Type
// e5: 4f 39 6c e7 e8                cmpq    %r13, -0x18(%r15,%r12,8)
// ea: 75 12                         jne     0xfe <_JIT_ENTRY+0xfe>
// ec: 4b 8b 6c e7 f0                movq    -0x10(%r15,%r12,8), %rbp
// f1: 48 8b 4d 08                   movq    0x8(%rbp), %rcx
// f5: f6 81 ab 00 00 00 80          testb   $-0x80, 0xab(%rcx)
// fc: 75 36                         jne     0x134 <_JIT_ENTRY+0x134>
// fe: 48 29 d8                      subq    %rbx, %rax
// 101: 48 83 c0 b8                   addq    $-0x48, %rax
// 105: 48 c1 e8 03                   shrq    $0x3, %rax
// 109: 89 43 40                      movl    %eax, 0x40(%rbx)
// 10c: 48 8b 03                      movq    (%rbx), %rax
// 10f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000111:  R_X86_64_64  _JIT_TARGET
// 119: 89 c9                         movl    %ecx, %ecx
// 11b: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 11f: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 125: 48 83 c4 18                   addq    $0x18, %rsp
// 129: 5b                            popq    %rbx
// 12a: 41 5c                         popq    %r12
// 12c: 41 5d                         popq    %r13
// 12e: 41 5e                         popq    %r14
// 130: 41 5f                         popq    %r15
// 132: 5d                            popq    %rbp
// 133: c3                            retq
// 134: 4b 8b 74 e7 f8                movq    -0x8(%r15,%r12,8), %rsi
// 139: 48 8b 03                      movq    (%rbx), %rax
// 13c: 48 8b 40 20                   movq    0x20(%rax), %rax
// 140: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000142:  R_X86_64_64  _JIT_OPARG
// 14a: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 150: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 155: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000157:  R_X86_64_64  _PySuper_Lookup
// 15f: 48 89 ef                      movq    %rbp, %rdi
// 162: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 167: 31 c9                         xorl    %ecx, %ecx
// 169: ff d0                         callq   *%rax
// 16b: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 170: 49 8b 45 00                   movq    (%r13), %rax
// 174: 48 85 c0                      testq   %rax, %rax
// 177: 7f 22                         jg      0x19b <_JIT_ENTRY+0x19b>
// 179: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000017b:  R_X86_64_64  .rodata.str1.1
// 183: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000185:  R_X86_64_64  _Py_NegativeRefcount
// 18d: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// 192: 4c 89 ea                      movq    %r13, %rdx
// 195: ff d0                         callq   *%rax
// 197: 49 8b 45 00                   movq    (%r13), %rax
// 19b: 85 c0                         testl   %eax, %eax
// 19d: 78 28                         js      0x1c7 <_JIT_ENTRY+0x1c7>
// 19f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1a9: ff d0                         callq   *%rax
// 1ab: 49 ff 4d 00                   decq    (%r13)
// 1af: 75 16                         jne     0x1c7 <_JIT_ENTRY+0x1c7>
// 1b1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b3:  R_X86_64_64  PySuper_Type
// 1bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bd:  R_X86_64_64  _Py_Dealloc
// 1c5: ff d0                         callq   *%rax
// 1c7: 48 8b 45 00                   movq    (%rbp), %rax
// 1cb: 48 85 c0                      testq   %rax, %rax
// 1ce: 7f 22                         jg      0x1f2 <_JIT_ENTRY+0x1f2>
// 1d0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d2:  R_X86_64_64  .rodata.str1.1
// 1da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dc:  R_X86_64_64  _Py_NegativeRefcount
// 1e4: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 1e9: 48 89 ea                      movq    %rbp, %rdx
// 1ec: ff d0                         callq   *%rax
// 1ee: 48 8b 45 00                   movq    (%rbp), %rax
// 1f2: 85 c0                         testl   %eax, %eax
// 1f4: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 1f9: 78 21                         js      0x21c <_JIT_ENTRY+0x21c>
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 205: ff d0                         callq   *%rax
// 207: 48 ff 4d 00                   decq    (%rbp)
// 20b: 75 0f                         jne     0x21c <_JIT_ENTRY+0x21c>
// 20d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020f:  R_X86_64_64  _Py_Dealloc
// 217: 48 89 ef                      movq    %rbp, %rdi
// 21a: ff d0                         callq   *%rax
// 21c: 49 8b 45 00                   movq    (%r13), %rax
// 220: 48 85 c0                      testq   %rax, %rax
// 223: 7f 22                         jg      0x247 <_JIT_ENTRY+0x247>
// 225: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000227:  R_X86_64_64  .rodata.str1.1
// 22f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000231:  R_X86_64_64  _Py_NegativeRefcount
// 239: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 23e: 4c 89 ea                      movq    %r13, %rdx
// 241: ff d0                         callq   *%rax
// 243: 49 8b 45 00                   movq    (%r13), %rax
// 247: 85 c0                         testl   %eax, %eax
// 249: 78 21                         js      0x26c <_JIT_ENTRY+0x26c>
// 24b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 255: ff d0                         callq   *%rax
// 257: 49 ff 4d 00                   decq    (%r13)
// 25b: 75 0f                         jne     0x26c <_JIT_ENTRY+0x26c>
// 25d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025f:  R_X86_64_64  _Py_Dealloc
// 267: 4c 89 ef                      movq    %r13, %rdi
// 26a: ff d0                         callq   *%rax
// 26c: 4b 8d 04 e7                   leaq    (%r15,%r12,8), %rax
// 270: 48 83 c0 e8                   addq    $-0x18, %rax
// 274: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 279: 48 85 c9                      testq   %rcx, %rcx
// 27c: 74 2b                         je      0x2a9 <_JIT_ENTRY+0x2a9>
// 27e: 4b 8d 34 e7                   leaq    (%r15,%r12,8), %rsi
// 282: 48 83 c6 f0                   addq    $-0x10, %rsi
// 286: 48 89 08                      movq    %rcx, (%rax)
// 289: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028b:  R_X86_64_64  _JIT_CONTINUE
// 293: 48 89 df                      movq    %rbx, %rdi
// 296: 4c 89 f2                      movq    %r14, %rdx
// 299: 48 83 c4 18                   addq    $0x18, %rsp
// 29d: 5b                            popq    %rbx
// 29e: 41 5c                         popq    %r12
// 2a0: 41 5d                         popq    %r13
// 2a2: 41 5e                         popq    %r14
// 2a4: 41 5f                         popq    %r15
// 2a6: 5d                            popq    %rbp
// 2a7: ff e0                         jmpq    *%rax
// 2a9: 48 29 d8                      subq    %rbx, %rax
// 2ac: 48 83 c0 b8                   addq    $-0x48, %rax
// 2b0: 48 c1 e8 03                   shrq    $0x3, %rax
// 2b4: 89 43 40                      movl    %eax, 0x40(%rbx)
// 2b7: 31 c0                         xorl    %eax, %eax
// 2b9: e9 67 fe ff ff                jmp     0x125 <_JIT_ENTRY+0x125>
// 2be: 
static const unsigned char _LOAD_ATTR_SLOTplus_LOAD_SUPER_ATTR_ATTR_code_body[703] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1a, 0x49, 0x89, 0xd6, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x17, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x27, 0x85, 0xc0, 0x79, 0x49, 0xeb, 0x68, 0x4c, 0x89, 0xf8, 0xe9, 0xae, 0x00, 0x00, 0x00, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xd9, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x83, 0xe4, 0x01, 0x4b, 0x8d, 0x04, 0xe7, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4f, 0x39, 0x6c, 0xe7, 0xe8, 0x75, 0x12, 0x4b, 0x8b, 0x6c, 0xe7, 0xf0, 0x48, 0x8b, 0x4d, 0x08, 0xf6, 0x81, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x36, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4b, 0x8b, 0x74, 0xe7, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x48, 0x89, 0x74, 0x24, 0x10, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xe7, 0x48, 0x83, 0xc0, 0xe8, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x74, 0x2b, 0x4b, 0x8d, 0x34, 0xe7, 0x48, 0x83, 0xc6, 0xf0, 0x48, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x67, 0xfe, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_LOAD_SUPER_ATTR_ATTR_code_holes[27] = {
    {0x1a, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x56, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x75, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xb6, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xdd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x111, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x157, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x185, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x1bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x20f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x227, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x231, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x24d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x25f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x28b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_LOAD_SUPER_ATTR_ATTR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_LOAD_SUPER_ATTR_ATTR_data_holes[1];

// _LOAD_ATTR_SLOTplus_LOAD_SUPER_ATTR_METHOD
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_LOAD_SUPER_ATTR_METHOD.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 18: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001a:  R_X86_64_64  _JIT_OPERAND
// 22: 0f b7 c0                      movzwl  %ax, %eax
// 25: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 29: 4d 85 ed                      testq   %r13, %r13
// 2c: 74 1a                         je      0x48 <_JIT_ENTRY+0x48>
// 2e: 49 89 d7                      movq    %rdx, %r15
// 31: 41 8b 45 00                   movl    (%r13), %eax
// 35: ff c0                         incl    %eax
// 37: 75 17                         jne     0x50 <_JIT_ENTRY+0x50>
// 39: 49 8b 04 24                   movq    (%r12), %rax
// 3d: 48 85 c0                      testq   %rax, %rax
// 40: 7e 27                         jle     0x69 <_JIT_ENTRY+0x69>
// 42: 85 c0                         testl   %eax, %eax
// 44: 79 49                         jns     0x8f <_JIT_ENTRY+0x8f>
// 46: eb 68                         jmp     0xb0 <_JIT_ENTRY+0xb0>
// 48: 4c 89 f0                      movq    %r14, %rax
// 4b: e9 ae 00 00 00                jmp     0xfe <_JIT_ENTRY+0xfe>
// 50: 41 89 45 00                   movl    %eax, (%r13)
// 54: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000056:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 5e: ff d0                         callq   *%rax
// 60: 49 8b 04 24                   movq    (%r12), %rax
// 64: 48 85 c0                      testq   %rax, %rax
// 67: 7f d9                         jg      0x42 <_JIT_ENTRY+0x42>
// 69: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000006b:  R_X86_64_64  .rodata.str1.1
// 73: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000075:  R_X86_64_64  _Py_NegativeRefcount
// 7d: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 82: 4c 89 e2                      movq    %r12, %rdx
// 85: ff d0                         callq   *%rax
// 87: 49 8b 04 24                   movq    (%r12), %rax
// 8b: 85 c0                         testl   %eax, %eax
// 8d: 78 21                         js      0xb0 <_JIT_ENTRY+0xb0>
// 8f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000091:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 99: ff d0                         callq   *%rax
// 9b: 49 ff 0c 24                   decq    (%r12)
// 9f: 75 0f                         jne     0xb0 <_JIT_ENTRY+0xb0>
// a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a3:  R_X86_64_64  _Py_Dealloc
// ab: 4c 89 e7                      movq    %r12, %rdi
// ae: ff d0                         callq   *%rax
// b0: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b6:  R_X86_64_64  _JIT_OPARG
// be: a8 01                         testb   $0x1, %al
// c0: 74 07                         je      0xc9 <_JIT_ENTRY+0xc9>
// c2: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// c9: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 00000000000000cb:  R_X86_64_64  _JIT_OPARG
// d3: 41 83 e4 01                   andl    $0x1, %r12d
// d7: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// db: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000000dd:  R_X86_64_64  PySuper_Type
// e5: 4f 39 6c e6 e8                cmpq    %r13, -0x18(%r14,%r12,8)
// ea: 75 12                         jne     0xfe <_JIT_ENTRY+0xfe>
// ec: 4b 8b 6c e6 f0                movq    -0x10(%r14,%r12,8), %rbp
// f1: 48 8b 4d 08                   movq    0x8(%rbp), %rcx
// f5: f6 81 ab 00 00 00 80          testb   $-0x80, 0xab(%rcx)
// fc: 75 36                         jne     0x134 <_JIT_ENTRY+0x134>
// fe: 48 29 d8                      subq    %rbx, %rax
// 101: 48 83 c0 b8                   addq    $-0x48, %rax
// 105: 48 c1 e8 03                   shrq    $0x3, %rax
// 109: 89 43 40                      movl    %eax, 0x40(%rbx)
// 10c: 48 8b 03                      movq    (%rbx), %rax
// 10f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000111:  R_X86_64_64  _JIT_TARGET
// 119: 89 c9                         movl    %ecx, %ecx
// 11b: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 11f: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 125: 48 83 c4 18                   addq    $0x18, %rsp
// 129: 5b                            popq    %rbx
// 12a: 41 5c                         popq    %r12
// 12c: 41 5d                         popq    %r13
// 12e: 41 5e                         popq    %r14
// 130: 41 5f                         popq    %r15
// 132: 5d                            popq    %rbp
// 133: c3                            retq
// 134: 4b 8b 74 e6 f8                movq    -0x8(%r14,%r12,8), %rsi
// 139: 48 8b 03                      movq    (%rbx), %rax
// 13c: 48 8b 40 20                   movq    0x20(%rax), %rax
// 140: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000142:  R_X86_64_64  _JIT_OPARG
// 14a: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 150: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 155: c7 44 24 04 00 00 00 00       movl    $0x0, 0x4(%rsp)
// 15d: 48 8b 46 08                   movq    0x8(%rsi), %rax
// 161: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000163:  R_X86_64_64  PyObject_GenericGetAttr
// 16b: 31 ff                         xorl    %edi, %edi
// 16d: 48 39 88 90 00 00 00          cmpq    %rcx, 0x90(%rax)
// 174: 48 8d 4c 24 04                leaq    0x4(%rsp), %rcx
// 179: 48 0f 45 cf                   cmovneq %rdi, %rcx
// 17d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017f:  R_X86_64_64  _PySuper_Lookup
// 187: 48 89 ef                      movq    %rbp, %rdi
// 18a: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 18f: ff d0                         callq   *%rax
// 191: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 196: 49 8b 45 00                   movq    (%r13), %rax
// 19a: 48 85 c0                      testq   %rax, %rax
// 19d: 7f 22                         jg      0x1c1 <_JIT_ENTRY+0x1c1>
// 19f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a1:  R_X86_64_64  .rodata.str1.1
// 1a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ab:  R_X86_64_64  _Py_NegativeRefcount
// 1b3: be 18 06 00 00                movl    $0x618, %esi            # imm = 0x618
// 1b8: 4c 89 ea                      movq    %r13, %rdx
// 1bb: ff d0                         callq   *%rax
// 1bd: 49 8b 45 00                   movq    (%r13), %rax
// 1c1: 85 c0                         testl   %eax, %eax
// 1c3: 78 28                         js      0x1ed <_JIT_ENTRY+0x1ed>
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1cf: ff d0                         callq   *%rax
// 1d1: 49 ff 4d 00                   decq    (%r13)
// 1d5: 75 16                         jne     0x1ed <_JIT_ENTRY+0x1ed>
// 1d7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d9:  R_X86_64_64  PySuper_Type
// 1e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e3:  R_X86_64_64  _Py_Dealloc
// 1eb: ff d0                         callq   *%rax
// 1ed: 48 8b 45 00                   movq    (%rbp), %rax
// 1f1: 48 85 c0                      testq   %rax, %rax
// 1f4: 7f 22                         jg      0x218 <_JIT_ENTRY+0x218>
// 1f6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f8:  R_X86_64_64  .rodata.str1.1
// 200: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000202:  R_X86_64_64  _Py_NegativeRefcount
// 20a: be 19 06 00 00                movl    $0x619, %esi            # imm = 0x619
// 20f: 48 89 ea                      movq    %rbp, %rdx
// 212: ff d0                         callq   *%rax
// 214: 48 8b 45 00                   movq    (%rbp), %rax
// 218: 85 c0                         testl   %eax, %eax
// 21a: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 21f: 78 21                         js      0x242 <_JIT_ENTRY+0x242>
// 221: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000223:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 22b: ff d0                         callq   *%rax
// 22d: 48 ff 4d 00                   decq    (%rbp)
// 231: 75 0f                         jne     0x242 <_JIT_ENTRY+0x242>
// 233: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000235:  R_X86_64_64  _Py_Dealloc
// 23d: 48 89 ef                      movq    %rbp, %rdi
// 240: ff d0                         callq   *%rax
// 242: 48 83 7c 24 08 00             cmpq    $0x0, 0x8(%rsp)
// 248: 0f 84 a1 00 00 00             je      0x2ef <_JIT_ENTRY+0x2ef>
// 24e: 4b 8d 2c e6                   leaq    (%r14,%r12,8), %rbp
// 252: 48 83 c5 f8                   addq    $-0x8, %rbp
// 256: 83 7c 24 04 00                cmpl    $0x0, 0x4(%rsp)
// 25b: 75 53                         jne     0x2b0 <_JIT_ENTRY+0x2b0>
// 25d: 49 8b 45 00                   movq    (%r13), %rax
// 261: 48 85 c0                      testq   %rax, %rax
// 264: 7f 22                         jg      0x288 <_JIT_ENTRY+0x288>
// 266: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000268:  R_X86_64_64  .rodata.str1.1
// 270: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000272:  R_X86_64_64  _Py_NegativeRefcount
// 27a: be 21 06 00 00                movl    $0x621, %esi            # imm = 0x621
// 27f: 4c 89 ea                      movq    %r13, %rdx
// 282: ff d0                         callq   *%rax
// 284: 49 8b 45 00                   movq    (%r13), %rax
// 288: 85 c0                         testl   %eax, %eax
// 28a: 78 21                         js      0x2ad <_JIT_ENTRY+0x2ad>
// 28c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 296: ff d0                         callq   *%rax
// 298: 49 ff 4d 00                   decq    (%r13)
// 29c: 75 0f                         jne     0x2ad <_JIT_ENTRY+0x2ad>
// 29e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a0:  R_X86_64_64  _Py_Dealloc
// 2a8: 4c 89 ef                      movq    %r13, %rdi
// 2ab: ff d0                         callq   *%rax
// 2ad: 45 31 ed                      xorl    %r13d, %r13d
// 2b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b2:  R_X86_64_64  _JIT_OPARG
// 2ba: 83 e0 01                      andl    $0x1, %eax
// 2bd: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 2c2: 49 89 4c c6 e8                movq    %rcx, -0x18(%r14,%rax,8)
// 2c7: 4d 89 6c c6 f0                movq    %r13, -0x10(%r14,%rax,8)
// 2cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ce:  R_X86_64_64  _JIT_CONTINUE
// 2d6: 48 89 df                      movq    %rbx, %rdi
// 2d9: 48 89 ee                      movq    %rbp, %rsi
// 2dc: 4c 89 fa                      movq    %r15, %rdx
// 2df: 48 83 c4 18                   addq    $0x18, %rsp
// 2e3: 5b                            popq    %rbx
// 2e4: 41 5c                         popq    %r12
// 2e6: 41 5d                         popq    %r13
// 2e8: 41 5e                         popq    %r14
// 2ea: 41 5f                         popq    %r15
// 2ec: 5d                            popq    %rbp
// 2ed: ff e0                         jmpq    *%rax
// 2ef: 49 8b 45 00                   movq    (%r13), %rax
// 2f3: 48 85 c0                      testq   %rax, %rax
// 2f6: 7f 22                         jg      0x31a <_JIT_ENTRY+0x31a>
// 2f8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002fa:  R_X86_64_64  .rodata.str1.1
// 302: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000304:  R_X86_64_64  _Py_NegativeRefcount
// 30c: be 1b 06 00 00                movl    $0x61b, %esi            # imm = 0x61B
// 311: 4c 89 ea                      movq    %r13, %rdx
// 314: ff d0                         callq   *%rax
// 316: 49 8b 45 00                   movq    (%r13), %rax
// 31a: 4f 8d 34 e6                   leaq    (%r14,%r12,8), %r14
// 31e: 49 83 c6 e8                   addq    $-0x18, %r14
// 322: 85 c0                         testl   %eax, %eax
// 324: 78 21                         js      0x347 <_JIT_ENTRY+0x347>
// 326: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000328:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 330: ff d0                         callq   *%rax
// 332: 49 ff 4d 00                   decq    (%r13)
// 336: 75 0f                         jne     0x347 <_JIT_ENTRY+0x347>
// 338: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033a:  R_X86_64_64  _Py_Dealloc
// 342: 4c 89 ef                      movq    %r13, %rdi
// 345: ff d0                         callq   *%rax
// 347: 49 29 de                      subq    %rbx, %r14
// 34a: 49 83 c6 b8                   addq    $-0x48, %r14
// 34e: 49 c1 ee 03                   shrq    $0x3, %r14
// 352: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 356: 31 c0                         xorl    %eax, %eax
// 358: e9 c8 fd ff ff                jmp     0x125 <_JIT_ENTRY+0x125>
// 35d: 
static const unsigned char _LOAD_ATTR_SLOTplus_LOAD_SUPER_ATTR_METHOD_code_body[862] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1a, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x17, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x27, 0x85, 0xc0, 0x79, 0x49, 0xeb, 0x68, 0x4c, 0x89, 0xf0, 0xe9, 0xae, 0x00, 0x00, 0x00, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xd9, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x83, 0xe4, 0x01, 0x4b, 0x8d, 0x04, 0xe6, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4f, 0x39, 0x6c, 0xe6, 0xe8, 0x75, 0x12, 0x4b, 0x8b, 0x6c, 0xe6, 0xf0, 0x48, 0x8b, 0x4d, 0x08, 0xf6, 0x81, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x36, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4b, 0x8b, 0x74, 0xe6, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0xc7, 0x44, 0x24, 0x04, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x46, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0x48, 0x39, 0x88, 0x90, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x4c, 0x24, 0x04, 0x48, 0x0f, 0x45, 0xcf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x48, 0x89, 0x74, 0x24, 0x10, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x18, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x19, 0x06, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x83, 0x7c, 0x24, 0x08, 0x00, 0x0f, 0x84, 0xa1, 0x00, 0x00, 0x00, 0x4b, 0x8d, 0x2c, 0xe6, 0x48, 0x83, 0xc5, 0xf8, 0x83, 0x7c, 0x24, 0x04, 0x00, 0x75, 0x53, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x21, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x45, 0x31, 0xed, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x49, 0x89, 0x4c, 0xc6, 0xe8, 0x4d, 0x89, 0x6c, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x89, 0xee, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x1b, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x4f, 0x8d, 0x34, 0xe6, 0x49, 0x83, 0xc6, 0xe8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xc8, 0xfd, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_LOAD_SUPER_ATTR_METHOD_code_holes[33] = {
    {0x1a, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x56, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x75, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xb6, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xdd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x111, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GenericGetAttr, 0x0},
    {0x17f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x1a1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x1e3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1f8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x223, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x268, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x272, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x28e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2b2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2ce, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2fa, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x304, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x328, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x33a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_LOAD_SUPER_ATTR_METHOD_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_LOAD_SUPER_ATTR_METHOD_data_holes[1];

// _LOAD_ATTR_SLOTplus_MAKE_CELL
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_MAKE_CELL.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f7                      movq    %rsi, %r15
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 74 1d                         je      0x46 <_JIT_ENTRY+0x46>
// 29: 49 89 d6                      movq    %rdx, %r14
// 2c: 41 8b 45 00                   movl    (%r13), %eax
// 30: ff c0                         incl    %eax
// 32: 75 3f                         jne     0x73 <_JIT_ENTRY+0x73>
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 4f                         jle     0x8c <_JIT_ENTRY+0x8c>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 71                         jns     0xb2 <_JIT_ENTRY+0xb2>
// 41: e9 8d 00 00 00                jmp     0xd3 <_JIT_ENTRY+0xd3>
// 46: 49 29 df                      subq    %rbx, %r15
// 49: 49 83 c7 b8                   addq    $-0x48, %r15
// 4d: 49 c1 ef 03                   shrq    $0x3, %r15
// 51: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 55: 48 8b 03                      movq    (%rbx), %rax
// 58: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005a:  R_X86_64_64  _JIT_TARGET
// 62: 89 c9                         movl    %ecx, %ecx
// 64: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 68: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 6e: e9 38 01 00 00                jmp     0x1ab <_JIT_ENTRY+0x1ab>
// 73: 41 89 45 00                   movl    %eax, (%r13)
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 81: ff d0                         callq   *%rax
// 83: 49 8b 04 24                   movq    (%r12), %rax
// 87: 48 85 c0                      testq   %rax, %rax
// 8a: 7f b1                         jg      0x3d <_JIT_ENTRY+0x3d>
// 8c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008e:  R_X86_64_64  .rodata.str1.1
// 96: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000098:  R_X86_64_64  _Py_NegativeRefcount
// a0: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a5: 4c 89 e2                      movq    %r12, %rdx
// a8: ff d0                         callq   *%rax
// aa: 49 8b 04 24                   movq    (%r12), %rax
// ae: 85 c0                         testl   %eax, %eax
// b0: 78 21                         js      0xd3 <_JIT_ENTRY+0xd3>
// b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: ff d0                         callq   *%rax
// be: 49 ff 0c 24                   decq    (%r12)
// c2: 75 0f                         jne     0xd3 <_JIT_ENTRY+0xd3>
// c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c6:  R_X86_64_64  _Py_Dealloc
// ce: 4c 89 e7                      movq    %r12, %rdi
// d1: ff d0                         callq   *%rax
// d3: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d9:  R_X86_64_64  _JIT_OPARG
// e1: a8 01                         testb   $0x1, %al
// e3: 74 07                         je      0xec <_JIT_ENTRY+0xec>
// e5: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// ec: 0f b7 c8                      movzwl  %ax, %ecx
// ef: 83 e0 01                      andl    $0x1, %eax
// f2: 4d 8d 3c c7                   leaq    (%r15,%rax,8), %r15
// f6: 48 8b 7c cb 48                movq    0x48(%rbx,%rcx,8), %rdi
// fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fd:  R_X86_64_64  PyCell_New
// 105: ff d0                         callq   *%rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 0f 84 8a 00 00 00             je      0x19a <_JIT_ENTRY+0x19a>
// 110: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000112:  R_X86_64_64  _JIT_OPARG
// 11a: 0f b7 c9                      movzwl  %cx, %ecx
// 11d: 4c 8b 64 cb 48                movq    0x48(%rbx,%rcx,8), %r12
// 122: 48 89 44 cb 48                movq    %rax, 0x48(%rbx,%rcx,8)
// 127: 4d 85 e4                      testq   %r12, %r12
// 12a: 74 50                         je      0x17c <_JIT_ENTRY+0x17c>
// 12c: 49 8b 04 24                   movq    (%r12), %rax
// 130: 48 85 c0                      testq   %rax, %rax
// 133: 7f 22                         jg      0x157 <_JIT_ENTRY+0x157>
// 135: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000137:  R_X86_64_64  .rodata.str1.1+0x39
// 13f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000141:  R_X86_64_64  _Py_NegativeRefcount
// 149: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 14e: 4c 89 e2                      movq    %r12, %rdx
// 151: ff d0                         callq   *%rax
// 153: 49 8b 04 24                   movq    (%r12), %rax
// 157: 85 c0                         testl   %eax, %eax
// 159: 78 21                         js      0x17c <_JIT_ENTRY+0x17c>
// 15b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 165: ff d0                         callq   *%rax
// 167: 49 ff 0c 24                   decq    (%r12)
// 16b: 75 0f                         jne     0x17c <_JIT_ENTRY+0x17c>
// 16d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016f:  R_X86_64_64  _Py_Dealloc
// 177: 4c 89 e7                      movq    %r12, %rdi
// 17a: ff d0                         callq   *%rax
// 17c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017e:  R_X86_64_64  _JIT_CONTINUE
// 186: 48 89 df                      movq    %rbx, %rdi
// 189: 4c 89 fe                      movq    %r15, %rsi
// 18c: 4c 89 f2                      movq    %r14, %rdx
// 18f: 5b                            popq    %rbx
// 190: 41 5c                         popq    %r12
// 192: 41 5d                         popq    %r13
// 194: 41 5e                         popq    %r14
// 196: 41 5f                         popq    %r15
// 198: ff e0                         jmpq    *%rax
// 19a: 49 29 df                      subq    %rbx, %r15
// 19d: 49 83 c7 b8                   addq    $-0x48, %r15
// 1a1: 49 c1 ef 03                   shrq    $0x3, %r15
// 1a5: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 1a9: 31 c0                         xorl    %eax, %eax
// 1ab: 5b                            popq    %rbx
// 1ac: 41 5c                         popq    %r12
// 1ae: 41 5d                         popq    %r13
// 1b0: 41 5e                         popq    %r14
// 1b2: 41 5f                         popq    %r15
// 1b4: c3                            retq
// 1b5: 
static const unsigned char _LOAD_ATTR_SLOTplus_MAKE_CELL_code_body[438] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1d, 0x49, 0x89, 0xd6, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x3f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4f, 0x85, 0xc0, 0x79, 0x71, 0xe9, 0x8d, 0x00, 0x00, 0x00, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x38, 0x01, 0x00, 0x00, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x83, 0xe0, 0x01, 0x4d, 0x8d, 0x3c, 0xc7, 0x48, 0x8b, 0x7c, 0xcb, 0x48, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x64, 0xcb, 0x48, 0x48, 0x89, 0x44, 0xcb, 0x48, 0x4d, 0x85, 0xe4, 0x74, 0x50, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _LOAD_ATTR_SLOTplus_MAKE_CELL_code_holes[16] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xc6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xfd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCell_New, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x137, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x141, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x17e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_MAKE_CELL_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_MAKE_CELL_data_holes[1];

// _LOAD_ATTR_SLOTplus_MAKE_FUNCTION
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_MAKE_FUNCTION.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 26: 4d 85 ed                      testq   %r13, %r13
// 29: 74 27                         je      0x52 <_JIT_ENTRY+0x52>
// 2b: 49 89 d7                      movq    %rdx, %r15
// 2e: 41 8b 45 00                   movl    (%r13), %eax
// 32: ff c0                         incl    %eax
// 34: 75 49                         jne     0x7f <_JIT_ENTRY+0x7f>
// 36: 49 8b 04 24                   movq    (%r12), %rax
// 3a: 48 85 c0                      testq   %rax, %rax
// 3d: 7e 59                         jle     0x98 <_JIT_ENTRY+0x98>
// 3f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000041:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 49: 85 c0                         testl   %eax, %eax
// 4b: 79 7b                         jns     0xc8 <_JIT_ENTRY+0xc8>
// 4d: e9 82 00 00 00                jmp     0xd4 <_JIT_ENTRY+0xd4>
// 52: 49 29 de                      subq    %rbx, %r14
// 55: 49 83 c6 b8                   addq    $-0x48, %r14
// 59: 49 c1 ee 03                   shrq    $0x3, %r14
// 5d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 61: 48 8b 03                      movq    (%rbx), %rax
// 64: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000066:  R_X86_64_64  _JIT_TARGET
// 6e: 89 c9                         movl    %ecx, %ecx
// 70: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 74: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 7a: e9 88 01 00 00                jmp     0x207 <_JIT_ENTRY+0x207>
// 7f: 41 89 45 00                   movl    %eax, (%r13)
// 83: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000085:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 8d: ff d0                         callq   *%rax
// 8f: 49 8b 04 24                   movq    (%r12), %rax
// 93: 48 85 c0                      testq   %rax, %rax
// 96: 7f a7                         jg      0x3f <_JIT_ENTRY+0x3f>
// 98: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000009a:  R_X86_64_64  .rodata.str1.1
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _Py_NegativeRefcount
// ac: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// b1: 4c 89 e2                      movq    %r12, %rdx
// b4: ff d0                         callq   *%rax
// b6: 49 8b 04 24                   movq    (%r12), %rax
// ba: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000bc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c4: 85 c0                         testl   %eax, %eax
// c6: 78 0c                         js      0xd4 <_JIT_ENTRY+0xd4>
// c8: ff d1                         callq   *%rcx
// ca: 49 ff 0c 24                   decq    (%r12)
// ce: 0f 84 dd 00 00 00             je      0x1b1 <_JIT_ENTRY+0x1b1>
// d4: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// d8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000da:  R_X86_64_64  _JIT_OPARG
// e2: a8 01                         testb   $0x1, %al
// e4: 74 07                         je      0xed <_JIT_ENTRY+0xed>
// e6: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// ed: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000000ef:  R_X86_64_64  _JIT_OPARG
// f7: 83 e5 01                      andl    $0x1, %ebp
// fa: 4d 8b 6c ee f8                movq    -0x8(%r14,%rbp,8), %r13
// ff: 48 8b 73 18                   movq    0x18(%rbx), %rsi
// 103: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000105:  R_X86_64_64  PyFunction_New
// 10d: 4c 89 ef                      movq    %r13, %rdi
// 110: ff d0                         callq   *%rax
// 112: 49 89 c4                      movq    %rax, %r12
// 115: 49 8b 45 00                   movq    (%r13), %rax
// 119: 48 85 c0                      testq   %rax, %rax
// 11c: 7e 06                         jle     0x124 <_JIT_ENTRY+0x124>
// 11e: 85 c0                         testl   %eax, %eax
// 120: 79 28                         jns     0x14a <_JIT_ENTRY+0x14a>
// 122: eb 38                         jmp     0x15c <_JIT_ENTRY+0x15c>
// 124: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000126:  R_X86_64_64  .rodata.str1.1
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  _Py_NegativeRefcount
// 138: be 4e 0c 00 00                movl    $0xc4e, %esi            # imm = 0xC4E
// 13d: 4c 89 ea                      movq    %r13, %rdx
// 140: ff d0                         callq   *%rax
// 142: 49 8b 45 00                   movq    (%r13), %rax
// 146: 85 c0                         testl   %eax, %eax
// 148: 78 12                         js      0x15c <_JIT_ENTRY+0x15c>
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 154: ff d0                         callq   *%rax
// 156: 49 ff 4d 00                   decq    (%r13)
// 15a: 74 7f                         je      0x1db <_JIT_ENTRY+0x1db>
// 15c: 49 8d 2c ee                   leaq    (%r14,%rbp,8), %rbp
// 160: 4d 85 e4                      testq   %r12, %r12
// 163: 0f 84 8e 00 00 00             je      0x1f7 <_JIT_ENTRY+0x1f7>
// 169: 41 8b 75 5c                   movl    0x5c(%r13), %esi
// 16d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016f:  R_X86_64_64  _PyFunction_SetVersion
// 177: 4c 89 e7                      movq    %r12, %rdi
// 17a: ff d0                         callq   *%rax
// 17c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017e:  R_X86_64_64  _JIT_OPARG
// 186: 83 e0 01                      andl    $0x1, %eax
// 189: 4d 89 64 c6 f8                movq    %r12, -0x8(%r14,%rax,8)
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _JIT_CONTINUE
// 198: 48 89 df                      movq    %rbx, %rdi
// 19b: 48 89 ee                      movq    %rbp, %rsi
// 19e: 4c 89 fa                      movq    %r15, %rdx
// 1a1: 48 83 c4 08                   addq    $0x8, %rsp
// 1a5: 5b                            popq    %rbx
// 1a6: 41 5c                         popq    %r12
// 1a8: 41 5d                         popq    %r13
// 1aa: 41 5e                         popq    %r14
// 1ac: 41 5f                         popq    %r15
// 1ae: 5d                            popq    %rbp
// 1af: ff e0                         jmpq    *%rax
// 1b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b3:  R_X86_64_64  _Py_Dealloc
// 1bb: 4c 89 e7                      movq    %r12, %rdi
// 1be: ff d0                         callq   *%rax
// 1c0: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 1c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c6:  R_X86_64_64  _JIT_OPARG
// 1ce: a8 01                         testb   $0x1, %al
// 1d0: 0f 85 10 ff ff ff             jne     0xe6 <_JIT_ENTRY+0xe6>
// 1d6: e9 12 ff ff ff                jmp     0xed <_JIT_ENTRY+0xed>
// 1db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dd:  R_X86_64_64  _Py_Dealloc
// 1e5: 4c 89 ef                      movq    %r13, %rdi
// 1e8: ff d0                         callq   *%rax
// 1ea: 49 8d 2c ee                   leaq    (%r14,%rbp,8), %rbp
// 1ee: 4d 85 e4                      testq   %r12, %r12
// 1f1: 0f 85 72 ff ff ff             jne     0x169 <_JIT_ENTRY+0x169>
// 1f7: 48 29 dd                      subq    %rbx, %rbp
// 1fa: 48 83 c5 b8                   addq    $-0x48, %rbp
// 1fe: 48 c1 ed 03                   shrq    $0x3, %rbp
// 202: 89 6b 40                      movl    %ebp, 0x40(%rbx)
// 205: 31 c0                         xorl    %eax, %eax
// 207: 48 83 c4 08                   addq    $0x8, %rsp
// 20b: 5b                            popq    %rbx
// 20c: 41 5c                         popq    %r12
// 20e: 41 5d                         popq    %r13
// 210: 41 5e                         popq    %r14
// 212: 41 5f                         popq    %r15
// 214: 5d                            popq    %rbp
// 215: c3                            retq
// 216: 
static const unsigned char _LOAD_ATTR_SLOTplus_MAKE_FUNCTION_code_body[535] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x27, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x49, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x59, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x79, 0x7b, 0xe9, 0x82, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x88, 0x01, 0x00, 0x00, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xa7, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x0c, 0xff, 0xd1, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xdd, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe5, 0x01, 0x4d, 0x8b, 0x6c, 0xee, 0xf8, 0x48, 0x8b, 0x73, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4e, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x7f, 0x49, 0x8d, 0x2c, 0xee, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0x8e, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x75, 0x5c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x4d, 0x89, 0x64, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x89, 0xee, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x10, 0xff, 0xff, 0xff, 0xe9, 0x12, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8d, 0x2c, 0xee, 0x4d, 0x85, 0xe4, 0x0f, 0x85, 0x72, 0xff, 0xff, 0xff, 0x48, 0x29, 0xdd, 0x48, 0x83, 0xc5, 0xb8, 0x48, 0xc1, 0xed, 0x03, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _LOAD_ATTR_SLOTplus_MAKE_FUNCTION_code_holes[20] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x41, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x66, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x9a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xbc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xda, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFunction_New, 0x0},
    {0x126, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFunction_SetVersion, 0x0},
    {0x17e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1c6, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_MAKE_FUNCTION_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_MAKE_FUNCTION_data_holes[1];

// _LOAD_ATTR_SLOTplus_MAP_ADD
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_MAP_ADD.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f7                      movq    %rsi, %r15
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 74 1d                         je      0x46 <_JIT_ENTRY+0x46>
// 29: 49 89 d6                      movq    %rdx, %r14
// 2c: 41 8b 45 00                   movl    (%r13), %eax
// 30: ff c0                         incl    %eax
// 32: 75 3f                         jne     0x73 <_JIT_ENTRY+0x73>
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 4f                         jle     0x8c <_JIT_ENTRY+0x8c>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 71                         jns     0xb2 <_JIT_ENTRY+0xb2>
// 41: e9 82 00 00 00                jmp     0xc8 <_JIT_ENTRY+0xc8>
// 46: 49 29 df                      subq    %rbx, %r15
// 49: 49 83 c7 b8                   addq    $-0x48, %r15
// 4d: 49 c1 ef 03                   shrq    $0x3, %r15
// 51: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 55: 48 8b 03                      movq    (%rbx), %rax
// 58: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005a:  R_X86_64_64  _JIT_TARGET
// 62: 89 c9                         movl    %ecx, %ecx
// 64: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 68: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 6e: e9 c0 00 00 00                jmp     0x133 <_JIT_ENTRY+0x133>
// 73: 41 89 45 00                   movl    %eax, (%r13)
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 81: ff d0                         callq   *%rax
// 83: 49 8b 04 24                   movq    (%r12), %rax
// 87: 48 85 c0                      testq   %rax, %rax
// 8a: 7f b1                         jg      0x3d <_JIT_ENTRY+0x3d>
// 8c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008e:  R_X86_64_64  .rodata.str1.1
// 96: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000098:  R_X86_64_64  _Py_NegativeRefcount
// a0: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a5: 4c 89 e2                      movq    %r12, %rdx
// a8: ff d0                         callq   *%rax
// aa: 49 8b 04 24                   movq    (%r12), %rax
// ae: 85 c0                         testl   %eax, %eax
// b0: 78 16                         js      0xc8 <_JIT_ENTRY+0xc8>
// b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: ff d0                         callq   *%rax
// be: 49 ff 0c 24                   decq    (%r12)
// c2: 0f 84 93 00 00 00             je      0x15b <_JIT_ENTRY+0x15b>
// c8: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ce:  R_X86_64_64  _JIT_OPARG
// d6: a8 01                         testb   $0x1, %al
// d8: 74 07                         je      0xe1 <_JIT_ENTRY+0xe1>
// da: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// e1: 0f b7 c8                      movzwl  %ax, %ecx
// e4: 83 e0 01                      andl    $0x1, %eax
// e7: 4d 8d 2c c7                   leaq    (%r15,%rax,8), %r13
// eb: 49 8b 74 c7 f0                movq    -0x10(%r15,%rax,8), %rsi
// f0: 49 8b 54 c7 f8                movq    -0x8(%r15,%rax,8), %rdx
// f5: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// f9: 49 83 c4 f0                   addq    $-0x10, %r12
// fd: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 102: 29 cf                         subl    %ecx, %edi
// 104: 48 63 cf                      movslq  %edi, %rcx
// 107: 48 01 c1                      addq    %rax, %rcx
// 10a: 49 8b 3c cf                   movq    (%r15,%rcx,8), %rdi
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _PyDict_SetItem_Take2
// 118: ff d0                         callq   *%rax
// 11a: 85 c0                         testl   %eax, %eax
// 11c: 4d 0f 45 e5                   cmovneq %r13, %r12
// 120: 74 1b                         je      0x13d <_JIT_ENTRY+0x13d>
// 122: 49 29 dc                      subq    %rbx, %r12
// 125: 49 83 c4 a8                   addq    $-0x58, %r12
// 129: 49 c1 ec 03                   shrq    $0x3, %r12
// 12d: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 131: 31 c0                         xorl    %eax, %eax
// 133: 5b                            popq    %rbx
// 134: 41 5c                         popq    %r12
// 136: 41 5d                         popq    %r13
// 138: 41 5e                         popq    %r14
// 13a: 41 5f                         popq    %r15
// 13c: c3                            retq
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _JIT_CONTINUE
// 147: 48 89 df                      movq    %rbx, %rdi
// 14a: 4c 89 e6                      movq    %r12, %rsi
// 14d: 4c 89 f2                      movq    %r14, %rdx
// 150: 5b                            popq    %rbx
// 151: 41 5c                         popq    %r12
// 153: 41 5d                         popq    %r13
// 155: 41 5e                         popq    %r14
// 157: 41 5f                         popq    %r15
// 159: ff e0                         jmpq    *%rax
// 15b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015d:  R_X86_64_64  _Py_Dealloc
// 165: 4c 89 e7                      movq    %r12, %rdi
// 168: ff d0                         callq   *%rax
// 16a: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// 16e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000170:  R_X86_64_64  _JIT_OPARG
// 178: a8 01                         testb   $0x1, %al
// 17a: 0f 85 5a ff ff ff             jne     0xda <_JIT_ENTRY+0xda>
// 180: e9 5c ff ff ff                jmp     0xe1 <_JIT_ENTRY+0xe1>
// 185: 
static const unsigned char _LOAD_ATTR_SLOTplus_MAP_ADD_code_body[390] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1d, 0x49, 0x89, 0xd6, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x3f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4f, 0x85, 0xc0, 0x79, 0x71, 0xe9, 0x82, 0x00, 0x00, 0x00, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xc0, 0x00, 0x00, 0x00, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x83, 0xe0, 0x01, 0x4d, 0x8d, 0x2c, 0xc7, 0x49, 0x8b, 0x74, 0xc7, 0xf0, 0x49, 0x8b, 0x54, 0xc7, 0xf8, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x83, 0xc4, 0xf0, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xcf, 0x48, 0x63, 0xcf, 0x48, 0x01, 0xc1, 0x49, 0x8b, 0x3c, 0xcf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x4d, 0x0f, 0x45, 0xe5, 0x74, 0x1b, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xa8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x5a, 0xff, 0xff, 0xff, 0xe9, 0x5c, 0xff, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_MAP_ADD_code_holes[12] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_SetItem_Take2, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x15d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x170, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_MAP_ADD_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_MAP_ADD_data_holes[1];

// _LOAD_ATTR_SLOTplus_MATCH_CLASS
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_MATCH_CLASS.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 13: 49 89 f6                      movq    %rsi, %r14
// 16: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001c:  R_X86_64_64  _JIT_OPERAND
// 24: 0f b7 c0                      movzwl  %ax, %eax
// 27: 49 8b 1c 04                   movq    (%r12,%rax), %rbx
// 2b: 48 85 db                      testq   %rbx, %rbx
// 2e: 74 1d                         je      0x4d <_JIT_ENTRY+0x4d>
// 30: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// 35: 8b 03                         movl    (%rbx), %eax
// 37: ff c0                         incl    %eax
// 39: 75 3f                         jne     0x7a <_JIT_ENTRY+0x7a>
// 3b: 49 8b 04 24                   movq    (%r12), %rax
// 3f: 48 85 c0                      testq   %rax, %rax
// 42: 7e 4d                         jle     0x91 <_JIT_ENTRY+0x91>
// 44: 85 c0                         testl   %eax, %eax
// 46: 79 6f                         jns     0xb7 <_JIT_ENTRY+0xb7>
// 48: e9 8b 00 00 00                jmp     0xd8 <_JIT_ENTRY+0xd8>
// 4d: 49 29 fe                      subq    %rdi, %r14
// 50: 49 83 c6 b8                   addq    $-0x48, %r14
// 54: 49 c1 ee 03                   shrq    $0x3, %r14
// 58: 44 89 77 40                   movl    %r14d, 0x40(%rdi)
// 5c: 48 8b 07                      movq    (%rdi), %rax
// 5f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000061:  R_X86_64_64  _JIT_TARGET
// 69: 89 c9                         movl    %ecx, %ecx
// 6b: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 6f: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 75: e9 3c 02 00 00                jmp     0x2b6 <_JIT_ENTRY+0x2b6>
// 7a: 89 03                         movl    %eax, (%rbx)
// 7c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007e:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 86: ff d0                         callq   *%rax
// 88: 49 8b 04 24                   movq    (%r12), %rax
// 8c: 48 85 c0                      testq   %rax, %rax
// 8f: 7f b3                         jg      0x44 <_JIT_ENTRY+0x44>
// 91: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000093:  R_X86_64_64  .rodata.str1.1
// 9b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009d:  R_X86_64_64  _Py_NegativeRefcount
// a5: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// aa: 4c 89 e2                      movq    %r12, %rdx
// ad: ff d0                         callq   *%rax
// af: 49 8b 04 24                   movq    (%r12), %rax
// b3: 85 c0                         testl   %eax, %eax
// b5: 78 21                         js      0xd8 <_JIT_ENTRY+0xd8>
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c1: ff d0                         callq   *%rax
// c3: 49 ff 0c 24                   decq    (%r12)
// c7: 75 0f                         jne     0xd8 <_JIT_ENTRY+0xd8>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_Dealloc
// d3: 4c 89 e7                      movq    %r12, %rdi
// d6: ff d0                         callq   *%rax
// d8: 49 89 5e f8                   movq    %rbx, -0x8(%r14)
// dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000de:  R_X86_64_64  _JIT_OPARG
// e6: a8 01                         testb   $0x1, %al
// e8: 74 07                         je      0xf1 <_JIT_ENTRY+0xf1>
// ea: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// f1: 89 c3                         movl    %eax, %ebx
// f3: 83 e3 01                      andl    $0x1, %ebx
// f6: 4d 8b 6c de f8                movq    -0x8(%r14,%rbx,8), %r13
// fb: 4d 8b 7c de e8                movq    -0x18(%r14,%rbx,8), %r15
// 100: 49 8b 6c de f0                movq    -0x10(%r14,%rbx,8), %rbp
// 105: 0f b7 c8                      movzwl  %ax, %ecx
// 108: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010a:  R_X86_64_64  _PyEval_MatchClass
// 112: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 117: 4c 89 fe                      movq    %r15, %rsi
// 11a: 48 89 ea                      movq    %rbp, %rdx
// 11d: 4d 89 e8                      movq    %r13, %r8
// 120: ff d0                         callq   *%rax
// 122: 49 89 c4                      movq    %rax, %r12
// 125: 49 8b 07                      movq    (%r15), %rax
// 128: 48 85 c0                      testq   %rax, %rax
// 12b: 7e 06                         jle     0x133 <_JIT_ENTRY+0x133>
// 12d: 85 c0                         testl   %eax, %eax
// 12f: 79 27                         jns     0x158 <_JIT_ENTRY+0x158>
// 131: eb 36                         jmp     0x169 <_JIT_ENTRY+0x169>
// 133: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000135:  R_X86_64_64  .rodata.str1.1
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_NegativeRefcount
// 147: be 10 08 00 00                movl    $0x810, %esi            # imm = 0x810
// 14c: 4c 89 fa                      movq    %r15, %rdx
// 14f: ff d0                         callq   *%rax
// 151: 49 8b 07                      movq    (%r15), %rax
// 154: 85 c0                         testl   %eax, %eax
// 156: 78 11                         js      0x169 <_JIT_ENTRY+0x169>
// 158: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 162: ff d0                         callq   *%rax
// 164: 49 ff 0f                      decq    (%r15)
// 167: 74 0f                         je      0x178 <_JIT_ENTRY+0x178>
// 169: 48 8b 45 00                   movq    (%rbp), %rax
// 16d: 48 85 c0                      testq   %rax, %rax
// 170: 7e 1e                         jle     0x190 <_JIT_ENTRY+0x190>
// 172: 85 c0                         testl   %eax, %eax
// 174: 79 40                         jns     0x1b6 <_JIT_ENTRY+0x1b6>
// 176: eb 50                         jmp     0x1c8 <_JIT_ENTRY+0x1c8>
// 178: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017a:  R_X86_64_64  _Py_Dealloc
// 182: 4c 89 ff                      movq    %r15, %rdi
// 185: ff d0                         callq   *%rax
// 187: 48 8b 45 00                   movq    (%rbp), %rax
// 18b: 48 85 c0                      testq   %rax, %rax
// 18e: 7f e2                         jg      0x172 <_JIT_ENTRY+0x172>
// 190: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000192:  R_X86_64_64  .rodata.str1.1
// 19a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019c:  R_X86_64_64  _Py_NegativeRefcount
// 1a4: be 11 08 00 00                movl    $0x811, %esi            # imm = 0x811
// 1a9: 48 89 ea                      movq    %rbp, %rdx
// 1ac: ff d0                         callq   *%rax
// 1ae: 48 8b 45 00                   movq    (%rbp), %rax
// 1b2: 85 c0                         testl   %eax, %eax
// 1b4: 78 12                         js      0x1c8 <_JIT_ENTRY+0x1c8>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 48 ff 4d 00                   decq    (%rbp)
// 1c6: 74 0f                         je      0x1d7 <_JIT_ENTRY+0x1d7>
// 1c8: 49 8b 45 00                   movq    (%r13), %rax
// 1cc: 48 85 c0                      testq   %rax, %rax
// 1cf: 7e 1e                         jle     0x1ef <_JIT_ENTRY+0x1ef>
// 1d1: 85 c0                         testl   %eax, %eax
// 1d3: 79 40                         jns     0x215 <_JIT_ENTRY+0x215>
// 1d5: eb 50                         jmp     0x227 <_JIT_ENTRY+0x227>
// 1d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d9:  R_X86_64_64  _Py_Dealloc
// 1e1: 48 89 ef                      movq    %rbp, %rdi
// 1e4: ff d0                         callq   *%rax
// 1e6: 49 8b 45 00                   movq    (%r13), %rax
// 1ea: 48 85 c0                      testq   %rax, %rax
// 1ed: 7f e2                         jg      0x1d1 <_JIT_ENTRY+0x1d1>
// 1ef: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f1:  R_X86_64_64  .rodata.str1.1
// 1f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fb:  R_X86_64_64  _Py_NegativeRefcount
// 203: be 12 08 00 00                movl    $0x812, %esi            # imm = 0x812
// 208: 4c 89 ea                      movq    %r13, %rdx
// 20b: ff d0                         callq   *%rax
// 20d: 49 8b 45 00                   movq    (%r13), %rax
// 211: 85 c0                         testl   %eax, %eax
// 213: 78 12                         js      0x227 <_JIT_ENTRY+0x227>
// 215: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000217:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 21f: ff d0                         callq   *%rax
// 221: 49 ff 4d 00                   decq    (%r13)
// 225: 74 43                         je      0x26a <_JIT_ENTRY+0x26a>
// 227: 4d 85 e4                      testq   %r12, %r12
// 22a: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 22f: 74 52                         je      0x283 <_JIT_ENTRY+0x283>
// 231: 49 8d 34 de                   leaq    (%r14,%rbx,8), %rsi
// 235: 48 83 c6 f0                   addq    $-0x10, %rsi
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _JIT_OPARG
// 243: 83 e0 01                      andl    $0x1, %eax
// 246: 4d 89 64 c6 e8                movq    %r12, -0x18(%r14,%rax,8)
// 24b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024d:  R_X86_64_64  _JIT_CONTINUE
// 255: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 25a: 48 83 c4 18                   addq    $0x18, %rsp
// 25e: 5b                            popq    %rbx
// 25f: 41 5c                         popq    %r12
// 261: 41 5d                         popq    %r13
// 263: 41 5e                         popq    %r14
// 265: 41 5f                         popq    %r15
// 267: 5d                            popq    %rbp
// 268: ff e0                         jmpq    *%rax
// 26a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026c:  R_X86_64_64  _Py_Dealloc
// 274: 4c 89 ef                      movq    %r13, %rdi
// 277: ff d0                         callq   *%rax
// 279: 4d 85 e4                      testq   %r12, %r12
// 27c: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 281: 75 ae                         jne     0x231 <_JIT_ENTRY+0x231>
// 283: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 288: 48 8b 40 68                   movq    0x68(%rax), %rax
// 28c: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 000000000000028e:  R_X86_64_64  _Py_NoneStruct
// 296: 48 85 c0                      testq   %rax, %rax
// 299: 74 96                         je      0x231 <_JIT_ENTRY+0x231>
// 29b: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 2a0: 74 8f                         je      0x231 <_JIT_ENTRY+0x231>
// 2a2: 49 8d 04 de                   leaq    (%r14,%rbx,8), %rax
// 2a6: 48 29 f8                      subq    %rdi, %rax
// 2a9: 48 83 c0 a0                   addq    $-0x60, %rax
// 2ad: 48 c1 e8 03                   shrq    $0x3, %rax
// 2b1: 89 47 40                      movl    %eax, 0x40(%rdi)
// 2b4: 31 c0                         xorl    %eax, %eax
// 2b6: 48 83 c4 18                   addq    $0x18, %rsp
// 2ba: 5b                            popq    %rbx
// 2bb: 41 5c                         popq    %r12
// 2bd: 41 5d                         popq    %r13
// 2bf: 41 5e                         popq    %r14
// 2c1: 41 5f                         popq    %r15
// 2c3: 5d                            popq    %rbp
// 2c4: c3                            retq
// 2c5: 
static const unsigned char _LOAD_ATTR_SLOTplus_MATCH_CLASS_code_body[710] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0x54, 0x24, 0x08, 0x49, 0x89, 0xf6, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8b, 0x1c, 0x04, 0x48, 0x85, 0xdb, 0x74, 0x1d, 0x48, 0x89, 0x7c, 0x24, 0x10, 0x8b, 0x03, 0xff, 0xc0, 0x75, 0x3f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4d, 0x85, 0xc0, 0x79, 0x6f, 0xe9, 0x8b, 0x00, 0x00, 0x00, 0x49, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x3c, 0x02, 0x00, 0x00, 0x89, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0x5e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc3, 0x83, 0xe3, 0x01, 0x4d, 0x8b, 0x6c, 0xde, 0xf8, 0x4d, 0x8b, 0x7c, 0xde, 0xe8, 0x49, 0x8b, 0x6c, 0xde, 0xf0, 0x0f, 0xb7, 0xc8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x48, 0x89, 0xea, 0x4d, 0x89, 0xe8, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x10, 0x08, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x11, 0x08, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x12, 0x08, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x43, 0x4d, 0x85, 0xe4, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x74, 0x52, 0x49, 0x8d, 0x34, 0xde, 0x48, 0x83, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x4d, 0x89, 0x64, 0xc6, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x75, 0xae, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x40, 0x68, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x96, 0x48, 0x83, 0x78, 0x08, 0x00, 0x74, 0x8f, 0x49, 0x8d, 0x04, 0xde, 0x48, 0x29, 0xf8, 0x48, 0x83, 0xc0, 0xa0, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x47, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _LOAD_ATTR_SLOTplus_MATCH_CLASS_code_holes[25] = {
    {0x1c, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x93, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xde, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_MatchClass, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x19c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1f1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x217, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x24d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x26c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x28e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_MATCH_CLASS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_MATCH_CLASS_data_holes[1];

// _LOAD_ATTR_SLOTplus_MATCH_KEYS
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_MATCH_KEYS.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f6                      movq    %rsi, %r14
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 74 1d                         je      0x46 <_JIT_ENTRY+0x46>
// 29: 49 89 d7                      movq    %rdx, %r15
// 2c: 41 8b 45 00                   movl    (%r13), %eax
// 30: ff c0                         incl    %eax
// 32: 75 3f                         jne     0x73 <_JIT_ENTRY+0x73>
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 4f                         jle     0x8c <_JIT_ENTRY+0x8c>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 71                         jns     0xb2 <_JIT_ENTRY+0xb2>
// 41: e9 82 00 00 00                jmp     0xc8 <_JIT_ENTRY+0xc8>
// 46: 49 29 de                      subq    %rbx, %r14
// 49: 49 83 c6 b8                   addq    $-0x48, %r14
// 4d: 49 c1 ee 03                   shrq    $0x3, %r14
// 51: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 55: 48 8b 03                      movq    (%rbx), %rax
// 58: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005a:  R_X86_64_64  _JIT_TARGET
// 62: 89 c9                         movl    %ecx, %ecx
// 64: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 68: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 6e: e9 e2 00 00 00                jmp     0x155 <_JIT_ENTRY+0x155>
// 73: 41 89 45 00                   movl    %eax, (%r13)
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 81: ff d0                         callq   *%rax
// 83: 49 8b 04 24                   movq    (%r12), %rax
// 87: 48 85 c0                      testq   %rax, %rax
// 8a: 7f b1                         jg      0x3d <_JIT_ENTRY+0x3d>
// 8c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008e:  R_X86_64_64  .rodata.str1.1
// 96: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000098:  R_X86_64_64  _Py_NegativeRefcount
// a0: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a5: 4c 89 e2                      movq    %r12, %rdx
// a8: ff d0                         callq   *%rax
// aa: 49 8b 04 24                   movq    (%r12), %rax
// ae: 85 c0                         testl   %eax, %eax
// b0: 78 16                         js      0xc8 <_JIT_ENTRY+0xc8>
// b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: ff d0                         callq   *%rax
// be: 49 ff 0c 24                   decq    (%r12)
// c2: 0f 84 97 00 00 00             je      0x15f <_JIT_ENTRY+0x15f>
// c8: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ce:  R_X86_64_64  _JIT_OPARG
// d6: a8 01                         testb   $0x1, %al
// d8: 74 07                         je      0xe1 <_JIT_ENTRY+0xe1>
// da: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// e1: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 00000000000000e3:  R_X86_64_64  _JIT_OPARG
// eb: 41 83 e4 01                   andl    $0x1, %r12d
// ef: 4b 8b 74 e6 f0                movq    -0x10(%r14,%r12,8), %rsi
// f4: 4b 8b 54 e6 f8                movq    -0x8(%r14,%r12,8), %rdx
// f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fb:  R_X86_64_64  _PyEval_MatchKeys
// 103: 4c 89 ff                      movq    %r15, %rdi
// 106: ff d0                         callq   *%rax
// 108: 48 85 c0                      testq   %rax, %rax
// 10b: 74 34                         je      0x141 <_JIT_ENTRY+0x141>
// 10d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000010f:  R_X86_64_64  _JIT_OPARG
// 117: 83 e1 01                      andl    $0x1, %ecx
// 11a: 49 89 04 ce                   movq    %rax, (%r14,%rcx,8)
// 11e: 49 8d 34 ce                   leaq    (%r14,%rcx,8), %rsi
// 122: 48 83 c6 08                   addq    $0x8, %rsi
// 126: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000128:  R_X86_64_64  _JIT_CONTINUE
// 130: 48 89 df                      movq    %rbx, %rdi
// 133: 4c 89 fa                      movq    %r15, %rdx
// 136: 5b                            popq    %rbx
// 137: 41 5c                         popq    %r12
// 139: 41 5d                         popq    %r13
// 13b: 41 5e                         popq    %r14
// 13d: 41 5f                         popq    %r15
// 13f: ff e0                         jmpq    *%rax
// 141: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 145: 48 29 d8                      subq    %rbx, %rax
// 148: 48 83 c0 b8                   addq    $-0x48, %rax
// 14c: 48 c1 e8 03                   shrq    $0x3, %rax
// 150: 89 43 40                      movl    %eax, 0x40(%rbx)
// 153: 31 c0                         xorl    %eax, %eax
// 155: 5b                            popq    %rbx
// 156: 41 5c                         popq    %r12
// 158: 41 5d                         popq    %r13
// 15a: 41 5e                         popq    %r14
// 15c: 41 5f                         popq    %r15
// 15e: c3                            retq
// 15f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000161:  R_X86_64_64  _Py_Dealloc
// 169: 4c 89 e7                      movq    %r12, %rdi
// 16c: ff d0                         callq   *%rax
// 16e: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _JIT_OPARG
// 17c: a8 01                         testb   $0x1, %al
// 17e: 0f 85 56 ff ff ff             jne     0xda <_JIT_ENTRY+0xda>
// 184: e9 58 ff ff ff                jmp     0xe1 <_JIT_ENTRY+0xe1>
// 189: 
static const unsigned char _LOAD_ATTR_SLOTplus_MATCH_KEYS_code_body[394] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1d, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x3f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4f, 0x85, 0xc0, 0x79, 0x71, 0xe9, 0x82, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xe2, 0x00, 0x00, 0x00, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x97, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x83, 0xe4, 0x01, 0x4b, 0x8b, 0x74, 0xe6, 0xf0, 0x4b, 0x8b, 0x54, 0xe6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x34, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe1, 0x01, 0x49, 0x89, 0x04, 0xce, 0x49, 0x8d, 0x34, 0xce, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x56, 0xff, 0xff, 0xff, 0xe9, 0x58, 0xff, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_MATCH_KEYS_code_holes[14] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xe3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xfb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_MatchKeys, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x128, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x161, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_MATCH_KEYS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_MATCH_KEYS_data_holes[1];

// _LOAD_ATTR_SLOTplus_MATCH_MAPPING
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_MATCH_MAPPING.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f6                      movq    %rsi, %r14
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 74 1d                         je      0x46 <_JIT_ENTRY+0x46>
// 29: 49 89 d7                      movq    %rdx, %r15
// 2c: 41 8b 45 00                   movl    (%r13), %eax
// 30: ff c0                         incl    %eax
// 32: 75 42                         jne     0x76 <_JIT_ENTRY+0x76>
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 52                         jle     0x8f <_JIT_ENTRY+0x8f>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 74                         jns     0xb5 <_JIT_ENTRY+0xb5>
// 41: e9 81 00 00 00                jmp     0xc7 <_JIT_ENTRY+0xc7>
// 46: 49 29 de                      subq    %rbx, %r14
// 49: 49 83 c6 b8                   addq    $-0x48, %r14
// 4d: 49 c1 ee 03                   shrq    $0x3, %r14
// 51: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 55: 48 8b 03                      movq    (%rbx), %rax
// 58: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005a:  R_X86_64_64  _JIT_TARGET
// 62: 89 c9                         movl    %ecx, %ecx
// 64: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 6c: 5b                            popq    %rbx
// 6d: 41 5c                         popq    %r12
// 6f: 41 5d                         popq    %r13
// 71: 41 5e                         popq    %r14
// 73: 41 5f                         popq    %r15
// 75: c3                            retq
// 76: 41 89 45 00                   movl    %eax, (%r13)
// 7a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007c:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 84: ff d0                         callq   *%rax
// 86: 49 8b 04 24                   movq    (%r12), %rax
// 8a: 48 85 c0                      testq   %rax, %rax
// 8d: 7f ae                         jg      0x3d <_JIT_ENTRY+0x3d>
// 8f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000091:  R_X86_64_64  .rodata.str1.1
// 99: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009b:  R_X86_64_64  _Py_NegativeRefcount
// a3: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a8: 4c 89 e2                      movq    %r12, %rdx
// ab: ff d0                         callq   *%rax
// ad: 49 8b 04 24                   movq    (%r12), %rax
// b1: 85 c0                         testl   %eax, %eax
// b3: 78 12                         js      0xc7 <_JIT_ENTRY+0xc7>
// b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bf: ff d0                         callq   *%rax
// c1: 49 ff 0c 24                   decq    (%r12)
// c5: 74 6b                         je      0x132 <_JIT_ENTRY+0x132>
// c7: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cd:  R_X86_64_64  _JIT_OPARG
// d5: a8 01                         testb   $0x1, %al
// d7: 74 07                         je      0xe0 <_JIT_ENTRY+0xe0>
// d9: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// e0: 83 e0 01                      andl    $0x1, %eax
// e3: 49 8b 4c c6 f8                movq    -0x8(%r14,%rax,8), %rcx
// e8: 48 8b 49 08                   movq    0x8(%rcx), %rcx
// ec: f6 81 a8 00 00 00 40          testb   $0x40, 0xa8(%rcx)
// f3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000f5:  R_X86_64_64  _Py_FalseStruct
// fd: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000000ff:  R_X86_64_64  _Py_TrueStruct
// 107: 48 0f 44 d1                   cmoveq  %rcx, %rdx
// 10b: 49 89 14 c6                   movq    %rdx, (%r14,%rax,8)
// 10f: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 113: 48 83 c6 08                   addq    $0x8, %rsi
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _JIT_CONTINUE
// 121: 48 89 df                      movq    %rbx, %rdi
// 124: 4c 89 fa                      movq    %r15, %rdx
// 127: 5b                            popq    %rbx
// 128: 41 5c                         popq    %r12
// 12a: 41 5d                         popq    %r13
// 12c: 41 5e                         popq    %r14
// 12e: 41 5f                         popq    %r15
// 130: ff e0                         jmpq    *%rax
// 132: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000134:  R_X86_64_64  _Py_Dealloc
// 13c: 4c 89 e7                      movq    %r12, %rdi
// 13f: ff d0                         callq   *%rax
// 141: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _JIT_OPARG
// 14f: a8 01                         testb   $0x1, %al
// 151: 75 86                         jne     0xd9 <_JIT_ENTRY+0xd9>
// 153: eb 8b                         jmp     0xe0 <_JIT_ENTRY+0xe0>
// 155: 
static const unsigned char _LOAD_ATTR_SLOTplus_MATCH_MAPPING_code_body[342] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1d, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x42, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x52, 0x85, 0xc0, 0x79, 0x74, 0xe9, 0x81, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xae, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x6b, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8b, 0x4c, 0xc6, 0xf8, 0x48, 0x8b, 0x49, 0x08, 0xf6, 0x81, 0xa8, 0x00, 0x00, 0x00, 0x40, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xd1, 0x49, 0x89, 0x14, 0xc6, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x75, 0x86, 0xeb, 0x8b};
static const Hole _LOAD_ATTR_SLOTplus_MATCH_MAPPING_code_holes[13] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xcd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0xff, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x134, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_MATCH_MAPPING_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_MATCH_MAPPING_data_holes[1];

// _LOAD_ATTR_SLOTplus_MATCH_SEQUENCE
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_MATCH_SEQUENCE.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f6                      movq    %rsi, %r14
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 74 1d                         je      0x46 <_JIT_ENTRY+0x46>
// 29: 49 89 d7                      movq    %rdx, %r15
// 2c: 41 8b 45 00                   movl    (%r13), %eax
// 30: ff c0                         incl    %eax
// 32: 75 42                         jne     0x76 <_JIT_ENTRY+0x76>
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 52                         jle     0x8f <_JIT_ENTRY+0x8f>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 74                         jns     0xb5 <_JIT_ENTRY+0xb5>
// 41: e9 81 00 00 00                jmp     0xc7 <_JIT_ENTRY+0xc7>
// 46: 49 29 de                      subq    %rbx, %r14
// 49: 49 83 c6 b8                   addq    $-0x48, %r14
// 4d: 49 c1 ee 03                   shrq    $0x3, %r14
// 51: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 55: 48 8b 03                      movq    (%rbx), %rax
// 58: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005a:  R_X86_64_64  _JIT_TARGET
// 62: 89 c9                         movl    %ecx, %ecx
// 64: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 6c: 5b                            popq    %rbx
// 6d: 41 5c                         popq    %r12
// 6f: 41 5d                         popq    %r13
// 71: 41 5e                         popq    %r14
// 73: 41 5f                         popq    %r15
// 75: c3                            retq
// 76: 41 89 45 00                   movl    %eax, (%r13)
// 7a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007c:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 84: ff d0                         callq   *%rax
// 86: 49 8b 04 24                   movq    (%r12), %rax
// 8a: 48 85 c0                      testq   %rax, %rax
// 8d: 7f ae                         jg      0x3d <_JIT_ENTRY+0x3d>
// 8f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000091:  R_X86_64_64  .rodata.str1.1
// 99: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009b:  R_X86_64_64  _Py_NegativeRefcount
// a3: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a8: 4c 89 e2                      movq    %r12, %rdx
// ab: ff d0                         callq   *%rax
// ad: 49 8b 04 24                   movq    (%r12), %rax
// b1: 85 c0                         testl   %eax, %eax
// b3: 78 12                         js      0xc7 <_JIT_ENTRY+0xc7>
// b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bf: ff d0                         callq   *%rax
// c1: 49 ff 0c 24                   decq    (%r12)
// c5: 74 6b                         je      0x132 <_JIT_ENTRY+0x132>
// c7: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cd:  R_X86_64_64  _JIT_OPARG
// d5: a8 01                         testb   $0x1, %al
// d7: 74 07                         je      0xe0 <_JIT_ENTRY+0xe0>
// d9: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// e0: 83 e0 01                      andl    $0x1, %eax
// e3: 49 8b 4c c6 f8                movq    -0x8(%r14,%rax,8), %rcx
// e8: 48 8b 49 08                   movq    0x8(%rcx), %rcx
// ec: f6 81 a8 00 00 00 20          testb   $0x20, 0xa8(%rcx)
// f3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000f5:  R_X86_64_64  _Py_FalseStruct
// fd: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000000ff:  R_X86_64_64  _Py_TrueStruct
// 107: 48 0f 44 d1                   cmoveq  %rcx, %rdx
// 10b: 49 89 14 c6                   movq    %rdx, (%r14,%rax,8)
// 10f: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 113: 48 83 c6 08                   addq    $0x8, %rsi
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _JIT_CONTINUE
// 121: 48 89 df                      movq    %rbx, %rdi
// 124: 4c 89 fa                      movq    %r15, %rdx
// 127: 5b                            popq    %rbx
// 128: 41 5c                         popq    %r12
// 12a: 41 5d                         popq    %r13
// 12c: 41 5e                         popq    %r14
// 12e: 41 5f                         popq    %r15
// 130: ff e0                         jmpq    *%rax
// 132: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000134:  R_X86_64_64  _Py_Dealloc
// 13c: 4c 89 e7                      movq    %r12, %rdi
// 13f: ff d0                         callq   *%rax
// 141: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _JIT_OPARG
// 14f: a8 01                         testb   $0x1, %al
// 151: 75 86                         jne     0xd9 <_JIT_ENTRY+0xd9>
// 153: eb 8b                         jmp     0xe0 <_JIT_ENTRY+0xe0>
// 155: 
static const unsigned char _LOAD_ATTR_SLOTplus_MATCH_SEQUENCE_code_body[342] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1d, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x42, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x52, 0x85, 0xc0, 0x79, 0x74, 0xe9, 0x81, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xae, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x6b, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8b, 0x4c, 0xc6, 0xf8, 0x48, 0x8b, 0x49, 0x08, 0xf6, 0x81, 0xa8, 0x00, 0x00, 0x00, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xd1, 0x49, 0x89, 0x14, 0xc6, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x75, 0x86, 0xeb, 0x8b};
static const Hole _LOAD_ATTR_SLOTplus_MATCH_SEQUENCE_code_holes[13] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xcd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0xff, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x134, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_MATCH_SEQUENCE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_MATCH_SEQUENCE_data_holes[1];

// _LOAD_ATTR_SLOTplus_NOP
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_NOP.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f6                      movq    %rsi, %r14
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 74 1d                         je      0x46 <_JIT_ENTRY+0x46>
// 29: 49 89 d7                      movq    %rdx, %r15
// 2c: 41 8b 45 00                   movl    (%r13), %eax
// 30: ff c0                         incl    %eax
// 32: 75 42                         jne     0x76 <_JIT_ENTRY+0x76>
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 52                         jle     0x8f <_JIT_ENTRY+0x8f>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 74                         jns     0xb5 <_JIT_ENTRY+0xb5>
// 41: e9 81 00 00 00                jmp     0xc7 <_JIT_ENTRY+0xc7>
// 46: 49 29 de                      subq    %rbx, %r14
// 49: 49 83 c6 b8                   addq    $-0x48, %r14
// 4d: 49 c1 ee 03                   shrq    $0x3, %r14
// 51: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 55: 48 8b 03                      movq    (%rbx), %rax
// 58: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005a:  R_X86_64_64  _JIT_TARGET
// 62: 89 c9                         movl    %ecx, %ecx
// 64: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 6c: 5b                            popq    %rbx
// 6d: 41 5c                         popq    %r12
// 6f: 41 5d                         popq    %r13
// 71: 41 5e                         popq    %r14
// 73: 41 5f                         popq    %r15
// 75: c3                            retq
// 76: 41 89 45 00                   movl    %eax, (%r13)
// 7a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007c:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 84: ff d0                         callq   *%rax
// 86: 49 8b 04 24                   movq    (%r12), %rax
// 8a: 48 85 c0                      testq   %rax, %rax
// 8d: 7f ae                         jg      0x3d <_JIT_ENTRY+0x3d>
// 8f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000091:  R_X86_64_64  .rodata.str1.1
// 99: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009b:  R_X86_64_64  _Py_NegativeRefcount
// a3: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a8: 4c 89 e2                      movq    %r12, %rdx
// ab: ff d0                         callq   *%rax
// ad: 49 8b 04 24                   movq    (%r12), %rax
// b1: 85 c0                         testl   %eax, %eax
// b3: 78 12                         js      0xc7 <_JIT_ENTRY+0xc7>
// b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bf: ff d0                         callq   *%rax
// c1: 49 ff 0c 24                   decq    (%r12)
// c5: 74 3b                         je      0x102 <_JIT_ENTRY+0x102>
// c7: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cd:  R_X86_64_64  _JIT_OPARG
// d5: a8 01                         testb   $0x1, %al
// d7: 74 07                         je      0xe0 <_JIT_ENTRY+0xe0>
// d9: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// e0: 83 e0 01                      andl    $0x1, %eax
// e3: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e9:  R_X86_64_64  _JIT_CONTINUE
// f1: 48 89 df                      movq    %rbx, %rdi
// f4: 4c 89 fa                      movq    %r15, %rdx
// f7: 5b                            popq    %rbx
// f8: 41 5c                         popq    %r12
// fa: 41 5d                         popq    %r13
// fc: 41 5e                         popq    %r14
// fe: 41 5f                         popq    %r15
// 100: ff e0                         jmpq    *%rax
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_Dealloc
// 10c: 4c 89 e7                      movq    %r12, %rdi
// 10f: ff d0                         callq   *%rax
// 111: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 115: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000117:  R_X86_64_64  _JIT_OPARG
// 11f: a8 01                         testb   $0x1, %al
// 121: 75 b6                         jne     0xd9 <_JIT_ENTRY+0xd9>
// 123: eb bb                         jmp     0xe0 <_JIT_ENTRY+0xe0>
// 125: 
static const unsigned char _LOAD_ATTR_SLOTplus_NOP_code_body[294] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1d, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x42, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x52, 0x85, 0xc0, 0x79, 0x74, 0xe9, 0x81, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xae, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x3b, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x75, 0xb6, 0xeb, 0xbb};
static const Hole _LOAD_ATTR_SLOTplus_NOP_code_holes[11] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xcd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x117, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_NOP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_NOP_data_holes[1];

// _LOAD_ATTR_SLOTplus_POP_EXCEPT
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_POP_EXCEPT.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f7                      movq    %rsi, %r15
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 74 1d                         je      0x46 <_JIT_ENTRY+0x46>
// 29: 49 89 d6                      movq    %rdx, %r14
// 2c: 41 8b 45 00                   movl    (%r13), %eax
// 30: ff c0                         incl    %eax
// 32: 75 42                         jne     0x76 <_JIT_ENTRY+0x76>
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 52                         jle     0x8f <_JIT_ENTRY+0x8f>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 74                         jns     0xb5 <_JIT_ENTRY+0xb5>
// 41: e9 85 00 00 00                jmp     0xcb <_JIT_ENTRY+0xcb>
// 46: 49 29 df                      subq    %rbx, %r15
// 49: 49 83 c7 b8                   addq    $-0x48, %r15
// 4d: 49 c1 ef 03                   shrq    $0x3, %r15
// 51: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 55: 48 8b 03                      movq    (%rbx), %rax
// 58: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005a:  R_X86_64_64  _JIT_TARGET
// 62: 89 c9                         movl    %ecx, %ecx
// 64: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 6c: 5b                            popq    %rbx
// 6d: 41 5c                         popq    %r12
// 6f: 41 5d                         popq    %r13
// 71: 41 5e                         popq    %r14
// 73: 41 5f                         popq    %r15
// 75: c3                            retq
// 76: 41 89 45 00                   movl    %eax, (%r13)
// 7a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007c:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 84: ff d0                         callq   *%rax
// 86: 49 8b 04 24                   movq    (%r12), %rax
// 8a: 48 85 c0                      testq   %rax, %rax
// 8d: 7f ae                         jg      0x3d <_JIT_ENTRY+0x3d>
// 8f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000091:  R_X86_64_64  .rodata.str1.1
// 99: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009b:  R_X86_64_64  _Py_NegativeRefcount
// a3: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a8: 4c 89 e2                      movq    %r12, %rdx
// ab: ff d0                         callq   *%rax
// ad: 49 8b 04 24                   movq    (%r12), %rax
// b1: 85 c0                         testl   %eax, %eax
// b3: 78 16                         js      0xcb <_JIT_ENTRY+0xcb>
// b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bf: ff d0                         callq   *%rax
// c1: 49 ff 0c 24                   decq    (%r12)
// c5: 0f 84 bc 00 00 00             je      0x187 <_JIT_ENTRY+0x187>
// cb: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d1:  R_X86_64_64  _JIT_OPARG
// d9: a8 01                         testb   $0x1, %al
// db: 74 07                         je      0xe4 <_JIT_ENTRY+0xe4>
// dd: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// e4: 83 e0 01                      andl    $0x1, %eax
// e7: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// eb: 49 83 c4 f8                   addq    $-0x8, %r12
// ef: 49 8b 44 c7 f8                movq    -0x8(%r15,%rax,8), %rax
// f4: 49 8b 4e 70                   movq    0x70(%r14), %rcx
// f8: 4c 8b 39                      movq    (%rcx), %r15
// fb: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000000fd:  R_X86_64_64  _Py_NoneStruct
// 105: 31 f6                         xorl    %esi, %esi
// 107: 48 39 d0                      cmpq    %rdx, %rax
// 10a: 48 0f 45 f0                   cmovneq %rax, %rsi
// 10e: 48 89 31                      movq    %rsi, (%rcx)
// 111: 4d 85 ff                      testq   %r15, %r15
// 114: 74 53                         je      0x169 <_JIT_ENTRY+0x169>
// 116: 49 8b 07                      movq    (%r15), %rax
// 119: 48 85 c0                      testq   %rax, %rax
// 11c: 7e 06                         jle     0x124 <_JIT_ENTRY+0x124>
// 11e: 85 c0                         testl   %eax, %eax
// 120: 79 27                         jns     0x149 <_JIT_ENTRY+0x149>
// 122: eb 45                         jmp     0x169 <_JIT_ENTRY+0x169>
// 124: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000126:  R_X86_64_64  .rodata.str1.1+0x39
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  _Py_NegativeRefcount
// 138: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 13d: 4c 89 fa                      movq    %r15, %rdx
// 140: ff d0                         callq   *%rax
// 142: 49 8b 07                      movq    (%r15), %rax
// 145: 85 c0                         testl   %eax, %eax
// 147: 78 20                         js      0x169 <_JIT_ENTRY+0x169>
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 153: ff d0                         callq   *%rax
// 155: 49 ff 0f                      decq    (%r15)
// 158: 75 0f                         jne     0x169 <_JIT_ENTRY+0x169>
// 15a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015c:  R_X86_64_64  _Py_Dealloc
// 164: 4c 89 ff                      movq    %r15, %rdi
// 167: ff d0                         callq   *%rax
// 169: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016b:  R_X86_64_64  _JIT_CONTINUE
// 173: 48 89 df                      movq    %rbx, %rdi
// 176: 4c 89 e6                      movq    %r12, %rsi
// 179: 4c 89 f2                      movq    %r14, %rdx
// 17c: 5b                            popq    %rbx
// 17d: 41 5c                         popq    %r12
// 17f: 41 5d                         popq    %r13
// 181: 41 5e                         popq    %r14
// 183: 41 5f                         popq    %r15
// 185: ff e0                         jmpq    *%rax
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _Py_Dealloc
// 191: 4c 89 e7                      movq    %r12, %rdi
// 194: ff d0                         callq   *%rax
// 196: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// 19a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019c:  R_X86_64_64  _JIT_OPARG
// 1a4: a8 01                         testb   $0x1, %al
// 1a6: 0f 85 31 ff ff ff             jne     0xdd <_JIT_ENTRY+0xdd>
// 1ac: e9 33 ff ff ff                jmp     0xe4 <_JIT_ENTRY+0xe4>
// 1b1: 
static const unsigned char _LOAD_ATTR_SLOTplus_POP_EXCEPT_code_body[434] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1d, 0x49, 0x89, 0xd6, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x42, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x52, 0x85, 0xc0, 0x79, 0x74, 0xe9, 0x85, 0x00, 0x00, 0x00, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xae, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xbc, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x83, 0xc4, 0xf8, 0x49, 0x8b, 0x44, 0xc7, 0xf8, 0x49, 0x8b, 0x4e, 0x70, 0x4c, 0x8b, 0x39, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xf6, 0x48, 0x39, 0xd0, 0x48, 0x0f, 0x45, 0xf0, 0x48, 0x89, 0x31, 0x4d, 0x85, 0xff, 0x74, 0x53, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x45, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x31, 0xff, 0xff, 0xff, 0xe9, 0x33, 0xff, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_POP_EXCEPT_code_holes[16] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xfd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x126, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x16b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_POP_EXCEPT_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_POP_EXCEPT_data_holes[1];

// _LOAD_ATTR_SLOTplus_POP_FRAME
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_POP_FRAME.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f7                      movq    %rsi, %r15
// c: 49 89 fe                      movq    %rdi, %r14
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 74 1d                         je      0x46 <_JIT_ENTRY+0x46>
// 29: 48 89 d3                      movq    %rdx, %rbx
// 2c: 41 8b 45 00                   movl    (%r13), %eax
// 30: ff c0                         incl    %eax
// 32: 75 42                         jne     0x76 <_JIT_ENTRY+0x76>
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 52                         jle     0x8f <_JIT_ENTRY+0x8f>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 74                         jns     0xb5 <_JIT_ENTRY+0xb5>
// 41: e9 85 00 00 00                jmp     0xcb <_JIT_ENTRY+0xcb>
// 46: 4d 29 f7                      subq    %r14, %r15
// 49: 49 83 c7 b8                   addq    $-0x48, %r15
// 4d: 49 c1 ef 03                   shrq    $0x3, %r15
// 51: 45 89 7e 40                   movl    %r15d, 0x40(%r14)
// 55: 49 8b 06                      movq    (%r14), %rax
// 58: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005a:  R_X86_64_64  _JIT_TARGET
// 62: 89 c9                         movl    %ecx, %ecx
// 64: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 6c: 5b                            popq    %rbx
// 6d: 41 5c                         popq    %r12
// 6f: 41 5d                         popq    %r13
// 71: 41 5e                         popq    %r14
// 73: 41 5f                         popq    %r15
// 75: c3                            retq
// 76: 41 89 45 00                   movl    %eax, (%r13)
// 7a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007c:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 84: ff d0                         callq   *%rax
// 86: 49 8b 04 24                   movq    (%r12), %rax
// 8a: 48 85 c0                      testq   %rax, %rax
// 8d: 7f ae                         jg      0x3d <_JIT_ENTRY+0x3d>
// 8f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000091:  R_X86_64_64  .rodata.str1.1
// 99: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009b:  R_X86_64_64  _Py_NegativeRefcount
// a3: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a8: 4c 89 e2                      movq    %r12, %rdx
// ab: ff d0                         callq   *%rax
// ad: 49 8b 04 24                   movq    (%r12), %rax
// b1: 85 c0                         testl   %eax, %eax
// b3: 78 16                         js      0xcb <_JIT_ENTRY+0xcb>
// b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bf: ff d0                         callq   *%rax
// c1: 49 ff 0c 24                   decq    (%r12)
// c5: 0f 84 89 00 00 00             je      0x154 <_JIT_ENTRY+0x154>
// cb: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d1:  R_X86_64_64  _JIT_OPARG
// d9: a8 01                         testb   $0x1, %al
// db: 74 07                         je      0xe4 <_JIT_ENTRY+0xe4>
// dd: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// e4: 83 e0 01                      andl    $0x1, %eax
// e7: 49 8d 0c c7                   leaq    (%r15,%rax,8), %rcx
// eb: 48 83 c1 f8                   addq    $-0x8, %rcx
// ef: 4d 8b 64 c7 f8                movq    -0x8(%r15,%rax,8), %r12
// f4: 4c 29 f1                      subq    %r14, %rcx
// f7: 48 83 c1 b8                   addq    $-0x48, %rcx
// fb: 48 c1 e9 03                   shrq    $0x3, %rcx
// ff: 41 89 4e 40                   movl    %ecx, 0x40(%r14)
// 103: ff 43 24                      incl    0x24(%rbx)
// 106: 4d 8b 7e 08                   movq    0x8(%r14), %r15
// 10a: 4c 89 7b 40                   movq    %r15, 0x40(%rbx)
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _PyEval_FrameClearAndPop
// 118: 48 89 df                      movq    %rbx, %rdi
// 11b: 4c 89 f6                      movq    %r14, %rsi
// 11e: ff d0                         callq   *%rax
// 120: 49 63 47 40                   movslq  0x40(%r15), %rax
// 124: 4d 89 64 c7 48                movq    %r12, 0x48(%r15,%rax,8)
// 129: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 12d: 48 83 c6 50                   addq    $0x50, %rsi
// 131: 41 c7 47 40 ff ff ff ff       movl    $0xffffffff, 0x40(%r15) # imm = 0xFFFFFFFF
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  _JIT_CONTINUE
// 143: 4c 89 ff                      movq    %r15, %rdi
// 146: 48 89 da                      movq    %rbx, %rdx
// 149: 5b                            popq    %rbx
// 14a: 41 5c                         popq    %r12
// 14c: 41 5d                         popq    %r13
// 14e: 41 5e                         popq    %r14
// 150: 41 5f                         popq    %r15
// 152: ff e0                         jmpq    *%rax
// 154: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000156:  R_X86_64_64  _Py_Dealloc
// 15e: 4c 89 e7                      movq    %r12, %rdi
// 161: ff d0                         callq   *%rax
// 163: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// 167: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000169:  R_X86_64_64  _JIT_OPARG
// 171: a8 01                         testb   $0x1, %al
// 173: 0f 85 64 ff ff ff             jne     0xdd <_JIT_ENTRY+0xdd>
// 179: e9 66 ff ff ff                jmp     0xe4 <_JIT_ENTRY+0xe4>
// 17e: 
static const unsigned char _LOAD_ATTR_SLOTplus_POP_FRAME_code_body[383] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1d, 0x48, 0x89, 0xd3, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x42, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x52, 0x85, 0xc0, 0x79, 0x74, 0xe9, 0x85, 0x00, 0x00, 0x00, 0x4d, 0x29, 0xf7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xae, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x89, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x0c, 0xc7, 0x48, 0x83, 0xc1, 0xf8, 0x4d, 0x8b, 0x64, 0xc7, 0xf8, 0x4c, 0x29, 0xf1, 0x48, 0x83, 0xc1, 0xb8, 0x48, 0xc1, 0xe9, 0x03, 0x41, 0x89, 0x4e, 0x40, 0xff, 0x43, 0x24, 0x4d, 0x8b, 0x7e, 0x08, 0x4c, 0x89, 0x7b, 0x40, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0xff, 0xd0, 0x49, 0x63, 0x47, 0x40, 0x4d, 0x89, 0x64, 0xc7, 0x48, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0x50, 0x41, 0xc7, 0x47, 0x40, 0xff, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x48, 0x89, 0xda, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x64, 0xff, 0xff, 0xff, 0xe9, 0x66, 0xff, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_POP_FRAME_code_holes[12] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FrameClearAndPop, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x169, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_POP_FRAME_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_POP_FRAME_data_holes[1];

// _LOAD_ATTR_SLOTplus_POP_TOP
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_POP_TOP.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f7                      movq    %rsi, %r15
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 49 8b 2c 04                   movq    (%r12,%rax), %rbp
// 26: 48 85 ed                      testq   %rbp, %rbp
// 29: 74 2a                         je      0x55 <_JIT_ENTRY+0x55>
// 2b: 49 89 d6                      movq    %rdx, %r14
// 2e: 8b 45 00                      movl    (%rbp), %eax
// 31: ff c0                         incl    %eax
// 33: 75 57                         jne     0x8c <_JIT_ENTRY+0x8c>
// 35: 49 8b 04 24                   movq    (%r12), %rax
// 39: 48 85 c0                      testq   %rax, %rax
// 3c: 7e 66                         jle     0xa4 <_JIT_ENTRY+0xa4>
// 3e: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000040:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 48: 85 c0                         testl   %eax, %eax
// 4a: 0f 89 84 00 00 00             jns     0xd4 <_JIT_ENTRY+0xd4>
// 50: e9 8c 00 00 00                jmp     0xe1 <_JIT_ENTRY+0xe1>
// 55: 49 29 df                      subq    %rbx, %r15
// 58: 49 83 c7 b8                   addq    $-0x48, %r15
// 5c: 49 c1 ef 03                   shrq    $0x3, %r15
// 60: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 64: 48 8b 03                      movq    (%rbx), %rax
// 67: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000069:  R_X86_64_64  _JIT_TARGET
// 71: 89 c9                         movl    %ecx, %ecx
// 73: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 77: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 7d: 48 83 c4 08                   addq    $0x8, %rsp
// 81: 5b                            popq    %rbx
// 82: 41 5c                         popq    %r12
// 84: 41 5d                         popq    %r13
// 86: 41 5e                         popq    %r14
// 88: 41 5f                         popq    %r15
// 8a: 5d                            popq    %rbp
// 8b: c3                            retq
// 8c: 89 45 00                      movl    %eax, (%rbp)
// 8f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000091:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 99: ff d0                         callq   *%rax
// 9b: 49 8b 04 24                   movq    (%r12), %rax
// 9f: 48 85 c0                      testq   %rax, %rax
// a2: 7f 9a                         jg      0x3e <_JIT_ENTRY+0x3e>
// a4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a6:  R_X86_64_64  .rodata.str1.1
// ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b0:  R_X86_64_64  _Py_NegativeRefcount
// b8: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// bd: 4c 89 e2                      movq    %r12, %rdx
// c0: ff d0                         callq   *%rax
// c2: 49 8b 04 24                   movq    (%r12), %rax
// c6: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000000c8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d0: 85 c0                         testl   %eax, %eax
// d2: 78 0d                         js      0xe1 <_JIT_ENTRY+0xe1>
// d4: 41 ff d5                      callq   *%r13
// d7: 49 ff 0c 24                   decq    (%r12)
// db: 0f 84 ab 00 00 00             je      0x18c <_JIT_ENTRY+0x18c>
// e1: 49 89 6f f8                   movq    %rbp, -0x8(%r15)
// e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e7:  R_X86_64_64  _JIT_OPARG
// ef: a8 01                         testb   $0x1, %al
// f1: 74 07                         je      0xfa <_JIT_ENTRY+0xfa>
// f3: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// fa: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000000fc:  R_X86_64_64  _JIT_OPARG
// 104: 83 e5 01                      andl    $0x1, %ebp
// 107: 4d 8b 64 ef f8                movq    -0x8(%r15,%rbp,8), %r12
// 10c: 49 8b 04 24                   movq    (%r12), %rax
// 110: 48 85 c0                      testq   %rax, %rax
// 113: 7e 0e                         jle     0x123 <_JIT_ENTRY+0x123>
// 115: 4d 8d 3c ef                   leaq    (%r15,%rbp,8), %r15
// 119: 49 83 c7 f8                   addq    $-0x8, %r15
// 11d: 85 c0                         testl   %eax, %eax
// 11f: 79 30                         jns     0x151 <_JIT_ENTRY+0x151>
// 121: eb 46                         jmp     0x169 <_JIT_ENTRY+0x169>
// 123: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000125:  R_X86_64_64  .rodata.str1.1
// 12d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012f:  R_X86_64_64  _Py_NegativeRefcount
// 137: be 54 00 00 00                movl    $0x54, %esi
// 13c: 4c 89 e2                      movq    %r12, %rdx
// 13f: ff d0                         callq   *%rax
// 141: 49 8b 04 24                   movq    (%r12), %rax
// 145: 4d 8d 3c ef                   leaq    (%r15,%rbp,8), %r15
// 149: 49 83 c7 f8                   addq    $-0x8, %r15
// 14d: 85 c0                         testl   %eax, %eax
// 14f: 78 18                         js      0x169 <_JIT_ENTRY+0x169>
// 151: 41 ff d5                      callq   *%r13
// 154: 49 ff 0c 24                   decq    (%r12)
// 158: 75 0f                         jne     0x169 <_JIT_ENTRY+0x169>
// 15a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015c:  R_X86_64_64  _Py_Dealloc
// 164: 4c 89 e7                      movq    %r12, %rdi
// 167: ff d0                         callq   *%rax
// 169: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016b:  R_X86_64_64  _JIT_CONTINUE
// 173: 48 89 df                      movq    %rbx, %rdi
// 176: 4c 89 fe                      movq    %r15, %rsi
// 179: 4c 89 f2                      movq    %r14, %rdx
// 17c: 48 83 c4 08                   addq    $0x8, %rsp
// 180: 5b                            popq    %rbx
// 181: 41 5c                         popq    %r12
// 183: 41 5d                         popq    %r13
// 185: 41 5e                         popq    %r14
// 187: 41 5f                         popq    %r15
// 189: 5d                            popq    %rbp
// 18a: ff e0                         jmpq    *%rax
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _Py_Dealloc
// 196: 4c 89 e7                      movq    %r12, %rdi
// 199: ff d0                         callq   *%rax
// 19b: 49 89 6f f8                   movq    %rbp, -0x8(%r15)
// 19f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a1:  R_X86_64_64  _JIT_OPARG
// 1a9: a8 01                         testb   $0x1, %al
// 1ab: 0f 85 42 ff ff ff             jne     0xf3 <_JIT_ENTRY+0xf3>
// 1b1: e9 44 ff ff ff                jmp     0xfa <_JIT_ENTRY+0xfa>
// 1b6: 
static const unsigned char _LOAD_ATTR_SLOTplus_POP_TOP_code_body[439] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8b, 0x2c, 0x04, 0x48, 0x85, 0xed, 0x74, 0x2a, 0x49, 0x89, 0xd6, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x57, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x66, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x84, 0x00, 0x00, 0x00, 0xe9, 0x8c, 0x00, 0x00, 0x00, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x9a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x0d, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xab, 0x00, 0x00, 0x00, 0x49, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe5, 0x01, 0x4d, 0x8b, 0x64, 0xef, 0xf8, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x0e, 0x4d, 0x8d, 0x3c, 0xef, 0x49, 0x83, 0xc7, 0xf8, 0x85, 0xc0, 0x79, 0x30, 0xeb, 0x46, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x54, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x3c, 0xef, 0x49, 0x83, 0xc7, 0xf8, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x42, 0xff, 0xff, 0xff, 0xe9, 0x44, 0xff, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_POP_TOP_code_holes[16] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x40, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0xa6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xc8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x125, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x12f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x16b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_POP_TOP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_POP_TOP_data_holes[1];

// _LOAD_ATTR_SLOTplus_PUSH_EXC_INFO
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_PUSH_EXC_INFO.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 49 8b 2c 04                   movq    (%r12,%rax), %rbp
// 26: 48 85 ed                      testq   %rbp, %rbp
// 29: 74 26                         je      0x51 <_JIT_ENTRY+0x51>
// 2b: 49 89 d7                      movq    %rdx, %r15
// 2e: 8b 45 00                      movl    (%rbp), %eax
// 31: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000033:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 3b: ff c0                         incl    %eax
// 3d: 75 49                         jne     0x88 <_JIT_ENTRY+0x88>
// 3f: 49 8b 04 24                   movq    (%r12), %rax
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 7e 4f                         jle     0x97 <_JIT_ENTRY+0x97>
// 48: 85 c0                         testl   %eax, %eax
// 4a: 79 71                         jns     0xbd <_JIT_ENTRY+0xbd>
// 4c: e9 8d 00 00 00                jmp     0xde <_JIT_ENTRY+0xde>
// 51: 49 29 de                      subq    %rbx, %r14
// 54: 49 83 c6 b8                   addq    $-0x48, %r14
// 58: 49 c1 ee 03                   shrq    $0x3, %r14
// 5c: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 60: 48 8b 03                      movq    (%rbx), %rax
// 63: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000065:  R_X86_64_64  _JIT_TARGET
// 6d: 89 c9                         movl    %ecx, %ecx
// 6f: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 73: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 79: 48 83 c4 08                   addq    $0x8, %rsp
// 7d: 5b                            popq    %rbx
// 7e: 41 5c                         popq    %r12
// 80: 41 5d                         popq    %r13
// 82: 41 5e                         popq    %r14
// 84: 41 5f                         popq    %r15
// 86: 5d                            popq    %rbp
// 87: c3                            retq
// 88: 89 45 00                      movl    %eax, (%rbp)
// 8b: 41 ff d5                      callq   *%r13
// 8e: 49 8b 04 24                   movq    (%r12), %rax
// 92: 48 85 c0                      testq   %rax, %rax
// 95: 7f b1                         jg      0x48 <_JIT_ENTRY+0x48>
// 97: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000099:  R_X86_64_64  .rodata.str1.1
// a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a3:  R_X86_64_64  _Py_NegativeRefcount
// ab: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// b0: 4c 89 e2                      movq    %r12, %rdx
// b3: ff d0                         callq   *%rax
// b5: 49 8b 04 24                   movq    (%r12), %rax
// b9: 85 c0                         testl   %eax, %eax
// bb: 78 21                         js      0xde <_JIT_ENTRY+0xde>
// bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bf:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c7: ff d0                         callq   *%rax
// c9: 49 ff 0c 24                   decq    (%r12)
// cd: 75 0f                         jne     0xde <_JIT_ENTRY+0xde>
// cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d1:  R_X86_64_64  _Py_Dealloc
// d9: 4c 89 e7                      movq    %r12, %rdi
// dc: ff d0                         callq   *%rax
// de: 4c 89 e9                      movq    %r13, %rcx
// e1: 49 89 6e f8                   movq    %rbp, -0x8(%r14)
// e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e7:  R_X86_64_64  _JIT_OPARG
// ef: a8 01                         testb   $0x1, %al
// f1: 74 07                         je      0xfa <_JIT_ENTRY+0xfa>
// f3: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// fa: 83 e0 01                      andl    $0x1, %eax
// fd: 4d 8b 64 c6 f8                movq    -0x8(%r14,%rax,8), %r12
// 102: 49 8b 6f 70                   movq    0x70(%r15), %rbp
// 106: 4c 8b 6d 00                   movq    (%rbp), %r13
// 10a: 41 8b 04 24                   movl    (%r12), %eax
// 10e: ff c0                         incl    %eax
// 110: 74 06                         je      0x118 <_JIT_ENTRY+0x118>
// 112: 41 89 04 24                   movl    %eax, (%r12)
// 116: ff d1                         callq   *%rcx
// 118: 4d 85 ed                      testq   %r13, %r13
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  _Py_NoneStruct
// 125: 49 0f 45 c5                   cmovneq %r13, %rax
// 129: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000012b:  R_X86_64_64  _JIT_OPARG
// 133: 83 e1 01                      andl    $0x1, %ecx
// 136: 4c 89 65 00                   movq    %r12, (%rbp)
// 13a: 49 89 44 ce f8                movq    %rax, -0x8(%r14,%rcx,8)
// 13f: 4d 89 24 ce                   movq    %r12, (%r14,%rcx,8)
// 143: 49 8d 34 ce                   leaq    (%r14,%rcx,8), %rsi
// 147: 48 83 c6 08                   addq    $0x8, %rsi
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _JIT_CONTINUE
// 155: 48 89 df                      movq    %rbx, %rdi
// 158: 4c 89 fa                      movq    %r15, %rdx
// 15b: 48 83 c4 08                   addq    $0x8, %rsp
// 15f: 5b                            popq    %rbx
// 160: 41 5c                         popq    %r12
// 162: 41 5d                         popq    %r13
// 164: 41 5e                         popq    %r14
// 166: 41 5f                         popq    %r15
// 168: 5d                            popq    %rbp
// 169: ff e0                         jmpq    *%rax
// 16b: 
static const unsigned char _LOAD_ATTR_SLOTplus_PUSH_EXC_INFO_code_body[364] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8b, 0x2c, 0x04, 0x48, 0x85, 0xed, 0x74, 0x26, 0x49, 0x89, 0xd7, 0x8b, 0x45, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0x75, 0x49, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4f, 0x85, 0xc0, 0x79, 0x71, 0xe9, 0x8d, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0x45, 0x00, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0xe9, 0x49, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x4d, 0x8b, 0x64, 0xc6, 0xf8, 0x49, 0x8b, 0x6f, 0x70, 0x4c, 0x8b, 0x6d, 0x00, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x06, 0x41, 0x89, 0x04, 0x24, 0xff, 0xd1, 0x4d, 0x85, 0xed, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x0f, 0x45, 0xc5, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe1, 0x01, 0x4c, 0x89, 0x65, 0x00, 0x49, 0x89, 0x44, 0xce, 0xf8, 0x4d, 0x89, 0x24, 0xce, 0x49, 0x8d, 0x34, 0xce, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_ATTR_SLOTplus_PUSH_EXC_INFO_code_holes[12] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x65, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x99, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xa3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xbf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_PUSH_EXC_INFO_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_PUSH_EXC_INFO_data_holes[1];

// _LOAD_ATTR_SLOTplus_PUSH_FRAME
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_PUSH_FRAME.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f7                      movq    %rsi, %r15
// c: 49 89 fe                      movq    %rdi, %r14
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 74 1d                         je      0x46 <_JIT_ENTRY+0x46>
// 29: 48 89 d3                      movq    %rdx, %rbx
// 2c: 41 8b 45 00                   movl    (%r13), %eax
// 30: ff c0                         incl    %eax
// 32: 75 42                         jne     0x76 <_JIT_ENTRY+0x76>
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 52                         jle     0x8f <_JIT_ENTRY+0x8f>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 74                         jns     0xb5 <_JIT_ENTRY+0xb5>
// 41: e9 81 00 00 00                jmp     0xc7 <_JIT_ENTRY+0xc7>
// 46: 4d 29 f7                      subq    %r14, %r15
// 49: 49 83 c7 b8                   addq    $-0x48, %r15
// 4d: 49 c1 ef 03                   shrq    $0x3, %r15
// 51: 45 89 7e 40                   movl    %r15d, 0x40(%r14)
// 55: 49 8b 06                      movq    (%r14), %rax
// 58: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005a:  R_X86_64_64  _JIT_TARGET
// 62: 89 c9                         movl    %ecx, %ecx
// 64: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 6c: 5b                            popq    %rbx
// 6d: 41 5c                         popq    %r12
// 6f: 41 5d                         popq    %r13
// 71: 41 5e                         popq    %r14
// 73: 41 5f                         popq    %r15
// 75: c3                            retq
// 76: 41 89 45 00                   movl    %eax, (%r13)
// 7a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007c:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 84: ff d0                         callq   *%rax
// 86: 49 8b 04 24                   movq    (%r12), %rax
// 8a: 48 85 c0                      testq   %rax, %rax
// 8d: 7f ae                         jg      0x3d <_JIT_ENTRY+0x3d>
// 8f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000091:  R_X86_64_64  .rodata.str1.1
// 99: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009b:  R_X86_64_64  _Py_NegativeRefcount
// a3: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a8: 4c 89 e2                      movq    %r12, %rdx
// ab: ff d0                         callq   *%rax
// ad: 49 8b 04 24                   movq    (%r12), %rax
// b1: 85 c0                         testl   %eax, %eax
// b3: 78 12                         js      0xc7 <_JIT_ENTRY+0xc7>
// b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bf: ff d0                         callq   *%rax
// c1: 49 ff 0c 24                   decq    (%r12)
// c5: 74 6e                         je      0x135 <_JIT_ENTRY+0x135>
// c7: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cd:  R_X86_64_64  _JIT_OPARG
// d5: a8 01                         testb   $0x1, %al
// d7: 74 07                         je      0xe0 <_JIT_ENTRY+0xe0>
// d9: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// e0: 83 e0 01                      andl    $0x1, %eax
// e3: 49 8d 0c c7                   leaq    (%r15,%rax,8), %rcx
// e7: 48 83 c1 f8                   addq    $-0x8, %rcx
// eb: 49 8b 7c c7 f8                movq    -0x8(%r15,%rax,8), %rdi
// f0: 4c 29 f1                      subq    %r14, %rcx
// f3: 48 83 c1 b8                   addq    $-0x48, %rcx
// f7: 48 c1 e9 03                   shrq    $0x3, %rcx
// fb: 41 89 4e 40                   movl    %ecx, 0x40(%r14)
// ff: 4c 89 77 08                   movq    %r14, 0x8(%rdi)
// 103: 48 89 7b 40                   movq    %rdi, 0x40(%rbx)
// 107: ff 4b 24                      decl    0x24(%rbx)
// 10a: 48 63 47 40                   movslq  0x40(%rdi), %rax
// 10e: 48 8d 34 c7                   leaq    (%rdi,%rax,8), %rsi
// 112: 48 83 c6 48                   addq    $0x48, %rsi
// 116: c7 47 40 ff ff ff ff          movl    $0xffffffff, 0x40(%rdi) # imm = 0xFFFFFFFF
// 11d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011f:  R_X86_64_64  _JIT_CONTINUE
// 127: 48 89 da                      movq    %rbx, %rdx
// 12a: 5b                            popq    %rbx
// 12b: 41 5c                         popq    %r12
// 12d: 41 5d                         popq    %r13
// 12f: 41 5e                         popq    %r14
// 131: 41 5f                         popq    %r15
// 133: ff e0                         jmpq    *%rax
// 135: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000137:  R_X86_64_64  _Py_Dealloc
// 13f: 4c 89 e7                      movq    %r12, %rdi
// 142: ff d0                         callq   *%rax
// 144: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// 148: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014a:  R_X86_64_64  _JIT_OPARG
// 152: a8 01                         testb   $0x1, %al
// 154: 75 83                         jne     0xd9 <_JIT_ENTRY+0xd9>
// 156: eb 88                         jmp     0xe0 <_JIT_ENTRY+0xe0>
// 158: 
static const unsigned char _LOAD_ATTR_SLOTplus_PUSH_FRAME_code_body[345] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1d, 0x48, 0x89, 0xd3, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x42, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x52, 0x85, 0xc0, 0x79, 0x74, 0xe9, 0x81, 0x00, 0x00, 0x00, 0x4d, 0x29, 0xf7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xae, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x6e, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x0c, 0xc7, 0x48, 0x83, 0xc1, 0xf8, 0x49, 0x8b, 0x7c, 0xc7, 0xf8, 0x4c, 0x29, 0xf1, 0x48, 0x83, 0xc1, 0xb8, 0x48, 0xc1, 0xe9, 0x03, 0x41, 0x89, 0x4e, 0x40, 0x4c, 0x89, 0x77, 0x08, 0x48, 0x89, 0x7b, 0x40, 0xff, 0x4b, 0x24, 0x48, 0x63, 0x47, 0x40, 0x48, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0x48, 0xc7, 0x47, 0x40, 0xff, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xda, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x75, 0x83, 0xeb, 0x88};
static const Hole _LOAD_ATTR_SLOTplus_PUSH_FRAME_code_holes[11] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xcd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x11f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x137, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x14a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_PUSH_FRAME_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_PUSH_FRAME_data_holes[1];

// _LOAD_ATTR_SLOTplus_PUSH_NULL
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_PUSH_NULL.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f6                      movq    %rsi, %r14
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 74 1d                         je      0x46 <_JIT_ENTRY+0x46>
// 29: 49 89 d7                      movq    %rdx, %r15
// 2c: 41 8b 45 00                   movl    (%r13), %eax
// 30: ff c0                         incl    %eax
// 32: 75 42                         jne     0x76 <_JIT_ENTRY+0x76>
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 52                         jle     0x8f <_JIT_ENTRY+0x8f>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 74                         jns     0xb5 <_JIT_ENTRY+0xb5>
// 41: e9 81 00 00 00                jmp     0xc7 <_JIT_ENTRY+0xc7>
// 46: 49 29 de                      subq    %rbx, %r14
// 49: 49 83 c6 b8                   addq    $-0x48, %r14
// 4d: 49 c1 ee 03                   shrq    $0x3, %r14
// 51: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 55: 48 8b 03                      movq    (%rbx), %rax
// 58: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005a:  R_X86_64_64  _JIT_TARGET
// 62: 89 c9                         movl    %ecx, %ecx
// 64: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 6c: 5b                            popq    %rbx
// 6d: 41 5c                         popq    %r12
// 6f: 41 5d                         popq    %r13
// 71: 41 5e                         popq    %r14
// 73: 41 5f                         popq    %r15
// 75: c3                            retq
// 76: 41 89 45 00                   movl    %eax, (%r13)
// 7a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007c:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 84: ff d0                         callq   *%rax
// 86: 49 8b 04 24                   movq    (%r12), %rax
// 8a: 48 85 c0                      testq   %rax, %rax
// 8d: 7f ae                         jg      0x3d <_JIT_ENTRY+0x3d>
// 8f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000091:  R_X86_64_64  .rodata.str1.1
// 99: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009b:  R_X86_64_64  _Py_NegativeRefcount
// a3: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a8: 4c 89 e2                      movq    %r12, %rdx
// ab: ff d0                         callq   *%rax
// ad: 49 8b 04 24                   movq    (%r12), %rax
// b1: 85 c0                         testl   %eax, %eax
// b3: 78 12                         js      0xc7 <_JIT_ENTRY+0xc7>
// b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bf: ff d0                         callq   *%rax
// c1: 49 ff 0c 24                   decq    (%r12)
// c5: 74 47                         je      0x10e <_JIT_ENTRY+0x10e>
// c7: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cd:  R_X86_64_64  _JIT_OPARG
// d5: a8 01                         testb   $0x1, %al
// d7: 74 07                         je      0xe0 <_JIT_ENTRY+0xe0>
// d9: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// e0: 83 e0 01                      andl    $0x1, %eax
// e3: 49 c7 04 c6 00 00 00 00       movq    $0x0, (%r14,%rax,8)
// eb: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// ef: 48 83 c6 08                   addq    $0x8, %rsi
// f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f5:  R_X86_64_64  _JIT_CONTINUE
// fd: 48 89 df                      movq    %rbx, %rdi
// 100: 4c 89 fa                      movq    %r15, %rdx
// 103: 5b                            popq    %rbx
// 104: 41 5c                         popq    %r12
// 106: 41 5d                         popq    %r13
// 108: 41 5e                         popq    %r14
// 10a: 41 5f                         popq    %r15
// 10c: ff e0                         jmpq    *%rax
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_Dealloc
// 118: 4c 89 e7                      movq    %r12, %rdi
// 11b: ff d0                         callq   *%rax
// 11d: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 121: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000123:  R_X86_64_64  _JIT_OPARG
// 12b: a8 01                         testb   $0x1, %al
// 12d: 75 aa                         jne     0xd9 <_JIT_ENTRY+0xd9>
// 12f: eb af                         jmp     0xe0 <_JIT_ENTRY+0xe0>
// 131: 
static const unsigned char _LOAD_ATTR_SLOTplus_PUSH_NULL_code_body[306] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1d, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x42, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x52, 0x85, 0xc0, 0x79, 0x74, 0xe9, 0x81, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xae, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x47, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0xc7, 0x04, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x75, 0xaa, 0xeb, 0xaf};
static const Hole _LOAD_ATTR_SLOTplus_PUSH_NULL_code_holes[11] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xcd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x123, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_PUSH_NULL_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_PUSH_NULL_data_holes[1];

// _LOAD_ATTR_SLOTplus_RESUME_CHECK
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_RESUME_CHECK.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 48 89 f3                      movq    %rsi, %rbx
// c: 49 89 fe                      movq    %rdi, %r14
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 74 1a                         je      0x43 <_JIT_ENTRY+0x43>
// 29: 49 89 d7                      movq    %rdx, %r15
// 2c: 41 8b 45 00                   movl    (%r13), %eax
// 30: ff c0                         incl    %eax
// 32: 75 17                         jne     0x4b <_JIT_ENTRY+0x4b>
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 27                         jle     0x64 <_JIT_ENTRY+0x64>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 49                         jns     0x8a <_JIT_ENTRY+0x8a>
// 41: eb 5d                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// 43: 49 8b 06                      movq    (%r14), %rax
// 46: e9 a6 00 00 00                jmp     0xf1 <_JIT_ENTRY+0xf1>
// 4b: 41 89 45 00                   movl    %eax, (%r13)
// 4f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000051:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 59: ff d0                         callq   *%rax
// 5b: 49 8b 04 24                   movq    (%r12), %rax
// 5f: 48 85 c0                      testq   %rax, %rax
// 62: 7f d9                         jg      0x3d <_JIT_ENTRY+0x3d>
// 64: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000066:  R_X86_64_64  .rodata.str1.1
// 6e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000070:  R_X86_64_64  _Py_NegativeRefcount
// 78: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 7d: 4c 89 e2                      movq    %r12, %rdx
// 80: ff d0                         callq   *%rax
// 82: 49 8b 04 24                   movq    (%r12), %rax
// 86: 85 c0                         testl   %eax, %eax
// 88: 78 16                         js      0xa0 <_JIT_ENTRY+0xa0>
// 8a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 94: ff d0                         callq   *%rax
// 96: 49 ff 0c 24                   decq    (%r12)
// 9a: 0f 84 80 00 00 00             je      0x120 <_JIT_ENTRY+0x120>
// a0: 4c 89 6b f8                   movq    %r13, -0x8(%rbx)
// a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a6:  R_X86_64_64  _JIT_OPARG
// ae: a8 01                         testb   $0x1, %al
// b0: 74 07                         je      0xb9 <_JIT_ENTRY+0xb9>
// b2: 48 c7 03 00 00 00 00          movq    $0x0, (%rbx)
// b9: 83 e0 01                      andl    $0x1, %eax
// bc: 48 8d 1c c3                   leaq    (%rbx,%rax,8), %rbx
// c0: 49 8b 47 10                   movq    0x10(%r15), %rax
// c4: 48 8b 08                      movq    (%rax), %rcx
// c7: 49 8b 06                      movq    (%r14), %rax
// ca: 48 3b 88 a8 00 00 00          cmpq    0xa8(%rax), %rcx
// d1: 75 1e                         jne     0xf1 <_JIT_ENTRY+0xf1>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _JIT_CONTINUE
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 89 de                      movq    %rbx, %rsi
// e3: 4c 89 fa                      movq    %r15, %rdx
// e6: 5b                            popq    %rbx
// e7: 41 5c                         popq    %r12
// e9: 41 5d                         popq    %r13
// eb: 41 5e                         popq    %r14
// ed: 41 5f                         popq    %r15
// ef: ff e0                         jmpq    *%rax
// f1: 4c 29 f3                      subq    %r14, %rbx
// f4: 48 83 c3 b8                   addq    $-0x48, %rbx
// f8: 48 c1 eb 03                   shrq    $0x3, %rbx
// fc: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 100: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000102:  R_X86_64_64  _JIT_TARGET
// 10a: 89 c9                         movl    %ecx, %ecx
// 10c: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 110: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 116: 5b                            popq    %rbx
// 117: 41 5c                         popq    %r12
// 119: 41 5d                         popq    %r13
// 11b: 41 5e                         popq    %r14
// 11d: 41 5f                         popq    %r15
// 11f: c3                            retq
// 120: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000122:  R_X86_64_64  _Py_Dealloc
// 12a: 4c 89 e7                      movq    %r12, %rdi
// 12d: ff d0                         callq   *%rax
// 12f: 4c 89 6b f8                   movq    %r13, -0x8(%rbx)
// 133: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000135:  R_X86_64_64  _JIT_OPARG
// 13d: a8 01                         testb   $0x1, %al
// 13f: 0f 85 6d ff ff ff             jne     0xb2 <_JIT_ENTRY+0xb2>
// 145: e9 6f ff ff ff                jmp     0xb9 <_JIT_ENTRY+0xb9>
// 14a: 
static const unsigned char _LOAD_ATTR_SLOTplus_RESUME_CHECK_code_body[331] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1a, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x17, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x27, 0x85, 0xc0, 0x79, 0x49, 0xeb, 0x5d, 0x49, 0x8b, 0x06, 0xe9, 0xa6, 0x00, 0x00, 0x00, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xd9, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x80, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x6b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x48, 0xc7, 0x03, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x48, 0x8d, 0x1c, 0xc3, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x08, 0x49, 0x8b, 0x06, 0x48, 0x3b, 0x88, 0xa8, 0x00, 0x00, 0x00, 0x75, 0x1e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x6d, 0xff, 0xff, 0xff, 0xe9, 0x6f, 0xff, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_RESUME_CHECK_code_holes[11] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x66, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x70, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa6, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x122, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_RESUME_CHECK_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_RESUME_CHECK_data_holes[1];

// _LOAD_ATTR_SLOTplus_SAVE_RETURN_OFFSET
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_SAVE_RETURN_OFFSET.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f6                      movq    %rsi, %r14
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 74 1d                         je      0x46 <_JIT_ENTRY+0x46>
// 29: 49 89 d7                      movq    %rdx, %r15
// 2c: 41 8b 45 00                   movl    (%r13), %eax
// 30: ff c0                         incl    %eax
// 32: 75 42                         jne     0x76 <_JIT_ENTRY+0x76>
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 52                         jle     0x8f <_JIT_ENTRY+0x8f>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 74                         jns     0xb5 <_JIT_ENTRY+0xb5>
// 41: e9 81 00 00 00                jmp     0xc7 <_JIT_ENTRY+0xc7>
// 46: 49 29 de                      subq    %rbx, %r14
// 49: 49 83 c6 b8                   addq    $-0x48, %r14
// 4d: 49 c1 ee 03                   shrq    $0x3, %r14
// 51: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 55: 48 8b 03                      movq    (%rbx), %rax
// 58: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005a:  R_X86_64_64  _JIT_TARGET
// 62: 89 c9                         movl    %ecx, %ecx
// 64: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 6c: 5b                            popq    %rbx
// 6d: 41 5c                         popq    %r12
// 6f: 41 5d                         popq    %r13
// 71: 41 5e                         popq    %r14
// 73: 41 5f                         popq    %r15
// 75: c3                            retq
// 76: 41 89 45 00                   movl    %eax, (%r13)
// 7a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007c:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 84: ff d0                         callq   *%rax
// 86: 49 8b 04 24                   movq    (%r12), %rax
// 8a: 48 85 c0                      testq   %rax, %rax
// 8d: 7f ae                         jg      0x3d <_JIT_ENTRY+0x3d>
// 8f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000091:  R_X86_64_64  .rodata.str1.1
// 99: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009b:  R_X86_64_64  _Py_NegativeRefcount
// a3: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a8: 4c 89 e2                      movq    %r12, %rdx
// ab: ff d0                         callq   *%rax
// ad: 49 8b 04 24                   movq    (%r12), %rax
// b1: 85 c0                         testl   %eax, %eax
// b3: 78 12                         js      0xc7 <_JIT_ENTRY+0xc7>
// b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bf: ff d0                         callq   *%rax
// c1: 49 ff 0c 24                   decq    (%r12)
// c5: 74 3f                         je      0x106 <_JIT_ENTRY+0x106>
// c7: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cd:  R_X86_64_64  _JIT_OPARG
// d5: a8 01                         testb   $0x1, %al
// d7: 74 07                         je      0xe0 <_JIT_ENTRY+0xe0>
// d9: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// e0: 66 89 43 44                   movw    %ax, 0x44(%rbx)
// e4: 83 e0 01                      andl    $0x1, %eax
// e7: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_CONTINUE
// f5: 48 89 df                      movq    %rbx, %rdi
// f8: 4c 89 fa                      movq    %r15, %rdx
// fb: 5b                            popq    %rbx
// fc: 41 5c                         popq    %r12
// fe: 41 5d                         popq    %r13
// 100: 41 5e                         popq    %r14
// 102: 41 5f                         popq    %r15
// 104: ff e0                         jmpq    *%rax
// 106: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000108:  R_X86_64_64  _Py_Dealloc
// 110: 4c 89 e7                      movq    %r12, %rdi
// 113: ff d0                         callq   *%rax
// 115: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 119: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011b:  R_X86_64_64  _JIT_OPARG
// 123: a8 01                         testb   $0x1, %al
// 125: 75 b2                         jne     0xd9 <_JIT_ENTRY+0xd9>
// 127: eb b7                         jmp     0xe0 <_JIT_ENTRY+0xe0>
// 129: 
static const unsigned char _LOAD_ATTR_SLOTplus_SAVE_RETURN_OFFSET_code_body[298] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1d, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x42, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x52, 0x85, 0xc0, 0x79, 0x74, 0xe9, 0x81, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xae, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x3f, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x66, 0x89, 0x43, 0x44, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x75, 0xb2, 0xeb, 0xb7};
static const Hole _LOAD_ATTR_SLOTplus_SAVE_RETURN_OFFSET_code_holes[11] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xcd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x11b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_SAVE_RETURN_OFFSET_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_SAVE_RETURN_OFFSET_data_holes[1];

// _LOAD_ATTR_SLOTplus_SETUP_ANNOTATIONS
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_SETUP_ANNOTATIONS.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f7                      movq    %rsi, %r15
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 26: 4d 85 ed                      testq   %r13, %r13
// 29: 74 1d                         je      0x48 <_JIT_ENTRY+0x48>
// 2b: 49 89 d6                      movq    %rdx, %r14
// 2e: 41 8b 45 00                   movl    (%r13), %eax
// 32: ff c0                         incl    %eax
// 34: 75 3f                         jne     0x75 <_JIT_ENTRY+0x75>
// 36: 49 8b 04 24                   movq    (%r12), %rax
// 3a: 48 85 c0                      testq   %rax, %rax
// 3d: 7e 4f                         jle     0x8e <_JIT_ENTRY+0x8e>
// 3f: 85 c0                         testl   %eax, %eax
// 41: 79 71                         jns     0xb4 <_JIT_ENTRY+0xb4>
// 43: e9 82 00 00 00                jmp     0xca <_JIT_ENTRY+0xca>
// 48: 49 29 df                      subq    %rbx, %r15
// 4b: 49 83 c7 b8                   addq    $-0x48, %r15
// 4f: 49 c1 ef 03                   shrq    $0x3, %r15
// 53: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 57: 48 8b 03                      movq    (%rbx), %rax
// 5a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005c:  R_X86_64_64  _JIT_TARGET
// 64: 89 c9                         movl    %ecx, %ecx
// 66: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 6a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 70: e9 50 01 00 00                jmp     0x1c5 <_JIT_ENTRY+0x1c5>
// 75: 41 89 45 00                   movl    %eax, (%r13)
// 79: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007b:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 83: ff d0                         callq   *%rax
// 85: 49 8b 04 24                   movq    (%r12), %rax
// 89: 48 85 c0                      testq   %rax, %rax
// 8c: 7f b1                         jg      0x3f <_JIT_ENTRY+0x3f>
// 8e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000090:  R_X86_64_64  .rodata.str1.1
// 98: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009a:  R_X86_64_64  _Py_NegativeRefcount
// a2: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a7: 4c 89 e2                      movq    %r12, %rdx
// aa: ff d0                         callq   *%rax
// ac: 49 8b 04 24                   movq    (%r12), %rax
// b0: 85 c0                         testl   %eax, %eax
// b2: 78 16                         js      0xca <_JIT_ENTRY+0xca>
// b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// be: ff d0                         callq   *%rax
// c0: 49 ff 0c 24                   decq    (%r12)
// c4: 0f 84 0a 01 00 00             je      0x1d4 <_JIT_ENTRY+0x1d4>
// ca: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d0:  R_X86_64_64  _JIT_OPARG
// d8: a8 01                         testb   $0x1, %al
// da: 74 07                         je      0xe3 <_JIT_ENTRY+0xe3>
// dc: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// e3: 83 e0 01                      andl    $0x1, %eax
// e6: 4d 8d 3c c7                   leaq    (%r15,%rax,8), %r15
// ea: 48 8b 7b 28                   movq    0x28(%rbx), %rdi
// ee: 48 85 ff                      testq   %rdi, %rdi
// f1: 0f 84 95 00 00 00             je      0x18c <_JIT_ENTRY+0x18c>
// f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f9:  R_X86_64_64  PyMapping_GetOptionalItem
// 101: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000103:  R_X86_64_64  _PyRuntime
// 10b: 49 81 c5 a8 a7 00 00          addq    $0xa7a8, %r13           # imm = 0xA7A8
// 112: 48 89 e2                      movq    %rsp, %rdx
// 115: 4c 89 ee                      movq    %r13, %rsi
// 118: ff d0                         callq   *%rax
// 11a: 85 c0                         testl   %eax, %eax
// 11c: 0f 88 92 00 00 00             js      0x1b4 <_JIT_ENTRY+0x1b4>
// 122: 4c 8b 24 24                   movq    (%rsp), %r12
// 126: 4d 85 e4                      testq   %r12, %r12
// 129: 0f 84 cf 00 00 00             je      0x1fe <_JIT_ENTRY+0x1fe>
// 12f: 49 8b 04 24                   movq    (%r12), %rax
// 133: 48 85 c0                      testq   %rax, %rax
// 136: 7f 22                         jg      0x15a <_JIT_ENTRY+0x15a>
// 138: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013a:  R_X86_64_64  .rodata.str1.1
// 142: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000144:  R_X86_64_64  _Py_NegativeRefcount
// 14c: be 96 05 00 00                movl    $0x596, %esi            # imm = 0x596
// 151: 4c 89 e2                      movq    %r12, %rdx
// 154: ff d0                         callq   *%rax
// 156: 49 8b 04 24                   movq    (%r12), %rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 0f 88 25 01 00 00             js      0x287 <_JIT_ENTRY+0x287>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 49 ff 0c 24                   decq    (%r12)
// 172: 0f 85 0f 01 00 00             jne     0x287 <_JIT_ENTRY+0x287>
// 178: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017a:  R_X86_64_64  _Py_Dealloc
// 182: 4c 89 e7                      movq    %r12, %rdi
// 185: ff d0                         callq   *%rax
// 187: e9 fb 00 00 00                jmp     0x287 <_JIT_ENTRY+0x287>
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  PyExc_SystemError
// 196: 48 8b 30                      movq    (%rax), %rsi
// 199: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000019b:  R_X86_64_64  .rodata.str1.1+0x39
// 1a3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a5:  R_X86_64_64  _PyErr_Format
// 1ad: 4c 89 f7                      movq    %r14, %rdi
// 1b0: 31 c0                         xorl    %eax, %eax
// 1b2: ff d1                         callq   *%rcx
// 1b4: 49 29 df                      subq    %rbx, %r15
// 1b7: 49 83 c7 b8                   addq    $-0x48, %r15
// 1bb: 49 c1 ef 03                   shrq    $0x3, %r15
// 1bf: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 1c3: 31 c0                         xorl    %eax, %eax
// 1c5: 48 83 c4 08                   addq    $0x8, %rsp
// 1c9: 5b                            popq    %rbx
// 1ca: 41 5c                         popq    %r12
// 1cc: 41 5d                         popq    %r13
// 1ce: 41 5e                         popq    %r14
// 1d0: 41 5f                         popq    %r15
// 1d2: 5d                            popq    %rbp
// 1d3: c3                            retq
// 1d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d6:  R_X86_64_64  _Py_Dealloc
// 1de: 4c 89 e7                      movq    %r12, %rdi
// 1e1: ff d0                         callq   *%rax
// 1e3: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// 1e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e9:  R_X86_64_64  _JIT_OPARG
// 1f1: a8 01                         testb   $0x1, %al
// 1f3: 0f 85 e3 fe ff ff             jne     0xdc <_JIT_ENTRY+0xdc>
// 1f9: e9 e5 fe ff ff                jmp     0xe3 <_JIT_ENTRY+0xe3>
// 1fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000200:  R_X86_64_64  PyDict_New
// 208: ff d0                         callq   *%rax
// 20a: 48 89 04 24                   movq    %rax, (%rsp)
// 20e: 48 85 c0                      testq   %rax, %rax
// 211: 74 a1                         je      0x1b4 <_JIT_ENTRY+0x1b4>
// 213: 48 8b 7b 28                   movq    0x28(%rbx), %rdi
// 217: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000219:  R_X86_64_64  PyObject_SetItem
// 221: 4c 89 ee                      movq    %r13, %rsi
// 224: 48 89 c2                      movq    %rax, %rdx
// 227: ff d1                         callq   *%rcx
// 229: 89 c5                         movl    %eax, %ebp
// 22b: 4c 8b 24 24                   movq    (%rsp), %r12
// 22f: 49 8b 04 24                   movq    (%r12), %rax
// 233: 48 85 c0                      testq   %rax, %rax
// 236: 7f 22                         jg      0x25a <_JIT_ENTRY+0x25a>
// 238: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000023a:  R_X86_64_64  .rodata.str1.1
// 242: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000244:  R_X86_64_64  _Py_NegativeRefcount
// 24c: be 92 05 00 00                movl    $0x592, %esi            # imm = 0x592
// 251: 4c 89 e2                      movq    %r12, %rdx
// 254: ff d0                         callq   *%rax
// 256: 49 8b 04 24                   movq    (%r12), %rax
// 25a: 85 c0                         testl   %eax, %eax
// 25c: 78 21                         js      0x27f <_JIT_ENTRY+0x27f>
// 25e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000260:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 268: ff d0                         callq   *%rax
// 26a: 49 ff 0c 24                   decq    (%r12)
// 26e: 75 0f                         jne     0x27f <_JIT_ENTRY+0x27f>
// 270: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000272:  R_X86_64_64  _Py_Dealloc
// 27a: 4c 89 e7                      movq    %r12, %rdi
// 27d: ff d0                         callq   *%rax
// 27f: 85 ed                         testl   %ebp, %ebp
// 281: 0f 85 2d ff ff ff             jne     0x1b4 <_JIT_ENTRY+0x1b4>
// 287: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000289:  R_X86_64_64  _JIT_CONTINUE
// 291: 48 89 df                      movq    %rbx, %rdi
// 294: 4c 89 fe                      movq    %r15, %rsi
// 297: 4c 89 f2                      movq    %r14, %rdx
// 29a: 48 83 c4 08                   addq    $0x8, %rsp
// 29e: 5b                            popq    %rbx
// 29f: 41 5c                         popq    %r12
// 2a1: 41 5d                         popq    %r13
// 2a3: 41 5e                         popq    %r14
// 2a5: 41 5f                         popq    %r15
// 2a7: 5d                            popq    %rbp
// 2a8: ff e0                         jmpq    *%rax
// 2aa: 
static const unsigned char _LOAD_ATTR_SLOTplus_SETUP_ANNOTATIONS_code_body[683] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1d, 0x49, 0x89, 0xd6, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x3f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4f, 0x85, 0xc0, 0x79, 0x71, 0xe9, 0x82, 0x00, 0x00, 0x00, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x50, 0x01, 0x00, 0x00, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x0a, 0x01, 0x00, 0x00, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x4d, 0x8d, 0x3c, 0xc7, 0x48, 0x8b, 0x7b, 0x28, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x95, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x81, 0xc5, 0xa8, 0xa7, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x88, 0x92, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x24, 0x24, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0xcf, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x96, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x25, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x0f, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0xfb, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x31, 0xc0, 0xff, 0xd1, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0xe3, 0xfe, 0xff, 0xff, 0xe9, 0xe5, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x74, 0xa1, 0x48, 0x8b, 0x7b, 0x28, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xee, 0x48, 0x89, 0xc2, 0xff, 0xd1, 0x89, 0xc5, 0x4c, 0x8b, 0x24, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x92, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x85, 0x2d, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_ATTR_SLOTplus_SETUP_ANNOTATIONS_code_holes[26] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x90, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x200, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_New, 0x0},
    {0x219, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x23a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x244, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x260, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x272, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x289, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00no locals found when setting up annotations\x00'
// 65: 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_SETUP_ANNOTATIONS_data_body[105] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x70, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_SETUP_ANNOTATIONS_data_holes[1];

// _LOAD_ATTR_SLOTplus_SET_ADD
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_SET_ADD.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f7                      movq    %rsi, %r15
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 26: 4d 85 ed                      testq   %r13, %r13
// 29: 74 28                         je      0x53 <_JIT_ENTRY+0x53>
// 2b: 48 89 14 24                   movq    %rdx, (%rsp)
// 2f: 41 8b 45 00                   movl    (%r13), %eax
// 33: ff c0                         incl    %eax
// 35: 75 49                         jne     0x80 <_JIT_ENTRY+0x80>
// 37: 49 8b 04 24                   movq    (%r12), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 59                         jle     0x99 <_JIT_ENTRY+0x99>
// 40: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000042:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 4a: 85 c0                         testl   %eax, %eax
// 4c: 79 7b                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 4e: e9 82 00 00 00                jmp     0xd5 <_JIT_ENTRY+0xd5>
// 53: 49 29 df                      subq    %rbx, %r15
// 56: 49 83 c7 b8                   addq    $-0x48, %r15
// 5a: 49 c1 ef 03                   shrq    $0x3, %r15
// 5e: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 62: 48 8b 03                      movq    (%rbx), %rax
// 65: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000067:  R_X86_64_64  _JIT_TARGET
// 6f: 89 c9                         movl    %ecx, %ecx
// 71: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 75: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 7b: e9 13 01 00 00                jmp     0x193 <_JIT_ENTRY+0x193>
// 80: 41 89 45 00                   movl    %eax, (%r13)
// 84: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000086:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 8e: ff d0                         callq   *%rax
// 90: 49 8b 04 24                   movq    (%r12), %rax
// 94: 48 85 c0                      testq   %rax, %rax
// 97: 7f a7                         jg      0x40 <_JIT_ENTRY+0x40>
// 99: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000009b:  R_X86_64_64  .rodata.str1.1
// a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a5:  R_X86_64_64  _Py_NegativeRefcount
// ad: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// b2: 4c 89 e2                      movq    %r12, %rdx
// b5: ff d0                         callq   *%rax
// b7: 49 8b 04 24                   movq    (%r12), %rax
// bb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000bd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 0c                         js      0xd5 <_JIT_ENTRY+0xd5>
// c9: ff d1                         callq   *%rcx
// cb: 49 ff 0c 24                   decq    (%r12)
// cf: 0f 84 cd 00 00 00             je      0x1a2 <_JIT_ENTRY+0x1a2>
// d5: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000db:  R_X86_64_64  _JIT_OPARG
// e3: a8 01                         testb   $0x1, %al
// e5: 74 07                         je      0xee <_JIT_ENTRY+0xee>
// e7: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// ee: 41 89 c6                      movl    %eax, %r14d
// f1: 41 83 e6 01                   andl    $0x1, %r14d
// f5: f7 d0                         notl    %eax
// f7: 4f 8b 64 f7 f8                movq    -0x8(%r15,%r14,8), %r12
// fc: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 101: 48 98                         cltq
// 103: 4c 01 f0                      addq    %r14, %rax
// 106: 49 8b 3c c7                   movq    (%r15,%rax,8), %rdi
// 10a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010c:  R_X86_64_64  PySet_Add
// 114: 4c 89 e6                      movq    %r12, %rsi
// 117: ff d0                         callq   *%rax
// 119: 89 c5                         movl    %eax, %ebp
// 11b: 49 8b 04 24                   movq    (%r12), %rax
// 11f: 48 85 c0                      testq   %rax, %rax
// 122: 7e 12                         jle     0x136 <_JIT_ENTRY+0x136>
// 124: 4f 8d 2c f7                   leaq    (%r15,%r14,8), %r13
// 128: 4f 8d 34 f7                   leaq    (%r15,%r14,8), %r14
// 12c: 49 83 c6 f8                   addq    $-0x8, %r14
// 130: 85 c0                         testl   %eax, %eax
// 132: 79 34                         jns     0x168 <_JIT_ENTRY+0x168>
// 134: eb 44                         jmp     0x17a <_JIT_ENTRY+0x17a>
// 136: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000138:  R_X86_64_64  .rodata.str1.1
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_NegativeRefcount
// 14a: be 29 02 00 00                movl    $0x229, %esi            # imm = 0x229
// 14f: 4c 89 e2                      movq    %r12, %rdx
// 152: ff d0                         callq   *%rax
// 154: 49 8b 04 24                   movq    (%r12), %rax
// 158: 4f 8d 2c f7                   leaq    (%r15,%r14,8), %r13
// 15c: 4f 8d 34 f7                   leaq    (%r15,%r14,8), %r14
// 160: 49 83 c6 f8                   addq    $-0x8, %r14
// 164: 85 c0                         testl   %eax, %eax
// 166: 78 12                         js      0x17a <_JIT_ENTRY+0x17a>
// 168: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 172: ff d0                         callq   *%rax
// 174: 49 ff 0c 24                   decq    (%r12)
// 178: 74 52                         je      0x1cc <_JIT_ENTRY+0x1cc>
// 17a: 85 ed                         testl   %ebp, %ebp
// 17c: 4d 0f 44 ee                   cmoveq  %r14, %r13
// 180: 74 61                         je      0x1e3 <_JIT_ENTRY+0x1e3>
// 182: 49 29 dd                      subq    %rbx, %r13
// 185: 49 83 c5 b0                   addq    $-0x50, %r13
// 189: 49 c1 ed 03                   shrq    $0x3, %r13
// 18d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 191: 31 c0                         xorl    %eax, %eax
// 193: 48 83 c4 08                   addq    $0x8, %rsp
// 197: 5b                            popq    %rbx
// 198: 41 5c                         popq    %r12
// 19a: 41 5d                         popq    %r13
// 19c: 41 5e                         popq    %r14
// 19e: 41 5f                         popq    %r15
// 1a0: 5d                            popq    %rbp
// 1a1: c3                            retq
// 1a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a4:  R_X86_64_64  _Py_Dealloc
// 1ac: 4c 89 e7                      movq    %r12, %rdi
// 1af: ff d0                         callq   *%rax
// 1b1: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// 1b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b7:  R_X86_64_64  _JIT_OPARG
// 1bf: a8 01                         testb   $0x1, %al
// 1c1: 0f 85 20 ff ff ff             jne     0xe7 <_JIT_ENTRY+0xe7>
// 1c7: e9 22 ff ff ff                jmp     0xee <_JIT_ENTRY+0xee>
// 1cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ce:  R_X86_64_64  _Py_Dealloc
// 1d6: 4c 89 e7                      movq    %r12, %rdi
// 1d9: ff d0                         callq   *%rax
// 1db: 85 ed                         testl   %ebp, %ebp
// 1dd: 4d 0f 44 ee                   cmoveq  %r14, %r13
// 1e1: 75 9f                         jne     0x182 <_JIT_ENTRY+0x182>
// 1e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e5:  R_X86_64_64  _JIT_CONTINUE
// 1ed: 48 89 df                      movq    %rbx, %rdi
// 1f0: 4c 89 ee                      movq    %r13, %rsi
// 1f3: 48 8b 14 24                   movq    (%rsp), %rdx
// 1f7: 48 83 c4 08                   addq    $0x8, %rsp
// 1fb: 5b                            popq    %rbx
// 1fc: 41 5c                         popq    %r12
// 1fe: 41 5d                         popq    %r13
// 200: 41 5e                         popq    %r14
// 202: 41 5f                         popq    %r15
// 204: 5d                            popq    %rbp
// 205: ff e0                         jmpq    *%rax
// 207: 
static const unsigned char _LOAD_ATTR_SLOTplus_SET_ADD_code_body[520] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x28, 0x48, 0x89, 0x14, 0x24, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x49, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x59, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x79, 0x7b, 0xe9, 0x82, 0x00, 0x00, 0x00, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x13, 0x01, 0x00, 0x00, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xa7, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x0c, 0xff, 0xd1, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xcd, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x41, 0x89, 0xc6, 0x41, 0x83, 0xe6, 0x01, 0xf7, 0xd0, 0x4f, 0x8b, 0x64, 0xf7, 0xf8, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4c, 0x01, 0xf0, 0x49, 0x8b, 0x3c, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x4f, 0x8d, 0x2c, 0xf7, 0x4f, 0x8d, 0x34, 0xf7, 0x49, 0x83, 0xc6, 0xf8, 0x85, 0xc0, 0x79, 0x34, 0xeb, 0x44, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x29, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4f, 0x8d, 0x2c, 0xf7, 0x4f, 0x8d, 0x34, 0xf7, 0x49, 0x83, 0xc6, 0xf8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x52, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xee, 0x74, 0x61, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb0, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x20, 0xff, 0xff, 0xff, 0xe9, 0x22, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xee, 0x75, 0x9f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_ATTR_SLOTplus_SET_ADD_code_holes[17] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x42, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x67, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x86, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xbd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xdb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1a4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ce, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_SET_ADD_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_SET_ADD_data_holes[1];

// _LOAD_ATTR_SLOTplus_SET_FUNCTION_ATTRIBUTE
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_SET_FUNCTION_ATTRIBUTE.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f6                      movq    %rsi, %r14
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 74 1d                         je      0x46 <_JIT_ENTRY+0x46>
// 29: 49 89 d7                      movq    %rdx, %r15
// 2c: 41 8b 45 00                   movl    (%r13), %eax
// 30: ff c0                         incl    %eax
// 32: 75 42                         jne     0x76 <_JIT_ENTRY+0x76>
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 52                         jle     0x8f <_JIT_ENTRY+0x8f>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 74                         jns     0xb5 <_JIT_ENTRY+0xb5>
// 41: e9 90 00 00 00                jmp     0xd6 <_JIT_ENTRY+0xd6>
// 46: 49 29 de                      subq    %rbx, %r14
// 49: 49 83 c6 b8                   addq    $-0x48, %r14
// 4d: 49 c1 ee 03                   shrq    $0x3, %r14
// 51: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 55: 48 8b 03                      movq    (%rbx), %rax
// 58: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005a:  R_X86_64_64  _JIT_TARGET
// 62: 89 c9                         movl    %ecx, %ecx
// 64: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 6c: 5b                            popq    %rbx
// 6d: 41 5c                         popq    %r12
// 6f: 41 5d                         popq    %r13
// 71: 41 5e                         popq    %r14
// 73: 41 5f                         popq    %r15
// 75: c3                            retq
// 76: 41 89 45 00                   movl    %eax, (%r13)
// 7a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007c:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 84: ff d0                         callq   *%rax
// 86: 49 8b 04 24                   movq    (%r12), %rax
// 8a: 48 85 c0                      testq   %rax, %rax
// 8d: 7f ae                         jg      0x3d <_JIT_ENTRY+0x3d>
// 8f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000091:  R_X86_64_64  .rodata.str1.1
// 99: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009b:  R_X86_64_64  _Py_NegativeRefcount
// a3: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a8: 4c 89 e2                      movq    %r12, %rdx
// ab: ff d0                         callq   *%rax
// ad: 49 8b 04 24                   movq    (%r12), %rax
// b1: 85 c0                         testl   %eax, %eax
// b3: 78 21                         js      0xd6 <_JIT_ENTRY+0xd6>
// b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bf: ff d0                         callq   *%rax
// c1: 49 ff 0c 24                   decq    (%r12)
// c5: 75 0f                         jne     0xd6 <_JIT_ENTRY+0xd6>
// c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c9:  R_X86_64_64  _Py_Dealloc
// d1: 4c 89 e7                      movq    %r12, %rdi
// d4: ff d0                         callq   *%rax
// d6: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000dc:  R_X86_64_64  _JIT_OPARG
// e4: a8 01                         testb   $0x1, %al
// e6: 74 07                         je      0xef <_JIT_ENTRY+0xef>
// e8: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// ef: 0f b7 f0                      movzwl  %ax, %esi
// f2: 83 e0 01                      andl    $0x1, %eax
// f5: 49 8b 54 c6 f0                movq    -0x10(%r14,%rax,8), %rdx
// fa: 49 8b 4c c6 f8                movq    -0x8(%r14,%rax,8), %rcx
// ff: 83 fe 03                      cmpl    $0x3, %esi
// 102: 7f 10                         jg      0x114 <_JIT_ENTRY+0x114>
// 104: 83 fe 01                      cmpl    $0x1, %esi
// 107: 74 1b                         je      0x124 <_JIT_ENTRY+0x124>
// 109: 83 fe 02                      cmpl    $0x2, %esi
// 10c: 75 58                         jne     0x166 <_JIT_ENTRY+0x166>
// 10e: 48 8d 79 40                   leaq    0x40(%rcx), %rdi
// 112: eb 1a                         jmp     0x12e <_JIT_ENTRY+0x12e>
// 114: 83 fe 04                      cmpl    $0x4, %esi
// 117: 74 11                         je      0x12a <_JIT_ENTRY+0x12a>
// 119: 83 fe 08                      cmpl    $0x8, %esi
// 11c: 75 48                         jne     0x166 <_JIT_ENTRY+0x166>
// 11e: 48 8d 79 48                   leaq    0x48(%rcx), %rdi
// 122: eb 0a                         jmp     0x12e <_JIT_ENTRY+0x12e>
// 124: 48 8d 79 38                   leaq    0x38(%rcx), %rdi
// 128: eb 04                         jmp     0x12e <_JIT_ENTRY+0x12e>
// 12a: 48 8d 79 70                   leaq    0x70(%rcx), %rdi
// 12e: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 132: 48 83 c6 f8                   addq    $-0x8, %rsi
// 136: 48 89 17                      movq    %rdx, (%rdi)
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  _JIT_OPARG
// 143: 83 e0 01                      andl    $0x1, %eax
// 146: 49 89 4c c6 f0                movq    %rcx, -0x10(%r14,%rax,8)
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _JIT_CONTINUE
// 155: 48 89 df                      movq    %rbx, %rdi
// 158: 4c 89 fa                      movq    %r15, %rdx
// 15b: 5b                            popq    %rbx
// 15c: 41 5c                         popq    %r12
// 15e: 41 5d                         popq    %r13
// 160: 41 5e                         popq    %r14
// 162: 41 5f                         popq    %r15
// 164: ff e0                         jmpq    *%rax
// 166: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000168:  R_X86_64_64  .rodata.str1.1+0x39
// 170: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000172:  R_X86_64_64  .rodata.str1.1+0x44
// 17a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017c:  R_X86_64_64  _Py_FatalErrorFunc
// 184: ff d0                         callq   *%rax
// 186: 
static const unsigned char _LOAD_ATTR_SLOTplus_SET_FUNCTION_ATTRIBUTE_code_body[391] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1d, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x42, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x52, 0x85, 0xc0, 0x79, 0x74, 0xe9, 0x90, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xae, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0x83, 0xe0, 0x01, 0x49, 0x8b, 0x54, 0xc6, 0xf0, 0x49, 0x8b, 0x4c, 0xc6, 0xf8, 0x83, 0xfe, 0x03, 0x7f, 0x10, 0x83, 0xfe, 0x01, 0x74, 0x1b, 0x83, 0xfe, 0x02, 0x75, 0x58, 0x48, 0x8d, 0x79, 0x40, 0xeb, 0x1a, 0x83, 0xfe, 0x04, 0x74, 0x11, 0x83, 0xfe, 0x08, 0x75, 0x48, 0x48, 0x8d, 0x79, 0x48, 0xeb, 0x0a, 0x48, 0x8d, 0x79, 0x38, 0xeb, 0x04, 0x48, 0x8d, 0x79, 0x70, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0x89, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x89, 0x4c, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _LOAD_ATTR_SLOTplus_SET_FUNCTION_ATTRIBUTE_code_holes[14] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xdc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x168, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x172, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x44},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FatalErrorFunc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_JIT_ENTRY\x00We've reached an unreachable state. Anything is possible.\nThe limits were in our heads all along. Follow your dreams.\nhttps://xkcd.com/2200\x00"
// d0: 
static const unsigned char _LOAD_ATTR_SLOTplus_SET_FUNCTION_ATTRIBUTE_data_body[209] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x00, 0x57, 0x65, 0x27, 0x76, 0x65, 0x20, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x20, 0x41, 0x6e, 0x79, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x73, 0x20, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x2e, 0x0a, 0x54, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x20, 0x77, 0x65, 0x72, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x6f, 0x75, 0x72, 0x20, 0x68, 0x65, 0x61, 0x64, 0x73, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x61, 0x6c, 0x6f, 0x6e, 0x67, 0x2e, 0x20, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x64, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x78, 0x6b, 0x63, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x32, 0x32, 0x30, 0x30, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_SET_FUNCTION_ATTRIBUTE_data_holes[1];

// _LOAD_ATTR_SLOTplus_SET_IP
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_SET_IP.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f6                      movq    %rsi, %r14
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 74 1d                         je      0x46 <_JIT_ENTRY+0x46>
// 29: 49 89 d7                      movq    %rdx, %r15
// 2c: 41 8b 45 00                   movl    (%r13), %eax
// 30: ff c0                         incl    %eax
// 32: 75 42                         jne     0x76 <_JIT_ENTRY+0x76>
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 52                         jle     0x8f <_JIT_ENTRY+0x8f>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 74                         jns     0xb5 <_JIT_ENTRY+0xb5>
// 41: e9 81 00 00 00                jmp     0xc7 <_JIT_ENTRY+0xc7>
// 46: 49 29 de                      subq    %rbx, %r14
// 49: 49 83 c6 b8                   addq    $-0x48, %r14
// 4d: 49 c1 ee 03                   shrq    $0x3, %r14
// 51: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 55: 48 8b 03                      movq    (%rbx), %rax
// 58: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005a:  R_X86_64_64  _JIT_TARGET
// 62: 89 c9                         movl    %ecx, %ecx
// 64: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 6c: 5b                            popq    %rbx
// 6d: 41 5c                         popq    %r12
// 6f: 41 5d                         popq    %r13
// 71: 41 5e                         popq    %r14
// 73: 41 5f                         popq    %r15
// 75: c3                            retq
// 76: 41 89 45 00                   movl    %eax, (%r13)
// 7a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007c:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 84: ff d0                         callq   *%rax
// 86: 49 8b 04 24                   movq    (%r12), %rax
// 8a: 48 85 c0                      testq   %rax, %rax
// 8d: 7f ae                         jg      0x3d <_JIT_ENTRY+0x3d>
// 8f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000091:  R_X86_64_64  .rodata.str1.1
// 99: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009b:  R_X86_64_64  _Py_NegativeRefcount
// a3: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a8: 4c 89 e2                      movq    %r12, %rdx
// ab: ff d0                         callq   *%rax
// ad: 49 8b 04 24                   movq    (%r12), %rax
// b1: 85 c0                         testl   %eax, %eax
// b3: 78 12                         js      0xc7 <_JIT_ENTRY+0xc7>
// b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bf: ff d0                         callq   *%rax
// c1: 49 ff 0c 24                   decq    (%r12)
// c5: 74 4f                         je      0x116 <_JIT_ENTRY+0x116>
// c7: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cd:  R_X86_64_64  _JIT_OPARG
// d5: a8 01                         testb   $0x1, %al
// d7: 74 07                         je      0xe0 <_JIT_ENTRY+0xe0>
// d9: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// e0: 0f b7 c8                      movzwl  %ax, %ecx
// e3: 83 e0 01                      andl    $0x1, %eax
// e6: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// ea: 48 8b 03                      movq    (%rbx), %rax
// ed: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// f1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// f7: 48 89 43 38                   movq    %rax, 0x38(%rbx)
// fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fd:  R_X86_64_64  _JIT_CONTINUE
// 105: 48 89 df                      movq    %rbx, %rdi
// 108: 4c 89 fa                      movq    %r15, %rdx
// 10b: 5b                            popq    %rbx
// 10c: 41 5c                         popq    %r12
// 10e: 41 5d                         popq    %r13
// 110: 41 5e                         popq    %r14
// 112: 41 5f                         popq    %r15
// 114: ff e0                         jmpq    *%rax
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_Dealloc
// 120: 4c 89 e7                      movq    %r12, %rdi
// 123: ff d0                         callq   *%rax
// 125: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 129: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012b:  R_X86_64_64  _JIT_OPARG
// 133: a8 01                         testb   $0x1, %al
// 135: 75 a2                         jne     0xd9 <_JIT_ENTRY+0xd9>
// 137: eb a7                         jmp     0xe0 <_JIT_ENTRY+0xe0>
// 139: 
static const unsigned char _LOAD_ATTR_SLOTplus_SET_IP_code_body[314] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1d, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x42, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x52, 0x85, 0xc0, 0x79, 0x74, 0xe9, 0x81, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xae, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x4f, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x8b, 0x03, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x89, 0x43, 0x38, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x75, 0xa2, 0xeb, 0xa7};
static const Hole _LOAD_ATTR_SLOTplus_SET_IP_code_holes[11] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xcd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xfd, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_SET_IP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_SET_IP_data_holes[1];

// _LOAD_ATTR_SLOTplus_SET_UPDATE
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_SET_UPDATE.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f7                      movq    %rsi, %r15
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 49 8b 2c 04                   movq    (%r12,%rax), %rbp
// 26: 48 85 ed                      testq   %rbp, %rbp
// 29: 74 27                         je      0x52 <_JIT_ENTRY+0x52>
// 2b: 48 89 14 24                   movq    %rdx, (%rsp)
// 2f: 8b 45 00                      movl    (%rbp), %eax
// 32: ff c0                         incl    %eax
// 34: 75 49                         jne     0x7f <_JIT_ENTRY+0x7f>
// 36: 49 8b 04 24                   movq    (%r12), %rax
// 3a: 48 85 c0                      testq   %rax, %rax
// 3d: 7e 58                         jle     0x97 <_JIT_ENTRY+0x97>
// 3f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000041:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 49: 85 c0                         testl   %eax, %eax
// 4b: 79 7a                         jns     0xc7 <_JIT_ENTRY+0xc7>
// 4d: e9 81 00 00 00                jmp     0xd3 <_JIT_ENTRY+0xd3>
// 52: 49 29 df                      subq    %rbx, %r15
// 55: 49 83 c7 b8                   addq    $-0x48, %r15
// 59: 49 c1 ef 03                   shrq    $0x3, %r15
// 5d: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 61: 48 8b 03                      movq    (%rbx), %rax
// 64: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000066:  R_X86_64_64  _JIT_TARGET
// 6e: 89 c9                         movl    %ecx, %ecx
// 70: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 74: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 7a: e9 77 01 00 00                jmp     0x1f6 <_JIT_ENTRY+0x1f6>
// 7f: 89 45 00                      movl    %eax, (%rbp)
// 82: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000084:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 8c: ff d0                         callq   *%rax
// 8e: 49 8b 04 24                   movq    (%r12), %rax
// 92: 48 85 c0                      testq   %rax, %rax
// 95: 7f a8                         jg      0x3f <_JIT_ENTRY+0x3f>
// 97: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000099:  R_X86_64_64  .rodata.str1.1
// a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a3:  R_X86_64_64  _Py_NegativeRefcount
// ab: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// b0: 4c 89 e2                      movq    %r12, %rdx
// b3: ff d0                         callq   *%rax
// b5: 49 8b 04 24                   movq    (%r12), %rax
// b9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000bb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c3: 85 c0                         testl   %eax, %eax
// c5: 78 0c                         js      0xd3 <_JIT_ENTRY+0xd3>
// c7: ff d1                         callq   *%rcx
// c9: 49 ff 0c 24                   decq    (%r12)
// cd: 0f 84 d1 00 00 00             je      0x1a4 <_JIT_ENTRY+0x1a4>
// d3: 49 89 6f f8                   movq    %rbp, -0x8(%r15)
// d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d9:  R_X86_64_64  _JIT_OPARG
// e1: a8 01                         testb   $0x1, %al
// e3: 74 07                         je      0xec <_JIT_ENTRY+0xec>
// e5: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// ec: 41 89 c5                      movl    %eax, %r13d
// ef: 41 83 e5 01                   andl    $0x1, %r13d
// f3: f7 d0                         notl    %eax
// f5: 4f 8b 64 ef f8                movq    -0x8(%r15,%r13,8), %r12
// fa: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// ff: 48 98                         cltq
// 101: 4c 01 e8                      addq    %r13, %rax
// 104: 49 8b 3c c7                   movq    (%r15,%rax,8), %rdi
// 108: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010a:  R_X86_64_64  _PySet_Update
// 112: 4c 89 e6                      movq    %r12, %rsi
// 115: ff d0                         callq   *%rax
// 117: 89 c5                         movl    %eax, %ebp
// 119: 49 8b 04 24                   movq    (%r12), %rax
// 11d: 48 85 c0                      testq   %rax, %rax
// 120: 7e 12                         jle     0x134 <_JIT_ENTRY+0x134>
// 122: 4f 8d 34 ef                   leaq    (%r15,%r13,8), %r14
// 126: 4f 8d 3c ef                   leaq    (%r15,%r13,8), %r15
// 12a: 49 83 c7 f8                   addq    $-0x8, %r15
// 12e: 85 c0                         testl   %eax, %eax
// 130: 79 34                         jns     0x166 <_JIT_ENTRY+0x166>
// 132: eb 44                         jmp     0x178 <_JIT_ENTRY+0x178>
// 134: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000136:  R_X86_64_64  .rodata.str1.1
// 13e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000140:  R_X86_64_64  _Py_NegativeRefcount
// 148: be 53 05 00 00                movl    $0x553, %esi            # imm = 0x553
// 14d: 4c 89 e2                      movq    %r12, %rdx
// 150: ff d0                         callq   *%rax
// 152: 49 8b 04 24                   movq    (%r12), %rax
// 156: 4f 8d 34 ef                   leaq    (%r15,%r13,8), %r14
// 15a: 4f 8d 3c ef                   leaq    (%r15,%r13,8), %r15
// 15e: 49 83 c7 f8                   addq    $-0x8, %r15
// 162: 85 c0                         testl   %eax, %eax
// 164: 78 12                         js      0x178 <_JIT_ENTRY+0x178>
// 166: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000168:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 170: ff d0                         callq   *%rax
// 172: 49 ff 0c 24                   decq    (%r12)
// 176: 74 56                         je      0x1ce <_JIT_ENTRY+0x1ce>
// 178: 85 ed                         testl   %ebp, %ebp
// 17a: 4d 0f 48 fe                   cmovsq  %r14, %r15
// 17e: 78 65                         js      0x1e5 <_JIT_ENTRY+0x1e5>
// 180: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000182:  R_X86_64_64  _JIT_CONTINUE
// 18a: 48 89 df                      movq    %rbx, %rdi
// 18d: 4c 89 fe                      movq    %r15, %rsi
// 190: 48 8b 14 24                   movq    (%rsp), %rdx
// 194: 48 83 c4 08                   addq    $0x8, %rsp
// 198: 5b                            popq    %rbx
// 199: 41 5c                         popq    %r12
// 19b: 41 5d                         popq    %r13
// 19d: 41 5e                         popq    %r14
// 19f: 41 5f                         popq    %r15
// 1a1: 5d                            popq    %rbp
// 1a2: ff e0                         jmpq    *%rax
// 1a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a6:  R_X86_64_64  _Py_Dealloc
// 1ae: 4c 89 e7                      movq    %r12, %rdi
// 1b1: ff d0                         callq   *%rax
// 1b3: 49 89 6f f8                   movq    %rbp, -0x8(%r15)
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _JIT_OPARG
// 1c1: a8 01                         testb   $0x1, %al
// 1c3: 0f 85 1c ff ff ff             jne     0xe5 <_JIT_ENTRY+0xe5>
// 1c9: e9 1e ff ff ff                jmp     0xec <_JIT_ENTRY+0xec>
// 1ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d0:  R_X86_64_64  _Py_Dealloc
// 1d8: 4c 89 e7                      movq    %r12, %rdi
// 1db: ff d0                         callq   *%rax
// 1dd: 85 ed                         testl   %ebp, %ebp
// 1df: 4d 0f 48 fe                   cmovsq  %r14, %r15
// 1e3: 79 9b                         jns     0x180 <_JIT_ENTRY+0x180>
// 1e5: 49 29 df                      subq    %rbx, %r15
// 1e8: 49 83 c7 b0                   addq    $-0x50, %r15
// 1ec: 49 c1 ef 03                   shrq    $0x3, %r15
// 1f0: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 1f4: 31 c0                         xorl    %eax, %eax
// 1f6: 48 83 c4 08                   addq    $0x8, %rsp
// 1fa: 5b                            popq    %rbx
// 1fb: 41 5c                         popq    %r12
// 1fd: 41 5d                         popq    %r13
// 1ff: 41 5e                         popq    %r14
// 201: 41 5f                         popq    %r15
// 203: 5d                            popq    %rbp
// 204: c3                            retq
// 205: 
static const unsigned char _LOAD_ATTR_SLOTplus_SET_UPDATE_code_body[518] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8b, 0x2c, 0x04, 0x48, 0x85, 0xed, 0x74, 0x27, 0x48, 0x89, 0x14, 0x24, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x49, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x58, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x79, 0x7a, 0xe9, 0x81, 0x00, 0x00, 0x00, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x77, 0x01, 0x00, 0x00, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xa8, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x0c, 0xff, 0xd1, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xd1, 0x00, 0x00, 0x00, 0x49, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x41, 0x89, 0xc5, 0x41, 0x83, 0xe5, 0x01, 0xf7, 0xd0, 0x4f, 0x8b, 0x64, 0xef, 0xf8, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4c, 0x01, 0xe8, 0x49, 0x8b, 0x3c, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x4f, 0x8d, 0x34, 0xef, 0x4f, 0x8d, 0x3c, 0xef, 0x49, 0x83, 0xc7, 0xf8, 0x85, 0xc0, 0x79, 0x34, 0xeb, 0x44, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x53, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4f, 0x8d, 0x34, 0xef, 0x4f, 0x8d, 0x3c, 0xef, 0x49, 0x83, 0xc7, 0xf8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x56, 0x85, 0xed, 0x4d, 0x0f, 0x48, 0xfe, 0x78, 0x65, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x1c, 0xff, 0xff, 0xff, 0xe9, 0x1e, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x48, 0xfe, 0x79, 0x9b, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb0, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _LOAD_ATTR_SLOTplus_SET_UPDATE_code_holes[17] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x41, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x66, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x99, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xa3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xbb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySet_Update, 0x0},
    {0x136, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x140, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x168, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x182, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1a6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_SET_UPDATE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_SET_UPDATE_data_holes[1];

// _LOAD_ATTR_SLOTplus_STORE_ATTR
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_STORE_ATTR.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f7                      movq    %rsi, %r15
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 4d 8b 34 04                   movq    (%r12,%rax), %r14
// 26: 4d 85 f6                      testq   %r14, %r14
// 29: 74 1d                         je      0x48 <_JIT_ENTRY+0x48>
// 2b: 48 89 14 24                   movq    %rdx, (%rsp)
// 2f: 41 8b 06                      movl    (%r14), %eax
// 32: ff c0                         incl    %eax
// 34: 75 3f                         jne     0x75 <_JIT_ENTRY+0x75>
// 36: 49 8b 04 24                   movq    (%r12), %rax
// 3a: 48 85 c0                      testq   %rax, %rax
// 3d: 7e 4e                         jle     0x8d <_JIT_ENTRY+0x8d>
// 3f: 85 c0                         testl   %eax, %eax
// 41: 79 70                         jns     0xb3 <_JIT_ENTRY+0xb3>
// 43: e9 81 00 00 00                jmp     0xc9 <_JIT_ENTRY+0xc9>
// 48: 49 29 df                      subq    %rbx, %r15
// 4b: 49 83 c7 b8                   addq    $-0x48, %r15
// 4f: 49 c1 ef 03                   shrq    $0x3, %r15
// 53: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 57: 48 8b 03                      movq    (%rbx), %rax
// 5a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005c:  R_X86_64_64  _JIT_TARGET
// 64: 89 c9                         movl    %ecx, %ecx
// 66: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 6a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 70: e9 ad 01 00 00                jmp     0x222 <_JIT_ENTRY+0x222>
// 75: 41 89 06                      movl    %eax, (%r14)
// 78: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007a:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 82: ff d0                         callq   *%rax
// 84: 49 8b 04 24                   movq    (%r12), %rax
// 88: 48 85 c0                      testq   %rax, %rax
// 8b: 7f b2                         jg      0x3f <_JIT_ENTRY+0x3f>
// 8d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008f:  R_X86_64_64  .rodata.str1.1
// 97: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000099:  R_X86_64_64  _Py_NegativeRefcount
// a1: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a6: 4c 89 e2                      movq    %r12, %rdx
// a9: ff d0                         callq   *%rax
// ab: 49 8b 04 24                   movq    (%r12), %rax
// af: 85 c0                         testl   %eax, %eax
// b1: 78 16                         js      0xc9 <_JIT_ENTRY+0xc9>
// b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bd: ff d0                         callq   *%rax
// bf: 49 ff 0c 24                   decq    (%r12)
// c3: 0f 84 ba 00 00 00             je      0x183 <_JIT_ENTRY+0x183>
// c9: 4d 89 77 f8                   movq    %r14, -0x8(%r15)
// cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cf:  R_X86_64_64  _JIT_OPARG
// d7: a8 01                         testb   $0x1, %al
// d9: 74 07                         je      0xe2 <_JIT_ENTRY+0xe2>
// db: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// e2: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 00000000000000e4:  R_X86_64_64  _JIT_OPARG
// ec: 41 0f b7 c6                   movzwl  %r14w, %eax
// f0: 41 83 e6 01                   andl    $0x1, %r14d
// f4: 4f 8b 6c f7 f0                movq    -0x10(%r15,%r14,8), %r13
// f9: 4f 8b 64 f7 f8                movq    -0x8(%r15,%r14,8), %r12
// fe: 48 8b 0b                      movq    (%rbx), %rcx
// 101: 48 8b 49 20                   movq    0x20(%rcx), %rcx
// 105: 48 8b 74 c1 18                movq    0x18(%rcx,%rax,8), %rsi
// 10a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010c:  R_X86_64_64  PyObject_SetAttr
// 114: 4c 89 e7                      movq    %r12, %rdi
// 117: 4c 89 ea                      movq    %r13, %rdx
// 11a: ff d0                         callq   *%rax
// 11c: 89 c5                         movl    %eax, %ebp
// 11e: 49 8b 45 00                   movq    (%r13), %rax
// 122: 48 85 c0                      testq   %rax, %rax
// 125: 7e 06                         jle     0x12d <_JIT_ENTRY+0x12d>
// 127: 85 c0                         testl   %eax, %eax
// 129: 79 28                         jns     0x153 <_JIT_ENTRY+0x153>
// 12b: eb 38                         jmp     0x165 <_JIT_ENTRY+0x165>
// 12d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000012f:  R_X86_64_64  .rodata.str1.1
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  _Py_NegativeRefcount
// 141: be c5 03 00 00                movl    $0x3c5, %esi            # imm = 0x3C5
// 146: 4c 89 ea                      movq    %r13, %rdx
// 149: ff d0                         callq   *%rax
// 14b: 49 8b 45 00                   movq    (%r13), %rax
// 14f: 85 c0                         testl   %eax, %eax
// 151: 78 12                         js      0x165 <_JIT_ENTRY+0x165>
// 153: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000155:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 15d: ff d0                         callq   *%rax
// 15f: 49 ff 4d 00                   decq    (%r13)
// 163: 74 48                         je      0x1ad <_JIT_ENTRY+0x1ad>
// 165: 49 8b 04 24                   movq    (%r12), %rax
// 169: 48 85 c0                      testq   %rax, %rax
// 16c: 7e 57                         jle     0x1c5 <_JIT_ENTRY+0x1c5>
// 16e: 4f 8d 2c f7                   leaq    (%r15,%r14,8), %r13
// 172: 4f 8d 34 f7                   leaq    (%r15,%r14,8), %r14
// 176: 49 83 c6 f0                   addq    $-0x10, %r14
// 17a: 85 c0                         testl   %eax, %eax
// 17c: 79 79                         jns     0x1f7 <_JIT_ENTRY+0x1f7>
// 17e: e9 86 00 00 00                jmp     0x209 <_JIT_ENTRY+0x209>
// 183: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000185:  R_X86_64_64  _Py_Dealloc
// 18d: 4c 89 e7                      movq    %r12, %rdi
// 190: ff d0                         callq   *%rax
// 192: 4d 89 77 f8                   movq    %r14, -0x8(%r15)
// 196: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000198:  R_X86_64_64  _JIT_OPARG
// 1a0: a8 01                         testb   $0x1, %al
// 1a2: 0f 85 33 ff ff ff             jne     0xdb <_JIT_ENTRY+0xdb>
// 1a8: e9 35 ff ff ff                jmp     0xe2 <_JIT_ENTRY+0xe2>
// 1ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001af:  R_X86_64_64  _Py_Dealloc
// 1b7: 4c 89 ef                      movq    %r13, %rdi
// 1ba: ff d0                         callq   *%rax
// 1bc: 49 8b 04 24                   movq    (%r12), %rax
// 1c0: 48 85 c0                      testq   %rax, %rax
// 1c3: 7f a9                         jg      0x16e <_JIT_ENTRY+0x16e>
// 1c5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c7:  R_X86_64_64  .rodata.str1.1
// 1cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d1:  R_X86_64_64  _Py_NegativeRefcount
// 1d9: be c6 03 00 00                movl    $0x3c6, %esi            # imm = 0x3C6
// 1de: 4c 89 e2                      movq    %r12, %rdx
// 1e1: ff d0                         callq   *%rax
// 1e3: 49 8b 04 24                   movq    (%r12), %rax
// 1e7: 4f 8d 2c f7                   leaq    (%r15,%r14,8), %r13
// 1eb: 4f 8d 34 f7                   leaq    (%r15,%r14,8), %r14
// 1ef: 49 83 c6 f0                   addq    $-0x10, %r14
// 1f3: 85 c0                         testl   %eax, %eax
// 1f5: 78 12                         js      0x209 <_JIT_ENTRY+0x209>
// 1f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 201: ff d0                         callq   *%rax
// 203: 49 ff 0c 24                   decq    (%r12)
// 207: 74 28                         je      0x231 <_JIT_ENTRY+0x231>
// 209: 85 ed                         testl   %ebp, %ebp
// 20b: 4d 0f 44 ee                   cmoveq  %r14, %r13
// 20f: 74 37                         je      0x248 <_JIT_ENTRY+0x248>
// 211: 49 29 dd                      subq    %rbx, %r13
// 214: 49 83 c5 a8                   addq    $-0x58, %r13
// 218: 49 c1 ed 03                   shrq    $0x3, %r13
// 21c: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 220: 31 c0                         xorl    %eax, %eax
// 222: 48 83 c4 08                   addq    $0x8, %rsp
// 226: 5b                            popq    %rbx
// 227: 41 5c                         popq    %r12
// 229: 41 5d                         popq    %r13
// 22b: 41 5e                         popq    %r14
// 22d: 41 5f                         popq    %r15
// 22f: 5d                            popq    %rbp
// 230: c3                            retq
// 231: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000233:  R_X86_64_64  _Py_Dealloc
// 23b: 4c 89 e7                      movq    %r12, %rdi
// 23e: ff d0                         callq   *%rax
// 240: 85 ed                         testl   %ebp, %ebp
// 242: 4d 0f 44 ee                   cmoveq  %r14, %r13
// 246: 75 c9                         jne     0x211 <_JIT_ENTRY+0x211>
// 248: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024a:  R_X86_64_64  _JIT_CONTINUE
// 252: 48 89 df                      movq    %rbx, %rdi
// 255: 4c 89 ee                      movq    %r13, %rsi
// 258: 48 8b 14 24                   movq    (%rsp), %rdx
// 25c: 48 83 c4 08                   addq    $0x8, %rsp
// 260: 5b                            popq    %rbx
// 261: 41 5c                         popq    %r12
// 263: 41 5d                         popq    %r13
// 265: 41 5e                         popq    %r14
// 267: 41 5f                         popq    %r15
// 269: 5d                            popq    %rbp
// 26a: ff e0                         jmpq    *%rax
// 26c: 
static const unsigned char _LOAD_ATTR_SLOTplus_STORE_ATTR_code_body[621] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x34, 0x04, 0x4d, 0x85, 0xf6, 0x74, 0x1d, 0x48, 0x89, 0x14, 0x24, 0x41, 0x8b, 0x06, 0xff, 0xc0, 0x75, 0x3f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4e, 0x85, 0xc0, 0x79, 0x70, 0xe9, 0x81, 0x00, 0x00, 0x00, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xad, 0x01, 0x00, 0x00, 0x41, 0x89, 0x06, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xba, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x77, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x0f, 0xb7, 0xc6, 0x41, 0x83, 0xe6, 0x01, 0x4f, 0x8b, 0x6c, 0xf7, 0xf0, 0x4f, 0x8b, 0x64, 0xf7, 0xf8, 0x48, 0x8b, 0x0b, 0x48, 0x8b, 0x49, 0x20, 0x48, 0x8b, 0x74, 0xc1, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc5, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x48, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x4f, 0x8d, 0x2c, 0xf7, 0x4f, 0x8d, 0x34, 0xf7, 0x49, 0x83, 0xc6, 0xf0, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x86, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x77, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x33, 0xff, 0xff, 0xff, 0xe9, 0x35, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xa9, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc6, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4f, 0x8d, 0x2c, 0xf7, 0x4f, 0x8d, 0x34, 0xf7, 0x49, 0x83, 0xc6, 0xf0, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x28, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xee, 0x74, 0x37, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xa8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xee, 0x75, 0xc9, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_ATTR_SLOTplus_STORE_ATTR_code_holes[21] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x99, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xe4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetAttr, 0x0},
    {0x12f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x155, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x185, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x198, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1af, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x233, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_STORE_ATTR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_STORE_ATTR_data_holes[1];

// _LOAD_ATTR_SLOTplus_STORE_ATTR_INSTANCE_VALUE
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_STORE_ATTR_INSTANCE_VALUE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f7                      movq    %rsi, %r15
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 26: 4d 85 ed                      testq   %r13, %r13
// 29: 74 1d                         je      0x48 <_JIT_ENTRY+0x48>
// 2b: 49 89 d6                      movq    %rdx, %r14
// 2e: 41 8b 45 00                   movl    (%r13), %eax
// 32: ff c0                         incl    %eax
// 34: 75 49                         jne     0x7f <_JIT_ENTRY+0x7f>
// 36: 49 8b 04 24                   movq    (%r12), %rax
// 3a: 48 85 c0                      testq   %rax, %rax
// 3d: 7e 59                         jle     0x98 <_JIT_ENTRY+0x98>
// 3f: 85 c0                         testl   %eax, %eax
// 41: 79 7b                         jns     0xbe <_JIT_ENTRY+0xbe>
// 43: e9 8c 00 00 00                jmp     0xd4 <_JIT_ENTRY+0xd4>
// 48: 49 29 df                      subq    %rbx, %r15
// 4b: 49 83 c7 b8                   addq    $-0x48, %r15
// 4f: 49 c1 ef 03                   shrq    $0x3, %r15
// 53: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 57: 48 8b 03                      movq    (%rbx), %rax
// 5a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005c:  R_X86_64_64  _JIT_TARGET
// 64: 89 c9                         movl    %ecx, %ecx
// 66: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 6a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 70: 48 83 c4 08                   addq    $0x8, %rsp
// 74: 5b                            popq    %rbx
// 75: 41 5c                         popq    %r12
// 77: 41 5d                         popq    %r13
// 79: 41 5e                         popq    %r14
// 7b: 41 5f                         popq    %r15
// 7d: 5d                            popq    %rbp
// 7e: c3                            retq
// 7f: 41 89 45 00                   movl    %eax, (%r13)
// 83: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000085:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 8d: ff d0                         callq   *%rax
// 8f: 49 8b 04 24                   movq    (%r12), %rax
// 93: 48 85 c0                      testq   %rax, %rax
// 96: 7f a7                         jg      0x3f <_JIT_ENTRY+0x3f>
// 98: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000009a:  R_X86_64_64  .rodata.str1.1
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _Py_NegativeRefcount
// ac: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// b1: 4c 89 e2                      movq    %r12, %rdx
// b4: ff d0                         callq   *%rax
// b6: 49 8b 04 24                   movq    (%r12), %rax
// ba: 85 c0                         testl   %eax, %eax
// bc: 78 16                         js      0xd4 <_JIT_ENTRY+0xd4>
// be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c8: ff d0                         callq   *%rax
// ca: 49 ff 0c 24                   decq    (%r12)
// ce: 0f 84 dc 00 00 00             je      0x1b0 <_JIT_ENTRY+0x1b0>
// d4: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// d8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000da:  R_X86_64_64  _JIT_OPARG
// e2: a8 01                         testb   $0x1, %al
// e4: 74 07                         je      0xed <_JIT_ENTRY+0xed>
// e6: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// ed: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000000ef:  R_X86_64_64  _JIT_OPARG
// f7: 83 e5 01                      andl    $0x1, %ebp
// fa: 49 8b 4c ef f0                movq    -0x10(%r15,%rbp,8), %rcx
// ff: 4d 8b 64 ef f8                movq    -0x8(%r15,%rbp,8), %r12
// 104: 49 8b 44 24 e8                movq    -0x18(%r12), %rax
// 109: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000010b:  R_X86_64_64  _JIT_OPERAND
// 113: 0f b7 d2                      movzwl  %dx, %edx
// 116: 4c 8b 6c d0 01                movq    0x1(%rax,%rdx,8), %r13
// 11b: 48 89 4c d0 01                movq    %rcx, 0x1(%rax,%rdx,8)
// 120: 4d 85 ed                      testq   %r13, %r13
// 123: 74 0f                         je      0x134 <_JIT_ENTRY+0x134>
// 125: 49 8b 45 00                   movq    (%r13), %rax
// 129: 48 85 c0                      testq   %rax, %rax
// 12c: 7e 30                         jle     0x15e <_JIT_ENTRY+0x15e>
// 12e: 85 c0                         testl   %eax, %eax
// 130: 79 52                         jns     0x184 <_JIT_ENTRY+0x184>
// 132: eb 62                         jmp     0x196 <_JIT_ENTRY+0x196>
// 134: 0f b6 48 ff                   movzbl  -0x1(%rax), %ecx
// 138: 8d 51 01                      leal    0x1(%rcx), %edx
// 13b: 48 f7 d1                      notq    %rcx
// 13e: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000140:  R_X86_64_64  _JIT_OPERAND
// 148: 40 88 74 08 ff                movb    %sil, -0x1(%rax,%rcx)
// 14d: 88 50 ff                      movb    %dl, -0x1(%rax)
// 150: 49 8b 04 24                   movq    (%r12), %rax
// 154: 48 85 c0                      testq   %rax, %rax
// 157: 7f 46                         jg      0x19f <_JIT_ENTRY+0x19f>
// 159: e9 94 00 00 00                jmp     0x1f2 <_JIT_ENTRY+0x1f2>
// 15e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000160:  R_X86_64_64  .rodata.str1.1
// 168: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016a:  R_X86_64_64  _Py_NegativeRefcount
// 172: be 16 07 00 00                movl    $0x716, %esi            # imm = 0x716
// 177: 4c 89 ea                      movq    %r13, %rdx
// 17a: ff d0                         callq   *%rax
// 17c: 49 8b 45 00                   movq    (%r13), %rax
// 180: 85 c0                         testl   %eax, %eax
// 182: 78 12                         js      0x196 <_JIT_ENTRY+0x196>
// 184: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000186:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 18e: ff d0                         callq   *%rax
// 190: 49 ff 4d 00                   decq    (%r13)
// 194: 74 44                         je      0x1da <_JIT_ENTRY+0x1da>
// 196: 49 8b 04 24                   movq    (%r12), %rax
// 19a: 48 85 c0                      testq   %rax, %rax
// 19d: 7e 53                         jle     0x1f2 <_JIT_ENTRY+0x1f2>
// 19f: 4d 8d 3c ef                   leaq    (%r15,%rbp,8), %r15
// 1a3: 49 83 c7 f0                   addq    $-0x10, %r15
// 1a7: 85 c0                         testl   %eax, %eax
// 1a9: 79 75                         jns     0x220 <_JIT_ENTRY+0x220>
// 1ab: e9 91 00 00 00                jmp     0x241 <_JIT_ENTRY+0x241>
// 1b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b2:  R_X86_64_64  _Py_Dealloc
// 1ba: 4c 89 e7                      movq    %r12, %rdi
// 1bd: ff d0                         callq   *%rax
// 1bf: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// 1c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c5:  R_X86_64_64  _JIT_OPARG
// 1cd: a8 01                         testb   $0x1, %al
// 1cf: 0f 85 11 ff ff ff             jne     0xe6 <_JIT_ENTRY+0xe6>
// 1d5: e9 13 ff ff ff                jmp     0xed <_JIT_ENTRY+0xed>
// 1da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dc:  R_X86_64_64  _Py_Dealloc
// 1e4: 4c 89 ef                      movq    %r13, %rdi
// 1e7: ff d0                         callq   *%rax
// 1e9: 49 8b 04 24                   movq    (%r12), %rax
// 1ed: 48 85 c0                      testq   %rax, %rax
// 1f0: 7f ad                         jg      0x19f <_JIT_ENTRY+0x19f>
// 1f2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f4:  R_X86_64_64  .rodata.str1.1
// 1fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fe:  R_X86_64_64  _Py_NegativeRefcount
// 206: be 18 07 00 00                movl    $0x718, %esi            # imm = 0x718
// 20b: 4c 89 e2                      movq    %r12, %rdx
// 20e: ff d0                         callq   *%rax
// 210: 49 8b 04 24                   movq    (%r12), %rax
// 214: 4d 8d 3c ef                   leaq    (%r15,%rbp,8), %r15
// 218: 49 83 c7 f0                   addq    $-0x10, %r15
// 21c: 85 c0                         testl   %eax, %eax
// 21e: 78 21                         js      0x241 <_JIT_ENTRY+0x241>
// 220: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000222:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 22a: ff d0                         callq   *%rax
// 22c: 49 ff 0c 24                   decq    (%r12)
// 230: 75 0f                         jne     0x241 <_JIT_ENTRY+0x241>
// 232: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000234:  R_X86_64_64  _Py_Dealloc
// 23c: 4c 89 e7                      movq    %r12, %rdi
// 23f: ff d0                         callq   *%rax
// 241: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000243:  R_X86_64_64  _JIT_CONTINUE
// 24b: 48 89 df                      movq    %rbx, %rdi
// 24e: 4c 89 fe                      movq    %r15, %rsi
// 251: 4c 89 f2                      movq    %r14, %rdx
// 254: 48 83 c4 08                   addq    $0x8, %rsp
// 258: 5b                            popq    %rbx
// 259: 41 5c                         popq    %r12
// 25b: 41 5d                         popq    %r13
// 25d: 41 5e                         popq    %r14
// 25f: 41 5f                         popq    %r15
// 261: 5d                            popq    %rbp
// 262: ff e0                         jmpq    *%rax
// 264: 
static const unsigned char _LOAD_ATTR_SLOTplus_STORE_ATTR_INSTANCE_VALUE_code_body[613] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1d, 0x49, 0x89, 0xd6, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x49, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x59, 0x85, 0xc0, 0x79, 0x7b, 0xe9, 0x8c, 0x00, 0x00, 0x00, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xa7, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xdc, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe5, 0x01, 0x49, 0x8b, 0x4c, 0xef, 0xf0, 0x4d, 0x8b, 0x64, 0xef, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0xe8, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x4c, 0x8b, 0x6c, 0xd0, 0x01, 0x48, 0x89, 0x4c, 0xd0, 0x01, 0x4d, 0x85, 0xed, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x79, 0x52, 0xeb, 0x62, 0x0f, 0xb6, 0x48, 0xff, 0x8d, 0x51, 0x01, 0x48, 0xf7, 0xd1, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x88, 0x74, 0x08, 0xff, 0x88, 0x50, 0xff, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x46, 0xe9, 0x94, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x16, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x44, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x53, 0x4d, 0x8d, 0x3c, 0xef, 0x49, 0x83, 0xc7, 0xf0, 0x85, 0xc0, 0x79, 0x75, 0xe9, 0x91, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x11, 0xff, 0xff, 0xff, 0xe9, 0x13, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xad, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x18, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x3c, 0xef, 0x49, 0x83, 0xc7, 0xf0, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_ATTR_SLOTplus_STORE_ATTR_INSTANCE_VALUE_code_holes[22] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x9a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xc0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xda, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x140, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x186, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1c5, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1fe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x222, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x234, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x243, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_STORE_ATTR_INSTANCE_VALUE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_STORE_ATTR_INSTANCE_VALUE_data_holes[1];

// _LOAD_ATTR_SLOTplus_STORE_ATTR_SLOT
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_STORE_ATTR_SLOT.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f7                      movq    %rsi, %r15
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 26: 4d 85 ed                      testq   %r13, %r13
// 29: 74 1d                         je      0x48 <_JIT_ENTRY+0x48>
// 2b: 49 89 d6                      movq    %rdx, %r14
// 2e: 41 8b 45 00                   movl    (%r13), %eax
// 32: ff c0                         incl    %eax
// 34: 75 49                         jne     0x7f <_JIT_ENTRY+0x7f>
// 36: 49 8b 04 24                   movq    (%r12), %rax
// 3a: 48 85 c0                      testq   %rax, %rax
// 3d: 7e 59                         jle     0x98 <_JIT_ENTRY+0x98>
// 3f: 85 c0                         testl   %eax, %eax
// 41: 79 7b                         jns     0xbe <_JIT_ENTRY+0xbe>
// 43: e9 8c 00 00 00                jmp     0xd4 <_JIT_ENTRY+0xd4>
// 48: 49 29 df                      subq    %rbx, %r15
// 4b: 49 83 c7 b8                   addq    $-0x48, %r15
// 4f: 49 c1 ef 03                   shrq    $0x3, %r15
// 53: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 57: 48 8b 03                      movq    (%rbx), %rax
// 5a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005c:  R_X86_64_64  _JIT_TARGET
// 64: 89 c9                         movl    %ecx, %ecx
// 66: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 6a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 70: 48 83 c4 08                   addq    $0x8, %rsp
// 74: 5b                            popq    %rbx
// 75: 41 5c                         popq    %r12
// 77: 41 5d                         popq    %r13
// 79: 41 5e                         popq    %r14
// 7b: 41 5f                         popq    %r15
// 7d: 5d                            popq    %rbp
// 7e: c3                            retq
// 7f: 41 89 45 00                   movl    %eax, (%r13)
// 83: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000085:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 8d: ff d0                         callq   *%rax
// 8f: 49 8b 04 24                   movq    (%r12), %rax
// 93: 48 85 c0                      testq   %rax, %rax
// 96: 7f a7                         jg      0x3f <_JIT_ENTRY+0x3f>
// 98: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000009a:  R_X86_64_64  .rodata.str1.1
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _Py_NegativeRefcount
// ac: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// b1: 4c 89 e2                      movq    %r12, %rdx
// b4: ff d0                         callq   *%rax
// b6: 49 8b 04 24                   movq    (%r12), %rax
// ba: 85 c0                         testl   %eax, %eax
// bc: 78 16                         js      0xd4 <_JIT_ENTRY+0xd4>
// be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c8: ff d0                         callq   *%rax
// ca: 49 ff 0c 24                   decq    (%r12)
// ce: 0f 84 ab 00 00 00             je      0x17f <_JIT_ENTRY+0x17f>
// d4: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// d8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000da:  R_X86_64_64  _JIT_OPARG
// e2: a8 01                         testb   $0x1, %al
// e4: 74 07                         je      0xed <_JIT_ENTRY+0xed>
// e6: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// ed: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000000ef:  R_X86_64_64  _JIT_OPARG
// f7: 83 e5 01                      andl    $0x1, %ebp
// fa: 49 8b 44 ef f0                movq    -0x10(%r15,%rbp,8), %rax
// ff: 4d 8b 64 ef f8                movq    -0x8(%r15,%rbp,8), %r12
// 104: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000106:  R_X86_64_64  _JIT_OPERAND
// 10e: 0f b7 c9                      movzwl  %cx, %ecx
// 111: 4d 8b 2c 0c                   movq    (%r12,%rcx), %r13
// 115: 49 89 04 0c                   movq    %rax, (%r12,%rcx)
// 119: 4d 85 ed                      testq   %r13, %r13
// 11c: 74 47                         je      0x165 <_JIT_ENTRY+0x165>
// 11e: 49 8b 45 00                   movq    (%r13), %rax
// 122: 48 85 c0                      testq   %rax, %rax
// 125: 7e 06                         jle     0x12d <_JIT_ENTRY+0x12d>
// 127: 85 c0                         testl   %eax, %eax
// 129: 79 28                         jns     0x153 <_JIT_ENTRY+0x153>
// 12b: eb 38                         jmp     0x165 <_JIT_ENTRY+0x165>
// 12d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000012f:  R_X86_64_64  .rodata.str1.1+0x39
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  _Py_NegativeRefcount
// 141: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 146: 4c 89 ea                      movq    %r13, %rdx
// 149: ff d0                         callq   *%rax
// 14b: 49 8b 45 00                   movq    (%r13), %rax
// 14f: 85 c0                         testl   %eax, %eax
// 151: 78 12                         js      0x165 <_JIT_ENTRY+0x165>
// 153: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000155:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 15d: ff d0                         callq   *%rax
// 15f: 49 ff 4d 00                   decq    (%r13)
// 163: 74 44                         je      0x1a9 <_JIT_ENTRY+0x1a9>
// 165: 49 8b 04 24                   movq    (%r12), %rax
// 169: 48 85 c0                      testq   %rax, %rax
// 16c: 7e 53                         jle     0x1c1 <_JIT_ENTRY+0x1c1>
// 16e: 4d 8d 3c ef                   leaq    (%r15,%rbp,8), %r15
// 172: 49 83 c7 f0                   addq    $-0x10, %r15
// 176: 85 c0                         testl   %eax, %eax
// 178: 79 75                         jns     0x1ef <_JIT_ENTRY+0x1ef>
// 17a: e9 91 00 00 00                jmp     0x210 <_JIT_ENTRY+0x210>
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_Dealloc
// 189: 4c 89 e7                      movq    %r12, %rdi
// 18c: ff d0                         callq   *%rax
// 18e: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// 192: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000194:  R_X86_64_64  _JIT_OPARG
// 19c: a8 01                         testb   $0x1, %al
// 19e: 0f 85 42 ff ff ff             jne     0xe6 <_JIT_ENTRY+0xe6>
// 1a4: e9 44 ff ff ff                jmp     0xed <_JIT_ENTRY+0xed>
// 1a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ab:  R_X86_64_64  _Py_Dealloc
// 1b3: 4c 89 ef                      movq    %r13, %rdi
// 1b6: ff d0                         callq   *%rax
// 1b8: 49 8b 04 24                   movq    (%r12), %rax
// 1bc: 48 85 c0                      testq   %rax, %rax
// 1bf: 7f ad                         jg      0x16e <_JIT_ENTRY+0x16e>
// 1c1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c3:  R_X86_64_64  .rodata.str1.1
// 1cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cd:  R_X86_64_64  _Py_NegativeRefcount
// 1d5: be 2a 07 00 00                movl    $0x72a, %esi            # imm = 0x72A
// 1da: 4c 89 e2                      movq    %r12, %rdx
// 1dd: ff d0                         callq   *%rax
// 1df: 49 8b 04 24                   movq    (%r12), %rax
// 1e3: 4d 8d 3c ef                   leaq    (%r15,%rbp,8), %r15
// 1e7: 49 83 c7 f0                   addq    $-0x10, %r15
// 1eb: 85 c0                         testl   %eax, %eax
// 1ed: 78 21                         js      0x210 <_JIT_ENTRY+0x210>
// 1ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f9: ff d0                         callq   *%rax
// 1fb: 49 ff 0c 24                   decq    (%r12)
// 1ff: 75 0f                         jne     0x210 <_JIT_ENTRY+0x210>
// 201: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000203:  R_X86_64_64  _Py_Dealloc
// 20b: 4c 89 e7                      movq    %r12, %rdi
// 20e: ff d0                         callq   *%rax
// 210: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000212:  R_X86_64_64  _JIT_CONTINUE
// 21a: 48 89 df                      movq    %rbx, %rdi
// 21d: 4c 89 fe                      movq    %r15, %rsi
// 220: 4c 89 f2                      movq    %r14, %rdx
// 223: 48 83 c4 08                   addq    $0x8, %rsp
// 227: 5b                            popq    %rbx
// 228: 41 5c                         popq    %r12
// 22a: 41 5d                         popq    %r13
// 22c: 41 5e                         popq    %r14
// 22e: 41 5f                         popq    %r15
// 230: 5d                            popq    %rbp
// 231: ff e0                         jmpq    *%rax
// 233: 
static const unsigned char _LOAD_ATTR_SLOTplus_STORE_ATTR_SLOT_code_body[564] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1d, 0x49, 0x89, 0xd6, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x49, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x59, 0x85, 0xc0, 0x79, 0x7b, 0xe9, 0x8c, 0x00, 0x00, 0x00, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xa7, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xab, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe5, 0x01, 0x49, 0x8b, 0x44, 0xef, 0xf0, 0x4d, 0x8b, 0x64, 0xef, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4d, 0x8b, 0x2c, 0x0c, 0x49, 0x89, 0x04, 0x0c, 0x4d, 0x85, 0xed, 0x74, 0x47, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x44, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x53, 0x4d, 0x8d, 0x3c, 0xef, 0x49, 0x83, 0xc7, 0xf0, 0x85, 0xc0, 0x79, 0x75, 0xe9, 0x91, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x42, 0xff, 0xff, 0xff, 0xe9, 0x44, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xad, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x2a, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x3c, 0xef, 0x49, 0x83, 0xc7, 0xf0, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_ATTR_SLOTplus_STORE_ATTR_SLOT_code_holes[21] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x9a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xc0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xda, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x12f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x155, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x194, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1cd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x203, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_STORE_ATTR_SLOT_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_STORE_ATTR_SLOT_data_holes[1];

// _LOAD_ATTR_SLOTplus_STORE_DEREF
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_STORE_DEREF.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f7                      movq    %rsi, %r15
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 74 1d                         je      0x46 <_JIT_ENTRY+0x46>
// 29: 49 89 d6                      movq    %rdx, %r14
// 2c: 41 8b 45 00                   movl    (%r13), %eax
// 30: ff c0                         incl    %eax
// 32: 75 42                         jne     0x76 <_JIT_ENTRY+0x76>
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 52                         jle     0x8f <_JIT_ENTRY+0x8f>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 74                         jns     0xb5 <_JIT_ENTRY+0xb5>
// 41: e9 85 00 00 00                jmp     0xcb <_JIT_ENTRY+0xcb>
// 46: 49 29 df                      subq    %rbx, %r15
// 49: 49 83 c7 b8                   addq    $-0x48, %r15
// 4d: 49 c1 ef 03                   shrq    $0x3, %r15
// 51: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 55: 48 8b 03                      movq    (%rbx), %rax
// 58: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005a:  R_X86_64_64  _JIT_TARGET
// 62: 89 c9                         movl    %ecx, %ecx
// 64: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 6c: 5b                            popq    %rbx
// 6d: 41 5c                         popq    %r12
// 6f: 41 5d                         popq    %r13
// 71: 41 5e                         popq    %r14
// 73: 41 5f                         popq    %r15
// 75: c3                            retq
// 76: 41 89 45 00                   movl    %eax, (%r13)
// 7a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007c:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 84: ff d0                         callq   *%rax
// 86: 49 8b 04 24                   movq    (%r12), %rax
// 8a: 48 85 c0                      testq   %rax, %rax
// 8d: 7f ae                         jg      0x3d <_JIT_ENTRY+0x3d>
// 8f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000091:  R_X86_64_64  .rodata.str1.1
// 99: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009b:  R_X86_64_64  _Py_NegativeRefcount
// a3: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a8: 4c 89 e2                      movq    %r12, %rdx
// ab: ff d0                         callq   *%rax
// ad: 49 8b 04 24                   movq    (%r12), %rax
// b1: 85 c0                         testl   %eax, %eax
// b3: 78 16                         js      0xcb <_JIT_ENTRY+0xcb>
// b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bf: ff d0                         callq   *%rax
// c1: 49 ff 0c 24                   decq    (%r12)
// c5: 0f 84 af 00 00 00             je      0x17a <_JIT_ENTRY+0x17a>
// cb: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d1:  R_X86_64_64  _JIT_OPARG
// d9: a8 01                         testb   $0x1, %al
// db: 74 07                         je      0xe4 <_JIT_ENTRY+0xe4>
// dd: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// e4: 0f b7 c8                      movzwl  %ax, %ecx
// e7: 83 e0 01                      andl    $0x1, %eax
// ea: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// ee: 49 83 c4 f8                   addq    $-0x8, %r12
// f2: 49 8b 44 c7 f8                movq    -0x8(%r15,%rax,8), %rax
// f7: 48 8b 4c cb 48                movq    0x48(%rbx,%rcx,8), %rcx
// fc: 4c 8b 79 10                   movq    0x10(%rcx), %r15
// 100: 48 89 41 10                   movq    %rax, 0x10(%rcx)
// 104: 4d 85 ff                      testq   %r15, %r15
// 107: 74 53                         je      0x15c <_JIT_ENTRY+0x15c>
// 109: 49 8b 07                      movq    (%r15), %rax
// 10c: 48 85 c0                      testq   %rax, %rax
// 10f: 7e 06                         jle     0x117 <_JIT_ENTRY+0x117>
// 111: 85 c0                         testl   %eax, %eax
// 113: 79 27                         jns     0x13c <_JIT_ENTRY+0x13c>
// 115: eb 45                         jmp     0x15c <_JIT_ENTRY+0x15c>
// 117: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000119:  R_X86_64_64  .rodata.str1.1+0x39
// 121: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000123:  R_X86_64_64  _Py_NegativeRefcount
// 12b: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 130: 4c 89 fa                      movq    %r15, %rdx
// 133: ff d0                         callq   *%rax
// 135: 49 8b 07                      movq    (%r15), %rax
// 138: 85 c0                         testl   %eax, %eax
// 13a: 78 20                         js      0x15c <_JIT_ENTRY+0x15c>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 146: ff d0                         callq   *%rax
// 148: 49 ff 0f                      decq    (%r15)
// 14b: 75 0f                         jne     0x15c <_JIT_ENTRY+0x15c>
// 14d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014f:  R_X86_64_64  _Py_Dealloc
// 157: 4c 89 ff                      movq    %r15, %rdi
// 15a: ff d0                         callq   *%rax
// 15c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015e:  R_X86_64_64  _JIT_CONTINUE
// 166: 48 89 df                      movq    %rbx, %rdi
// 169: 4c 89 e6                      movq    %r12, %rsi
// 16c: 4c 89 f2                      movq    %r14, %rdx
// 16f: 5b                            popq    %rbx
// 170: 41 5c                         popq    %r12
// 172: 41 5d                         popq    %r13
// 174: 41 5e                         popq    %r14
// 176: 41 5f                         popq    %r15
// 178: ff e0                         jmpq    *%rax
// 17a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017c:  R_X86_64_64  _Py_Dealloc
// 184: 4c 89 e7                      movq    %r12, %rdi
// 187: ff d0                         callq   *%rax
// 189: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// 18d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018f:  R_X86_64_64  _JIT_OPARG
// 197: a8 01                         testb   $0x1, %al
// 199: 0f 85 3e ff ff ff             jne     0xdd <_JIT_ENTRY+0xdd>
// 19f: e9 40 ff ff ff                jmp     0xe4 <_JIT_ENTRY+0xe4>
// 1a4: 
static const unsigned char _LOAD_ATTR_SLOTplus_STORE_DEREF_code_body[421] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1d, 0x49, 0x89, 0xd6, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x42, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x52, 0x85, 0xc0, 0x79, 0x74, 0xe9, 0x85, 0x00, 0x00, 0x00, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xae, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xaf, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x83, 0xe0, 0x01, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x83, 0xc4, 0xf8, 0x49, 0x8b, 0x44, 0xc7, 0xf8, 0x48, 0x8b, 0x4c, 0xcb, 0x48, 0x4c, 0x8b, 0x79, 0x10, 0x48, 0x89, 0x41, 0x10, 0x4d, 0x85, 0xff, 0x74, 0x53, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x45, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x3e, 0xff, 0xff, 0xff, 0xe9, 0x40, 0xff, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_STORE_DEREF_code_holes[15] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x123, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x15e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_STORE_DEREF_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_STORE_DEREF_data_holes[1];

// _LOAD_ATTR_SLOTplus_STORE_FAST
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_STORE_FAST.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f7                      movq    %rsi, %r15
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 74 1d                         je      0x46 <_JIT_ENTRY+0x46>
// 29: 49 89 d6                      movq    %rdx, %r14
// 2c: 41 8b 45 00                   movl    (%r13), %eax
// 30: ff c0                         incl    %eax
// 32: 75 42                         jne     0x76 <_JIT_ENTRY+0x76>
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 52                         jle     0x8f <_JIT_ENTRY+0x8f>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 74                         jns     0xb5 <_JIT_ENTRY+0xb5>
// 41: e9 85 00 00 00                jmp     0xcb <_JIT_ENTRY+0xcb>
// 46: 49 29 df                      subq    %rbx, %r15
// 49: 49 83 c7 b8                   addq    $-0x48, %r15
// 4d: 49 c1 ef 03                   shrq    $0x3, %r15
// 51: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 55: 48 8b 03                      movq    (%rbx), %rax
// 58: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005a:  R_X86_64_64  _JIT_TARGET
// 62: 89 c9                         movl    %ecx, %ecx
// 64: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 6c: 5b                            popq    %rbx
// 6d: 41 5c                         popq    %r12
// 6f: 41 5d                         popq    %r13
// 71: 41 5e                         popq    %r14
// 73: 41 5f                         popq    %r15
// 75: c3                            retq
// 76: 41 89 45 00                   movl    %eax, (%r13)
// 7a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007c:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 84: ff d0                         callq   *%rax
// 86: 49 8b 04 24                   movq    (%r12), %rax
// 8a: 48 85 c0                      testq   %rax, %rax
// 8d: 7f ae                         jg      0x3d <_JIT_ENTRY+0x3d>
// 8f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000091:  R_X86_64_64  .rodata.str1.1
// 99: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009b:  R_X86_64_64  _Py_NegativeRefcount
// a3: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a8: 4c 89 e2                      movq    %r12, %rdx
// ab: ff d0                         callq   *%rax
// ad: 49 8b 04 24                   movq    (%r12), %rax
// b1: 85 c0                         testl   %eax, %eax
// b3: 78 16                         js      0xcb <_JIT_ENTRY+0xcb>
// b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bf: ff d0                         callq   *%rax
// c1: 49 ff 0c 24                   decq    (%r12)
// c5: 0f 84 ac 00 00 00             je      0x177 <_JIT_ENTRY+0x177>
// cb: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d1:  R_X86_64_64  _JIT_OPARG
// d9: a8 01                         testb   $0x1, %al
// db: 74 07                         je      0xe4 <_JIT_ENTRY+0xe4>
// dd: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// e4: 0f b7 c8                      movzwl  %ax, %ecx
// e7: 83 e0 01                      andl    $0x1, %eax
// ea: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// ee: 49 83 c4 f8                   addq    $-0x8, %r12
// f2: 49 8b 44 c7 f8                movq    -0x8(%r15,%rax,8), %rax
// f7: 4c 8b 7c cb 48                movq    0x48(%rbx,%rcx,8), %r15
// fc: 48 89 44 cb 48                movq    %rax, 0x48(%rbx,%rcx,8)
// 101: 4d 85 ff                      testq   %r15, %r15
// 104: 74 53                         je      0x159 <_JIT_ENTRY+0x159>
// 106: 49 8b 07                      movq    (%r15), %rax
// 109: 48 85 c0                      testq   %rax, %rax
// 10c: 7e 06                         jle     0x114 <_JIT_ENTRY+0x114>
// 10e: 85 c0                         testl   %eax, %eax
// 110: 79 27                         jns     0x139 <_JIT_ENTRY+0x139>
// 112: eb 45                         jmp     0x159 <_JIT_ENTRY+0x159>
// 114: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000116:  R_X86_64_64  .rodata.str1.1+0x39
// 11e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000120:  R_X86_64_64  _Py_NegativeRefcount
// 128: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 12d: 4c 89 fa                      movq    %r15, %rdx
// 130: ff d0                         callq   *%rax
// 132: 49 8b 07                      movq    (%r15), %rax
// 135: 85 c0                         testl   %eax, %eax
// 137: 78 20                         js      0x159 <_JIT_ENTRY+0x159>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 143: ff d0                         callq   *%rax
// 145: 49 ff 0f                      decq    (%r15)
// 148: 75 0f                         jne     0x159 <_JIT_ENTRY+0x159>
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_Dealloc
// 154: 4c 89 ff                      movq    %r15, %rdi
// 157: ff d0                         callq   *%rax
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  _JIT_CONTINUE
// 163: 48 89 df                      movq    %rbx, %rdi
// 166: 4c 89 e6                      movq    %r12, %rsi
// 169: 4c 89 f2                      movq    %r14, %rdx
// 16c: 5b                            popq    %rbx
// 16d: 41 5c                         popq    %r12
// 16f: 41 5d                         popq    %r13
// 171: 41 5e                         popq    %r14
// 173: 41 5f                         popq    %r15
// 175: ff e0                         jmpq    *%rax
// 177: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000179:  R_X86_64_64  _Py_Dealloc
// 181: 4c 89 e7                      movq    %r12, %rdi
// 184: ff d0                         callq   *%rax
// 186: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// 18a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018c:  R_X86_64_64  _JIT_OPARG
// 194: a8 01                         testb   $0x1, %al
// 196: 0f 85 41 ff ff ff             jne     0xdd <_JIT_ENTRY+0xdd>
// 19c: e9 43 ff ff ff                jmp     0xe4 <_JIT_ENTRY+0xe4>
// 1a1: 
static const unsigned char _LOAD_ATTR_SLOTplus_STORE_FAST_code_body[418] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1d, 0x49, 0x89, 0xd6, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x42, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x52, 0x85, 0xc0, 0x79, 0x74, 0xe9, 0x85, 0x00, 0x00, 0x00, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xae, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xac, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x83, 0xe0, 0x01, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x83, 0xc4, 0xf8, 0x49, 0x8b, 0x44, 0xc7, 0xf8, 0x4c, 0x8b, 0x7c, 0xcb, 0x48, 0x48, 0x89, 0x44, 0xcb, 0x48, 0x4d, 0x85, 0xff, 0x74, 0x53, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x45, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x41, 0xff, 0xff, 0xff, 0xe9, 0x43, 0xff, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_STORE_FAST_code_holes[15] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x116, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x120, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x179, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_STORE_FAST_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_STORE_FAST_data_holes[1];

// _LOAD_ATTR_SLOTplus_STORE_GLOBAL
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_STORE_GLOBAL.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f7                      movq    %rsi, %r15
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 26: 4d 85 ed                      testq   %r13, %r13
// 29: 74 28                         je      0x53 <_JIT_ENTRY+0x53>
// 2b: 48 89 14 24                   movq    %rdx, (%rsp)
// 2f: 41 8b 45 00                   movl    (%r13), %eax
// 33: ff c0                         incl    %eax
// 35: 75 49                         jne     0x80 <_JIT_ENTRY+0x80>
// 37: 49 8b 04 24                   movq    (%r12), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 59                         jle     0x99 <_JIT_ENTRY+0x99>
// 40: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000042:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 4a: 85 c0                         testl   %eax, %eax
// 4c: 79 7b                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 4e: e9 82 00 00 00                jmp     0xd5 <_JIT_ENTRY+0xd5>
// 53: 49 29 df                      subq    %rbx, %r15
// 56: 49 83 c7 b8                   addq    $-0x48, %r15
// 5a: 49 c1 ef 03                   shrq    $0x3, %r15
// 5e: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 62: 48 8b 03                      movq    (%rbx), %rax
// 65: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000067:  R_X86_64_64  _JIT_TARGET
// 6f: 89 c9                         movl    %ecx, %ecx
// 71: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 75: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 7b: e9 1e 01 00 00                jmp     0x19e <_JIT_ENTRY+0x19e>
// 80: 41 89 45 00                   movl    %eax, (%r13)
// 84: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000086:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 8e: ff d0                         callq   *%rax
// 90: 49 8b 04 24                   movq    (%r12), %rax
// 94: 48 85 c0                      testq   %rax, %rax
// 97: 7f a7                         jg      0x40 <_JIT_ENTRY+0x40>
// 99: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000009b:  R_X86_64_64  .rodata.str1.1
// a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a5:  R_X86_64_64  _Py_NegativeRefcount
// ad: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// b2: 4c 89 e2                      movq    %r12, %rdx
// b5: ff d0                         callq   *%rax
// b7: 49 8b 04 24                   movq    (%r12), %rax
// bb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000bd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 0c                         js      0xd5 <_JIT_ENTRY+0xd5>
// c9: ff d1                         callq   *%rcx
// cb: 49 ff 0c 24                   decq    (%r12)
// cf: 0f 84 d8 00 00 00             je      0x1ad <_JIT_ENTRY+0x1ad>
// d5: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000db:  R_X86_64_64  _JIT_OPARG
// e3: a8 01                         testb   $0x1, %al
// e5: 74 07                         je      0xee <_JIT_ENTRY+0xee>
// e7: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// ee: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 00000000000000f0:  R_X86_64_64  _JIT_OPARG
// f8: 41 0f b7 c6                   movzwl  %r14w, %eax
// fc: 41 83 e6 01                   andl    $0x1, %r14d
// 100: 4f 8b 64 f7 f8                movq    -0x8(%r15,%r14,8), %r12
// 105: 48 8b 0b                      movq    (%rbx), %rcx
// 108: 48 8b 7b 18                   movq    0x18(%rbx), %rdi
// 10c: 48 8b 49 20                   movq    0x20(%rcx), %rcx
// 110: 48 8b 74 c1 18                movq    0x18(%rcx,%rax,8), %rsi
// 115: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000117:  R_X86_64_64  PyDict_SetItem
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 89 c5                         movl    %eax, %ebp
// 126: 49 8b 04 24                   movq    (%r12), %rax
// 12a: 48 85 c0                      testq   %rax, %rax
// 12d: 7e 12                         jle     0x141 <_JIT_ENTRY+0x141>
// 12f: 4f 8d 2c f7                   leaq    (%r15,%r14,8), %r13
// 133: 4f 8d 34 f7                   leaq    (%r15,%r14,8), %r14
// 137: 49 83 c6 f8                   addq    $-0x8, %r14
// 13b: 85 c0                         testl   %eax, %eax
// 13d: 79 34                         jns     0x173 <_JIT_ENTRY+0x173>
// 13f: eb 44                         jmp     0x185 <_JIT_ENTRY+0x185>
// 141: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000143:  R_X86_64_64  .rodata.str1.1
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_NegativeRefcount
// 155: be de 03 00 00                movl    $0x3de, %esi            # imm = 0x3DE
// 15a: 4c 89 e2                      movq    %r12, %rdx
// 15d: ff d0                         callq   *%rax
// 15f: 49 8b 04 24                   movq    (%r12), %rax
// 163: 4f 8d 2c f7                   leaq    (%r15,%r14,8), %r13
// 167: 4f 8d 34 f7                   leaq    (%r15,%r14,8), %r14
// 16b: 49 83 c6 f8                   addq    $-0x8, %r14
// 16f: 85 c0                         testl   %eax, %eax
// 171: 78 12                         js      0x185 <_JIT_ENTRY+0x185>
// 173: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000175:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17d: ff d0                         callq   *%rax
// 17f: 49 ff 0c 24                   decq    (%r12)
// 183: 74 52                         je      0x1d7 <_JIT_ENTRY+0x1d7>
// 185: 85 ed                         testl   %ebp, %ebp
// 187: 4d 0f 44 ee                   cmoveq  %r14, %r13
// 18b: 74 61                         je      0x1ee <_JIT_ENTRY+0x1ee>
// 18d: 49 29 dd                      subq    %rbx, %r13
// 190: 49 83 c5 b0                   addq    $-0x50, %r13
// 194: 49 c1 ed 03                   shrq    $0x3, %r13
// 198: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 19c: 31 c0                         xorl    %eax, %eax
// 19e: 48 83 c4 08                   addq    $0x8, %rsp
// 1a2: 5b                            popq    %rbx
// 1a3: 41 5c                         popq    %r12
// 1a5: 41 5d                         popq    %r13
// 1a7: 41 5e                         popq    %r14
// 1a9: 41 5f                         popq    %r15
// 1ab: 5d                            popq    %rbp
// 1ac: c3                            retq
// 1ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001af:  R_X86_64_64  _Py_Dealloc
// 1b7: 4c 89 e7                      movq    %r12, %rdi
// 1ba: ff d0                         callq   *%rax
// 1bc: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// 1c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c2:  R_X86_64_64  _JIT_OPARG
// 1ca: a8 01                         testb   $0x1, %al
// 1cc: 0f 85 15 ff ff ff             jne     0xe7 <_JIT_ENTRY+0xe7>
// 1d2: e9 17 ff ff ff                jmp     0xee <_JIT_ENTRY+0xee>
// 1d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d9:  R_X86_64_64  _Py_Dealloc
// 1e1: 4c 89 e7                      movq    %r12, %rdi
// 1e4: ff d0                         callq   *%rax
// 1e6: 85 ed                         testl   %ebp, %ebp
// 1e8: 4d 0f 44 ee                   cmoveq  %r14, %r13
// 1ec: 75 9f                         jne     0x18d <_JIT_ENTRY+0x18d>
// 1ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f0:  R_X86_64_64  _JIT_CONTINUE
// 1f8: 48 89 df                      movq    %rbx, %rdi
// 1fb: 4c 89 ee                      movq    %r13, %rsi
// 1fe: 48 8b 14 24                   movq    (%rsp), %rdx
// 202: 48 83 c4 08                   addq    $0x8, %rsp
// 206: 5b                            popq    %rbx
// 207: 41 5c                         popq    %r12
// 209: 41 5d                         popq    %r13
// 20b: 41 5e                         popq    %r14
// 20d: 41 5f                         popq    %r15
// 20f: 5d                            popq    %rbp
// 210: ff e0                         jmpq    *%rax
// 212: 
static const unsigned char _LOAD_ATTR_SLOTplus_STORE_GLOBAL_code_body[531] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x28, 0x48, 0x89, 0x14, 0x24, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x49, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x59, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x79, 0x7b, 0xe9, 0x82, 0x00, 0x00, 0x00, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x1e, 0x01, 0x00, 0x00, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xa7, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x0c, 0xff, 0xd1, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xd8, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x0f, 0xb7, 0xc6, 0x41, 0x83, 0xe6, 0x01, 0x4f, 0x8b, 0x64, 0xf7, 0xf8, 0x48, 0x8b, 0x0b, 0x48, 0x8b, 0x7b, 0x18, 0x48, 0x8b, 0x49, 0x20, 0x48, 0x8b, 0x74, 0xc1, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x4f, 0x8d, 0x2c, 0xf7, 0x4f, 0x8d, 0x34, 0xf7, 0x49, 0x83, 0xc6, 0xf8, 0x85, 0xc0, 0x79, 0x34, 0xeb, 0x44, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xde, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4f, 0x8d, 0x2c, 0xf7, 0x4f, 0x8d, 0x34, 0xf7, 0x49, 0x83, 0xc6, 0xf8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x52, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xee, 0x74, 0x61, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb0, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x15, 0xff, 0xff, 0xff, 0xe9, 0x17, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xee, 0x75, 0x9f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_ATTR_SLOTplus_STORE_GLOBAL_code_holes[18] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x42, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x67, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x86, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xbd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xdb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x117, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_SetItem, 0x0},
    {0x143, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x175, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1af, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1f0, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_STORE_GLOBAL_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_STORE_GLOBAL_data_holes[1];

// _LOAD_ATTR_SLOTplus_STORE_NAME
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_STORE_NAME.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 26: 4d 85 ed                      testq   %r13, %r13
// 29: 74 1d                         je      0x48 <_JIT_ENTRY+0x48>
// 2b: 49 89 d7                      movq    %rdx, %r15
// 2e: 41 8b 45 00                   movl    (%r13), %eax
// 32: ff c0                         incl    %eax
// 34: 75 3f                         jne     0x75 <_JIT_ENTRY+0x75>
// 36: 49 8b 04 24                   movq    (%r12), %rax
// 3a: 48 85 c0                      testq   %rax, %rax
// 3d: 7e 4f                         jle     0x8e <_JIT_ENTRY+0x8e>
// 3f: 85 c0                         testl   %eax, %eax
// 41: 79 71                         jns     0xb4 <_JIT_ENTRY+0xb4>
// 43: e9 8d 00 00 00                jmp     0xd5 <_JIT_ENTRY+0xd5>
// 48: 49 29 de                      subq    %rbx, %r14
// 4b: 49 83 c6 b8                   addq    $-0x48, %r14
// 4f: 49 c1 ee 03                   shrq    $0x3, %r14
// 53: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 57: 48 8b 03                      movq    (%rbx), %rax
// 5a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005c:  R_X86_64_64  _JIT_TARGET
// 64: 89 c9                         movl    %ecx, %ecx
// 66: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 6a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 70: e9 03 02 00 00                jmp     0x278 <_JIT_ENTRY+0x278>
// 75: 41 89 45 00                   movl    %eax, (%r13)
// 79: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007b:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 83: ff d0                         callq   *%rax
// 85: 49 8b 04 24                   movq    (%r12), %rax
// 89: 48 85 c0                      testq   %rax, %rax
// 8c: 7f b1                         jg      0x3f <_JIT_ENTRY+0x3f>
// 8e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000090:  R_X86_64_64  .rodata.str1.1
// 98: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009a:  R_X86_64_64  _Py_NegativeRefcount
// a2: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a7: 4c 89 e2                      movq    %r12, %rdx
// aa: ff d0                         callq   *%rax
// ac: 49 8b 04 24                   movq    (%r12), %rax
// b0: 85 c0                         testl   %eax, %eax
// b2: 78 21                         js      0xd5 <_JIT_ENTRY+0xd5>
// b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// be: ff d0                         callq   *%rax
// c0: 49 ff 0c 24                   decq    (%r12)
// c4: 75 0f                         jne     0xd5 <_JIT_ENTRY+0xd5>
// c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c8:  R_X86_64_64  _Py_Dealloc
// d0: 4c 89 e7                      movq    %r12, %rdi
// d3: ff d0                         callq   *%rax
// d5: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000db:  R_X86_64_64  _JIT_OPARG
// e3: a8 01                         testb   $0x1, %al
// e5: 74 07                         je      0xee <_JIT_ENTRY+0xee>
// e7: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// ee: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000000f0:  R_X86_64_64  _JIT_OPARG
// f8: 41 0f b7 c5                   movzwl  %r13w, %eax
// fc: 41 83 e5 01                   andl    $0x1, %r13d
// 100: 4f 8b 64 ee f8                movq    -0x8(%r14,%r13,8), %r12
// 105: 48 8b 0b                      movq    (%rbx), %rcx
// 108: 48 8b 7b 28                   movq    0x28(%rbx), %rdi
// 10c: 48 8b 49 20                   movq    0x20(%rcx), %rcx
// 110: 48 8b 4c c1 18                movq    0x18(%rcx,%rax,8), %rcx
// 115: 48 85 ff                      testq   %rdi, %rdi
// 118: 74 1c                         je      0x136 <_JIT_ENTRY+0x136>
// 11a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011c:  R_X86_64_64  PyDict_Type
// 124: 48 39 47 08                   cmpq    %rax, 0x8(%rdi)
// 128: 74 4f                         je      0x179 <_JIT_ENTRY+0x179>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  PyObject_SetItem
// 134: eb 4d                         jmp     0x183 <_JIT_ENTRY+0x183>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyExc_SystemError
// 140: 48 8b 30                      movq    (%rax), %rsi
// 143: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000145:  R_X86_64_64  .rodata.str1.1+0x39
// 14d: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000014f:  R_X86_64_64  _PyErr_Format
// 157: 4c 89 ff                      movq    %r15, %rdi
// 15a: 31 c0                         xorl    %eax, %eax
// 15c: 41 ff d0                      callq   *%r8
// 15f: 49 8b 04 24                   movq    (%r12), %rax
// 163: 48 85 c0                      testq   %rax, %rax
// 166: 0f 8e 98 00 00 00             jle     0x204 <_JIT_ENTRY+0x204>
// 16c: 85 c0                         testl   %eax, %eax
// 16e: 0f 89 b6 00 00 00             jns     0x22a <_JIT_ENTRY+0x22a>
// 174: e9 eb 00 00 00                jmp     0x264 <_JIT_ENTRY+0x264>
// 179: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017b:  R_X86_64_64  PyDict_SetItem
// 183: 48 89 ce                      movq    %rcx, %rsi
// 186: 4c 89 e2                      movq    %r12, %rdx
// 189: ff d0                         callq   *%rax
// 18b: 89 c5                         movl    %eax, %ebp
// 18d: 49 8b 04 24                   movq    (%r12), %rax
// 191: 48 85 c0                      testq   %rax, %rax
// 194: 7e 06                         jle     0x19c <_JIT_ENTRY+0x19c>
// 196: 85 c0                         testl   %eax, %eax
// 198: 79 28                         jns     0x1c2 <_JIT_ENTRY+0x1c2>
// 19a: eb 38                         jmp     0x1d4 <_JIT_ENTRY+0x1d4>
// 19c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000019e:  R_X86_64_64  .rodata.str1.1
// 1a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a8:  R_X86_64_64  _Py_NegativeRefcount
// 1b0: be 54 03 00 00                movl    $0x354, %esi            # imm = 0x354
// 1b5: 4c 89 e2                      movq    %r12, %rdx
// 1b8: ff d0                         callq   *%rax
// 1ba: 49 8b 04 24                   movq    (%r12), %rax
// 1be: 85 c0                         testl   %eax, %eax
// 1c0: 78 12                         js      0x1d4 <_JIT_ENTRY+0x1d4>
// 1c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1cc: ff d0                         callq   *%rax
// 1ce: 49 ff 0c 24                   decq    (%r12)
// 1d2: 74 79                         je      0x24d <_JIT_ENTRY+0x24d>
// 1d4: 85 ed                         testl   %ebp, %ebp
// 1d6: 0f 85 88 00 00 00             jne     0x264 <_JIT_ENTRY+0x264>
// 1dc: 4b 8d 34 ee                   leaq    (%r14,%r13,8), %rsi
// 1e0: 48 83 c6 f8                   addq    $-0x8, %rsi
// 1e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e6:  R_X86_64_64  _JIT_CONTINUE
// 1ee: 48 89 df                      movq    %rbx, %rdi
// 1f1: 4c 89 fa                      movq    %r15, %rdx
// 1f4: 48 83 c4 08                   addq    $0x8, %rsp
// 1f8: 5b                            popq    %rbx
// 1f9: 41 5c                         popq    %r12
// 1fb: 41 5d                         popq    %r13
// 1fd: 41 5e                         popq    %r14
// 1ff: 41 5f                         popq    %r15
// 201: 5d                            popq    %rbp
// 202: ff e0                         jmpq    *%rax
// 204: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000206:  R_X86_64_64  .rodata.str1.1
// 20e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000210:  R_X86_64_64  _Py_NegativeRefcount
// 218: be 4d 03 00 00                movl    $0x34d, %esi            # imm = 0x34D
// 21d: 4c 89 e2                      movq    %r12, %rdx
// 220: ff d0                         callq   *%rax
// 222: 49 8b 04 24                   movq    (%r12), %rax
// 226: 85 c0                         testl   %eax, %eax
// 228: 78 3a                         js      0x264 <_JIT_ENTRY+0x264>
// 22a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 234: ff d0                         callq   *%rax
// 236: 49 ff 0c 24                   decq    (%r12)
// 23a: 75 28                         jne     0x264 <_JIT_ENTRY+0x264>
// 23c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023e:  R_X86_64_64  _Py_Dealloc
// 246: 4c 89 e7                      movq    %r12, %rdi
// 249: ff d0                         callq   *%rax
// 24b: eb 17                         jmp     0x264 <_JIT_ENTRY+0x264>
// 24d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024f:  R_X86_64_64  _Py_Dealloc
// 257: 4c 89 e7                      movq    %r12, %rdi
// 25a: ff d0                         callq   *%rax
// 25c: 85 ed                         testl   %ebp, %ebp
// 25e: 0f 84 78 ff ff ff             je      0x1dc <_JIT_ENTRY+0x1dc>
// 264: 4b 8d 04 ee                   leaq    (%r14,%r13,8), %rax
// 268: 48 29 d8                      subq    %rbx, %rax
// 26b: 48 83 c0 b0                   addq    $-0x50, %rax
// 26f: 48 c1 e8 03                   shrq    $0x3, %rax
// 273: 89 43 40                      movl    %eax, 0x40(%rbx)
// 276: 31 c0                         xorl    %eax, %eax
// 278: 48 83 c4 08                   addq    $0x8, %rsp
// 27c: 5b                            popq    %rbx
// 27d: 41 5c                         popq    %r12
// 27f: 41 5d                         popq    %r13
// 281: 41 5e                         popq    %r14
// 283: 41 5f                         popq    %r15
// 285: 5d                            popq    %rbp
// 286: c3                            retq
// 287: 
static const unsigned char _LOAD_ATTR_SLOTplus_STORE_NAME_code_body[648] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1d, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x3f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4f, 0x85, 0xc0, 0x79, 0x71, 0xe9, 0x8d, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x03, 0x02, 0x00, 0x00, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x0f, 0xb7, 0xc5, 0x41, 0x83, 0xe5, 0x01, 0x4f, 0x8b, 0x64, 0xee, 0xf8, 0x48, 0x8b, 0x0b, 0x48, 0x8b, 0x7b, 0x28, 0x48, 0x8b, 0x49, 0x20, 0x48, 0x8b, 0x4c, 0xc1, 0x18, 0x48, 0x85, 0xff, 0x74, 0x1c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x47, 0x08, 0x74, 0x4f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x4d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x98, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xb6, 0x00, 0x00, 0x00, 0xe9, 0xeb, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xce, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x54, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x79, 0x85, 0xed, 0x0f, 0x85, 0x88, 0x00, 0x00, 0x00, 0x4b, 0x8d, 0x34, 0xee, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4d, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x3a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xeb, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x84, 0x78, 0xff, 0xff, 0xff, 0x4b, 0x8d, 0x04, 0xee, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb0, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _LOAD_ATTR_SLOTplus_STORE_NAME_code_holes[25] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x90, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xc8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xdb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x11c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_SetItem, 0x0},
    {0x19e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1a8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1e6, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x206, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x210, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x22c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00no locals found when storing %R\x00'
// 59: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_STORE_NAME_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x25, 0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_STORE_NAME_data_holes[1];

// _LOAD_ATTR_SLOTplus_STORE_SLICE
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_STORE_SLICE.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 fe                      movq    %rdi, %r14
// 14: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 18: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001a:  R_X86_64_64  _JIT_OPERAND
// 22: 0f b7 c0                      movzwl  %ax, %eax
// 25: 49 8b 1c 04                   movq    (%r12,%rax), %rbx
// 29: 48 85 db                      testq   %rbx, %rbx
// 2c: 74 1b                         je      0x49 <_JIT_ENTRY+0x49>
// 2e: 49 89 d5                      movq    %rdx, %r13
// 31: 8b 03                         movl    (%rbx), %eax
// 33: ff c0                         incl    %eax
// 35: 75 3f                         jne     0x76 <_JIT_ENTRY+0x76>
// 37: 49 8b 04 24                   movq    (%r12), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 4d                         jle     0x8d <_JIT_ENTRY+0x8d>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 6f                         jns     0xb3 <_JIT_ENTRY+0xb3>
// 44: e9 8b 00 00 00                jmp     0xd4 <_JIT_ENTRY+0xd4>
// 49: 4d 29 f7                      subq    %r14, %r15
// 4c: 49 83 c7 b8                   addq    $-0x48, %r15
// 50: 49 c1 ef 03                   shrq    $0x3, %r15
// 54: 45 89 7e 40                   movl    %r15d, 0x40(%r14)
// 58: 49 8b 06                      movq    (%r14), %rax
// 5b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005d:  R_X86_64_64  _JIT_TARGET
// 65: 89 c9                         movl    %ecx, %ecx
// 67: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 6b: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 71: e9 43 02 00 00                jmp     0x2b9 <_JIT_ENTRY+0x2b9>
// 76: 89 03                         movl    %eax, (%rbx)
// 78: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007a:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 82: ff d0                         callq   *%rax
// 84: 49 8b 04 24                   movq    (%r12), %rax
// 88: 48 85 c0                      testq   %rax, %rax
// 8b: 7f b3                         jg      0x40 <_JIT_ENTRY+0x40>
// 8d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008f:  R_X86_64_64  .rodata.str1.1
// 97: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000099:  R_X86_64_64  _Py_NegativeRefcount
// a1: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a6: 4c 89 e2                      movq    %r12, %rdx
// a9: ff d0                         callq   *%rax
// ab: 49 8b 04 24                   movq    (%r12), %rax
// af: 85 c0                         testl   %eax, %eax
// b1: 78 21                         js      0xd4 <_JIT_ENTRY+0xd4>
// b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bd: ff d0                         callq   *%rax
// bf: 49 ff 0c 24                   decq    (%r12)
// c3: 75 0f                         jne     0xd4 <_JIT_ENTRY+0xd4>
// c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c7:  R_X86_64_64  _Py_Dealloc
// cf: 4c 89 e7                      movq    %r12, %rdi
// d2: ff d0                         callq   *%rax
// d4: 4c 89 6c 24 08                movq    %r13, 0x8(%rsp)
// d9: 4c 89 74 24 10                movq    %r14, 0x10(%rsp)
// de: 49 89 5f f8                   movq    %rbx, -0x8(%r15)
// e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e4:  R_X86_64_64  _JIT_OPARG
// ec: a8 01                         testb   $0x1, %al
// ee: 74 07                         je      0xf7 <_JIT_ENTRY+0xf7>
// f0: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// f7: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000000f9:  R_X86_64_64  _JIT_OPARG
// 101: 83 e3 01                      andl    $0x1, %ebx
// 104: 49 8b 74 df f8                movq    -0x8(%r15,%rbx,8), %rsi
// 109: 49 8b 7c df f0                movq    -0x10(%r15,%rbx,8), %rdi
// 10e: 4d 8b 6c df e0                movq    -0x20(%r15,%rbx,8), %r13
// 113: 4d 8b 64 df e8                movq    -0x18(%r15,%rbx,8), %r12
// 118: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011a:  R_X86_64_64  _PyBuildSlice_ConsumeRefs
// 122: ff d0                         callq   *%rax
// 124: 48 85 c0                      testq   %rax, %rax
// 127: 74 2a                         je      0x153 <_JIT_ENTRY+0x153>
// 129: 48 89 c5                      movq    %rax, %rbp
// 12c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012e:  R_X86_64_64  PyObject_SetItem
// 136: 4c 89 e7                      movq    %r12, %rdi
// 139: 48 89 ee                      movq    %rbp, %rsi
// 13c: 4c 89 ea                      movq    %r13, %rdx
// 13f: ff d0                         callq   *%rax
// 141: 41 89 c6                      movl    %eax, %r14d
// 144: 48 8b 45 00                   movq    (%rbp), %rax
// 148: 48 85 c0                      testq   %rax, %rax
// 14b: 7e 13                         jle     0x160 <_JIT_ENTRY+0x160>
// 14d: 85 c0                         testl   %eax, %eax
// 14f: 79 35                         jns     0x186 <_JIT_ENTRY+0x186>
// 151: eb 54                         jmp     0x1a7 <_JIT_ENTRY+0x1a7>
// 153: 31 ed                         xorl    %ebp, %ebp
// 155: 49 8b 45 00                   movq    (%r13), %rax
// 159: 48 85 c0                      testq   %rax, %rax
// 15c: 7f 7b                         jg      0x1d9 <_JIT_ENTRY+0x1d9>
// 15e: eb 57                         jmp     0x1b7 <_JIT_ENTRY+0x1b7>
// 160: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000162:  R_X86_64_64  .rodata.str1.1
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_NegativeRefcount
// 174: be b2 01 00 00                movl    $0x1b2, %esi            # imm = 0x1B2
// 179: 48 89 ea                      movq    %rbp, %rdx
// 17c: ff d0                         callq   *%rax
// 17e: 48 8b 45 00                   movq    (%rbp), %rax
// 182: 85 c0                         testl   %eax, %eax
// 184: 78 21                         js      0x1a7 <_JIT_ENTRY+0x1a7>
// 186: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000188:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 190: ff d0                         callq   *%rax
// 192: 48 ff 4d 00                   decq    (%rbp)
// 196: 75 0f                         jne     0x1a7 <_JIT_ENTRY+0x1a7>
// 198: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019a:  R_X86_64_64  _Py_Dealloc
// 1a2: 48 89 ef                      movq    %rbp, %rdi
// 1a5: ff d0                         callq   *%rax
// 1a7: 45 85 f6                      testl   %r14d, %r14d
// 1aa: 40 0f 94 c5                   sete    %bpl
// 1ae: 49 8b 45 00                   movq    (%r13), %rax
// 1b2: 48 85 c0                      testq   %rax, %rax
// 1b5: 7f 22                         jg      0x1d9 <_JIT_ENTRY+0x1d9>
// 1b7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b9:  R_X86_64_64  .rodata.str1.1
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_NegativeRefcount
// 1cb: be b4 01 00 00                movl    $0x1b4, %esi            # imm = 0x1B4
// 1d0: 4c 89 ea                      movq    %r13, %rdx
// 1d3: ff d0                         callq   *%rax
// 1d5: 49 8b 45 00                   movq    (%r13), %rax
// 1d9: 85 c0                         testl   %eax, %eax
// 1db: 78 16                         js      0x1f3 <_JIT_ENTRY+0x1f3>
// 1dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001df:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e7: ff d0                         callq   *%rax
// 1e9: 49 ff 4d 00                   decq    (%r13)
// 1ed: 0f 84 80 00 00 00             je      0x273 <_JIT_ENTRY+0x273>
// 1f3: 49 8b 04 24                   movq    (%r12), %rax
// 1f7: 48 85 c0                      testq   %rax, %rax
// 1fa: 7f 22                         jg      0x21e <_JIT_ENTRY+0x21e>
// 1fc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001fe:  R_X86_64_64  .rodata.str1.1
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _Py_NegativeRefcount
// 210: be b5 01 00 00                movl    $0x1b5, %esi            # imm = 0x1B5
// 215: 4c 89 e2                      movq    %r12, %rdx
// 218: ff d0                         callq   *%rax
// 21a: 49 8b 04 24                   movq    (%r12), %rax
// 21e: 4d 8d 34 df                   leaq    (%r15,%rbx,8), %r14
// 222: 49 8d 1c df                   leaq    (%r15,%rbx,8), %rbx
// 226: 48 83 c3 e0                   addq    $-0x20, %rbx
// 22a: 85 c0                         testl   %eax, %eax
// 22c: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 231: 78 12                         js      0x245 <_JIT_ENTRY+0x245>
// 233: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000235:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 23d: ff d0                         callq   *%rax
// 23f: 49 ff 0c 24                   decq    (%r12)
// 243: 74 4b                         je      0x290 <_JIT_ENTRY+0x290>
// 245: 40 84 ed                      testb   %bpl, %bpl
// 248: 4c 0f 45 f3                   cmovneq %rbx, %r14
// 24c: 74 5a                         je      0x2a8 <_JIT_ENTRY+0x2a8>
// 24e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000250:  R_X86_64_64  _JIT_CONTINUE
// 258: 4c 89 ff                      movq    %r15, %rdi
// 25b: 4c 89 f6                      movq    %r14, %rsi
// 25e: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 263: 48 83 c4 18                   addq    $0x18, %rsp
// 267: 5b                            popq    %rbx
// 268: 41 5c                         popq    %r12
// 26a: 41 5d                         popq    %r13
// 26c: 41 5e                         popq    %r14
// 26e: 41 5f                         popq    %r15
// 270: 5d                            popq    %rbp
// 271: ff e0                         jmpq    *%rax
// 273: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000275:  R_X86_64_64  _Py_Dealloc
// 27d: 4c 89 ef                      movq    %r13, %rdi
// 280: ff d0                         callq   *%rax
// 282: 49 8b 04 24                   movq    (%r12), %rax
// 286: 48 85 c0                      testq   %rax, %rax
// 289: 7f 93                         jg      0x21e <_JIT_ENTRY+0x21e>
// 28b: e9 6c ff ff ff                jmp     0x1fc <_JIT_ENTRY+0x1fc>
// 290: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000292:  R_X86_64_64  _Py_Dealloc
// 29a: 4c 89 e7                      movq    %r12, %rdi
// 29d: ff d0                         callq   *%rax
// 29f: 40 84 ed                      testb   %bpl, %bpl
// 2a2: 4c 0f 45 f3                   cmovneq %rbx, %r14
// 2a6: 75 a6                         jne     0x24e <_JIT_ENTRY+0x24e>
// 2a8: 4d 29 fe                      subq    %r15, %r14
// 2ab: 49 83 c6 98                   addq    $-0x68, %r14
// 2af: 49 c1 ee 03                   shrq    $0x3, %r14
// 2b3: 45 89 77 40                   movl    %r14d, 0x40(%r15)
// 2b7: 31 c0                         xorl    %eax, %eax
// 2b9: 48 83 c4 18                   addq    $0x18, %rsp
// 2bd: 5b                            popq    %rbx
// 2be: 41 5c                         popq    %r12
// 2c0: 41 5d                         popq    %r13
// 2c2: 41 5e                         popq    %r14
// 2c4: 41 5f                         popq    %r15
// 2c6: 5d                            popq    %rbp
// 2c7: c3                            retq
// 2c8: 
static const unsigned char _LOAD_ATTR_SLOTplus_STORE_SLICE_code_body[713] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8b, 0x1c, 0x04, 0x48, 0x85, 0xdb, 0x74, 0x1b, 0x49, 0x89, 0xd5, 0x8b, 0x03, 0xff, 0xc0, 0x75, 0x3f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4d, 0x85, 0xc0, 0x79, 0x6f, 0xe9, 0x8b, 0x00, 0x00, 0x00, 0x4d, 0x29, 0xf7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x43, 0x02, 0x00, 0x00, 0x89, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x6c, 0x24, 0x08, 0x4c, 0x89, 0x74, 0x24, 0x10, 0x49, 0x89, 0x5f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe3, 0x01, 0x49, 0x8b, 0x74, 0xdf, 0xf8, 0x49, 0x8b, 0x7c, 0xdf, 0xf0, 0x4d, 0x8b, 0x6c, 0xdf, 0xe0, 0x4d, 0x8b, 0x64, 0xdf, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x2a, 0x48, 0x89, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x41, 0x89, 0xc6, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x13, 0x85, 0xc0, 0x79, 0x35, 0xeb, 0x54, 0x31, 0xed, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x7b, 0xeb, 0x57, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb2, 0x01, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x45, 0x85, 0xf6, 0x40, 0x0f, 0x94, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb4, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x80, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb5, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x34, 0xdf, 0x49, 0x8d, 0x1c, 0xdf, 0x48, 0x83, 0xc3, 0xe0, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x4b, 0x40, 0x84, 0xed, 0x4c, 0x0f, 0x45, 0xf3, 0x74, 0x5a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x93, 0xe9, 0x6c, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x40, 0x84, 0xed, 0x4c, 0x0f, 0x45, 0xf3, 0x75, 0xa6, 0x4d, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0x98, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x77, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _LOAD_ATTR_SLOTplus_STORE_SLICE_code_holes[25] = {
    {0x1a, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5d, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x99, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xc7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xe4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x11a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyBuildSlice_ConsumeRefs, 0x0},
    {0x12e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x19a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1df, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fe, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x275, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x292, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_STORE_SLICE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_STORE_SLICE_data_holes[1];

// _LOAD_ATTR_SLOTplus_STORE_SUBSCR
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_STORE_SUBSCR.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 18: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001a:  R_X86_64_64  _JIT_OPERAND
// 22: 0f b7 c0                      movzwl  %ax, %eax
// 25: 4d 8b 34 04                   movq    (%r12,%rax), %r14
// 29: 4d 85 f6                      testq   %r14, %r14
// 2c: 74 1e                         je      0x4c <_JIT_ENTRY+0x4c>
// 2e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 33: 41 8b 06                      movl    (%r14), %eax
// 36: ff c0                         incl    %eax
// 38: 75 3f                         jne     0x79 <_JIT_ENTRY+0x79>
// 3a: 49 8b 04 24                   movq    (%r12), %rax
// 3e: 48 85 c0                      testq   %rax, %rax
// 41: 7e 4e                         jle     0x91 <_JIT_ENTRY+0x91>
// 43: 85 c0                         testl   %eax, %eax
// 45: 79 70                         jns     0xb7 <_JIT_ENTRY+0xb7>
// 47: e9 81 00 00 00                jmp     0xcd <_JIT_ENTRY+0xcd>
// 4c: 49 29 df                      subq    %rbx, %r15
// 4f: 49 83 c7 b8                   addq    $-0x48, %r15
// 53: 49 c1 ef 03                   shrq    $0x3, %r15
// 57: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 5b: 48 8b 03                      movq    (%rbx), %rax
// 5e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000060:  R_X86_64_64  _JIT_TARGET
// 68: 89 c9                         movl    %ecx, %ecx
// 6a: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 6e: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 74: e9 02 02 00 00                jmp     0x27b <_JIT_ENTRY+0x27b>
// 79: 41 89 06                      movl    %eax, (%r14)
// 7c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007e:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 86: ff d0                         callq   *%rax
// 88: 49 8b 04 24                   movq    (%r12), %rax
// 8c: 48 85 c0                      testq   %rax, %rax
// 8f: 7f b2                         jg      0x43 <_JIT_ENTRY+0x43>
// 91: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000093:  R_X86_64_64  .rodata.str1.1
// 9b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009d:  R_X86_64_64  _Py_NegativeRefcount
// a5: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// aa: 4c 89 e2                      movq    %r12, %rdx
// ad: ff d0                         callq   *%rax
// af: 49 8b 04 24                   movq    (%r12), %rax
// b3: 85 c0                         testl   %eax, %eax
// b5: 78 16                         js      0xcd <_JIT_ENTRY+0xcd>
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c1: ff d0                         callq   *%rax
// c3: 49 ff 0c 24                   decq    (%r12)
// c7: 0f 84 a1 00 00 00             je      0x16e <_JIT_ENTRY+0x16e>
// cd: 4d 89 77 f8                   movq    %r14, -0x8(%r15)
// d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d3:  R_X86_64_64  _JIT_OPARG
// db: a8 01                         testb   $0x1, %al
// dd: 74 07                         je      0xe6 <_JIT_ENTRY+0xe6>
// df: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// e6: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000000e8:  R_X86_64_64  _JIT_OPARG
// f0: 83 e5 01                      andl    $0x1, %ebp
// f3: 4d 8b 64 ef f8                movq    -0x8(%r15,%rbp,8), %r12
// f8: 4d 8b 74 ef e8                movq    -0x18(%r15,%rbp,8), %r14
// fd: 4d 8b 6c ef f0                movq    -0x10(%r15,%rbp,8), %r13
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  PyObject_SetItem
// 10c: 4c 89 ef                      movq    %r13, %rdi
// 10f: 4c 89 e6                      movq    %r12, %rsi
// 112: 4c 89 f2                      movq    %r14, %rdx
// 115: ff d0                         callq   *%rax
// 117: 89 44 24 0c                   movl    %eax, 0xc(%rsp)
// 11b: 49 8b 06                      movq    (%r14), %rax
// 11e: 48 85 c0                      testq   %rax, %rax
// 121: 7e 06                         jle     0x129 <_JIT_ENTRY+0x129>
// 123: 85 c0                         testl   %eax, %eax
// 125: 79 27                         jns     0x14e <_JIT_ENTRY+0x14e>
// 127: eb 36                         jmp     0x15f <_JIT_ENTRY+0x15f>
// 129: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000012b:  R_X86_64_64  .rodata.str1.1
// 133: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000135:  R_X86_64_64  _Py_NegativeRefcount
// 13d: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 142: 4c 89 f2                      movq    %r14, %rdx
// 145: ff d0                         callq   *%rax
// 147: 49 8b 06                      movq    (%r14), %rax
// 14a: 85 c0                         testl   %eax, %eax
// 14c: 78 11                         js      0x15f <_JIT_ENTRY+0x15f>
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 158: ff d0                         callq   *%rax
// 15a: 49 ff 0e                      decq    (%r14)
// 15d: 74 39                         je      0x198 <_JIT_ENTRY+0x198>
// 15f: 49 8b 45 00                   movq    (%r13), %rax
// 163: 48 85 c0                      testq   %rax, %rax
// 166: 7e 48                         jle     0x1b0 <_JIT_ENTRY+0x1b0>
// 168: 85 c0                         testl   %eax, %eax
// 16a: 79 6a                         jns     0x1d6 <_JIT_ENTRY+0x1d6>
// 16c: eb 7a                         jmp     0x1e8 <_JIT_ENTRY+0x1e8>
// 16e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000170:  R_X86_64_64  _Py_Dealloc
// 178: 4c 89 e7                      movq    %r12, %rdi
// 17b: ff d0                         callq   *%rax
// 17d: 4d 89 77 f8                   movq    %r14, -0x8(%r15)
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  _JIT_OPARG
// 18b: a8 01                         testb   $0x1, %al
// 18d: 0f 85 4c ff ff ff             jne     0xdf <_JIT_ENTRY+0xdf>
// 193: e9 4e ff ff ff                jmp     0xe6 <_JIT_ENTRY+0xe6>
// 198: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019a:  R_X86_64_64  _Py_Dealloc
// 1a2: 4c 89 f7                      movq    %r14, %rdi
// 1a5: ff d0                         callq   *%rax
// 1a7: 49 8b 45 00                   movq    (%r13), %rax
// 1ab: 48 85 c0                      testq   %rax, %rax
// 1ae: 7f b8                         jg      0x168 <_JIT_ENTRY+0x168>
// 1b0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b2:  R_X86_64_64  .rodata.str1.1
// 1ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bc:  R_X86_64_64  _Py_NegativeRefcount
// 1c4: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// 1c9: 4c 89 ea                      movq    %r13, %rdx
// 1cc: ff d0                         callq   *%rax
// 1ce: 49 8b 45 00                   movq    (%r13), %rax
// 1d2: 85 c0                         testl   %eax, %eax
// 1d4: 78 12                         js      0x1e8 <_JIT_ENTRY+0x1e8>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e0: ff d0                         callq   *%rax
// 1e2: 49 ff 4d 00                   decq    (%r13)
// 1e6: 74 1b                         je      0x203 <_JIT_ENTRY+0x203>
// 1e8: 49 8b 04 24                   movq    (%r12), %rax
// 1ec: 48 85 c0                      testq   %rax, %rax
// 1ef: 7e 2a                         jle     0x21b <_JIT_ENTRY+0x21b>
// 1f1: 4d 8d 34 ef                   leaq    (%r15,%rbp,8), %r14
// 1f5: 4d 8d 3c ef                   leaq    (%r15,%rbp,8), %r15
// 1f9: 49 83 c7 e8                   addq    $-0x18, %r15
// 1fd: 85 c0                         testl   %eax, %eax
// 1ff: 79 4c                         jns     0x24d <_JIT_ENTRY+0x24d>
// 201: eb 5c                         jmp     0x25f <_JIT_ENTRY+0x25f>
// 203: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000205:  R_X86_64_64  _Py_Dealloc
// 20d: 4c 89 ef                      movq    %r13, %rdi
// 210: ff d0                         callq   *%rax
// 212: 49 8b 04 24                   movq    (%r12), %rax
// 216: 48 85 c0                      testq   %rax, %rax
// 219: 7f d6                         jg      0x1f1 <_JIT_ENTRY+0x1f1>
// 21b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000021d:  R_X86_64_64  .rodata.str1.1
// 225: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000227:  R_X86_64_64  _Py_NegativeRefcount
// 22f: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 234: 4c 89 e2                      movq    %r12, %rdx
// 237: ff d0                         callq   *%rax
// 239: 49 8b 04 24                   movq    (%r12), %rax
// 23d: 4d 8d 34 ef                   leaq    (%r15,%rbp,8), %r14
// 241: 4d 8d 3c ef                   leaq    (%r15,%rbp,8), %r15
// 245: 49 83 c7 e8                   addq    $-0x18, %r15
// 249: 85 c0                         testl   %eax, %eax
// 24b: 78 12                         js      0x25f <_JIT_ENTRY+0x25f>
// 24d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 257: ff d0                         callq   *%rax
// 259: 49 ff 0c 24                   decq    (%r12)
// 25d: 74 2b                         je      0x28a <_JIT_ENTRY+0x28a>
// 25f: 83 7c 24 0c 00                cmpl    $0x0, 0xc(%rsp)
// 264: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 268: 74 3a                         je      0x2a4 <_JIT_ENTRY+0x2a4>
// 26a: 49 29 de                      subq    %rbx, %r14
// 26d: 49 83 c6 a0                   addq    $-0x60, %r14
// 271: 49 c1 ee 03                   shrq    $0x3, %r14
// 275: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 279: 31 c0                         xorl    %eax, %eax
// 27b: 48 83 c4 18                   addq    $0x18, %rsp
// 27f: 5b                            popq    %rbx
// 280: 41 5c                         popq    %r12
// 282: 41 5d                         popq    %r13
// 284: 41 5e                         popq    %r14
// 286: 41 5f                         popq    %r15
// 288: 5d                            popq    %rbp
// 289: c3                            retq
// 28a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028c:  R_X86_64_64  _Py_Dealloc
// 294: 4c 89 e7                      movq    %r12, %rdi
// 297: ff d0                         callq   *%rax
// 299: 83 7c 24 0c 00                cmpl    $0x0, 0xc(%rsp)
// 29e: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 2a2: 75 c6                         jne     0x26a <_JIT_ENTRY+0x26a>
// 2a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a6:  R_X86_64_64  _JIT_CONTINUE
// 2ae: 48 89 df                      movq    %rbx, %rdi
// 2b1: 4c 89 f6                      movq    %r14, %rsi
// 2b4: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 2b9: 48 83 c4 18                   addq    $0x18, %rsp
// 2bd: 5b                            popq    %rbx
// 2be: 41 5c                         popq    %r12
// 2c0: 41 5d                         popq    %r13
// 2c2: 41 5e                         popq    %r14
// 2c4: 41 5f                         popq    %r15
// 2c6: 5d                            popq    %rbp
// 2c7: ff e0                         jmpq    *%rax
// 2c9: 
static const unsigned char _LOAD_ATTR_SLOTplus_STORE_SUBSCR_code_body[714] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x34, 0x04, 0x4d, 0x85, 0xf6, 0x74, 0x1e, 0x48, 0x89, 0x54, 0x24, 0x10, 0x41, 0x8b, 0x06, 0xff, 0xc0, 0x75, 0x3f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4e, 0x85, 0xc0, 0x79, 0x70, 0xe9, 0x81, 0x00, 0x00, 0x00, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x02, 0x02, 0x00, 0x00, 0x41, 0x89, 0x06, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xa1, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x77, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe5, 0x01, 0x4d, 0x8b, 0x64, 0xef, 0xf8, 0x4d, 0x8b, 0x74, 0xef, 0xe8, 0x4d, 0x8b, 0x6c, 0xef, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x89, 0x44, 0x24, 0x0c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x39, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x48, 0x85, 0xc0, 0x79, 0x6a, 0xeb, 0x7a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x77, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x4c, 0xff, 0xff, 0xff, 0xe9, 0x4e, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xb8, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x1b, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x2a, 0x4d, 0x8d, 0x34, 0xef, 0x4d, 0x8d, 0x3c, 0xef, 0x49, 0x83, 0xc7, 0xe8, 0x85, 0xc0, 0x79, 0x4c, 0xeb, 0x5c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xd6, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x34, 0xef, 0x4d, 0x8d, 0x3c, 0xef, 0x49, 0x83, 0xc7, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2b, 0x83, 0x7c, 0x24, 0x0c, 0x00, 0x4d, 0x0f, 0x44, 0xf7, 0x74, 0x3a, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xa0, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x83, 0x7c, 0x24, 0x0c, 0x00, 0x4d, 0x0f, 0x44, 0xf7, 0x75, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_ATTR_SLOTplus_STORE_SUBSCR_code_holes[25] = {
    {0x1a, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x60, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x93, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xe8, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x170, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x19a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x205, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x227, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x24f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x28c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2a6, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_STORE_SUBSCR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_STORE_SUBSCR_data_holes[1];

// _LOAD_ATTR_SLOTplus_STORE_SUBSCR_DICT
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_STORE_SUBSCR_DICT.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f7                      movq    %rsi, %r15
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 26: 4d 85 ed                      testq   %r13, %r13
// 29: 0f 84 bd 00 00 00             je      0xec <_JIT_ENTRY+0xec>
// 2f: 48 89 d5                      movq    %rdx, %rbp
// 32: 41 8b 45 00                   movl    (%r13), %eax
// 36: ff c0                         incl    %eax
// 38: 75 0f                         jne     0x49 <_JIT_ENTRY+0x49>
// 3a: 49 8b 04 24                   movq    (%r12), %rax
// 3e: 48 85 c0                      testq   %rax, %rax
// 41: 7e 1f                         jle     0x62 <_JIT_ENTRY+0x62>
// 43: 85 c0                         testl   %eax, %eax
// 45: 79 41                         jns     0x88 <_JIT_ENTRY+0x88>
// 47: eb 60                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 49: 41 89 45 00                   movl    %eax, (%r13)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 57: ff d0                         callq   *%rax
// 59: 49 8b 04 24                   movq    (%r12), %rax
// 5d: 48 85 c0                      testq   %rax, %rax
// 60: 7f e1                         jg      0x43 <_JIT_ENTRY+0x43>
// 62: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000064:  R_X86_64_64  .rodata.str1.1
// 6c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006e:  R_X86_64_64  _Py_NegativeRefcount
// 76: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 7b: 4c 89 e2                      movq    %r12, %rdx
// 7e: ff d0                         callq   *%rax
// 80: 49 8b 04 24                   movq    (%r12), %rax
// 84: 85 c0                         testl   %eax, %eax
// 86: 78 21                         js      0xa9 <_JIT_ENTRY+0xa9>
// 88: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 92: ff d0                         callq   *%rax
// 94: 49 ff 0c 24                   decq    (%r12)
// 98: 75 0f                         jne     0xa9 <_JIT_ENTRY+0xa9>
// 9a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009c:  R_X86_64_64  _Py_Dealloc
// a4: 4c 89 e7                      movq    %r12, %rdi
// a7: ff d0                         callq   *%rax
// a9: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _JIT_OPARG
// b7: a8 01                         testb   $0x1, %al
// b9: 74 07                         je      0xc2 <_JIT_ENTRY+0xc2>
// bb: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// c2: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 00000000000000c4:  R_X86_64_64  _JIT_OPARG
// cc: 41 83 e6 01                   andl    $0x1, %r14d
// d0: 4f 8d 24 f7                   leaq    (%r15,%r14,8), %r12
// d4: 4f 8b 6c f7 f0                movq    -0x10(%r15,%r14,8), %r13
// d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000db:  R_X86_64_64  PyDict_Type
// e3: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// e7: 74 3a                         je      0x123 <_JIT_ENTRY+0x123>
// e9: 4d 89 e7                      movq    %r12, %r15
// ec: 49 29 df                      subq    %rbx, %r15
// ef: 49 83 c7 b8                   addq    $-0x48, %r15
// f3: 49 c1 ef 03                   shrq    $0x3, %r15
// f7: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// fb: 48 8b 03                      movq    (%rbx), %rax
// fe: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000100:  R_X86_64_64  _JIT_TARGET
// 108: 89 c9                         movl    %ecx, %ecx
// 10a: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 10e: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 114: 48 83 c4 08                   addq    $0x8, %rsp
// 118: 5b                            popq    %rbx
// 119: 41 5c                         popq    %r12
// 11b: 41 5d                         popq    %r13
// 11d: 41 5e                         popq    %r14
// 11f: 41 5f                         popq    %r15
// 121: 5d                            popq    %rbp
// 122: c3                            retq
// 123: 48 89 2c 24                   movq    %rbp, (%rsp)
// 127: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000129:  R_X86_64_64  _JIT_OPARG
// 131: 83 e0 01                      andl    $0x1, %eax
// 134: 49 8b 54 c7 e8                movq    -0x18(%r15,%rax,8), %rdx
// 139: 49 8b 74 c7 f8                movq    -0x8(%r15,%rax,8), %rsi
// 13e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000140:  R_X86_64_64  _PyDict_SetItem_Take2
// 148: 4c 89 ef                      movq    %r13, %rdi
// 14b: ff d0                         callq   *%rax
// 14d: 89 c5                         movl    %eax, %ebp
// 14f: 49 8b 45 00                   movq    (%r13), %rax
// 153: 48 85 c0                      testq   %rax, %rax
// 156: 7e 0e                         jle     0x166 <_JIT_ENTRY+0x166>
// 158: 4f 8d 34 f7                   leaq    (%r15,%r14,8), %r14
// 15c: 49 83 c6 e8                   addq    $-0x18, %r14
// 160: 85 c0                         testl   %eax, %eax
// 162: 79 30                         jns     0x194 <_JIT_ENTRY+0x194>
// 164: eb 40                         jmp     0x1a6 <_JIT_ENTRY+0x1a6>
// 166: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000168:  R_X86_64_64  .rodata.str1.1
// 170: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000172:  R_X86_64_64  _Py_NegativeRefcount
// 17a: be 63 02 00 00                movl    $0x263, %esi            # imm = 0x263
// 17f: 4c 89 ea                      movq    %r13, %rdx
// 182: ff d0                         callq   *%rax
// 184: 49 8b 45 00                   movq    (%r13), %rax
// 188: 4f 8d 34 f7                   leaq    (%r15,%r14,8), %r14
// 18c: 49 83 c6 e8                   addq    $-0x18, %r14
// 190: 85 c0                         testl   %eax, %eax
// 192: 78 12                         js      0x1a6 <_JIT_ENTRY+0x1a6>
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 19e: ff d0                         callq   *%rax
// 1a0: 49 ff 4d 00                   decq    (%r13)
// 1a4: 74 1e                         je      0x1c4 <_JIT_ENTRY+0x1c4>
// 1a6: 85 ed                         testl   %ebp, %ebp
// 1a8: 4d 0f 44 e6                   cmoveq  %r14, %r12
// 1ac: 74 2d                         je      0x1db <_JIT_ENTRY+0x1db>
// 1ae: 49 29 dc                      subq    %rbx, %r12
// 1b1: 49 83 c4 a0                   addq    $-0x60, %r12
// 1b5: 49 c1 ec 03                   shrq    $0x3, %r12
// 1b9: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 1bd: 31 c0                         xorl    %eax, %eax
// 1bf: e9 50 ff ff ff                jmp     0x114 <_JIT_ENTRY+0x114>
// 1c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c6:  R_X86_64_64  _Py_Dealloc
// 1ce: 4c 89 ef                      movq    %r13, %rdi
// 1d1: ff d0                         callq   *%rax
// 1d3: 85 ed                         testl   %ebp, %ebp
// 1d5: 4d 0f 44 e6                   cmoveq  %r14, %r12
// 1d9: 75 d3                         jne     0x1ae <_JIT_ENTRY+0x1ae>
// 1db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dd:  R_X86_64_64  _JIT_CONTINUE
// 1e5: 48 89 df                      movq    %rbx, %rdi
// 1e8: 4c 89 e6                      movq    %r12, %rsi
// 1eb: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ef: 48 83 c4 08                   addq    $0x8, %rsp
// 1f3: 5b                            popq    %rbx
// 1f4: 41 5c                         popq    %r12
// 1f6: 41 5d                         popq    %r13
// 1f8: 41 5e                         popq    %r14
// 1fa: 41 5f                         popq    %r15
// 1fc: 5d                            popq    %rbp
// 1fd: ff e0                         jmpq    *%rax
// 1ff: 
static const unsigned char _LOAD_ATTR_SLOTplus_STORE_SUBSCR_DICT_code_body[512] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xbd, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd5, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1f, 0x85, 0xc0, 0x79, 0x41, 0xeb, 0x60, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x83, 0xe6, 0x01, 0x4f, 0x8d, 0x24, 0xf7, 0x4f, 0x8b, 0x6c, 0xf7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x74, 0x3a, 0x4d, 0x89, 0xe7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x2c, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8b, 0x54, 0xc7, 0xe8, 0x49, 0x8b, 0x74, 0xc7, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x0e, 0x4f, 0x8d, 0x34, 0xf7, 0x49, 0x83, 0xc6, 0xe8, 0x85, 0xc0, 0x79, 0x30, 0xeb, 0x40, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x63, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x4f, 0x8d, 0x34, 0xf7, 0x49, 0x83, 0xc6, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x1e, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xe6, 0x74, 0x2d, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xa0, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x50, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xe6, 0x75, 0xd3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_ATTR_SLOTplus_STORE_SUBSCR_DICT_code_holes[18] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x64, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xc4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xdb, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x100, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x129, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x140, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_SetItem_Take2, 0x0},
    {0x168, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x172, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_STORE_SUBSCR_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_STORE_SUBSCR_DICT_data_holes[1];

// _LOAD_ATTR_SLOTplus_STORE_SUBSCR_LIST_INT
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_STORE_SUBSCR_LIST_INT.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f7                      movq    %rsi, %r15
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 26: 4d 85 ed                      testq   %r13, %r13
// 29: 74 1a                         je      0x45 <_JIT_ENTRY+0x45>
// 2b: 49 89 d6                      movq    %rdx, %r14
// 2e: 41 8b 45 00                   movl    (%r13), %eax
// 32: ff c0                         incl    %eax
// 34: 75 17                         jne     0x4d <_JIT_ENTRY+0x4d>
// 36: 49 8b 04 24                   movq    (%r12), %rax
// 3a: 48 85 c0                      testq   %rax, %rax
// 3d: 7e 27                         jle     0x66 <_JIT_ENTRY+0x66>
// 3f: 85 c0                         testl   %eax, %eax
// 41: 79 49                         jns     0x8c <_JIT_ENTRY+0x8c>
// 43: eb 68                         jmp     0xad <_JIT_ENTRY+0xad>
// 45: 4c 89 f8                      movq    %r15, %rax
// 48: e9 ea 01 00 00                jmp     0x237 <_JIT_ENTRY+0x237>
// 4d: 41 89 45 00                   movl    %eax, (%r13)
// 51: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000053:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 5b: ff d0                         callq   *%rax
// 5d: 49 8b 04 24                   movq    (%r12), %rax
// 61: 48 85 c0                      testq   %rax, %rax
// 64: 7f d9                         jg      0x3f <_JIT_ENTRY+0x3f>
// 66: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000068:  R_X86_64_64  .rodata.str1.1
// 70: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000072:  R_X86_64_64  _Py_NegativeRefcount
// 7a: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 7f: 4c 89 e2                      movq    %r12, %rdx
// 82: ff d0                         callq   *%rax
// 84: 49 8b 04 24                   movq    (%r12), %rax
// 88: 85 c0                         testl   %eax, %eax
// 8a: 78 21                         js      0xad <_JIT_ENTRY+0xad>
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 96: ff d0                         callq   *%rax
// 98: 49 ff 0c 24                   decq    (%r12)
// 9c: 75 0f                         jne     0xad <_JIT_ENTRY+0xad>
// 9e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a0:  R_X86_64_64  _Py_Dealloc
// a8: 4c 89 e7                      movq    %r12, %rdi
// ab: ff d0                         callq   *%rax
// ad: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b3:  R_X86_64_64  _JIT_OPARG
// bb: a8 01                         testb   $0x1, %al
// bd: 74 07                         je      0xc6 <_JIT_ENTRY+0xc6>
// bf: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// c6: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000000c8:  R_X86_64_64  _JIT_OPARG
// d0: 83 e5 01                      andl    $0x1, %ebp
// d3: 49 8d 04 ef                   leaq    (%r15,%rbp,8), %rax
// d7: 4d 8b 6c ef f8                movq    -0x8(%r15,%rbp,8), %r13
// dc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000de:  R_X86_64_64  PyLong_Type
// e6: 49 39 4d 08                   cmpq    %rcx, 0x8(%r13)
// ea: 0f 85 47 01 00 00             jne     0x237 <_JIT_ENTRY+0x237>
// f0: 4d 8b 64 ef f0                movq    -0x10(%r15,%rbp,8), %r12
// f5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000f7:  R_X86_64_64  PyList_Type
// ff: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 104: 0f 85 2d 01 00 00             jne     0x237 <_JIT_ENTRY+0x237>
// 10a: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 10f: 0f 87 22 01 00 00             ja      0x237 <_JIT_ENTRY+0x237>
// 115: 41 8b 4d 18                   movl    0x18(%r13), %ecx
// 119: 49 39 4c 24 10                cmpq    %rcx, 0x10(%r12)
// 11e: 0f 8e 13 01 00 00             jle     0x237 <_JIT_ENTRY+0x237>
// 124: 49 8b 44 ef e8                movq    -0x18(%r15,%rbp,8), %rax
// 129: 49 8b 74 24 18                movq    0x18(%r12), %rsi
// 12e: 48 8b 14 ce                   movq    (%rsi,%rcx,8), %rdx
// 132: 48 89 04 ce                   movq    %rax, (%rsi,%rcx,8)
// 136: 48 8b 02                      movq    (%rdx), %rax
// 139: 48 85 c0                      testq   %rax, %rax
// 13c: 7f 26                         jg      0x164 <_JIT_ENTRY+0x164>
// 13e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000140:  R_X86_64_64  .rodata.str1.1
// 148: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014a:  R_X86_64_64  _Py_NegativeRefcount
// 152: be 52 02 00 00                movl    $0x252, %esi            # imm = 0x252
// 157: 48 89 14 24                   movq    %rdx, (%rsp)
// 15b: ff d0                         callq   *%rax
// 15d: 48 8b 14 24                   movq    (%rsp), %rdx
// 161: 48 8b 02                      movq    (%rdx), %rax
// 164: 85 c0                         testl   %eax, %eax
// 166: 78 25                         js      0x18d <_JIT_ENTRY+0x18d>
// 168: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 172: 48 89 14 24                   movq    %rdx, (%rsp)
// 176: ff d0                         callq   *%rax
// 178: 48 8b 3c 24                   movq    (%rsp), %rdi
// 17c: 48 ff 0f                      decq    (%rdi)
// 17f: 75 0c                         jne     0x18d <_JIT_ENTRY+0x18d>
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  _Py_Dealloc
// 18b: ff d0                         callq   *%rax
// 18d: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 192: 75 28                         jne     0x1bc <_JIT_ENTRY+0x1bc>
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  PyInterpreterState_Get
// 19e: ff d0                         callq   *%rax
// 1a0: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1a7: 49 ff 4d 00                   decq    (%r13)
// 1ab: 75 0f                         jne     0x1bc <_JIT_ENTRY+0x1bc>
// 1ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001af:  R_X86_64_64  PyObject_Free
// 1b7: 4c 89 ef                      movq    %r13, %rdi
// 1ba: ff d0                         callq   *%rax
// 1bc: 49 8b 04 24                   movq    (%r12), %rax
// 1c0: 48 85 c0                      testq   %rax, %rax
// 1c3: 7f 22                         jg      0x1e7 <_JIT_ENTRY+0x1e7>
// 1c5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c7:  R_X86_64_64  .rodata.str1.1
// 1cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d1:  R_X86_64_64  _Py_NegativeRefcount
// 1d9: be 54 02 00 00                movl    $0x254, %esi            # imm = 0x254
// 1de: 4c 89 e2                      movq    %r12, %rdx
// 1e1: ff d0                         callq   *%rax
// 1e3: 49 8b 04 24                   movq    (%r12), %rax
// 1e7: 4d 8d 3c ef                   leaq    (%r15,%rbp,8), %r15
// 1eb: 49 83 c7 e8                   addq    $-0x18, %r15
// 1ef: 85 c0                         testl   %eax, %eax
// 1f1: 78 21                         js      0x214 <_JIT_ENTRY+0x214>
// 1f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1fd: ff d0                         callq   *%rax
// 1ff: 49 ff 0c 24                   decq    (%r12)
// 203: 75 0f                         jne     0x214 <_JIT_ENTRY+0x214>
// 205: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000207:  R_X86_64_64  _Py_Dealloc
// 20f: 4c 89 e7                      movq    %r12, %rdi
// 212: ff d0                         callq   *%rax
// 214: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000216:  R_X86_64_64  _JIT_CONTINUE
// 21e: 48 89 df                      movq    %rbx, %rdi
// 221: 4c 89 fe                      movq    %r15, %rsi
// 224: 4c 89 f2                      movq    %r14, %rdx
// 227: 48 83 c4 08                   addq    $0x8, %rsp
// 22b: 5b                            popq    %rbx
// 22c: 41 5c                         popq    %r12
// 22e: 41 5d                         popq    %r13
// 230: 41 5e                         popq    %r14
// 232: 41 5f                         popq    %r15
// 234: 5d                            popq    %rbp
// 235: ff e0                         jmpq    *%rax
// 237: 48 29 d8                      subq    %rbx, %rax
// 23a: 48 83 c0 b8                   addq    $-0x48, %rax
// 23e: 48 c1 e8 03                   shrq    $0x3, %rax
// 242: 89 43 40                      movl    %eax, 0x40(%rbx)
// 245: 48 8b 03                      movq    (%rbx), %rax
// 248: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000024a:  R_X86_64_64  _JIT_TARGET
// 252: 89 c9                         movl    %ecx, %ecx
// 254: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 258: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 25e: 48 83 c4 08                   addq    $0x8, %rsp
// 262: 5b                            popq    %rbx
// 263: 41 5c                         popq    %r12
// 265: 41 5d                         popq    %r13
// 267: 41 5e                         popq    %r14
// 269: 41 5f                         popq    %r15
// 26b: 5d                            popq    %rbp
// 26c: c3                            retq
// 26d: 
static const unsigned char _LOAD_ATTR_SLOTplus_STORE_SUBSCR_LIST_INT_code_body[622] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1a, 0x49, 0x89, 0xd6, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x17, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x27, 0x85, 0xc0, 0x79, 0x49, 0xeb, 0x68, 0x4c, 0x89, 0xf8, 0xe9, 0xea, 0x01, 0x00, 0x00, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xd9, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe5, 0x01, 0x49, 0x8d, 0x04, 0xef, 0x4d, 0x8b, 0x6c, 0xef, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4d, 0x08, 0x0f, 0x85, 0x47, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x64, 0xef, 0xf0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x0f, 0x85, 0x2d, 0x01, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0x22, 0x01, 0x00, 0x00, 0x41, 0x8b, 0x4d, 0x18, 0x49, 0x39, 0x4c, 0x24, 0x10, 0x0f, 0x8e, 0x13, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0xef, 0xe8, 0x49, 0x8b, 0x74, 0x24, 0x18, 0x48, 0x8b, 0x14, 0xce, 0x48, 0x89, 0x04, 0xce, 0x48, 0x8b, 0x02, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x52, 0x02, 0x00, 0x00, 0x48, 0x89, 0x14, 0x24, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x02, 0x85, 0xc0, 0x78, 0x25, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x14, 0x24, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0xff, 0x0f, 0x75, 0x0c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x54, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x3c, 0xef, 0x49, 0x83, 0xc7, 0xe8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _LOAD_ATTR_SLOTplus_STORE_SUBSCR_LIST_INT_code_holes[23] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x53, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x68, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x72, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xc8, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xde, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyList_Type, 0x0},
    {0x140, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1af, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x207, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x216, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x24a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_STORE_SUBSCR_LIST_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_STORE_SUBSCR_LIST_INT_data_holes[1];

// _LOAD_ATTR_SLOTplus_SWAP
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_SWAP.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f6                      movq    %rsi, %r14
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 74 1d                         je      0x46 <_JIT_ENTRY+0x46>
// 29: 49 89 d7                      movq    %rdx, %r15
// 2c: 41 8b 45 00                   movl    (%r13), %eax
// 30: ff c0                         incl    %eax
// 32: 75 42                         jne     0x76 <_JIT_ENTRY+0x76>
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 52                         jle     0x8f <_JIT_ENTRY+0x8f>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 74                         jns     0xb5 <_JIT_ENTRY+0xb5>
// 41: e9 81 00 00 00                jmp     0xc7 <_JIT_ENTRY+0xc7>
// 46: 49 29 de                      subq    %rbx, %r14
// 49: 49 83 c6 b8                   addq    $-0x48, %r14
// 4d: 49 c1 ee 03                   shrq    $0x3, %r14
// 51: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 55: 48 8b 03                      movq    (%rbx), %rax
// 58: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005a:  R_X86_64_64  _JIT_TARGET
// 62: 89 c9                         movl    %ecx, %ecx
// 64: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 6c: 5b                            popq    %rbx
// 6d: 41 5c                         popq    %r12
// 6f: 41 5d                         popq    %r13
// 71: 41 5e                         popq    %r14
// 73: 41 5f                         popq    %r15
// 75: c3                            retq
// 76: 41 89 45 00                   movl    %eax, (%r13)
// 7a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007c:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 84: ff d0                         callq   *%rax
// 86: 49 8b 04 24                   movq    (%r12), %rax
// 8a: 48 85 c0                      testq   %rax, %rax
// 8d: 7f ae                         jg      0x3d <_JIT_ENTRY+0x3d>
// 8f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000091:  R_X86_64_64  .rodata.str1.1
// 99: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009b:  R_X86_64_64  _Py_NegativeRefcount
// a3: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a8: 4c 89 e2                      movq    %r12, %rdx
// ab: ff d0                         callq   *%rax
// ad: 49 8b 04 24                   movq    (%r12), %rax
// b1: 85 c0                         testl   %eax, %eax
// b3: 78 12                         js      0xc7 <_JIT_ENTRY+0xc7>
// b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bf: ff d0                         callq   *%rax
// c1: 49 ff 0c 24                   decq    (%r12)
// c5: 74 56                         je      0x11d <_JIT_ENTRY+0x11d>
// c7: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cd:  R_X86_64_64  _JIT_OPARG
// d5: a8 01                         testb   $0x1, %al
// d7: 74 07                         je      0xe0 <_JIT_ENTRY+0xe0>
// d9: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// e0: 0f b7 c8                      movzwl  %ax, %ecx
// e3: 83 e0 01                      andl    $0x1, %eax
// e6: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// ea: 49 8b 54 c6 f8                movq    -0x8(%r14,%rax,8), %rdx
// ef: 48 89 c7                      movq    %rax, %rdi
// f2: 48 29 cf                      subq    %rcx, %rdi
// f5: 49 8b 0c fe                   movq    (%r14,%rdi,8), %rcx
// f9: 49 89 14 fe                   movq    %rdx, (%r14,%rdi,8)
// fd: 49 89 4c c6 f8                movq    %rcx, -0x8(%r14,%rax,8)
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _JIT_CONTINUE
// 10c: 48 89 df                      movq    %rbx, %rdi
// 10f: 4c 89 fa                      movq    %r15, %rdx
// 112: 5b                            popq    %rbx
// 113: 41 5c                         popq    %r12
// 115: 41 5d                         popq    %r13
// 117: 41 5e                         popq    %r14
// 119: 41 5f                         popq    %r15
// 11b: ff e0                         jmpq    *%rax
// 11d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011f:  R_X86_64_64  _Py_Dealloc
// 127: 4c 89 e7                      movq    %r12, %rdi
// 12a: ff d0                         callq   *%rax
// 12c: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _JIT_OPARG
// 13a: a8 01                         testb   $0x1, %al
// 13c: 75 9b                         jne     0xd9 <_JIT_ENTRY+0xd9>
// 13e: eb a0                         jmp     0xe0 <_JIT_ENTRY+0xe0>
// 140: 
static const unsigned char _LOAD_ATTR_SLOTplus_SWAP_code_body[321] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1d, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x42, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x52, 0x85, 0xc0, 0x79, 0x74, 0xe9, 0x81, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xae, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x56, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x49, 0x8b, 0x54, 0xc6, 0xf8, 0x48, 0x89, 0xc7, 0x48, 0x29, 0xcf, 0x49, 0x8b, 0x0c, 0xfe, 0x49, 0x89, 0x14, 0xfe, 0x49, 0x89, 0x4c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x75, 0x9b, 0xeb, 0xa0};
static const Hole _LOAD_ATTR_SLOTplus_SWAP_code_holes[11] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xcd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x11f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_SWAP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_SWAP_data_holes[1];

// _LOAD_ATTR_SLOTplus_TO_BOOL
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_TO_BOOL.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 49 8b 2c 04                   movq    (%r12,%rax), %rbp
// 26: 48 85 ed                      testq   %rbp, %rbp
// 29: 74 26                         je      0x51 <_JIT_ENTRY+0x51>
// 2b: 49 89 d7                      movq    %rdx, %r15
// 2e: 8b 45 00                      movl    (%rbp), %eax
// 31: ff c0                         incl    %eax
// 33: 75 49                         jne     0x7e <_JIT_ENTRY+0x7e>
// 35: 49 8b 04 24                   movq    (%r12), %rax
// 39: 48 85 c0                      testq   %rax, %rax
// 3c: 7e 58                         jle     0x96 <_JIT_ENTRY+0x96>
// 3e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000040:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 48: 85 c0                         testl   %eax, %eax
// 4a: 79 7a                         jns     0xc6 <_JIT_ENTRY+0xc6>
// 4c: e9 81 00 00 00                jmp     0xd2 <_JIT_ENTRY+0xd2>
// 51: 49 29 de                      subq    %rbx, %r14
// 54: 49 83 c6 b8                   addq    $-0x48, %r14
// 58: 49 c1 ee 03                   shrq    $0x3, %r14
// 5c: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 60: 48 8b 03                      movq    (%rbx), %rax
// 63: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000065:  R_X86_64_64  _JIT_TARGET
// 6d: 89 c9                         movl    %ecx, %ecx
// 6f: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 73: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 79: e9 8d 01 00 00                jmp     0x20b <_JIT_ENTRY+0x20b>
// 7e: 89 45 00                      movl    %eax, (%rbp)
// 81: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000083:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 8b: ff d0                         callq   *%rax
// 8d: 49 8b 04 24                   movq    (%r12), %rax
// 91: 48 85 c0                      testq   %rax, %rax
// 94: 7f a8                         jg      0x3e <_JIT_ENTRY+0x3e>
// 96: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000098:  R_X86_64_64  .rodata.str1.1
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _Py_NegativeRefcount
// aa: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// af: 4c 89 e2                      movq    %r12, %rdx
// b2: ff d0                         callq   *%rax
// b4: 49 8b 04 24                   movq    (%r12), %rax
// b8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ba:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c2: 85 c0                         testl   %eax, %eax
// c4: 78 0c                         js      0xd2 <_JIT_ENTRY+0xd2>
// c6: ff d1                         callq   *%rcx
// c8: 49 ff 0c 24                   decq    (%r12)
// cc: 0f 84 e0 00 00 00             je      0x1b2 <_JIT_ENTRY+0x1b2>
// d2: 49 89 6e f8                   movq    %rbp, -0x8(%r14)
// d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d8:  R_X86_64_64  _JIT_OPARG
// e0: a8 01                         testb   $0x1, %al
// e2: 74 07                         je      0xeb <_JIT_ENTRY+0xeb>
// e4: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// eb: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 41 83 e5 01                   andl    $0x1, %r13d
// f9: 4f 8b 64 ee f8                movq    -0x8(%r14,%r13,8), %r12
// fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000100:  R_X86_64_64  PyObject_IsTrue
// 108: 4c 89 e7                      movq    %r12, %rdi
// 10b: ff d0                         callq   *%rax
// 10d: 89 c5                         movl    %eax, %ebp
// 10f: 49 8b 04 24                   movq    (%r12), %rax
// 113: 48 85 c0                      testq   %rax, %rax
// 116: 7e 06                         jle     0x11e <_JIT_ENTRY+0x11e>
// 118: 85 c0                         testl   %eax, %eax
// 11a: 79 28                         jns     0x144 <_JIT_ENTRY+0x144>
// 11c: eb 3c                         jmp     0x15a <_JIT_ENTRY+0x15a>
// 11e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000120:  R_X86_64_64  .rodata.str1.1
// 128: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012a:  R_X86_64_64  _Py_NegativeRefcount
// 132: be 86 00 00 00                movl    $0x86, %esi
// 137: 4c 89 e2                      movq    %r12, %rdx
// 13a: ff d0                         callq   *%rax
// 13c: 49 8b 04 24                   movq    (%r12), %rax
// 140: 85 c0                         testl   %eax, %eax
// 142: 78 16                         js      0x15a <_JIT_ENTRY+0x15a>
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 14e: ff d0                         callq   *%rax
// 150: 49 ff 0c 24                   decq    (%r12)
// 154: 0f 84 82 00 00 00             je      0x1dc <_JIT_ENTRY+0x1dc>
// 15a: 85 ed                         testl   %ebp, %ebp
// 15c: 0f 88 91 00 00 00             js      0x1f3 <_JIT_ENTRY+0x1f3>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _JIT_OPARG
// 16c: 83 e0 01                      andl    $0x1, %eax
// 16f: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 173: 85 ed                         testl   %ebp, %ebp
// 175: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000177:  R_X86_64_64  _Py_FalseStruct
// 17f: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000181:  R_X86_64_64  _Py_TrueStruct
// 189: 48 0f 44 d1                   cmoveq  %rcx, %rdx
// 18d: 49 89 54 c6 f8                movq    %rdx, -0x8(%r14,%rax,8)
// 192: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000194:  R_X86_64_64  _JIT_CONTINUE
// 19c: 48 89 df                      movq    %rbx, %rdi
// 19f: 4c 89 fa                      movq    %r15, %rdx
// 1a2: 48 83 c4 08                   addq    $0x8, %rsp
// 1a6: 5b                            popq    %rbx
// 1a7: 41 5c                         popq    %r12
// 1a9: 41 5d                         popq    %r13
// 1ab: 41 5e                         popq    %r14
// 1ad: 41 5f                         popq    %r15
// 1af: 5d                            popq    %rbp
// 1b0: ff e0                         jmpq    *%rax
// 1b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b4:  R_X86_64_64  _Py_Dealloc
// 1bc: 4c 89 e7                      movq    %r12, %rdi
// 1bf: ff d0                         callq   *%rax
// 1c1: 49 89 6e f8                   movq    %rbp, -0x8(%r14)
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _JIT_OPARG
// 1cf: a8 01                         testb   $0x1, %al
// 1d1: 0f 85 0d ff ff ff             jne     0xe4 <_JIT_ENTRY+0xe4>
// 1d7: e9 0f ff ff ff                jmp     0xeb <_JIT_ENTRY+0xeb>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _Py_Dealloc
// 1e6: 4c 89 e7                      movq    %r12, %rdi
// 1e9: ff d0                         callq   *%rax
// 1eb: 85 ed                         testl   %ebp, %ebp
// 1ed: 0f 89 6f ff ff ff             jns     0x162 <_JIT_ENTRY+0x162>
// 1f3: 4b 8d 04 ee                   leaq    (%r14,%r13,8), %rax
// 1f7: 48 83 c0 f8                   addq    $-0x8, %rax
// 1fb: 48 29 d8                      subq    %rbx, %rax
// 1fe: 48 83 c0 b8                   addq    $-0x48, %rax
// 202: 48 c1 e8 03                   shrq    $0x3, %rax
// 206: 89 43 40                      movl    %eax, 0x40(%rbx)
// 209: 31 c0                         xorl    %eax, %eax
// 20b: 48 83 c4 08                   addq    $0x8, %rsp
// 20f: 5b                            popq    %rbx
// 210: 41 5c                         popq    %r12
// 212: 41 5d                         popq    %r13
// 214: 41 5e                         popq    %r14
// 216: 41 5f                         popq    %r15
// 218: 5d                            popq    %rbp
// 219: c3                            retq
// 21a: 
static const unsigned char _LOAD_ATTR_SLOTplus_TO_BOOL_code_body[539] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8b, 0x2c, 0x04, 0x48, 0x85, 0xed, 0x74, 0x26, 0x49, 0x89, 0xd7, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x49, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x58, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x79, 0x7a, 0xe9, 0x81, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x8d, 0x01, 0x00, 0x00, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xa8, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x0c, 0xff, 0xd1, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xe0, 0x00, 0x00, 0x00, 0x49, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x83, 0xe5, 0x01, 0x4f, 0x8b, 0x64, 0xee, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x3c, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x86, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x82, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x91, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x85, 0xed, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xd1, 0x49, 0x89, 0x54, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x0d, 0xff, 0xff, 0xff, 0xe9, 0x0f, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x6f, 0xff, 0xff, 0xff, 0x4b, 0x8d, 0x04, 0xee, 0x48, 0x83, 0xc0, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _LOAD_ATTR_SLOTplus_TO_BOOL_code_holes[21] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x40, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x65, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x83, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd8, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x100, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_IsTrue, 0x0},
    {0x120, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x194, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_TO_BOOL_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_TO_BOOL_data_holes[1];

// _LOAD_ATTR_SLOTplus_TO_BOOL_ALWAYS_TRUE
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_TO_BOOL_ALWAYS_TRUE.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f6                      movq    %rsi, %r14
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 0f 84 c3 00 00 00             je      0xf0 <_JIT_ENTRY+0xf0>
// 2d: 49 89 d7                      movq    %rdx, %r15
// 30: 41 8b 45 00                   movl    (%r13), %eax
// 34: ff c0                         incl    %eax
// 36: 75 0f                         jne     0x47 <_JIT_ENTRY+0x47>
// 38: 49 8b 04 24                   movq    (%r12), %rax
// 3c: 48 85 c0                      testq   %rax, %rax
// 3f: 7e 1f                         jle     0x60 <_JIT_ENTRY+0x60>
// 41: 85 c0                         testl   %eax, %eax
// 43: 79 41                         jns     0x86 <_JIT_ENTRY+0x86>
// 45: eb 55                         jmp     0x9c <_JIT_ENTRY+0x9c>
// 47: 41 89 45 00                   movl    %eax, (%r13)
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 55: ff d0                         callq   *%rax
// 57: 49 8b 04 24                   movq    (%r12), %rax
// 5b: 48 85 c0                      testq   %rax, %rax
// 5e: 7f e1                         jg      0x41 <_JIT_ENTRY+0x41>
// 60: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000062:  R_X86_64_64  .rodata.str1.1
// 6a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006c:  R_X86_64_64  _Py_NegativeRefcount
// 74: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 79: 4c 89 e2                      movq    %r12, %rdx
// 7c: ff d0                         callq   *%rax
// 7e: 49 8b 04 24                   movq    (%r12), %rax
// 82: 85 c0                         testl   %eax, %eax
// 84: 78 16                         js      0x9c <_JIT_ENTRY+0x9c>
// 86: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000088:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 90: ff d0                         callq   *%rax
// 92: 49 ff 0c 24                   decq    (%r12)
// 96: 0f 84 84 00 00 00             je      0x120 <_JIT_ENTRY+0x120>
// 9c: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _JIT_OPARG
// aa: a8 01                         testb   $0x1, %al
// ac: 74 07                         je      0xb5 <_JIT_ENTRY+0xb5>
// ae: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// b5: 83 e0 01                      andl    $0x1, %eax
// b8: 4d 8d 24 c6                   leaq    (%r14,%rax,8), %r12
// bc: 4d 8b 6c c6 f8                movq    -0x8(%r14,%rax,8), %r13
// c1: 49 8b 45 08                   movq    0x8(%r13), %rax
// c5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c7:  R_X86_64_64  _JIT_OPERAND
// cf: 39 88 80 01 00 00             cmpl    %ecx, 0x180(%rax)
// d5: 75 16                         jne     0xed <_JIT_ENTRY+0xed>
// d7: 49 8b 45 00                   movq    (%r13), %rax
// db: 48 85 c0                      testq   %rax, %rax
// de: 7e 6a                         jle     0x14a <_JIT_ENTRY+0x14a>
// e0: 85 c0                         testl   %eax, %eax
// e2: 0f 89 88 00 00 00             jns     0x170 <_JIT_ENTRY+0x170>
// e8: e9 a4 00 00 00                jmp     0x191 <_JIT_ENTRY+0x191>
// ed: 4d 89 e6                      movq    %r12, %r14
// f0: 49 29 de                      subq    %rbx, %r14
// f3: 49 83 c6 b8                   addq    $-0x48, %r14
// f7: 49 c1 ee 03                   shrq    $0x3, %r14
// fb: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// ff: 48 8b 03                      movq    (%rbx), %rax
// 102: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000104:  R_X86_64_64  _JIT_TARGET
// 10c: 89 c9                         movl    %ecx, %ecx
// 10e: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 116: 5b                            popq    %rbx
// 117: 41 5c                         popq    %r12
// 119: 41 5d                         popq    %r13
// 11b: 41 5e                         popq    %r14
// 11d: 41 5f                         popq    %r15
// 11f: c3                            retq
// 120: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000122:  R_X86_64_64  _Py_Dealloc
// 12a: 4c 89 e7                      movq    %r12, %rdi
// 12d: ff d0                         callq   *%rax
// 12f: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 133: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000135:  R_X86_64_64  _JIT_OPARG
// 13d: a8 01                         testb   $0x1, %al
// 13f: 0f 85 69 ff ff ff             jne     0xae <_JIT_ENTRY+0xae>
// 145: e9 6b ff ff ff                jmp     0xb5 <_JIT_ENTRY+0xb5>
// 14a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000014c:  R_X86_64_64  .rodata.str1.1
// 154: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000156:  R_X86_64_64  _Py_NegativeRefcount
// 15e: be db 00 00 00                movl    $0xdb, %esi
// 163: 4c 89 ea                      movq    %r13, %rdx
// 166: ff d0                         callq   *%rax
// 168: 49 8b 45 00                   movq    (%r13), %rax
// 16c: 85 c0                         testl   %eax, %eax
// 16e: 78 21                         js      0x191 <_JIT_ENTRY+0x191>
// 170: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000172:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17a: ff d0                         callq   *%rax
// 17c: 49 ff 4d 00                   decq    (%r13)
// 180: 75 0f                         jne     0x191 <_JIT_ENTRY+0x191>
// 182: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000184:  R_X86_64_64  _Py_Dealloc
// 18c: 4c 89 ef                      movq    %r13, %rdi
// 18f: ff d0                         callq   *%rax
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _JIT_OPARG
// 19b: 83 e0 01                      andl    $0x1, %eax
// 19e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a0:  R_X86_64_64  _Py_TrueStruct
// 1a8: 49 89 4c c6 f8                movq    %rcx, -0x8(%r14,%rax,8)
// 1ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001af:  R_X86_64_64  _JIT_CONTINUE
// 1b7: 48 89 df                      movq    %rbx, %rdi
// 1ba: 4c 89 e6                      movq    %r12, %rsi
// 1bd: 4c 89 fa                      movq    %r15, %rdx
// 1c0: 5b                            popq    %rbx
// 1c1: 41 5c                         popq    %r12
// 1c3: 41 5d                         popq    %r13
// 1c5: 41 5e                         popq    %r14
// 1c7: 41 5f                         popq    %r15
// 1c9: ff e0                         jmpq    *%rax
// 1cb: 
static const unsigned char _LOAD_ATTR_SLOTplus_TO_BOOL_ALWAYS_TRUE_code_body[460] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xc3, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1f, 0x85, 0xc0, 0x79, 0x41, 0xeb, 0x55, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x84, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x4d, 0x8d, 0x24, 0xc6, 0x4d, 0x8b, 0x6c, 0xc6, 0xf8, 0x49, 0x8b, 0x45, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x88, 0x80, 0x01, 0x00, 0x00, 0x75, 0x16, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x6a, 0x85, 0xc0, 0x0f, 0x89, 0x88, 0x00, 0x00, 0x00, 0xe9, 0xa4, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x69, 0xff, 0xff, 0xff, 0xe9, 0x6b, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x4c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _LOAD_ATTR_SLOTplus_TO_BOOL_ALWAYS_TRUE_code_holes[18] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xc7, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x122, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x172, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x1af, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_TO_BOOL_ALWAYS_TRUE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_TO_BOOL_ALWAYS_TRUE_data_holes[1];

// _LOAD_ATTR_SLOTplus_TO_BOOL_BOOL
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_TO_BOOL_BOOL.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f6                      movq    %rsi, %r14
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 0f 84 a7 00 00 00             je      0xd4 <_JIT_ENTRY+0xd4>
// 2d: 49 89 d7                      movq    %rdx, %r15
// 30: 41 8b 45 00                   movl    (%r13), %eax
// 34: ff c0                         incl    %eax
// 36: 75 0f                         jne     0x47 <_JIT_ENTRY+0x47>
// 38: 49 8b 04 24                   movq    (%r12), %rax
// 3c: 48 85 c0                      testq   %rax, %rax
// 3f: 7e 1f                         jle     0x60 <_JIT_ENTRY+0x60>
// 41: 85 c0                         testl   %eax, %eax
// 43: 79 41                         jns     0x86 <_JIT_ENTRY+0x86>
// 45: eb 55                         jmp     0x9c <_JIT_ENTRY+0x9c>
// 47: 41 89 45 00                   movl    %eax, (%r13)
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 55: ff d0                         callq   *%rax
// 57: 49 8b 04 24                   movq    (%r12), %rax
// 5b: 48 85 c0                      testq   %rax, %rax
// 5e: 7f e1                         jg      0x41 <_JIT_ENTRY+0x41>
// 60: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000062:  R_X86_64_64  .rodata.str1.1
// 6a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006c:  R_X86_64_64  _Py_NegativeRefcount
// 74: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 79: 4c 89 e2                      movq    %r12, %rdx
// 7c: ff d0                         callq   *%rax
// 7e: 49 8b 04 24                   movq    (%r12), %rax
// 82: 85 c0                         testl   %eax, %eax
// 84: 78 16                         js      0x9c <_JIT_ENTRY+0x9c>
// 86: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000088:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 90: ff d0                         callq   *%rax
// 92: 49 ff 0c 24                   decq    (%r12)
// 96: 0f 84 83 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 9c: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _JIT_OPARG
// aa: a8 01                         testb   $0x1, %al
// ac: 74 07                         je      0xb5 <_JIT_ENTRY+0xb5>
// ae: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// b5: 83 e0 01                      andl    $0x1, %eax
// b8: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// bc: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  PyBool_Type
// cb: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// cf: 74 33                         je      0x104 <_JIT_ENTRY+0x104>
// d1: 49 89 f6                      movq    %rsi, %r14
// d4: 49 29 de                      subq    %rbx, %r14
// d7: 49 83 c6 b8                   addq    $-0x48, %r14
// db: 49 c1 ee 03                   shrq    $0x3, %r14
// df: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// e3: 48 8b 03                      movq    (%rbx), %rax
// e6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000e8:  R_X86_64_64  _JIT_TARGET
// f0: 89 c9                         movl    %ecx, %ecx
// f2: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// fa: 5b                            popq    %rbx
// fb: 41 5c                         popq    %r12
// fd: 41 5d                         popq    %r13
// ff: 41 5e                         popq    %r14
// 101: 41 5f                         popq    %r15
// 103: c3                            retq
// 104: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000106:  R_X86_64_64  _JIT_CONTINUE
// 10e: 48 89 df                      movq    %rbx, %rdi
// 111: 4c 89 fa                      movq    %r15, %rdx
// 114: 5b                            popq    %rbx
// 115: 41 5c                         popq    %r12
// 117: 41 5d                         popq    %r13
// 119: 41 5e                         popq    %r14
// 11b: 41 5f                         popq    %r15
// 11d: ff e0                         jmpq    *%rax
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 4c 89 e7                      movq    %r12, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 132: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000134:  R_X86_64_64  _JIT_OPARG
// 13c: a8 01                         testb   $0x1, %al
// 13e: 0f 85 6a ff ff ff             jne     0xae <_JIT_ENTRY+0xae>
// 144: e9 6c ff ff ff                jmp     0xb5 <_JIT_ENTRY+0xb5>
// 149: 
static const unsigned char _LOAD_ATTR_SLOTplus_TO_BOOL_BOOL_code_body[330] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xa7, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1f, 0x85, 0xc0, 0x79, 0x41, 0xeb, 0x55, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x83, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x33, 0x49, 0x89, 0xf6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x6a, 0xff, 0xff, 0xff, 0xe9, 0x6c, 0xff, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_TO_BOOL_BOOL_code_holes[12] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyBool_Type, 0x0},
    {0xe8, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x134, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_TO_BOOL_BOOL_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_TO_BOOL_BOOL_data_holes[1];

// _LOAD_ATTR_SLOTplus_TO_BOOL_INT
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_TO_BOOL_INT.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 26: 4d 85 ed                      testq   %r13, %r13
// 29: 0f 84 b2 00 00 00             je      0xe1 <_JIT_ENTRY+0xe1>
// 2f: 49 89 d7                      movq    %rdx, %r15
// 32: 41 8b 45 00                   movl    (%r13), %eax
// 36: ff c0                         incl    %eax
// 38: 75 0f                         jne     0x49 <_JIT_ENTRY+0x49>
// 3a: 49 8b 04 24                   movq    (%r12), %rax
// 3e: 48 85 c0                      testq   %rax, %rax
// 41: 7e 1f                         jle     0x62 <_JIT_ENTRY+0x62>
// 43: 85 c0                         testl   %eax, %eax
// 45: 79 41                         jns     0x88 <_JIT_ENTRY+0x88>
// 47: eb 60                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 49: 41 89 45 00                   movl    %eax, (%r13)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 57: ff d0                         callq   *%rax
// 59: 49 8b 04 24                   movq    (%r12), %rax
// 5d: 48 85 c0                      testq   %rax, %rax
// 60: 7f e1                         jg      0x43 <_JIT_ENTRY+0x43>
// 62: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000064:  R_X86_64_64  .rodata.str1.1
// 6c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006e:  R_X86_64_64  _Py_NegativeRefcount
// 76: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 7b: 4c 89 e2                      movq    %r12, %rdx
// 7e: ff d0                         callq   *%rax
// 80: 49 8b 04 24                   movq    (%r12), %rax
// 84: 85 c0                         testl   %eax, %eax
// 86: 78 21                         js      0xa9 <_JIT_ENTRY+0xa9>
// 88: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 92: ff d0                         callq   *%rax
// 94: 49 ff 0c 24                   decq    (%r12)
// 98: 75 0f                         jne     0xa9 <_JIT_ENTRY+0xa9>
// 9a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009c:  R_X86_64_64  _Py_Dealloc
// a4: 4c 89 e7                      movq    %r12, %rdi
// a7: ff d0                         callq   *%rax
// a9: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _JIT_OPARG
// b7: a8 01                         testb   $0x1, %al
// b9: 74 07                         je      0xc2 <_JIT_ENTRY+0xc2>
// bb: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// c2: 83 e0 01                      andl    $0x1, %eax
// c5: 4d 8d 24 c6                   leaq    (%r14,%rax,8), %r12
// c9: 4d 8b 6c c6 f8                movq    -0x8(%r14,%rax,8), %r13
// ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d0:  R_X86_64_64  PyLong_Type
// d8: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// dc: 74 3a                         je      0x118 <_JIT_ENTRY+0x118>
// de: 4d 89 e6                      movq    %r12, %r14
// e1: 49 29 de                      subq    %rbx, %r14
// e4: 49 83 c6 b8                   addq    $-0x48, %r14
// e8: 49 c1 ee 03                   shrq    $0x3, %r14
// ec: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// f0: 48 8b 03                      movq    (%rbx), %rax
// f3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000f5:  R_X86_64_64  _JIT_TARGET
// fd: 89 c9                         movl    %ecx, %ecx
// ff: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 103: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 109: 48 83 c4 08                   addq    $0x8, %rsp
// 10d: 5b                            popq    %rbx
// 10e: 41 5c                         popq    %r12
// 110: 41 5d                         popq    %r13
// 112: 41 5e                         popq    %r14
// 114: 41 5f                         popq    %r15
// 116: 5d                            popq    %rbp
// 117: c3                            retq
// 118: 41 8b 45 10                   movl    0x10(%r13), %eax
// 11c: 83 e0 03                      andl    $0x3, %eax
// 11f: 83 f8 01                      cmpl    $0x1, %eax
// 122: 75 0c                         jne     0x130 <_JIT_ENTRY+0x130>
// 124: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000126:  R_X86_64_64  _Py_FalseStruct
// 12e: eb 5a                         jmp     0x18a <_JIT_ENTRY+0x18a>
// 130: 49 8b 45 00                   movq    (%r13), %rax
// 134: 48 85 c0                      testq   %rax, %rax
// 137: 7f 22                         jg      0x15b <_JIT_ENTRY+0x15b>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000145:  R_X86_64_64  _Py_NegativeRefcount
// 14d: be a0 00 00 00                movl    $0xa0, %esi
// 152: 4c 89 ea                      movq    %r13, %rdx
// 155: ff d0                         callq   *%rax
// 157: 49 8b 45 00                   movq    (%r13), %rax
// 15b: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000015d:  R_X86_64_64  _Py_TrueStruct
// 165: 85 c0                         testl   %eax, %eax
// 167: 78 21                         js      0x18a <_JIT_ENTRY+0x18a>
// 169: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 173: ff d0                         callq   *%rax
// 175: 49 ff 4d 00                   decq    (%r13)
// 179: 75 0f                         jne     0x18a <_JIT_ENTRY+0x18a>
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _Py_Dealloc
// 185: 4c 89 ef                      movq    %r13, %rdi
// 188: ff d0                         callq   *%rax
// 18a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018c:  R_X86_64_64  _JIT_OPARG
// 194: 83 e0 01                      andl    $0x1, %eax
// 197: 49 89 6c c6 f8                movq    %rbp, -0x8(%r14,%rax,8)
// 19c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019e:  R_X86_64_64  _JIT_CONTINUE
// 1a6: 48 89 df                      movq    %rbx, %rdi
// 1a9: 4c 89 e6                      movq    %r12, %rsi
// 1ac: 4c 89 fa                      movq    %r15, %rdx
// 1af: 48 83 c4 08                   addq    $0x8, %rsp
// 1b3: 5b                            popq    %rbx
// 1b4: 41 5c                         popq    %r12
// 1b6: 41 5d                         popq    %r13
// 1b8: 41 5e                         popq    %r14
// 1ba: 41 5f                         popq    %r15
// 1bc: 5d                            popq    %rbp
// 1bd: ff e0                         jmpq    *%rax
// 1bf: 
static const unsigned char _LOAD_ATTR_SLOTplus_TO_BOOL_INT_code_body[448] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xb2, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1f, 0x85, 0xc0, 0x79, 0x41, 0xeb, 0x60, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x4d, 0x8d, 0x24, 0xc6, 0x4d, 0x8b, 0x6c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x74, 0x3a, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x8b, 0x45, 0x10, 0x83, 0xe0, 0x03, 0x83, 0xf8, 0x01, 0x75, 0x0c, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x5a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xa0, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x89, 0x6c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_ATTR_SLOTplus_TO_BOOL_INT_code_holes[18] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x64, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0xf5, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x126, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x16b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x19e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_TO_BOOL_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_TO_BOOL_INT_data_holes[1];

// _LOAD_ATTR_SLOTplus_TO_BOOL_LIST
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_TO_BOOL_LIST.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 26: 4d 85 ed                      testq   %r13, %r13
// 29: 0f 84 b2 00 00 00             je      0xe1 <_JIT_ENTRY+0xe1>
// 2f: 49 89 d7                      movq    %rdx, %r15
// 32: 41 8b 45 00                   movl    (%r13), %eax
// 36: ff c0                         incl    %eax
// 38: 75 0f                         jne     0x49 <_JIT_ENTRY+0x49>
// 3a: 49 8b 04 24                   movq    (%r12), %rax
// 3e: 48 85 c0                      testq   %rax, %rax
// 41: 7e 1f                         jle     0x62 <_JIT_ENTRY+0x62>
// 43: 85 c0                         testl   %eax, %eax
// 45: 79 41                         jns     0x88 <_JIT_ENTRY+0x88>
// 47: eb 60                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 49: 41 89 45 00                   movl    %eax, (%r13)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 57: ff d0                         callq   *%rax
// 59: 49 8b 04 24                   movq    (%r12), %rax
// 5d: 48 85 c0                      testq   %rax, %rax
// 60: 7f e1                         jg      0x43 <_JIT_ENTRY+0x43>
// 62: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000064:  R_X86_64_64  .rodata.str1.1
// 6c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006e:  R_X86_64_64  _Py_NegativeRefcount
// 76: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 7b: 4c 89 e2                      movq    %r12, %rdx
// 7e: ff d0                         callq   *%rax
// 80: 49 8b 04 24                   movq    (%r12), %rax
// 84: 85 c0                         testl   %eax, %eax
// 86: 78 21                         js      0xa9 <_JIT_ENTRY+0xa9>
// 88: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 92: ff d0                         callq   *%rax
// 94: 49 ff 0c 24                   decq    (%r12)
// 98: 75 0f                         jne     0xa9 <_JIT_ENTRY+0xa9>
// 9a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009c:  R_X86_64_64  _Py_Dealloc
// a4: 4c 89 e7                      movq    %r12, %rdi
// a7: ff d0                         callq   *%rax
// a9: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _JIT_OPARG
// b7: a8 01                         testb   $0x1, %al
// b9: 74 07                         je      0xc2 <_JIT_ENTRY+0xc2>
// bb: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// c2: 83 e0 01                      andl    $0x1, %eax
// c5: 4d 8d 24 c6                   leaq    (%r14,%rax,8), %r12
// c9: 4d 8b 6c c6 f8                movq    -0x8(%r14,%rax,8), %r13
// ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d0:  R_X86_64_64  PyList_Type
// d8: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// dc: 74 3a                         je      0x118 <_JIT_ENTRY+0x118>
// de: 4d 89 e6                      movq    %r12, %r14
// e1: 49 29 de                      subq    %rbx, %r14
// e4: 49 83 c6 b8                   addq    $-0x48, %r14
// e8: 49 c1 ee 03                   shrq    $0x3, %r14
// ec: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// f0: 48 8b 03                      movq    (%rbx), %rax
// f3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000f5:  R_X86_64_64  _JIT_TARGET
// fd: 89 c9                         movl    %ecx, %ecx
// ff: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 103: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 109: 48 83 c4 08                   addq    $0x8, %rsp
// 10d: 5b                            popq    %rbx
// 10e: 41 5c                         popq    %r12
// 110: 41 5d                         popq    %r13
// 112: 41 5e                         popq    %r14
// 114: 41 5f                         popq    %r15
// 116: 5d                            popq    %rbp
// 117: c3                            retq
// 118: 49 8b 45 00                   movq    (%r13), %rax
// 11c: 49 8b 6d 10                   movq    0x10(%r13), %rbp
// 120: 48 85 c0                      testq   %rax, %rax
// 123: 7e 06                         jle     0x12b <_JIT_ENTRY+0x12b>
// 125: 85 c0                         testl   %eax, %eax
// 127: 79 28                         jns     0x151 <_JIT_ENTRY+0x151>
// 129: eb 47                         jmp     0x172 <_JIT_ENTRY+0x172>
// 12b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000012d:  R_X86_64_64  .rodata.str1.1
// 135: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000137:  R_X86_64_64  _Py_NegativeRefcount
// 13f: be ae 00 00 00                movl    $0xae, %esi
// 144: 4c 89 ea                      movq    %r13, %rdx
// 147: ff d0                         callq   *%rax
// 149: 49 8b 45 00                   movq    (%r13), %rax
// 14d: 85 c0                         testl   %eax, %eax
// 14f: 78 21                         js      0x172 <_JIT_ENTRY+0x172>
// 151: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000153:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 15b: ff d0                         callq   *%rax
// 15d: 49 ff 4d 00                   decq    (%r13)
// 161: 75 0f                         jne     0x172 <_JIT_ENTRY+0x172>
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_Dealloc
// 16d: 4c 89 ef                      movq    %r13, %rdi
// 170: ff d0                         callq   *%rax
// 172: 48 85 ed                      testq   %rbp, %rbp
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_FalseStruct
// 17f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000181:  R_X86_64_64  _Py_TrueStruct
// 189: 48 0f 44 c8                   cmoveq  %rax, %rcx
// 18d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018f:  R_X86_64_64  _JIT_OPARG
// 197: 83 e0 01                      andl    $0x1, %eax
// 19a: 49 89 4c c6 f8                movq    %rcx, -0x8(%r14,%rax,8)
// 19f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a1:  R_X86_64_64  _JIT_CONTINUE
// 1a9: 48 89 df                      movq    %rbx, %rdi
// 1ac: 4c 89 e6                      movq    %r12, %rsi
// 1af: 4c 89 fa                      movq    %r15, %rdx
// 1b2: 48 83 c4 08                   addq    $0x8, %rsp
// 1b6: 5b                            popq    %rbx
// 1b7: 41 5c                         popq    %r12
// 1b9: 41 5d                         popq    %r13
// 1bb: 41 5e                         popq    %r14
// 1bd: 41 5f                         popq    %r15
// 1bf: 5d                            popq    %rbp
// 1c0: ff e0                         jmpq    *%rax
// 1c2: 
static const unsigned char _LOAD_ATTR_SLOTplus_TO_BOOL_LIST_code_body[451] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xb2, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1f, 0x85, 0xc0, 0x79, 0x41, 0xeb, 0x60, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x4d, 0x8d, 0x24, 0xc6, 0x4d, 0x8b, 0x6c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x74, 0x3a, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x49, 0x8b, 0x6d, 0x10, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x47, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x89, 0x4c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_ATTR_SLOTplus_TO_BOOL_LIST_code_holes[18] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x64, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyList_Type, 0x0},
    {0xf5, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x137, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1a1, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_TO_BOOL_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_TO_BOOL_LIST_data_holes[1];

// _LOAD_ATTR_SLOTplus_TO_BOOL_NONE
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_TO_BOOL_NONE.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f6                      movq    %rsi, %r14
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 0f 84 a3 00 00 00             je      0xd0 <_JIT_ENTRY+0xd0>
// 2d: 49 89 d7                      movq    %rdx, %r15
// 30: 41 8b 45 00                   movl    (%r13), %eax
// 34: ff c0                         incl    %eax
// 36: 75 0f                         jne     0x47 <_JIT_ENTRY+0x47>
// 38: 49 8b 04 24                   movq    (%r12), %rax
// 3c: 48 85 c0                      testq   %rax, %rax
// 3f: 7e 1f                         jle     0x60 <_JIT_ENTRY+0x60>
// 41: 85 c0                         testl   %eax, %eax
// 43: 79 41                         jns     0x86 <_JIT_ENTRY+0x86>
// 45: eb 55                         jmp     0x9c <_JIT_ENTRY+0x9c>
// 47: 41 89 45 00                   movl    %eax, (%r13)
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 55: ff d0                         callq   *%rax
// 57: 49 8b 04 24                   movq    (%r12), %rax
// 5b: 48 85 c0                      testq   %rax, %rax
// 5e: 7f e1                         jg      0x41 <_JIT_ENTRY+0x41>
// 60: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000062:  R_X86_64_64  .rodata.str1.1
// 6a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006c:  R_X86_64_64  _Py_NegativeRefcount
// 74: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 79: 4c 89 e2                      movq    %r12, %rdx
// 7c: ff d0                         callq   *%rax
// 7e: 49 8b 04 24                   movq    (%r12), %rax
// 82: 85 c0                         testl   %eax, %eax
// 84: 78 16                         js      0x9c <_JIT_ENTRY+0x9c>
// 86: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000088:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 90: ff d0                         callq   *%rax
// 92: 49 ff 0c 24                   decq    (%r12)
// 96: 0f 84 9b 00 00 00             je      0x137 <_JIT_ENTRY+0x137>
// 9c: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _JIT_OPARG
// aa: a8 01                         testb   $0x1, %al
// ac: 74 07                         je      0xb5 <_JIT_ENTRY+0xb5>
// ae: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// b5: 83 e0 01                      andl    $0x1, %eax
// b8: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// bc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000be:  R_X86_64_64  _Py_NoneStruct
// c6: 49 39 4c c6 f8                cmpq    %rcx, -0x8(%r14,%rax,8)
// cb: 74 33                         je      0x100 <_JIT_ENTRY+0x100>
// cd: 49 89 f6                      movq    %rsi, %r14
// d0: 49 29 de                      subq    %rbx, %r14
// d3: 49 83 c6 b8                   addq    $-0x48, %r14
// d7: 49 c1 ee 03                   shrq    $0x3, %r14
// db: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// df: 48 8b 03                      movq    (%rbx), %rax
// e2: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000e4:  R_X86_64_64  _JIT_TARGET
// ec: 89 c9                         movl    %ecx, %ecx
// ee: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// f6: 5b                            popq    %rbx
// f7: 41 5c                         popq    %r12
// f9: 41 5d                         popq    %r13
// fb: 41 5e                         popq    %r14
// fd: 41 5f                         popq    %r15
// ff: c3                            retq
// 100: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000102:  R_X86_64_64  _JIT_OPARG
// 10a: 83 e0 01                      andl    $0x1, %eax
// 10d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000010f:  R_X86_64_64  _Py_FalseStruct
// 117: 49 89 4c c6 f8                movq    %rcx, -0x8(%r14,%rax,8)
// 11c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011e:  R_X86_64_64  _JIT_CONTINUE
// 126: 48 89 df                      movq    %rbx, %rdi
// 129: 4c 89 fa                      movq    %r15, %rdx
// 12c: 5b                            popq    %rbx
// 12d: 41 5c                         popq    %r12
// 12f: 41 5d                         popq    %r13
// 131: 41 5e                         popq    %r14
// 133: 41 5f                         popq    %r15
// 135: ff e0                         jmpq    *%rax
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  _Py_Dealloc
// 141: 4c 89 e7                      movq    %r12, %rdi
// 144: ff d0                         callq   *%rax
// 146: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _JIT_OPARG
// 154: a8 01                         testb   $0x1, %al
// 156: 0f 85 52 ff ff ff             jne     0xae <_JIT_ENTRY+0xae>
// 15c: e9 54 ff ff ff                jmp     0xb5 <_JIT_ENTRY+0xb5>
// 161: 
static const unsigned char _LOAD_ATTR_SLOTplus_TO_BOOL_NONE_code_body[354] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xa3, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1f, 0x85, 0xc0, 0x79, 0x41, 0xeb, 0x55, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x9b, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0xc6, 0xf8, 0x74, 0x33, 0x49, 0x89, 0xf6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x4c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x52, 0xff, 0xff, 0xff, 0xe9, 0x54, 0xff, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_TO_BOOL_NONE_code_holes[14] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xbe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0xe4, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x11e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_TO_BOOL_NONE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_TO_BOOL_NONE_data_holes[1];

// _LOAD_ATTR_SLOTplus_TO_BOOL_STR
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_TO_BOOL_STR.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 26: 4d 85 ed                      testq   %r13, %r13
// 29: 0f 84 b2 00 00 00             je      0xe1 <_JIT_ENTRY+0xe1>
// 2f: 49 89 d7                      movq    %rdx, %r15
// 32: 41 8b 45 00                   movl    (%r13), %eax
// 36: ff c0                         incl    %eax
// 38: 75 0f                         jne     0x49 <_JIT_ENTRY+0x49>
// 3a: 49 8b 04 24                   movq    (%r12), %rax
// 3e: 48 85 c0                      testq   %rax, %rax
// 41: 7e 1f                         jle     0x62 <_JIT_ENTRY+0x62>
// 43: 85 c0                         testl   %eax, %eax
// 45: 79 41                         jns     0x88 <_JIT_ENTRY+0x88>
// 47: eb 60                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 49: 41 89 45 00                   movl    %eax, (%r13)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 57: ff d0                         callq   *%rax
// 59: 49 8b 04 24                   movq    (%r12), %rax
// 5d: 48 85 c0                      testq   %rax, %rax
// 60: 7f e1                         jg      0x43 <_JIT_ENTRY+0x43>
// 62: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000064:  R_X86_64_64  .rodata.str1.1
// 6c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006e:  R_X86_64_64  _Py_NegativeRefcount
// 76: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 7b: 4c 89 e2                      movq    %r12, %rdx
// 7e: ff d0                         callq   *%rax
// 80: 49 8b 04 24                   movq    (%r12), %rax
// 84: 85 c0                         testl   %eax, %eax
// 86: 78 21                         js      0xa9 <_JIT_ENTRY+0xa9>
// 88: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 92: ff d0                         callq   *%rax
// 94: 49 ff 0c 24                   decq    (%r12)
// 98: 75 0f                         jne     0xa9 <_JIT_ENTRY+0xa9>
// 9a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009c:  R_X86_64_64  _Py_Dealloc
// a4: 4c 89 e7                      movq    %r12, %rdi
// a7: ff d0                         callq   *%rax
// a9: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _JIT_OPARG
// b7: a8 01                         testb   $0x1, %al
// b9: 74 07                         je      0xc2 <_JIT_ENTRY+0xc2>
// bb: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// c2: 83 e0 01                      andl    $0x1, %eax
// c5: 4d 8d 24 c6                   leaq    (%r14,%rax,8), %r12
// c9: 4d 8b 6c c6 f8                movq    -0x8(%r14,%rax,8), %r13
// ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d0:  R_X86_64_64  PyUnicode_Type
// d8: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// dc: 74 3a                         je      0x118 <_JIT_ENTRY+0x118>
// de: 4d 89 e6                      movq    %r12, %r14
// e1: 49 29 de                      subq    %rbx, %r14
// e4: 49 83 c6 b8                   addq    $-0x48, %r14
// e8: 49 c1 ee 03                   shrq    $0x3, %r14
// ec: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// f0: 48 8b 03                      movq    (%rbx), %rax
// f3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000f5:  R_X86_64_64  _JIT_TARGET
// fd: 89 c9                         movl    %ecx, %ecx
// ff: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 103: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 109: 48 83 c4 08                   addq    $0x8, %rsp
// 10d: 5b                            popq    %rbx
// 10e: 41 5c                         popq    %r12
// 110: 41 5d                         popq    %r13
// 112: 41 5e                         popq    %r14
// 114: 41 5f                         popq    %r15
// 116: 5d                            popq    %rbp
// 117: c3                            retq
// 118: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011a:  R_X86_64_64  _PyRuntime
// 122: 48 05 00 a1 00 00             addq    $0xa100, %rax           # imm = 0xA100
// 128: 49 39 c5                      cmpq    %rax, %r13
// 12b: 74 5c                         je      0x189 <_JIT_ENTRY+0x189>
// 12d: 49 8b 45 00                   movq    (%r13), %rax
// 131: 48 85 c0                      testq   %rax, %rax
// 134: 7f 22                         jg      0x158 <_JIT_ENTRY+0x158>
// 136: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000138:  R_X86_64_64  .rodata.str1.1
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_NegativeRefcount
// 14a: be cb 00 00 00                movl    $0xcb, %esi
// 14f: 4c 89 ea                      movq    %r13, %rdx
// 152: ff d0                         callq   *%rax
// 154: 49 8b 45 00                   movq    (%r13), %rax
// 158: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000015a:  R_X86_64_64  _Py_TrueStruct
// 162: 85 c0                         testl   %eax, %eax
// 164: 78 2d                         js      0x193 <_JIT_ENTRY+0x193>
// 166: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000168:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 170: ff d0                         callq   *%rax
// 172: 49 ff 4d 00                   decq    (%r13)
// 176: 75 1b                         jne     0x193 <_JIT_ENTRY+0x193>
// 178: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017a:  R_X86_64_64  _Py_Dealloc
// 182: 4c 89 ef                      movq    %r13, %rdi
// 185: ff d0                         callq   *%rax
// 187: eb 0a                         jmp     0x193 <_JIT_ENTRY+0x193>
// 189: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000018b:  R_X86_64_64  _Py_FalseStruct
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _JIT_OPARG
// 19d: 83 e0 01                      andl    $0x1, %eax
// 1a0: 49 89 6c c6 f8                movq    %rbp, -0x8(%r14,%rax,8)
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _JIT_CONTINUE
// 1af: 48 89 df                      movq    %rbx, %rdi
// 1b2: 4c 89 e6                      movq    %r12, %rsi
// 1b5: 4c 89 fa                      movq    %r15, %rdx
// 1b8: 48 83 c4 08                   addq    $0x8, %rsp
// 1bc: 5b                            popq    %rbx
// 1bd: 41 5c                         popq    %r12
// 1bf: 41 5d                         popq    %r13
// 1c1: 41 5e                         popq    %r14
// 1c3: 41 5f                         popq    %r15
// 1c5: 5d                            popq    %rbp
// 1c6: ff e0                         jmpq    *%rax
// 1c8: 
static const unsigned char _LOAD_ATTR_SLOTplus_TO_BOOL_STR_code_body[457] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xb2, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1f, 0x85, 0xc0, 0x79, 0x41, 0xeb, 0x60, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x4d, 0x8d, 0x24, 0xc6, 0x4d, 0x8b, 0x6c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x74, 0x3a, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x05, 0x00, 0xa1, 0x00, 0x00, 0x49, 0x39, 0xc5, 0x74, 0x5c, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xcb, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x2d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x1b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0xeb, 0x0a, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x89, 0x6c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_ATTR_SLOTplus_TO_BOOL_STR_code_holes[19] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x64, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0xf5, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x11a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x168, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_TO_BOOL_STR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_TO_BOOL_STR_data_holes[1];

// _LOAD_ATTR_SLOTplus_UNARY_INVERT
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_UNARY_INVERT.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 26: 4d 85 ed                      testq   %r13, %r13
// 29: 74 27                         je      0x52 <_JIT_ENTRY+0x52>
// 2b: 49 89 d7                      movq    %rdx, %r15
// 2e: 41 8b 45 00                   movl    (%r13), %eax
// 32: ff c0                         incl    %eax
// 34: 75 49                         jne     0x7f <_JIT_ENTRY+0x7f>
// 36: 49 8b 04 24                   movq    (%r12), %rax
// 3a: 48 85 c0                      testq   %rax, %rax
// 3d: 7e 59                         jle     0x98 <_JIT_ENTRY+0x98>
// 3f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000041:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 49: 85 c0                         testl   %eax, %eax
// 4b: 79 7b                         jns     0xc8 <_JIT_ENTRY+0xc8>
// 4d: e9 82 00 00 00                jmp     0xd4 <_JIT_ENTRY+0xd4>
// 52: 49 29 de                      subq    %rbx, %r14
// 55: 49 83 c6 b8                   addq    $-0x48, %r14
// 59: 49 c1 ee 03                   shrq    $0x3, %r14
// 5d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 61: 48 8b 03                      movq    (%rbx), %rax
// 64: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000066:  R_X86_64_64  _JIT_TARGET
// 6e: 89 c9                         movl    %ecx, %ecx
// 70: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 74: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 7a: e9 6a 01 00 00                jmp     0x1e9 <_JIT_ENTRY+0x1e9>
// 7f: 41 89 45 00                   movl    %eax, (%r13)
// 83: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000085:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 8d: ff d0                         callq   *%rax
// 8f: 49 8b 04 24                   movq    (%r12), %rax
// 93: 48 85 c0                      testq   %rax, %rax
// 96: 7f a7                         jg      0x3f <_JIT_ENTRY+0x3f>
// 98: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000009a:  R_X86_64_64  .rodata.str1.1
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _Py_NegativeRefcount
// ac: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// b1: 4c 89 e2                      movq    %r12, %rdx
// b4: ff d0                         callq   *%rax
// b6: 49 8b 04 24                   movq    (%r12), %rax
// ba: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000bc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c4: 85 c0                         testl   %eax, %eax
// c6: 78 0c                         js      0xd4 <_JIT_ENTRY+0xd4>
// c8: ff d1                         callq   *%rcx
// ca: 49 ff 0c 24                   decq    (%r12)
// ce: 0f 84 bf 00 00 00             je      0x193 <_JIT_ENTRY+0x193>
// d4: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// d8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000da:  R_X86_64_64  _JIT_OPARG
// e2: a8 01                         testb   $0x1, %al
// e4: 74 07                         je      0xed <_JIT_ENTRY+0xed>
// e6: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// ed: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000000ef:  R_X86_64_64  _JIT_OPARG
// f7: 83 e5 01                      andl    $0x1, %ebp
// fa: 4d 8b 6c ee f8                movq    -0x8(%r14,%rbp,8), %r13
// ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000101:  R_X86_64_64  PyNumber_Invert
// 109: 4c 89 ef                      movq    %r13, %rdi
// 10c: ff d0                         callq   *%rax
// 10e: 49 89 c4                      movq    %rax, %r12
// 111: 49 8b 45 00                   movq    (%r13), %rax
// 115: 48 85 c0                      testq   %rax, %rax
// 118: 7e 06                         jle     0x120 <_JIT_ENTRY+0x120>
// 11a: 85 c0                         testl   %eax, %eax
// 11c: 79 28                         jns     0x146 <_JIT_ENTRY+0x146>
// 11e: eb 38                         jmp     0x158 <_JIT_ENTRY+0x158>
// 120: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000122:  R_X86_64_64  .rodata.str1.1
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_NegativeRefcount
// 134: be e6 00 00 00                movl    $0xe6, %esi
// 139: 4c 89 ea                      movq    %r13, %rdx
// 13c: ff d0                         callq   *%rax
// 13e: 49 8b 45 00                   movq    (%r13), %rax
// 142: 85 c0                         testl   %eax, %eax
// 144: 78 12                         js      0x158 <_JIT_ENTRY+0x158>
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 150: ff d0                         callq   *%rax
// 152: 49 ff 4d 00                   decq    (%r13)
// 156: 74 65                         je      0x1bd <_JIT_ENTRY+0x1bd>
// 158: 4d 85 e4                      testq   %r12, %r12
// 15b: 74 74                         je      0x1d1 <_JIT_ENTRY+0x1d1>
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _JIT_OPARG
// 167: 83 e0 01                      andl    $0x1, %eax
// 16a: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 16e: 4d 89 64 c6 f8                movq    %r12, -0x8(%r14,%rax,8)
// 173: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000175:  R_X86_64_64  _JIT_CONTINUE
// 17d: 48 89 df                      movq    %rbx, %rdi
// 180: 4c 89 fa                      movq    %r15, %rdx
// 183: 48 83 c4 08                   addq    $0x8, %rsp
// 187: 5b                            popq    %rbx
// 188: 41 5c                         popq    %r12
// 18a: 41 5d                         popq    %r13
// 18c: 41 5e                         popq    %r14
// 18e: 41 5f                         popq    %r15
// 190: 5d                            popq    %rbp
// 191: ff e0                         jmpq    *%rax
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_Dealloc
// 19d: 4c 89 e7                      movq    %r12, %rdi
// 1a0: ff d0                         callq   *%rax
// 1a2: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 1a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a8:  R_X86_64_64  _JIT_OPARG
// 1b0: a8 01                         testb   $0x1, %al
// 1b2: 0f 85 2e ff ff ff             jne     0xe6 <_JIT_ENTRY+0xe6>
// 1b8: e9 30 ff ff ff                jmp     0xed <_JIT_ENTRY+0xed>
// 1bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bf:  R_X86_64_64  _Py_Dealloc
// 1c7: 4c 89 ef                      movq    %r13, %rdi
// 1ca: ff d0                         callq   *%rax
// 1cc: 4d 85 e4                      testq   %r12, %r12
// 1cf: 75 8c                         jne     0x15d <_JIT_ENTRY+0x15d>
// 1d1: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 1d5: 48 83 c0 f8                   addq    $-0x8, %rax
// 1d9: 48 29 d8                      subq    %rbx, %rax
// 1dc: 48 83 c0 b8                   addq    $-0x48, %rax
// 1e0: 48 c1 e8 03                   shrq    $0x3, %rax
// 1e4: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1e7: 31 c0                         xorl    %eax, %eax
// 1e9: 48 83 c4 08                   addq    $0x8, %rsp
// 1ed: 5b                            popq    %rbx
// 1ee: 41 5c                         popq    %r12
// 1f0: 41 5d                         popq    %r13
// 1f2: 41 5e                         popq    %r14
// 1f4: 41 5f                         popq    %r15
// 1f6: 5d                            popq    %rbp
// 1f7: c3                            retq
// 1f8: 
static const unsigned char _LOAD_ATTR_SLOTplus_UNARY_INVERT_code_body[505] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x27, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x49, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x59, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x79, 0x7b, 0xe9, 0x82, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x6a, 0x01, 0x00, 0x00, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xa7, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x0c, 0xff, 0xd1, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xbf, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe5, 0x01, 0x4d, 0x8b, 0x6c, 0xee, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe6, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x65, 0x4d, 0x85, 0xe4, 0x74, 0x74, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x4d, 0x89, 0x64, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x2e, 0xff, 0xff, 0xff, 0xe9, 0x30, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x75, 0x8c, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x83, 0xc0, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _LOAD_ATTR_SLOTplus_UNARY_INVERT_code_holes[19] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x41, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x66, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x9a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xbc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xda, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x101, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyNumber_Invert, 0x0},
    {0x122, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x175, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a8, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1bf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_UNARY_INVERT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_UNARY_INVERT_data_holes[1];

// _LOAD_ATTR_SLOTplus_UNARY_NEGATIVE
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_UNARY_NEGATIVE.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 26: 4d 85 ed                      testq   %r13, %r13
// 29: 74 27                         je      0x52 <_JIT_ENTRY+0x52>
// 2b: 49 89 d7                      movq    %rdx, %r15
// 2e: 41 8b 45 00                   movl    (%r13), %eax
// 32: ff c0                         incl    %eax
// 34: 75 49                         jne     0x7f <_JIT_ENTRY+0x7f>
// 36: 49 8b 04 24                   movq    (%r12), %rax
// 3a: 48 85 c0                      testq   %rax, %rax
// 3d: 7e 59                         jle     0x98 <_JIT_ENTRY+0x98>
// 3f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000041:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 49: 85 c0                         testl   %eax, %eax
// 4b: 79 7b                         jns     0xc8 <_JIT_ENTRY+0xc8>
// 4d: e9 82 00 00 00                jmp     0xd4 <_JIT_ENTRY+0xd4>
// 52: 49 29 de                      subq    %rbx, %r14
// 55: 49 83 c6 b8                   addq    $-0x48, %r14
// 59: 49 c1 ee 03                   shrq    $0x3, %r14
// 5d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 61: 48 8b 03                      movq    (%rbx), %rax
// 64: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000066:  R_X86_64_64  _JIT_TARGET
// 6e: 89 c9                         movl    %ecx, %ecx
// 70: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 74: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 7a: e9 6a 01 00 00                jmp     0x1e9 <_JIT_ENTRY+0x1e9>
// 7f: 41 89 45 00                   movl    %eax, (%r13)
// 83: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000085:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 8d: ff d0                         callq   *%rax
// 8f: 49 8b 04 24                   movq    (%r12), %rax
// 93: 48 85 c0                      testq   %rax, %rax
// 96: 7f a7                         jg      0x3f <_JIT_ENTRY+0x3f>
// 98: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000009a:  R_X86_64_64  .rodata.str1.1
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _Py_NegativeRefcount
// ac: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// b1: 4c 89 e2                      movq    %r12, %rdx
// b4: ff d0                         callq   *%rax
// b6: 49 8b 04 24                   movq    (%r12), %rax
// ba: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000bc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c4: 85 c0                         testl   %eax, %eax
// c6: 78 0c                         js      0xd4 <_JIT_ENTRY+0xd4>
// c8: ff d1                         callq   *%rcx
// ca: 49 ff 0c 24                   decq    (%r12)
// ce: 0f 84 bf 00 00 00             je      0x193 <_JIT_ENTRY+0x193>
// d4: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// d8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000da:  R_X86_64_64  _JIT_OPARG
// e2: a8 01                         testb   $0x1, %al
// e4: 74 07                         je      0xed <_JIT_ENTRY+0xed>
// e6: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// ed: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000000ef:  R_X86_64_64  _JIT_OPARG
// f7: 83 e5 01                      andl    $0x1, %ebp
// fa: 4d 8b 6c ee f8                movq    -0x8(%r14,%rbp,8), %r13
// ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000101:  R_X86_64_64  PyNumber_Negative
// 109: 4c 89 ef                      movq    %r13, %rdi
// 10c: ff d0                         callq   *%rax
// 10e: 49 89 c4                      movq    %rax, %r12
// 111: 49 8b 45 00                   movq    (%r13), %rax
// 115: 48 85 c0                      testq   %rax, %rax
// 118: 7e 06                         jle     0x120 <_JIT_ENTRY+0x120>
// 11a: 85 c0                         testl   %eax, %eax
// 11c: 79 28                         jns     0x146 <_JIT_ENTRY+0x146>
// 11e: eb 38                         jmp     0x158 <_JIT_ENTRY+0x158>
// 120: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000122:  R_X86_64_64  .rodata.str1.1
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_NegativeRefcount
// 134: be 71 00 00 00                movl    $0x71, %esi
// 139: 4c 89 ea                      movq    %r13, %rdx
// 13c: ff d0                         callq   *%rax
// 13e: 49 8b 45 00                   movq    (%r13), %rax
// 142: 85 c0                         testl   %eax, %eax
// 144: 78 12                         js      0x158 <_JIT_ENTRY+0x158>
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 150: ff d0                         callq   *%rax
// 152: 49 ff 4d 00                   decq    (%r13)
// 156: 74 65                         je      0x1bd <_JIT_ENTRY+0x1bd>
// 158: 4d 85 e4                      testq   %r12, %r12
// 15b: 74 74                         je      0x1d1 <_JIT_ENTRY+0x1d1>
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _JIT_OPARG
// 167: 83 e0 01                      andl    $0x1, %eax
// 16a: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 16e: 4d 89 64 c6 f8                movq    %r12, -0x8(%r14,%rax,8)
// 173: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000175:  R_X86_64_64  _JIT_CONTINUE
// 17d: 48 89 df                      movq    %rbx, %rdi
// 180: 4c 89 fa                      movq    %r15, %rdx
// 183: 48 83 c4 08                   addq    $0x8, %rsp
// 187: 5b                            popq    %rbx
// 188: 41 5c                         popq    %r12
// 18a: 41 5d                         popq    %r13
// 18c: 41 5e                         popq    %r14
// 18e: 41 5f                         popq    %r15
// 190: 5d                            popq    %rbp
// 191: ff e0                         jmpq    *%rax
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_Dealloc
// 19d: 4c 89 e7                      movq    %r12, %rdi
// 1a0: ff d0                         callq   *%rax
// 1a2: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 1a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a8:  R_X86_64_64  _JIT_OPARG
// 1b0: a8 01                         testb   $0x1, %al
// 1b2: 0f 85 2e ff ff ff             jne     0xe6 <_JIT_ENTRY+0xe6>
// 1b8: e9 30 ff ff ff                jmp     0xed <_JIT_ENTRY+0xed>
// 1bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bf:  R_X86_64_64  _Py_Dealloc
// 1c7: 4c 89 ef                      movq    %r13, %rdi
// 1ca: ff d0                         callq   *%rax
// 1cc: 4d 85 e4                      testq   %r12, %r12
// 1cf: 75 8c                         jne     0x15d <_JIT_ENTRY+0x15d>
// 1d1: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 1d5: 48 83 c0 f8                   addq    $-0x8, %rax
// 1d9: 48 29 d8                      subq    %rbx, %rax
// 1dc: 48 83 c0 b8                   addq    $-0x48, %rax
// 1e0: 48 c1 e8 03                   shrq    $0x3, %rax
// 1e4: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1e7: 31 c0                         xorl    %eax, %eax
// 1e9: 48 83 c4 08                   addq    $0x8, %rsp
// 1ed: 5b                            popq    %rbx
// 1ee: 41 5c                         popq    %r12
// 1f0: 41 5d                         popq    %r13
// 1f2: 41 5e                         popq    %r14
// 1f4: 41 5f                         popq    %r15
// 1f6: 5d                            popq    %rbp
// 1f7: c3                            retq
// 1f8: 
static const unsigned char _LOAD_ATTR_SLOTplus_UNARY_NEGATIVE_code_body[505] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x27, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x49, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x59, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x79, 0x7b, 0xe9, 0x82, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x6a, 0x01, 0x00, 0x00, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xa7, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x0c, 0xff, 0xd1, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xbf, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe5, 0x01, 0x4d, 0x8b, 0x6c, 0xee, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x71, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x65, 0x4d, 0x85, 0xe4, 0x74, 0x74, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x4d, 0x89, 0x64, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x2e, 0xff, 0xff, 0xff, 0xe9, 0x30, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x75, 0x8c, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x83, 0xc0, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _LOAD_ATTR_SLOTplus_UNARY_NEGATIVE_code_holes[19] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x41, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x66, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x9a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xbc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xda, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x101, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyNumber_Negative, 0x0},
    {0x122, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x175, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a8, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1bf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_UNARY_NEGATIVE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_UNARY_NEGATIVE_data_holes[1];

// _LOAD_ATTR_SLOTplus_UNARY_NOT
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_UNARY_NOT.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f6                      movq    %rsi, %r14
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 74 1d                         je      0x46 <_JIT_ENTRY+0x46>
// 29: 49 89 d7                      movq    %rdx, %r15
// 2c: 41 8b 45 00                   movl    (%r13), %eax
// 30: ff c0                         incl    %eax
// 32: 75 42                         jne     0x76 <_JIT_ENTRY+0x76>
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 52                         jle     0x8f <_JIT_ENTRY+0x8f>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 74                         jns     0xb5 <_JIT_ENTRY+0xb5>
// 41: e9 81 00 00 00                jmp     0xc7 <_JIT_ENTRY+0xc7>
// 46: 49 29 de                      subq    %rbx, %r14
// 49: 49 83 c6 b8                   addq    $-0x48, %r14
// 4d: 49 c1 ee 03                   shrq    $0x3, %r14
// 51: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 55: 48 8b 03                      movq    (%rbx), %rax
// 58: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005a:  R_X86_64_64  _JIT_TARGET
// 62: 89 c9                         movl    %ecx, %ecx
// 64: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 6c: 5b                            popq    %rbx
// 6d: 41 5c                         popq    %r12
// 6f: 41 5d                         popq    %r13
// 71: 41 5e                         popq    %r14
// 73: 41 5f                         popq    %r15
// 75: c3                            retq
// 76: 41 89 45 00                   movl    %eax, (%r13)
// 7a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007c:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 84: ff d0                         callq   *%rax
// 86: 49 8b 04 24                   movq    (%r12), %rax
// 8a: 48 85 c0                      testq   %rax, %rax
// 8d: 7f ae                         jg      0x3d <_JIT_ENTRY+0x3d>
// 8f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000091:  R_X86_64_64  .rodata.str1.1
// 99: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009b:  R_X86_64_64  _Py_NegativeRefcount
// a3: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// a8: 4c 89 e2                      movq    %r12, %rdx
// ab: ff d0                         callq   *%rax
// ad: 49 8b 04 24                   movq    (%r12), %rax
// b1: 85 c0                         testl   %eax, %eax
// b3: 78 12                         js      0xc7 <_JIT_ENTRY+0xc7>
// b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bf: ff d0                         callq   *%rax
// c1: 49 ff 0c 24                   decq    (%r12)
// c5: 74 5d                         je      0x124 <_JIT_ENTRY+0x124>
// c7: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cd:  R_X86_64_64  _JIT_OPARG
// d5: a8 01                         testb   $0x1, %al
// d7: 74 07                         je      0xe0 <_JIT_ENTRY+0xe0>
// d9: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// e0: 83 e0 01                      andl    $0x1, %eax
// e3: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// e7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000e9:  R_X86_64_64  _Py_FalseStruct
// f1: 49 39 4c c6 f8                cmpq    %rcx, -0x8(%r14,%rax,8)
// f6: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000000f8:  R_X86_64_64  _Py_TrueStruct
// 100: 48 0f 45 d1                   cmovneq %rcx, %rdx
// 104: 49 89 54 c6 f8                movq    %rdx, -0x8(%r14,%rax,8)
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _JIT_CONTINUE
// 113: 48 89 df                      movq    %rbx, %rdi
// 116: 4c 89 fa                      movq    %r15, %rdx
// 119: 5b                            popq    %rbx
// 11a: 41 5c                         popq    %r12
// 11c: 41 5d                         popq    %r13
// 11e: 41 5e                         popq    %r14
// 120: 41 5f                         popq    %r15
// 122: ff e0                         jmpq    *%rax
// 124: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000126:  R_X86_64_64  _Py_Dealloc
// 12e: 4c 89 e7                      movq    %r12, %rdi
// 131: ff d0                         callq   *%rax
// 133: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  _JIT_OPARG
// 141: a8 01                         testb   $0x1, %al
// 143: 75 94                         jne     0xd9 <_JIT_ENTRY+0xd9>
// 145: eb 99                         jmp     0xe0 <_JIT_ENTRY+0xe0>
// 147: 
static const unsigned char _LOAD_ATTR_SLOTplus_UNARY_NOT_code_body[328] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1d, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x42, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x52, 0x85, 0xc0, 0x79, 0x74, 0xe9, 0x81, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xae, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x5d, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0xc6, 0xf8, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x45, 0xd1, 0x49, 0x89, 0x54, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x75, 0x94, 0xeb, 0x99};
static const Hole _LOAD_ATTR_SLOTplus_UNARY_NOT_code_holes[13] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xcd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0xf8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x126, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_UNARY_NOT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_UNARY_NOT_data_holes[1];

// _LOAD_ATTR_SLOTplus_UNPACK_EX
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_UNPACK_EX.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 49 8b 2c 04                   movq    (%r12,%rax), %rbp
// 26: 48 85 ed                      testq   %rbp, %rbp
// 29: 74 26                         je      0x51 <_JIT_ENTRY+0x51>
// 2b: 49 89 d7                      movq    %rdx, %r15
// 2e: 8b 45 00                      movl    (%rbp), %eax
// 31: ff c0                         incl    %eax
// 33: 75 49                         jne     0x7e <_JIT_ENTRY+0x7e>
// 35: 49 8b 04 24                   movq    (%r12), %rax
// 39: 48 85 c0                      testq   %rax, %rax
// 3c: 7e 58                         jle     0x96 <_JIT_ENTRY+0x96>
// 3e: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000040:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 48: 85 c0                         testl   %eax, %eax
// 4a: 79 7a                         jns     0xc6 <_JIT_ENTRY+0xc6>
// 4c: e9 82 00 00 00                jmp     0xd3 <_JIT_ENTRY+0xd3>
// 51: 49 29 de                      subq    %rbx, %r14
// 54: 49 83 c6 b8                   addq    $-0x48, %r14
// 58: 49 c1 ee 03                   shrq    $0x3, %r14
// 5c: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 60: 48 8b 03                      movq    (%rbx), %rax
// 63: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000065:  R_X86_64_64  _JIT_TARGET
// 6d: 89 c9                         movl    %ecx, %ecx
// 6f: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 73: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 79: e9 41 01 00 00                jmp     0x1bf <_JIT_ENTRY+0x1bf>
// 7e: 89 45 00                      movl    %eax, (%rbp)
// 81: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000083:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 8b: ff d0                         callq   *%rax
// 8d: 49 8b 04 24                   movq    (%r12), %rax
// 91: 48 85 c0                      testq   %rax, %rax
// 94: 7f a8                         jg      0x3e <_JIT_ENTRY+0x3e>
// 96: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000098:  R_X86_64_64  .rodata.str1.1
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _Py_NegativeRefcount
// aa: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// af: 4c 89 e2                      movq    %r12, %rdx
// b2: ff d0                         callq   *%rax
// b4: 49 8b 04 24                   movq    (%r12), %rax
// b8: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000000ba:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c2: 85 c0                         testl   %eax, %eax
// c4: 78 0d                         js      0xd3 <_JIT_ENTRY+0xd3>
// c6: 41 ff d5                      callq   *%r13
// c9: 49 ff 0c 24                   decq    (%r12)
// cd: 0f 84 fb 00 00 00             je      0x1ce <_JIT_ENTRY+0x1ce>
// d3: 49 89 6e f8                   movq    %rbp, -0x8(%r14)
// d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d9:  R_X86_64_64  _JIT_OPARG
// e1: a8 01                         testb   $0x1, %al
// e3: 74 07                         je      0xec <_JIT_ENTRY+0xec>
// e5: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// ec: 0f b6 cc                      movzbl  %ah, %ecx
// ef: 0f b6 d0                      movzbl  %al, %edx
// f2: 83 e0 01                      andl    $0x1, %eax
// f5: 4d 8b 64 c6 f8                movq    -0x8(%r14,%rax,8), %r12
// fa: 8d 34 0a                      leal    (%rdx,%rcx), %esi
// fd: ff c6                         incl    %esi
// ff: 48 01 c6                      addq    %rax, %rsi
// 102: 4d 8d 04 f6                   leaq    (%r14,%rsi,8), %r8
// 106: 49 83 c0 f8                   addq    $-0x8, %r8
// 10a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010c:  R_X86_64_64  _PyEval_UnpackIterable
// 114: 4c 89 ff                      movq    %r15, %rdi
// 117: 4c 89 e6                      movq    %r12, %rsi
// 11a: ff d0                         callq   *%rax
// 11c: 89 c5                         movl    %eax, %ebp
// 11e: 49 8b 04 24                   movq    (%r12), %rax
// 122: 48 85 c0                      testq   %rax, %rax
// 125: 7e 06                         jle     0x12d <_JIT_ENTRY+0x12d>
// 127: 85 c0                         testl   %eax, %eax
// 129: 79 28                         jns     0x153 <_JIT_ENTRY+0x153>
// 12b: eb 3e                         jmp     0x16b <_JIT_ENTRY+0x16b>
// 12d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000012f:  R_X86_64_64  .rodata.str1.1
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  _Py_NegativeRefcount
// 141: be b7 03 00 00                movl    $0x3b7, %esi            # imm = 0x3B7
// 146: 4c 89 e2                      movq    %r12, %rdx
// 149: ff d0                         callq   *%rax
// 14b: 49 8b 04 24                   movq    (%r12), %rax
// 14f: 85 c0                         testl   %eax, %eax
// 151: 78 18                         js      0x16b <_JIT_ENTRY+0x16b>
// 153: 41 ff d5                      callq   *%r13
// 156: 49 ff 0c 24                   decq    (%r12)
// 15a: 75 0f                         jne     0x16b <_JIT_ENTRY+0x16b>
// 15c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015e:  R_X86_64_64  _Py_Dealloc
// 166: 4c 89 e7                      movq    %r12, %rdi
// 169: ff d0                         callq   *%rax
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _JIT_OPARG
// 175: 0f b6 c8                      movzbl  %al, %ecx
// 178: 0f b6 d4                      movzbl  %ah, %edx
// 17b: 01 ca                         addl    %ecx, %edx
// 17d: 83 e0 01                      andl    $0x1, %eax
// 180: 48 01 c2                      addq    %rax, %rdx
// 183: 85 ed                         testl   %ebp, %ebp
// 185: 48 0f 44 d0                   cmoveq  %rax, %rdx
// 189: 49 8d 34 d6                   leaq    (%r14,%rdx,8), %rsi
// 18d: 74 20                         je      0x1af <_JIT_ENTRY+0x1af>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _JIT_CONTINUE
// 199: 48 89 df                      movq    %rbx, %rdi
// 19c: 4c 89 fa                      movq    %r15, %rdx
// 19f: 48 83 c4 08                   addq    $0x8, %rsp
// 1a3: 5b                            popq    %rbx
// 1a4: 41 5c                         popq    %r12
// 1a6: 41 5d                         popq    %r13
// 1a8: 41 5e                         popq    %r14
// 1aa: 41 5f                         popq    %r15
// 1ac: 5d                            popq    %rbp
// 1ad: ff e0                         jmpq    *%rax
// 1af: 48 29 de                      subq    %rbx, %rsi
// 1b2: 48 83 c6 b0                   addq    $-0x50, %rsi
// 1b6: 48 c1 ee 03                   shrq    $0x3, %rsi
// 1ba: 89 73 40                      movl    %esi, 0x40(%rbx)
// 1bd: 31 c0                         xorl    %eax, %eax
// 1bf: 48 83 c4 08                   addq    $0x8, %rsp
// 1c3: 5b                            popq    %rbx
// 1c4: 41 5c                         popq    %r12
// 1c6: 41 5d                         popq    %r13
// 1c8: 41 5e                         popq    %r14
// 1ca: 41 5f                         popq    %r15
// 1cc: 5d                            popq    %rbp
// 1cd: c3                            retq
// 1ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d0:  R_X86_64_64  _Py_Dealloc
// 1d8: 4c 89 e7                      movq    %r12, %rdi
// 1db: ff d0                         callq   *%rax
// 1dd: 49 89 6e f8                   movq    %rbp, -0x8(%r14)
// 1e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e3:  R_X86_64_64  _JIT_OPARG
// 1eb: a8 01                         testb   $0x1, %al
// 1ed: 0f 85 f2 fe ff ff             jne     0xe5 <_JIT_ENTRY+0xe5>
// 1f3: e9 f4 fe ff ff                jmp     0xec <_JIT_ENTRY+0xec>
// 1f8: 
static const unsigned char _LOAD_ATTR_SLOTplus_UNPACK_EX_code_body[505] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8b, 0x2c, 0x04, 0x48, 0x85, 0xed, 0x74, 0x26, 0x49, 0x89, 0xd7, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x49, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x58, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x79, 0x7a, 0xe9, 0x82, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x41, 0x01, 0x00, 0x00, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xa8, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x0d, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xfb, 0x00, 0x00, 0x00, 0x49, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb6, 0xcc, 0x0f, 0xb6, 0xd0, 0x83, 0xe0, 0x01, 0x4d, 0x8b, 0x64, 0xc6, 0xf8, 0x8d, 0x34, 0x0a, 0xff, 0xc6, 0x48, 0x01, 0xc6, 0x4d, 0x8d, 0x04, 0xf6, 0x49, 0x83, 0xc0, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x3e, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb7, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb6, 0xc8, 0x0f, 0xb6, 0xd4, 0x01, 0xca, 0x83, 0xe0, 0x01, 0x48, 0x01, 0xc2, 0x85, 0xed, 0x48, 0x0f, 0x44, 0xd0, 0x49, 0x8d, 0x34, 0xd6, 0x74, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb0, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0xf2, 0xfe, 0xff, 0xff, 0xe9, 0xf4, 0xfe, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_UNPACK_EX_code_holes[17] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x40, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x65, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x83, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_UnpackIterable, 0x0},
    {0x12f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_UNPACK_EX_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_UNPACK_EX_data_holes[1];

// _LOAD_ATTR_SLOTplus_UNPACK_SEQUENCE
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_UNPACK_SEQUENCE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 49 8b 2c 04                   movq    (%r12,%rax), %rbp
// 26: 48 85 ed                      testq   %rbp, %rbp
// 29: 74 26                         je      0x51 <_JIT_ENTRY+0x51>
// 2b: 49 89 d7                      movq    %rdx, %r15
// 2e: 8b 45 00                      movl    (%rbp), %eax
// 31: ff c0                         incl    %eax
// 33: 75 49                         jne     0x7e <_JIT_ENTRY+0x7e>
// 35: 49 8b 04 24                   movq    (%r12), %rax
// 39: 48 85 c0                      testq   %rax, %rax
// 3c: 7e 58                         jle     0x96 <_JIT_ENTRY+0x96>
// 3e: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000040:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 48: 85 c0                         testl   %eax, %eax
// 4a: 79 7a                         jns     0xc6 <_JIT_ENTRY+0xc6>
// 4c: e9 82 00 00 00                jmp     0xd3 <_JIT_ENTRY+0xd3>
// 51: 49 29 de                      subq    %rbx, %r14
// 54: 49 83 c6 b8                   addq    $-0x48, %r14
// 58: 49 c1 ee 03                   shrq    $0x3, %r14
// 5c: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 60: 48 8b 03                      movq    (%rbx), %rax
// 63: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000065:  R_X86_64_64  _JIT_TARGET
// 6d: 89 c9                         movl    %ecx, %ecx
// 6f: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 73: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 79: e9 3f 01 00 00                jmp     0x1bd <_JIT_ENTRY+0x1bd>
// 7e: 89 45 00                      movl    %eax, (%rbp)
// 81: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000083:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 8b: ff d0                         callq   *%rax
// 8d: 49 8b 04 24                   movq    (%r12), %rax
// 91: 48 85 c0                      testq   %rax, %rax
// 94: 7f a8                         jg      0x3e <_JIT_ENTRY+0x3e>
// 96: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000098:  R_X86_64_64  .rodata.str1.1
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _Py_NegativeRefcount
// aa: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// af: 4c 89 e2                      movq    %r12, %rdx
// b2: ff d0                         callq   *%rax
// b4: 49 8b 04 24                   movq    (%r12), %rax
// b8: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000000ba:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c2: 85 c0                         testl   %eax, %eax
// c4: 78 0d                         js      0xd3 <_JIT_ENTRY+0xd3>
// c6: 41 ff d5                      callq   *%r13
// c9: 49 ff 0c 24                   decq    (%r12)
// cd: 0f 84 f9 00 00 00             je      0x1cc <_JIT_ENTRY+0x1cc>
// d3: 49 89 6e f8                   movq    %rbp, -0x8(%r14)
// d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d9:  R_X86_64_64  _JIT_OPARG
// e1: a8 01                         testb   $0x1, %al
// e3: 74 07                         je      0xec <_JIT_ENTRY+0xec>
// e5: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// ec: 0f b7 d0                      movzwl  %ax, %edx
// ef: 0f b7 c8                      movzwl  %ax, %ecx
// f2: 83 e0 01                      andl    $0x1, %eax
// f5: 4d 8b 64 c6 f8                movq    -0x8(%r14,%rax,8), %r12
// fa: 48 01 c1                      addq    %rax, %rcx
// fd: 4d 8d 04 ce                   leaq    (%r14,%rcx,8), %r8
// 101: 49 83 c0 f8                   addq    $-0x8, %r8
// 105: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000107:  R_X86_64_64  _PyEval_UnpackIterable
// 10f: 4c 89 ff                      movq    %r15, %rdi
// 112: 4c 89 e6                      movq    %r12, %rsi
// 115: b9 ff ff ff ff                movl    $0xffffffff, %ecx       # imm = 0xFFFFFFFF
// 11a: ff d0                         callq   *%rax
// 11c: 89 c5                         movl    %eax, %ebp
// 11e: 49 8b 04 24                   movq    (%r12), %rax
// 122: 48 85 c0                      testq   %rax, %rax
// 125: 7e 06                         jle     0x12d <_JIT_ENTRY+0x12d>
// 127: 85 c0                         testl   %eax, %eax
// 129: 79 28                         jns     0x153 <_JIT_ENTRY+0x153>
// 12b: eb 3e                         jmp     0x16b <_JIT_ENTRY+0x16b>
// 12d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000012f:  R_X86_64_64  .rodata.str1.1
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  _Py_NegativeRefcount
// 141: be 75 03 00 00                movl    $0x375, %esi            # imm = 0x375
// 146: 4c 89 e2                      movq    %r12, %rdx
// 149: ff d0                         callq   *%rax
// 14b: 49 8b 04 24                   movq    (%r12), %rax
// 14f: 85 c0                         testl   %eax, %eax
// 151: 78 18                         js      0x16b <_JIT_ENTRY+0x16b>
// 153: 41 ff d5                      callq   *%r13
// 156: 49 ff 0c 24                   decq    (%r12)
// 15a: 75 0f                         jne     0x16b <_JIT_ENTRY+0x16b>
// 15c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015e:  R_X86_64_64  _Py_Dealloc
// 166: 4c 89 e7                      movq    %r12, %rdi
// 169: ff d0                         callq   *%rax
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _JIT_OPARG
// 175: 0f b7 c8                      movzwl  %ax, %ecx
// 178: 83 e0 01                      andl    $0x1, %eax
// 17b: 48 01 c1                      addq    %rax, %rcx
// 17e: 48 ff c9                      decq    %rcx
// 181: 85 ed                         testl   %ebp, %ebp
// 183: 48 0f 44 c8                   cmoveq  %rax, %rcx
// 187: 49 8d 34 ce                   leaq    (%r14,%rcx,8), %rsi
// 18b: 74 20                         je      0x1ad <_JIT_ENTRY+0x1ad>
// 18d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018f:  R_X86_64_64  _JIT_CONTINUE
// 197: 48 89 df                      movq    %rbx, %rdi
// 19a: 4c 89 fa                      movq    %r15, %rdx
// 19d: 48 83 c4 08                   addq    $0x8, %rsp
// 1a1: 5b                            popq    %rbx
// 1a2: 41 5c                         popq    %r12
// 1a4: 41 5d                         popq    %r13
// 1a6: 41 5e                         popq    %r14
// 1a8: 41 5f                         popq    %r15
// 1aa: 5d                            popq    %rbp
// 1ab: ff e0                         jmpq    *%rax
// 1ad: 48 29 de                      subq    %rbx, %rsi
// 1b0: 48 83 c6 b0                   addq    $-0x50, %rsi
// 1b4: 48 c1 ee 03                   shrq    $0x3, %rsi
// 1b8: 89 73 40                      movl    %esi, 0x40(%rbx)
// 1bb: 31 c0                         xorl    %eax, %eax
// 1bd: 48 83 c4 08                   addq    $0x8, %rsp
// 1c1: 5b                            popq    %rbx
// 1c2: 41 5c                         popq    %r12
// 1c4: 41 5d                         popq    %r13
// 1c6: 41 5e                         popq    %r14
// 1c8: 41 5f                         popq    %r15
// 1ca: 5d                            popq    %rbp
// 1cb: c3                            retq
// 1cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ce:  R_X86_64_64  _Py_Dealloc
// 1d6: 4c 89 e7                      movq    %r12, %rdi
// 1d9: ff d0                         callq   *%rax
// 1db: 49 89 6e f8                   movq    %rbp, -0x8(%r14)
// 1df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e1:  R_X86_64_64  _JIT_OPARG
// 1e9: a8 01                         testb   $0x1, %al
// 1eb: 0f 85 f4 fe ff ff             jne     0xe5 <_JIT_ENTRY+0xe5>
// 1f1: e9 f6 fe ff ff                jmp     0xec <_JIT_ENTRY+0xec>
// 1f6: 
static const unsigned char _LOAD_ATTR_SLOTplus_UNPACK_SEQUENCE_code_body[503] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8b, 0x2c, 0x04, 0x48, 0x85, 0xed, 0x74, 0x26, 0x49, 0x89, 0xd7, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x49, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x58, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x79, 0x7a, 0xe9, 0x82, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x3f, 0x01, 0x00, 0x00, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xa8, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x0d, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xf9, 0x00, 0x00, 0x00, 0x49, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x0f, 0xb7, 0xc8, 0x83, 0xe0, 0x01, 0x4d, 0x8b, 0x64, 0xc6, 0xf8, 0x48, 0x01, 0xc1, 0x4d, 0x8d, 0x04, 0xce, 0x49, 0x83, 0xc0, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0xb9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x3e, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x75, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x83, 0xe0, 0x01, 0x48, 0x01, 0xc1, 0x48, 0xff, 0xc9, 0x85, 0xed, 0x48, 0x0f, 0x44, 0xc8, 0x49, 0x8d, 0x34, 0xce, 0x74, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb0, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0xf4, 0xfe, 0xff, 0xff, 0xe9, 0xf6, 0xfe, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_UNPACK_SEQUENCE_code_holes[17] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x40, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x65, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x83, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x107, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_UnpackIterable, 0x0},
    {0x12f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1ce, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_UNPACK_SEQUENCE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_UNPACK_SEQUENCE_data_holes[1];

// _LOAD_ATTR_SLOTplus_UNPACK_SEQUENCE_LIST
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_UNPACK_SEQUENCE_LIST.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 18: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001a:  R_X86_64_64  _JIT_OPERAND
// 22: 0f b7 c0                      movzwl  %ax, %eax
// 25: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 29: 4d 85 ed                      testq   %r13, %r13
// 2c: 74 1a                         je      0x48 <_JIT_ENTRY+0x48>
// 2e: 49 89 d6                      movq    %rdx, %r14
// 31: 41 8b 45 00                   movl    (%r13), %eax
// 35: ff c0                         incl    %eax
// 37: 75 17                         jne     0x50 <_JIT_ENTRY+0x50>
// 39: 49 8b 04 24                   movq    (%r12), %rax
// 3d: 48 85 c0                      testq   %rax, %rax
// 40: 7e 27                         jle     0x69 <_JIT_ENTRY+0x69>
// 42: 85 c0                         testl   %eax, %eax
// 44: 79 49                         jns     0x8f <_JIT_ENTRY+0x8f>
// 46: eb 68                         jmp     0xb0 <_JIT_ENTRY+0xb0>
// 48: 4c 89 f8                      movq    %r15, %rax
// 4b: e9 34 01 00 00                jmp     0x184 <_JIT_ENTRY+0x184>
// 50: 41 89 45 00                   movl    %eax, (%r13)
// 54: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000056:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 5e: ff d0                         callq   *%rax
// 60: 49 8b 04 24                   movq    (%r12), %rax
// 64: 48 85 c0                      testq   %rax, %rax
// 67: 7f d9                         jg      0x42 <_JIT_ENTRY+0x42>
// 69: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000006b:  R_X86_64_64  .rodata.str1.1
// 73: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000075:  R_X86_64_64  _Py_NegativeRefcount
// 7d: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 82: 4c 89 e2                      movq    %r12, %rdx
// 85: ff d0                         callq   *%rax
// 87: 49 8b 04 24                   movq    (%r12), %rax
// 8b: 85 c0                         testl   %eax, %eax
// 8d: 78 21                         js      0xb0 <_JIT_ENTRY+0xb0>
// 8f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000091:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 99: ff d0                         callq   *%rax
// 9b: 49 ff 0c 24                   decq    (%r12)
// 9f: 75 0f                         jne     0xb0 <_JIT_ENTRY+0xb0>
// a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a3:  R_X86_64_64  _Py_Dealloc
// ab: 4c 89 e7                      movq    %r12, %rdi
// ae: ff d0                         callq   *%rax
// b0: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b6:  R_X86_64_64  _JIT_OPARG
// be: a8 01                         testb   $0x1, %al
// c0: 74 07                         je      0xc9 <_JIT_ENTRY+0xc9>
// c2: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// c9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cb:  R_X86_64_64  _JIT_OPARG
// d3: 83 e1 01                      andl    $0x1, %ecx
// d6: 49 8d 04 cf                   leaq    (%r15,%rcx,8), %rax
// da: 49 8b 74 cf f8                movq    -0x8(%r15,%rcx,8), %rsi
// df: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000000e1:  R_X86_64_64  PyList_Type
// e9: 48 39 56 08                   cmpq    %rdx, 0x8(%rsi)
// ed: 0f 85 91 00 00 00             jne     0x184 <_JIT_ENTRY+0x184>
// f3: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000000f5:  R_X86_64_64  _JIT_OPARG
// fd: 0f b7 d2                      movzwl  %dx, %edx
// 100: 48 39 56 10                   cmpq    %rdx, 0x10(%rsi)
// 104: 75 7e                         jne     0x184 <_JIT_ENTRY+0x184>
// 106: 48 89 74 24 08                movq    %rsi, 0x8(%rsp)
// 10b: 4c 89 74 24 10                movq    %r14, 0x10(%rsp)
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _JIT_OPARG
// 11a: a9 ff ff 00 00                testl   $0xffff, %eax           # imm = 0xFFFF
// 11f: 0f 8e 95 00 00 00             jle     0x1ba <_JIT_ENTRY+0x1ba>
// 125: 4d 8d 2c cf                   leaq    (%r15,%rcx,8), %r13
// 129: 49 83 c5 f8                   addq    $-0x8, %r13
// 12d: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 132: 48 8b 68 18                   movq    0x18(%rax), %rbp
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  _JIT_OPARG
// 140: 44 0f b7 f0                   movzwl  %ax, %r14d
// 144: 49 ff c6                      incq    %r14
// 147: eb 18                         jmp     0x161 <_JIT_ENTRY+0x161>
// 149: 0f 1f 80 00 00 00 00          nopl    (%rax)
// 150: 4d 89 65 00                   movq    %r12, (%r13)
// 154: 49 83 c5 08                   addq    $0x8, %r13
// 158: 49 ff ce                      decq    %r14
// 15b: 49 83 fe 01                   cmpq    $0x1, %r14
// 15f: 7e 59                         jle     0x1ba <_JIT_ENTRY+0x1ba>
// 161: 41 8d 46 fe                   leal    -0x2(%r14), %eax
// 165: 4c 8b 64 c5 00                movq    (%rbp,%rax,8), %r12
// 16a: 41 8b 04 24                   movl    (%r12), %eax
// 16e: ff c0                         incl    %eax
// 170: 74 de                         je      0x150 <_JIT_ENTRY+0x150>
// 172: 41 89 04 24                   movl    %eax, (%r12)
// 176: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000178:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 180: ff d0                         callq   *%rax
// 182: eb cc                         jmp     0x150 <_JIT_ENTRY+0x150>
// 184: 48 29 d8                      subq    %rbx, %rax
// 187: 48 83 c0 b8                   addq    $-0x48, %rax
// 18b: 48 c1 e8 03                   shrq    $0x3, %rax
// 18f: 89 43 40                      movl    %eax, 0x40(%rbx)
// 192: 48 8b 03                      movq    (%rbx), %rax
// 195: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000197:  R_X86_64_64  _JIT_TARGET
// 19f: 89 c9                         movl    %ecx, %ecx
// 1a1: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1a5: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1ab: 48 83 c4 18                   addq    $0x18, %rsp
// 1af: 5b                            popq    %rbx
// 1b0: 41 5c                         popq    %r12
// 1b2: 41 5d                         popq    %r13
// 1b4: 41 5e                         popq    %r14
// 1b6: 41 5f                         popq    %r15
// 1b8: 5d                            popq    %rbp
// 1b9: c3                            retq
// 1ba: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 1bf: 49 8b 04 24                   movq    (%r12), %rax
// 1c3: 48 85 c0                      testq   %rax, %rax
// 1c6: 7f 22                         jg      0x1ea <_JIT_ENTRY+0x1ea>
// 1c8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ca:  R_X86_64_64  .rodata.str1.1
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _Py_NegativeRefcount
// 1dc: be ab 03 00 00                movl    $0x3ab, %esi            # imm = 0x3AB
// 1e1: 4c 89 e2                      movq    %r12, %rdx
// 1e4: ff d0                         callq   *%rax
// 1e6: 49 8b 04 24                   movq    (%r12), %rax
// 1ea: 85 c0                         testl   %eax, %eax
// 1ec: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1f1: 78 21                         js      0x214 <_JIT_ENTRY+0x214>
// 1f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1fd: ff d0                         callq   *%rax
// 1ff: 49 ff 0c 24                   decq    (%r12)
// 203: 75 0f                         jne     0x214 <_JIT_ENTRY+0x214>
// 205: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000207:  R_X86_64_64  _Py_Dealloc
// 20f: 4c 89 e7                      movq    %r12, %rdi
// 212: ff d0                         callq   *%rax
// 214: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000216:  R_X86_64_64  _JIT_OPARG
// 21e: 0f b7 c8                      movzwl  %ax, %ecx
// 221: 83 e0 01                      andl    $0x1, %eax
// 224: 48 01 c1                      addq    %rax, %rcx
// 227: 49 8d 34 cf                   leaq    (%r15,%rcx,8), %rsi
// 22b: 48 83 c6 f8                   addq    $-0x8, %rsi
// 22f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000231:  R_X86_64_64  _JIT_CONTINUE
// 239: 48 89 df                      movq    %rbx, %rdi
// 23c: 4c 89 f2                      movq    %r14, %rdx
// 23f: 48 83 c4 18                   addq    $0x18, %rsp
// 243: 5b                            popq    %rbx
// 244: 41 5c                         popq    %r12
// 246: 41 5d                         popq    %r13
// 248: 41 5e                         popq    %r14
// 24a: 41 5f                         popq    %r15
// 24c: 5d                            popq    %rbp
// 24d: ff e0                         jmpq    *%rax
// 24f: 
static const unsigned char _LOAD_ATTR_SLOTplus_UNPACK_SEQUENCE_LIST_code_body[592] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1a, 0x49, 0x89, 0xd6, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x17, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x27, 0x85, 0xc0, 0x79, 0x49, 0xeb, 0x68, 0x4c, 0x89, 0xf8, 0xe9, 0x34, 0x01, 0x00, 0x00, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xd9, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe1, 0x01, 0x49, 0x8d, 0x04, 0xcf, 0x49, 0x8b, 0x74, 0xcf, 0xf8, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x56, 0x08, 0x0f, 0x85, 0x91, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x48, 0x39, 0x56, 0x10, 0x75, 0x7e, 0x48, 0x89, 0x74, 0x24, 0x08, 0x4c, 0x89, 0x74, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa9, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x95, 0x00, 0x00, 0x00, 0x4d, 0x8d, 0x2c, 0xcf, 0x49, 0x83, 0xc5, 0xf8, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x68, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf0, 0x49, 0xff, 0xc6, 0xeb, 0x18, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x65, 0x00, 0x49, 0x83, 0xc5, 0x08, 0x49, 0xff, 0xce, 0x49, 0x83, 0xfe, 0x01, 0x7e, 0x59, 0x41, 0x8d, 0x46, 0xfe, 0x4c, 0x8b, 0x64, 0xc5, 0x00, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0xde, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xcc, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xab, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x83, 0xe0, 0x01, 0x48, 0x01, 0xc1, 0x49, 0x8d, 0x34, 0xcf, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_ATTR_SLOTplus_UNPACK_SEQUENCE_LIST_code_holes[21] = {
    {0x1a, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x56, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x75, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xb6, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyList_Type, 0x0},
    {0xf5, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x178, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x207, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x216, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x231, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_UNPACK_SEQUENCE_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_UNPACK_SEQUENCE_LIST_data_holes[1];

// _LOAD_ATTR_SLOTplus_UNPACK_SEQUENCE_TUPLE
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_UNPACK_SEQUENCE_TUPLE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f7                      movq    %rsi, %r15
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 26: 4d 85 ed                      testq   %r13, %r13
// 29: 74 1a                         je      0x45 <_JIT_ENTRY+0x45>
// 2b: 49 89 d6                      movq    %rdx, %r14
// 2e: 41 8b 45 00                   movl    (%r13), %eax
// 32: ff c0                         incl    %eax
// 34: 75 17                         jne     0x4d <_JIT_ENTRY+0x4d>
// 36: 49 8b 04 24                   movq    (%r12), %rax
// 3a: 48 85 c0                      testq   %rax, %rax
// 3d: 7e 27                         jle     0x66 <_JIT_ENTRY+0x66>
// 3f: 85 c0                         testl   %eax, %eax
// 41: 79 49                         jns     0x8c <_JIT_ENTRY+0x8c>
// 43: eb 68                         jmp     0xad <_JIT_ENTRY+0xad>
// 45: 4c 89 f8                      movq    %r15, %rax
// 48: e9 14 01 00 00                jmp     0x161 <_JIT_ENTRY+0x161>
// 4d: 41 89 45 00                   movl    %eax, (%r13)
// 51: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000053:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 5b: ff d0                         callq   *%rax
// 5d: 49 8b 04 24                   movq    (%r12), %rax
// 61: 48 85 c0                      testq   %rax, %rax
// 64: 7f d9                         jg      0x3f <_JIT_ENTRY+0x3f>
// 66: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000068:  R_X86_64_64  .rodata.str1.1
// 70: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000072:  R_X86_64_64  _Py_NegativeRefcount
// 7a: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 7f: 4c 89 e2                      movq    %r12, %rdx
// 82: ff d0                         callq   *%rax
// 84: 49 8b 04 24                   movq    (%r12), %rax
// 88: 85 c0                         testl   %eax, %eax
// 8a: 78 21                         js      0xad <_JIT_ENTRY+0xad>
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 96: ff d0                         callq   *%rax
// 98: 49 ff 0c 24                   decq    (%r12)
// 9c: 75 0f                         jne     0xad <_JIT_ENTRY+0xad>
// 9e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a0:  R_X86_64_64  _Py_Dealloc
// a8: 4c 89 e7                      movq    %r12, %rdi
// ab: ff d0                         callq   *%rax
// ad: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b3:  R_X86_64_64  _JIT_OPARG
// bb: a8 01                         testb   $0x1, %al
// bd: 74 07                         je      0xc6 <_JIT_ENTRY+0xc6>
// bf: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// c6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c8:  R_X86_64_64  _JIT_OPARG
// d0: 83 e1 01                      andl    $0x1, %ecx
// d3: 49 8d 04 cf                   leaq    (%r15,%rcx,8), %rax
// d7: 4d 8b 64 cf f8                movq    -0x8(%r15,%rcx,8), %r12
// dc: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000000de:  R_X86_64_64  PyTuple_Type
// e6: 49 39 54 24 08                cmpq    %rdx, 0x8(%r12)
// eb: 75 74                         jne     0x161 <_JIT_ENTRY+0x161>
// ed: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000000ef:  R_X86_64_64  _JIT_OPARG
// f7: 0f b7 d2                      movzwl  %dx, %edx
// fa: 49 39 54 24 10                cmpq    %rdx, 0x10(%r12)
// ff: 75 60                         jne     0x161 <_JIT_ENTRY+0x161>
// 101: 4c 89 34 24                   movq    %r14, (%rsp)
// 105: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000107:  R_X86_64_64  _JIT_OPARG
// 10f: a9 ff ff 00 00                testl   $0xffff, %eax           # imm = 0xFFFF
// 114: 0f 8e 7d 00 00 00             jle     0x197 <_JIT_ENTRY+0x197>
// 11a: 4d 8d 2c cf                   leaq    (%r15,%rcx,8), %r13
// 11e: 49 83 c5 f8                   addq    $-0x8, %r13
// 122: 0f b7 e8                      movzwl  %ax, %ebp
// 125: 48 ff c5                      incq    %rbp
// 128: eb 17                         jmp     0x141 <_JIT_ENTRY+0x141>
// 12a: 66 0f 1f 44 00 00             nopw    (%rax,%rax)
// 130: 4d 89 75 00                   movq    %r14, (%r13)
// 134: 49 83 c5 08                   addq    $0x8, %r13
// 138: 48 ff cd                      decq    %rbp
// 13b: 48 83 fd 01                   cmpq    $0x1, %rbp
// 13f: 7e 56                         jle     0x197 <_JIT_ENTRY+0x197>
// 141: 8d 45 fe                      leal    -0x2(%rbp), %eax
// 144: 4d 8b 74 c4 18                movq    0x18(%r12,%rax,8), %r14
// 149: 41 8b 06                      movl    (%r14), %eax
// 14c: ff c0                         incl    %eax
// 14e: 74 e0                         je      0x130 <_JIT_ENTRY+0x130>
// 150: 41 89 06                      movl    %eax, (%r14)
// 153: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000155:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 15d: ff d0                         callq   *%rax
// 15f: eb cf                         jmp     0x130 <_JIT_ENTRY+0x130>
// 161: 48 29 d8                      subq    %rbx, %rax
// 164: 48 83 c0 b8                   addq    $-0x48, %rax
// 168: 48 c1 e8 03                   shrq    $0x3, %rax
// 16c: 89 43 40                      movl    %eax, 0x40(%rbx)
// 16f: 48 8b 03                      movq    (%rbx), %rax
// 172: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000174:  R_X86_64_64  _JIT_TARGET
// 17c: 89 c9                         movl    %ecx, %ecx
// 17e: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 182: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 188: 48 83 c4 08                   addq    $0x8, %rsp
// 18c: 5b                            popq    %rbx
// 18d: 41 5c                         popq    %r12
// 18f: 41 5d                         popq    %r13
// 191: 41 5e                         popq    %r14
// 193: 41 5f                         popq    %r15
// 195: 5d                            popq    %rbp
// 196: c3                            retq
// 197: 49 8b 04 24                   movq    (%r12), %rax
// 19b: 48 85 c0                      testq   %rax, %rax
// 19e: 7f 22                         jg      0x1c2 <_JIT_ENTRY+0x1c2>
// 1a0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a2:  R_X86_64_64  .rodata.str1.1
// 1aa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ac:  R_X86_64_64  _Py_NegativeRefcount
// 1b4: be 99 03 00 00                movl    $0x399, %esi            # imm = 0x399
// 1b9: 4c 89 e2                      movq    %r12, %rdx
// 1bc: ff d0                         callq   *%rax
// 1be: 49 8b 04 24                   movq    (%r12), %rax
// 1c2: 85 c0                         testl   %eax, %eax
// 1c4: 4c 8b 34 24                   movq    (%rsp), %r14
// 1c8: 78 21                         js      0x1eb <_JIT_ENTRY+0x1eb>
// 1ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d4: ff d0                         callq   *%rax
// 1d6: 49 ff 0c 24                   decq    (%r12)
// 1da: 75 0f                         jne     0x1eb <_JIT_ENTRY+0x1eb>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _Py_Dealloc
// 1e6: 4c 89 e7                      movq    %r12, %rdi
// 1e9: ff d0                         callq   *%rax
// 1eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ed:  R_X86_64_64  _JIT_OPARG
// 1f5: 0f b7 c8                      movzwl  %ax, %ecx
// 1f8: 83 e0 01                      andl    $0x1, %eax
// 1fb: 48 01 c1                      addq    %rax, %rcx
// 1fe: 49 8d 34 cf                   leaq    (%r15,%rcx,8), %rsi
// 202: 48 83 c6 f8                   addq    $-0x8, %rsi
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _JIT_CONTINUE
// 210: 48 89 df                      movq    %rbx, %rdi
// 213: 4c 89 f2                      movq    %r14, %rdx
// 216: 48 83 c4 08                   addq    $0x8, %rsp
// 21a: 5b                            popq    %rbx
// 21b: 41 5c                         popq    %r12
// 21d: 41 5d                         popq    %r13
// 21f: 41 5e                         popq    %r14
// 221: 41 5f                         popq    %r15
// 223: 5d                            popq    %rbp
// 224: ff e0                         jmpq    *%rax
// 226: 
static const unsigned char _LOAD_ATTR_SLOTplus_UNPACK_SEQUENCE_TUPLE_code_body[551] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1a, 0x49, 0x89, 0xd6, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x17, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x27, 0x85, 0xc0, 0x79, 0x49, 0xeb, 0x68, 0x4c, 0x89, 0xf8, 0xe9, 0x14, 0x01, 0x00, 0x00, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xd9, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe1, 0x01, 0x49, 0x8d, 0x04, 0xcf, 0x4d, 0x8b, 0x64, 0xcf, 0xf8, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x54, 0x24, 0x08, 0x75, 0x74, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x49, 0x39, 0x54, 0x24, 0x10, 0x75, 0x60, 0x4c, 0x89, 0x34, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa9, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x7d, 0x00, 0x00, 0x00, 0x4d, 0x8d, 0x2c, 0xcf, 0x49, 0x83, 0xc5, 0xf8, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0xeb, 0x17, 0x66, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x4d, 0x89, 0x75, 0x00, 0x49, 0x83, 0xc5, 0x08, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x7e, 0x56, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x74, 0xc4, 0x18, 0x41, 0x8b, 0x06, 0xff, 0xc0, 0x74, 0xe0, 0x41, 0x89, 0x06, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xcf, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x99, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x34, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x83, 0xe0, 0x01, 0x48, 0x01, 0xc1, 0x49, 0x8d, 0x34, 0xcf, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_ATTR_SLOTplus_UNPACK_SEQUENCE_TUPLE_code_holes[20] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x53, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x68, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x72, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xc8, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xde, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x107, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x155, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1a2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1ac, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1cc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_UNPACK_SEQUENCE_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_UNPACK_SEQUENCE_TUPLE_data_holes[1];

// _LOAD_ATTR_SLOTplus_UNPACK_SEQUENCE_TWO_TUPLE
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_UNPACK_SEQUENCE_TWO_TUPLE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 26: 4d 85 ed                      testq   %r13, %r13
// 29: 0f 84 0e 01 00 00             je      0x13d <_JIT_ENTRY+0x13d>
// 2f: 49 89 d7                      movq    %rdx, %r15
// 32: 41 8b 45 00                   movl    (%r13), %eax
// 36: ff c0                         incl    %eax
// 38: 75 0f                         jne     0x49 <_JIT_ENTRY+0x49>
// 3a: 49 8b 04 24                   movq    (%r12), %rax
// 3e: 48 85 c0                      testq   %rax, %rax
// 41: 7e 1f                         jle     0x62 <_JIT_ENTRY+0x62>
// 43: 85 c0                         testl   %eax, %eax
// 45: 79 41                         jns     0x88 <_JIT_ENTRY+0x88>
// 47: eb 60                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 49: 41 89 45 00                   movl    %eax, (%r13)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 57: ff d0                         callq   *%rax
// 59: 49 8b 04 24                   movq    (%r12), %rax
// 5d: 48 85 c0                      testq   %rax, %rax
// 60: 7f e1                         jg      0x43 <_JIT_ENTRY+0x43>
// 62: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000064:  R_X86_64_64  .rodata.str1.1
// 6c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006e:  R_X86_64_64  _Py_NegativeRefcount
// 76: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 7b: 4c 89 e2                      movq    %r12, %rdx
// 7e: ff d0                         callq   *%rax
// 80: 49 8b 04 24                   movq    (%r12), %rax
// 84: 85 c0                         testl   %eax, %eax
// 86: 78 21                         js      0xa9 <_JIT_ENTRY+0xa9>
// 88: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 92: ff d0                         callq   *%rax
// 94: 49 ff 0c 24                   decq    (%r12)
// 98: 75 0f                         jne     0xa9 <_JIT_ENTRY+0xa9>
// 9a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009c:  R_X86_64_64  _Py_Dealloc
// a4: 4c 89 e7                      movq    %r12, %rdi
// a7: ff d0                         callq   *%rax
// a9: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _JIT_OPARG
// b7: a8 01                         testb   $0x1, %al
// b9: 74 07                         je      0xc2 <_JIT_ENTRY+0xc2>
// bb: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// c2: 83 e0 01                      andl    $0x1, %eax
// c5: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// c9: 4d 8b 64 c6 f8                movq    -0x8(%r14,%rax,8), %r12
// ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d0:  R_X86_64_64  PyTuple_Type
// d8: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// dd: 75 5b                         jne     0x13a <_JIT_ENTRY+0x13a>
// df: 49 83 7c 24 10 02             cmpq    $0x2, 0x10(%r12)
// e5: 75 53                         jne     0x13a <_JIT_ENTRY+0x13a>
// e7: 49 8b 6c 24 20                movq    0x20(%r12), %rbp
// ec: 8b 45 00                      movl    (%rbp), %eax
// ef: ff c0                         incl    %eax
// f1: 74 0f                         je      0x102 <_JIT_ENTRY+0x102>
// f3: 89 45 00                      movl    %eax, (%rbp)
// f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f8:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 100: ff d0                         callq   *%rax
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _JIT_OPARG
// 10c: 83 e0 01                      andl    $0x1, %eax
// 10f: 49 89 6c c6 f8                movq    %rbp, -0x8(%r14,%rax,8)
// 114: 49 8b 6c 24 18                movq    0x18(%r12), %rbp
// 119: 8b 45 00                      movl    (%rbp), %eax
// 11c: ff c0                         incl    %eax
// 11e: 75 54                         jne     0x174 <_JIT_ENTRY+0x174>
// 120: 49 89 6d 00                   movq    %rbp, (%r13)
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 48 85 c0                      testq   %rax, %rax
// 12b: 7e 63                         jle     0x190 <_JIT_ENTRY+0x190>
// 12d: 85 c0                         testl   %eax, %eax
// 12f: 0f 89 81 00 00 00             jns     0x1b6 <_JIT_ENTRY+0x1b6>
// 135: e9 9d 00 00 00                jmp     0x1d7 <_JIT_ENTRY+0x1d7>
// 13a: 4d 89 ee                      movq    %r13, %r14
// 13d: 49 29 de                      subq    %rbx, %r14
// 140: 49 83 c6 b8                   addq    $-0x48, %r14
// 144: 49 c1 ee 03                   shrq    $0x3, %r14
// 148: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 14c: 48 8b 03                      movq    (%rbx), %rax
// 14f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000151:  R_X86_64_64  _JIT_TARGET
// 159: 89 c9                         movl    %ecx, %ecx
// 15b: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 15f: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 165: 48 83 c4 08                   addq    $0x8, %rsp
// 169: 5b                            popq    %rbx
// 16a: 41 5c                         popq    %r12
// 16c: 41 5d                         popq    %r13
// 16e: 41 5e                         popq    %r14
// 170: 41 5f                         popq    %r15
// 172: 5d                            popq    %rbp
// 173: c3                            retq
// 174: 89 45 00                      movl    %eax, (%rbp)
// 177: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000179:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 181: ff d0                         callq   *%rax
// 183: 49 89 6d 00                   movq    %rbp, (%r13)
// 187: 49 8b 04 24                   movq    (%r12), %rax
// 18b: 48 85 c0                      testq   %rax, %rax
// 18e: 7f 9d                         jg      0x12d <_JIT_ENTRY+0x12d>
// 190: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000192:  R_X86_64_64  .rodata.str1.1
// 19a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019c:  R_X86_64_64  _Py_NegativeRefcount
// 1a4: be 87 03 00 00                movl    $0x387, %esi            # imm = 0x387
// 1a9: 4c 89 e2                      movq    %r12, %rdx
// 1ac: ff d0                         callq   *%rax
// 1ae: 49 8b 04 24                   movq    (%r12), %rax
// 1b2: 85 c0                         testl   %eax, %eax
// 1b4: 78 21                         js      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 ff 0c 24                   decq    (%r12)
// 1c6: 75 0f                         jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_Dealloc
// 1d2: 4c 89 e7                      movq    %r12, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d9:  R_X86_64_64  _JIT_OPARG
// 1e1: 0f b7 c8                      movzwl  %ax, %ecx
// 1e4: 83 e0 01                      andl    $0x1, %eax
// 1e7: 48 01 c1                      addq    %rax, %rcx
// 1ea: 49 8d 34 ce                   leaq    (%r14,%rcx,8), %rsi
// 1ee: 48 83 c6 f8                   addq    $-0x8, %rsi
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _JIT_CONTINUE
// 1fc: 48 89 df                      movq    %rbx, %rdi
// 1ff: 4c 89 fa                      movq    %r15, %rdx
// 202: 48 83 c4 08                   addq    $0x8, %rsp
// 206: 5b                            popq    %rbx
// 207: 41 5c                         popq    %r12
// 209: 41 5d                         popq    %r13
// 20b: 41 5e                         popq    %r14
// 20d: 41 5f                         popq    %r15
// 20f: 5d                            popq    %rbp
// 210: ff e0                         jmpq    *%rax
// 212: 
static const unsigned char _LOAD_ATTR_SLOTplus_UNPACK_SEQUENCE_TWO_TUPLE_code_body[531] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x0e, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1f, 0x85, 0xc0, 0x79, 0x41, 0xeb, 0x60, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x4d, 0x8d, 0x2c, 0xc6, 0x4d, 0x8b, 0x64, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x5b, 0x49, 0x83, 0x7c, 0x24, 0x10, 0x02, 0x75, 0x53, 0x49, 0x8b, 0x6c, 0x24, 0x20, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x0f, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x89, 0x6c, 0xc6, 0xf8, 0x49, 0x8b, 0x6c, 0x24, 0x18, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x54, 0x49, 0x89, 0x6d, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x63, 0x85, 0xc0, 0x0f, 0x89, 0x81, 0x00, 0x00, 0x00, 0xe9, 0x9d, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x89, 0x6d, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x9d, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x87, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x83, 0xe0, 0x01, 0x48, 0x01, 0xc1, 0x49, 0x8d, 0x34, 0xce, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_ATTR_SLOTplus_UNPACK_SEQUENCE_TWO_TUPLE_code_holes[19] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x64, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0xf8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x179, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x19c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_UNPACK_SEQUENCE_TWO_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_UNPACK_SEQUENCE_TWO_TUPLE_data_holes[1];

// _LOAD_ATTR_SLOTplus_WITH_EXCEPT_START
// 
// /tmp/tmp4qflb2_r/_LOAD_ATTR_SLOTplus_WITH_EXCEPT_START.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 38                   subq    $0x38, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPERAND
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: 4d 8b 3c 04                   movq    (%r12,%rax), %r15
// 26: 4d 85 ff                      testq   %r15, %r15
// 29: 74 22                         je      0x4d <_JIT_ENTRY+0x4d>
// 2b: 48 89 3c 24                   movq    %rdi, (%rsp)
// 2f: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 34: 41 8b 07                      movl    (%r15), %eax
// 37: ff c0                         incl    %eax
// 39: 75 3f                         jne     0x7a <_JIT_ENTRY+0x7a>
// 3b: 49 8b 04 24                   movq    (%r12), %rax
// 3f: 48 85 c0                      testq   %rax, %rax
// 42: 7e 4e                         jle     0x92 <_JIT_ENTRY+0x92>
// 44: 85 c0                         testl   %eax, %eax
// 46: 79 70                         jns     0xb8 <_JIT_ENTRY+0xb8>
// 48: e9 81 00 00 00                jmp     0xce <_JIT_ENTRY+0xce>
// 4d: 49 29 fe                      subq    %rdi, %r14
// 50: 49 83 c6 b8                   addq    $-0x48, %r14
// 54: 49 c1 ee 03                   shrq    $0x3, %r14
// 58: 44 89 77 40                   movl    %r14d, 0x40(%rdi)
// 5c: 48 8b 07                      movq    (%rdi), %rax
// 5f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000061:  R_X86_64_64  _JIT_TARGET
// 69: 89 c9                         movl    %ecx, %ecx
// 6b: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 6f: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 75: e9 92 01 00 00                jmp     0x20c <_JIT_ENTRY+0x20c>
// 7a: 41 89 07                      movl    %eax, (%r15)
// 7d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007f:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 87: ff d0                         callq   *%rax
// 89: 49 8b 04 24                   movq    (%r12), %rax
// 8d: 48 85 c0                      testq   %rax, %rax
// 90: 7f b2                         jg      0x44 <_JIT_ENTRY+0x44>
// 92: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000094:  R_X86_64_64  .rodata.str1.1
// 9c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009e:  R_X86_64_64  _Py_NegativeRefcount
// a6: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// ab: 4c 89 e2                      movq    %r12, %rdx
// ae: ff d0                         callq   *%rax
// b0: 49 8b 04 24                   movq    (%r12), %rax
// b4: 85 c0                         testl   %eax, %eax
// b6: 78 16                         js      0xce <_JIT_ENTRY+0xce>
// b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ba:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c2: ff d0                         callq   *%rax
// c4: 49 ff 0c 24                   decq    (%r12)
// c8: 0f 84 4d 01 00 00             je      0x21b <_JIT_ENTRY+0x21b>
// ce: 4d 89 7e f8                   movq    %r15, -0x8(%r14)
// d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d4:  R_X86_64_64  _JIT_OPARG
// dc: a8 01                         testb   $0x1, %al
// de: 74 07                         je      0xe7 <_JIT_ENTRY+0xe7>
// e0: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// e7: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 00000000000000e9:  R_X86_64_64  _JIT_OPARG
// f1: 41 83 e7 01                   andl    $0x1, %r15d
// f5: 4b 8b 5c fe e0                movq    -0x20(%r14,%r15,8), %rbx
// fa: 4f 8b 6c fe f8                movq    -0x8(%r14,%r15,8), %r13
// ff: 4d 8b 65 08                   movq    0x8(%r13), %r12
// 103: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000105:  R_X86_64_64  PyException_GetTraceback
// 10d: 4c 89 ef                      movq    %r13, %rdi
// 110: ff d0                         callq   *%rax
// 112: 48 85 c0                      testq   %rax, %rax
// 115: 74 11                         je      0x128 <_JIT_ENTRY+0x128>
// 117: 48 89 c5                      movq    %rax, %rbp
// 11a: 48 8b 00                      movq    (%rax), %rax
// 11d: 48 85 c0                      testq   %rax, %rax
// 120: 7e 12                         jle     0x134 <_JIT_ENTRY+0x134>
// 122: 85 c0                         testl   %eax, %eax
// 124: 79 34                         jns     0x15a <_JIT_ENTRY+0x15a>
// 126: eb 53                         jmp     0x17b <_JIT_ENTRY+0x17b>
// 128: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000012a:  R_X86_64_64  _Py_NoneStruct
// 132: eb 47                         jmp     0x17b <_JIT_ENTRY+0x17b>
// 134: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000136:  R_X86_64_64  .rodata.str1.1
// 13e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000140:  R_X86_64_64  _Py_NegativeRefcount
// 148: be 64 09 00 00                movl    $0x964, %esi            # imm = 0x964
// 14d: 48 89 ea                      movq    %rbp, %rdx
// 150: ff d0                         callq   *%rax
// 152: 48 8b 45 00                   movq    (%rbp), %rax
// 156: 85 c0                         testl   %eax, %eax
// 158: 78 21                         js      0x17b <_JIT_ENTRY+0x17b>
// 15a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 164: ff d0                         callq   *%rax
// 166: 48 ff 4d 00                   decq    (%rbp)
// 16a: 75 0f                         jne     0x17b <_JIT_ENTRY+0x17b>
// 16c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016e:  R_X86_64_64  _Py_Dealloc
// 176: 48 89 ef                      movq    %rbp, %rdi
// 179: ff d0                         callq   *%rax
// 17b: 48 89 df                      movq    %rbx, %rdi
// 17e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 187: 48 8d 74 24 18                leaq    0x18(%rsp), %rsi
// 18c: 4c 89 64 24 18                movq    %r12, 0x18(%rsp)
// 191: 4c 89 6c 24 20                movq    %r13, 0x20(%rsp)
// 196: 48 89 6c 24 28                movq    %rbp, 0x28(%rsp)
// 19b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019d:  R_X86_64_64  PyObject_Vectorcall
// 1a5: 48 ba 03 00 00 00 00 00 00 80 movabsq $-0x7ffffffffffffffd, %rdx # imm = 0x8000000000000003
// 1af: 31 c9                         xorl    %ecx, %ecx
// 1b1: ff d0                         callq   *%rax
// 1b3: 48 85 c0                      testq   %rax, %rax
// 1b6: 74 3c                         je      0x1f4 <_JIT_ENTRY+0x1f4>
// 1b8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ba:  R_X86_64_64  _JIT_OPARG
// 1c2: 83 e1 01                      andl    $0x1, %ecx
// 1c5: 49 89 04 ce                   movq    %rax, (%r14,%rcx,8)
// 1c9: 49 8d 34 ce                   leaq    (%r14,%rcx,8), %rsi
// 1cd: 48 83 c6 08                   addq    $0x8, %rsi
// 1d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d3:  R_X86_64_64  _JIT_CONTINUE
// 1db: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1df: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 1e4: 48 83 c4 38                   addq    $0x38, %rsp
// 1e8: 5b                            popq    %rbx
// 1e9: 41 5c                         popq    %r12
// 1eb: 41 5d                         popq    %r13
// 1ed: 41 5e                         popq    %r14
// 1ef: 41 5f                         popq    %r15
// 1f1: 5d                            popq    %rbp
// 1f2: ff e0                         jmpq    *%rax
// 1f4: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 1f8: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1fc: 48 29 c8                      subq    %rcx, %rax
// 1ff: 48 83 c0 b8                   addq    $-0x48, %rax
// 203: 48 c1 e8 03                   shrq    $0x3, %rax
// 207: 89 41 40                      movl    %eax, 0x40(%rcx)
// 20a: 31 c0                         xorl    %eax, %eax
// 20c: 48 83 c4 38                   addq    $0x38, %rsp
// 210: 5b                            popq    %rbx
// 211: 41 5c                         popq    %r12
// 213: 41 5d                         popq    %r13
// 215: 41 5e                         popq    %r14
// 217: 41 5f                         popq    %r15
// 219: 5d                            popq    %rbp
// 21a: c3                            retq
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_Dealloc
// 225: 4c 89 e7                      movq    %r12, %rdi
// 228: ff d0                         callq   *%rax
// 22a: 4d 89 7e f8                   movq    %r15, -0x8(%r14)
// 22e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000230:  R_X86_64_64  _JIT_OPARG
// 238: a8 01                         testb   $0x1, %al
// 23a: 0f 85 a0 fe ff ff             jne     0xe0 <_JIT_ENTRY+0xe0>
// 240: e9 a2 fe ff ff                jmp     0xe7 <_JIT_ENTRY+0xe7>
// 245: 
static const unsigned char _LOAD_ATTR_SLOTplus_WITH_EXCEPT_START_code_body[582] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x38, 0x49, 0x89, 0xf6, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x3c, 0x04, 0x4d, 0x85, 0xff, 0x74, 0x22, 0x48, 0x89, 0x3c, 0x24, 0x48, 0x89, 0x54, 0x24, 0x08, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x75, 0x3f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4e, 0x85, 0xc0, 0x79, 0x70, 0xe9, 0x81, 0x00, 0x00, 0x00, 0x49, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x92, 0x01, 0x00, 0x00, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x4d, 0x01, 0x00, 0x00, 0x4d, 0x89, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x83, 0xe7, 0x01, 0x4b, 0x8b, 0x5c, 0xfe, 0xe0, 0x4f, 0x8b, 0x6c, 0xfe, 0xf8, 0x4d, 0x8b, 0x65, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x11, 0x48, 0x89, 0xc5, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x79, 0x34, 0xeb, 0x53, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x47, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x64, 0x09, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x89, 0xdf, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x74, 0x24, 0x18, 0x4c, 0x89, 0x64, 0x24, 0x18, 0x4c, 0x89, 0x6c, 0x24, 0x20, 0x48, 0x89, 0x6c, 0x24, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x3c, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe1, 0x01, 0x49, 0x89, 0x04, 0xce, 0x49, 0x8d, 0x34, 0xce, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x29, 0xc8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x41, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0xa0, 0xfe, 0xff, 0xff, 0xe9, 0xa2, 0xfe, 0xff, 0xff};
static const Hole _LOAD_ATTR_SLOTplus_WITH_EXCEPT_START_code_holes[20] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x94, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyException_GetTraceback, 0x0},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x136, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x140, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Vectorcall, 0x0},
    {0x1ba, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x230, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOTplus_WITH_EXCEPT_START_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOTplus_WITH_EXCEPT_START_data_holes[1];

#define INIT_STENCIL(STENCIL) {                         \
    .body_size = Py_ARRAY_LENGTH(STENCIL##_body) - 1,   \
    .body = STENCIL##_body,                             \
    .holes_size = Py_ARRAY_LENGTH(STENCIL##_holes) - 1, \
    .holes = STENCIL##_holes,                           \
}

#define INIT_STENCIL_GROUP(OP) {     \
    .code = INIT_STENCIL(OP##_code), \
    .data = INIT_STENCIL(OP##_data), \
}

static const StencilGroup stencil_groups[512] = {
    [_LOAD_ATTR_SLOTplus_BEFORE_ASYNC_WITH] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_BEFORE_ASYNC_WITH),
    [_LOAD_ATTR_SLOTplus_BEFORE_WITH] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_BEFORE_WITH),
    [_LOAD_ATTR_SLOTplus_BINARY_OP] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_BINARY_OP),
    [_LOAD_ATTR_SLOTplus_BINARY_OP_ADD_FLOAT] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_BINARY_OP_ADD_FLOAT),
    [_LOAD_ATTR_SLOTplus_BINARY_OP_ADD_INT] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_BINARY_OP_ADD_INT),
    [_LOAD_ATTR_SLOTplus_BINARY_OP_ADD_UNICODE] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_BINARY_OP_ADD_UNICODE),
    [_LOAD_ATTR_SLOTplus_BINARY_OP_MULTIPLY_FLOAT] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_BINARY_OP_MULTIPLY_FLOAT),
    [_LOAD_ATTR_SLOTplus_BINARY_OP_MULTIPLY_INT] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_BINARY_OP_MULTIPLY_INT),
    [_LOAD_ATTR_SLOTplus_BINARY_OP_SUBTRACT_FLOAT] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_BINARY_OP_SUBTRACT_FLOAT),
    [_LOAD_ATTR_SLOTplus_BINARY_OP_SUBTRACT_INT] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_BINARY_OP_SUBTRACT_INT),
    [_LOAD_ATTR_SLOTplus_BINARY_SLICE] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_BINARY_SLICE),
    [_LOAD_ATTR_SLOTplus_BINARY_SUBSCR] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_BINARY_SUBSCR),
    [_LOAD_ATTR_SLOTplus_BINARY_SUBSCR_DICT] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_BINARY_SUBSCR_DICT),
    [_LOAD_ATTR_SLOTplus_BINARY_SUBSCR_LIST_INT] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_BINARY_SUBSCR_LIST_INT),
    [_LOAD_ATTR_SLOTplus_BINARY_SUBSCR_STR_INT] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_BINARY_SUBSCR_STR_INT),
    [_LOAD_ATTR_SLOTplus_BINARY_SUBSCR_TUPLE_INT] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_BINARY_SUBSCR_TUPLE_INT),
    [_LOAD_ATTR_SLOTplus_BUILD_CONST_KEY_MAP] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_BUILD_CONST_KEY_MAP),
    [_LOAD_ATTR_SLOTplus_BUILD_LIST] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_BUILD_LIST),
    [_LOAD_ATTR_SLOTplus_BUILD_MAP] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_BUILD_MAP),
    [_LOAD_ATTR_SLOTplus_BUILD_SET] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_BUILD_SET),
    [_LOAD_ATTR_SLOTplus_BUILD_SLICE] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_BUILD_SLICE),
    [_LOAD_ATTR_SLOTplus_BUILD_STRING] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_BUILD_STRING),
    [_LOAD_ATTR_SLOTplus_BUILD_TUPLE] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_BUILD_TUPLE),
    [_LOAD_ATTR_SLOTplus_CALL_BUILTIN_CLASS] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_CALL_BUILTIN_CLASS),
    [_LOAD_ATTR_SLOTplus_CALL_BUILTIN_FAST] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_CALL_BUILTIN_FAST),
    [_LOAD_ATTR_SLOTplus_CALL_BUILTIN_FAST_WITH_KEYWORDS] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_CALL_BUILTIN_FAST_WITH_KEYWORDS),
    [_LOAD_ATTR_SLOTplus_CALL_BUILTIN_O] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_CALL_BUILTIN_O),
    [_LOAD_ATTR_SLOTplus_CALL_INTRINSIC_1] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_CALL_INTRINSIC_1),
    [_LOAD_ATTR_SLOTplus_CALL_INTRINSIC_2] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_CALL_INTRINSIC_2),
    [_LOAD_ATTR_SLOTplus_CALL_ISINSTANCE] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_CALL_ISINSTANCE),
    [_LOAD_ATTR_SLOTplus_CALL_LEN] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_CALL_LEN),
    [_LOAD_ATTR_SLOTplus_CALL_METHOD_DESCRIPTOR_FAST] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_CALL_METHOD_DESCRIPTOR_FAST),
    [_LOAD_ATTR_SLOTplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS),
    [_LOAD_ATTR_SLOTplus_CALL_METHOD_DESCRIPTOR_NOARGS] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_CALL_METHOD_DESCRIPTOR_NOARGS),
    [_LOAD_ATTR_SLOTplus_CALL_METHOD_DESCRIPTOR_O] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_CALL_METHOD_DESCRIPTOR_O),
    [_LOAD_ATTR_SLOTplus_CALL_STR_1] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_CALL_STR_1),
    [_LOAD_ATTR_SLOTplus_CALL_TUPLE_1] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_CALL_TUPLE_1),
    [_LOAD_ATTR_SLOTplus_CALL_TYPE_1] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_CALL_TYPE_1),
    [_LOAD_ATTR_SLOTplus_CHECK_ATTR_CLASS] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_CHECK_ATTR_CLASS),
    [_LOAD_ATTR_SLOTplus_CHECK_ATTR_METHOD_LAZY_DICT] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_CHECK_ATTR_METHOD_LAZY_DICT),
    [_LOAD_ATTR_SLOTplus_CHECK_ATTR_MODULE] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_CHECK_ATTR_MODULE),
    [_LOAD_ATTR_SLOTplus_CHECK_ATTR_WITH_HINT] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_CHECK_ATTR_WITH_HINT),
    [_LOAD_ATTR_SLOTplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS),
    [_LOAD_ATTR_SLOTplus_CHECK_EG_MATCH] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_CHECK_EG_MATCH),
    [_LOAD_ATTR_SLOTplus_CHECK_EXC_MATCH] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_CHECK_EXC_MATCH),
    [_LOAD_ATTR_SLOTplus_CHECK_FUNCTION_EXACT_ARGS] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_CHECK_FUNCTION_EXACT_ARGS),
    [_LOAD_ATTR_SLOTplus_CHECK_MANAGED_OBJECT_HAS_VALUES] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_CHECK_MANAGED_OBJECT_HAS_VALUES),
    [_LOAD_ATTR_SLOTplus_CHECK_PEP_523] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_CHECK_PEP_523),
    [_LOAD_ATTR_SLOTplus_CHECK_STACK_SPACE] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_CHECK_STACK_SPACE),
    [_LOAD_ATTR_SLOTplus_CHECK_VALIDITY] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_CHECK_VALIDITY),
    [_LOAD_ATTR_SLOTplus_COMPARE_OP] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_COMPARE_OP),
    [_LOAD_ATTR_SLOTplus_COMPARE_OP_FLOAT] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_COMPARE_OP_FLOAT),
    [_LOAD_ATTR_SLOTplus_COMPARE_OP_INT] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_COMPARE_OP_INT),
    [_LOAD_ATTR_SLOTplus_COMPARE_OP_STR] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_COMPARE_OP_STR),
    [_LOAD_ATTR_SLOTplus_CONTAINS_OP] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_CONTAINS_OP),
    [_LOAD_ATTR_SLOTplus_CONVERT_VALUE] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_CONVERT_VALUE),
    [_LOAD_ATTR_SLOTplus_COPY] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_COPY),
    [_LOAD_ATTR_SLOTplus_COPY_FREE_VARS] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_COPY_FREE_VARS),
    [_LOAD_ATTR_SLOTplus_DELETE_ATTR] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_DELETE_ATTR),
    [_LOAD_ATTR_SLOTplus_DELETE_DEREF] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_DELETE_DEREF),
    [_LOAD_ATTR_SLOTplus_DELETE_FAST] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_DELETE_FAST),
    [_LOAD_ATTR_SLOTplus_DELETE_GLOBAL] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_DELETE_GLOBAL),
    [_LOAD_ATTR_SLOTplus_DELETE_NAME] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_DELETE_NAME),
    [_LOAD_ATTR_SLOTplus_DELETE_SUBSCR] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_DELETE_SUBSCR),
    [_LOAD_ATTR_SLOTplus_DICT_MERGE] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_DICT_MERGE),
    [_LOAD_ATTR_SLOTplus_DICT_UPDATE] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_DICT_UPDATE),
    [_LOAD_ATTR_SLOTplus_END_SEND] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_END_SEND),
    [_LOAD_ATTR_SLOTplus_EXIT_INIT_CHECK] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_EXIT_INIT_CHECK),
    [_LOAD_ATTR_SLOTplus_EXIT_TRACE] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_EXIT_TRACE),
    [_LOAD_ATTR_SLOTplus_FORMAT_SIMPLE] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_FORMAT_SIMPLE),
    [_LOAD_ATTR_SLOTplus_FORMAT_WITH_SPEC] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_FORMAT_WITH_SPEC),
    [_LOAD_ATTR_SLOTplus_FOR_ITER_TIER_TWO] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_FOR_ITER_TIER_TWO),
    [_LOAD_ATTR_SLOTplus_GET_AITER] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_GET_AITER),
    [_LOAD_ATTR_SLOTplus_GET_ANEXT] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_GET_ANEXT),
    [_LOAD_ATTR_SLOTplus_GET_AWAITABLE] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_GET_AWAITABLE),
    [_LOAD_ATTR_SLOTplus_GET_ITER] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_GET_ITER),
    [_LOAD_ATTR_SLOTplus_GET_LEN] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_GET_LEN),
    [_LOAD_ATTR_SLOTplus_GET_YIELD_FROM_ITER] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_GET_YIELD_FROM_ITER),
    [_LOAD_ATTR_SLOTplus_GUARD_BOTH_FLOAT] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_GUARD_BOTH_FLOAT),
    [_LOAD_ATTR_SLOTplus_GUARD_BOTH_INT] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_GUARD_BOTH_INT),
    [_LOAD_ATTR_SLOTplus_GUARD_BOTH_UNICODE] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_GUARD_BOTH_UNICODE),
    [_LOAD_ATTR_SLOTplus_GUARD_BUILTINS_VERSION] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_GUARD_BUILTINS_VERSION),
    [_LOAD_ATTR_SLOTplus_GUARD_DORV_VALUES] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_GUARD_DORV_VALUES),
    [_LOAD_ATTR_SLOTplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT),
    [_LOAD_ATTR_SLOTplus_GUARD_GLOBALS_VERSION] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_GUARD_GLOBALS_VERSION),
    [_LOAD_ATTR_SLOTplus_GUARD_IS_FALSE_POP] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_GUARD_IS_FALSE_POP),
    [_LOAD_ATTR_SLOTplus_GUARD_IS_NONE_POP] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_GUARD_IS_NONE_POP),
    [_LOAD_ATTR_SLOTplus_GUARD_IS_NOT_NONE_POP] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_GUARD_IS_NOT_NONE_POP),
    [_LOAD_ATTR_SLOTplus_GUARD_IS_TRUE_POP] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_GUARD_IS_TRUE_POP),
    [_LOAD_ATTR_SLOTplus_GUARD_KEYS_VERSION] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_GUARD_KEYS_VERSION),
    [_LOAD_ATTR_SLOTplus_GUARD_NOT_EXHAUSTED_LIST] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_GUARD_NOT_EXHAUSTED_LIST),
    [_LOAD_ATTR_SLOTplus_GUARD_NOT_EXHAUSTED_RANGE] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_GUARD_NOT_EXHAUSTED_RANGE),
    [_LOAD_ATTR_SLOTplus_GUARD_NOT_EXHAUSTED_TUPLE] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_GUARD_NOT_EXHAUSTED_TUPLE),
    [_LOAD_ATTR_SLOTplus_GUARD_TYPE_VERSION] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_GUARD_TYPE_VERSION),
    [_LOAD_ATTR_SLOTplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS),
    [_LOAD_ATTR_SLOTplus_INIT_CALL_PY_EXACT_ARGS] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_INIT_CALL_PY_EXACT_ARGS),
    [_LOAD_ATTR_SLOTplus_INSERT] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_INSERT),
    [_LOAD_ATTR_SLOTplus_IS_NONE] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_IS_NONE),
    [_LOAD_ATTR_SLOTplus_IS_OP] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_IS_OP),
    [_LOAD_ATTR_SLOTplus_ITER_CHECK_LIST] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_ITER_CHECK_LIST),
    [_LOAD_ATTR_SLOTplus_ITER_CHECK_RANGE] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_ITER_CHECK_RANGE),
    [_LOAD_ATTR_SLOTplus_ITER_CHECK_TUPLE] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_ITER_CHECK_TUPLE),
    [_LOAD_ATTR_SLOTplus_ITER_NEXT_LIST] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_ITER_NEXT_LIST),
    [_LOAD_ATTR_SLOTplus_ITER_NEXT_RANGE] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_ITER_NEXT_RANGE),
    [_LOAD_ATTR_SLOTplus_ITER_NEXT_TUPLE] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_ITER_NEXT_TUPLE),
    [_LOAD_ATTR_SLOTplus_JUMP_TO_TOP] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_JUMP_TO_TOP),
    [_LOAD_ATTR_SLOTplus_LIST_APPEND] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_LIST_APPEND),
    [_LOAD_ATTR_SLOTplus_LIST_EXTEND] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_LIST_EXTEND),
    [_LOAD_ATTR_SLOTplus_LOAD_ASSERTION_ERROR] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_LOAD_ASSERTION_ERROR),
    [_LOAD_ATTR_SLOTplus_LOAD_ATTR] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_LOAD_ATTR),
    [_LOAD_ATTR_SLOTplus_LOAD_ATTR_CLASS] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_LOAD_ATTR_CLASS),
    [_LOAD_ATTR_SLOTplus_LOAD_ATTR_INSTANCE_VALUE] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_LOAD_ATTR_INSTANCE_VALUE),
    [_LOAD_ATTR_SLOTplus_LOAD_ATTR_METHOD_LAZY_DICT] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_LOAD_ATTR_METHOD_LAZY_DICT),
    [_LOAD_ATTR_SLOTplus_LOAD_ATTR_METHOD_NO_DICT] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_LOAD_ATTR_METHOD_NO_DICT),
    [_LOAD_ATTR_SLOTplus_LOAD_ATTR_METHOD_WITH_VALUES] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_LOAD_ATTR_METHOD_WITH_VALUES),
    [_LOAD_ATTR_SLOTplus_LOAD_ATTR_MODULE] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_LOAD_ATTR_MODULE),
    [_LOAD_ATTR_SLOTplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT),
    [_LOAD_ATTR_SLOTplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES),
    [_LOAD_ATTR_SLOTplus_LOAD_ATTR_SLOT] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_LOAD_ATTR_SLOT),
    [_LOAD_ATTR_SLOTplus_LOAD_ATTR_WITH_HINT] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_LOAD_ATTR_WITH_HINT),
    [_LOAD_ATTR_SLOTplus_LOAD_BUILD_CLASS] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_LOAD_BUILD_CLASS),
    [_LOAD_ATTR_SLOTplus_LOAD_CONST] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_LOAD_CONST),
    [_LOAD_ATTR_SLOTplus_LOAD_DEREF] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_LOAD_DEREF),
    [_LOAD_ATTR_SLOTplus_LOAD_FAST] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_LOAD_FAST),
    [_LOAD_ATTR_SLOTplus_LOAD_FAST_AND_CLEAR] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_LOAD_FAST_AND_CLEAR),
    [_LOAD_ATTR_SLOTplus_LOAD_FAST_CHECK] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_LOAD_FAST_CHECK),
    [_LOAD_ATTR_SLOTplus_LOAD_FROM_DICT_OR_DEREF] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_LOAD_FROM_DICT_OR_DEREF),
    [_LOAD_ATTR_SLOTplus_LOAD_FROM_DICT_OR_GLOBALS] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_LOAD_FROM_DICT_OR_GLOBALS),
    [_LOAD_ATTR_SLOTplus_LOAD_GLOBAL] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_LOAD_GLOBAL),
    [_LOAD_ATTR_SLOTplus_LOAD_GLOBAL_BUILTINS] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_LOAD_GLOBAL_BUILTINS),
    [_LOAD_ATTR_SLOTplus_LOAD_GLOBAL_MODULE] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_LOAD_GLOBAL_MODULE),
    [_LOAD_ATTR_SLOTplus_LOAD_LOCALS] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_LOAD_LOCALS),
    [_LOAD_ATTR_SLOTplus_LOAD_NAME] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_LOAD_NAME),
    [_LOAD_ATTR_SLOTplus_LOAD_SUPER_ATTR_ATTR] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_LOAD_SUPER_ATTR_ATTR),
    [_LOAD_ATTR_SLOTplus_LOAD_SUPER_ATTR_METHOD] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_LOAD_SUPER_ATTR_METHOD),
    [_LOAD_ATTR_SLOTplus_MAKE_CELL] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_MAKE_CELL),
    [_LOAD_ATTR_SLOTplus_MAKE_FUNCTION] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_MAKE_FUNCTION),
    [_LOAD_ATTR_SLOTplus_MAP_ADD] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_MAP_ADD),
    [_LOAD_ATTR_SLOTplus_MATCH_CLASS] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_MATCH_CLASS),
    [_LOAD_ATTR_SLOTplus_MATCH_KEYS] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_MATCH_KEYS),
    [_LOAD_ATTR_SLOTplus_MATCH_MAPPING] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_MATCH_MAPPING),
    [_LOAD_ATTR_SLOTplus_MATCH_SEQUENCE] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_MATCH_SEQUENCE),
    [_LOAD_ATTR_SLOTplus_NOP] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_NOP),
    [_LOAD_ATTR_SLOTplus_POP_EXCEPT] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_POP_EXCEPT),
    [_LOAD_ATTR_SLOTplus_POP_FRAME] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_POP_FRAME),
    [_LOAD_ATTR_SLOTplus_POP_TOP] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_POP_TOP),
    [_LOAD_ATTR_SLOTplus_PUSH_EXC_INFO] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_PUSH_EXC_INFO),
    [_LOAD_ATTR_SLOTplus_PUSH_FRAME] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_PUSH_FRAME),
    [_LOAD_ATTR_SLOTplus_PUSH_NULL] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_PUSH_NULL),
    [_LOAD_ATTR_SLOTplus_RESUME_CHECK] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_RESUME_CHECK),
    [_LOAD_ATTR_SLOTplus_SAVE_RETURN_OFFSET] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_SAVE_RETURN_OFFSET),
    [_LOAD_ATTR_SLOTplus_SETUP_ANNOTATIONS] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_SETUP_ANNOTATIONS),
    [_LOAD_ATTR_SLOTplus_SET_ADD] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_SET_ADD),
    [_LOAD_ATTR_SLOTplus_SET_FUNCTION_ATTRIBUTE] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_SET_FUNCTION_ATTRIBUTE),
    [_LOAD_ATTR_SLOTplus_SET_IP] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_SET_IP),
    [_LOAD_ATTR_SLOTplus_SET_UPDATE] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_SET_UPDATE),
    [_LOAD_ATTR_SLOTplus_STORE_ATTR] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_STORE_ATTR),
    [_LOAD_ATTR_SLOTplus_STORE_ATTR_INSTANCE_VALUE] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_STORE_ATTR_INSTANCE_VALUE),
    [_LOAD_ATTR_SLOTplus_STORE_ATTR_SLOT] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_STORE_ATTR_SLOT),
    [_LOAD_ATTR_SLOTplus_STORE_DEREF] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_STORE_DEREF),
    [_LOAD_ATTR_SLOTplus_STORE_FAST] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_STORE_FAST),
    [_LOAD_ATTR_SLOTplus_STORE_GLOBAL] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_STORE_GLOBAL),
    [_LOAD_ATTR_SLOTplus_STORE_NAME] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_STORE_NAME),
    [_LOAD_ATTR_SLOTplus_STORE_SLICE] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_STORE_SLICE),
    [_LOAD_ATTR_SLOTplus_STORE_SUBSCR] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_STORE_SUBSCR),
    [_LOAD_ATTR_SLOTplus_STORE_SUBSCR_DICT] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_STORE_SUBSCR_DICT),
    [_LOAD_ATTR_SLOTplus_STORE_SUBSCR_LIST_INT] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_STORE_SUBSCR_LIST_INT),
    [_LOAD_ATTR_SLOTplus_SWAP] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_SWAP),
    [_LOAD_ATTR_SLOTplus_TO_BOOL] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_TO_BOOL),
    [_LOAD_ATTR_SLOTplus_TO_BOOL_ALWAYS_TRUE] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_TO_BOOL_ALWAYS_TRUE),
    [_LOAD_ATTR_SLOTplus_TO_BOOL_BOOL] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_TO_BOOL_BOOL),
    [_LOAD_ATTR_SLOTplus_TO_BOOL_INT] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_TO_BOOL_INT),
    [_LOAD_ATTR_SLOTplus_TO_BOOL_LIST] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_TO_BOOL_LIST),
    [_LOAD_ATTR_SLOTplus_TO_BOOL_NONE] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_TO_BOOL_NONE),
    [_LOAD_ATTR_SLOTplus_TO_BOOL_STR] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_TO_BOOL_STR),
    [_LOAD_ATTR_SLOTplus_UNARY_INVERT] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_UNARY_INVERT),
    [_LOAD_ATTR_SLOTplus_UNARY_NEGATIVE] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_UNARY_NEGATIVE),
    [_LOAD_ATTR_SLOTplus_UNARY_NOT] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_UNARY_NOT),
    [_LOAD_ATTR_SLOTplus_UNPACK_EX] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_UNPACK_EX),
    [_LOAD_ATTR_SLOTplus_UNPACK_SEQUENCE] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_UNPACK_SEQUENCE),
    [_LOAD_ATTR_SLOTplus_UNPACK_SEQUENCE_LIST] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_UNPACK_SEQUENCE_LIST),
    [_LOAD_ATTR_SLOTplus_UNPACK_SEQUENCE_TUPLE] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_UNPACK_SEQUENCE_TUPLE),
    [_LOAD_ATTR_SLOTplus_UNPACK_SEQUENCE_TWO_TUPLE] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_UNPACK_SEQUENCE_TWO_TUPLE),
    [_LOAD_ATTR_SLOTplus_WITH_EXCEPT_START] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOTplus_WITH_EXCEPT_START),
};

#define GET_PATCHES() { \
    [HoleValue_CODE] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_CONTINUE] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_DATA] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_EXECUTOR] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_GOT] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_OPARG] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_OPERAND] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_TARGET] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_TOP] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_ZERO] = (uint64_t)0xBADBADBADBADBADB, \
}
